
Car_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fd8  08019270  08019270  00029270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e248  0801e248  00030404  2**0
                  CONTENTS
  4 .ARM          00000008  0801e248  0801e248  0002e248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e250  0801e250  00030404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e250  0801e250  0002e250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e254  0801e254  0002e254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0801e258  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030404  2**0
                  CONTENTS
 10 .bss          000076b8  20000404  20000404  00030404  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20007abc  20007abc  00030404  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028f4a  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ca9  00000000  00000000  0005937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  00060028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f38  00000000  00000000  000622c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003212a  00000000  00000000  00064200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037d3d  00000000  00000000  0009632a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee02e  00000000  00000000  000ce067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bc095  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a27c  00000000  00000000  001bc0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000404 	.word	0x20000404
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019254 	.word	0x08019254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000408 	.word	0x20000408
 80001cc:	08019254 	.word	0x08019254

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x98>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_ADC1_Init+0xa0>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC1_Init+0x98>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC1_Init+0x98>)
 80010fa:	f002 f895 	bl	8003228 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 8001104:	f000 fdd6 	bl	8001cb4 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_4;
 8001108:	2304      	movs	r3, #4
 800110a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001110:	2301      	movs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x98>)
 800111a:	f002 fa33 	bl	8003584 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 8001124:	f000 fdc6 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000420 	.word	0x20000420
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
    if(adcHandle->Instance==ADC1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_ADC_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d127      	bne.n	80011ae <HAL_ADC_MspInit+0x72>
    {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
        /* ADC1 clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_ADC_MspInit+0x80>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA4         ------> ADC1_IN4
        */
        GPIO_InitStruct.Pin = BatteryLevel_Pin;
 8001196:	2310      	movs	r3, #16
 8001198:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(BatteryLevel_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_ADC_MspInit+0x84>)
 80011aa:	f003 f929 	bl	8004400 <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
    }
}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40012000 	.word	0x40012000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_DMA_Init+0x78>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <MX_DMA_Init+0x78>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_DMA_Init+0x78>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_DMA_Init+0x78>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_DMA_Init+0x78>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_DMA_Init+0x78>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 14, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210e      	movs	r1, #14
 8001206:	200f      	movs	r0, #15
 8001208:	f002 fcb5 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800120c:	200f      	movs	r0, #15
 800120e:	f002 fcce 	bl	8003bae <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 14, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	210e      	movs	r1, #14
 8001216:	203b      	movs	r0, #59	; 0x3b
 8001218:	f002 fcad 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800121c:	203b      	movs	r0, #59	; 0x3b
 800121e:	f002 fcc6 	bl	8003bae <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 14, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	210e      	movs	r1, #14
 8001226:	2045      	movs	r0, #69	; 0x45
 8001228:	f002 fca5 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800122c:	2045      	movs	r0, #69	; 0x45
 800122e:	f002 fcbe 	bl	8003bae <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <MX_GPIO_Init>:
              * Output
              * EVENT_OUT
              * EXTI
*/
void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <MX_GPIO_Init+0x1f0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a74      	ldr	r2, [pc, #464]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a6d      	ldr	r2, [pc, #436]	; (8001430 <MX_GPIO_Init+0x1f0>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a66      	ldr	r2, [pc, #408]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a58      	ldr	r2, [pc, #352]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a51      	ldr	r2, [pc, #324]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a43      	ldr	r2, [pc, #268]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <MX_GPIO_Init+0x1f0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOF, Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001336:	2200      	movs	r2, #0
 8001338:	f240 41fc 	movw	r1, #1276	; 0x4fc
 800133c:	483d      	ldr	r0, [pc, #244]	; (8001434 <MX_GPIO_Init+0x1f4>)
 800133e:	f003 fa13 	bl	8004768 <HAL_GPIO_WritePin>
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOG, Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 8001342:	2200      	movs	r2, #0
 8001344:	217f      	movs	r1, #127	; 0x7f
 8001346:	483c      	ldr	r0, [pc, #240]	; (8001438 <MX_GPIO_Init+0x1f8>)
 8001348:	f003 fa0e 	bl	8004768 <HAL_GPIO_WritePin>
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	483a      	ldr	r0, [pc, #232]	; (800143c <MX_GPIO_Init+0x1fc>)
 8001354:	f003 fa08 	bl	8004768 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = Key_Stop_Pin;
 8001358:	2308      	movs	r3, #8
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Key_Stop_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <MX_GPIO_Init+0x200>)
 800136e:	f003 f847 	bl	8004400 <HAL_GPIO_Init>

    /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                                                     PFPin PFPin PFPin */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001372:	f240 43fc 	movw	r3, #1276	; 0x4fc
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	482a      	ldr	r0, [pc, #168]	; (8001434 <MX_GPIO_Init+0x1f4>)
 800138c:	f003 f838 	bl	8004400 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SIM_SD_Inser_Pin;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800139a:	2302      	movs	r3, #2
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_SD_Inser_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <MX_GPIO_Init+0x1f4>)
 80013a6:	f003 f82b 	bl	8004400 <HAL_GPIO_Init>

    /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                                                     PGPin PGPin PGPin */
    GPIO_InitStruct.Pin = Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 80013aa:	237f      	movs	r3, #127	; 0x7f
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <MX_GPIO_Init+0x1f8>)
 80013c2:	f003 f81d 	bl	8004400 <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin */
    GPIO_InitStruct.Pin = Infrared1_Pin|Infrared2_Pin;
 80013c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <MX_GPIO_Init+0x1fc>)
 80013dc:	f003 f810 	bl	8004400 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 80013e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <MX_GPIO_Init+0x1fc>)
 80013fa:	f003 f801 	bl	8004400 <HAL_GPIO_Init>

    /*Configure GPIO pins : PDPin PDPin */
    GPIO_InitStruct.Pin = Infrared3_Pin|Infrared4_Pin;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_GPIO_Init+0x204>)
 8001414:	f002 fff4 	bl	8004400 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2102      	movs	r1, #2
 800141c:	2009      	movs	r0, #9
 800141e:	f002 fbaa 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001422:	2009      	movs	r0, #9
 8001424:	f002 fbc3 	bl	8003bae <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40020400 	.word	0x40020400
 8001440:	40021000 	.word	0x40021000
 8001444:	40020c00 	.word	0x40020c00

08001448 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C1_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C1_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C1_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C1_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C1_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C1_Init+0x50>)
 8001486:	f003 f9a1 	bl	80047cc <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001490:	f000 fc10 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000468 	.word	0x20000468
 800149c:	40005400 	.word	0x40005400
 80014a0:	00061a80 	.word	0x00061a80

080014a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
    if(i2cHandle->Instance==I2C1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_I2C_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12b      	bne.n	800151e <HAL_I2C_MspInit+0x7a>
    {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_I2C_MspInit+0x88>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_I2C_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6         ------> I2C1_SCL
        PB7         ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 80014e2:	23c0      	movs	r3, #192	; 0xc0
 80014e4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e6:	2312      	movs	r3, #18
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f2:	2304      	movs	r3, #4
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <HAL_I2C_MspInit+0x8c>)
 80014fe:	f002 ff7f 	bl	8004400 <HAL_GPIO_Init>

        /* I2C1 clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_I2C_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_I2C_MspInit+0x88>)
 800150c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_I2C_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
    }
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40005400 	.word	0x40005400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001538:	f001 fde0 	bl	80030fc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800153c:	f000 f856 	bl	80015ec <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001540:	f7ff fe7e 	bl	8001240 <MX_GPIO_Init>
    MX_DMA_Init();
 8001544:	f7ff fe3e 	bl	80011c4 <MX_DMA_Init>
    MX_TIM14_Init();
 8001548:	f001 fa4c 	bl	80029e4 <MX_TIM14_Init>
    MX_TIM1_Init();
 800154c:	f000 ffa6 	bl	800249c <MX_TIM1_Init>
    MX_TIM3_Init();
 8001550:	f000 fffc 	bl	800254c <MX_TIM3_Init>
    MX_TIM4_Init();
 8001554:	f001 f892 	bl	800267c <MX_TIM4_Init>
    MX_TIM5_Init();
 8001558:	f001 f8e4 	bl	8002724 <MX_TIM5_Init>
    MX_ADC1_Init();
 800155c:	f7ff fd9c 	bl	8001098 <MX_ADC1_Init>
    MX_TIM6_Init();
 8001560:	f001 f934 	bl	80027cc <MX_TIM6_Init>
    MX_USART1_UART_Init();
 8001564:	f001 fcc8 	bl	8002ef8 <MX_USART1_UART_Init>
    MX_TIM7_Init();
 8001568:	f001 f966 	bl	8002838 <MX_TIM7_Init>
    MX_TIM13_Init();
 800156c:	f001 fa16 	bl	800299c <MX_TIM13_Init>
    MX_SPI1_Init();
 8001570:	f000 fcb8 	bl	8001ee4 <MX_SPI1_Init>
    MX_SPI2_Init();
 8001574:	f000 fcec 	bl	8001f50 <MX_SPI2_Init>
    MX_TIM8_Init();
 8001578:	f001 f994 	bl	80028a4 <MX_TIM8_Init>
    MX_USART2_UART_Init();
 800157c:	f001 fce6 	bl	8002f4c <MX_USART2_UART_Init>
    MX_SDIO_SD_Init();
 8001580:	f000 fb9e 	bl	8001cc0 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8001584:	f009 fca4 	bl	800aed0 <MX_FATFS_Init>
    MX_I2C1_Init();
 8001588:	f7ff ff5e 	bl	8001448 <MX_I2C1_Init>
    MX_TIM11_Init();
 800158c:	f001 f9e2 	bl	8002954 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	//初始化呼吸灯 指示运行
	HAL_TIM_Base_Start_IT(&htim14);
 8001590:	4812      	ldr	r0, [pc, #72]	; (80015dc <main+0xa8>)
 8001592:	f006 fcf3 	bl	8007f7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	4810      	ldr	r0, [pc, #64]	; (80015dc <main+0xa8>)
 800159a:	f006 fde7 	bl	800816c <HAL_TIM_PWM_Start>
	//清空休眠计数
	Clean_Dormancy_Count();
 800159e:	f00f fb03 	bl	8010ba8 <Clean_Dormancy_Count>
	//初始化文件系统
	Init_FATFS();
 80015a2:	f011 fbe7 	bl	8012d74 <Init_FATFS>
	//使能定时器6中断 定期更新速度
	HAL_TIM_Base_Start_IT(&htim6);
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <main+0xac>)
 80015a8:	f006 fce8 	bl	8007f7c <HAL_TIM_Base_Start_IT>
	//初始化OLED
	Screen_Init();
 80015ac:	f012 f944 	bl	8013838 <Screen_Init>

	//初始化串口
	Init_USART();
 80015b0:	f012 faaa 	bl	8013b08 <Init_USART>

	//初始化小车控制系统
	InitCar();
 80015b4:	f011 f94e 	bl	8012854 <InitCar>
	//初始化地图
	InitMap();
 80015b8:	f010 fb10 	bl	8011bdc <InitMap>
	//初始化MPU
	InitMPU();
 80015bc:	f00f fa96 	bl	8010aec <InitMPU>
	//定期更新偏航角
	HAL_TIM_Base_Start_IT(&htim11);
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <main+0xb0>)
 80015c2:	f006 fcdb 	bl	8007f7c <HAL_TIM_Base_Start_IT>
	//测试
	//SetMotorSpeed(Motor_3, 100);
	//SetCarSpeed(10, 0, 0);

	LED2_H();
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <main+0xb4>)
 80015ce:	f003 f8cb 	bl	8004768 <HAL_GPIO_WritePin>
	while (1)
	{
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
		OLED_Proc();
 80015d2:	f000 f875 	bl	80016c0 <OLED_Proc>
		SendData_Proc();
 80015d6:	f000 f987 	bl	80018e8 <SendData_Proc>
		OLED_Proc();
 80015da:	e7fa      	b.n	80015d2 <main+0x9e>
 80015dc:	200011c4 	.word	0x200011c4
 80015e0:	2000105c 	.word	0x2000105c
 80015e4:	20001134 	.word	0x20001134
 80015e8:	40021400 	.word	0x40021400

080015ec <SystemClock_Config>:
/**
    * @brief System Clock Configuration
    * @retval None
    */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	; 0x50
 80015f0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2230      	movs	r2, #48	; 0x30
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f012 fb8a 	bl	8013d14 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <SystemClock_Config+0xcc>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <SystemClock_Config+0xcc>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a21      	ldr	r2, [pc, #132]	; (80016bc <SystemClock_Config+0xd0>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <SystemClock_Config+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2310      	movs	r3, #16
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800165c:	2308      	movs	r3, #8
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8001660:	23a8      	movs	r3, #168	; 0xa8
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001664:	2302      	movs	r3, #2
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001668:	2307      	movs	r3, #7
 800166a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4618      	mov	r0, r3
 8001672:	f004 f883 	bl	800577c <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x94>
    {
        Error_Handler();
 800167c:	f000 fb1a 	bl	8001cb4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	60fb      	str	r3, [r7, #12]
                                                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001690:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001696:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2105      	movs	r1, #5
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fae4 	bl	8005c6c <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xc2>
    {
        Error_Handler();
 80016aa:	f000 fb03 	bl	8001cb4 <Error_Handler>
    }
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	; 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <OLED_Proc>:

/* USER CODE BEGIN 4 */

//显示屏
void OLED_Proc()
{
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af02      	add	r7, sp, #8
	if (uwTick - uwTick_OLED < 500)
 80016c6:	4b79      	ldr	r3, [pc, #484]	; (80018ac <OLED_Proc+0x1ec>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <OLED_Proc+0x1f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d4:	f0c0 80e6 	bcc.w	80018a4 <OLED_Proc+0x1e4>
	{
		return;
	}
	uwTick_OLED = uwTick;
 80016d8:	4b74      	ldr	r3, [pc, #464]	; (80018ac <OLED_Proc+0x1ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a74      	ldr	r2, [pc, #464]	; (80018b0 <OLED_Proc+0x1f0>)
 80016de:	6013      	str	r3, [r2, #0]

	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Actual_Speeds[0], Motor_Actual_Speeds[1]);
 80016e0:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <OLED_Proc+0x1f4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff2f 	bl	8000548 <__aeabi_f2d>
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
 80016ee:	4b71      	ldr	r3, [pc, #452]	; (80018b4 <OLED_Proc+0x1f4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff28 	bl	8000548 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001700:	4622      	mov	r2, r4
 8001702:	462b      	mov	r3, r5
 8001704:	496c      	ldr	r1, [pc, #432]	; (80018b8 <OLED_Proc+0x1f8>)
 8001706:	486d      	ldr	r0, [pc, #436]	; (80018bc <OLED_Proc+0x1fc>)
 8001708:	f013 fa1a 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(0, String_Line, Font_Size);
 800170c:	2218      	movs	r2, #24
 800170e:	496b      	ldr	r1, [pc, #428]	; (80018bc <OLED_Proc+0x1fc>)
 8001710:	2000      	movs	r0, #0
 8001712:	f012 f8a1 	bl	8013858 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D: %5.1f", Motor_Actual_Speeds[2], Motor_Actual_Speeds[3]);
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <OLED_Proc+0x1f4>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff14 	bl	8000548 <__aeabi_f2d>
 8001720:	4604      	mov	r4, r0
 8001722:	460d      	mov	r5, r1
 8001724:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <OLED_Proc+0x1f4>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff0d 	bl	8000548 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	e9cd 2300 	strd	r2, r3, [sp]
 8001736:	4622      	mov	r2, r4
 8001738:	462b      	mov	r3, r5
 800173a:	4961      	ldr	r1, [pc, #388]	; (80018c0 <OLED_Proc+0x200>)
 800173c:	485f      	ldr	r0, [pc, #380]	; (80018bc <OLED_Proc+0x1fc>)
 800173e:	f013 f9ff 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(1, String_Line, Font_Size);
 8001742:	2218      	movs	r2, #24
 8001744:	495d      	ldr	r1, [pc, #372]	; (80018bc <OLED_Proc+0x1fc>)
 8001746:	2001      	movs	r0, #1
 8001748:	f012 f886 	bl	8013858 <Screen_ShowStringLine>

	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Expected_Speeds[0], Motor_Expected_Speeds[1]);
 800174c:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <OLED_Proc+0x204>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <OLED_Proc+0x204>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9cd 2300 	strd	r2, r3, [sp]
 800176c:	4622      	mov	r2, r4
 800176e:	462b      	mov	r3, r5
 8001770:	4951      	ldr	r1, [pc, #324]	; (80018b8 <OLED_Proc+0x1f8>)
 8001772:	4852      	ldr	r0, [pc, #328]	; (80018bc <OLED_Proc+0x1fc>)
 8001774:	f013 f9e4 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(3, String_Line, Font_Size);
 8001778:	2218      	movs	r2, #24
 800177a:	4950      	ldr	r1, [pc, #320]	; (80018bc <OLED_Proc+0x1fc>)
 800177c:	2003      	movs	r0, #3
 800177e:	f012 f86b 	bl	8013858 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Expected_Speeds[2], Motor_Expected_Speeds[3]);
 8001782:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <OLED_Proc+0x204>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fede 	bl	8000548 <__aeabi_f2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <OLED_Proc+0x204>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fed7 	bl	8000548 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9cd 2300 	strd	r2, r3, [sp]
 80017a2:	4622      	mov	r2, r4
 80017a4:	462b      	mov	r3, r5
 80017a6:	4948      	ldr	r1, [pc, #288]	; (80018c8 <OLED_Proc+0x208>)
 80017a8:	4844      	ldr	r0, [pc, #272]	; (80018bc <OLED_Proc+0x1fc>)
 80017aa:	f013 f9c9 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(4, String_Line, Font_Size);
 80017ae:	2218      	movs	r2, #24
 80017b0:	4942      	ldr	r1, [pc, #264]	; (80018bc <OLED_Proc+0x1fc>)
 80017b2:	2004      	movs	r0, #4
 80017b4:	f012 f850 	bl	8013858 <Screen_ShowStringLine>

	sprintf(String_Line, "Yaw:%5.1f", YawAngle);
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <OLED_Proc+0x20c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fec3 	bl	8000548 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4942      	ldr	r1, [pc, #264]	; (80018d0 <OLED_Proc+0x210>)
 80017c8:	483c      	ldr	r0, [pc, #240]	; (80018bc <OLED_Proc+0x1fc>)
 80017ca:	f013 f9b9 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(6, String_Line, Font_Size);
 80017ce:	2218      	movs	r2, #24
 80017d0:	493a      	ldr	r1, [pc, #232]	; (80018bc <OLED_Proc+0x1fc>)
 80017d2:	2006      	movs	r0, #6
 80017d4:	f012 f840 	bl	8013858 <Screen_ShowStringLine>

	UpdateInfraredData();
 80017d8:	f010 ffa0 	bl	801271c <UpdateInfraredData>
	sprintf(String_Line, "     %c %c %c %c", Infrared_Datas[Infrared_Right] ? '#' : ' ', Infrared_Datas[Infrared_Center_Right] ? '#' : ' ', Infrared_Datas[Infrared_Center_Left] ? '#' : ' ', Infrared_Datas[Infrared_Left] ? '#' : ' ');
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <OLED_Proc+0x214>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <OLED_Proc+0x128>
 80017e4:	2123      	movs	r1, #35	; 0x23
 80017e6:	e000      	b.n	80017ea <OLED_Proc+0x12a>
 80017e8:	2120      	movs	r1, #32
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <OLED_Proc+0x214>)
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <OLED_Proc+0x136>
 80017f2:	2023      	movs	r0, #35	; 0x23
 80017f4:	e000      	b.n	80017f8 <OLED_Proc+0x138>
 80017f6:	2020      	movs	r0, #32
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <OLED_Proc+0x214>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <OLED_Proc+0x144>
 8001800:	2323      	movs	r3, #35	; 0x23
 8001802:	e000      	b.n	8001806 <OLED_Proc+0x146>
 8001804:	2320      	movs	r3, #32
 8001806:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <OLED_Proc+0x214>)
 8001808:	7852      	ldrb	r2, [r2, #1]
 800180a:	2a00      	cmp	r2, #0
 800180c:	d001      	beq.n	8001812 <OLED_Proc+0x152>
 800180e:	2223      	movs	r2, #35	; 0x23
 8001810:	e000      	b.n	8001814 <OLED_Proc+0x154>
 8001812:	2220      	movs	r2, #32
 8001814:	9201      	str	r2, [sp, #4]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4603      	mov	r3, r0
 800181a:	460a      	mov	r2, r1
 800181c:	492e      	ldr	r1, [pc, #184]	; (80018d8 <OLED_Proc+0x218>)
 800181e:	4827      	ldr	r0, [pc, #156]	; (80018bc <OLED_Proc+0x1fc>)
 8001820:	f013 f98e 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(7, String_Line, Font_Size);
 8001824:	2218      	movs	r2, #24
 8001826:	4925      	ldr	r1, [pc, #148]	; (80018bc <OLED_Proc+0x1fc>)
 8001828:	2007      	movs	r0, #7
 800182a:	f012 f815 	bl	8013858 <Screen_ShowStringLine>

	sprintf(String_Line, "CPU: %.2f C    MPU: %.2f C  ", GetInternalTemperature(), Get_MPU_Temperature());
 800182e:	f010 fcef 	bl	8012210 <GetInternalTemperature>
 8001832:	ee10 3a10 	vmov	r3, s0
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe86 	bl	8000548 <__aeabi_f2d>
 800183c:	4604      	mov	r4, r0
 800183e:	460d      	mov	r5, r1
 8001840:	f00f f98a 	bl	8010b58 <Get_MPU_Temperature>
 8001844:	ee10 3a10 	vmov	r3, s0
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9cd 2300 	strd	r2, r3, [sp]
 8001856:	4622      	mov	r2, r4
 8001858:	462b      	mov	r3, r5
 800185a:	4920      	ldr	r1, [pc, #128]	; (80018dc <OLED_Proc+0x21c>)
 800185c:	4817      	ldr	r0, [pc, #92]	; (80018bc <OLED_Proc+0x1fc>)
 800185e:	f013 f96f 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(13, String_Line, Font_Size_Small);
 8001862:	2210      	movs	r2, #16
 8001864:	4915      	ldr	r1, [pc, #84]	; (80018bc <OLED_Proc+0x1fc>)
 8001866:	200d      	movs	r0, #13
 8001868:	f011 fff6 	bl	8013858 <Screen_ShowStringLine>
	sprintf(String_Line, "%.2f V         %d s  ", GetBatteryLevel(), (int) uwTick / 1000);
 800186c:	f010 fc94 	bl	8012198 <GetBatteryLevel>
 8001870:	ee10 3a10 	vmov	r3, s0
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe67 	bl	8000548 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	490b      	ldr	r1, [pc, #44]	; (80018ac <OLED_Proc+0x1ec>)
 8001880:	6809      	ldr	r1, [r1, #0]
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <OLED_Proc+0x220>)
 8001884:	fb80 4001 	smull	r4, r0, r0, r1
 8001888:	1180      	asrs	r0, r0, #6
 800188a:	17c9      	asrs	r1, r1, #31
 800188c:	1a41      	subs	r1, r0, r1
 800188e:	9100      	str	r1, [sp, #0]
 8001890:	4914      	ldr	r1, [pc, #80]	; (80018e4 <OLED_Proc+0x224>)
 8001892:	480a      	ldr	r0, [pc, #40]	; (80018bc <OLED_Proc+0x1fc>)
 8001894:	f013 f954 	bl	8014b40 <siprintf>
	Screen_ShowStringLine(14, String_Line, Font_Size_Small);
 8001898:	2210      	movs	r2, #16
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <OLED_Proc+0x1fc>)
 800189c:	200e      	movs	r0, #14
 800189e:	f011 ffdb 	bl	8013858 <Screen_ShowStringLine>
 80018a2:	e000      	b.n	80018a6 <OLED_Proc+0x1e6>
		return;
 80018a4:	bf00      	nop

}
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bdb0      	pop	{r4, r5, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20001294 	.word	0x20001294
 80018b0:	200004bc 	.word	0x200004bc
 80018b4:	20001c40 	.word	0x20001c40
 80018b8:	08019270 	.word	0x08019270
 80018bc:	200004c4 	.word	0x200004c4
 80018c0:	08019284 	.word	0x08019284
 80018c4:	20001c54 	.word	0x20001c54
 80018c8:	08019298 	.word	0x08019298
 80018cc:	20001304 	.word	0x20001304
 80018d0:	080192ac 	.word	0x080192ac
 80018d4:	20001c50 	.word	0x20001c50
 80018d8:	080192b8 	.word	0x080192b8
 80018dc:	080192cc 	.word	0x080192cc
 80018e0:	10624dd3 	.word	0x10624dd3
 80018e4:	080192ec 	.word	0x080192ec

080018e8 <SendData_Proc>:

//向上位机发送当前小车数据
void SendData_Proc()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	if (uwTick - uwTick_SendData < 500)
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <SendData_Proc+0xa8>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <SendData_Proc+0xac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018fa:	d347      	bcc.n	800198c <SendData_Proc+0xa4>
	{
		return;
	}
	uwTick_SendData = uwTick;
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <SendData_Proc+0xa8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a24      	ldr	r2, [pc, #144]	; (8001994 <SendData_Proc+0xac>)
 8001902:	6013      	str	r3, [r2, #0]

//发送数据

	TX_String[0] = ((uint16_t) (int16_t) (Motor_Expected_Speeds[0] * 100));
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <SendData_Proc+0xb0>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800199c <SendData_Proc+0xb4>
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001916:	ee17 3a90 	vmov	r3, s15
 800191a:	b21b      	sxth	r3, r3
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <SendData_Proc+0xb8>)
 8001920:	801a      	strh	r2, [r3, #0]
	TX_String[1] = ((uint16_t) (int16_t) (Motor_Expected_Speeds[1] * 100));
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <SendData_Proc+0xb0>)
 8001924:	edd3 7a01 	vldr	s15, [r3, #4]
 8001928:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800199c <SendData_Proc+0xb4>
 800192c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001934:	ee17 3a90 	vmov	r3, s15
 8001938:	b21b      	sxth	r3, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <SendData_Proc+0xb8>)
 800193e:	805a      	strh	r2, [r3, #2]
	TX_String[2] = ((uint16_t) (int16_t) (Motor_Expected_Axis_Speeds[0] * 100));
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <SendData_Proc+0xbc>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800199c <SendData_Proc+0xb4>
 800194a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001952:	ee17 3a90 	vmov	r3, s15
 8001956:	b21b      	sxth	r3, r3
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <SendData_Proc+0xb8>)
 800195c:	809a      	strh	r2, [r3, #4]
	TX_String[3] = ((uint16_t) (int16_t) (Motor_Expected_Axis_Speeds[2] * 100));
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <SendData_Proc+0xbc>)
 8001960:	edd3 7a02 	vldr	s15, [r3, #8]
 8001964:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800199c <SendData_Proc+0xb4>
 8001968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	b21b      	sxth	r3, r3
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <SendData_Proc+0xb8>)
 800197a:	80da      	strh	r2, [r3, #6]

	HAL_UART_Transmit(&huart1, (uint8_t*) TX_String, Motor_Number * 2, 0xFFFF);
 800197c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001980:	2208      	movs	r2, #8
 8001982:	4907      	ldr	r1, [pc, #28]	; (80019a0 <SendData_Proc+0xb8>)
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <SendData_Proc+0xc0>)
 8001986:	f007 fd04 	bl	8009392 <HAL_UART_Transmit>
 800198a:	e000      	b.n	800198e <SendData_Proc+0xa6>
		return;
 800198c:	bf00      	nop
}
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20001294 	.word	0x20001294
 8001994:	200004c0 	.word	0x200004c0
 8001998:	20001c54 	.word	0x20001c54
 800199c:	42c80000 	.word	0x42c80000
 80019a0:	20000c94 	.word	0x20000c94
 80019a4:	20001c64 	.word	0x20001c64
 80019a8:	2000120c 	.word	0x2000120c

080019ac <ProcessReceivedData>:

//接收数据
void ProcessReceivedData()
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	short speed = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	80fb      	strh	r3, [r7, #6]
	Direction dir;
	uint8_t point = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	713b      	strb	r3, [r7, #4]
	if (RxData_Flag[UART_1] == RX_UnRead)
 80019ba:	4b91      	ldr	r3, [pc, #580]	; (8001c00 <ProcessReceivedData+0x254>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	f040 8114 	bne.w	8001bec <ProcessReceivedData+0x240>
	{
		//清空标志位
		CleanRxData(UART_1);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f012 f93b 	bl	8013c40 <CleanRxData>
		//清空休眠计数
		Clean_Dormancy_Count();
 80019ca:	f00f f8ed 	bl	8010ba8 <Clean_Dormancy_Count>

		switch (RxData[UART_1][0])
 80019ce:	4b8d      	ldr	r3, [pc, #564]	; (8001c04 <ProcessReceivedData+0x258>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	3b41      	subs	r3, #65	; 0x41
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	f200 810b 	bhi.w	8001bf0 <ProcessReceivedData+0x244>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <ProcessReceivedData+0x34>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	08001b41 	.word	0x08001b41
 80019e8:	08001bbd 	.word	0x08001bbd
 80019ec:	08001bdb 	.word	0x08001bdb
		{
			case 'A':
				switch (RxData[UART_1][1])
 80019f0:	4b84      	ldr	r3, [pc, #528]	; (8001c04 <ProcessReceivedData+0x258>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	3b30      	subs	r3, #48	; 0x30
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	f200 80fc 	bhi.w	8001bf4 <ProcessReceivedData+0x248>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <ProcessReceivedData+0x58>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001b33 	.word	0x08001b33
 8001a08:	08001a2d 	.word	0x08001a2d
 8001a0c:	08001a49 	.word	0x08001a49
 8001a10:	08001a6b 	.word	0x08001a6b
 8001a14:	08001a8b 	.word	0x08001a8b
 8001a18:	08001ab1 	.word	0x08001ab1
 8001a1c:	08001ad1 	.word	0x08001ad1
 8001a20:	08001af3 	.word	0x08001af3
 8001a24:	08001b0f 	.word	0x08001b0f
 8001a28:	08001b2d 	.word	0x08001b2d
				{
					case '1':	//上
						AddCarSpeed(Speed_Step * 2, 0, 0);
 8001a2c:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <ProcessReceivedData+0x25c>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a36:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001c0c <ProcessReceivedData+0x260>
 8001a3a:	eddf 0a74 	vldr	s1, [pc, #464]	; 8001c0c <ProcessReceivedData+0x260>
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	f011 f865 	bl	8012b10 <AddCarSpeed>
						break;
 8001a46:	e07a      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '2':	//右上
						AddCarSpeed(Speed_Step, 0, -Direction_Step);
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <ProcessReceivedData+0x25c>)
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <ProcessReceivedData+0x264>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	eef1 7a67 	vneg.f32	s15, s15
 8001a58:	eeb0 1a67 	vmov.f32	s2, s15
 8001a5c:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001c0c <ProcessReceivedData+0x260>
 8001a60:	eeb0 0a47 	vmov.f32	s0, s14
 8001a64:	f011 f854 	bl	8012b10 <AddCarSpeed>
						break;
 8001a68:	e069      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '3':	//右
						AddCarSpeed(0, 0, -Direction_Step * 2);
 8001a6a:	4b69      	ldr	r3, [pc, #420]	; (8001c10 <ProcessReceivedData+0x264>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eef1 7a67 	vneg.f32	s15, s15
 8001a74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a78:	eeb0 1a67 	vmov.f32	s2, s15
 8001a7c:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001c0c <ProcessReceivedData+0x260>
 8001a80:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001c0c <ProcessReceivedData+0x260>
 8001a84:	f011 f844 	bl	8012b10 <AddCarSpeed>
						break;
 8001a88:	e059      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '4':	//右下
						AddCarSpeed(-Speed_Step, 0, -Direction_Step);
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <ProcessReceivedData+0x25c>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eeb1 7a67 	vneg.f32	s14, s15
 8001a94:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <ProcessReceivedData+0x264>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	eef1 7a67 	vneg.f32	s15, s15
 8001a9e:	eeb0 1a67 	vmov.f32	s2, s15
 8001aa2:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001c0c <ProcessReceivedData+0x260>
 8001aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aaa:	f011 f831 	bl	8012b10 <AddCarSpeed>

						break;
 8001aae:	e046      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '5':	//下
						AddCarSpeed(-Speed_Step * 2, 0, 0);
 8001ab0:	4b55      	ldr	r3, [pc, #340]	; (8001c08 <ProcessReceivedData+0x25c>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eef1 7a67 	vneg.f32	s15, s15
 8001aba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001abe:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001c0c <ProcessReceivedData+0x260>
 8001ac2:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001c0c <ProcessReceivedData+0x260>
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	f011 f821 	bl	8012b10 <AddCarSpeed>
						break;
 8001ace:	e036      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '6':	//左下
						AddCarSpeed(-Speed_Step, 0, Direction_Step);
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <ProcessReceivedData+0x25c>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	eef1 7a67 	vneg.f32	s15, s15
 8001ada:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <ProcessReceivedData+0x264>)
 8001adc:	ed93 7a00 	vldr	s14, [r3]
 8001ae0:	eeb0 1a47 	vmov.f32	s2, s14
 8001ae4:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001c0c <ProcessReceivedData+0x260>
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	f011 f810 	bl	8012b10 <AddCarSpeed>
						break;
 8001af0:	e025      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '7':	//左
						AddCarSpeed(0, 0, Direction_Step * 2);
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <ProcessReceivedData+0x264>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001afc:	eeb0 1a67 	vmov.f32	s2, s15
 8001b00:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001c0c <ProcessReceivedData+0x260>
 8001b04:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001c0c <ProcessReceivedData+0x260>
 8001b08:	f011 f802 	bl	8012b10 <AddCarSpeed>
						break;
 8001b0c:	e017      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '8':	//左上
						AddCarSpeed(Speed_Step, 0, Direction_Step);
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <ProcessReceivedData+0x25c>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <ProcessReceivedData+0x264>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001b1e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001c0c <ProcessReceivedData+0x260>
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	f010 fff3 	bl	8012b10 <AddCarSpeed>
						break;
 8001b2a:	e008      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '9':	//停止
						Status_Control_Clear();
 8001b2c:	f010 f8ae 	bl	8011c8c <Status_Control_Clear>
						break;
 8001b30:	e005      	b.n	8001b3e <ProcessReceivedData+0x192>
					case '0':	//开始
						Status_Control_Start(Command_Mode_OneTime, 15);
 8001b32:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001b36:	2001      	movs	r0, #1
 8001b38:	f010 f8d0 	bl	8011cdc <Status_Control_Start>
						break;
 8001b3c:	bf00      	nop
				}
				break;
 8001b3e:	e059      	b.n	8001bf4 <ProcessReceivedData+0x248>
			case 'B':

				for (uint8_t i = 0; i < Motor_Number; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	717b      	strb	r3, [r7, #5]
 8001b44:	e036      	b.n	8001bb4 <ProcessReceivedData+0x208>
				{
					speed = (RxData[UART_1][i * 3 + 2] - '0') * 10 + (RxData[UART_1][i * 3 + 3] - '0');
 8001b46:	797a      	ldrb	r2, [r7, #5]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	4a2c      	ldr	r2, [pc, #176]	; (8001c04 <ProcessReceivedData+0x258>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	3b30      	subs	r3, #48	; 0x30
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	b299      	uxth	r1, r3
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <ProcessReceivedData+0x258>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	440b      	add	r3, r1
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b30      	subs	r3, #48	; 0x30
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	80fb      	strh	r3, [r7, #6]
					if (RxData[UART_1][i * 3 + 1] == '-')
 8001b7c:	797a      	ldrb	r2, [r7, #5]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <ProcessReceivedData+0x258>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b8c:	d103      	bne.n	8001b96 <ProcessReceivedData+0x1ea>
					{
						speed = -speed;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	425b      	negs	r3, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	80fb      	strh	r3, [r7, #6]
					}
					//设置速度
					//只有关闭巡线才能生效
					Set_Motor_ExpectedSpeed(i, speed);
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f010 fee7 	bl	801297c <Set_Motor_ExpectedSpeed>
				for (uint8_t i = 0; i < Motor_Number; i++)
 8001bae:	797b      	ldrb	r3, [r7, #5]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	717b      	strb	r3, [r7, #5]
 8001bb4:	797b      	ldrb	r3, [r7, #5]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d9c5      	bls.n	8001b46 <ProcessReceivedData+0x19a>
				}

				break;
 8001bba:	e01c      	b.n	8001bf6 <ProcessReceivedData+0x24a>
			case 'C':
				//设置起点 和 朝向
				dir = RxData[UART_1][1] - '0';
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <ProcessReceivedData+0x258>)
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	3b30      	subs	r3, #48	; 0x30
 8001bc2:	70fb      	strb	r3, [r7, #3]
				point = RxData[UART_1][2] - '0';
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <ProcessReceivedData+0x258>)
 8001bc6:	789b      	ldrb	r3, [r3, #2]
 8001bc8:	3b30      	subs	r3, #48	; 0x30
 8001bca:	713b      	strb	r3, [r7, #4]
				SetDefaultValue(dir, point);
 8001bcc:	793a      	ldrb	r2, [r7, #4]
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f010 f814 	bl	8011c00 <SetDefaultValue>

				break;
 8001bd8:	e00d      	b.n	8001bf6 <ProcessReceivedData+0x24a>
			case 'D':
				//设置终点并开始寻路
				point = RxData[UART_1][1] - '0';
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <ProcessReceivedData+0x258>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	3b30      	subs	r3, #48	; 0x30
 8001be0:	713b      	strb	r3, [r7, #4]
				StartWayFindingAndRuning(point);
 8001be2:	793b      	ldrb	r3, [r7, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f010 f823 	bl	8011c30 <StartWayFindingAndRuning>
				break;
 8001bea:	e004      	b.n	8001bf6 <ProcessReceivedData+0x24a>
			default:
				break;
		}
	}
 8001bec:	bf00      	nop
 8001bee:	e002      	b.n	8001bf6 <ProcessReceivedData+0x24a>
				break;
 8001bf0:	bf00      	nop
 8001bf2:	e000      	b.n	8001bf6 <ProcessReceivedData+0x24a>
				break;
 8001bf4:	bf00      	nop
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20007aa8 	.word	0x20007aa8
 8001c04:	20007a50 	.word	0x20007a50
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	00000000 	.word	0x00000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_TIM_PeriodElapsedCallback>:

//定时器中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d104      	bne.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//更新呼吸灯 PWM占空比
		Periodic_Update_BreathingLights();
 8001c26:	f011 f9bb 	bl	8012fa0 <Periodic_Update_BreathingLights>
		//接收上位机数据
		ProcessReceivedData();
 8001c2a:	f7ff febf 	bl	80019ac <ProcessReceivedData>
	{
		//20ms
		//更新偏航角
		UpdateYawAngle();
	}
}
 8001c2e:	e01d      	b.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM6)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d109      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x3a>
		Periodic_Status_Control();
 8001c3a:	f010 fa9b 	bl	8012174 <Periodic_Status_Control>
		if (Is_Car_Runing() == 1)
 8001c3e:	f010 fe47 	bl	80128d0 <Is_Car_Runing>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d111      	bne.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x58>
			Clean_Dormancy_Count();
 8001c48:	f00e ffae 	bl	8010ba8 <Clean_Dormancy_Count>
}
 8001c4c:	e00e      	b.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM7)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x4a>
		Periodic_Dormancy_Counter();
 8001c58:	f00e fff8 	bl	8010c4c <Periodic_Dormancy_Counter>
}
 8001c5c:	e006      	b.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM11)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x58>
		UpdateYawAngle();
 8001c68:	f00e ff30 	bl	8010acc <UpdateYawAngle>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40002000 	.word	0x40002000
 8001c78:	40001000 	.word	0x40001000
 8001c7c:	40001400 	.word	0x40001400
 8001c80:	40014800 	.word	0x40014800

08001c84 <HAL_GPIO_EXTI_Callback>:

//外部中断 按键
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
//清空休眠计数
	Clean_Dormancy_Count();
 8001c8e:	f00e ff8b 	bl	8010ba8 <Clean_Dormancy_Count>

	if (GPIO_Pin == Key_Stop_Pin)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d107      	bne.n	8001ca8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		//紧急制动按钮

		SetCarSpeed(0, 0, 0);
 8001c98:	ed9f 1a05 	vldr	s2, [pc, #20]	; 8001cb0 <HAL_GPIO_EXTI_Callback+0x2c>
 8001c9c:	eddf 0a04 	vldr	s1, [pc, #16]	; 8001cb0 <HAL_GPIO_EXTI_Callback+0x2c>
 8001ca0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001cb0 <HAL_GPIO_EXTI_Callback+0x2c>
 8001ca4:	f010 ff64 	bl	8012b70 <SetCarSpeed>
	}

}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	00000000 	.word	0x00000000

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <MX_SDIO_SD_Init+0x40>)
 8001cc8:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001ce4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce8:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <MX_SDIO_SD_Init+0x3c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000ce4 	.word	0x20000ce4
 8001d00:	40012c00 	.word	0x40012c00

08001d04 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
    if(sdHandle->Instance==SDIO)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <HAL_SD_MspInit+0x1c0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	f040 80c9 	bne.w	8001eba <HAL_SD_MspInit+0x1b6>
    {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
        /* SDIO clock enable */
        __HAL_RCC_SDIO_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	4a65      	ldr	r2, [pc, #404]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d36:	6453      	str	r3, [r2, #68]	; 0x44
 8001d38:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6313      	str	r3, [r2, #48]	; 0x30
 8001d54:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d6a:	f043 0308 	orr.w	r3, r3, #8
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d70:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <HAL_SD_MspInit+0x1c4>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
        PC10         ------> SDIO_D2
        PC11         ------> SDIO_D3
        PC12         ------> SDIO_CK
        PD2         ------> SDIO_CMD
        */
        GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d7c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d80:	617b      	str	r3, [r7, #20]
                                                    |GPIO_PIN_12;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d8e:	230c      	movs	r3, #12
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	484c      	ldr	r0, [pc, #304]	; (8001ecc <HAL_SD_MspInit+0x1c8>)
 8001d9a:	f002 fb31 	bl	8004400 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001dae:	230c      	movs	r3, #12
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4845      	ldr	r0, [pc, #276]	; (8001ed0 <HAL_SD_MspInit+0x1cc>)
 8001dba:	f002 fb21 	bl	8004400 <HAL_GPIO_Init>

        /* SDIO DMA Init */
        /* SDIO_RX Init */
        hdma_sdio_rx.Instance = DMA2_Stream3;
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dc0:	4a45      	ldr	r2, [pc, #276]	; (8001ed8 <HAL_SD_MspInit+0x1d4>)
 8001dc2:	601a      	str	r2, [r3, #0]
        hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dca:	605a      	str	r2, [r3, #4]
        hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
        hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
        hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dde:	611a      	str	r2, [r3, #16]
        hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001de0:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001de6:	615a      	str	r2, [r3, #20]
        hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dee:	619a      	str	r2, [r3, #24]
        hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001df2:	2220      	movs	r2, #32
 8001df4:	61da      	str	r2, [r3, #28]
        hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
        hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001dfe:	2204      	movs	r2, #4
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001e04:	2203      	movs	r2, #3
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001e08:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001e0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001e12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001e18:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001e1a:	f001 fee3 	bl	8003be4 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_SD_MspInit+0x124>
        {
            Error_Handler();
 8001e24:	f7ff ff46 	bl	8001cb4 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e2e:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <HAL_SD_MspInit+0x1d0>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6393      	str	r3, [r2, #56]	; 0x38

        /* SDIO_TX Init */
        hdma_sdio_tx.Instance = DMA2_Stream6;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e36:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_SD_MspInit+0x1dc>)
 8001e38:	601a      	str	r2, [r3, #0]
        hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e40:	605a      	str	r2, [r3, #4]
        hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	609a      	str	r2, [r3, #8]
        hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
        hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e54:	611a      	str	r2, [r3, #16]
        hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e5c:	615a      	str	r2, [r3, #20]
        hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e64:	619a      	str	r2, [r3, #24]
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e68:	2220      	movs	r2, #32
 8001e6a:	61da      	str	r2, [r3, #28]
        hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	621a      	str	r2, [r3, #32]
        hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e74:	2204      	movs	r2, #4
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001e8e:	4813      	ldr	r0, [pc, #76]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001e90:	f001 fea8 	bl	8003be4 <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_SD_MspInit+0x19a>
        {
            Error_Handler();
 8001e9a:	f7ff ff0b 	bl	8001cb4 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_SD_MspInit+0x1d8>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38

        /* SDIO interrupt Init */
        HAL_NVIC_SetPriority(SDIO_IRQn, 13, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	210d      	movs	r1, #13
 8001eae:	2031      	movs	r0, #49	; 0x31
 8001eb0:	f001 fe61 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001eb4:	2031      	movs	r0, #49	; 0x31
 8001eb6:	f001 fe7a 	bl	8003bae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SDIO_MspInit 1 */

    /* USER CODE END SDIO_MspInit 1 */
    }
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	20000d68 	.word	0x20000d68
 8001ed8:	40026458 	.word	0x40026458
 8001edc:	20000dc8 	.word	0x20000dc8
 8001ee0:	400264a0 	.word	0x400264a0

08001ee4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f36:	f005 fbec 	bl	8007712 <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8001f40:	f7ff feb8 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000e28 	.word	0x20000e28
 8001f4c:	40013000 	.word	0x40013000

08001f50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    /* USER CODE END SPI2_Init 0 */

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    hspi2.Instance = SPI2;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <MX_SPI2_Init+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f60:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f70:	2202      	movs	r2, #2
 8001f72:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f80:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f9c:	220a      	movs	r2, #10
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001fa2:	f005 fbb6 	bl	8007712 <HAL_SPI_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8001fac:	f7ff fe82 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000e80 	.word	0x20000e80
 8001fb8:	40003800 	.word	0x40003800

08001fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08c      	sub	sp, #48	; 0x30
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
    if(spiHandle->Instance==SPI1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_SPI_MspInit+0x180>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12c      	bne.n	8002038 <HAL_SPI_MspInit+0x7c>
    {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8001fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b54      	ldr	r3, [pc, #336]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a4f      	ldr	r2, [pc, #316]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_SPI_MspInit+0x184>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697b      	ldr	r3, [r7, #20]
        /**SPI1 GPIO Configuration
        PB3         ------> SPI1_SCK
        PB4         ------> SPI1_MISO
        PB5         ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = W52QXX_SCK_Pin|W52QXX_MISO_Pin|W52QXX_MOSI_Pin;
 8002016:	2338      	movs	r3, #56	; 0x38
 8002018:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002026:	2305      	movs	r3, #5
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4844      	ldr	r0, [pc, #272]	; (8002144 <HAL_SPI_MspInit+0x188>)
 8002032:	f002 f9e5 	bl	8004400 <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
    }
}
 8002036:	e07c      	b.n	8002132 <HAL_SPI_MspInit+0x176>
    else if(spiHandle->Instance==SPI2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_SPI_MspInit+0x18c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d177      	bne.n	8002132 <HAL_SPI_MspInit+0x176>
        __HAL_RCC_SPI2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <HAL_SPI_MspInit+0x184>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a36      	ldr	r2, [pc, #216]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <HAL_SPI_MspInit+0x184>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_SPI_MspInit+0x184>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8002096:	2308      	movs	r3, #8
 8002098:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a6:	2305      	movs	r3, #5
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_SPI_MspInit+0x190>)
 80020b2:	f002 f9a5 	bl	8004400 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = LCD_SCL_Pin;
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c8:	2305      	movs	r3, #5
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	481c      	ldr	r0, [pc, #112]	; (8002144 <HAL_SPI_MspInit+0x188>)
 80020d4:	f002 f994 	bl	8004400 <HAL_GPIO_Init>
        hdma_spi2_tx.Instance = DMA1_Stream4;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_SPI_MspInit+0x194>)
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_SPI_MspInit+0x198>)
 80020dc:	601a      	str	r2, [r3, #0]
        hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_SPI_MspInit+0x194>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
        hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_SPI_MspInit+0x194>)
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	609a      	str	r2, [r3, #8]
        hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_SPI_MspInit+0x194>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
        hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_SPI_MspInit+0x194>)
 80020f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f6:	611a      	str	r2, [r3, #16]
        hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_SPI_MspInit+0x194>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
        hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_SPI_MspInit+0x194>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
        hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_SPI_MspInit+0x194>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
        hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_SPI_MspInit+0x194>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
        hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_SPI_MspInit+0x194>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002116:	480e      	ldr	r0, [pc, #56]	; (8002150 <HAL_SPI_MspInit+0x194>)
 8002118:	f001 fd64 	bl	8003be4 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_SPI_MspInit+0x16a>
            Error_Handler();
 8002122:	f7ff fdc7 	bl	8001cb4 <Error_Handler>
        __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_SPI_MspInit+0x194>)
 800212a:	649a      	str	r2, [r3, #72]	; 0x48
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_SPI_MspInit+0x194>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002132:	bf00      	nop
 8002134:	3730      	adds	r7, #48	; 0x30
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40013000 	.word	0x40013000
 8002140:	40023800 	.word	0x40023800
 8002144:	40020400 	.word	0x40020400
 8002148:	40003800 	.word	0x40003800
 800214c:	40020800 	.word	0x40020800
 8002150:	20000ed8 	.word	0x20000ed8
 8002154:	40026070 	.word	0x40026070

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
    * Initializes the Global MSP.
    */
void HAL_MspInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_MspInit+0x4c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_MspInit+0x4c>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_MspInit+0x4c>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_MspInit+0x4c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
    * @brief This function handles Non maskable interrupt.
    */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
    * @brief This function handles Hard fault interrupt.
    */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
    * @brief This function handles Memory management fault.
    */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
    * @brief This function handles Pre-fetch fault, memory access fault.
    */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
    * @brief This function handles Undefined instruction or illegal state.
    */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
    * @brief This function handles System service call via SWI instruction.
    */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

/**
    * @brief This function handles Debug monitor.
    */
void DebugMon_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <PendSV_Handler>:

/**
    * @brief This function handles Pendable request for system service.
    */
void PendSV_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <SysTick_Handler>:

/**
    * @brief This function handles System tick timer.
    */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80021f4:	f000 ffd4 	bl	80031a0 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <EXTI3_IRQHandler>:

/**
    * @brief This function handles EXTI line3 interrupt.
    */
void EXTI3_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(Key_Stop_Pin);
 8002200:	2008      	movs	r0, #8
 8002202:	f002 facb 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <DMA1_Stream4_IRQHandler>:

/**
    * @brief This function handles DMA1 stream4 global interrupt.
    */
void DMA1_Stream4_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
    /* USER CODE END DMA1_Stream4_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Stream4_IRQHandler+0x10>)
 8002212:	f001 fe7f 	bl	8003f14 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

    /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000ed8 	.word	0x20000ed8

08002220 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
    * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
    */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

    /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_TIM_IRQHandler(&htim1);
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002226:	f006 fa0d 	bl	8008644 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim11);
 800222a:	4803      	ldr	r0, [pc, #12]	; (8002238 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800222c:	f006 fa0a 	bl	8008644 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

    /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000f3c 	.word	0x20000f3c
 8002238:	20001134 	.word	0x20001134

0800223c <USART1_IRQHandler>:

/**
    * @brief This function handles USART1 global interrupt.
    */
void USART1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <USART1_IRQHandler+0x10>)
 8002242:	f007 f969 	bl	8009518 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000120c 	.word	0x2000120c

08002250 <TIM8_UP_TIM13_IRQHandler>:

/**
    * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
    */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002256:	f006 f9f5 	bl	8008644 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim13);
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800225c:	f006 f9f2 	bl	8008644 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200010ec 	.word	0x200010ec
 8002268:	2000117c 	.word	0x2000117c

0800226c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
    * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
    */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002272:	f006 f9e7 	bl	8008644 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim14);
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002278:	f006 f9e4 	bl	8008644 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200010ec 	.word	0x200010ec
 8002284:	200011c4 	.word	0x200011c4

08002288 <SDIO_IRQHandler>:

/**
    * @brief This function handles SDIO global interrupt.
    */
void SDIO_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SDIO_IRQn 0 */

    /* USER CODE END SDIO_IRQn 0 */
    HAL_SD_IRQHandler(&hsd);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <SDIO_IRQHandler+0x10>)
 800228e:	f004 f985 	bl	800659c <HAL_SD_IRQHandler>
    /* USER CODE BEGIN SDIO_IRQn 1 */

    /* USER CODE END SDIO_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000ce4 	.word	0x20000ce4

0800229c <TIM6_DAC_IRQHandler>:

/**
    * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
    */
void TIM6_DAC_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

    /* USER CODE END TIM6_DAC_IRQn 0 */
    HAL_TIM_IRQHandler(&htim6);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM6_DAC_IRQHandler+0x10>)
 80022a2:	f006 f9cf 	bl	8008644 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

    /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000105c 	.word	0x2000105c

080022b0 <TIM7_IRQHandler>:

/**
    * @brief This function handles TIM7 global interrupt.
    */
void TIM7_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIM7_IRQHandler+0x10>)
 80022b6:	f006 f9c5 	bl	8008644 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM7_IRQn 1 */

    /* USER CODE END TIM7_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200010a4 	.word	0x200010a4

080022c4 <DMA2_Stream3_IRQHandler>:

/**
    * @brief This function handles DMA2 stream3 global interrupt.
    */
void DMA2_Stream3_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

    /* USER CODE END DMA2_Stream3_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <DMA2_Stream3_IRQHandler+0x10>)
 80022ca:	f001 fe23 	bl	8003f14 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

    /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000d68 	.word	0x20000d68

080022d8 <DMA2_Stream6_IRQHandler>:

/**
    * @brief This function handles DMA2 stream6 global interrupt.
    */
void DMA2_Stream6_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

    /* USER CODE END DMA2_Stream6_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <DMA2_Stream6_IRQHandler+0x10>)
 80022de:	f001 fe19 	bl	8003f14 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

    /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000dc8 	.word	0x20000dc8

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002306:	f011 fccb 	bl	8013ca0 <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
	return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800232e:	e7fe      	b.n	800232e <_exit+0x12>

08002330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e00a      	b.n	8002358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002342:	f3af 8000 	nop.w
 8002346:	4601      	mov	r1, r0
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	60ba      	str	r2, [r7, #8]
 800234e:	b2ca      	uxtb	r2, r1
 8002350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf0      	blt.n	8002342 <_read+0x12>
	}

return len;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e009      	b.n	8002390 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	60ba      	str	r2, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf1      	blt.n	800237c <_write+0x12>
	}
	return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
	return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
	return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f011 fc30 	bl	8013ca0 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20020000 	.word	0x20020000
 800246c:	00000800 	.word	0x00000800
 8002470:	20000f38 	.word	0x20000f38
 8002474:	20007ac0 	.word	0x20007ac0

08002478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f011 fc32 	bl	8013d14 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024ba:	4a23      	ldr	r2, [pc, #140]	; (8002548 <MX_TIM1_Init+0xac>)
 80024bc:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d0:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <MX_TIM1_Init+0xa8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024e4:	2303      	movs	r3, #3
 80024e6:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ec:	2301      	movs	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	4619      	mov	r1, r3
 800250e:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_TIM1_Init+0xa8>)
 8002510:	f005 ff64 	bl	80083dc <HAL_TIM_Encoder_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM1_Init+0x82>
    {
        Error_Handler();
 800251a:	f7ff fbcb 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <MX_TIM1_Init+0xa8>)
 800252c:	f006 fe54 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0x9e>
    {
        Error_Handler();
 8002536:	f7ff fbbd 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	3730      	adds	r7, #48	; 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000f3c 	.word	0x20000f3c
 8002548:	40010000 	.word	0x40010000

0800254c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	; 0x38
 8002550:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002560:	f107 0320 	add.w	r3, r7, #32
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
 8002578:	615a      	str	r2, [r3, #20]
 800257a:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 800257c:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <MX_TIM3_Init+0x128>)
 800257e:	4a3e      	ldr	r2, [pc, #248]	; (8002678 <MX_TIM3_Init+0x12c>)
 8002580:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <MX_TIM3_Init+0x128>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <MX_TIM3_Init+0x128>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 16800-1;
 800258e:	4b39      	ldr	r3, [pc, #228]	; (8002674 <MX_TIM3_Init+0x128>)
 8002590:	f244 129f 	movw	r2, #16799	; 0x419f
 8002594:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <MX_TIM3_Init+0x128>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <MX_TIM3_Init+0x128>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025a2:	4834      	ldr	r0, [pc, #208]	; (8002674 <MX_TIM3_Init+0x128>)
 80025a4:	f005 fc9a 	bl	8007edc <HAL_TIM_Base_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM3_Init+0x66>
    {
        Error_Handler();
 80025ae:	f7ff fb81 	bl	8001cb4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025bc:	4619      	mov	r1, r3
 80025be:	482d      	ldr	r0, [pc, #180]	; (8002674 <MX_TIM3_Init+0x128>)
 80025c0:	f006 fa0a 	bl	80089d8 <HAL_TIM_ConfigClockSource>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0x82>
    {
        Error_Handler();
 80025ca:	f7ff fb73 	bl	8001cb4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025ce:	4829      	ldr	r0, [pc, #164]	; (8002674 <MX_TIM3_Init+0x128>)
 80025d0:	f005 fd73 	bl	80080ba <HAL_TIM_PWM_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM3_Init+0x92>
    {
        Error_Handler();
 80025da:	f7ff fb6b 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	4619      	mov	r1, r3
 80025ec:	4821      	ldr	r0, [pc, #132]	; (8002674 <MX_TIM3_Init+0x128>)
 80025ee:	f006 fdf3 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM3_Init+0xb0>
    {
        Error_Handler();
 80025f8:	f7ff fb5c 	bl	8001cb4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fc:	2360      	movs	r3, #96	; 0x60
 80025fe:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	4619      	mov	r1, r3
 8002612:	4818      	ldr	r0, [pc, #96]	; (8002674 <MX_TIM3_Init+0x128>)
 8002614:	f006 f91e 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0xd6>
    {
        Error_Handler();
 800261e:	f7ff fb49 	bl	8001cb4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2204      	movs	r2, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4812      	ldr	r0, [pc, #72]	; (8002674 <MX_TIM3_Init+0x128>)
 800262a:	f006 f913 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM3_Init+0xec>
    {
        Error_Handler();
 8002634:	f7ff fb3e 	bl	8001cb4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	2208      	movs	r2, #8
 800263c:	4619      	mov	r1, r3
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_TIM3_Init+0x128>)
 8002640:	f006 f908 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM3_Init+0x102>
    {
        Error_Handler();
 800264a:	f7ff fb33 	bl	8001cb4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	220c      	movs	r2, #12
 8002652:	4619      	mov	r1, r3
 8002654:	4807      	ldr	r0, [pc, #28]	; (8002674 <MX_TIM3_Init+0x128>)
 8002656:	f006 f8fd 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM3_Init+0x118>
    {
        Error_Handler();
 8002660:	f7ff fb28 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <MX_TIM3_Init+0x128>)
 8002666:	f000 fbc5 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 800266a:	bf00      	nop
 800266c:	3738      	adds	r7, #56	; 0x38
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000f84 	.word	0x20000f84
 8002678:	40000400 	.word	0x40000400

0800267c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f011 fb42 	bl	8013d14 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <MX_TIM4_Init+0xa0>)
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <MX_TIM4_Init+0xa4>)
 800269c:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <MX_TIM4_Init+0xa0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <MX_TIM4_Init+0xa0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 65535;
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <MX_TIM4_Init+0xa0>)
 80026ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b0:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <MX_TIM4_Init+0xa0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <MX_TIM4_Init+0xa0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026be:	2303      	movs	r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026c6:	2301      	movs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026d6:	2301      	movs	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	4619      	mov	r1, r3
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <MX_TIM4_Init+0xa0>)
 80026ea:	f005 fe77 	bl	80083dc <HAL_TIM_Encoder_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM4_Init+0x7c>
    {
        Error_Handler();
 80026f4:	f7ff fade 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_TIM4_Init+0xa0>)
 8002706:	f006 fd67 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM4_Init+0x98>
    {
        Error_Handler();
 8002710:	f7ff fad0 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}
 8002714:	bf00      	nop
 8002716:	3730      	adds	r7, #48	; 0x30
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000fcc 	.word	0x20000fcc
 8002720:	40000800 	.word	0x40000800

08002724 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f011 faee 	bl	8013d14 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <MX_TIM5_Init+0xa0>)
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <MX_TIM5_Init+0xa4>)
 8002744:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 0;
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_TIM5_Init+0xa0>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_TIM5_Init+0xa0>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 4294967295;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_TIM5_Init+0xa0>)
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_TIM5_Init+0xa0>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_TIM5_Init+0xa0>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002766:	2303      	movs	r3, #3
 8002768:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800276e:	2301      	movs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800277e:	2301      	movs	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	4619      	mov	r1, r3
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <MX_TIM5_Init+0xa0>)
 8002792:	f005 fe23 	bl	80083dc <HAL_TIM_Encoder_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM5_Init+0x7c>
    {
        Error_Handler();
 800279c:	f7ff fa8a 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_TIM5_Init+0xa0>)
 80027ae:	f006 fd13 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM5_Init+0x98>
    {
        Error_Handler();
 80027b8:	f7ff fa7c 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */

}
 80027bc:	bf00      	nop
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20001014 	.word	0x20001014
 80027c8:	40000c00 	.word	0x40000c00

080027cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM6_Init 0 */

    /* USER CODE END TIM6_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d2:	463b      	mov	r3, r7
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM6_Init 1 */

    /* USER CODE END TIM6_Init 1 */
    htim6.Instance = TIM6;
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <MX_TIM6_Init+0x64>)
 80027dc:	4a15      	ldr	r2, [pc, #84]	; (8002834 <MX_TIM6_Init+0x68>)
 80027de:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 168-1;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <MX_TIM6_Init+0x64>)
 80027e2:	22a7      	movs	r2, #167	; 0xa7
 80027e4:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_TIM6_Init+0x64>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 1000-1;
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <MX_TIM6_Init+0x64>)
 80027ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f2:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_TIM6_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027fa:	480d      	ldr	r0, [pc, #52]	; (8002830 <MX_TIM6_Init+0x64>)
 80027fc:	f005 fb6e 	bl	8007edc <HAL_TIM_Base_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM6_Init+0x3e>
    {
        Error_Handler();
 8002806:	f7ff fa55 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002812:	463b      	mov	r3, r7
 8002814:	4619      	mov	r1, r3
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_TIM6_Init+0x64>)
 8002818:	f006 fcde 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM6_Init+0x5a>
    {
        Error_Handler();
 8002822:	f7ff fa47 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM6_Init 2 */

    /* USER CODE END TIM6_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000105c 	.word	0x2000105c
 8002834:	40001000 	.word	0x40001000

08002838 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	463b      	mov	r3, r7
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <MX_TIM7_Init+0x64>)
 8002848:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <MX_TIM7_Init+0x68>)
 800284a:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 16800-1;
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <MX_TIM7_Init+0x64>)
 800284e:	f244 129f 	movw	r2, #16799	; 0x419f
 8002852:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_TIM7_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 10000-1;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <MX_TIM7_Init+0x64>)
 800285c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002860:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_TIM7_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <MX_TIM7_Init+0x64>)
 800286a:	f005 fb37 	bl	8007edc <HAL_TIM_Base_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 8002874:	f7ff fa1e 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002880:	463b      	mov	r3, r7
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_TIM7_Init+0x64>)
 8002886:	f006 fca7 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8002890:	f7ff fa10 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200010a4 	.word	0x200010a4
 80028a0:	40001400 	.word	0x40001400

080028a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f011 fa2e 	bl	8013d14 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance = TIM8;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <MX_TIM8_Init+0xa8>)
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <MX_TIM8_Init+0xac>)
 80028c4:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = 0;
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <MX_TIM8_Init+0xa8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <MX_TIM8_Init+0xa8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = 65535;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <MX_TIM8_Init+0xa8>)
 80028d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d8:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <MX_TIM8_Init+0xa8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <MX_TIM8_Init+0xa8>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <MX_TIM8_Init+0xa8>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028ec:	2303      	movs	r3, #3
 80028ee:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028f4:	2301      	movs	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002904:	2301      	movs	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4619      	mov	r1, r3
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_TIM8_Init+0xa8>)
 8002918:	f005 fd60 	bl	80083dc <HAL_TIM_Encoder_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM8_Init+0x82>
    {
        Error_Handler();
 8002922:	f7ff f9c7 	bl	8001cb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <MX_TIM8_Init+0xa8>)
 8002934:	f006 fc50 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM8_Init+0x9e>
    {
        Error_Handler();
 800293e:	f7ff f9b9 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200010ec 	.word	0x200010ec
 8002950:	40010400 	.word	0x40010400

08002954 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
    /* USER CODE END TIM11_Init 0 */

    /* USER CODE BEGIN TIM11_Init 1 */

    /* USER CODE END TIM11_Init 1 */
    htim11.Instance = TIM11;
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_TIM11_Init+0x40>)
 800295a:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <MX_TIM11_Init+0x44>)
 800295c:	601a      	str	r2, [r3, #0]
    htim11.Init.Prescaler = 168-1;
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <MX_TIM11_Init+0x40>)
 8002960:	22a7      	movs	r2, #167	; 0xa7
 8002962:	605a      	str	r2, [r3, #4]
    htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_TIM11_Init+0x40>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
    htim11.Init.Period = 20000;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <MX_TIM11_Init+0x40>)
 800296c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002970:	60da      	str	r2, [r3, #12]
    htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_TIM11_Init+0x40>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_TIM11_Init+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_TIM11_Init+0x40>)
 8002980:	f005 faac 	bl	8007edc <HAL_TIM_Base_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM11_Init+0x3a>
    {
        Error_Handler();
 800298a:	f7ff f993 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM11_Init 2 */

    /* USER CODE END TIM11_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001134 	.word	0x20001134
 8002998:	40014800 	.word	0x40014800

0800299c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
    /* USER CODE END TIM13_Init 0 */

    /* USER CODE BEGIN TIM13_Init 1 */

    /* USER CODE END TIM13_Init 1 */
    htim13.Instance = TIM13;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_TIM13_Init+0x40>)
 80029a2:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <MX_TIM13_Init+0x44>)
 80029a4:	601a      	str	r2, [r3, #0]
    htim13.Init.Prescaler = 16800-1;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <MX_TIM13_Init+0x40>)
 80029a8:	f244 129f 	movw	r2, #16799	; 0x419f
 80029ac:	605a      	str	r2, [r3, #4]
    htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <MX_TIM13_Init+0x40>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
    htim13.Init.Period = 5000-1;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_TIM13_Init+0x40>)
 80029b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80029ba:	60da      	str	r2, [r3, #12]
    htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <MX_TIM13_Init+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_TIM13_Init+0x40>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <MX_TIM13_Init+0x40>)
 80029ca:	f005 fa87 	bl	8007edc <HAL_TIM_Base_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM13_Init+0x3c>
    {
        Error_Handler();
 80029d4:	f7ff f96e 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM13_Init 2 */

    /* USER CODE END TIM13_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2000117c 	.word	0x2000117c
 80029e0:	40001c00 	.word	0x40001c00

080029e4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM14_Init 0 */

    /* USER CODE END TIM14_Init 0 */

    TIM_OC_InitTypeDef sConfigOC = {0};
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	615a      	str	r2, [r3, #20]
 80029fa:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM14_Init 1 */

    /* USER CODE END TIM14_Init 1 */
    htim14.Instance = TIM14;
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <MX_TIM14_Init+0x94>)
 80029fe:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <MX_TIM14_Init+0x98>)
 8002a00:	601a      	str	r2, [r3, #0]
    htim14.Init.Prescaler = 42-1;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a04:	2229      	movs	r2, #41	; 0x29
 8002a06:	605a      	str	r2, [r3, #4]
    htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
    htim14.Init.Period = 1000-1;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a14:	60da      	str	r2, [r3, #12]
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a22:	4815      	ldr	r0, [pc, #84]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a24:	f005 fa5a 	bl	8007edc <HAL_TIM_Base_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM14_Init+0x4e>
    {
        Error_Handler();
 8002a2e:	f7ff f941 	bl	8001cb4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002a32:	4811      	ldr	r0, [pc, #68]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a34:	f005 fb41 	bl	80080ba <HAL_TIM_PWM_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM14_Init+0x5e>
    {
        Error_Handler();
 8002a3e:	f7ff f939 	bl	8001cb4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a42:	2360      	movs	r3, #96	; 0x60
 8002a44:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 50;
 8002a46:	2332      	movs	r3, #50	; 0x32
 8002a48:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2200      	movs	r2, #0
 8002a56:	4619      	mov	r1, r3
 8002a58:	4807      	ldr	r0, [pc, #28]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a5a:	f005 fefb 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM14_Init+0x84>
    {
        Error_Handler();
 8002a64:	f7ff f926 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM14_Init 2 */

    /* USER CODE END TIM14_Init 2 */
    HAL_TIM_MspPostInit(&htim14);
 8002a68:	4803      	ldr	r0, [pc, #12]	; (8002a78 <MX_TIM14_Init+0x94>)
 8002a6a:	f000 f9c3 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 8002a6e:	bf00      	nop
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200011c4 	.word	0x200011c4
 8002a7c:	40002000 	.word	0x40002000

08002a80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b090      	sub	sp, #64	; 0x40
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
    if(tim_encoderHandle->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a71      	ldr	r2, [pc, #452]	; (8002c64 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d135      	bne.n	8002b0e <HAL_TIM_Encoder_MspInit+0x8e>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* TIM1 clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a68      	ldr	r2, [pc, #416]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        /**TIM1 GPIO Configuration
        PE9         ------> TIM1_CH1
        PE11         ------> TIM1_CH2
        */
        GPIO_InitStruct.Pin = Motor_1_Encoder_A_Pin|Motor_1_Encoder_B_Pin;
 8002ada:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	485d      	ldr	r0, [pc, #372]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002af8:	f001 fc82 	bl	8004400 <HAL_GPIO_Init>

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2102      	movs	r1, #2
 8002b00:	201a      	movs	r0, #26
 8002b02:	f001 f838 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b06:	201a      	movs	r0, #26
 8002b08:	f001 f851 	bl	8003bae <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
    }
}
 8002b0c:	e0a5      	b.n	8002c5a <HAL_TIM_Encoder_MspInit+0x1da>
    else if(tim_encoderHandle->Instance==TIM4)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12d      	bne.n	8002b74 <HAL_TIM_Encoder_MspInit+0xf4>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	6a3b      	ldr	r3, [r7, #32]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	6313      	str	r3, [r2, #48]	; 0x30
 8002b44:	4b48      	ldr	r3, [pc, #288]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
        GPIO_InitStruct.Pin = Motor_4_Encoder_A_Pin|Motor_4_Encoder_B_Pin;
 8002b50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b62:	2302      	movs	r3, #2
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4841      	ldr	r0, [pc, #260]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002b6e:	f001 fc47 	bl	8004400 <HAL_GPIO_Init>
}
 8002b72:	e072      	b.n	8002c5a <HAL_TIM_Encoder_MspInit+0x1da>
    else if(tim_encoderHandle->Instance==TIM5)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12c      	bne.n	8002bd8 <HAL_TIM_Encoder_MspInit+0x158>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a38      	ldr	r2, [pc, #224]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	69bb      	ldr	r3, [r7, #24]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]
        GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bce:	4619      	mov	r1, r3
 8002bd0:	482a      	ldr	r0, [pc, #168]	; (8002c7c <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002bd2:	f001 fc15 	bl	8004400 <HAL_GPIO_Init>
}
 8002bd6:	e040      	b.n	8002c5a <HAL_TIM_Encoder_MspInit+0x1da>
    else if(tim_encoderHandle->Instance==TIM8)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_TIM_Encoder_MspInit+0x200>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d13b      	bne.n	8002c5a <HAL_TIM_Encoder_MspInit+0x1da>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = Motor_2_Encoder_A_Pin|Motor_2_Encoder_B_Pin;
 8002c1a:	23c0      	movs	r3, #192	; 0xc0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c32:	4619      	mov	r1, r3
 8002c34:	4813      	ldr	r0, [pc, #76]	; (8002c84 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c36:	f001 fbe3 	bl	8004400 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	202c      	movs	r0, #44	; 0x2c
 8002c40:	f000 ff99 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	f000 ffb2 	bl	8003bae <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	202d      	movs	r0, #45	; 0x2d
 8002c50:	f000 ff91 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c54:	202d      	movs	r0, #45	; 0x2d
 8002c56:	f000 ffaa 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	3740      	adds	r7, #64	; 0x40
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40020800 	.word	0x40020800

08002c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

    if(tim_baseHandle->Instance==TIM3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a50      	ldr	r2, [pc, #320]	; (8002dd8 <HAL_TIM_Base_MspInit+0x150>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_Base_MspInit+0x30>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
        /* TIM3 clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	4b4f      	ldr	r3, [pc, #316]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }
}
 8002cb6:	e08a      	b.n	8002dce <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM6)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a48      	ldr	r2, [pc, #288]	; (8002de0 <HAL_TIM_Base_MspInit+0x158>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d116      	bne.n	8002cf0 <HAL_TIM_Base_MspInit+0x68>
        __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a44      	ldr	r2, [pc, #272]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	2036      	movs	r0, #54	; 0x36
 8002ce4:	f000 ff47 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ce8:	2036      	movs	r0, #54	; 0x36
 8002cea:	f000 ff60 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002cee:	e06e      	b.n	8002dce <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM7)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <HAL_TIM_Base_MspInit+0x15c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d116      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0xa0>
        __HAL_RCC_TIM7_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a36      	ldr	r2, [pc, #216]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d04:	f043 0320 	orr.w	r3, r3, #32
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
        HAL_NVIC_SetPriority(TIM7_IRQn, 15, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	210f      	movs	r1, #15
 8002d1a:	2037      	movs	r0, #55	; 0x37
 8002d1c:	f000 ff2b 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d20:	2037      	movs	r0, #55	; 0x37
 8002d22:	f000 ff44 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002d26:	e052      	b.n	8002dce <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM11)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <HAL_TIM_Base_MspInit+0x160>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d116      	bne.n	8002d60 <HAL_TIM_Base_MspInit+0xd8>
        __HAL_RCC_TIM11_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2102      	movs	r1, #2
 8002d52:	201a      	movs	r0, #26
 8002d54:	f000 ff0f 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d58:	201a      	movs	r0, #26
 8002d5a:	f000 ff28 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002d5e:	e036      	b.n	8002dce <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM13)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_TIM_Base_MspInit+0x164>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d116      	bne.n	8002d98 <HAL_TIM_Base_MspInit+0x110>
        __HAL_RCC_TIM13_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2102      	movs	r1, #2
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	f000 fef3 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d90:	202c      	movs	r0, #44	; 0x2c
 8002d92:	f000 ff0c 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002d96:	e01a      	b.n	8002dce <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM14)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <HAL_TIM_Base_MspInit+0x168>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d115      	bne.n	8002dce <HAL_TIM_Base_MspInit+0x146>
        __HAL_RCC_TIM14_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_TIM_Base_MspInit+0x154>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	202d      	movs	r0, #45	; 0x2d
 8002dc4:	f000 fed7 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002dc8:	202d      	movs	r0, #45	; 0x2d
 8002dca:	f000 fef0 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40001000 	.word	0x40001000
 8002de4:	40001400 	.word	0x40001400
 8002de8:	40014800 	.word	0x40014800
 8002dec:	40001c00 	.word	0x40001c00
 8002df0:	40002000 	.word	0x40002000

08002df4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
    if(timHandle->Instance==TIM3)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <HAL_TIM_MspPostInit+0xec>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d13c      	bne.n	8002e90 <HAL_TIM_MspPostInit+0x9c>
    {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a31      	ldr	r2, [pc, #196]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
        PA6         ------> TIM3_CH1
        PA7         ------> TIM3_CH2
        PB0         ------> TIM3_CH3
        PB1         ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8002e4e:	23c0      	movs	r3, #192	; 0xc0
 8002e50:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	481f      	ldr	r0, [pc, #124]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e6a:	f001 fac9 	bl	8004400 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = Motor_3_PWM_Pin|Motor_4_PWM_Pin;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4818      	ldr	r0, [pc, #96]	; (8002eec <HAL_TIM_MspPostInit+0xf8>)
 8002e8a:	f001 fab9 	bl	8004400 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
    }

}
 8002e8e:	e023      	b.n	8002ed8 <HAL_TIM_MspPostInit+0xe4>
    else if(timHandle->Instance==TIM14)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_TIM_MspPostInit+0xfc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d11e      	bne.n	8002ed8 <HAL_TIM_MspPostInit+0xe4>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = LED1_Pin;
 8002eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eba:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002ec8:	2309      	movs	r3, #9
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <HAL_TIM_MspPostInit+0x100>)
 8002ed4:	f001 fa94 	bl	8004400 <HAL_GPIO_Init>
}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020400 	.word	0x40020400
 8002ef0:	40002000 	.word	0x40002000
 8002ef4:	40021400 	.word	0x40021400

08002ef8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <MX_USART1_UART_Init+0x50>)
 8002f00:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f08:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f1e:	220c      	movs	r2, #12
 8002f20:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_USART1_UART_Init+0x4c>)
 8002f30:	f006 f9e2 	bl	80092f8 <HAL_UART_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8002f3a:	f7fe febb 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000120c 	.word	0x2000120c
 8002f48:	40011000 	.word	0x40011000

08002f4c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <MX_USART2_UART_Init+0x50>)
 8002f54:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f5c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f84:	f006 f9b8 	bl	80092f8 <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8002f8e:	f7fe fe91 	bl	8001cb4 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20001250 	.word	0x20001250
 8002f9c:	40004400 	.word	0x40004400

08002fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
    if(uartHandle->Instance==USART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a36      	ldr	r2, [pc, #216]	; (8003098 <HAL_UART_MspInit+0xf8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d135      	bne.n	800302e <HAL_UART_MspInit+0x8e>
    {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_UART_MspInit+0xfc>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <HAL_UART_MspInit+0xfc>)
 8002fcc:	f043 0310 	orr.w	r3, r3, #16
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_UART_MspInit+0xfc>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_UART_MspInit+0xfc>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	; (800309c <HAL_UART_MspInit+0xfc>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_UART_MspInit+0xfc>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]
        /**USART1 GPIO Configuration
        PA9         ------> USART1_TX
        PA10         ------> USART1_RX
        */
        GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8002ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ffe:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300c:	2307      	movs	r3, #7
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	4619      	mov	r1, r3
 8003016:	4822      	ldr	r0, [pc, #136]	; (80030a0 <HAL_UART_MspInit+0x100>)
 8003018:	f001 f9f2 	bl	8004400 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2101      	movs	r1, #1
 8003020:	2025      	movs	r0, #37	; 0x25
 8003022:	f000 fda8 	bl	8003b76 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003026:	2025      	movs	r0, #37	; 0x25
 8003028:	f000 fdc1 	bl	8003bae <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
    }
}
 800302c:	e030      	b.n	8003090 <HAL_UART_MspInit+0xf0>
    else if(uartHandle->Instance==USART2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_UART_MspInit+0x104>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12b      	bne.n	8003090 <HAL_UART_MspInit+0xf0>
        __HAL_RCC_USART2_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_UART_MspInit+0xfc>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <HAL_UART_MspInit+0xfc>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_UART_MspInit+0xfc>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_UART_MspInit+0xfc>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_UART_MspInit+0xfc>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6313      	str	r3, [r2, #48]	; 0x30
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_UART_MspInit+0xfc>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003070:	230c      	movs	r3, #12
 8003072:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003080:	2307      	movs	r3, #7
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4619      	mov	r1, r3
 800308a:	4805      	ldr	r0, [pc, #20]	; (80030a0 <HAL_UART_MspInit+0x100>)
 800308c:	f001 f9b8 	bl	8004400 <HAL_GPIO_Init>
}
 8003090:	bf00      	nop
 8003092:	3730      	adds	r7, #48	; 0x30
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40011000 	.word	0x40011000
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40004400 	.word	0x40004400

080030a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030ac:	480d      	ldr	r0, [pc, #52]	; (80030e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ae:	490e      	ldr	r1, [pc, #56]	; (80030e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030b0:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b4:	e002      	b.n	80030bc <LoopCopyDataInit>

080030b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ba:	3304      	adds	r3, #4

080030bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c0:	d3f9      	bcc.n	80030b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030c4:	4c0b      	ldr	r4, [pc, #44]	; (80030f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c8:	e001      	b.n	80030ce <LoopFillZerobss>

080030ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030cc:	3204      	adds	r2, #4

080030ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d0:	d3fb      	bcc.n	80030ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030d2:	f7ff f9d1 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030d6:	f010 fde9 	bl	8013cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030da:	f7fe fa2b 	bl	8001534 <main>
  bx  lr    
 80030de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e8:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 80030ec:	0801e258 	.word	0x0801e258
  ldr r2, =_sbss
 80030f0:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 80030f4:	20007abc 	.word	0x20007abc

080030f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC_IRQHandler>
	...

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_Init+0x40>)
 8003106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800310a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_Init+0x40>)
 8003112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <HAL_Init+0x40>)
 800311e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003124:	2003      	movs	r0, #3
 8003126:	f000 fd1b 	bl	8003b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312a:	2000      	movs	r0, #0
 800312c:	f000 f808 	bl	8003140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003130:	f7ff f812 	bl	8002158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00

08003140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_InitTick+0x54>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_InitTick+0x58>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003156:	fbb3 f3f1 	udiv	r3, r3, r1
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fd33 	bl	8003bca <HAL_SYSTICK_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00e      	b.n	800318c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d80a      	bhi.n	800318a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003174:	2200      	movs	r2, #0
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f000 fcfb 	bl	8003b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <HAL_InitTick+0x5c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000008 	.word	0x20000008
 8003198:	20000010 	.word	0x20000010
 800319c:	2000000c 	.word	0x2000000c

080031a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_IncTick+0x20>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_IncTick+0x24>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <HAL_IncTick+0x24>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000010 	.word	0x20000010
 80031c4:	20001294 	.word	0x20001294

080031c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return uwTick;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_GetTick+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20001294 	.word	0x20001294

080031e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e8:	f7ff ffee 	bl	80031c8 <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d005      	beq.n	8003206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_Delay+0x44>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003206:	bf00      	nop
 8003208:	f7ff ffde 	bl	80031c8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	429a      	cmp	r2, r3
 8003216:	d8f7      	bhi.n	8003208 <HAL_Delay+0x28>
  {
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000010 	.word	0x20000010

08003228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e033      	b.n	80032a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ff78 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d118      	bne.n	8003298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800326e:	f023 0302 	bic.w	r3, r3, #2
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 faa4 	bl	80037c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
 8003296:	e001      	b.n	800329c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Start+0x1a>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0b2      	b.n	8003430 <HAL_ADC_Start+0x180>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d018      	beq.n	8003312 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032f0:	4b52      	ldr	r3, [pc, #328]	; (800343c <HAL_ADC_Start+0x18c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_ADC_Start+0x190>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0c9a      	lsrs	r2, r3, #18
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003304:	e002      	b.n	800330c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3b01      	subs	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f9      	bne.n	8003306 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d17a      	bne.n	8003416 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800334a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d106      	bne.n	800336e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f023 0206 	bic.w	r2, r3, #6
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
 800336c:	e002      	b.n	8003374 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_ADC_Start+0x194>)
 800337e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003388:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2b00      	cmp	r3, #0
 8003394:	d12a      	bne.n	80033ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_ADC_Start+0x198>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d015      	beq.n	80033cc <HAL_ADC_Start+0x11c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_ADC_Start+0x19c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d105      	bne.n	80033b6 <HAL_ADC_Start+0x106>
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_ADC_Start+0x194>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_ADC_Start+0x1a0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d136      	bne.n	800342e <HAL_ADC_Start+0x17e>
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_ADC_Start+0x194>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d130      	bne.n	800342e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d129      	bne.n	800342e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	e020      	b.n	800342e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_ADC_Start+0x198>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d11b      	bne.n	800342e <HAL_ADC_Start+0x17e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d114      	bne.n	800342e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e00b      	b.n	800342e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000008 	.word	0x20000008
 8003440:	431bde83 	.word	0x431bde83
 8003444:	40012300 	.word	0x40012300
 8003448:	40012000 	.word	0x40012000
 800344c:	40012100 	.word	0x40012100
 8003450:	40012200 	.word	0x40012200

08003454 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003470:	d113      	bne.n	800349a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d10b      	bne.n	800349a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e063      	b.n	8003562 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800349a:	f7ff fe95 	bl	80031c8 <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034a0:	e021      	b.n	80034e6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d01d      	beq.n	80034e6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_ADC_PollForConversion+0x6c>
 80034b0:	f7ff fe8a 	bl	80031c8 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d212      	bcs.n	80034e6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d00b      	beq.n	80034e6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0204 	orr.w	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e03d      	b.n	8003562 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d1d6      	bne.n	80034a2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0212 	mvn.w	r2, #18
 80034fc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d123      	bne.n	8003560 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11f      	bne.n	8003560 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003538:	2b00      	cmp	r3, #0
 800353a:	d111      	bne.n	8003560 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1c>
 800359c:	2302      	movs	r3, #2
 800359e:	e105      	b.n	80037ac <HAL_ADC_ConfigChannel+0x228>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b09      	cmp	r3, #9
 80035ae:	d925      	bls.n	80035fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68d9      	ldr	r1, [r3, #12]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	3b1e      	subs	r3, #30
 80035c6:	2207      	movs	r2, #7
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43da      	mvns	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	400a      	ands	r2, r1
 80035d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68d9      	ldr	r1, [r3, #12]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4403      	add	r3, r0
 80035ee:	3b1e      	subs	r3, #30
 80035f0:	409a      	lsls	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	e022      	b.n	8003642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6919      	ldr	r1, [r3, #16]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	2207      	movs	r2, #7
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	400a      	ands	r2, r1
 800361e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6919      	ldr	r1, [r3, #16]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	4603      	mov	r3, r0
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4403      	add	r3, r0
 8003638:	409a      	lsls	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d824      	bhi.n	8003694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	3b05      	subs	r3, #5
 800365c:	221f      	movs	r2, #31
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43da      	mvns	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	400a      	ands	r2, r1
 800366a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	4618      	mov	r0, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3b05      	subs	r3, #5
 8003686:	fa00 f203 	lsl.w	r2, r0, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	635a      	str	r2, [r3, #52]	; 0x34
 8003692:	e04c      	b.n	800372e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d824      	bhi.n	80036e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3b23      	subs	r3, #35	; 0x23
 80036ae:	221f      	movs	r2, #31
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43da      	mvns	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	400a      	ands	r2, r1
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4618      	mov	r0, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	3b23      	subs	r3, #35	; 0x23
 80036d8:	fa00 f203 	lsl.w	r2, r0, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
 80036e4:	e023      	b.n	800372e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	3b41      	subs	r3, #65	; 0x41
 80036f8:	221f      	movs	r2, #31
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	400a      	ands	r2, r1
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	4618      	mov	r0, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	3b41      	subs	r3, #65	; 0x41
 8003722:	fa00 f203 	lsl.w	r2, r0, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_ADC_ConfigChannel+0x234>)
 8003730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_ADC_ConfigChannel+0x238>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x1cc>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b12      	cmp	r3, #18
 8003742:	d105      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_ADC_ConfigChannel+0x238>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d123      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x21e>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b10      	cmp	r3, #16
 8003760:	d003      	beq.n	800376a <HAL_ADC_ConfigChannel+0x1e6>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b11      	cmp	r3, #17
 8003768:	d11b      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b10      	cmp	r3, #16
 800377c:	d111      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_ADC_ConfigChannel+0x23c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <HAL_ADC_ConfigChannel+0x240>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	0c9a      	lsrs	r2, r3, #18
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003794:	e002      	b.n	800379c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3b01      	subs	r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f9      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40012300 	.word	0x40012300
 80037bc:	40012000 	.word	0x40012000
 80037c0:	20000008 	.word	0x20000008
 80037c4:	431bde83 	.word	0x431bde83

080037c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d0:	4b79      	ldr	r3, [pc, #484]	; (80039b8 <ADC_Init+0x1f0>)
 80037d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	4a58      	ldr	r2, [pc, #352]	; (80039bc <ADC_Init+0x1f4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800386e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	e00f      	b.n	80038c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0202 	bic.w	r2, r2, #2
 80038d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7e1b      	ldrb	r3, [r3, #24]
 80038e0:	005a      	lsls	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003902:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003912:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	3b01      	subs	r3, #1
 8003920:	035a      	lsls	r2, r3, #13
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e007      	b.n	800393c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	3b01      	subs	r3, #1
 8003958:	051a      	lsls	r2, r3, #20
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800397e:	025a      	lsls	r2, r3, #9
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6899      	ldr	r1, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	029a      	lsls	r2, r3, #10
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40012300 	.word	0x40012300
 80039bc:	0f000001 	.word	0x0f000001

080039c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <__NVIC_SetPriorityGrouping+0x44>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039dc:	4013      	ands	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <__NVIC_SetPriorityGrouping+0x44>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	60d3      	str	r3, [r2, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <__NVIC_GetPriorityGrouping+0x18>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f003 0307 	and.w	r3, r3, #7
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	db0b      	blt.n	8003a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	f003 021f 	and.w	r2, r3, #31
 8003a3c:	4907      	ldr	r1, [pc, #28]	; (8003a5c <__NVIC_EnableIRQ+0x38>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2001      	movs	r0, #1
 8003a46:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	e000e100 	.word	0xe000e100

08003a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	db0a      	blt.n	8003a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	490c      	ldr	r1, [pc, #48]	; (8003aac <__NVIC_SetPriority+0x4c>)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	0112      	lsls	r2, r2, #4
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	440b      	add	r3, r1
 8003a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a88:	e00a      	b.n	8003aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4908      	ldr	r1, [pc, #32]	; (8003ab0 <__NVIC_SetPriority+0x50>)
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	3b04      	subs	r3, #4
 8003a98:	0112      	lsls	r2, r2, #4
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	761a      	strb	r2, [r3, #24]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000e100 	.word	0xe000e100
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f1c3 0307 	rsb	r3, r3, #7
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	bf28      	it	cs
 8003ad2:	2304      	movcs	r3, #4
 8003ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d902      	bls.n	8003ae4 <NVIC_EncodePriority+0x30>
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3b03      	subs	r3, #3
 8003ae2:	e000      	b.n	8003ae6 <NVIC_EncodePriority+0x32>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	401a      	ands	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003afc:	f04f 31ff 	mov.w	r1, #4294967295
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	43d9      	mvns	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b0c:	4313      	orrs	r3, r2
         );
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3724      	adds	r7, #36	; 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2c:	d301      	bcc.n	8003b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00f      	b.n	8003b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <SysTick_Config+0x40>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	f7ff ff8e 	bl	8003a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <SysTick_Config+0x40>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <SysTick_Config+0x40>)
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	e000e010 	.word	0xe000e010

08003b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff29 	bl	80039c0 <__NVIC_SetPriorityGrouping>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b88:	f7ff ff3e 	bl	8003a08 <__NVIC_GetPriorityGrouping>
 8003b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f7ff ff8e 	bl	8003ab4 <NVIC_EncodePriority>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff5d 	bl	8003a60 <__NVIC_SetPriority>
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff31 	bl	8003a24 <__NVIC_EnableIRQ>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ffa2 	bl	8003b1c <SysTick_Config>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff faea 	bl	80031c8 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e099      	b.n	8003d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c20:	e00f      	b.n	8003c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c22:	f7ff fad1 	bl	80031c8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d908      	bls.n	8003c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e078      	b.n	8003d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e8      	bne.n	8003c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4b38      	ldr	r3, [pc, #224]	; (8003d3c <HAL_DMA_Init+0x158>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d107      	bne.n	8003cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d117      	bne.n	8003d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb0d 	bl	8004308 <DMA_CheckFifoParam>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d02:	2301      	movs	r3, #1
 8003d04:	e016      	b.n	8003d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fac4 	bl	800429c <DMA_CalcBaseAndBitshift>
 8003d14:	4603      	mov	r3, r0
 8003d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	223f      	movs	r2, #63	; 0x3f
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	f010803f 	.word	0xf010803f

08003d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Start_IT+0x26>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e040      	b.n	8003de8 <HAL_DMA_Start_IT+0xa8>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12f      	bne.n	8003dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa56 	bl	8004240 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	223f      	movs	r2, #63	; 0x3f
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0216 	orr.w	r2, r2, #22
 8003dae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0208 	orr.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e005      	b.n	8003de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
 8003de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dfe:	f7ff f9e3 	bl	80031c8 <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d008      	beq.n	8003e22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e052      	b.n	8003ec8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0216 	bic.w	r2, r2, #22
 8003e30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_DMA_Abort+0x62>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e72:	e013      	b.n	8003e9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e74:	f7ff f9a8 	bl	80031c8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d90c      	bls.n	8003e9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e015      	b.n	8003ec8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e4      	bne.n	8003e74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d004      	beq.n	8003eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00c      	b.n	8003f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f20:	4b8e      	ldr	r3, [pc, #568]	; (800415c <HAL_DMA_IRQHandler+0x248>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a8e      	ldr	r2, [pc, #568]	; (8004160 <HAL_DMA_IRQHandler+0x24c>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	2208      	movs	r2, #8
 8003f40:	409a      	lsls	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01a      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0204 	bic.w	r2, r2, #4
 8003f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f043 0201 	orr.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0202 	orr.w	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	2204      	movs	r2, #4
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	2204      	movs	r2, #4
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	f043 0204 	orr.w	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d043      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	2210      	movs	r2, #16
 8004010:	409a      	lsls	r2, r3
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d018      	beq.n	8004056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d024      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
 8004042:	e01f      	b.n	8004084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e016      	b.n	8004084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0208 	bic.w	r2, r2, #8
 8004072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2220      	movs	r2, #32
 800408a:	409a      	lsls	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 808f 	beq.w	80041b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8087 	beq.w	80041b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2220      	movs	r2, #32
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d136      	bne.n	800412c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0216 	bic.w	r2, r2, #22
 80040cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_DMA_IRQHandler+0x1da>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	223f      	movs	r2, #63	; 0x3f
 8004104:	409a      	lsls	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d07e      	beq.n	8004220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
        }
        return;
 800412a:	e079      	b.n	8004220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	2b00      	cmp	r3, #0
 800414e:	d031      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
 8004158:	e02c      	b.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
 800415a:	bf00      	nop
 800415c:	20000008 	.word	0x20000008
 8004160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d023      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e01e      	b.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10f      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0210 	bic.w	r2, r2, #16
 8004192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d032      	beq.n	8004222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d022      	beq.n	800420e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2205      	movs	r2, #5
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d307      	bcc.n	80041fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f2      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x2cc>
 80041fa:	e000      	b.n	80041fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
 800421e:	e000      	b.n	8004222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004220:	bf00      	nop
    }
  }
}
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800425c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d108      	bne.n	8004280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800427e:	e007      	b.n	8004290 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	3b10      	subs	r3, #16
 80042ac:	4a14      	ldr	r2, [pc, #80]	; (8004300 <DMA_CalcBaseAndBitshift+0x64>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <DMA_CalcBaseAndBitshift+0x68>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d909      	bls.n	80042de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	1d1a      	adds	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
 80042dc:	e007      	b.n	80042ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	aaaaaaab 	.word	0xaaaaaaab
 8004304:	08019a04 	.word	0x08019a04

08004308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d11f      	bne.n	8004362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d856      	bhi.n	80043d6 <DMA_CheckFifoParam+0xce>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <DMA_CheckFifoParam+0x28>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004353 	.word	0x08004353
 8004338:	08004341 	.word	0x08004341
 800433c:	080043d7 	.word	0x080043d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d046      	beq.n	80043da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004350:	e043      	b.n	80043da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435a:	d140      	bne.n	80043de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004360:	e03d      	b.n	80043de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436a:	d121      	bne.n	80043b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b03      	cmp	r3, #3
 8004370:	d837      	bhi.n	80043e2 <DMA_CheckFifoParam+0xda>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <DMA_CheckFifoParam+0x70>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	08004389 	.word	0x08004389
 800437c:	0800438f 	.word	0x0800438f
 8004380:	08004389 	.word	0x08004389
 8004384:	080043a1 	.word	0x080043a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	e030      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d025      	beq.n	80043e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439e:	e022      	b.n	80043e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043a8:	d11f      	bne.n	80043ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043ae:	e01c      	b.n	80043ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d903      	bls.n	80043be <DMA_CheckFifoParam+0xb6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d003      	beq.n	80043c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043bc:	e018      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      break;
 80043c2:	e015      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      break;
 80043d4:	e00b      	b.n	80043ee <DMA_CheckFifoParam+0xe6>
      break;
 80043d6:	bf00      	nop
 80043d8:	e00a      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      break;
 80043da:	bf00      	nop
 80043dc:	e008      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
 80043e0:	e006      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e004      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      break;
 80043e6:	bf00      	nop
 80043e8:	e002      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ee:	bf00      	nop
    }
  } 
  
  return status; 
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e16b      	b.n	80046f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800441c:	2201      	movs	r2, #1
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	f040 815a 	bne.w	80046ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d005      	beq.n	8004452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800444e:	2b02      	cmp	r3, #2
 8004450:	d130      	bne.n	80044b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	2203      	movs	r2, #3
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004488:	2201      	movs	r2, #1
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 0201 	and.w	r2, r3, #1
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d017      	beq.n	80044f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d123      	bne.n	8004544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	08da      	lsrs	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3208      	adds	r2, #8
 8004504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	220f      	movs	r2, #15
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	08da      	lsrs	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3208      	adds	r2, #8
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2203      	movs	r2, #3
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0203 	and.w	r2, r3, #3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80b4 	beq.w	80046ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b60      	ldr	r3, [pc, #384]	; (800470c <HAL_GPIO_Init+0x30c>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4a5f      	ldr	r2, [pc, #380]	; (800470c <HAL_GPIO_Init+0x30c>)
 8004590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004594:	6453      	str	r3, [r2, #68]	; 0x44
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_GPIO_Init+0x30c>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a2:	4a5b      	ldr	r2, [pc, #364]	; (8004710 <HAL_GPIO_Init+0x310>)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	3302      	adds	r3, #2
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_GPIO_Init+0x314>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02b      	beq.n	8004626 <HAL_GPIO_Init+0x226>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a51      	ldr	r2, [pc, #324]	; (8004718 <HAL_GPIO_Init+0x318>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d025      	beq.n	8004622 <HAL_GPIO_Init+0x222>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a50      	ldr	r2, [pc, #320]	; (800471c <HAL_GPIO_Init+0x31c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <HAL_GPIO_Init+0x21e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4f      	ldr	r2, [pc, #316]	; (8004720 <HAL_GPIO_Init+0x320>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d019      	beq.n	800461a <HAL_GPIO_Init+0x21a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <HAL_GPIO_Init+0x324>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_GPIO_Init+0x216>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4d      	ldr	r2, [pc, #308]	; (8004728 <HAL_GPIO_Init+0x328>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00d      	beq.n	8004612 <HAL_GPIO_Init+0x212>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4c      	ldr	r2, [pc, #304]	; (800472c <HAL_GPIO_Init+0x32c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <HAL_GPIO_Init+0x20e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4b      	ldr	r2, [pc, #300]	; (8004730 <HAL_GPIO_Init+0x330>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_GPIO_Init+0x20a>
 8004606:	2307      	movs	r3, #7
 8004608:	e00e      	b.n	8004628 <HAL_GPIO_Init+0x228>
 800460a:	2308      	movs	r3, #8
 800460c:	e00c      	b.n	8004628 <HAL_GPIO_Init+0x228>
 800460e:	2306      	movs	r3, #6
 8004610:	e00a      	b.n	8004628 <HAL_GPIO_Init+0x228>
 8004612:	2305      	movs	r3, #5
 8004614:	e008      	b.n	8004628 <HAL_GPIO_Init+0x228>
 8004616:	2304      	movs	r3, #4
 8004618:	e006      	b.n	8004628 <HAL_GPIO_Init+0x228>
 800461a:	2303      	movs	r3, #3
 800461c:	e004      	b.n	8004628 <HAL_GPIO_Init+0x228>
 800461e:	2302      	movs	r3, #2
 8004620:	e002      	b.n	8004628 <HAL_GPIO_Init+0x228>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <HAL_GPIO_Init+0x228>
 8004626:	2300      	movs	r3, #0
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	f002 0203 	and.w	r2, r2, #3
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	4093      	lsls	r3, r2
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004638:	4935      	ldr	r1, [pc, #212]	; (8004710 <HAL_GPIO_Init+0x310>)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	3302      	adds	r3, #2
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004646:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <HAL_GPIO_Init+0x334>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800466a:	4a32      	ldr	r2, [pc, #200]	; (8004734 <HAL_GPIO_Init+0x334>)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004670:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_GPIO_Init+0x334>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004694:	4a27      	ldr	r2, [pc, #156]	; (8004734 <HAL_GPIO_Init+0x334>)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800469a:	4b26      	ldr	r3, [pc, #152]	; (8004734 <HAL_GPIO_Init+0x334>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_GPIO_Init+0x334>)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_GPIO_Init+0x334>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046e8:	4a12      	ldr	r2, [pc, #72]	; (8004734 <HAL_GPIO_Init+0x334>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	f67f ae90 	bls.w	800441c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3724      	adds	r7, #36	; 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	40013800 	.word	0x40013800
 8004714:	40020000 	.word	0x40020000
 8004718:	40020400 	.word	0x40020400
 800471c:	40020800 	.word	0x40020800
 8004720:	40020c00 	.word	0x40020c00
 8004724:	40021000 	.word	0x40021000
 8004728:	40021400 	.word	0x40021400
 800472c:	40021800 	.word	0x40021800
 8004730:	40021c00 	.word	0x40021c00
 8004734:	40013c00 	.word	0x40013c00

08004738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	887b      	ldrh	r3, [r7, #2]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e001      	b.n	800475a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
 8004774:	4613      	mov	r3, r2
 8004776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004778:	787b      	ldrb	r3, [r7, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800477e:	887a      	ldrh	r2, [r7, #2]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004784:	e003      	b.n	800478e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004786:	887b      	ldrh	r3, [r7, #2]
 8004788:	041a      	lsls	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	619a      	str	r2, [r3, #24]
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b2:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fa62 	bl	8001c84 <HAL_GPIO_EXTI_Callback>
  }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40013c00 	.word	0x40013c00

080047cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e12b      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fe56 	bl	80014a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800482e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004830:	f001 fc14 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a81      	ldr	r2, [pc, #516]	; (8004a40 <HAL_I2C_Init+0x274>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d807      	bhi.n	8004850 <HAL_I2C_Init+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a80      	ldr	r2, [pc, #512]	; (8004a44 <HAL_I2C_Init+0x278>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e006      	b.n	800485e <HAL_I2C_Init+0x92>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a7d      	ldr	r2, [pc, #500]	; (8004a48 <HAL_I2C_Init+0x27c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0e7      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a78      	ldr	r2, [pc, #480]	; (8004a4c <HAL_I2C_Init+0x280>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0c9b      	lsrs	r3, r3, #18
 8004870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a6a      	ldr	r2, [pc, #424]	; (8004a40 <HAL_I2C_Init+0x274>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d802      	bhi.n	80048a0 <HAL_I2C_Init+0xd4>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	e009      	b.n	80048b4 <HAL_I2C_Init+0xe8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	4a69      	ldr	r2, [pc, #420]	; (8004a50 <HAL_I2C_Init+0x284>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	3301      	adds	r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	495c      	ldr	r1, [pc, #368]	; (8004a40 <HAL_I2C_Init+0x274>)
 80048d0:	428b      	cmp	r3, r1
 80048d2:	d819      	bhi.n	8004908 <HAL_I2C_Init+0x13c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e59      	subs	r1, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048e8:	400b      	ands	r3, r1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_I2C_Init+0x138>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e59      	subs	r1, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	e051      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004904:	2304      	movs	r3, #4
 8004906:	e04f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <HAL_I2C_Init+0x168>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e012      	b.n	800495a <HAL_I2C_Init+0x18e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	0099      	lsls	r1, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x196>
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10e      	bne.n	8004988 <HAL_I2C_Init+0x1bc>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e58      	subs	r0, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	440b      	add	r3, r1
 8004978:	fbb0 f3f3 	udiv	r3, r0, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004986:	e00f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	0099      	lsls	r1, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6809      	ldr	r1, [r1, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6911      	ldr	r1, [r2, #16]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	000186a0 	.word	0x000186a0
 8004a44:	001e847f 	.word	0x001e847f
 8004a48:	003d08ff 	.word	0x003d08ff
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	817b      	strh	r3, [r7, #10]
 8004a66:	460b      	mov	r3, r1
 8004a68:	813b      	strh	r3, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a6e:	f7fe fbab 	bl	80031c8 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	f040 80d9 	bne.w	8004c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2319      	movs	r3, #25
 8004a88:	2201      	movs	r2, #1
 8004a8a:	496d      	ldr	r1, [pc, #436]	; (8004c40 <HAL_I2C_Mem_Write+0x1ec>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fc7f 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0cc      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Mem_Write+0x56>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0c5      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d007      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2221      	movs	r2, #33	; 0x21
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	; (8004c44 <HAL_I2C_Mem_Write+0x1f0>)
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b12:	88f8      	ldrh	r0, [r7, #6]
 8004b14:	893a      	ldrh	r2, [r7, #8]
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4603      	mov	r3, r0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fab6 	bl	8005094 <I2C_RequestMemoryWrite>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d052      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e081      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fd00 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06b      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1aa      	bne.n	8004b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fcec 	bl	80055be <I2C_WaitOnBTFFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d107      	bne.n	8004c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e016      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	00100002 	.word	0x00100002
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	817b      	strh	r3, [r7, #10]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	813b      	strh	r3, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c62:	f7fe fab1 	bl	80031c8 <HAL_GetTick>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	f040 8208 	bne.w	8005086 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2319      	movs	r3, #25
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	497b      	ldr	r1, [pc, #492]	; (8004e6c <HAL_I2C_Mem_Read+0x224>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fb85 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e1fb      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Mem_Read+0x56>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e1f4      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d007      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2222      	movs	r2, #34	; 0x22
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a5b      	ldr	r2, [pc, #364]	; (8004e70 <HAL_I2C_Mem_Read+0x228>)
 8004d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d06:	88f8      	ldrh	r0, [r7, #6]
 8004d08:	893a      	ldrh	r2, [r7, #8]
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa52 	bl	80051c0 <I2C_RequestMemoryRead>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e1b0      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d113      	bne.n	8004d56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e184      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d11b      	bne.n	8004d96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e164      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	e144      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dec:	e138      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	f200 80f1 	bhi.w	8004fda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d123      	bne.n	8004e48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fc1b 	bl	8005640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e139      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e46:	e10b      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d14e      	bne.n	8004eee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2200      	movs	r2, #0
 8004e58:	4906      	ldr	r1, [pc, #24]	; (8004e74 <HAL_I2C_Mem_Read+0x22c>)
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fa98 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e10e      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
 8004e6a:	bf00      	nop
 8004e6c:	00100002 	.word	0x00100002
 8004e70:	ffff0000 	.word	0xffff0000
 8004e74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eec:	e0b8      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4966      	ldr	r1, [pc, #408]	; (8005090 <HAL_I2C_Mem_Read+0x448>)
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fa49 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0bf      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2200      	movs	r2, #0
 8004f52:	494f      	ldr	r1, [pc, #316]	; (8005090 <HAL_I2C_Mem_Read+0x448>)
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fa1b 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e091      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fd8:	e042      	b.n	8005060 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fb2e 	bl	8005640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e04c      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d118      	bne.n	8005060 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f aec2 	bne.w	8004dee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3728      	adds	r7, #40	; 0x28
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	00010004 	.word	0x00010004

08005094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	817b      	strh	r3, [r7, #10]
 80050a6:	460b      	mov	r3, r1
 80050a8:	813b      	strh	r3, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f960 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e4:	d103      	bne.n	80050ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e05f      	b.n	80051b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	492d      	ldr	r1, [pc, #180]	; (80051bc <I2C_RequestMemoryWrite+0x128>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f998 	bl	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04c      	b.n	80051b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fa02 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b04      	cmp	r3, #4
 8005144:	d107      	bne.n	8005156 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e02b      	b.n	80051b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005160:	893b      	ldrh	r3, [r7, #8]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	e021      	b.n	80051b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	b29b      	uxth	r3, r3
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	6a39      	ldr	r1, [r7, #32]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f9dc 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b04      	cmp	r3, #4
 8005190:	d107      	bne.n	80051a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e005      	b.n	80051b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	00010002 	.word	0x00010002

080051c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	4608      	mov	r0, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	461a      	mov	r2, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	817b      	strh	r3, [r7, #10]
 80051d2:	460b      	mov	r3, r1
 80051d4:	813b      	strh	r3, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2200      	movs	r2, #0
 8005202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f8c2 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00d      	beq.n	800522e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	d103      	bne.n	800522a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0aa      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800523c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	4952      	ldr	r1, [pc, #328]	; (800538c <I2C_RequestMemoryRead+0x1cc>)
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f8fa 	bl	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e097      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	6a39      	ldr	r1, [r7, #32]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f964 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b04      	cmp	r3, #4
 8005280:	d107      	bne.n	8005292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e076      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800529c:	893b      	ldrh	r3, [r7, #8]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]
 80052a6:	e021      	b.n	80052ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052a8:	893b      	ldrh	r3, [r7, #8]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	6a39      	ldr	r1, [r7, #32]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f93e 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d107      	bne.n	80052de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e050      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e2:	893b      	ldrh	r3, [r7, #8]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	6a39      	ldr	r1, [r7, #32]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f923 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00d      	beq.n	8005318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	2b04      	cmp	r3, #4
 8005302:	d107      	bne.n	8005314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e035      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2200      	movs	r2, #0
 8005330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f82b 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	d103      	bne.n	8005358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e013      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800535c:	897b      	ldrh	r3, [r7, #10]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	6a3a      	ldr	r2, [r7, #32]
 8005370:	4906      	ldr	r1, [pc, #24]	; (800538c <I2C_RequestMemoryRead+0x1cc>)
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f863 	bl	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	00010002 	.word	0x00010002

08005390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a0:	e025      	b.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d021      	beq.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7fd ff0d 	bl	80031c8 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d116      	bne.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e023      	b.n	8005436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10d      	bne.n	8005414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	43da      	mvns	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4013      	ands	r3, r2
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	e00c      	b.n	800542e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	43da      	mvns	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4013      	ands	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	429a      	cmp	r2, r3
 8005432:	d0b6      	beq.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544c:	e051      	b.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d123      	bne.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e046      	b.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d021      	beq.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fd fe8b 	bl	80031c8 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d116      	bne.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e020      	b.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10c      	bne.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	43da      	mvns	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e00b      	b.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d18d      	bne.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005548:	e02d      	b.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f8ce 	bl	80056ec <I2C_IsAcknowledgeFailed>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e02d      	b.n	80055b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d021      	beq.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fd fe31 	bl	80031c8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e007      	b.n	80055b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b0:	2b80      	cmp	r3, #128	; 0x80
 80055b2:	d1ca      	bne.n	800554a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ca:	e02d      	b.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f88d 	bl	80056ec <I2C_IsAcknowledgeFailed>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e02d      	b.n	8005638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d021      	beq.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fd fdf0 	bl	80031c8 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d1ca      	bne.n	80055cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800564c:	e042      	b.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b10      	cmp	r3, #16
 800565a:	d119      	bne.n	8005690 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0210 	mvn.w	r2, #16
 8005664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e029      	b.n	80056e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005690:	f7fd fd9a 	bl	80031c8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d116      	bne.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e007      	b.n	80056e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d1b5      	bne.n	800564e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005702:	d11b      	bne.n	800573c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800570c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f043 0204 	orr.w	r2, r3, #4
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a07      	ldr	r2, [pc, #28]	; (8005774 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	4a05      	ldr	r2, [pc, #20]	; (8005778 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005762:	f043 0304 	orr.w	r3, r3, #4
 8005766:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005768:	bf30      	wfi
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40007000 	.word	0x40007000
 8005778:	e000ed00 	.word	0xe000ed00

0800577c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e267      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d075      	beq.n	8005886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800579a:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d00c      	beq.n	80057c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a6:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d112      	bne.n	80057d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b2:	4b82      	ldr	r3, [pc, #520]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057be:	d10b      	bne.n	80057d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c0:	4b7e      	ldr	r3, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d05b      	beq.n	8005884 <HAL_RCC_OscConfig+0x108>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d157      	bne.n	8005884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e242      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e0:	d106      	bne.n	80057f0 <HAL_RCC_OscConfig+0x74>
 80057e2:	4b76      	ldr	r3, [pc, #472]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a75      	ldr	r2, [pc, #468]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e01d      	b.n	800582c <HAL_RCC_OscConfig+0xb0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCC_OscConfig+0x98>
 80057fa:	4b70      	ldr	r3, [pc, #448]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a6f      	ldr	r2, [pc, #444]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	4b6d      	ldr	r3, [pc, #436]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6c      	ldr	r2, [pc, #432]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e00b      	b.n	800582c <HAL_RCC_OscConfig+0xb0>
 8005814:	4b69      	ldr	r3, [pc, #420]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a68      	ldr	r2, [pc, #416]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 800581a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4b66      	ldr	r3, [pc, #408]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a65      	ldr	r2, [pc, #404]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fd fcc8 	bl	80031c8 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800583c:	f7fd fcc4 	bl	80031c8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e207      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0xc0>
 800585a:	e014      	b.n	8005886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fd fcb4 	bl	80031c8 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005864:	f7fd fcb0 	bl	80031c8 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e1f3      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005876:	4b51      	ldr	r3, [pc, #324]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0xe8>
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d063      	beq.n	800595a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00b      	beq.n	80058b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d11c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058aa:	4b44      	ldr	r3, [pc, #272]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d116      	bne.n	80058e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_RCC_OscConfig+0x152>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e1c7      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4937      	ldr	r1, [pc, #220]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e2:	e03a      	b.n	800595a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d020      	beq.n	800592e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ec:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <HAL_RCC_OscConfig+0x244>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f2:	f7fd fc69 	bl	80031c8 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058fa:	f7fd fc65 	bl	80031c8 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e1a8      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4925      	ldr	r1, [pc, #148]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005928:	4313      	orrs	r3, r2
 800592a:	600b      	str	r3, [r1, #0]
 800592c:	e015      	b.n	800595a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592e:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_OscConfig+0x244>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fd fc48 	bl	80031c8 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800593c:	f7fd fc44 	bl	80031c8 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e187      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d036      	beq.n	80059d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_RCC_OscConfig+0x248>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005974:	f7fd fc28 	bl	80031c8 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800597c:	f7fd fc24 	bl	80031c8 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e167      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_OscConfig+0x240>)
 8005990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0x200>
 800599a:	e01b      	b.n	80059d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCC_OscConfig+0x248>)
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a2:	f7fd fc11 	bl	80031c8 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a8:	e00e      	b.n	80059c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059aa:	f7fd fc0d 	bl	80031c8 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d907      	bls.n	80059c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e150      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
 80059bc:	40023800 	.word	0x40023800
 80059c0:	42470000 	.word	0x42470000
 80059c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c8:	4b88      	ldr	r3, [pc, #544]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 80059ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ea      	bne.n	80059aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8097 	beq.w	8005b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e6:	4b81      	ldr	r3, [pc, #516]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	4b7d      	ldr	r3, [pc, #500]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	4a7c      	ldr	r2, [pc, #496]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	6413      	str	r3, [r2, #64]	; 0x40
 8005a02:	4b7a      	ldr	r3, [pc, #488]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	4b77      	ldr	r3, [pc, #476]	; (8005bf0 <HAL_RCC_OscConfig+0x474>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d118      	bne.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1e:	4b74      	ldr	r3, [pc, #464]	; (8005bf0 <HAL_RCC_OscConfig+0x474>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a73      	ldr	r2, [pc, #460]	; (8005bf0 <HAL_RCC_OscConfig+0x474>)
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2a:	f7fd fbcd 	bl	80031c8 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a32:	f7fd fbc9 	bl	80031c8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e10c      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a44:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <HAL_RCC_OscConfig+0x474>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0f0      	beq.n	8005a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d106      	bne.n	8005a66 <HAL_RCC_OscConfig+0x2ea>
 8005a58:	4b64      	ldr	r3, [pc, #400]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	4a63      	ldr	r2, [pc, #396]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
 8005a64:	e01c      	b.n	8005aa0 <HAL_RCC_OscConfig+0x324>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x30c>
 8005a6e:	4b5f      	ldr	r3, [pc, #380]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	4a5e      	ldr	r2, [pc, #376]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a74:	f043 0304 	orr.w	r3, r3, #4
 8005a78:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7a:	4b5c      	ldr	r3, [pc, #368]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a5b      	ldr	r2, [pc, #364]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	e00b      	b.n	8005aa0 <HAL_RCC_OscConfig+0x324>
 8005a88:	4b58      	ldr	r3, [pc, #352]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4a57      	ldr	r2, [pc, #348]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
 8005a92:	6713      	str	r3, [r2, #112]	; 0x70
 8005a94:	4b55      	ldr	r3, [pc, #340]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	4a54      	ldr	r2, [pc, #336]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005a9a:	f023 0304 	bic.w	r3, r3, #4
 8005a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d015      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa8:	f7fd fb8e 	bl	80031c8 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab0:	f7fd fb8a 	bl	80031c8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e0cb      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac6:	4b49      	ldr	r3, [pc, #292]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0ee      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x334>
 8005ad2:	e014      	b.n	8005afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad4:	f7fd fb78 	bl	80031c8 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005adc:	f7fd fb74 	bl	80031c8 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0b5      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af2:	4b3e      	ldr	r3, [pc, #248]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1ee      	bne.n	8005adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d105      	bne.n	8005b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b04:	4b39      	ldr	r3, [pc, #228]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	4a38      	ldr	r2, [pc, #224]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80a1 	beq.w	8005c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b1a:	4b34      	ldr	r3, [pc, #208]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d05c      	beq.n	8005be0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d141      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2e:	4b31      	ldr	r3, [pc, #196]	; (8005bf4 <HAL_RCC_OscConfig+0x478>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fd fb48 	bl	80031c8 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fd fb44 	bl	80031c8 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e087      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4e:	4b27      	ldr	r3, [pc, #156]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	019b      	lsls	r3, r3, #6
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	3b01      	subs	r3, #1
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	491b      	ldr	r1, [pc, #108]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_RCC_OscConfig+0x478>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fd fb1d 	bl	80031c8 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b92:	f7fd fb19 	bl	80031c8 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e05c      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba4:	4b11      	ldr	r3, [pc, #68]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x416>
 8005bb0:	e054      	b.n	8005c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <HAL_RCC_OscConfig+0x478>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fd fb06 	bl	80031c8 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fd fb02 	bl	80031c8 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e045      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_RCC_OscConfig+0x470>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x444>
 8005bde:	e03d      	b.n	8005c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e038      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	40007000 	.word	0x40007000
 8005bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bf8:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <HAL_RCC_OscConfig+0x4ec>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d028      	beq.n	8005c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d121      	bne.n	8005c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d11a      	bne.n	8005c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c28:	4013      	ands	r3, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d111      	bne.n	8005c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	3b01      	subs	r3, #1
 8005c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40023800 	.word	0x40023800

08005c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0cc      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c80:	4b68      	ldr	r3, [pc, #416]	; (8005e24 <HAL_RCC_ClockConfig+0x1b8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d90c      	bls.n	8005ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8e:	4b65      	ldr	r3, [pc, #404]	; (8005e24 <HAL_RCC_ClockConfig+0x1b8>)
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c96:	4b63      	ldr	r3, [pc, #396]	; (8005e24 <HAL_RCC_ClockConfig+0x1b8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0b8      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc0:	4b59      	ldr	r3, [pc, #356]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a58      	ldr	r2, [pc, #352]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd8:	4b53      	ldr	r3, [pc, #332]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4a52      	ldr	r2, [pc, #328]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce4:	4b50      	ldr	r3, [pc, #320]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	494d      	ldr	r1, [pc, #308]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d044      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d107      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	4b47      	ldr	r3, [pc, #284]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d119      	bne.n	8005d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e07f      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d003      	beq.n	8005d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d107      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2a:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e06f      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3a:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e067      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d4a:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f023 0203 	bic.w	r2, r3, #3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	4934      	ldr	r1, [pc, #208]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d5c:	f7fd fa34 	bl	80031c8 <HAL_GetTick>
 8005d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d64:	f7fd fa30 	bl	80031c8 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e04f      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7a:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 020c 	and.w	r2, r3, #12
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d1eb      	bne.n	8005d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d20c      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b22      	ldr	r3, [pc, #136]	; (8005e24 <HAL_RCC_ClockConfig+0x1b8>)
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da2:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <HAL_RCC_ClockConfig+0x1b8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d001      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e032      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc0:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	4916      	ldr	r1, [pc, #88]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dde:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	490e      	ldr	r1, [pc, #56]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005df2:	f000 f821 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005df6:	4602      	mov	r2, r0
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	091b      	lsrs	r3, r3, #4
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	490a      	ldr	r1, [pc, #40]	; (8005e2c <HAL_RCC_ClockConfig+0x1c0>)
 8005e04:	5ccb      	ldrb	r3, [r1, r3]
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fd f994 	bl	8003140 <HAL_InitTick>

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40023c00 	.word	0x40023c00
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	080199ec 	.word	0x080199ec
 8005e30:	20000008 	.word	0x20000008
 8005e34:	2000000c 	.word	0x2000000c

08005e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e3c:	b094      	sub	sp, #80	; 0x50
 8005e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	647b      	str	r3, [r7, #68]	; 0x44
 8005e44:	2300      	movs	r3, #0
 8005e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e48:	2300      	movs	r3, #0
 8005e4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e50:	4b79      	ldr	r3, [pc, #484]	; (8006038 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 030c 	and.w	r3, r3, #12
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d00d      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x40>
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	f200 80e1 	bhi.w	8006024 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x34>
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d003      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e6a:	e0db      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e6c:	4b73      	ldr	r3, [pc, #460]	; (800603c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e70:	e0db      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e72:	4b73      	ldr	r3, [pc, #460]	; (8006040 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e76:	e0d8      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e78:	4b6f      	ldr	r3, [pc, #444]	; (8006038 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e82:	4b6d      	ldr	r3, [pc, #436]	; (8006038 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d063      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8e:	4b6a      	ldr	r3, [pc, #424]	; (8006038 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	2200      	movs	r2, #0
 8005e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	f04f 0000 	mov.w	r0, #0
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	0159      	lsls	r1, r3, #5
 8005eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ebc:	0150      	lsls	r0, r2, #5
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	1a51      	subs	r1, r2, r1
 8005ec6:	6139      	str	r1, [r7, #16]
 8005ec8:	4629      	mov	r1, r5
 8005eca:	eb63 0301 	sbc.w	r3, r3, r1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005edc:	4659      	mov	r1, fp
 8005ede:	018b      	lsls	r3, r1, #6
 8005ee0:	4651      	mov	r1, sl
 8005ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ee6:	4651      	mov	r1, sl
 8005ee8:	018a      	lsls	r2, r1, #6
 8005eea:	4651      	mov	r1, sl
 8005eec:	ebb2 0801 	subs.w	r8, r2, r1
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0a:	4690      	mov	r8, r2
 8005f0c:	4699      	mov	r9, r3
 8005f0e:	4623      	mov	r3, r4
 8005f10:	eb18 0303 	adds.w	r3, r8, r3
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	462b      	mov	r3, r5
 8005f18:	eb49 0303 	adc.w	r3, r9, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	024b      	lsls	r3, r1, #9
 8005f2e:	4621      	mov	r1, r4
 8005f30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f34:	4621      	mov	r1, r4
 8005f36:	024a      	lsls	r2, r1, #9
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3e:	2200      	movs	r2, #0
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f48:	f7fa feee 	bl	8000d28 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f54:	e058      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f56:	4b38      	ldr	r3, [pc, #224]	; (8006038 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	099b      	lsrs	r3, r3, #6
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	4611      	mov	r1, r2
 8005f62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f66:	623b      	str	r3, [r7, #32]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	f04f 0000 	mov.w	r0, #0
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	0159      	lsls	r1, r3, #5
 8005f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f82:	0150      	lsls	r0, r2, #5
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4641      	mov	r1, r8
 8005f8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f8e:	4649      	mov	r1, r9
 8005f90:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fa8:	ebb2 040a 	subs.w	r4, r2, sl
 8005fac:	eb63 050b 	sbc.w	r5, r3, fp
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	00eb      	lsls	r3, r5, #3
 8005fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fbe:	00e2      	lsls	r2, r4, #3
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	4643      	mov	r3, r8
 8005fc6:	18e3      	adds	r3, r4, r3
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	464b      	mov	r3, r9
 8005fcc:	eb45 0303 	adc.w	r3, r5, r3
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fde:	4629      	mov	r1, r5
 8005fe0:	028b      	lsls	r3, r1, #10
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fe8:	4621      	mov	r1, r4
 8005fea:	028a      	lsls	r2, r1, #10
 8005fec:	4610      	mov	r0, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	61fa      	str	r2, [r7, #28]
 8005ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ffc:	f7fa fe94 	bl	8000d28 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4613      	mov	r3, r2
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <HAL_RCC_GetSysClockFreq+0x200>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	3301      	adds	r3, #1
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800601a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006022:	e002      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetSysClockFreq+0x204>)
 8006026:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800602c:	4618      	mov	r0, r3
 800602e:	3750      	adds	r7, #80	; 0x50
 8006030:	46bd      	mov	sp, r7
 8006032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800
 800603c:	00f42400 	.word	0x00f42400
 8006040:	007a1200 	.word	0x007a1200

08006044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <HAL_RCC_GetHCLKFreq+0x14>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000008 	.word	0x20000008

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006060:	f7ff fff0 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	0a9b      	lsrs	r3, r3, #10
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4903      	ldr	r1, [pc, #12]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	080199fc 	.word	0x080199fc

08006084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006088:	f7ff ffdc 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	0b5b      	lsrs	r3, r3, #13
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40023800 	.word	0x40023800
 80060a8:	080199fc 	.word	0x080199fc

080060ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e022      	b.n	8006104 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fb fe17 	bl	8001d04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2203      	movs	r2, #3
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f814 	bl	800610c <HAL_SD_InitCard>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e00a      	b.n	8006104 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b08e      	sub	sp, #56	; 0x38
 8006110:	af04      	add	r7, sp, #16
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006114:	2300      	movs	r3, #0
 8006116:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006128:	2376      	movs	r3, #118	; 0x76
 800612a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681d      	ldr	r5, [r3, #0]
 8006130:	466c      	mov	r4, sp
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800613a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006144:	4628      	mov	r0, r5
 8006146:	f004 f94f 	bl	800a3e8 <SDIO_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04f      	b.n	80061fc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800615c:	4b29      	ldr	r3, [pc, #164]	; (8006204 <HAL_SD_InitCard+0xf8>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f004 f987 	bl	800a47a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <HAL_SD_InitCard+0xf8>)
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006172:	2002      	movs	r0, #2
 8006174:	f7fd f834 	bl	80031e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 f805 	bl	8007188 <SD_PowerON>
 800617e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e02e      	b.n	80061fc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 ff24 	bl	8006fec <SD_InitCard>
 80061a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e01b      	b.n	80061fc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061cc:	4618      	mov	r0, r3
 80061ce:	f004 f9e6 	bl	800a59e <SDMMC_CmdBlockLength>
 80061d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00f      	beq.n	80061fa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <HAL_SD_InitCard+0xfc>)
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3728      	adds	r7, #40	; 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bdb0      	pop	{r4, r5, r7, pc}
 8006204:	422580a0 	.word	0x422580a0
 8006208:	004005ff 	.word	0x004005ff

0800620c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0c0      	b.n	80063b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	f040 80b9 	bne.w	80063b4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	441a      	add	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006252:	429a      	cmp	r2, r3
 8006254:	d907      	bls.n	8006266 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0a7      	b.n	80063b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2203      	movs	r2, #3
 800626a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a4c      	ldr	r2, [pc, #304]	; (80063c0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a4b      	ldr	r2, [pc, #300]	; (80063c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006298:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2200      	movs	r2, #0
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2200      	movs	r2, #0
 80062a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3380      	adds	r3, #128	; 0x80
 80062d0:	4619      	mov	r1, r3
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	025b      	lsls	r3, r3, #9
 80062d8:	089b      	lsrs	r3, r3, #2
 80062da:	f7fd fd31 	bl	8003d40 <HAL_DMA_Start_IT>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a33      	ldr	r2, [pc, #204]	; (80063c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e050      	b.n	80063b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	2b01      	cmp	r3, #1
 8006320:	d002      	beq.n	8006328 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	025b      	lsls	r3, r3, #9
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006328:	f04f 33ff 	mov.w	r3, #4294967295
 800632c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	025b      	lsls	r3, r3, #9
 8006332:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006334:	2390      	movs	r3, #144	; 0x90
 8006336:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006338:	2302      	movs	r3, #2
 800633a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800633c:	2300      	movs	r3, #0
 800633e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006340:	2301      	movs	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f107 0210 	add.w	r2, r7, #16
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f004 f8f9 	bl	800a546 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d90a      	bls.n	8006370 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2282      	movs	r2, #130	; 0x82
 800635e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006366:	4618      	mov	r0, r3
 8006368:	f004 f95d 	bl	800a626 <SDMMC_CmdReadMultiBlock>
 800636c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800636e:	e009      	b.n	8006384 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2281      	movs	r2, #129	; 0x81
 8006374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637c:	4618      	mov	r0, r3
 800637e:	f004 f930 	bl	800a5e2 <SDMMC_CmdReadSingleBlock>
 8006382:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d012      	beq.n	80063b0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a0e      	ldr	r2, [pc, #56]	; (80063c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e002      	b.n	80063b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	e000      	b.n	80063b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80063b4:	2302      	movs	r3, #2
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3730      	adds	r7, #48	; 0x30
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	08006dfb 	.word	0x08006dfb
 80063c4:	08006e6d 	.word	0x08006e6d
 80063c8:	004005ff 	.word	0x004005ff
 80063cc:	4225858c 	.word	0x4225858c

080063d0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	; 0x30
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0c5      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 80be 	bne.w	8006582 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800640c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	441a      	add	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006416:	429a      	cmp	r2, r3
 8006418:	d907      	bls.n	800642a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e0ac      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2203      	movs	r2, #3
 800642e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006448:	f043 0302 	orr.w	r3, r3, #2
 800644c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	4a4e      	ldr	r2, [pc, #312]	; (800658c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645a:	4a4d      	ldr	r2, [pc, #308]	; (8006590 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800645c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	2200      	movs	r2, #0
 8006464:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	2b01      	cmp	r3, #1
 800646c:	d002      	beq.n	8006474 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	025b      	lsls	r3, r3, #9
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d90a      	bls.n	8006490 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22a0      	movs	r2, #160	; 0xa0
 800647e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006486:	4618      	mov	r0, r3
 8006488:	f004 f911 	bl	800a6ae <SDMMC_CmdWriteMultiBlock>
 800648c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800648e:	e009      	b.n	80064a4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2290      	movs	r2, #144	; 0x90
 8006494:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649c:	4618      	mov	r0, r3
 800649e:	f004 f8e4 	bl	800a66a <SDMMC_CmdWriteSingleBlock>
 80064a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d012      	beq.n	80064d0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a39      	ldr	r2, [pc, #228]	; (8006594 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e059      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	2240      	movs	r2, #64	; 0x40
 80064dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3380      	adds	r3, #128	; 0x80
 8006506:	461a      	mov	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	025b      	lsls	r3, r3, #9
 800650c:	089b      	lsrs	r3, r3, #2
 800650e:	f7fd fc17 	bl	8003d40 <HAL_DMA_Start_IT>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01c      	beq.n	8006552 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006526:	f023 0302 	bic.w	r3, r3, #2
 800652a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e018      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	025b      	lsls	r3, r3, #9
 800655c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800655e:	2390      	movs	r3, #144	; 0x90
 8006560:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006566:	2300      	movs	r3, #0
 8006568:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800656a:	2301      	movs	r3, #1
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f107 0210 	add.w	r2, r7, #16
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f003 ffe4 	bl	800a546 <SDIO_ConfigData>

      return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3730      	adds	r7, #48	; 0x30
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	08006dd1 	.word	0x08006dd1
 8006590:	08006e6d 	.word	0x08006e6d
 8006594:	004005ff 	.word	0x004005ff
 8006598:	4225858c 	.word	0x4225858c

0800659c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_SD_IRQHandler+0x2e>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 ffff 	bl	80075c6 <SD_Read_IT>
 80065c8:	e165      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 808f 	beq.w	80066f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80065f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80065f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0201 	bic.w	r2, r2, #1
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d039      	beq.n	8006686 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <HAL_SD_IRQHandler+0x8a>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d011      	beq.n	800664a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f004 f862 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 8006630:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f92f 	bl	80068a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006652:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <HAL_SD_IRQHandler+0xda>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f004 fcd6 	bl	800b028 <HAL_SD_RxCpltCallback>
 800667c:	e10b      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f004 fcc8 	bl	800b014 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006684:	e107      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8102 	beq.w	8006896 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d011      	beq.n	80066c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f004 f827 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 80066a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d008      	beq.n	80066c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8f4 	bl	80068a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 80e5 	bne.w	8006896 <HAL_SD_IRQHandler+0x2fa>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f040 80df 	bne.w	8006896 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0208 	bic.w	r2, r2, #8
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f004 fc8f 	bl	800b014 <HAL_SD_TxCpltCallback>
}
 80066f6:	e0ce      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_SD_IRQHandler+0x17c>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 ffa9 	bl	8007668 <SD_Write_IT>
 8006716:	e0be      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671e:	f240 233a 	movw	r3, #570	; 0x23a
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80b6 	beq.w	8006896 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	f043 0202 	orr.w	r2, r3, #2
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	f043 0208 	orr.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f043 0210 	orr.w	r2, r3, #16
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	f043 0208 	orr.w	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f240 723a 	movw	r2, #1850	; 0x73a
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80067c4:	f023 0302 	bic.w	r3, r3, #2
 80067c8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f003 ff90 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 80067d4:	4602      	mov	r2, r0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f855 	bl	80068a8 <HAL_SD_ErrorCallback>
}
 80067fe:	e04a      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006806:	2b00      	cmp	r3, #0
 8006808:	d045      	beq.n	8006896 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <HAL_SD_IRQHandler+0x282>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <HAL_SD_IRQHandler+0x304>)
 8006824:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd fb50 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02f      	beq.n	8006896 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fb68 	bl	8006f10 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006840:	e029      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_SD_IRQHandler+0x2ba>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	4a12      	ldr	r2, [pc, #72]	; (80068a4 <HAL_SD_IRQHandler+0x308>)
 800685c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	4618      	mov	r0, r3
 8006864:	f7fd fb34 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d013      	beq.n	8006896 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fb83 	bl	8006f7e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006878:	e00d      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f004 fbb6 	bl	800b000 <HAL_SD_AbortCallback>
}
 8006894:	e7ff      	b.n	8006896 <HAL_SD_IRQHandler+0x2fa>
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	08006f11 	.word	0x08006f11
 80068a4:	08006f7f 	.word	0x08006f7f

080068a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ca:	0f9b      	lsrs	r3, r3, #30
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d6:	0e9b      	lsrs	r3, r3, #26
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e8:	0e1b      	lsrs	r3, r3, #24
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006906:	0a1b      	lsrs	r3, r3, #8
 8006908:	b2da      	uxtb	r2, r3
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006912:	b2da      	uxtb	r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691c:	0d1b      	lsrs	r3, r3, #20
 800691e:	b29a      	uxth	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	b2da      	uxtb	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693a:	0bdb      	lsrs	r3, r3, #15
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	b2da      	uxtb	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694c:	0b9b      	lsrs	r3, r3, #14
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	b2da      	uxtb	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695e:	0b5b      	lsrs	r3, r3, #13
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006970:	0b1b      	lsrs	r3, r3, #12
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	b2da      	uxtb	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006988:	2b00      	cmp	r3, #0
 800698a:	d163      	bne.n	8006a54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006990:	009a      	lsls	r2, r3, #2
 8006992:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006996:	4013      	ands	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800699c:	0f92      	lsrs	r2, r2, #30
 800699e:	431a      	orrs	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	0edb      	lsrs	r3, r3, #27
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069cc:	0d5b      	lsrs	r3, r3, #21
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069de:	0c9b      	lsrs	r3, r3, #18
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f0:	0bdb      	lsrs	r3, r3, #15
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	7e1b      	ldrb	r3, [r3, #24]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	3302      	adds	r3, #2
 8006a14:	2201      	movs	r2, #1
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a1e:	fb03 f202 	mul.w	r2, r3, r2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	7a1b      	ldrb	r3, [r3, #8]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	2201      	movs	r2, #1
 8006a32:	409a      	lsls	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a40:	0a52      	lsrs	r2, r2, #9
 8006a42:	fb03 f202 	mul.w	r2, r3, r2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a50:	661a      	str	r2, [r3, #96]	; 0x60
 8006a52:	e031      	b.n	8006ab8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d11d      	bne.n	8006a98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	3301      	adds	r3, #1
 8006a78:	029a      	lsls	r2, r3, #10
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60
 8006a96:	e00f      	b.n	8006ab8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a58      	ldr	r2, [pc, #352]	; (8006c00 <HAL_SD_GetCardCSD+0x344>)
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e09d      	b.n	8006bf4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006abc:	0b9b      	lsrs	r3, r3, #14
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ace:	09db      	lsrs	r3, r3, #7
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	0fdb      	lsrs	r3, r3, #31
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	0f5b      	lsrs	r3, r3, #29
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	0e9b      	lsrs	r3, r3, #26
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	0d9b      	lsrs	r3, r3, #22
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	0d5b      	lsrs	r3, r3, #21
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b62:	0bdb      	lsrs	r3, r3, #15
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	0b9b      	lsrs	r3, r3, #14
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	0b5b      	lsrs	r3, r3, #13
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	0b1b      	lsrs	r3, r3, #12
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	0a9b      	lsrs	r3, r3, #10
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	004005ff 	.word	0x004005ff

08006c04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c5c:	b5b0      	push	{r4, r5, r7, lr}
 8006c5e:	b08e      	sub	sp, #56	; 0x38
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2203      	movs	r2, #3
 8006c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d02e      	beq.n	8006cda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	d106      	bne.n	8006c92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c90:	e029      	b.n	8006ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c98:	d10a      	bne.n	8006cb0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb2a 	bl	80072f4 <SD_WideBus_Enable>
 8006ca0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
 8006cae:	e01a      	b.n	8006ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fb67 	bl	800738a <SD_WideBus_Disable>
 8006cbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cca:	e00c      	b.n	8006ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006cd8:	e005      	b.n	8006ce6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a26      	ldr	r2, [pc, #152]	; (8006d8c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d04:	e01f      	b.n	8006d46 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681d      	ldr	r5, [r3, #0]
 8006d2c:	466c      	mov	r4, sp
 8006d2e:	f107 0314 	add.w	r3, r7, #20
 8006d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d3a:	f107 0308 	add.w	r3, r7, #8
 8006d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d40:	4628      	mov	r0, r5
 8006d42:	f003 fb51 	bl	800a3e8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f003 fc25 	bl	800a59e <SDMMC_CmdBlockLength>
 8006d54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00c      	beq.n	8006d76 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	004005ff 	.word	0x004005ff

08006d90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa7e 	bl	80072a4 <SD_SendStatus>
 8006da8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	0a5b      	lsrs	r3, r3, #9
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006dc6:	693b      	ldr	r3, [r7, #16]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	2b82      	cmp	r3, #130	; 0x82
 8006e0e:	d111      	bne.n	8006e34 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f003 fc6d 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 8006e1a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d008      	beq.n	8006e34 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fd3a 	bl	80068a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0208 	bic.w	r2, r2, #8
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f004 f8e3 	bl	800b028 <HAL_SD_RxCpltCallback>
#endif
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fd f9d4 	bl	8004228 <HAL_DMA_GetError>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d03e      	beq.n	8006f04 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d002      	beq.n	8006ea2 <SD_DMAError+0x36>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d12d      	bne.n	8006efe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <SD_DMAError+0xa0>)
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006eb8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ec6:	6978      	ldr	r0, [r7, #20]
 8006ec8:	f7ff ff62 	bl	8006d90 <HAL_SD_GetCardState>
 8006ecc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b06      	cmp	r3, #6
 8006ed2:	d002      	beq.n	8006eda <SD_DMAError+0x6e>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b05      	cmp	r3, #5
 8006ed8:	d10a      	bne.n	8006ef0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f003 fc08 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	431a      	orrs	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006efe:	6978      	ldr	r0, [r7, #20]
 8006f00:	f7ff fcd2 	bl	80068a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	004005ff 	.word	0x004005ff

08006f10 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff ff31 	bl	8006d90 <HAL_SD_GetCardState>
 8006f2e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b06      	cmp	r3, #6
 8006f42:	d002      	beq.n	8006f4a <SD_DMATxAbort+0x3a>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	d10a      	bne.n	8006f60 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f003 fbd0 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f004 f849 	bl	800b000 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006f6e:	e002      	b.n	8006f76 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff fc99 	bl	80068a8 <HAL_SD_ErrorCallback>
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fefa 	bl	8006d90 <HAL_SD_GetCardState>
 8006f9c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b06      	cmp	r3, #6
 8006fb0:	d002      	beq.n	8006fb8 <SD_DMARxAbort+0x3a>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b05      	cmp	r3, #5
 8006fb6:	d10a      	bne.n	8006fce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f003 fb99 	bl	800a6f4 <SDMMC_CmdStopTransfer>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f004 f812 	bl	800b000 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006fdc:	e002      	b.n	8006fe4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff fc62 	bl	80068a8 <HAL_SD_ErrorCallback>
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fec:	b5b0      	push	{r4, r5, r7, lr}
 8006fee:	b094      	sub	sp, #80	; 0x50
 8006ff0:	af04      	add	r7, sp, #16
 8006ff2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f003 fa4a 	bl	800a496 <SDIO_GetPowerState>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800700c:	e0b8      	b.n	8007180 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	2b03      	cmp	r3, #3
 8007014:	d02f      	beq.n	8007076 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f003 fc74 	bl	800a908 <SDMMC_CmdSendCID>
 8007020:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <SD_InitCard+0x40>
    {
      return errorstate;
 8007028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702a:	e0a9      	b.n	8007180 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f003 fa74 	bl	800a520 <SDIO_GetResponse>
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2104      	movs	r1, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f003 fa6b 	bl	800a520 <SDIO_GetResponse>
 800704a:	4602      	mov	r2, r0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2108      	movs	r1, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f003 fa62 	bl	800a520 <SDIO_GetResponse>
 800705c:	4602      	mov	r2, r0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	210c      	movs	r1, #12
 8007068:	4618      	mov	r0, r3
 800706a:	f003 fa59 	bl	800a520 <SDIO_GetResponse>
 800706e:	4602      	mov	r2, r0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707a:	2b03      	cmp	r3, #3
 800707c:	d00d      	beq.n	800709a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f107 020e 	add.w	r2, r7, #14
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f003 fc7a 	bl	800a982 <SDMMC_CmdSetRelAdd>
 800708e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <SD_InitCard+0xae>
    {
      return errorstate;
 8007096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007098:	e072      	b.n	8007180 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d036      	beq.n	8007110 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80070a2:	89fb      	ldrh	r3, [r7, #14]
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f003 fc44 	bl	800a944 <SDMMC_CmdSendCSD>
 80070bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80070c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c6:	e05b      	b.n	8007180 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f003 fa26 	bl	800a520 <SDIO_GetResponse>
 80070d4:	4602      	mov	r2, r0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2104      	movs	r1, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f003 fa1d 	bl	800a520 <SDIO_GetResponse>
 80070e6:	4602      	mov	r2, r0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2108      	movs	r1, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f003 fa14 	bl	800a520 <SDIO_GetResponse>
 80070f8:	4602      	mov	r2, r0
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	210c      	movs	r1, #12
 8007104:	4618      	mov	r0, r3
 8007106:	f003 fa0b 	bl	800a520 <SDIO_GetResponse>
 800710a:	4602      	mov	r2, r0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2104      	movs	r1, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f003 fa02 	bl	800a520 <SDIO_GetResponse>
 800711c:	4603      	mov	r3, r0
 800711e:	0d1a      	lsrs	r2, r3, #20
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007124:	f107 0310 	add.w	r3, r7, #16
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fbc6 	bl	80068bc <HAL_SD_GetCardCSD>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800713a:	e021      	b.n	8007180 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6819      	ldr	r1, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	2200      	movs	r2, #0
 8007148:	461c      	mov	r4, r3
 800714a:	4615      	mov	r5, r2
 800714c:	4622      	mov	r2, r4
 800714e:	462b      	mov	r3, r5
 8007150:	4608      	mov	r0, r1
 8007152:	f003 faf1 	bl	800a738 <SDMMC_CmdSelDesel>
 8007156:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <SD_InitCard+0x176>
  {
    return errorstate;
 800715e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007160:	e00e      	b.n	8007180 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681d      	ldr	r5, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	466c      	mov	r4, sp
 800716a:	f103 0210 	add.w	r2, r3, #16
 800716e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007170:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007174:	3304      	adds	r3, #4
 8007176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007178:	4628      	mov	r0, r5
 800717a:	f003 f935 	bl	800a3e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3740      	adds	r7, #64	; 0x40
 8007184:	46bd      	mov	sp, r7
 8007186:	bdb0      	pop	{r4, r5, r7, pc}

08007188 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f003 faec 	bl	800a77e <SDMMC_CmdGoIdleState>
 80071a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e072      	b.n	8007298 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f003 faff 	bl	800a7ba <SDMMC_CmdOperCond>
 80071bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00d      	beq.n	80071e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f003 fad5 	bl	800a77e <SDMMC_CmdGoIdleState>
 80071d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	e05b      	b.n	8007298 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d137      	bne.n	800725e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f003 faff 	bl	800a7f8 <SDMMC_CmdAppCommand>
 80071fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d02d      	beq.n	800725e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007206:	e047      	b.n	8007298 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f003 faf2 	bl	800a7f8 <SDMMC_CmdAppCommand>
 8007214:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <SD_PowerON+0x98>
    {
      return errorstate;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e03b      	b.n	8007298 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	491e      	ldr	r1, [pc, #120]	; (80072a0 <SD_PowerON+0x118>)
 8007226:	4618      	mov	r0, r3
 8007228:	f003 fb08 	bl	800a83c <SDMMC_CmdAppOperCommand>
 800722c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007238:	e02e      	b.n	8007298 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f003 f96d 	bl	800a520 <SDIO_GetResponse>
 8007246:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	0fdb      	lsrs	r3, r3, #31
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <SD_PowerON+0xcc>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <SD_PowerON+0xce>
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]

    count++;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	3301      	adds	r3, #1
 800725c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007264:	4293      	cmp	r3, r2
 8007266:	d802      	bhi.n	800726e <SD_PowerON+0xe6>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0cc      	beq.n	8007208 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007274:	4293      	cmp	r3, r2
 8007276:	d902      	bls.n	800727e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800727c:	e00c      	b.n	8007298 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	645a      	str	r2, [r3, #68]	; 0x44
 800728e:	e002      	b.n	8007296 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	c1100000 	.word	0xc1100000

080072a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072b8:	e018      	b.n	80072ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f003 fb7c 	bl	800a9c4 <SDMMC_CmdSendStatus>
 80072cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e009      	b.n	80072ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f003 f91e 	bl	800a520 <SDIO_GetResponse>
 80072e4:	4602      	mov	r2, r0
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f003 f908 	bl	800a520 <SDIO_GetResponse>
 8007310:	4603      	mov	r3, r0
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800731a:	d102      	bne.n	8007322 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800731c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007320:	e02f      	b.n	8007382 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f879 	bl	8007420 <SD_FindSCR>
 800732e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	e023      	b.n	8007382 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01c      	beq.n	800737e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f003 fa51 	bl	800a7f8 <SDMMC_CmdAppCommand>
 8007356:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	e00f      	b.n	8007382 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2102      	movs	r1, #2
 8007368:	4618      	mov	r0, r3
 800736a:	f003 fa8a 	bl	800a882 <SDMMC_CmdBusWidth>
 800736e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	e003      	b.n	8007382 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
 800737c:	e001      	b.n	8007382 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800737e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f003 f8bd 	bl	800a520 <SDIO_GetResponse>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b0:	d102      	bne.n	80073b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073b6:	e02f      	b.n	8007418 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f82e 	bl	8007420 <SD_FindSCR>
 80073c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	e023      	b.n	8007418 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01c      	beq.n	8007414 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f003 fa06 	bl	800a7f8 <SDMMC_CmdAppCommand>
 80073ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e00f      	b.n	8007418 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f003 fa3f 	bl	800a882 <SDMMC_CmdBusWidth>
 8007404:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	e003      	b.n	8007418 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007410:	2300      	movs	r3, #0
 8007412:	e001      	b.n	8007418 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007414:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b08f      	sub	sp, #60	; 0x3c
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800742a:	f7fb fecd 	bl	80031c8 <HAL_GetTick>
 800742e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2108      	movs	r1, #8
 8007446:	4618      	mov	r0, r3
 8007448:	f003 f8a9 	bl	800a59e <SDMMC_CmdBlockLength>
 800744c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	e0b2      	b.n	80075be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	4619      	mov	r1, r3
 8007464:	4610      	mov	r0, r2
 8007466:	f003 f9c7 	bl	800a7f8 <SDMMC_CmdAppCommand>
 800746a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	e0a3      	b.n	80075be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800747c:	2308      	movs	r3, #8
 800747e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007480:	2330      	movs	r3, #48	; 0x30
 8007482:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007484:	2302      	movs	r3, #2
 8007486:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007488:	2300      	movs	r3, #0
 800748a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800748c:	2301      	movs	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f107 0210 	add.w	r2, r7, #16
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f003 f853 	bl	800a546 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f003 fa0e 	bl	800a8c6 <SDMMC_CmdSendSCR>
 80074aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02a      	beq.n	8007508 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	e083      	b.n	80075be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00f      	beq.n	80074e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6819      	ldr	r1, [r3, #0]
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	f107 0208 	add.w	r2, r7, #8
 80074d0:	18d4      	adds	r4, r2, r3
 80074d2:	4608      	mov	r0, r1
 80074d4:	f002 ffb3 	bl	800a43e <SDIO_ReadFIFO>
 80074d8:	4603      	mov	r3, r0
 80074da:	6023      	str	r3, [r4, #0]
      index++;
 80074dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074de:	3301      	adds	r3, #1
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
 80074e2:	e006      	b.n	80074f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074f2:	f7fb fe69 	bl	80031c8 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d102      	bne.n	8007508 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007506:	e05a      	b.n	80075be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0cf      	beq.n	80074b6 <SD_FindSCR+0x96>
 8007516:	e000      	b.n	800751a <SD_FindSCR+0xfa>
      break;
 8007518:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2208      	movs	r2, #8
 800752e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007530:	2308      	movs	r3, #8
 8007532:	e044      	b.n	80075be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2202      	movs	r2, #2
 8007548:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800754a:	2302      	movs	r3, #2
 800754c:	e037      	b.n	80075be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2220      	movs	r2, #32
 8007562:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007564:	2320      	movs	r3, #32
 8007566:	e02a      	b.n	80075be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007570:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	061a      	lsls	r2, r3, #24
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800757e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007588:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	0e1b      	lsrs	r3, r3, #24
 800758e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	601a      	str	r2, [r3, #0]
    scr++;
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	3304      	adds	r3, #4
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	061a      	lsls	r2, r3, #24
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	0e1b      	lsrs	r3, r3, #24
 80075b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	373c      	adds	r7, #60	; 0x3c
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}

080075c6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d03f      	beq.n	8007660 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e033      	b.n	800764e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f002 ff27 	bl	800a43e <SDIO_ReadFIFO>
 80075f0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3b01      	subs	r3, #1
 8007604:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	0a1b      	lsrs	r3, r3, #8
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	3b01      	subs	r3, #1
 800761a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	b2da      	uxtb	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3b01      	subs	r3, #1
 8007630:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	0e1b      	lsrs	r3, r3, #24
 8007636:	b2da      	uxtb	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3b01      	subs	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3301      	adds	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b07      	cmp	r3, #7
 8007652:	d9c8      	bls.n	80075e6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007660:	bf00      	nop
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d043      	beq.n	800770a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e037      	b.n	80076f8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3b01      	subs	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	021a      	lsls	r2, r3, #8
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	041a      	lsls	r2, r3, #16
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	061a      	lsls	r2, r3, #24
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3301      	adds	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3b01      	subs	r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f107 0208 	add.w	r2, r7, #8
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 feb3 	bl	800a458 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3301      	adds	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b07      	cmp	r3, #7
 80076fc:	d9c4      	bls.n	8007688 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800770a:	bf00      	nop
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e07b      	b.n	800781c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d108      	bne.n	800773e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007734:	d009      	beq.n	800774a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	61da      	str	r2, [r3, #28]
 800773c:	e005      	b.n	800774a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7fa fc29 	bl	8001fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007780:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	ea42 0103 	orr.w	r1, r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	f003 0104 	and.w	r1, r3, #4
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	f003 0210 	and.w	r2, r3, #16
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69da      	ldr	r2, [r3, #28]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800780a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_SPI_Transmit+0x22>
 8007842:	2302      	movs	r3, #2
 8007844:	e126      	b.n	8007a94 <HAL_SPI_Transmit+0x270>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800784e:	f7fb fcbb 	bl	80031c8 <HAL_GetTick>
 8007852:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	d002      	beq.n	800786a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007864:	2302      	movs	r3, #2
 8007866:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007868:	e10b      	b.n	8007a82 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SPI_Transmit+0x52>
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	77fb      	strb	r3, [r7, #31]
    goto error;
 800787a:	e102      	b.n	8007a82 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2203      	movs	r2, #3
 8007880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	88fa      	ldrh	r2, [r7, #6]
 800789a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c2:	d10f      	bne.n	80078e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d007      	beq.n	8007902 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007900:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800790a:	d14b      	bne.n	80079a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_SPI_Transmit+0xf6>
 8007914:	8afb      	ldrh	r3, [r7, #22]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d13e      	bne.n	8007998 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	881a      	ldrh	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	1c9a      	adds	r2, r3, #2
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800793e:	e02b      	b.n	8007998 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b02      	cmp	r3, #2
 800794c:	d112      	bne.n	8007974 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007952:	881a      	ldrh	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	1c9a      	adds	r2, r3, #2
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	86da      	strh	r2, [r3, #54]	; 0x36
 8007972:	e011      	b.n	8007998 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007974:	f7fb fc28 	bl	80031c8 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d803      	bhi.n	800798c <HAL_SPI_Transmit+0x168>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d102      	bne.n	8007992 <HAL_SPI_Transmit+0x16e>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007996:	e074      	b.n	8007a82 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1ce      	bne.n	8007940 <HAL_SPI_Transmit+0x11c>
 80079a2:	e04c      	b.n	8007a3e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_SPI_Transmit+0x18e>
 80079ac:	8afb      	ldrh	r3, [r7, #22]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d140      	bne.n	8007a34 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	7812      	ldrb	r2, [r2, #0]
 80079be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079d8:	e02c      	b.n	8007a34 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d113      	bne.n	8007a10 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	7812      	ldrb	r2, [r2, #0]
 80079f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a0e:	e011      	b.n	8007a34 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a10:	f7fb fbda 	bl	80031c8 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d803      	bhi.n	8007a28 <HAL_SPI_Transmit+0x204>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d102      	bne.n	8007a2e <HAL_SPI_Transmit+0x20a>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a32:	e026      	b.n	8007a82 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1cd      	bne.n	80079da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 fa08 	bl	8007e58 <SPI_EndRxTxTransaction>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	77fb      	strb	r3, [r7, #31]
 8007a7e:	e000      	b.n	8007a82 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_SPI_Transmit_DMA+0x20>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e09b      	b.n	8007bf4 <HAL_SPI_Transmit_DMA+0x158>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d002      	beq.n	8007ad6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ad4:	e089      	b.n	8007bea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SPI_Transmit_DMA+0x46>
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ae6:	e080      	b.n	8007bea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2203      	movs	r2, #3
 8007aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	88fa      	ldrh	r2, [r7, #6]
 8007b06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2e:	d10f      	bne.n	8007b50 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b54:	4a29      	ldr	r2, [pc, #164]	; (8007bfc <HAL_SPI_Transmit_DMA+0x160>)
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b5c:	4a28      	ldr	r2, [pc, #160]	; (8007c00 <HAL_SPI_Transmit_DMA+0x164>)
 8007b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <HAL_SPI_Transmit_DMA+0x168>)
 8007b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	4619      	mov	r1, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b88:	f7fc f8da 	bl	8003d40 <HAL_DMA_Start_IT>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00c      	beq.n	8007bac <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b96:	f043 0210 	orr.w	r2, r3, #16
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007baa:	e01e      	b.n	8007bea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d007      	beq.n	8007bca <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0220 	orr.w	r2, r2, #32
 8007bd8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0202 	orr.w	r2, r2, #2
 8007be8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	08007ced 	.word	0x08007ced
 8007c00:	08007c45 	.word	0x08007c45
 8007c04:	08007d09 	.word	0x08007d09

08007c08 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c52:	f7fb fab9 	bl	80031c8 <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c66:	d03b      	beq.n	8007ce0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0220 	bic.w	r2, r2, #32
 8007c76:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0202 	bic.w	r2, r2, #2
 8007c86:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	2164      	movs	r1, #100	; 0x64
 8007c8c:	6978      	ldr	r0, [r7, #20]
 8007c8e:	f000 f8e3 	bl	8007e58 <SPI_EndRxTxTransaction>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007cd8:	6978      	ldr	r0, [r7, #20]
 8007cda:	f7ff ffa9 	bl	8007c30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007cde:	e002      	b.n	8007ce6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007ce0:	6978      	ldr	r0, [r7, #20]
 8007ce2:	f7ff ff91 	bl	8007c08 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff ff8e 	bl	8007c1c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0203 	bic.w	r2, r2, #3
 8007d24:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	f043 0210 	orr.w	r2, r3, #16
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff ff78 	bl	8007c30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d58:	f7fb fa36 	bl	80031c8 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d68:	f7fb fa2e 	bl	80031c8 <HAL_GetTick>
 8007d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d6e:	4b39      	ldr	r3, [pc, #228]	; (8007e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	015b      	lsls	r3, r3, #5
 8007d74:	0d1b      	lsrs	r3, r3, #20
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d7e:	e054      	b.n	8007e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d86:	d050      	beq.n	8007e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d88:	f7fb fa1e 	bl	80031c8 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d902      	bls.n	8007d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d13d      	bne.n	8007e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db6:	d111      	bne.n	8007ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	d004      	beq.n	8007dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dca:	d107      	bne.n	8007ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de4:	d10f      	bne.n	8007e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e017      	b.n	8007e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4013      	ands	r3, r2
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	bf0c      	ite	eq
 8007e3a:	2301      	moveq	r3, #1
 8007e3c:	2300      	movne	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d19b      	bne.n	8007d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3720      	adds	r7, #32
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000008 	.word	0x20000008

08007e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e64:	4b1b      	ldr	r3, [pc, #108]	; (8007ed4 <SPI_EndRxTxTransaction+0x7c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1b      	ldr	r2, [pc, #108]	; (8007ed8 <SPI_EndRxTxTransaction+0x80>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	0d5b      	lsrs	r3, r3, #21
 8007e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e82:	d112      	bne.n	8007eaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2180      	movs	r1, #128	; 0x80
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff ff5a 	bl	8007d48 <SPI_WaitFlagStateUntilTimeout>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	f043 0220 	orr.w	r2, r3, #32
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e00f      	b.n	8007eca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec0:	2b80      	cmp	r3, #128	; 0x80
 8007ec2:	d0f2      	beq.n	8007eaa <SPI_EndRxTxTransaction+0x52>
 8007ec4:	e000      	b.n	8007ec8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ec6:	bf00      	nop
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000008 	.word	0x20000008
 8007ed8:	165e9f81 	.word	0x165e9f81

08007edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e041      	b.n	8007f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fa fec0 	bl	8002c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	f000 fe4c 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d001      	beq.n	8007f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e04e      	b.n	8008032 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a23      	ldr	r2, [pc, #140]	; (8008040 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d022      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbe:	d01d      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d018      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <HAL_TIM_Base_Start_IT+0xcc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d013      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1c      	ldr	r2, [pc, #112]	; (800804c <HAL_TIM_Base_Start_IT+0xd0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00e      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d009      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a19      	ldr	r2, [pc, #100]	; (8008054 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d004      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x80>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a18      	ldr	r2, [pc, #96]	; (8008058 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d111      	bne.n	8008020 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b06      	cmp	r3, #6
 800800c:	d010      	beq.n	8008030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801e:	e007      	b.n	8008030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40010000 	.word	0x40010000
 8008044:	40000400 	.word	0x40000400
 8008048:	40000800 	.word	0x40000800
 800804c:	40000c00 	.word	0x40000c00
 8008050:	40010400 	.word	0x40010400
 8008054:	40014000 	.word	0x40014000
 8008058:	40001800 	.word	0x40001800

0800805c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0201 	bic.w	r2, r2, #1
 8008072:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a1a      	ldr	r2, [r3, #32]
 800807a:	f241 1311 	movw	r3, #4369	; 0x1111
 800807e:	4013      	ands	r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10f      	bne.n	80080a4 <HAL_TIM_Base_Stop_IT+0x48>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	f240 4344 	movw	r3, #1092	; 0x444
 800808e:	4013      	ands	r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d107      	bne.n	80080a4 <HAL_TIM_Base_Stop_IT+0x48>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0201 	bic.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e041      	b.n	8008150 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f839 	bl	8008158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f000 fd5d 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_TIM_PWM_Start+0x24>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	bf14      	ite	ne
 8008188:	2301      	movne	r3, #1
 800818a:	2300      	moveq	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e022      	b.n	80081d6 <HAL_TIM_PWM_Start+0x6a>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b04      	cmp	r3, #4
 8008194:	d109      	bne.n	80081aa <HAL_TIM_PWM_Start+0x3e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b01      	cmp	r3, #1
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	e015      	b.n	80081d6 <HAL_TIM_PWM_Start+0x6a>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d109      	bne.n	80081c4 <HAL_TIM_PWM_Start+0x58>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bf14      	ite	ne
 80081bc:	2301      	movne	r3, #1
 80081be:	2300      	moveq	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	e008      	b.n	80081d6 <HAL_TIM_PWM_Start+0x6a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	bf14      	ite	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	2300      	moveq	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e07c      	b.n	80082d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <HAL_TIM_PWM_Start+0x82>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081ec:	e013      	b.n	8008216 <HAL_TIM_PWM_Start+0xaa>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_PWM_Start+0x92>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081fc:	e00b      	b.n	8008216 <HAL_TIM_PWM_Start+0xaa>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d104      	bne.n	800820e <HAL_TIM_PWM_Start+0xa2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800820c:	e003      	b.n	8008216 <HAL_TIM_PWM_Start+0xaa>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2201      	movs	r2, #1
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 ffb4 	bl	800918c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a2d      	ldr	r2, [pc, #180]	; (80082e0 <HAL_TIM_PWM_Start+0x174>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d004      	beq.n	8008238 <HAL_TIM_PWM_Start+0xcc>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a2c      	ldr	r2, [pc, #176]	; (80082e4 <HAL_TIM_PWM_Start+0x178>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d101      	bne.n	800823c <HAL_TIM_PWM_Start+0xd0>
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <HAL_TIM_PWM_Start+0xd2>
 800823c:	2300      	movs	r3, #0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <HAL_TIM_PWM_Start+0x174>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d022      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008264:	d01d      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <HAL_TIM_PWM_Start+0x17c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d018      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1d      	ldr	r2, [pc, #116]	; (80082ec <HAL_TIM_PWM_Start+0x180>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1c      	ldr	r2, [pc, #112]	; (80082f0 <HAL_TIM_PWM_Start+0x184>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00e      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a16      	ldr	r2, [pc, #88]	; (80082e4 <HAL_TIM_PWM_Start+0x178>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d009      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a18      	ldr	r2, [pc, #96]	; (80082f4 <HAL_TIM_PWM_Start+0x188>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d004      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x136>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <HAL_TIM_PWM_Start+0x18c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d111      	bne.n	80082c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b06      	cmp	r3, #6
 80082b2:	d010      	beq.n	80082d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0201 	orr.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c4:	e007      	b.n	80082d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0201 	orr.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400
 80082e8:	40000400 	.word	0x40000400
 80082ec:	40000800 	.word	0x40000800
 80082f0:	40000c00 	.word	0x40000c00
 80082f4:	40014000 	.word	0x40014000
 80082f8:	40001800 	.word	0x40001800

080082fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 ff3c 	bl	800918c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a2e      	ldr	r2, [pc, #184]	; (80083d4 <HAL_TIM_PWM_Stop+0xd8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIM_PWM_Stop+0x2c>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a2d      	ldr	r2, [pc, #180]	; (80083d8 <HAL_TIM_PWM_Stop+0xdc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d101      	bne.n	800832c <HAL_TIM_PWM_Stop+0x30>
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <HAL_TIM_PWM_Stop+0x32>
 800832c:	2300      	movs	r3, #0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d017      	beq.n	8008362 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	f241 1311 	movw	r3, #4369	; 0x1111
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10f      	bne.n	8008362 <HAL_TIM_PWM_Stop+0x66>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6a1a      	ldr	r2, [r3, #32]
 8008348:	f240 4344 	movw	r3, #1092	; 0x444
 800834c:	4013      	ands	r3, r2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d107      	bne.n	8008362 <HAL_TIM_PWM_Stop+0x66>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	f241 1311 	movw	r3, #4369	; 0x1111
 800836c:	4013      	ands	r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10f      	bne.n	8008392 <HAL_TIM_PWM_Stop+0x96>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6a1a      	ldr	r2, [r3, #32]
 8008378:	f240 4344 	movw	r3, #1092	; 0x444
 800837c:	4013      	ands	r3, r2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d107      	bne.n	8008392 <HAL_TIM_PWM_Stop+0x96>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_PWM_Stop+0xa6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a0:	e013      	b.n	80083ca <HAL_TIM_PWM_Stop+0xce>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_PWM_Stop+0xb6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083b0:	e00b      	b.n	80083ca <HAL_TIM_PWM_Stop+0xce>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d104      	bne.n	80083c2 <HAL_TIM_PWM_Stop+0xc6>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083c0:	e003      	b.n	80083ca <HAL_TIM_PWM_Stop+0xce>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40010400 	.word	0x40010400

080083dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e097      	b.n	8008520 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7fa fb3b 	bl	8002a80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008420:	f023 0307 	bic.w	r3, r3, #7
 8008424:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3304      	adds	r3, #4
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f000 fbc1 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845e:	f023 0303 	bic.w	r3, r3, #3
 8008462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	4313      	orrs	r3, r2
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800847c:	f023 030c 	bic.w	r3, r3, #12
 8008480:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800848c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	021b      	lsls	r3, r3, #8
 8008498:	4313      	orrs	r3, r2
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	011a      	lsls	r2, r3, #4
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	031b      	lsls	r3, r3, #12
 80084ac:	4313      	orrs	r3, r2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80084ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80084c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	4313      	orrs	r3, r2
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008538:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008540:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008548:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008550:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d110      	bne.n	800857a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d102      	bne.n	8008564 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d001      	beq.n	8008568 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e069      	b.n	800863c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008578:	e031      	b.n	80085de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b04      	cmp	r3, #4
 800857e:	d110      	bne.n	80085a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d102      	bne.n	800858c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008586:	7b3b      	ldrb	r3, [r7, #12]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d001      	beq.n	8008590 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e055      	b.n	800863c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085a0:	e01d      	b.n	80085de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d108      	bne.n	80085ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d105      	bne.n	80085ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085ae:	7b7b      	ldrb	r3, [r7, #13]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d102      	bne.n	80085ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085b4:	7b3b      	ldrb	r3, [r7, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d001      	beq.n	80085be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e03e      	b.n	800863c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_TIM_Encoder_Start+0xc4>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d008      	beq.n	80085fc <HAL_TIM_Encoder_Start+0xd4>
 80085ea:	e00f      	b.n	800860c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2201      	movs	r2, #1
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fdc9 	bl	800918c <TIM_CCxChannelCmd>
      break;
 80085fa:	e016      	b.n	800862a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2201      	movs	r2, #1
 8008602:	2104      	movs	r1, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fdc1 	bl	800918c <TIM_CCxChannelCmd>
      break;
 800860a:	e00e      	b.n	800862a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2201      	movs	r2, #1
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f000 fdb9 	bl	800918c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2201      	movs	r2, #1
 8008620:	2104      	movs	r1, #4
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fdb2 	bl	800918c <TIM_CCxChannelCmd>
      break;
 8008628:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0201 	orr.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b02      	cmp	r3, #2
 8008658:	d122      	bne.n	80086a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b02      	cmp	r3, #2
 8008666:	d11b      	bne.n	80086a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0202 	mvn.w	r2, #2
 8008670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fa77 	bl	8008b7a <HAL_TIM_IC_CaptureCallback>
 800868c:	e005      	b.n	800869a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa69 	bl	8008b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fa7a 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d122      	bne.n	80086f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d11b      	bne.n	80086f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f06f 0204 	mvn.w	r2, #4
 80086c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa4d 	bl	8008b7a <HAL_TIM_IC_CaptureCallback>
 80086e0:	e005      	b.n	80086ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa3f 	bl	8008b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa50 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b08      	cmp	r3, #8
 8008700:	d122      	bne.n	8008748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b08      	cmp	r3, #8
 800870e:	d11b      	bne.n	8008748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f06f 0208 	mvn.w	r2, #8
 8008718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2204      	movs	r2, #4
 800871e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa23 	bl	8008b7a <HAL_TIM_IC_CaptureCallback>
 8008734:	e005      	b.n	8008742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa15 	bl	8008b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fa26 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0310 	and.w	r3, r3, #16
 8008752:	2b10      	cmp	r3, #16
 8008754:	d122      	bne.n	800879c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b10      	cmp	r3, #16
 8008762:	d11b      	bne.n	800879c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f06f 0210 	mvn.w	r2, #16
 800876c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2208      	movs	r2, #8
 8008772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f9f9 	bl	8008b7a <HAL_TIM_IC_CaptureCallback>
 8008788:	e005      	b.n	8008796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9eb 	bl	8008b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9fc 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d10e      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d107      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f06f 0201 	mvn.w	r2, #1
 80087c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f9 fa26 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d10e      	bne.n	80087f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e0:	2b80      	cmp	r3, #128	; 0x80
 80087e2:	d107      	bne.n	80087f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fd78 	bl	80092e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fe:	2b40      	cmp	r3, #64	; 0x40
 8008800:	d10e      	bne.n	8008820 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d107      	bne.n	8008820 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9c1 	bl	8008ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b20      	cmp	r3, #32
 800882c:	d10e      	bne.n	800884c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b20      	cmp	r3, #32
 800883a:	d107      	bne.n	800884c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f06f 0220 	mvn.w	r2, #32
 8008844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fd42 	bl	80092d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800886e:	2302      	movs	r3, #2
 8008870:	e0ae      	b.n	80089d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b0c      	cmp	r3, #12
 800887e:	f200 809f 	bhi.w	80089c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088bd 	.word	0x080088bd
 800888c:	080089c1 	.word	0x080089c1
 8008890:	080089c1 	.word	0x080089c1
 8008894:	080089c1 	.word	0x080089c1
 8008898:	080088fd 	.word	0x080088fd
 800889c:	080089c1 	.word	0x080089c1
 80088a0:	080089c1 	.word	0x080089c1
 80088a4:	080089c1 	.word	0x080089c1
 80088a8:	0800893f 	.word	0x0800893f
 80088ac:	080089c1 	.word	0x080089c1
 80088b0:	080089c1 	.word	0x080089c1
 80088b4:	080089c1 	.word	0x080089c1
 80088b8:	0800897f 	.word	0x0800897f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fa18 	bl	8008cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0208 	orr.w	r2, r2, #8
 80088d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0204 	bic.w	r2, r2, #4
 80088e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6999      	ldr	r1, [r3, #24]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	619a      	str	r2, [r3, #24]
      break;
 80088fa:	e064      	b.n	80089c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fa68 	bl	8008dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6999      	ldr	r1, [r3, #24]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	021a      	lsls	r2, r3, #8
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	619a      	str	r2, [r3, #24]
      break;
 800893c:	e043      	b.n	80089c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fabd 	bl	8008ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0208 	orr.w	r2, r2, #8
 8008958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0204 	bic.w	r2, r2, #4
 8008968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69d9      	ldr	r1, [r3, #28]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	61da      	str	r2, [r3, #28]
      break;
 800897c:	e023      	b.n	80089c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fb11 	bl	8008fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69d9      	ldr	r1, [r3, #28]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	021a      	lsls	r2, r3, #8
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	61da      	str	r2, [r3, #28]
      break;
 80089be:	e002      	b.n	80089c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
      break;
 80089c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_TIM_ConfigClockSource+0x1c>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e0b4      	b.n	8008b5e <HAL_TIM_ConfigClockSource+0x186>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a2c:	d03e      	beq.n	8008aac <HAL_TIM_ConfigClockSource+0xd4>
 8008a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a32:	f200 8087 	bhi.w	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3a:	f000 8086 	beq.w	8008b4a <HAL_TIM_ConfigClockSource+0x172>
 8008a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a42:	d87f      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a44:	2b70      	cmp	r3, #112	; 0x70
 8008a46:	d01a      	beq.n	8008a7e <HAL_TIM_ConfigClockSource+0xa6>
 8008a48:	2b70      	cmp	r3, #112	; 0x70
 8008a4a:	d87b      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a4c:	2b60      	cmp	r3, #96	; 0x60
 8008a4e:	d050      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x11a>
 8008a50:	2b60      	cmp	r3, #96	; 0x60
 8008a52:	d877      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a54:	2b50      	cmp	r3, #80	; 0x50
 8008a56:	d03c      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8008a58:	2b50      	cmp	r3, #80	; 0x50
 8008a5a:	d873      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a5c:	2b40      	cmp	r3, #64	; 0x40
 8008a5e:	d058      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x13a>
 8008a60:	2b40      	cmp	r3, #64	; 0x40
 8008a62:	d86f      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a64:	2b30      	cmp	r3, #48	; 0x30
 8008a66:	d064      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x15a>
 8008a68:	2b30      	cmp	r3, #48	; 0x30
 8008a6a:	d86b      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a6c:	2b20      	cmp	r3, #32
 8008a6e:	d060      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x15a>
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d867      	bhi.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d05c      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x15a>
 8008a78:	2b10      	cmp	r3, #16
 8008a7a:	d05a      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x15a>
 8008a7c:	e062      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6899      	ldr	r1, [r3, #8]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f000 fb5d 	bl	800914c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	609a      	str	r2, [r3, #8]
      break;
 8008aaa:	e04f      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6899      	ldr	r1, [r3, #8]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f000 fb46 	bl	800914c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ace:	609a      	str	r2, [r3, #8]
      break;
 8008ad0:	e03c      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f000 faba 	bl	8009058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2150      	movs	r1, #80	; 0x50
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fb13 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008af0:	e02c      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6859      	ldr	r1, [r3, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	461a      	mov	r2, r3
 8008b00:	f000 fad9 	bl	80090b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2160      	movs	r1, #96	; 0x60
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb03 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b10:	e01c      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6859      	ldr	r1, [r3, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f000 fa9a 	bl	8009058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2140      	movs	r1, #64	; 0x40
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 faf3 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b30:	e00c      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f000 faea 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b42:	e003      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
      break;
 8008b48:	e000      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
	...

08008bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a3d      	ldr	r2, [pc, #244]	; (8008cd0 <TIM_Base_SetConfig+0x118>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a3c      	ldr	r2, [pc, #240]	; (8008cd4 <TIM_Base_SetConfig+0x11c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a3b      	ldr	r2, [pc, #236]	; (8008cd8 <TIM_Base_SetConfig+0x120>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a3a      	ldr	r2, [pc, #232]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d108      	bne.n	8008c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d02b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c18:	d027      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a2c      	ldr	r2, [pc, #176]	; (8008cd0 <TIM_Base_SetConfig+0x118>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d023      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a2b      	ldr	r2, [pc, #172]	; (8008cd4 <TIM_Base_SetConfig+0x11c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d01f      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <TIM_Base_SetConfig+0x120>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d017      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a28      	ldr	r2, [pc, #160]	; (8008ce0 <TIM_Base_SetConfig+0x128>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <TIM_Base_SetConfig+0x12c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00f      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a26      	ldr	r2, [pc, #152]	; (8008ce8 <TIM_Base_SetConfig+0x130>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a25      	ldr	r2, [pc, #148]	; (8008cec <TIM_Base_SetConfig+0x134>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d007      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <TIM_Base_SetConfig+0x138>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a23      	ldr	r2, [pc, #140]	; (8008cf4 <TIM_Base_SetConfig+0x13c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d108      	bne.n	8008c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_Base_SetConfig+0xf8>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d103      	bne.n	8008cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	691a      	ldr	r2, [r3, #16]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	615a      	str	r2, [r3, #20]
}
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800
 8008cd8:	40000c00 	.word	0x40000c00
 8008cdc:	40010400 	.word	0x40010400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40014400 	.word	0x40014400
 8008ce8:	40014800 	.word	0x40014800
 8008cec:	40001800 	.word	0x40001800
 8008cf0:	40001c00 	.word	0x40001c00
 8008cf4:	40002000 	.word	0x40002000

08008cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0201 	bic.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f023 0302 	bic.w	r3, r3, #2
 8008d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a20      	ldr	r2, [pc, #128]	; (8008dd0 <TIM_OC1_SetConfig+0xd8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC1_SetConfig+0x64>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <TIM_OC1_SetConfig+0xdc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d10c      	bne.n	8008d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f023 0308 	bic.w	r3, r3, #8
 8008d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f023 0304 	bic.w	r3, r3, #4
 8008d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a15      	ldr	r2, [pc, #84]	; (8008dd0 <TIM_OC1_SetConfig+0xd8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC1_SetConfig+0x8e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <TIM_OC1_SetConfig+0xdc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d111      	bne.n	8008daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f023 0210 	bic.w	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f023 0320 	bic.w	r3, r3, #32
 8008e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a22      	ldr	r2, [pc, #136]	; (8008ebc <TIM_OC2_SetConfig+0xe4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d003      	beq.n	8008e40 <TIM_OC2_SetConfig+0x68>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a21      	ldr	r2, [pc, #132]	; (8008ec0 <TIM_OC2_SetConfig+0xe8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10d      	bne.n	8008e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a17      	ldr	r2, [pc, #92]	; (8008ebc <TIM_OC2_SetConfig+0xe4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_OC2_SetConfig+0x94>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <TIM_OC2_SetConfig+0xe8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d113      	bne.n	8008e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40010000 	.word	0x40010000
 8008ec0:	40010400 	.word	0x40010400

08008ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0303 	bic.w	r3, r3, #3
 8008efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a21      	ldr	r2, [pc, #132]	; (8008fa4 <TIM_OC3_SetConfig+0xe0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d003      	beq.n	8008f2a <TIM_OC3_SetConfig+0x66>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a20      	ldr	r2, [pc, #128]	; (8008fa8 <TIM_OC3_SetConfig+0xe4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d10d      	bne.n	8008f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a16      	ldr	r2, [pc, #88]	; (8008fa4 <TIM_OC3_SetConfig+0xe0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d003      	beq.n	8008f56 <TIM_OC3_SetConfig+0x92>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a15      	ldr	r2, [pc, #84]	; (8008fa8 <TIM_OC3_SetConfig+0xe4>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d113      	bne.n	8008f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	621a      	str	r2, [r3, #32]
}
 8008f98:	bf00      	nop
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40010400 	.word	0x40010400

08008fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	031b      	lsls	r3, r3, #12
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4313      	orrs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a12      	ldr	r2, [pc, #72]	; (8009050 <TIM_OC4_SetConfig+0xa4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d003      	beq.n	8009014 <TIM_OC4_SetConfig+0x68>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a11      	ldr	r2, [pc, #68]	; (8009054 <TIM_OC4_SetConfig+0xa8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d109      	bne.n	8009028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800901a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	019b      	lsls	r3, r3, #6
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400

08009058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f023 030a 	bic.w	r3, r3, #10
 8009094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b087      	sub	sp, #28
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 0210 	bic.w	r2, r3, #16
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	031b      	lsls	r3, r3, #12
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	f043 0307 	orr.w	r3, r3, #7
 8009138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	bf00      	nop
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	021a      	lsls	r2, r3, #8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	431a      	orrs	r2, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4313      	orrs	r3, r2
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	609a      	str	r2, [r3, #8]
}
 8009180:	bf00      	nop
 8009182:	371c      	adds	r7, #28
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f003 031f 	and.w	r3, r3, #31
 800919e:	2201      	movs	r2, #1
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	43db      	mvns	r3, r3
 80091ae:	401a      	ands	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 031f 	and.w	r3, r3, #31
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	fa01 f303 	lsl.w	r3, r1, r3
 80091c4:	431a      	orrs	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
}
 80091ca:	bf00      	nop
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
	...

080091d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e05a      	b.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a21      	ldr	r2, [pc, #132]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d022      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923c:	d01d      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a1d      	ldr	r2, [pc, #116]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d018      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00e      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a18      	ldr	r2, [pc, #96]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d009      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d004      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a15      	ldr	r2, [pc, #84]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d10c      	bne.n	8009294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4313      	orrs	r3, r2
 800928a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40010000 	.word	0x40010000
 80092b8:	40000400 	.word	0x40000400
 80092bc:	40000800 	.word	0x40000800
 80092c0:	40000c00 	.word	0x40000c00
 80092c4:	40010400 	.word	0x40010400
 80092c8:	40014000 	.word	0x40014000
 80092cc:	40001800 	.word	0x40001800

080092d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e03f      	b.n	800938a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7f9 fe3e 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2224      	movs	r2, #36	; 0x24
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800933a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fddf 	bl	8009f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b08a      	sub	sp, #40	; 0x28
 8009396:	af02      	add	r7, sp, #8
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	603b      	str	r3, [r7, #0]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d17c      	bne.n	80094ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <HAL_UART_Transmit+0x2c>
 80093b8:	88fb      	ldrh	r3, [r7, #6]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e075      	b.n	80094ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_UART_Transmit+0x3e>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e06e      	b.n	80094ae <HAL_UART_Transmit+0x11c>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2221      	movs	r2, #33	; 0x21
 80093e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093e6:	f7f9 feef 	bl	80031c8 <HAL_GetTick>
 80093ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	88fa      	ldrh	r2, [r7, #6]
 80093f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009400:	d108      	bne.n	8009414 <HAL_UART_Transmit+0x82>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d104      	bne.n	8009414 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800940a:	2300      	movs	r3, #0
 800940c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	61bb      	str	r3, [r7, #24]
 8009412:	e003      	b.n	800941c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009418:	2300      	movs	r3, #0
 800941a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009424:	e02a      	b.n	800947c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2200      	movs	r2, #0
 800942e:	2180      	movs	r1, #128	; 0x80
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fb1f 	bl	8009a74 <UART_WaitOnFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e036      	b.n	80094ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10b      	bne.n	800945e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	3302      	adds	r3, #2
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	e007      	b.n	800946e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	781a      	ldrb	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	3301      	adds	r3, #1
 800946c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009472:	b29b      	uxth	r3, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1cf      	bne.n	8009426 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2200      	movs	r2, #0
 800948e:	2140      	movs	r1, #64	; 0x40
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 faef 	bl	8009a74 <UART_WaitOnFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e006      	b.n	80094ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	e000      	b.n	80094ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80094ac:	2302      	movs	r3, #2
  }
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	4613      	mov	r3, r2
 80094c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d11d      	bne.n	800950c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <HAL_UART_Receive_IT+0x26>
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e016      	b.n	800950e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_UART_Receive_IT+0x38>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e00f      	b.n	800950e <HAL_UART_Receive_IT+0x58>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	461a      	mov	r2, r3
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fb24 	bl	8009b50 <UART_Start_Receive_IT>
 8009508:	4603      	mov	r3, r0
 800950a:	e000      	b.n	800950e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800950c:	2302      	movs	r3, #2
  }
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b0ba      	sub	sp, #232	; 0xe8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800953e:	2300      	movs	r3, #0
 8009540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009544:	2300      	movs	r3, #0
 8009546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800954a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10f      	bne.n	800957e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800955e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009562:	f003 0320 	and.w	r3, r3, #32
 8009566:	2b00      	cmp	r3, #0
 8009568:	d009      	beq.n	800957e <HAL_UART_IRQHandler+0x66>
 800956a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fc07 	bl	8009d8a <UART_Receive_IT>
      return;
 800957c:	e256      	b.n	8009a2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800957e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 80de 	beq.w	8009744 <HAL_UART_IRQHandler+0x22c>
 8009588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009598:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 80d1 	beq.w	8009744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00b      	beq.n	80095c6 <HAL_UART_IRQHandler+0xae>
 80095ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d005      	beq.n	80095c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	f043 0201 	orr.w	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ca:	f003 0304 	and.w	r3, r3, #4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00b      	beq.n	80095ea <HAL_UART_IRQHandler+0xd2>
 80095d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	f043 0202 	orr.w	r2, r3, #2
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <HAL_UART_IRQHandler+0xf6>
 80095f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800960e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d011      	beq.n	800963e <HAL_UART_IRQHandler+0x126>
 800961a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d105      	bne.n	8009632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d005      	beq.n	800963e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	f043 0208 	orr.w	r2, r3, #8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 81ed 	beq.w	8009a22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b00      	cmp	r3, #0
 8009652:	d008      	beq.n	8009666 <HAL_UART_IRQHandler+0x14e>
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fb92 	bl	8009d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	bf0c      	ite	eq
 8009674:	2301      	moveq	r3, #1
 8009676:	2300      	movne	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f003 0308 	and.w	r3, r3, #8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d103      	bne.n	8009692 <HAL_UART_IRQHandler+0x17a>
 800968a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800968e:	2b00      	cmp	r3, #0
 8009690:	d04f      	beq.n	8009732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa9a 	bl	8009bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b40      	cmp	r3, #64	; 0x40
 80096a4:	d141      	bne.n	800972a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3314      	adds	r3, #20
 80096ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3314      	adds	r3, #20
 80096ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1d9      	bne.n	80096a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d013      	beq.n	8009722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	4a7d      	ldr	r2, [pc, #500]	; (80098f4 <HAL_UART_IRQHandler+0x3dc>)
 8009700:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009706:	4618      	mov	r0, r3
 8009708:	f7fa fbe2 	bl	8003ed0 <HAL_DMA_Abort_IT>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d016      	beq.n	8009740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800971c:	4610      	mov	r0, r2
 800971e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	e00e      	b.n	8009740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f990 	bl	8009a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009728:	e00a      	b.n	8009740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f98c 	bl	8009a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009730:	e006      	b.n	8009740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f988 	bl	8009a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800973e:	e170      	b.n	8009a22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009740:	bf00      	nop
    return;
 8009742:	e16e      	b.n	8009a22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	2b01      	cmp	r3, #1
 800974a:	f040 814a 	bne.w	80099e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800974e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009752:	f003 0310 	and.w	r3, r3, #16
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 8143 	beq.w	80099e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 813c 	beq.w	80099e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800976a:	2300      	movs	r3, #0
 800976c:	60bb      	str	r3, [r7, #8]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	60bb      	str	r3, [r7, #8]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	60bb      	str	r3, [r7, #8]
 800977e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978a:	2b40      	cmp	r3, #64	; 0x40
 800978c:	f040 80b4 	bne.w	80098f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800979c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8140 	beq.w	8009a26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ae:	429a      	cmp	r2, r3
 80097b0:	f080 8139 	bcs.w	8009a26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c6:	f000 8088 	beq.w	80098da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	330c      	adds	r3, #12
 80097f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800980e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1d9      	bne.n	80097ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3314      	adds	r3, #20
 800981c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3314      	adds	r3, #20
 8009836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800983a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800983e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800984c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e1      	bne.n	8009816 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3314      	adds	r3, #20
 8009858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3314      	adds	r3, #20
 8009872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800987c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e3      	bne.n	8009852 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2220      	movs	r2, #32
 800988e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	330c      	adds	r3, #12
 800989e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098aa:	f023 0310 	bic.w	r3, r3, #16
 80098ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	330c      	adds	r3, #12
 80098b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80098be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e3      	bne.n	8009898 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fa fa8b 	bl	8003df0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f8b6 	bl	8009a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098f0:	e099      	b.n	8009a26 <HAL_UART_IRQHandler+0x50e>
 80098f2:	bf00      	nop
 80098f4:	08009c93 	.word	0x08009c93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009900:	b29b      	uxth	r3, r3
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 808b 	beq.w	8009a2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8086 	beq.w	8009a2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	330c      	adds	r3, #12
 8009924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800992e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	330c      	adds	r3, #12
 800993e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009942:	647a      	str	r2, [r7, #68]	; 0x44
 8009944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e3      	bne.n	800991e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3314      	adds	r3, #20
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	623b      	str	r3, [r7, #32]
   return(result);
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3314      	adds	r3, #20
 8009976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800997a:	633a      	str	r2, [r7, #48]	; 0x30
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e3      	bne.n	8009956 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0310 	bic.w	r3, r3, #16
 80099b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099c0:	61fa      	str	r2, [r7, #28]
 80099c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	69b9      	ldr	r1, [r7, #24]
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	617b      	str	r3, [r7, #20]
   return(result);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e3      	bne.n	800999c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f83e 	bl	8009a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099e0:	e023      	b.n	8009a2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <HAL_UART_IRQHandler+0x4ea>
 80099ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f95d 	bl	8009cba <UART_Transmit_IT>
    return;
 8009a00:	e014      	b.n	8009a2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00e      	beq.n	8009a2c <HAL_UART_IRQHandler+0x514>
 8009a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f99d 	bl	8009d5a <UART_EndTransmit_IT>
    return;
 8009a20:	e004      	b.n	8009a2c <HAL_UART_IRQHandler+0x514>
    return;
 8009a22:	bf00      	nop
 8009a24:	e002      	b.n	8009a2c <HAL_UART_IRQHandler+0x514>
      return;
 8009a26:	bf00      	nop
 8009a28:	e000      	b.n	8009a2c <HAL_UART_IRQHandler+0x514>
      return;
 8009a2a:	bf00      	nop
  }
}
 8009a2c:	37e8      	adds	r7, #232	; 0xe8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop

08009a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b090      	sub	sp, #64	; 0x40
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	4613      	mov	r3, r2
 8009a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a84:	e050      	b.n	8009b28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8c:	d04c      	beq.n	8009b28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d007      	beq.n	8009aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a94:	f7f9 fb98 	bl	80031c8 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d241      	bcs.n	8009b28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ac4:	637a      	str	r2, [r7, #52]	; 0x34
 8009ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e5      	bne.n	8009aa4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3314      	adds	r3, #20
 8009ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f023 0301 	bic.w	r3, r3, #1
 8009aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3314      	adds	r3, #20
 8009af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009af8:	623a      	str	r2, [r7, #32]
 8009afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	69f9      	ldr	r1, [r7, #28]
 8009afe:	6a3a      	ldr	r2, [r7, #32]
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e5      	bne.n	8009ad8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e00f      	b.n	8009b48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	4013      	ands	r3, r2
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	bf0c      	ite	eq
 8009b38:	2301      	moveq	r3, #1
 8009b3a:	2300      	movne	r3, #0
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d09f      	beq.n	8009a86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3740      	adds	r7, #64	; 0x40
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	88fa      	ldrh	r2, [r7, #6]
 8009b68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	88fa      	ldrh	r2, [r7, #6]
 8009b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2222      	movs	r2, #34	; 0x22
 8009b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d007      	beq.n	8009b9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695a      	ldr	r2, [r3, #20]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f042 0201 	orr.w	r2, r2, #1
 8009bac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0220 	orr.w	r2, r2, #32
 8009bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b095      	sub	sp, #84	; 0x54
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	330c      	adds	r3, #12
 8009bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bf4:	643a      	str	r2, [r7, #64]	; 0x40
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e5      	bne.n	8009bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f023 0301 	bic.w	r3, r3, #1
 8009c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3314      	adds	r3, #20
 8009c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e5      	bne.n	8009c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d119      	bne.n	8009c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f023 0310 	bic.w	r3, r3, #16
 8009c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	330c      	adds	r3, #12
 8009c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c64:	61ba      	str	r2, [r7, #24]
 8009c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6979      	ldr	r1, [r7, #20]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	613b      	str	r3, [r7, #16]
   return(result);
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e5      	bne.n	8009c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009c86:	bf00      	nop
 8009c88:	3754      	adds	r7, #84	; 0x54
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff fecb 	bl	8009a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b21      	cmp	r3, #33	; 0x21
 8009ccc:	d13e      	bne.n	8009d4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd6:	d114      	bne.n	8009d02 <UART_Transmit_IT+0x48>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d110      	bne.n	8009d02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	1c9a      	adds	r2, r3, #2
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	621a      	str	r2, [r3, #32]
 8009d00:	e008      	b.n	8009d14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	1c59      	adds	r1, r3, #1
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6211      	str	r1, [r2, #32]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	4619      	mov	r1, r3
 8009d22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10f      	bne.n	8009d48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68da      	ldr	r2, [r3, #12]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e000      	b.n	8009d4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d4c:	2302      	movs	r3, #2
  }
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fe5a 	bl	8009a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b08c      	sub	sp, #48	; 0x30
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b22      	cmp	r3, #34	; 0x22
 8009d9c:	f040 80ab 	bne.w	8009ef6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da8:	d117      	bne.n	8009dda <UART_Receive_IT+0x50>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d113      	bne.n	8009dda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd2:	1c9a      	adds	r2, r3, #2
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8009dd8:	e026      	b.n	8009e28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dec:	d007      	beq.n	8009dfe <UART_Receive_IT+0x74>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <UART_Receive_IT+0x82>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	e008      	b.n	8009e1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	4619      	mov	r1, r3
 8009e36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d15a      	bne.n	8009ef2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0220 	bic.w	r2, r2, #32
 8009e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0201 	bic.w	r2, r2, #1
 8009e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d135      	bne.n	8009ee8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	330c      	adds	r3, #12
 8009e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	613b      	str	r3, [r7, #16]
   return(result);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f023 0310 	bic.w	r3, r3, #16
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	330c      	adds	r3, #12
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	623a      	str	r2, [r7, #32]
 8009ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	69f9      	ldr	r1, [r7, #28]
 8009ea8:	6a3a      	ldr	r2, [r7, #32]
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e5      	bne.n	8009e82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0310 	and.w	r3, r3, #16
 8009ec0:	2b10      	cmp	r3, #16
 8009ec2:	d10a      	bne.n	8009eda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff fdbb 	bl	8009a5c <HAL_UARTEx_RxEventCallback>
 8009ee6:	e002      	b.n	8009eee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f009 fe2d 	bl	8013b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e002      	b.n	8009ef8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e000      	b.n	8009ef8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009ef6:	2302      	movs	r3, #2
  }
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3730      	adds	r7, #48	; 0x30
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f04:	b0c0      	sub	sp, #256	; 0x100
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f1c:	68d9      	ldr	r1, [r3, #12]
 8009f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	ea40 0301 	orr.w	r3, r0, r1
 8009f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f58:	f021 010c 	bic.w	r1, r1, #12
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f66:	430b      	orrs	r3, r1
 8009f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7a:	6999      	ldr	r1, [r3, #24]
 8009f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	ea40 0301 	orr.w	r3, r0, r1
 8009f86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	4b8f      	ldr	r3, [pc, #572]	; (800a1cc <UART_SetConfig+0x2cc>)
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d005      	beq.n	8009fa0 <UART_SetConfig+0xa0>
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4b8d      	ldr	r3, [pc, #564]	; (800a1d0 <UART_SetConfig+0x2d0>)
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d104      	bne.n	8009faa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fa0:	f7fc f870 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 8009fa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009fa8:	e003      	b.n	8009fb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009faa:	f7fc f857 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8009fae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fbc:	f040 810c 	bne.w	800a1d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009fce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	462b      	mov	r3, r5
 8009fd6:	1891      	adds	r1, r2, r2
 8009fd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fda:	415b      	adcs	r3, r3
 8009fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	eb12 0801 	adds.w	r8, r2, r1
 8009fe8:	4629      	mov	r1, r5
 8009fea:	eb43 0901 	adc.w	r9, r3, r1
 8009fee:	f04f 0200 	mov.w	r2, #0
 8009ff2:	f04f 0300 	mov.w	r3, #0
 8009ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a002:	4690      	mov	r8, r2
 800a004:	4699      	mov	r9, r3
 800a006:	4623      	mov	r3, r4
 800a008:	eb18 0303 	adds.w	r3, r8, r3
 800a00c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a010:	462b      	mov	r3, r5
 800a012:	eb49 0303 	adc.w	r3, r9, r3
 800a016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a026:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a02a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a02e:	460b      	mov	r3, r1
 800a030:	18db      	adds	r3, r3, r3
 800a032:	653b      	str	r3, [r7, #80]	; 0x50
 800a034:	4613      	mov	r3, r2
 800a036:	eb42 0303 	adc.w	r3, r2, r3
 800a03a:	657b      	str	r3, [r7, #84]	; 0x54
 800a03c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a040:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a044:	f7f6 fe70 	bl	8000d28 <__aeabi_uldivmod>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4b61      	ldr	r3, [pc, #388]	; (800a1d4 <UART_SetConfig+0x2d4>)
 800a04e:	fba3 2302 	umull	r2, r3, r3, r2
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	011c      	lsls	r4, r3, #4
 800a056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a060:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a064:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	1891      	adds	r1, r2, r2
 800a06e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a070:	415b      	adcs	r3, r3
 800a072:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a074:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a078:	4641      	mov	r1, r8
 800a07a:	eb12 0a01 	adds.w	sl, r2, r1
 800a07e:	4649      	mov	r1, r9
 800a080:	eb43 0b01 	adc.w	fp, r3, r1
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a090:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a098:	4692      	mov	sl, r2
 800a09a:	469b      	mov	fp, r3
 800a09c:	4643      	mov	r3, r8
 800a09e:	eb1a 0303 	adds.w	r3, sl, r3
 800a0a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a0ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a0c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	18db      	adds	r3, r3, r3
 800a0c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	eb42 0303 	adc.w	r3, r2, r3
 800a0d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0da:	f7f6 fe25 	bl	8000d28 <__aeabi_uldivmod>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4b3b      	ldr	r3, [pc, #236]	; (800a1d4 <UART_SetConfig+0x2d4>)
 800a0e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ea:	095b      	lsrs	r3, r3, #5
 800a0ec:	2264      	movs	r2, #100	; 0x64
 800a0ee:	fb02 f303 	mul.w	r3, r2, r3
 800a0f2:	1acb      	subs	r3, r1, r3
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a0fa:	4b36      	ldr	r3, [pc, #216]	; (800a1d4 <UART_SetConfig+0x2d4>)
 800a0fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a108:	441c      	add	r4, r3
 800a10a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a114:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a118:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a11c:	4642      	mov	r2, r8
 800a11e:	464b      	mov	r3, r9
 800a120:	1891      	adds	r1, r2, r2
 800a122:	63b9      	str	r1, [r7, #56]	; 0x38
 800a124:	415b      	adcs	r3, r3
 800a126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a12c:	4641      	mov	r1, r8
 800a12e:	1851      	adds	r1, r2, r1
 800a130:	6339      	str	r1, [r7, #48]	; 0x30
 800a132:	4649      	mov	r1, r9
 800a134:	414b      	adcs	r3, r1
 800a136:	637b      	str	r3, [r7, #52]	; 0x34
 800a138:	f04f 0200 	mov.w	r2, #0
 800a13c:	f04f 0300 	mov.w	r3, #0
 800a140:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a144:	4659      	mov	r1, fp
 800a146:	00cb      	lsls	r3, r1, #3
 800a148:	4651      	mov	r1, sl
 800a14a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a14e:	4651      	mov	r1, sl
 800a150:	00ca      	lsls	r2, r1, #3
 800a152:	4610      	mov	r0, r2
 800a154:	4619      	mov	r1, r3
 800a156:	4603      	mov	r3, r0
 800a158:	4642      	mov	r2, r8
 800a15a:	189b      	adds	r3, r3, r2
 800a15c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a160:	464b      	mov	r3, r9
 800a162:	460a      	mov	r2, r1
 800a164:	eb42 0303 	adc.w	r3, r2, r3
 800a168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a178:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a17c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a180:	460b      	mov	r3, r1
 800a182:	18db      	adds	r3, r3, r3
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
 800a186:	4613      	mov	r3, r2
 800a188:	eb42 0303 	adc.w	r3, r2, r3
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a18e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a192:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a196:	f7f6 fdc7 	bl	8000d28 <__aeabi_uldivmod>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <UART_SetConfig+0x2d4>)
 800a1a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a1a4:	095b      	lsrs	r3, r3, #5
 800a1a6:	2164      	movs	r1, #100	; 0x64
 800a1a8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	3332      	adds	r3, #50	; 0x32
 800a1b2:	4a08      	ldr	r2, [pc, #32]	; (800a1d4 <UART_SetConfig+0x2d4>)
 800a1b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b8:	095b      	lsrs	r3, r3, #5
 800a1ba:	f003 0207 	and.w	r2, r3, #7
 800a1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4422      	add	r2, r4
 800a1c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1c8:	e105      	b.n	800a3d6 <UART_SetConfig+0x4d6>
 800a1ca:	bf00      	nop
 800a1cc:	40011000 	.word	0x40011000
 800a1d0:	40011400 	.word	0x40011400
 800a1d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a1ea:	4642      	mov	r2, r8
 800a1ec:	464b      	mov	r3, r9
 800a1ee:	1891      	adds	r1, r2, r2
 800a1f0:	6239      	str	r1, [r7, #32]
 800a1f2:	415b      	adcs	r3, r3
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	1854      	adds	r4, r2, r1
 800a1fe:	4649      	mov	r1, r9
 800a200:	eb43 0501 	adc.w	r5, r3, r1
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	00eb      	lsls	r3, r5, #3
 800a20e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a212:	00e2      	lsls	r2, r4, #3
 800a214:	4614      	mov	r4, r2
 800a216:	461d      	mov	r5, r3
 800a218:	4643      	mov	r3, r8
 800a21a:	18e3      	adds	r3, r4, r3
 800a21c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a220:	464b      	mov	r3, r9
 800a222:	eb45 0303 	adc.w	r3, r5, r3
 800a226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	f04f 0300 	mov.w	r3, #0
 800a242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a246:	4629      	mov	r1, r5
 800a248:	008b      	lsls	r3, r1, #2
 800a24a:	4621      	mov	r1, r4
 800a24c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a250:	4621      	mov	r1, r4
 800a252:	008a      	lsls	r2, r1, #2
 800a254:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a258:	f7f6 fd66 	bl	8000d28 <__aeabi_uldivmod>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4b60      	ldr	r3, [pc, #384]	; (800a3e4 <UART_SetConfig+0x4e4>)
 800a262:	fba3 2302 	umull	r2, r3, r3, r2
 800a266:	095b      	lsrs	r3, r3, #5
 800a268:	011c      	lsls	r4, r3, #4
 800a26a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a274:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a278:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a27c:	4642      	mov	r2, r8
 800a27e:	464b      	mov	r3, r9
 800a280:	1891      	adds	r1, r2, r2
 800a282:	61b9      	str	r1, [r7, #24]
 800a284:	415b      	adcs	r3, r3
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a28c:	4641      	mov	r1, r8
 800a28e:	1851      	adds	r1, r2, r1
 800a290:	6139      	str	r1, [r7, #16]
 800a292:	4649      	mov	r1, r9
 800a294:	414b      	adcs	r3, r1
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	f04f 0300 	mov.w	r3, #0
 800a2a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	00cb      	lsls	r3, r1, #3
 800a2a8:	4651      	mov	r1, sl
 800a2aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2ae:	4651      	mov	r1, sl
 800a2b0:	00ca      	lsls	r2, r1, #3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4642      	mov	r2, r8
 800a2ba:	189b      	adds	r3, r3, r2
 800a2bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	460a      	mov	r2, r1
 800a2c4:	eb42 0303 	adc.w	r3, r2, r3
 800a2c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2d8:	f04f 0200 	mov.w	r2, #0
 800a2dc:	f04f 0300 	mov.w	r3, #0
 800a2e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	008b      	lsls	r3, r1, #2
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2ee:	4641      	mov	r1, r8
 800a2f0:	008a      	lsls	r2, r1, #2
 800a2f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a2f6:	f7f6 fd17 	bl	8000d28 <__aeabi_uldivmod>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4b39      	ldr	r3, [pc, #228]	; (800a3e4 <UART_SetConfig+0x4e4>)
 800a300:	fba3 1302 	umull	r1, r3, r3, r2
 800a304:	095b      	lsrs	r3, r3, #5
 800a306:	2164      	movs	r1, #100	; 0x64
 800a308:	fb01 f303 	mul.w	r3, r1, r3
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	3332      	adds	r3, #50	; 0x32
 800a312:	4a34      	ldr	r2, [pc, #208]	; (800a3e4 <UART_SetConfig+0x4e4>)
 800a314:	fba2 2303 	umull	r2, r3, r2, r3
 800a318:	095b      	lsrs	r3, r3, #5
 800a31a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a31e:	441c      	add	r4, r3
 800a320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a324:	2200      	movs	r2, #0
 800a326:	673b      	str	r3, [r7, #112]	; 0x70
 800a328:	677a      	str	r2, [r7, #116]	; 0x74
 800a32a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a32e:	4642      	mov	r2, r8
 800a330:	464b      	mov	r3, r9
 800a332:	1891      	adds	r1, r2, r2
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	415b      	adcs	r3, r3
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a33e:	4641      	mov	r1, r8
 800a340:	1851      	adds	r1, r2, r1
 800a342:	6039      	str	r1, [r7, #0]
 800a344:	4649      	mov	r1, r9
 800a346:	414b      	adcs	r3, r1
 800a348:	607b      	str	r3, [r7, #4]
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a356:	4659      	mov	r1, fp
 800a358:	00cb      	lsls	r3, r1, #3
 800a35a:	4651      	mov	r1, sl
 800a35c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a360:	4651      	mov	r1, sl
 800a362:	00ca      	lsls	r2, r1, #3
 800a364:	4610      	mov	r0, r2
 800a366:	4619      	mov	r1, r3
 800a368:	4603      	mov	r3, r0
 800a36a:	4642      	mov	r2, r8
 800a36c:	189b      	adds	r3, r3, r2
 800a36e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a370:	464b      	mov	r3, r9
 800a372:	460a      	mov	r2, r1
 800a374:	eb42 0303 	adc.w	r3, r2, r3
 800a378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a37a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	663b      	str	r3, [r7, #96]	; 0x60
 800a384:	667a      	str	r2, [r7, #100]	; 0x64
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a392:	4649      	mov	r1, r9
 800a394:	008b      	lsls	r3, r1, #2
 800a396:	4641      	mov	r1, r8
 800a398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a39c:	4641      	mov	r1, r8
 800a39e:	008a      	lsls	r2, r1, #2
 800a3a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a3a4:	f7f6 fcc0 	bl	8000d28 <__aeabi_uldivmod>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <UART_SetConfig+0x4e4>)
 800a3ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	2164      	movs	r1, #100	; 0x64
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	3332      	adds	r3, #50	; 0x32
 800a3c0:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <UART_SetConfig+0x4e4>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4422      	add	r2, r4
 800a3d4:	609a      	str	r2, [r3, #8]
}
 800a3d6:	bf00      	nop
 800a3d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3e2:	bf00      	nop
 800a3e4:	51eb851f 	.word	0x51eb851f

0800a3e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	f107 001c 	add.w	r0, r7, #28
 800a3f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a3fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a400:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a402:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a406:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a40a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a40e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a412:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a422:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	431a      	orrs	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	b004      	add	sp, #16
 800a43c:	4770      	bx	lr

0800a43e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2203      	movs	r2, #3
 800a486:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0303 	and.w	r3, r3, #3
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a4d0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a4d6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a4dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a4ec:	f023 030f 	bic.w	r3, r3, #15
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	b2db      	uxtb	r3, r3
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3314      	adds	r3, #20
 800a52e:	461a      	mov	r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	4413      	add	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
}  
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a546:	b480      	push	{r7}
 800a548:	b085      	sub	sp, #20
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a56c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a572:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a578:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	431a      	orrs	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a590:	2300      	movs	r3, #0

}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b088      	sub	sp, #32
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5be:	f107 0308 	add.w	r3, r7, #8
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff ff74 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ce:	2110      	movs	r1, #16
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fa19 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d8:	69fb      	ldr	r3, [r7, #28]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3720      	adds	r7, #32
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b088      	sub	sp, #32
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a5f0:	2311      	movs	r3, #17
 800a5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a602:	f107 0308 	add.w	r3, r7, #8
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff52 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a612:	2111      	movs	r1, #17
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f9f7 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a61c:	69fb      	ldr	r3, [r7, #28]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b088      	sub	sp, #32
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a634:	2312      	movs	r3, #18
 800a636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a644:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ff30 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a652:	f241 3288 	movw	r2, #5000	; 0x1388
 800a656:	2112      	movs	r1, #18
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f9d5 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a65e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a660:	69fb      	ldr	r3, [r7, #28]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b088      	sub	sp, #32
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a678:	2318      	movs	r3, #24
 800a67a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a67c:	2340      	movs	r3, #64	; 0x40
 800a67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a680:	2300      	movs	r3, #0
 800a682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a68a:	f107 0308 	add.w	r3, r7, #8
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff ff0e 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a696:	f241 3288 	movw	r2, #5000	; 0x1388
 800a69a:	2118      	movs	r1, #24
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f9b3 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a6a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b088      	sub	sp, #32
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a6bc:	2319      	movs	r3, #25
 800a6be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6c0:	2340      	movs	r3, #64	; 0x40
 800a6c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff feec 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a6da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6de:	2119      	movs	r1, #25
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f991 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a6e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a700:	230c      	movs	r3, #12
 800a702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a70c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a710:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a712:	f107 0308 	add.w	r3, r7, #8
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff feca 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a71e:	4a05      	ldr	r2, [pc, #20]	; (800a734 <SDMMC_CmdStopTransfer+0x40>)
 800a720:	210c      	movs	r1, #12
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f970 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a72a:	69fb      	ldr	r3, [r7, #28]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3720      	adds	r7, #32
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	05f5e100 	.word	0x05f5e100

0800a738 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08a      	sub	sp, #40	; 0x28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a748:	2307      	movs	r3, #7
 800a74a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a74c:	2340      	movs	r3, #64	; 0x40
 800a74e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a750:	2300      	movs	r3, #0
 800a752:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a758:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a75a:	f107 0310 	add.w	r3, r7, #16
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7ff fea6 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a766:	f241 3288 	movw	r2, #5000	; 0x1388
 800a76a:	2107      	movs	r1, #7
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 f94b 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a772:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a776:	4618      	mov	r0, r3
 800a778:	3728      	adds	r7, #40	; 0x28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b088      	sub	sp, #32
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a78e:	2300      	movs	r3, #0
 800a790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a79a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a79c:	f107 0308 	add.w	r3, r7, #8
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fe85 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fb65 	bl	800ae78 <SDMMC_GetCmdError>
 800a7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b0:	69fb      	ldr	r3, [r7, #28]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3720      	adds	r7, #32
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b088      	sub	sp, #32
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a7c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7cc:	2340      	movs	r3, #64	; 0x40
 800a7ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff fe66 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 faf8 	bl	800addc <SDMMC_GetCmdResp7>
 800a7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a806:	2337      	movs	r3, #55	; 0x37
 800a808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a80a:	2340      	movs	r3, #64	; 0x40
 800a80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a80e:	2300      	movs	r3, #0
 800a810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fe47 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a824:	f241 3288 	movw	r2, #5000	; 0x1388
 800a828:	2137      	movs	r1, #55	; 0x37
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8ec 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a84c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a852:	2329      	movs	r3, #41	; 0x29
 800a854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a856:	2340      	movs	r3, #64	; 0x40
 800a858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a864:	f107 0308 	add.w	r3, r7, #8
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fe21 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f9ff 	bl	800ac74 <SDMMC_GetCmdResp3>
 800a876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a878:	69fb      	ldr	r3, [r7, #28]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3720      	adds	r7, #32
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b088      	sub	sp, #32
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a890:	2306      	movs	r3, #6
 800a892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a894:	2340      	movs	r3, #64	; 0x40
 800a896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a89c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8a2:	f107 0308 	add.w	r3, r7, #8
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fe02 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a8ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b2:	2106      	movs	r1, #6
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f8a7 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a8ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a8d2:	2333      	movs	r3, #51	; 0x33
 800a8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8d6:	2340      	movs	r3, #64	; 0x40
 800a8d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8e4:	f107 0308 	add.w	r3, r7, #8
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fde1 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f4:	2133      	movs	r1, #51	; 0x33
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f886 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a8fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8fe:	69fb      	ldr	r3, [r7, #28]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a914:	2302      	movs	r3, #2
 800a916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a918:	23c0      	movs	r3, #192	; 0xc0
 800a91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a926:	f107 0308 	add.w	r3, r7, #8
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff fdc0 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f956 	bl	800abe4 <SDMMC_GetCmdResp2>
 800a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a952:	2309      	movs	r3, #9
 800a954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a956:	23c0      	movs	r3, #192	; 0xc0
 800a958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fda1 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f937 	bl	800abe4 <SDMMC_GetCmdResp2>
 800a976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a978:	69fb      	ldr	r3, [r7, #28]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b088      	sub	sp, #32
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a990:	2303      	movs	r3, #3
 800a992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a994:	2340      	movs	r3, #64	; 0x40
 800a996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a998:	2300      	movs	r3, #0
 800a99a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a99c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f7ff fd82 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	2103      	movs	r1, #3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f99c 	bl	800acf0 <SDMMC_GetCmdResp6>
 800a9b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3720      	adds	r7, #32
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9d2:	230d      	movs	r3, #13
 800a9d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9d6:	2340      	movs	r3, #64	; 0x40
 800a9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff fd61 	bl	800a4b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f4:	210d      	movs	r1, #13
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f806 	bl	800aa08 <SDMMC_GetCmdResp1>
 800a9fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3720      	adds	r7, #32
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	460b      	mov	r3, r1
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aa16:	4b70      	ldr	r3, [pc, #448]	; (800abd8 <SDMMC_GetCmdResp1+0x1d0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a70      	ldr	r2, [pc, #448]	; (800abdc <SDMMC_GetCmdResp1+0x1d4>)
 800aa1c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa20:	0a5a      	lsrs	r2, r3, #9
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	1e5a      	subs	r2, r3, #1
 800aa2e:	61fa      	str	r2, [r7, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa38:	e0c9      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0ef      	beq.n	800aa2a <SDMMC_GetCmdResp1+0x22>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1ea      	bne.n	800aa2a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d004      	beq.n	800aa6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2204      	movs	r2, #4
 800aa64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa66:	2304      	movs	r3, #4
 800aa68:	e0b1      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d004      	beq.n	800aa80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e0a6      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	22c5      	movs	r2, #197	; 0xc5
 800aa84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff fd3d 	bl	800a506 <SDIO_GetCommandResponse>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	461a      	mov	r2, r3
 800aa90:	7afb      	ldrb	r3, [r7, #11]
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d001      	beq.n	800aa9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e099      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff fd3f 	bl	800a520 <SDIO_GetResponse>
 800aaa2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	4b4e      	ldr	r3, [pc, #312]	; (800abe0 <SDMMC_GetCmdResp1+0x1d8>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	e08d      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	da02      	bge.n	800aabe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aabc:	e087      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aac8:	2340      	movs	r3, #64	; 0x40
 800aaca:	e080      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aad6:	2380      	movs	r3, #128	; 0x80
 800aad8:	e079      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aae8:	e071      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aaf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaf8:	e069      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab08:	e061      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab18:	e059      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab28:	e051      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab38:	e049      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab48:	e041      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab58:	e039      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab68:	e031      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab78:	e029      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab88:	e021      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab98:	e019      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aba8:	e011      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800abb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abb8:	e009      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f003 0308 	and.w	r3, r3, #8
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abc8:	e001      	b.n	800abce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3720      	adds	r7, #32
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000008 	.word	0x20000008
 800abdc:	10624dd3 	.word	0x10624dd3
 800abe0:	fdffe008 	.word	0xfdffe008

0800abe4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abec:	4b1f      	ldr	r3, [pc, #124]	; (800ac6c <SDMMC_GetCmdResp2+0x88>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a1f      	ldr	r2, [pc, #124]	; (800ac70 <SDMMC_GetCmdResp2+0x8c>)
 800abf2:	fba2 2303 	umull	r2, r3, r2, r3
 800abf6:	0a5b      	lsrs	r3, r3, #9
 800abf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abfc:	fb02 f303 	mul.w	r3, r2, r3
 800ac00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	1e5a      	subs	r2, r3, #1
 800ac06:	60fa      	str	r2, [r7, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac10:	e026      	b.n	800ac60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0ef      	beq.n	800ac02 <SDMMC_GetCmdResp2+0x1e>
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1ea      	bne.n	800ac02 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d004      	beq.n	800ac42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac3e:	2304      	movs	r3, #4
 800ac40:	e00e      	b.n	800ac60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e003      	b.n	800ac60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	22c5      	movs	r2, #197	; 0xc5
 800ac5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	20000008 	.word	0x20000008
 800ac70:	10624dd3 	.word	0x10624dd3

0800ac74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	; (800ace8 <SDMMC_GetCmdResp3+0x74>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a1a      	ldr	r2, [pc, #104]	; (800acec <SDMMC_GetCmdResp3+0x78>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	0a5b      	lsrs	r3, r3, #9
 800ac88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	1e5a      	subs	r2, r3, #1
 800ac96:	60fa      	str	r2, [r7, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aca0:	e01b      	b.n	800acda <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0ef      	beq.n	800ac92 <SDMMC_GetCmdResp3+0x1e>
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1ea      	bne.n	800ac92 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d004      	beq.n	800acd2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2204      	movs	r2, #4
 800accc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acce:	2304      	movs	r3, #4
 800acd0:	e003      	b.n	800acda <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	22c5      	movs	r2, #197	; 0xc5
 800acd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	20000008 	.word	0x20000008
 800acec:	10624dd3 	.word	0x10624dd3

0800acf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	460b      	mov	r3, r1
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acfe:	4b35      	ldr	r3, [pc, #212]	; (800add4 <SDMMC_GetCmdResp6+0xe4>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a35      	ldr	r2, [pc, #212]	; (800add8 <SDMMC_GetCmdResp6+0xe8>)
 800ad04:	fba2 2303 	umull	r2, r3, r2, r3
 800ad08:	0a5b      	lsrs	r3, r3, #9
 800ad0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	1e5a      	subs	r2, r3, #1
 800ad18:	61fa      	str	r2, [r7, #28]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d102      	bne.n	800ad24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad22:	e052      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad28:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0ef      	beq.n	800ad14 <SDMMC_GetCmdResp6+0x24>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1ea      	bne.n	800ad14 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad42:	f003 0304 	and.w	r3, r3, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2204      	movs	r2, #4
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad50:	2304      	movs	r3, #4
 800ad52:	e03a      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d004      	beq.n	800ad6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2201      	movs	r2, #1
 800ad64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e02f      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff fbcb 	bl	800a506 <SDIO_GetCommandResponse>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	7afb      	ldrb	r3, [r7, #11]
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d001      	beq.n	800ad7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e025      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	22c5      	movs	r2, #197	; 0xc5
 800ad82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad84:	2100      	movs	r1, #0
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff fbca 	bl	800a520 <SDIO_GetResponse>
 800ad8c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d106      	bne.n	800ada6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e011      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adb4:	e009      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800adc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc4:	e001      	b.n	800adca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000008 	.word	0x20000008
 800add8:	10624dd3 	.word	0x10624dd3

0800addc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ade4:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <SDMMC_GetCmdResp7+0x94>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a22      	ldr	r2, [pc, #136]	; (800ae74 <SDMMC_GetCmdResp7+0x98>)
 800adea:	fba2 2303 	umull	r2, r3, r2, r3
 800adee:	0a5b      	lsrs	r3, r3, #9
 800adf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf4:	fb02 f303 	mul.w	r3, r2, r3
 800adf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1e5a      	subs	r2, r3, #1
 800adfe:	60fa      	str	r2, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae08:	e02c      	b.n	800ae64 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0ef      	beq.n	800adfa <SDMMC_GetCmdResp7+0x1e>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1ea      	bne.n	800adfa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2204      	movs	r2, #4
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae36:	2304      	movs	r3, #4
 800ae38:	e014      	b.n	800ae64 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e009      	b.n	800ae64 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2240      	movs	r2, #64	; 0x40
 800ae60:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae62:	2300      	movs	r3, #0
  
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000008 	.word	0x20000008
 800ae74:	10624dd3 	.word	0x10624dd3

0800ae78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae80:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <SDMMC_GetCmdError+0x50>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a11      	ldr	r2, [pc, #68]	; (800aecc <SDMMC_GetCmdError+0x54>)
 800ae86:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8a:	0a5b      	lsrs	r3, r3, #9
 800ae8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae90:	fb02 f303 	mul.w	r3, r2, r3
 800ae94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	60fa      	str	r2, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aea4:	e009      	b.n	800aeba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0f1      	beq.n	800ae96 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	22c5      	movs	r2, #197	; 0xc5
 800aeb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20000008 	.word	0x20000008
 800aecc:	10624dd3 	.word	0x10624dd3

0800aed0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
    /*## FatFS: Link the SD driver ###########################*/
    retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aed4:	4908      	ldr	r1, [pc, #32]	; (800aef8 <MX_FATFS_Init+0x28>)
 800aed6:	4809      	ldr	r0, [pc, #36]	; (800aefc <MX_FATFS_Init+0x2c>)
 800aed8:	f001 ffe0 	bl	800ce9c <FATFS_LinkDriver>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	4b07      	ldr	r3, [pc, #28]	; (800af00 <MX_FATFS_Init+0x30>)
 800aee2:	701a      	strb	r2, [r3, #0]
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aee4:	4907      	ldr	r1, [pc, #28]	; (800af04 <MX_FATFS_Init+0x34>)
 800aee6:	4808      	ldr	r0, [pc, #32]	; (800af08 <MX_FATFS_Init+0x38>)
 800aee8:	f001 ffd8 	bl	800ce9c <FATFS_LinkDriver>
 800aeec:	4603      	mov	r3, r0
 800aeee:	461a      	mov	r2, r3
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <MX_FATFS_Init+0x3c>)
 800aef2:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    /* additional user code for init */
    /* USER CODE END Init */
}
 800aef4:	bf00      	nop
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	2000129c 	.word	0x2000129c
 800aefc:	08019a0c 	.word	0x08019a0c
 800af00:	20001298 	.word	0x20001298
 800af04:	200012a4 	.word	0x200012a4
 800af08:	20000014 	.word	0x20000014
 800af0c:	200012a0 	.word	0x200012a0

0800af10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af1a:	f000 f896 	bl	800b04a <BSP_SD_IsDetected>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b01      	cmp	r3, #1
 800af22:	d001      	beq.n	800af28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e012      	b.n	800af4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800af28:	480b      	ldr	r0, [pc, #44]	; (800af58 <BSP_SD_Init+0x48>)
 800af2a:	f7fb f8bf 	bl	80060ac <HAL_SD_Init>
 800af2e:	4603      	mov	r3, r0
 800af30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d109      	bne.n	800af4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800af38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af3c:	4806      	ldr	r0, [pc, #24]	; (800af58 <BSP_SD_Init+0x48>)
 800af3e:	f7fb fe8d 	bl	8006c5c <HAL_SD_ConfigWideBusOperation>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af4c:	79fb      	ldrb	r3, [r7, #7]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000ce4 	.word	0x20000ce4

0800af5c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	4806      	ldr	r0, [pc, #24]	; (800af8c <BSP_SD_ReadBlocks_DMA+0x30>)
 800af74:	f7fb f94a 	bl	800620c <HAL_SD_ReadBlocks_DMA>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af82:	7dfb      	ldrb	r3, [r7, #23]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	20000ce4 	.word	0x20000ce4

0800af90 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	68f9      	ldr	r1, [r7, #12]
 800afa6:	4806      	ldr	r0, [pc, #24]	; (800afc0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afa8:	f7fb fa12 	bl	80063d0 <HAL_SD_WriteBlocks_DMA>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	20000ce4 	.word	0x20000ce4

0800afc4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afc8:	4805      	ldr	r0, [pc, #20]	; (800afe0 <BSP_SD_GetCardState+0x1c>)
 800afca:	f7fb fee1 	bl	8006d90 <HAL_SD_GetCardState>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b04      	cmp	r3, #4
 800afd2:	bf14      	ite	ne
 800afd4:	2301      	movne	r3, #1
 800afd6:	2300      	moveq	r3, #0
 800afd8:	b2db      	uxtb	r3, r3
}
 800afda:	4618      	mov	r0, r3
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000ce4 	.word	0x20000ce4

0800afe4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4803      	ldr	r0, [pc, #12]	; (800affc <BSP_SD_GetCardInfo+0x18>)
 800aff0:	f7fb fe08 	bl	8006c04 <HAL_SD_GetCardInfo>
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000ce4 	.word	0x20000ce4

0800b000 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b008:	f000 f818 	bl	800b03c <BSP_SD_AbortCallback>
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b01c:	f000 f9a8 	bl	800b370 <BSP_SD_WriteCpltCallback>
}
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b030:	f000 f9aa 	bl	800b388 <BSP_SD_ReadCpltCallback>
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0

}
 800b040:	bf00      	nop
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b050:	2301      	movs	r3, #1
 800b052:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b054:	f000 f80c 	bl	800b070 <BSP_PlatformIsDetected>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b05e:	2300      	movs	r3, #0
 800b060:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	b2db      	uxtb	r3, r3
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b076:	2301      	movs	r3, #1
 800b078:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b07a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b07e:	4806      	ldr	r0, [pc, #24]	; (800b098 <BSP_PlatformIsDetected+0x28>)
 800b080:	f7f9 fb5a 	bl	8004738 <HAL_GPIO_ReadPin>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b08a:	2300      	movs	r3, #0
 800b08c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b08e:	79fb      	ldrb	r3, [r7, #7]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	40021400 	.word	0x40021400

0800b09c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b0a4:	f7f8 f890 	bl	80031c8 <HAL_GetTick>
 800b0a8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b0aa:	e006      	b.n	800b0ba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0ac:	f7ff ff8a 	bl	800afc4 <BSP_SD_GetCardState>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e009      	b.n	800b0ce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b0ba:	f7f8 f885 	bl	80031c8 <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d8f0      	bhi.n	800b0ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b0ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <SD_CheckStatus+0x38>)
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0e8:	f7ff ff6c 	bl	800afc4 <BSP_SD_GetCardState>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d107      	bne.n	800b102 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <SD_CheckStatus+0x38>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f023 0301 	bic.w	r3, r3, #1
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	4b04      	ldr	r3, [pc, #16]	; (800b110 <SD_CheckStatus+0x38>)
 800b100:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b102:	4b03      	ldr	r3, [pc, #12]	; (800b110 <SD_CheckStatus+0x38>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	20000011 	.word	0x20000011

0800b114 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b11e:	f7ff fef7 	bl	800af10 <BSP_SD_Init>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d107      	bne.n	800b138 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b128:	79fb      	ldrb	r3, [r7, #7]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff ffd4 	bl	800b0d8 <SD_CheckStatus>
 800b130:	4603      	mov	r3, r0
 800b132:	461a      	mov	r2, r3
 800b134:	4b04      	ldr	r3, [pc, #16]	; (800b148 <SD_initialize+0x34>)
 800b136:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b138:	4b03      	ldr	r3, [pc, #12]	; (800b148 <SD_initialize+0x34>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	b2db      	uxtb	r3, r3
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20000011 	.word	0x20000011

0800b14c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff ffbd 	bl	800b0d8 <SD_CheckStatus>
 800b15e:	4603      	mov	r3, r0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b17c:	f247 5030 	movw	r0, #30000	; 0x7530
 800b180:	f7ff ff8c 	bl	800b09c <SD_CheckStatusWithTimeout>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	da01      	bge.n	800b18e <SD_read+0x26>
  {
    return res;
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	e03b      	b.n	800b206 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	68b8      	ldr	r0, [r7, #8]
 800b194:	f7ff fee2 	bl	800af5c <BSP_SD_ReadBlocks_DMA>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d132      	bne.n	800b204 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b19e:	4b1c      	ldr	r3, [pc, #112]	; (800b210 <SD_read+0xa8>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b1a4:	f7f8 f810 	bl	80031c8 <HAL_GetTick>
 800b1a8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1aa:	bf00      	nop
 800b1ac:	4b18      	ldr	r3, [pc, #96]	; (800b210 <SD_read+0xa8>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d108      	bne.n	800b1c6 <SD_read+0x5e>
 800b1b4:	f7f8 f808 	bl	80031c8 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d9f2      	bls.n	800b1ac <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b1c6:	4b12      	ldr	r3, [pc, #72]	; (800b210 <SD_read+0xa8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	75fb      	strb	r3, [r7, #23]
 800b1d2:	e017      	b.n	800b204 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <SD_read+0xa8>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1da:	f7f7 fff5 	bl	80031c8 <HAL_GetTick>
 800b1de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1e0:	e007      	b.n	800b1f2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1e2:	f7ff feef 	bl	800afc4 <BSP_SD_GetCardState>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <SD_read+0x8a>
          {
            res = RES_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b1f0:	e008      	b.n	800b204 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1f2:	f7f7 ffe9 	bl	80031c8 <HAL_GetTick>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800b200:	4293      	cmp	r3, r2
 800b202:	d9ee      	bls.n	800b1e2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	200012ac 	.word	0x200012ac

0800b214 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b228:	4b24      	ldr	r3, [pc, #144]	; (800b2bc <SD_write+0xa8>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b22e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b232:	f7ff ff33 	bl	800b09c <SD_CheckStatusWithTimeout>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	da01      	bge.n	800b240 <SD_write+0x2c>
  {
    return res;
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
 800b23e:	e038      	b.n	800b2b2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	6879      	ldr	r1, [r7, #4]
 800b244:	68b8      	ldr	r0, [r7, #8]
 800b246:	f7ff fea3 	bl	800af90 <BSP_SD_WriteBlocks_DMA>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d12f      	bne.n	800b2b0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b250:	f7f7 ffba 	bl	80031c8 <HAL_GetTick>
 800b254:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b256:	bf00      	nop
 800b258:	4b18      	ldr	r3, [pc, #96]	; (800b2bc <SD_write+0xa8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d108      	bne.n	800b272 <SD_write+0x5e>
 800b260:	f7f7 ffb2 	bl	80031c8 <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	f247 522f 	movw	r2, #29999	; 0x752f
 800b26e:	4293      	cmp	r3, r2
 800b270:	d9f2      	bls.n	800b258 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b272:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <SD_write+0xa8>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	75fb      	strb	r3, [r7, #23]
 800b27e:	e017      	b.n	800b2b0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b280:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <SD_write+0xa8>)
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b286:	f7f7 ff9f 	bl	80031c8 <HAL_GetTick>
 800b28a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b28c:	e007      	b.n	800b29e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b28e:	f7ff fe99 	bl	800afc4 <BSP_SD_GetCardState>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d102      	bne.n	800b29e <SD_write+0x8a>
          {
            res = RES_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	75fb      	strb	r3, [r7, #23]
            break;
 800b29c:	e008      	b.n	800b2b0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b29e:	f7f7 ff93 	bl	80031c8 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d9ee      	bls.n	800b28e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200012a8 	.word	0x200012a8

0800b2c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08c      	sub	sp, #48	; 0x30
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	603a      	str	r2, [r7, #0]
 800b2ca:	71fb      	strb	r3, [r7, #7]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2d6:	4b25      	ldr	r3, [pc, #148]	; (800b36c <SD_ioctl+0xac>)
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <SD_ioctl+0x28>
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e03c      	b.n	800b362 <SD_ioctl+0xa2>

  switch (cmd)
 800b2e8:	79bb      	ldrb	r3, [r7, #6]
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d834      	bhi.n	800b358 <SD_ioctl+0x98>
 800b2ee:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <SD_ioctl+0x34>)
 800b2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f4:	0800b305 	.word	0x0800b305
 800b2f8:	0800b30d 	.word	0x0800b30d
 800b2fc:	0800b325 	.word	0x0800b325
 800b300:	0800b33f 	.word	0x0800b33f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b30a:	e028      	b.n	800b35e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b30c:	f107 030c 	add.w	r3, r7, #12
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff fe67 	bl	800afe4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b322:	e01c      	b.n	800b35e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff fe5b 	bl	800afe4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	b29a      	uxth	r2, r3
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b33c:	e00f      	b.n	800b35e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b33e:	f107 030c 	add.w	r3, r7, #12
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff fe4e 	bl	800afe4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	0a5a      	lsrs	r2, r3, #9
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b356:	e002      	b.n	800b35e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b358:	2304      	movs	r3, #4
 800b35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b362:	4618      	mov	r0, r3
 800b364:	3730      	adds	r7, #48	; 0x30
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000011 	.word	0x20000011

0800b370 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b374:	4b03      	ldr	r3, [pc, #12]	; (800b384 <BSP_SD_WriteCpltCallback+0x14>)
 800b376:	2201      	movs	r2, #1
 800b378:	601a      	str	r2, [r3, #0]
}
 800b37a:	bf00      	nop
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	200012a8 	.word	0x200012a8

0800b388 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b38c:	4b03      	ldr	r3, [pc, #12]	; (800b39c <BSP_SD_ReadCpltCallback+0x14>)
 800b38e:	2201      	movs	r2, #1
 800b390:	601a      	str	r2, [r3, #0]
}
 800b392:	bf00      	nop
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	200012ac 	.word	0x200012ac

0800b3a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b3aa:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <USER_initialize+0x24>)
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b3b0:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <USER_initialize+0x24>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000012 	.word	0x20000012

0800b3c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b3d2:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <USER_status+0x24>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <USER_status+0x24>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20000012 	.word	0x20000012

0800b3f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	603b      	str	r3, [r7, #0]
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b400:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b40e:	b480      	push	{r7}
 800b410:	b085      	sub	sp, #20
 800b412:	af00      	add	r7, sp, #0
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	603b      	str	r3, [r7, #0]
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b41e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	603a      	str	r2, [r7, #0]
 800b436:	71fb      	strb	r3, [r7, #7]
 800b438:	460b      	mov	r3, r1
 800b43a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
    return res;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	4a08      	ldr	r2, [pc, #32]	; (800b480 <disk_status+0x30>)
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	79fa      	ldrb	r2, [r7, #7]
 800b468:	4905      	ldr	r1, [pc, #20]	; (800b480 <disk_status+0x30>)
 800b46a:	440a      	add	r2, r1
 800b46c:	7b12      	ldrb	r2, [r2, #12]
 800b46e:	4610      	mov	r0, r2
 800b470:	4798      	blx	r3
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200012bc 	.word	0x200012bc

0800b484 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	4a0d      	ldr	r2, [pc, #52]	; (800b4cc <disk_initialize+0x48>)
 800b496:	5cd3      	ldrb	r3, [r2, r3]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d111      	bne.n	800b4c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	4a0b      	ldr	r2, [pc, #44]	; (800b4cc <disk_initialize+0x48>)
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	4a09      	ldr	r2, [pc, #36]	; (800b4cc <disk_initialize+0x48>)
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	79fa      	ldrb	r2, [r7, #7]
 800b4b2:	4906      	ldr	r1, [pc, #24]	; (800b4cc <disk_initialize+0x48>)
 800b4b4:	440a      	add	r2, r1
 800b4b6:	7b12      	ldrb	r2, [r2, #12]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	200012bc 	.word	0x200012bc

0800b4d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b4d0:	b590      	push	{r4, r7, lr}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	607a      	str	r2, [r7, #4]
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	4a0a      	ldr	r2, [pc, #40]	; (800b50c <disk_read+0x3c>)
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	689c      	ldr	r4, [r3, #8]
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	4a07      	ldr	r2, [pc, #28]	; (800b50c <disk_read+0x3c>)
 800b4f0:	4413      	add	r3, r2
 800b4f2:	7b18      	ldrb	r0, [r3, #12]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	68b9      	ldr	r1, [r7, #8]
 800b4fa:	47a0      	blx	r4
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
}
 800b502:	4618      	mov	r0, r3
 800b504:	371c      	adds	r7, #28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd90      	pop	{r4, r7, pc}
 800b50a:	bf00      	nop
 800b50c:	200012bc 	.word	0x200012bc

0800b510 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3301      	adds	r3, #1
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b520:	89fb      	ldrh	r3, [r7, #14]
 800b522:	021b      	lsls	r3, r3, #8
 800b524:	b21a      	sxth	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	b21b      	sxth	r3, r3
 800b52c:	4313      	orrs	r3, r2
 800b52e:	b21b      	sxth	r3, r3
 800b530:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b532:	89fb      	ldrh	r3, [r7, #14]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3303      	adds	r3, #3
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	021b      	lsls	r3, r3, #8
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	3202      	adds	r2, #2
 800b558:	7812      	ldrb	r2, [r2, #0]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	3201      	adds	r2, #1
 800b566:	7812      	ldrb	r2, [r2, #0]
 800b568:	4313      	orrs	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	021b      	lsls	r3, r3, #8
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	7812      	ldrb	r2, [r2, #0]
 800b574:	4313      	orrs	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
	return rv;
 800b578:	68fb      	ldr	r3, [r7, #12]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b586:	b480      	push	{r7}
 800b588:	b087      	sub	sp, #28
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00d      	beq.n	800b5bc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	1c53      	adds	r3, r2, #1
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	1c59      	adds	r1, r3, #1
 800b5aa:	6179      	str	r1, [r7, #20]
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1f1      	bne.n	800b5a0 <mem_cpy+0x1a>
	}
}
 800b5bc:	bf00      	nop
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b5c8:	b480      	push	{r7}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	617a      	str	r2, [r7, #20]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	b2d2      	uxtb	r2, r2
 800b5e2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	607b      	str	r3, [r7, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f3      	bne.n	800b5d8 <mem_set+0x10>
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b5fe:	b480      	push	{r7}
 800b600:	b089      	sub	sp, #36	; 0x24
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	61fb      	str	r3, [r7, #28]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	61fa      	str	r2, [r7, #28]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	4619      	mov	r1, r3
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	61ba      	str	r2, [r7, #24]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	1acb      	subs	r3, r1, r3
 800b62a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3b01      	subs	r3, #1
 800b630:	607b      	str	r3, [r7, #4]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <mem_cmp+0x40>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0eb      	beq.n	800b616 <mem_cmp+0x18>

	return r;
 800b63e:	697b      	ldr	r3, [r7, #20]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3724      	adds	r7, #36	; 0x24
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b656:	e002      	b.n	800b65e <chk_chr+0x12>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3301      	adds	r3, #1
 800b65c:	607b      	str	r3, [r7, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d005      	beq.n	800b672 <chk_chr+0x26>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	4293      	cmp	r3, r2
 800b670:	d1f2      	bne.n	800b658 <chk_chr+0xc>
	return *str;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	781b      	ldrb	r3, [r3, #0]
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	d016      	beq.n	800b6c8 <move_window+0x46>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d113      	bne.n	800b6c8 <move_window+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7858      	ldrb	r0, [r3, #1]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	f7ff ff0f 	bl	800b4d0 <disk_read>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <move_window+0x40>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
	return res;
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	3b02      	subs	r3, #2
 800b6e0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	3b02      	subs	r3, #2
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d301      	bcc.n	800b6f2 <clust2sect+0x20>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	e008      	b.n	800b704 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	895b      	ldrh	r3, [r3, #10]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	fb03 f202 	mul.w	r2, r3, r2
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b702:	4413      	add	r3, r2
}
 800b704:	4618      	mov	r0, r3
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d904      	bls.n	800b730 <get_fat+0x20>
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d302      	bcc.n	800b736 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b730:	2301      	movs	r3, #1
 800b732:	617b      	str	r3, [r7, #20]
 800b734:	e08f      	b.n	800b856 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b736:	f04f 33ff 	mov.w	r3, #4294967295
 800b73a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b03      	cmp	r3, #3
 800b742:	d062      	beq.n	800b80a <get_fat+0xfa>
 800b744:	2b03      	cmp	r3, #3
 800b746:	dc7c      	bgt.n	800b842 <get_fat+0x132>
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d002      	beq.n	800b752 <get_fat+0x42>
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d042      	beq.n	800b7d6 <get_fat+0xc6>
 800b750:	e077      	b.n	800b842 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	60fb      	str	r3, [r7, #12]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	085b      	lsrs	r3, r3, #1
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4413      	add	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	69da      	ldr	r2, [r3, #28]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	0a5b      	lsrs	r3, r3, #9
 800b768:	4413      	add	r3, r2
 800b76a:	4619      	mov	r1, r3
 800b76c:	6938      	ldr	r0, [r7, #16]
 800b76e:	f7ff ff88 	bl	800b682 <move_window>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d167      	bne.n	800b848 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	60fa      	str	r2, [r7, #12]
 800b77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	4413      	add	r3, r2
 800b786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b78a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	69da      	ldr	r2, [r3, #28]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	0a5b      	lsrs	r3, r3, #9
 800b794:	4413      	add	r3, r2
 800b796:	4619      	mov	r1, r3
 800b798:	6938      	ldr	r0, [r7, #16]
 800b79a:	f7ff ff72 	bl	800b682 <move_window>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d153      	bne.n	800b84c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <get_fat+0xbc>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	091b      	lsrs	r3, r3, #4
 800b7ca:	e002      	b.n	800b7d2 <get_fat+0xc2>
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7d2:	617b      	str	r3, [r7, #20]
			break;
 800b7d4:	e03f      	b.n	800b856 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	69da      	ldr	r2, [r3, #28]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	0a1b      	lsrs	r3, r3, #8
 800b7de:	4413      	add	r3, r2
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6938      	ldr	r0, [r7, #16]
 800b7e4:	f7ff ff4d 	bl	800b682 <move_window>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d130      	bne.n	800b850 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	005b      	lsls	r3, r3, #1
 800b7f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b7fc:	4413      	add	r3, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fe86 	bl	800b510 <ld_word>
 800b804:	4603      	mov	r3, r0
 800b806:	617b      	str	r3, [r7, #20]
			break;
 800b808:	e025      	b.n	800b856 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	69da      	ldr	r2, [r3, #28]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	09db      	lsrs	r3, r3, #7
 800b812:	4413      	add	r3, r2
 800b814:	4619      	mov	r1, r3
 800b816:	6938      	ldr	r0, [r7, #16]
 800b818:	f7ff ff33 	bl	800b682 <move_window>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d118      	bne.n	800b854 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b830:	4413      	add	r3, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff fe84 	bl	800b540 <ld_dword>
 800b838:	4603      	mov	r3, r0
 800b83a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b83e:	617b      	str	r3, [r7, #20]
			break;
 800b840:	e009      	b.n	800b856 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b842:	2301      	movs	r3, #1
 800b844:	617b      	str	r3, [r7, #20]
 800b846:	e006      	b.n	800b856 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b848:	bf00      	nop
 800b84a:	e004      	b.n	800b856 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b84c:	bf00      	nop
 800b84e:	e002      	b.n	800b856 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b850:	bf00      	nop
 800b852:	e000      	b.n	800b856 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b854:	bf00      	nop
		}
	}

	return val;
 800b856:	697b      	ldr	r3, [r7, #20]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	3304      	adds	r3, #4
 800b876:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	0a5b      	lsrs	r3, r3, #9
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	8952      	ldrh	r2, [r2, #10]
 800b880:	fbb3 f3f2 	udiv	r3, r3, r2
 800b884:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	1d1a      	adds	r2, r3, #4
 800b88a:	613a      	str	r2, [r7, #16]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <clmt_clust+0x3a>
 800b896:	2300      	movs	r3, #0
 800b898:	e010      	b.n	800b8bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d307      	bcc.n	800b8b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	617b      	str	r3, [r7, #20]
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8b0:	e7e9      	b.n	800b886 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	4413      	add	r3, r2
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8de:	d204      	bcs.n	800b8ea <dir_sdi+0x22>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	f003 031f 	and.w	r3, r3, #31
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e063      	b.n	800b9b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <dir_sdi+0x46>
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d902      	bls.n	800b90e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10c      	bne.n	800b92e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	095b      	lsrs	r3, r3, #5
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	8912      	ldrh	r2, [r2, #8]
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d301      	bcc.n	800b924 <dir_sdi+0x5c>
 800b920:	2302      	movs	r3, #2
 800b922:	e048      	b.n	800b9b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6a1a      	ldr	r2, [r3, #32]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	619a      	str	r2, [r3, #24]
 800b92c:	e029      	b.n	800b982 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	895b      	ldrh	r3, [r3, #10]
 800b932:	025b      	lsls	r3, r3, #9
 800b934:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b936:	e019      	b.n	800b96c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6979      	ldr	r1, [r7, #20]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff fee7 	bl	800b710 <get_fat>
 800b942:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94a:	d101      	bne.n	800b950 <dir_sdi+0x88>
 800b94c:	2301      	movs	r3, #1
 800b94e:	e032      	b.n	800b9b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d904      	bls.n	800b960 <dir_sdi+0x98>
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d301      	bcc.n	800b964 <dir_sdi+0x9c>
 800b960:	2302      	movs	r3, #2
 800b962:	e028      	b.n	800b9b6 <dir_sdi+0xee>
			ofs -= csz;
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	429a      	cmp	r2, r3
 800b972:	d2e1      	bcs.n	800b938 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b974:	6979      	ldr	r1, [r7, #20]
 800b976:	6938      	ldr	r0, [r7, #16]
 800b978:	f7ff feab 	bl	800b6d2 <clust2sect>
 800b97c:	4602      	mov	r2, r0
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <dir_sdi+0xcc>
 800b990:	2302      	movs	r3, #2
 800b992:	e010      	b.n	800b9b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699a      	ldr	r2, [r3, #24]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	0a5b      	lsrs	r3, r3, #9
 800b99c:	441a      	add	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ae:	441a      	add	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	617b      	str	r3, [r7, #20]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	3320      	adds	r3, #32
 800b9d4:	613b      	str	r3, [r7, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <dir_next+0x28>
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9e4:	d301      	bcc.n	800b9ea <dir_next+0x2c>
 800b9e6:	2304      	movs	r3, #4
 800b9e8:	e05a      	b.n	800baa0 <dir_next+0xe2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d148      	bne.n	800ba86 <dir_next+0xc8>
		dp->sect++;				/* Next sector */
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <dir_next+0x5e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	8912      	ldrh	r2, [r2, #8]
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d339      	bcc.n	800ba86 <dir_next+0xc8>
				dp->sect = 0; return FR_NO_FILE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	619a      	str	r2, [r3, #24]
 800ba18:	2304      	movs	r3, #4
 800ba1a:	e041      	b.n	800baa0 <dir_next+0xe2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	0a5b      	lsrs	r3, r3, #9
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	8952      	ldrh	r2, [r2, #10]
 800ba24:	3a01      	subs	r2, #1
 800ba26:	4013      	ands	r3, r2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d12c      	bne.n	800ba86 <dir_next+0xc8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f7ff fe6b 	bl	800b710 <get_fat>
 800ba3a:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d801      	bhi.n	800ba46 <dir_next+0x88>
 800ba42:	2302      	movs	r3, #2
 800ba44:	e02c      	b.n	800baa0 <dir_next+0xe2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4c:	d101      	bne.n	800ba52 <dir_next+0x94>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e026      	b.n	800baa0 <dir_next+0xe2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d30a      	bcc.n	800ba72 <dir_next+0xb4>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <dir_next+0xaa>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	619a      	str	r2, [r3, #24]
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	619a      	str	r2, [r3, #24]
 800ba6e:	2304      	movs	r3, #4
 800ba70:	e016      	b.n	800baa0 <dir_next+0xe2>
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 800ba78:	68f9      	ldr	r1, [r7, #12]
 800ba7a:	6978      	ldr	r0, [r7, #20]
 800ba7c:	f7ff fe29 	bl	800b6d2 <clust2sect>
 800ba80:	4602      	mov	r2, r0
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba98:	441a      	add	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	331a      	adds	r3, #26
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fd2a 	bl	800b510 <ld_word>
 800babc:	4603      	mov	r3, r0
 800babe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	d109      	bne.n	800badc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	3314      	adds	r3, #20
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fd1f 	bl	800b510 <ld_word>
 800bad2:	4603      	mov	r3, r0
 800bad4:	041b      	lsls	r3, r3, #16
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800badc:	68fb      	ldr	r3, [r7, #12]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bae8:	b590      	push	{r4, r7, lr}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	331a      	adds	r3, #26
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fd0a 	bl	800b510 <ld_word>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <cmp_lfn+0x1e>
 800bb02:	2300      	movs	r3, #0
 800bb04:	e059      	b.n	800bbba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb0e:	1e5a      	subs	r2, r3, #1
 800bb10:	4613      	mov	r3, r2
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	81fb      	strh	r3, [r7, #14]
 800bb20:	2300      	movs	r3, #0
 800bb22:	613b      	str	r3, [r7, #16]
 800bb24:	e033      	b.n	800bb8e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb26:	4a27      	ldr	r2, [pc, #156]	; (800bbc4 <cmp_lfn+0xdc>)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	4413      	add	r3, r2
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff fceb 	bl	800b510 <ld_word>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bb3e:	89fb      	ldrh	r3, [r7, #14]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d01a      	beq.n	800bb7a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2b3f      	cmp	r3, #63	; 0x3f
 800bb48:	d812      	bhi.n	800bb70 <cmp_lfn+0x88>
 800bb4a:	89bb      	ldrh	r3, [r7, #12]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 f9f1 	bl	800cf34 <ff_wtoupper>
 800bb52:	4603      	mov	r3, r0
 800bb54:	461c      	mov	r4, r3
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	617a      	str	r2, [r7, #20]
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f9e5 	bl	800cf34 <ff_wtoupper>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	429c      	cmp	r4, r3
 800bb6e:	d001      	beq.n	800bb74 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bb70:	2300      	movs	r3, #0
 800bb72:	e022      	b.n	800bbba <cmp_lfn+0xd2>
			}
			wc = uc;
 800bb74:	89bb      	ldrh	r3, [r7, #12]
 800bb76:	81fb      	strh	r3, [r7, #14]
 800bb78:	e006      	b.n	800bb88 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb7a:	89bb      	ldrh	r3, [r7, #12]
 800bb7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d001      	beq.n	800bb88 <cmp_lfn+0xa0>
 800bb84:	2300      	movs	r3, #0
 800bb86:	e018      	b.n	800bbba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	2b0c      	cmp	r3, #12
 800bb92:	d9c8      	bls.n	800bb26 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <cmp_lfn+0xd0>
 800bba0:	89fb      	ldrh	r3, [r7, #14]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d008      	beq.n	800bbb8 <cmp_lfn+0xd0>
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4413      	add	r3, r2
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <cmp_lfn+0xd0>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e000      	b.n	800bbba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bbb8:	2301      	movs	r3, #1
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd90      	pop	{r4, r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	08019aa0 	.word	0x08019aa0

0800bbc8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bbd4:	230b      	movs	r3, #11
 800bbd6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	0852      	lsrs	r2, r2, #1
 800bbde:	01db      	lsls	r3, r3, #7
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	1c59      	adds	r1, r3, #1
 800bbe8:	6079      	str	r1, [r7, #4]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	4413      	add	r3, r2
 800bbee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	60bb      	str	r3, [r7, #8]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1ed      	bne.n	800bbd8 <sum_sfn+0x10>
	return sum;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b086      	sub	sp, #24
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc18:	2100      	movs	r1, #0
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fe54 	bl	800b8c8 <dir_sdi>
 800bc20:	4603      	mov	r3, r0
 800bc22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <dir_find+0x24>
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	e0a9      	b.n	800bd82 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc2e:	23ff      	movs	r3, #255	; 0xff
 800bc30:	753b      	strb	r3, [r7, #20]
 800bc32:	7d3b      	ldrb	r3, [r7, #20]
 800bc34:	757b      	strb	r3, [r7, #21]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6938      	ldr	r0, [r7, #16]
 800bc46:	f7ff fd1c 	bl	800b682 <move_window>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f040 8090 	bne.w	800bd76 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc5e:	7dbb      	ldrb	r3, [r7, #22]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d102      	bne.n	800bc6a <dir_find+0x60>
 800bc64:	2304      	movs	r3, #4
 800bc66:	75fb      	strb	r3, [r7, #23]
 800bc68:	e08a      	b.n	800bd80 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	330b      	adds	r3, #11
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc76:	73fb      	strb	r3, [r7, #15]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7bfa      	ldrb	r2, [r7, #15]
 800bc7c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bc7e:	7dbb      	ldrb	r3, [r7, #22]
 800bc80:	2be5      	cmp	r3, #229	; 0xe5
 800bc82:	d007      	beq.n	800bc94 <dir_find+0x8a>
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d009      	beq.n	800bca2 <dir_find+0x98>
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	2b0f      	cmp	r3, #15
 800bc92:	d006      	beq.n	800bca2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc94:	23ff      	movs	r3, #255	; 0xff
 800bc96:	757b      	strb	r3, [r7, #21]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9e:	62da      	str	r2, [r3, #44]	; 0x2c
 800bca0:	e05e      	b.n	800bd60 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	2b0f      	cmp	r3, #15
 800bca6:	d136      	bne.n	800bd16 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d154      	bne.n	800bd60 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bcb6:	7dbb      	ldrb	r3, [r7, #22]
 800bcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00d      	beq.n	800bcdc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	7b5b      	ldrb	r3, [r3, #13]
 800bcc6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
 800bcca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcce:	75bb      	strb	r3, [r7, #22]
 800bcd0:	7dbb      	ldrb	r3, [r7, #22]
 800bcd2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691a      	ldr	r2, [r3, #16]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bcdc:	7dba      	ldrb	r2, [r7, #22]
 800bcde:	7d7b      	ldrb	r3, [r7, #21]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d115      	bne.n	800bd10 <dir_find+0x106>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	69db      	ldr	r3, [r3, #28]
 800bce8:	330d      	adds	r3, #13
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	7d3a      	ldrb	r2, [r7, #20]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d10e      	bne.n	800bd10 <dir_find+0x106>
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	f7ff fef3 	bl	800bae8 <cmp_lfn>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <dir_find+0x106>
 800bd08:	7d7b      	ldrb	r3, [r7, #21]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	e000      	b.n	800bd12 <dir_find+0x108>
 800bd10:	23ff      	movs	r3, #255	; 0xff
 800bd12:	757b      	strb	r3, [r7, #21]
 800bd14:	e024      	b.n	800bd60 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd16:	7d7b      	ldrb	r3, [r7, #21]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d109      	bne.n	800bd30 <dir_find+0x126>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff ff51 	bl	800bbc8 <sum_sfn>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	7d3b      	ldrb	r3, [r7, #20]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d024      	beq.n	800bd7a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10a      	bne.n	800bd54 <dir_find+0x14a>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	69d8      	ldr	r0, [r3, #28]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	3320      	adds	r3, #32
 800bd46:	220b      	movs	r2, #11
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f7ff fc58 	bl	800b5fe <mem_cmp>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d014      	beq.n	800bd7e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd54:	23ff      	movs	r3, #255	; 0xff
 800bd56:	757b      	strb	r3, [r7, #21]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd60:	2100      	movs	r1, #0
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff fe2b 	bl	800b9be <dir_next>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f43f af65 	beq.w	800bc3e <dir_find+0x34>
 800bd74:	e004      	b.n	800bd80 <dir_find+0x176>
		if (res != FR_OK) break;
 800bd76:	bf00      	nop
 800bd78:	e002      	b.n	800bd80 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd7e:	bf00      	nop

	return res;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08a      	sub	sp, #40	; 0x28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	2300      	movs	r3, #0
 800bda6:	617b      	str	r3, [r7, #20]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	61ba      	str	r2, [r7, #24]
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bdba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdbc:	2b1f      	cmp	r3, #31
 800bdbe:	d940      	bls.n	800be42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bdc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc2:	2b2f      	cmp	r3, #47	; 0x2f
 800bdc4:	d006      	beq.n	800bdd4 <create_name+0x48>
 800bdc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdca:	d110      	bne.n	800bdee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdcc:	e002      	b.n	800bdd4 <create_name+0x48>
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	4413      	add	r3, r2
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b2f      	cmp	r3, #47	; 0x2f
 800bdde:	d0f6      	beq.n	800bdce <create_name+0x42>
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	4413      	add	r3, r2
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdea:	d0f0      	beq.n	800bdce <create_name+0x42>
			break;
 800bdec:	e02a      	b.n	800be44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	2b3f      	cmp	r3, #63	; 0x3f
 800bdf2:	d901      	bls.n	800bdf8 <create_name+0x6c>
 800bdf4:	2306      	movs	r3, #6
 800bdf6:	e17d      	b.n	800c0f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bdf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bdfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be00:	2101      	movs	r1, #1
 800be02:	4618      	mov	r0, r3
 800be04:	f001 f85a 	bl	800cebc <ff_convert>
 800be08:	4603      	mov	r3, r0
 800be0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800be0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <create_name+0x8a>
 800be12:	2306      	movs	r3, #6
 800be14:	e16e      	b.n	800c0f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800be16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be18:	2b7f      	cmp	r3, #127	; 0x7f
 800be1a:	d809      	bhi.n	800be30 <create_name+0xa4>
 800be1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be1e:	4619      	mov	r1, r3
 800be20:	488d      	ldr	r0, [pc, #564]	; (800c058 <create_name+0x2cc>)
 800be22:	f7ff fc13 	bl	800b64c <chk_chr>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <create_name+0xa4>
 800be2c:	2306      	movs	r3, #6
 800be2e:	e161      	b.n	800c0f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	617a      	str	r2, [r7, #20]
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800be40:	e7b4      	b.n	800bdac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800be42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	441a      	add	r2, r3
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be50:	2b1f      	cmp	r3, #31
 800be52:	d801      	bhi.n	800be58 <create_name+0xcc>
 800be54:	2304      	movs	r3, #4
 800be56:	e000      	b.n	800be5a <create_name+0xce>
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be5e:	e011      	b.n	800be84 <create_name+0xf8>
		w = lfn[di - 1];
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be66:	3b01      	subs	r3, #1
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800be72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be74:	2b20      	cmp	r3, #32
 800be76:	d002      	beq.n	800be7e <create_name+0xf2>
 800be78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be7a:	2b2e      	cmp	r3, #46	; 0x2e
 800be7c:	d106      	bne.n	800be8c <create_name+0x100>
		di--;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	3b01      	subs	r3, #1
 800be82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1ea      	bne.n	800be60 <create_name+0xd4>
 800be8a:	e000      	b.n	800be8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800be8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	4413      	add	r3, r2
 800be96:	2200      	movs	r2, #0
 800be98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <create_name+0x118>
 800bea0:	2306      	movs	r3, #6
 800bea2:	e127      	b.n	800c0f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3320      	adds	r3, #32
 800bea8:	220b      	movs	r2, #11
 800beaa:	2120      	movs	r1, #32
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff fb8b 	bl	800b5c8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800beb2:	2300      	movs	r3, #0
 800beb4:	61bb      	str	r3, [r7, #24]
 800beb6:	e002      	b.n	800bebe <create_name+0x132>
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	3301      	adds	r3, #1
 800bebc:	61bb      	str	r3, [r7, #24]
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	4413      	add	r3, r2
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	2b20      	cmp	r3, #32
 800beca:	d0f5      	beq.n	800beb8 <create_name+0x12c>
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	2b2e      	cmp	r3, #46	; 0x2e
 800bed8:	d0ee      	beq.n	800beb8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <create_name+0x168>
 800bee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bee4:	f043 0303 	orr.w	r3, r3, #3
 800bee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800beec:	e002      	b.n	800bef4 <create_name+0x168>
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d009      	beq.n	800bf0e <create_name+0x182>
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf00:	3b01      	subs	r3, #1
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf0c:	d1ef      	bne.n	800beee <create_name+0x162>

	i = b = 0; ni = 8;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf14:	2300      	movs	r3, #0
 800bf16:	623b      	str	r3, [r7, #32]
 800bf18:	2308      	movs	r3, #8
 800bf1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	61ba      	str	r2, [r7, #24]
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bf2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 8090 	beq.w	800c054 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bf34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	d006      	beq.n	800bf48 <create_name+0x1bc>
 800bf3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d10a      	bne.n	800bf56 <create_name+0x1ca>
 800bf40:	69ba      	ldr	r2, [r7, #24]
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d006      	beq.n	800bf56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bf48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf4c:	f043 0303 	orr.w	r3, r3, #3
 800bf50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf54:	e07d      	b.n	800c052 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bf56:	6a3a      	ldr	r2, [r7, #32]
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d203      	bcs.n	800bf66 <create_name+0x1da>
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d123      	bne.n	800bfae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	2b0b      	cmp	r3, #11
 800bf6a:	d106      	bne.n	800bf7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bf6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf70:	f043 0303 	orr.w	r3, r3, #3
 800bf74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf78:	e075      	b.n	800c066 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d005      	beq.n	800bf8e <create_name+0x202>
 800bf82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf86:	f043 0303 	orr.w	r3, r3, #3
 800bf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d866      	bhi.n	800c064 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	2308      	movs	r3, #8
 800bf9c:	623b      	str	r3, [r7, #32]
 800bf9e:	230b      	movs	r3, #11
 800bfa0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bfa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfac:	e051      	b.n	800c052 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bfae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb0:	2b7f      	cmp	r3, #127	; 0x7f
 800bfb2:	d914      	bls.n	800bfde <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bfb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 ff7f 	bl	800cebc <ff_convert>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bfc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <create_name+0x246>
 800bfc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfca:	3b80      	subs	r3, #128	; 0x80
 800bfcc:	4a23      	ldr	r2, [pc, #140]	; (800c05c <create_name+0x2d0>)
 800bfce:	5cd3      	ldrb	r3, [r2, r3]
 800bfd0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bfd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfd6:	f043 0302 	orr.w	r3, r3, #2
 800bfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bfde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d007      	beq.n	800bff4 <create_name+0x268>
 800bfe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	481d      	ldr	r0, [pc, #116]	; (800c060 <create_name+0x2d4>)
 800bfea:	f7ff fb2f 	bl	800b64c <chk_chr>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d008      	beq.n	800c006 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bff4:	235f      	movs	r3, #95	; 0x5f
 800bff6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bffc:	f043 0303 	orr.w	r3, r3, #3
 800c000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c004:	e01b      	b.n	800c03e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c008:	2b40      	cmp	r3, #64	; 0x40
 800c00a:	d909      	bls.n	800c020 <create_name+0x294>
 800c00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c00e:	2b5a      	cmp	r3, #90	; 0x5a
 800c010:	d806      	bhi.n	800c020 <create_name+0x294>
					b |= 2;
 800c012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c016:	f043 0302 	orr.w	r3, r3, #2
 800c01a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c01e:	e00e      	b.n	800c03e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c022:	2b60      	cmp	r3, #96	; 0x60
 800c024:	d90b      	bls.n	800c03e <create_name+0x2b2>
 800c026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c028:	2b7a      	cmp	r3, #122	; 0x7a
 800c02a:	d808      	bhi.n	800c03e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c02c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c030:	f043 0301 	orr.w	r3, r3, #1
 800c034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c03a:	3b20      	subs	r3, #32
 800c03c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	623a      	str	r2, [r7, #32]
 800c044:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c046:	b2d1      	uxtb	r1, r2
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	4413      	add	r3, r2
 800c04c:	460a      	mov	r2, r1
 800c04e:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 800c052:	e763      	b.n	800bf1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c054:	bf00      	nop
 800c056:	e006      	b.n	800c066 <create_name+0x2da>
 800c058:	08019304 	.word	0x08019304
 800c05c:	08019a20 	.word	0x08019a20
 800c060:	08019310 	.word	0x08019310
			if (si > di) break;			/* No extension */
 800c064:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c06c:	2be5      	cmp	r3, #229	; 0xe5
 800c06e:	d103      	bne.n	800c078 <create_name+0x2ec>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2205      	movs	r2, #5
 800c074:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	2b08      	cmp	r3, #8
 800c07c:	d104      	bne.n	800c088 <create_name+0x2fc>
 800c07e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c08c:	f003 030c 	and.w	r3, r3, #12
 800c090:	2b0c      	cmp	r3, #12
 800c092:	d005      	beq.n	800c0a0 <create_name+0x314>
 800c094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d105      	bne.n	800c0ac <create_name+0x320>
 800c0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a4:	f043 0302 	orr.w	r3, r3, #2
 800c0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0b0:	f003 0302 	and.w	r3, r3, #2
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d117      	bne.n	800c0e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d105      	bne.n	800c0d0 <create_name+0x344>
 800c0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c8:	f043 0310 	orr.w	r3, r3, #16
 800c0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c0d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0d4:	f003 030c 	and.w	r3, r3, #12
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d105      	bne.n	800c0e8 <create_name+0x35c>
 800c0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e0:	f043 0308 	orr.w	r3, r3, #8
 800c0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c0ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 800c0f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3728      	adds	r7, #40	; 0x28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c110:	e002      	b.n	800c118 <follow_path+0x1c>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	3301      	adds	r3, #1
 800c116:	603b      	str	r3, [r7, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b2f      	cmp	r3, #47	; 0x2f
 800c11e:	d0f8      	beq.n	800c112 <follow_path+0x16>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b5c      	cmp	r3, #92	; 0x5c
 800c126:	d0f4      	beq.n	800c112 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	2200      	movs	r2, #0
 800c12c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	2b1f      	cmp	r3, #31
 800c134:	d80a      	bhi.n	800c14c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2280      	movs	r2, #128	; 0x80
 800c13a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800c13e:	2100      	movs	r1, #0
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff fbc1 	bl	800b8c8 <dir_sdi>
 800c146:	4603      	mov	r3, r0
 800c148:	75fb      	strb	r3, [r7, #23]
 800c14a:	e043      	b.n	800c1d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c14c:	463b      	mov	r3, r7
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff fe1b 	bl	800bd8c <create_name>
 800c156:	4603      	mov	r3, r0
 800c158:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d134      	bne.n	800c1ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff fd52 	bl	800bc0a <dir_find>
 800c166:	4603      	mov	r3, r0
 800c168:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c170:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00a      	beq.n	800c18e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	d127      	bne.n	800c1ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c17e:	7afb      	ldrb	r3, [r7, #11]
 800c180:	f003 0304 	and.w	r3, r3, #4
 800c184:	2b00      	cmp	r3, #0
 800c186:	d122      	bne.n	800c1ce <follow_path+0xd2>
 800c188:	2305      	movs	r3, #5
 800c18a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c18c:	e01f      	b.n	800c1ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c18e:	7afb      	ldrb	r3, [r7, #11]
 800c190:	f003 0304 	and.w	r3, r3, #4
 800c194:	2b00      	cmp	r3, #0
 800c196:	d11c      	bne.n	800c1d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	799b      	ldrb	r3, [r3, #6]
 800c19c:	f003 0310 	and.w	r3, r3, #16
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c1a4:	2305      	movs	r3, #5
 800c1a6:	75fb      	strb	r3, [r7, #23]
 800c1a8:	e014      	b.n	800c1d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b8:	4413      	add	r3, r2
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f7ff fc73 	bl	800baa8 <ld_clust>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1c8:	e7c0      	b.n	800c14c <follow_path+0x50>
			if (res != FR_OK) break;
 800c1ca:	bf00      	nop
 800c1cc:	e002      	b.n	800c1d4 <follow_path+0xd8>
				break;
 800c1ce:	bf00      	nop
 800c1d0:	e000      	b.n	800c1d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1d2:	bf00      	nop
			}
		}
	}

	return res;
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b087      	sub	sp, #28
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d031      	beq.n	800c258 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	617b      	str	r3, [r7, #20]
 800c1fa:	e002      	b.n	800c202 <get_ldnumber+0x24>
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	3301      	adds	r3, #1
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b1f      	cmp	r3, #31
 800c208:	d903      	bls.n	800c212 <get_ldnumber+0x34>
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b3a      	cmp	r3, #58	; 0x3a
 800c210:	d1f4      	bne.n	800c1fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b3a      	cmp	r3, #58	; 0x3a
 800c218:	d11c      	bne.n	800c254 <get_ldnumber+0x76>
			tp = *path;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	60fa      	str	r2, [r7, #12]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	3b30      	subs	r3, #48	; 0x30
 800c22a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b09      	cmp	r3, #9
 800c230:	d80e      	bhi.n	800c250 <get_ldnumber+0x72>
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	429a      	cmp	r2, r3
 800c238:	d10a      	bne.n	800c250 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d807      	bhi.n	800c250 <get_ldnumber+0x72>
					vol = (int)i;
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	3301      	adds	r3, #1
 800c248:	617b      	str	r3, [r7, #20]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	e002      	b.n	800c25a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c254:	2300      	movs	r3, #0
 800c256:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c258:	693b      	ldr	r3, [r7, #16]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
	...

0800c268 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	70da      	strb	r2, [r3, #3]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f04f 32ff 	mov.w	r2, #4294967295
 800c27e:	629a      	str	r2, [r3, #40]	; 0x28
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff f9fd 	bl	800b682 <move_window>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <check_fs+0x2a>
 800c28e:	2304      	movs	r3, #4
 800c290:	e038      	b.n	800c304 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	332c      	adds	r3, #44	; 0x2c
 800c296:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff f938 	bl	800b510 <ld_word>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d001      	beq.n	800c2b0 <check_fs+0x48>
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e029      	b.n	800c304 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2b6:	2be9      	cmp	r3, #233	; 0xe9
 800c2b8:	d009      	beq.n	800c2ce <check_fs+0x66>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2c0:	2beb      	cmp	r3, #235	; 0xeb
 800c2c2:	d11e      	bne.n	800c302 <check_fs+0x9a>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c2ca:	2b90      	cmp	r3, #144	; 0x90
 800c2cc:	d119      	bne.n	800c302 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	332c      	adds	r3, #44	; 0x2c
 800c2d2:	3336      	adds	r3, #54	; 0x36
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff f933 	bl	800b540 <ld_dword>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c2e0:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <check_fs+0xa4>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d101      	bne.n	800c2ea <check_fs+0x82>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e00c      	b.n	800c304 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	332c      	adds	r3, #44	; 0x2c
 800c2ee:	3352      	adds	r3, #82	; 0x52
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff f925 	bl	800b540 <ld_dword>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	4a05      	ldr	r2, [pc, #20]	; (800c310 <check_fs+0xa8>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d101      	bne.n	800c302 <check_fs+0x9a>
 800c2fe:	2300      	movs	r3, #0
 800c300:	e000      	b.n	800c304 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c302:	2302      	movs	r3, #2
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	00544146 	.word	0x00544146
 800c310:	33544146 	.word	0x33544146

0800c314 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b096      	sub	sp, #88	; 0x58
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	f7ff ff58 	bl	800c1de <get_ldnumber>
 800c32e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c332:	2b00      	cmp	r3, #0
 800c334:	da01      	bge.n	800c33a <find_volume+0x26>
 800c336:	230b      	movs	r3, #11
 800c338:	e1ba      	b.n	800c6b0 <find_volume+0x39c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c33a:	4a9c      	ldr	r2, [pc, #624]	; (800c5ac <find_volume+0x298>)
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c342:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <find_volume+0x3a>
 800c34a:	230c      	movs	r3, #12
 800c34c:	e1b0      	b.n	800c6b0 <find_volume+0x39c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c352:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	f023 0301 	bic.w	r3, r3, #1
 800c35a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00f      	beq.n	800c384 <find_volume+0x70>
		stat = disk_status(fs->drv);
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	785b      	ldrb	r3, [r3, #1]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff f871 	bl	800b450 <disk_status>
 800c36e:	4603      	mov	r3, r0
 800c370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
 800c380:	2300      	movs	r3, #0
 800c382:	e195      	b.n	800c6b0 <find_volume+0x39c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	2200      	movs	r2, #0
 800c388:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff f874 	bl	800b484 <disk_initialize>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c3a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <find_volume+0x9e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	e17e      	b.n	800c6b0 <find_volume+0x39c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c3b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c3ba:	f7ff ff55 	bl	800c268 <check_fs>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d149      	bne.n	800c460 <find_volume+0x14c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c3d0:	e01e      	b.n	800c410 <find_volume+0xfc>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c3e0:	4413      	add	r3, r2
 800c3e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d006      	beq.n	800c3fc <find_volume+0xe8>
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff f8a4 	bl	800b540 <ld_dword>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	e000      	b.n	800c3fe <find_volume+0xea>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	3358      	adds	r3, #88	; 0x58
 800c404:	443b      	add	r3, r7
 800c406:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c40c:	3301      	adds	r3, #1
 800c40e:	643b      	str	r3, [r7, #64]	; 0x40
 800c410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c412:	2b03      	cmp	r3, #3
 800c414:	d9dd      	bls.n	800c3d2 <find_volume+0xbe>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c416:	2300      	movs	r3, #0
 800c418:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <find_volume+0x112>
 800c420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c422:	3b01      	subs	r3, #1
 800c424:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	3358      	adds	r3, #88	; 0x58
 800c42c:	443b      	add	r3, r7
 800c42e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c432:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c436:	2b00      	cmp	r3, #0
 800c438:	d005      	beq.n	800c446 <find_volume+0x132>
 800c43a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c43c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c43e:	f7ff ff13 	bl	800c268 <check_fs>
 800c442:	4603      	mov	r3, r0
 800c444:	e000      	b.n	800c448 <find_volume+0x134>
 800c446:	2303      	movs	r3, #3
 800c448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c44c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c450:	2b01      	cmp	r3, #1
 800c452:	d905      	bls.n	800c460 <find_volume+0x14c>
 800c454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c456:	3301      	adds	r3, #1
 800c458:	643b      	str	r3, [r7, #64]	; 0x40
 800c45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d9e2      	bls.n	800c426 <find_volume+0x112>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c464:	2b04      	cmp	r3, #4
 800c466:	d101      	bne.n	800c46c <find_volume+0x158>
 800c468:	2301      	movs	r3, #1
 800c46a:	e121      	b.n	800c6b0 <find_volume+0x39c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c46c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c470:	2b01      	cmp	r3, #1
 800c472:	d901      	bls.n	800c478 <find_volume+0x164>
 800c474:	230d      	movs	r3, #13
 800c476:	e11b      	b.n	800c6b0 <find_volume+0x39c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	332c      	adds	r3, #44	; 0x2c
 800c47c:	330b      	adds	r3, #11
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff f846 	bl	800b510 <ld_word>
 800c484:	4603      	mov	r3, r0
 800c486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c48a:	d001      	beq.n	800c490 <find_volume+0x17c>
 800c48c:	230d      	movs	r3, #13
 800c48e:	e10f      	b.n	800c6b0 <find_volume+0x39c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	332c      	adds	r3, #44	; 0x2c
 800c494:	3316      	adds	r3, #22
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff f83a 	bl	800b510 <ld_word>
 800c49c:	4603      	mov	r3, r0
 800c49e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d106      	bne.n	800c4b4 <find_volume+0x1a0>
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	332c      	adds	r3, #44	; 0x2c
 800c4aa:	3324      	adds	r3, #36	; 0x24
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7ff f847 	bl	800b540 <ld_dword>
 800c4b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4b8:	615a      	str	r2, [r3, #20]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	789b      	ldrb	r3, [r3, #2]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d005      	beq.n	800c4d8 <find_volume+0x1c4>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	789b      	ldrb	r3, [r3, #2]
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d001      	beq.n	800c4d8 <find_volume+0x1c4>
 800c4d4:	230d      	movs	r3, #13
 800c4d6:	e0eb      	b.n	800c6b0 <find_volume+0x39c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	789b      	ldrb	r3, [r3, #2]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e0:	fb02 f303 	mul.w	r3, r2, r3
 800c4e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	895b      	ldrh	r3, [r3, #10]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d008      	beq.n	800c50c <find_volume+0x1f8>
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	895b      	ldrh	r3, [r3, #10]
 800c4fe:	461a      	mov	r2, r3
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	895b      	ldrh	r3, [r3, #10]
 800c504:	3b01      	subs	r3, #1
 800c506:	4013      	ands	r3, r2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <find_volume+0x1fc>
 800c50c:	230d      	movs	r3, #13
 800c50e:	e0cf      	b.n	800c6b0 <find_volume+0x39c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	332c      	adds	r3, #44	; 0x2c
 800c514:	3311      	adds	r3, #17
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fffa 	bl	800b510 <ld_word>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	891b      	ldrh	r3, [r3, #8]
 800c528:	f003 030f 	and.w	r3, r3, #15
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <find_volume+0x222>
 800c532:	230d      	movs	r3, #13
 800c534:	e0bc      	b.n	800c6b0 <find_volume+0x39c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	332c      	adds	r3, #44	; 0x2c
 800c53a:	3313      	adds	r3, #19
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe ffe7 	bl	800b510 <ld_word>
 800c542:	4603      	mov	r3, r0
 800c544:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <find_volume+0x246>
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	332c      	adds	r3, #44	; 0x2c
 800c550:	3320      	adds	r3, #32
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fff4 	bl	800b540 <ld_dword>
 800c558:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	332c      	adds	r3, #44	; 0x2c
 800c55e:	330e      	adds	r3, #14
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe ffd5 	bl	800b510 <ld_word>
 800c566:	4603      	mov	r3, r0
 800c568:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c56a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <find_volume+0x260>
 800c570:	230d      	movs	r3, #13
 800c572:	e09d      	b.n	800c6b0 <find_volume+0x39c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c574:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c578:	4413      	add	r3, r2
 800c57a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c57c:	8912      	ldrh	r2, [r2, #8]
 800c57e:	0912      	lsrs	r2, r2, #4
 800c580:	b292      	uxth	r2, r2
 800c582:	4413      	add	r3, r2
 800c584:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d201      	bcs.n	800c592 <find_volume+0x27e>
 800c58e:	230d      	movs	r3, #13
 800c590:	e08e      	b.n	800c6b0 <find_volume+0x39c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c59a:	8952      	ldrh	r2, [r2, #10]
 800c59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d103      	bne.n	800c5b0 <find_volume+0x29c>
 800c5a8:	230d      	movs	r3, #13
 800c5aa:	e081      	b.n	800c6b0 <find_volume+0x39c>
 800c5ac:	200012b0 	.word	0x200012b0
		fmt = FS_FAT32;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d802      	bhi.n	800c5c6 <find_volume+0x2b2>
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d802      	bhi.n	800c5d6 <find_volume+0x2c2>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	1c9a      	adds	r2, r3, #2
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	611a      	str	r2, [r3, #16]
		fs->volbase = bsect;							/* Volume start sector */
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5e2:	619a      	str	r2, [r3, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c5e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e8:	441a      	add	r2, r3
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	61da      	str	r2, [r3, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800c5ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	441a      	add	r2, r3
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (fmt == FS_FAT32) {
 800c5f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d11e      	bne.n	800c63e <find_volume+0x32a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	332c      	adds	r3, #44	; 0x2c
 800c604:	332a      	adds	r3, #42	; 0x2a
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe ff82 	bl	800b510 <ld_word>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <find_volume+0x302>
 800c612:	230d      	movs	r3, #13
 800c614:	e04c      	b.n	800c6b0 <find_volume+0x39c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c618:	891b      	ldrh	r3, [r3, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <find_volume+0x30e>
 800c61e:	230d      	movs	r3, #13
 800c620:	e046      	b.n	800c6b0 <find_volume+0x39c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	332c      	adds	r3, #44	; 0x2c
 800c626:	332c      	adds	r3, #44	; 0x2c
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fe ff89 	bl	800b540 <ld_dword>
 800c62e:	4602      	mov	r2, r0
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	621a      	str	r2, [r3, #32]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	647b      	str	r3, [r7, #68]	; 0x44
 800c63c:	e01f      	b.n	800c67e <find_volume+0x36a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	891b      	ldrh	r3, [r3, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <find_volume+0x336>
 800c646:	230d      	movs	r3, #13
 800c648:	e032      	b.n	800c6b0 <find_volume+0x39c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	69da      	ldr	r2, [r3, #28]
 800c64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c650:	441a      	add	r2, r3
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	621a      	str	r2, [r3, #32]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c656:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d103      	bne.n	800c666 <find_volume+0x352>
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	005b      	lsls	r3, r3, #1
 800c664:	e00a      	b.n	800c67c <find_volume+0x368>
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	691a      	ldr	r2, [r3, #16]
 800c66a:	4613      	mov	r3, r2
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	4413      	add	r3, r2
 800c670:	085a      	lsrs	r2, r3, #1
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c67c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	695a      	ldr	r2, [r3, #20]
 800c682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c684:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c688:	0a5b      	lsrs	r3, r3, #9
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d201      	bcs.n	800c692 <find_volume+0x37e>
 800c68e:	230d      	movs	r3, #13
 800c690:	e00e      	b.n	800c6b0 <find_volume+0x39c>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c698:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c69a:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <find_volume+0x3a4>)
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	4b05      	ldr	r3, [pc, #20]	; (800c6b8 <find_volume+0x3a4>)
 800c6a4:	801a      	strh	r2, [r3, #0]
 800c6a6:	4b04      	ldr	r3, [pc, #16]	; (800c6b8 <find_volume+0x3a4>)
 800c6a8:	881a      	ldrh	r2, [r3, #0]
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ac:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3758      	adds	r7, #88	; 0x58
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	200012b8 	.word	0x200012b8

0800c6bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c6c6:	2309      	movs	r3, #9
 800c6c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01c      	beq.n	800c70a <validate+0x4e>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d018      	beq.n	800c70a <validate+0x4e>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d013      	beq.n	800c70a <validate+0x4e>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	889a      	ldrh	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	88db      	ldrh	r3, [r3, #6]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d10c      	bne.n	800c70a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	785b      	ldrb	r3, [r3, #1]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fe feaa 	bl	800b450 <disk_status>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d101      	bne.n	800c70a <validate+0x4e>
			res = FR_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d102      	bne.n	800c716 <validate+0x5a>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	e000      	b.n	800c718 <validate+0x5c>
 800c716:	2300      	movs	r3, #0
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	6013      	str	r3, [r2, #0]
	return res;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c73a:	f107 0310 	add.w	r3, r7, #16
 800c73e:	4618      	mov	r0, r3
 800c740:	f7ff fd4d 	bl	800c1de <get_ldnumber>
 800c744:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	da01      	bge.n	800c750 <f_mount+0x28>
 800c74c:	230b      	movs	r3, #11
 800c74e:	e028      	b.n	800c7a2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c750:	4a16      	ldr	r2, [pc, #88]	; (800c7ac <f_mount+0x84>)
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c758:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	2200      	movs	r2, #0
 800c764:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	490d      	ldr	r1, [pc, #52]	; (800c7ac <f_mount+0x84>)
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d002      	beq.n	800c788 <f_mount+0x60>
 800c782:	79fb      	ldrb	r3, [r7, #7]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d001      	beq.n	800c78c <f_mount+0x64>
 800c788:	2300      	movs	r3, #0
 800c78a:	e00a      	b.n	800c7a2 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c78c:	f107 010c 	add.w	r1, r7, #12
 800c790:	f107 0308 	add.w	r3, r7, #8
 800c794:	2200      	movs	r2, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff fdbc 	bl	800c314 <find_volume>
 800c79c:	4603      	mov	r3, r0
 800c79e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3720      	adds	r7, #32
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200012b0 	.word	0x200012b0

0800c7b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b0b4      	sub	sp, #208	; 0xd0
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <f_open+0x18>
 800c7c4:	2309      	movs	r3, #9
 800c7c6:	e074      	b.n	800c8b2 <f_open+0x102>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c7c8:	79fb      	ldrb	r3, [r7, #7]
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c7d0:	79fa      	ldrb	r2, [r7, #7]
 800c7d2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800c7d6:	f107 0308 	add.w	r3, r7, #8
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff fd9a 	bl	800c314 <find_volume>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if (res == FR_OK) {
 800c7e6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d158      	bne.n	800c8a0 <f_open+0xf0>
		dj.obj.fs = fs;
 800c7ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		INIT_NAMBUF(fs);
 800c7f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7fa:	f107 0214 	add.w	r2, r7, #20
 800c7fe:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fc77 	bl	800c0fc <follow_path>
 800c80e:	4603      	mov	r3, r0
 800c810:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			if (!fp->obj.lockid) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 800c814:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d111      	bne.n	800c840 <f_open+0x90>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c81c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800c820:	b25b      	sxtb	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	da03      	bge.n	800c82e <f_open+0x7e>
				res = FR_INVALID_NAME;
 800c826:	2306      	movs	r3, #6
 800c828:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800c82c:	e008      	b.n	800c840 <f_open+0x90>
			} else {
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c82e:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800c832:	f003 0310 	and.w	r3, r3, #16
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <f_open+0x90>
					res = FR_NO_FILE;
 800c83a:	2304      	movs	r3, #4
 800c83c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c840:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c844:	2b00      	cmp	r3, #0
 800c846:	d12b      	bne.n	800c8a0 <f_open+0xf0>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c84c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff f928 	bl	800baa8 <ld_clust>
 800c858:	4602      	mov	r2, r0
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c85e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c862:	331c      	adds	r3, #28
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe fe6b 	bl	800b540 <ld_dword>
 800c86a:	4602      	mov	r2, r0
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	621a      	str	r2, [r3, #32]
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c876:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c87e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c882:	88da      	ldrh	r2, [r3, #6]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	79fa      	ldrb	r2, [r7, #7]
 800c88c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	615a      	str	r2, [r3, #20]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c8a0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <f_open+0xfe>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c8ae:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	37d0      	adds	r7, #208	; 0xd0
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b08e      	sub	sp, #56	; 0x38
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f107 0214 	add.w	r2, r7, #20
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff feee 	bl	800c6bc <validate>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c8e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d107      	bne.n	800c8fe <f_read+0x44>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	7c5b      	ldrb	r3, [r3, #17]
 800c8f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d002      	beq.n	800c904 <f_read+0x4a>
 800c8fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c902:	e0dd      	b.n	800cac0 <f_read+0x206>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	7c1b      	ldrb	r3, [r3, #16]
 800c908:	f003 0301 	and.w	r3, r3, #1
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <f_read+0x5a>
 800c910:	2307      	movs	r3, #7
 800c912:	e0d5      	b.n	800cac0 <f_read+0x206>
	remain = fp->obj.objsize - fp->fptr;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	695b      	ldr	r3, [r3, #20]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	429a      	cmp	r2, r3
 800c926:	f240 80c6 	bls.w	800cab6 <f_read+0x1fc>
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c92e:	e0c2      	b.n	800cab6 <f_read+0x1fc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f040 808e 	bne.w	800ca5a <f_read+0x1a0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	0a5b      	lsrs	r3, r3, #9
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	8952      	ldrh	r2, [r2, #10]
 800c948:	3a01      	subs	r2, #1
 800c94a:	4013      	ands	r3, r2
 800c94c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d12f      	bne.n	800c9b4 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d103      	bne.n	800c964 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	633b      	str	r3, [r7, #48]	; 0x30
 800c962:	e013      	b.n	800c98c <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d007      	beq.n	800c97c <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	4619      	mov	r1, r3
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7fe ff74 	bl	800b860 <clmt_clust>
 800c978:	6338      	str	r0, [r7, #48]	; 0x30
 800c97a:	e007      	b.n	800c98c <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7fe fec3 	bl	800b710 <get_fat>
 800c98a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d804      	bhi.n	800c99c <f_read+0xe2>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2202      	movs	r2, #2
 800c996:	745a      	strb	r2, [r3, #17]
 800c998:	2302      	movs	r3, #2
 800c99a:	e091      	b.n	800cac0 <f_read+0x206>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d104      	bne.n	800c9ae <f_read+0xf4>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	745a      	strb	r2, [r3, #17]
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e088      	b.n	800cac0 <f_read+0x206>
				fp->clust = clst;				/* Update current cluster */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b2:	619a      	str	r2, [r3, #24]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	4610      	mov	r0, r2
 800c9be:	f7fe fe88 	bl	800b6d2 <clust2sect>
 800c9c2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d104      	bne.n	800c9d4 <f_read+0x11a>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	745a      	strb	r2, [r3, #17]
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e075      	b.n	800cac0 <f_read+0x206>
			sect += csect;
 800c9d4:	69ba      	ldr	r2, [r7, #24]
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	4413      	add	r3, r2
 800c9da:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	0a5b      	lsrs	r3, r3, #9
 800c9e0:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01f      	beq.n	800ca28 <f_read+0x16e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	4413      	add	r3, r2
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	8952      	ldrh	r2, [r2, #10]
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d905      	bls.n	800ca02 <f_read+0x148>
					cc = fs->csize - csect;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	895b      	ldrh	r3, [r3, #10]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	7858      	ldrb	r0, [r3, #1]
 800ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca08:	69ba      	ldr	r2, [r7, #24]
 800ca0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca0c:	f7fe fd60 	bl	800b4d0 <disk_read>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d004      	beq.n	800ca20 <f_read+0x166>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	745a      	strb	r2, [r3, #17]
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e04f      	b.n	800cac0 <f_read+0x206>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	025b      	lsls	r3, r3, #9
 800ca24:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ca26:	e032      	b.n	800ca8e <f_read+0x1d4>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d010      	beq.n	800ca54 <f_read+0x19a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	7858      	ldrb	r0, [r3, #1]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	f7fe fd46 	bl	800b4d0 <disk_read>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d004      	beq.n	800ca54 <f_read+0x19a>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	745a      	strb	r2, [r3, #17]
 800ca50:	2301      	movs	r3, #1
 800ca52:	e035      	b.n	800cac0 <f_read+0x206>
			}
#endif
			fp->sect = sect;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	69ba      	ldr	r2, [r7, #24]
 800ca58:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca66:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d901      	bls.n	800ca74 <f_read+0x1ba>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	695b      	ldr	r3, [r3, #20]
 800ca7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca82:	4413      	add	r3, r2
 800ca84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca86:	4619      	mov	r1, r3
 800ca88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca8a:	f7fe fd7c 	bl	800b586 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ca8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	4413      	add	r3, r2
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	695a      	ldr	r2, [r3, #20]
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	441a      	add	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	615a      	str	r2, [r3, #20]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	441a      	add	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f47f af39 	bne.w	800c930 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3738      	adds	r7, #56	; 0x38
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f107 0208 	add.w	r2, r7, #8
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff fdef 	bl	800c6bc <validate>
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <f_close+0x26>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800caee:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b090      	sub	sp, #64	; 0x40
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f107 0208 	add.w	r2, r7, #8
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff fdd6 	bl	800c6bc <validate>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cb16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d103      	bne.n	800cb26 <f_lseek+0x2e>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7c5b      	ldrb	r3, [r3, #17]
 800cb22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cb26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d002      	beq.n	800cb34 <f_lseek+0x3c>
 800cb2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb32:	e163      	b.n	800cdfc <f_lseek+0x304>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 80b3 	beq.w	800cca4 <f_lseek+0x1ac>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb44:	d15a      	bne.n	800cbfc <f_lseek+0x104>
			tbl = fp->cltbl;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	1d1a      	adds	r2, r3, #4
 800cb50:	627a      	str	r2, [r7, #36]	; 0x24
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	617b      	str	r3, [r7, #20]
 800cb56:	2302      	movs	r3, #2
 800cb58:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d03a      	beq.n	800cbdc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	613b      	str	r3, [r7, #16]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	3302      	adds	r3, #2
 800cb72:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fdc4 	bl	800b710 <get_fat>
 800cb88:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d804      	bhi.n	800cb9a <f_lseek+0xa2>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	745a      	strb	r2, [r3, #17]
 800cb96:	2302      	movs	r3, #2
 800cb98:	e130      	b.n	800cdfc <f_lseek+0x304>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba0:	d104      	bne.n	800cbac <f_lseek+0xb4>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	745a      	strb	r2, [r3, #17]
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e127      	b.n	800cdfc <f_lseek+0x304>
					} while (cl == pcl + 1);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d0de      	beq.n	800cb74 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cbb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d809      	bhi.n	800cbd2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	627a      	str	r2, [r7, #36]	; 0x24
 800cbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	1d1a      	adds	r2, r3, #4
 800cbcc:	627a      	str	r2, [r7, #36]	; 0x24
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d3c4      	bcc.n	800cb66 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cbe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d803      	bhi.n	800cbf4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	e101      	b.n	800cdf8 <f_lseek+0x300>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cbf4:	2311      	movs	r3, #17
 800cbf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cbfa:	e0fd      	b.n	800cdf8 <f_lseek+0x300>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d902      	bls.n	800cc0c <f_lseek+0x114>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	615a      	str	r2, [r3, #20]
			if (ofs) {
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 80ef 	beq.w	800cdf8 <f_lseek+0x300>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7fe fe1d 	bl	800b860 <clmt_clust>
 800cc26:	4602      	mov	r2, r0
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	619a      	str	r2, [r3, #24]
				dsc = clust2sect(fs, fp->clust);
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fe fd4c 	bl	800b6d2 <clust2sect>
 800cc3a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d104      	bne.n	800cc4c <f_lseek+0x154>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2202      	movs	r2, #2
 800cc46:	745a      	strb	r2, [r3, #17]
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e0d7      	b.n	800cdfc <f_lseek+0x304>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	0a5b      	lsrs	r3, r3, #9
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	8952      	ldrh	r2, [r2, #10]
 800cc56:	3a01      	subs	r2, #1
 800cc58:	4013      	ands	r3, r2
 800cc5a:	69ba      	ldr	r2, [r7, #24]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 80c5 	beq.w	800cdf8 <f_lseek+0x300>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	69ba      	ldr	r2, [r7, #24]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	f000 80bf 	beq.w	800cdf8 <f_lseek+0x300>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	7858      	ldrb	r0, [r3, #1]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc84:	2301      	movs	r3, #1
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	f7fe fc22 	bl	800b4d0 <disk_read>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <f_lseek+0x1a4>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	745a      	strb	r2, [r3, #17]
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e0af      	b.n	800cdfc <f_lseek+0x304>
#endif
					fp->sect = dsc;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	69ba      	ldr	r2, [r7, #24]
 800cca0:	61da      	str	r2, [r3, #28]
 800cca2:	e0a9      	b.n	800cdf8 <f_lseek+0x300>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d902      	bls.n	800ccb4 <f_lseek+0x1bc>
			ofs = fp->obj.objsize;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	637b      	str	r3, [r7, #52]	; 0x34
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccc2:	615a      	str	r2, [r3, #20]
		if (ofs) {
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d077      	beq.n	800cdba <f_lseek+0x2c2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	895b      	ldrh	r3, [r3, #10]
 800ccce:	025b      	lsls	r3, r3, #9
 800ccd0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01b      	beq.n	800cd10 <f_lseek+0x218>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	1e5a      	subs	r2, r3, #1
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	fbb2 f2f3 	udiv	r2, r2, r3
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	1e59      	subs	r1, r3, #1
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d30f      	bcc.n	800cd10 <f_lseek+0x218>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	1e5a      	subs	r2, r3, #1
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	425b      	negs	r3, r3
 800ccf8:	401a      	ands	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd0e:	e005      	b.n	800cd1c <f_lseek+0x224>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd1a:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d04b      	beq.n	800cdba <f_lseek+0x2c2>
				while (ofs > bcs) {						/* Cluster following loop */
 800cd22:	e028      	b.n	800cd76 <f_lseek+0x27e>
					ofs -= bcs; fp->fptr += bcs;
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	603b      	str	r3, [r7, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	695a      	ldr	r2, [r3, #20]
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	441a      	add	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	615a      	str	r2, [r3, #20]
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe fce7 	bl	800b710 <get_fat>
 800cd42:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4a:	d104      	bne.n	800cd56 <f_lseek+0x25e>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	745a      	strb	r2, [r3, #17]
 800cd52:	2301      	movs	r3, #1
 800cd54:	e052      	b.n	800cdfc <f_lseek+0x304>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d904      	bls.n	800cd66 <f_lseek+0x26e>
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d304      	bcc.n	800cd70 <f_lseek+0x278>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2202      	movs	r2, #2
 800cd6a:	745a      	strb	r2, [r3, #17]
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e045      	b.n	800cdfc <f_lseek+0x304>
					fp->clust = clst;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd74:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d8d2      	bhi.n	800cd24 <f_lseek+0x22c>
				}
				fp->fptr += ofs;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	695a      	ldr	r2, [r3, #20]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	441a      	add	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <f_lseek+0x2c2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fe fc9a 	bl	800b6d2 <clust2sect>
 800cd9e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d104      	bne.n	800cdb0 <f_lseek+0x2b8>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2202      	movs	r2, #2
 800cdaa:	745a      	strb	r2, [r3, #17]
 800cdac:	2302      	movs	r3, #2
 800cdae:	e025      	b.n	800cdfc <f_lseek+0x304>
					nsect += (DWORD)(ofs / SS(fs));
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	0a5b      	lsrs	r3, r3, #9
 800cdb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdb6:	4413      	add	r3, r2
 800cdb8:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
			fp->obj.objsize = fp->fptr;
			fp->flag |= FA_MODIFIED;
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d018      	beq.n	800cdf8 <f_lseek+0x300>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	69db      	ldr	r3, [r3, #28]
 800cdca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d013      	beq.n	800cdf8 <f_lseek+0x300>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	7858      	ldrb	r0, [r3, #1]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cdda:	2301      	movs	r3, #1
 800cddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdde:	f7fe fb77 	bl	800b4d0 <disk_read>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <f_lseek+0x2fa>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	745a      	strb	r2, [r3, #17]
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e004      	b.n	800cdfc <f_lseek+0x304>
#endif
			fp->sect = nsect;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdf6:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 800cdf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3740      	adds	r7, #64	; 0x40
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce12:	2301      	movs	r3, #1
 800ce14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce1a:	4b1f      	ldr	r3, [pc, #124]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce1c:	7b9b      	ldrb	r3, [r3, #14]
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d831      	bhi.n	800ce88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce24:	4b1c      	ldr	r3, [pc, #112]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce26:	7b9b      	ldrb	r3, [r3, #14]
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	4b1a      	ldr	r3, [pc, #104]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce2e:	2100      	movs	r1, #0
 800ce30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce32:	4b19      	ldr	r3, [pc, #100]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce34:	7b9b      	ldrb	r3, [r3, #14]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce44:	7b9b      	ldrb	r3, [r3, #14]
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4b13      	ldr	r3, [pc, #76]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce4c:	4413      	add	r3, r2
 800ce4e:	79fa      	ldrb	r2, [r7, #7]
 800ce50:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800ce52:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce54:	7b9b      	ldrb	r3, [r3, #14]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	b2d1      	uxtb	r1, r2
 800ce5c:	4a0e      	ldr	r2, [pc, #56]	; (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce5e:	7391      	strb	r1, [r2, #14]
 800ce60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce62:	7dbb      	ldrb	r3, [r7, #22]
 800ce64:	3330      	adds	r3, #48	; 0x30
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	223a      	movs	r2, #58	; 0x3a
 800ce72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	3302      	adds	r3, #2
 800ce78:	222f      	movs	r2, #47	; 0x2f
 800ce7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	3303      	adds	r3, #3
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	200012bc 	.word	0x200012bc

0800ce9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cea6:	2200      	movs	r2, #0
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff ffaa 	bl	800ce04 <FATFS_LinkDriverEx>
 800ceb0:	4603      	mov	r3, r0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	6039      	str	r1, [r7, #0]
 800cec6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cec8:	88fb      	ldrh	r3, [r7, #6]
 800ceca:	2b7f      	cmp	r3, #127	; 0x7f
 800cecc:	d802      	bhi.n	800ced4 <ff_convert+0x18>
		c = chr;
 800cece:	88fb      	ldrh	r3, [r7, #6]
 800ced0:	81fb      	strh	r3, [r7, #14]
 800ced2:	e025      	b.n	800cf20 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00b      	beq.n	800cef2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ceda:	88fb      	ldrh	r3, [r7, #6]
 800cedc:	2bff      	cmp	r3, #255	; 0xff
 800cede:	d805      	bhi.n	800ceec <ff_convert+0x30>
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	3b80      	subs	r3, #128	; 0x80
 800cee4:	4a12      	ldr	r2, [pc, #72]	; (800cf30 <ff_convert+0x74>)
 800cee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceea:	e000      	b.n	800ceee <ff_convert+0x32>
 800ceec:	2300      	movs	r3, #0
 800ceee:	81fb      	strh	r3, [r7, #14]
 800cef0:	e016      	b.n	800cf20 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cef2:	2300      	movs	r3, #0
 800cef4:	81fb      	strh	r3, [r7, #14]
 800cef6:	e009      	b.n	800cf0c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	4a0d      	ldr	r2, [pc, #52]	; (800cf30 <ff_convert+0x74>)
 800cefc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf00:	88fa      	ldrh	r2, [r7, #6]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d006      	beq.n	800cf14 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cf06:	89fb      	ldrh	r3, [r7, #14]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	81fb      	strh	r3, [r7, #14]
 800cf0c:	89fb      	ldrh	r3, [r7, #14]
 800cf0e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf10:	d9f2      	bls.n	800cef8 <ff_convert+0x3c>
 800cf12:	e000      	b.n	800cf16 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cf14:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cf16:	89fb      	ldrh	r3, [r7, #14]
 800cf18:	3380      	adds	r3, #128	; 0x80
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cf20:	89fb      	ldrh	r3, [r7, #14]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	08019ab0 	.word	0x08019ab0

0800cf34 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b087      	sub	sp, #28
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cf3e:	88fb      	ldrh	r3, [r7, #6]
 800cf40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf44:	d201      	bcs.n	800cf4a <ff_wtoupper+0x16>
 800cf46:	4b3e      	ldr	r3, [pc, #248]	; (800d040 <ff_wtoupper+0x10c>)
 800cf48:	e000      	b.n	800cf4c <ff_wtoupper+0x18>
 800cf4a:	4b3e      	ldr	r3, [pc, #248]	; (800d044 <ff_wtoupper+0x110>)
 800cf4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	1c9a      	adds	r2, r3, #2
 800cf52:	617a      	str	r2, [r7, #20]
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cf58:	8a7b      	ldrh	r3, [r7, #18]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d068      	beq.n	800d030 <ff_wtoupper+0xfc>
 800cf5e:	88fa      	ldrh	r2, [r7, #6]
 800cf60:	8a7b      	ldrh	r3, [r7, #18]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d364      	bcc.n	800d030 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	1c9a      	adds	r2, r3, #2
 800cf6a:	617a      	str	r2, [r7, #20]
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	823b      	strh	r3, [r7, #16]
 800cf70:	8a3b      	ldrh	r3, [r7, #16]
 800cf72:	0a1b      	lsrs	r3, r3, #8
 800cf74:	81fb      	strh	r3, [r7, #14]
 800cf76:	8a3b      	ldrh	r3, [r7, #16]
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cf7c:	88fa      	ldrh	r2, [r7, #6]
 800cf7e:	8a79      	ldrh	r1, [r7, #18]
 800cf80:	8a3b      	ldrh	r3, [r7, #16]
 800cf82:	440b      	add	r3, r1
 800cf84:	429a      	cmp	r2, r3
 800cf86:	da49      	bge.n	800d01c <ff_wtoupper+0xe8>
			switch (cmd) {
 800cf88:	89fb      	ldrh	r3, [r7, #14]
 800cf8a:	2b08      	cmp	r3, #8
 800cf8c:	d84f      	bhi.n	800d02e <ff_wtoupper+0xfa>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <ff_wtoupper+0x60>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800cfb9 	.word	0x0800cfb9
 800cf98:	0800cfcb 	.word	0x0800cfcb
 800cf9c:	0800cfe1 	.word	0x0800cfe1
 800cfa0:	0800cfe9 	.word	0x0800cfe9
 800cfa4:	0800cff1 	.word	0x0800cff1
 800cfa8:	0800cff9 	.word	0x0800cff9
 800cfac:	0800d001 	.word	0x0800d001
 800cfb0:	0800d009 	.word	0x0800d009
 800cfb4:	0800d011 	.word	0x0800d011
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cfb8:	88fa      	ldrh	r2, [r7, #6]
 800cfba:	8a7b      	ldrh	r3, [r7, #18]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	697a      	ldr	r2, [r7, #20]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	80fb      	strh	r3, [r7, #6]
 800cfc8:	e027      	b.n	800d01a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cfca:	88fa      	ldrh	r2, [r7, #6]
 800cfcc:	8a7b      	ldrh	r3, [r7, #18]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	f003 0301 	and.w	r3, r3, #1
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	88fa      	ldrh	r2, [r7, #6]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	80fb      	strh	r3, [r7, #6]
 800cfde:	e01c      	b.n	800d01a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cfe0:	88fb      	ldrh	r3, [r7, #6]
 800cfe2:	3b10      	subs	r3, #16
 800cfe4:	80fb      	strh	r3, [r7, #6]
 800cfe6:	e018      	b.n	800d01a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cfe8:	88fb      	ldrh	r3, [r7, #6]
 800cfea:	3b20      	subs	r3, #32
 800cfec:	80fb      	strh	r3, [r7, #6]
 800cfee:	e014      	b.n	800d01a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cff0:	88fb      	ldrh	r3, [r7, #6]
 800cff2:	3b30      	subs	r3, #48	; 0x30
 800cff4:	80fb      	strh	r3, [r7, #6]
 800cff6:	e010      	b.n	800d01a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cff8:	88fb      	ldrh	r3, [r7, #6]
 800cffa:	3b1a      	subs	r3, #26
 800cffc:	80fb      	strh	r3, [r7, #6]
 800cffe:	e00c      	b.n	800d01a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d000:	88fb      	ldrh	r3, [r7, #6]
 800d002:	3308      	adds	r3, #8
 800d004:	80fb      	strh	r3, [r7, #6]
 800d006:	e008      	b.n	800d01a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d008:	88fb      	ldrh	r3, [r7, #6]
 800d00a:	3b50      	subs	r3, #80	; 0x50
 800d00c:	80fb      	strh	r3, [r7, #6]
 800d00e:	e004      	b.n	800d01a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d010:	88fb      	ldrh	r3, [r7, #6]
 800d012:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d016:	80fb      	strh	r3, [r7, #6]
 800d018:	bf00      	nop
			}
			break;
 800d01a:	e008      	b.n	800d02e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d01c:	89fb      	ldrh	r3, [r7, #14]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d195      	bne.n	800cf4e <ff_wtoupper+0x1a>
 800d022:	8a3b      	ldrh	r3, [r7, #16]
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	4413      	add	r3, r2
 800d02a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d02c:	e78f      	b.n	800cf4e <ff_wtoupper+0x1a>
			break;
 800d02e:	bf00      	nop
	}

	return chr;
 800d030:	88fb      	ldrh	r3, [r7, #6]
}
 800d032:	4618      	mov	r0, r3
 800d034:	371c      	adds	r7, #28
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	08019bb0 	.word	0x08019bb0
 800d044:	08019da4 	.word	0x08019da4

0800d048 <Get_ADCChannelValue>:
 */

#include "InternalADC.h"

uint16_t Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef ADC_ChanConf;

	ADC_ChanConf.Channel = channel;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	60bb      	str	r3, [r7, #8]
	ADC_ChanConf.Rank = 1;
 800d056:	2301      	movs	r3, #1
 800d058:	60fb      	str	r3, [r7, #12]
	ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800d05a:	2301      	movs	r3, #1
 800d05c:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 800d05e:	f107 0308 	add.w	r3, r7, #8
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7f6 fa8d 	bl	8003584 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(hadc);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7f6 f920 	bl	80032b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 10);   //等待转换完成，50为最大等待时间，单位为ms
 800d070:	210a      	movs	r1, #10
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f7f6 f9ee 	bl	8003454 <HAL_ADC_PollForConversion>
	return (uint16_t) HAL_ADC_GetValue(hadc);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7f6 fa76 	bl	800356a <HAL_ADC_GetValue>
 800d07e:	4603      	mov	r3, r0
 800d080:	b29b      	uxth	r3, r3
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
	...

0800d08c <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800d096:	4b29      	ldr	r3, [pc, #164]	; (800d13c <set_int_enable+0xb0>)
 800d098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d01c      	beq.n	800d0da <set_int_enable+0x4e>
        if (enable)
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	73fb      	strb	r3, [r7, #15]
 800d0aa:	e001      	b.n	800d0b0 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800d0b0:	4b22      	ldr	r3, [pc, #136]	; (800d13c <set_int_enable+0xb0>)
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	7818      	ldrb	r0, [r3, #0]
 800d0b6:	4b21      	ldr	r3, [pc, #132]	; (800d13c <set_int_enable+0xb0>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	7c59      	ldrb	r1, [r3, #17]
 800d0bc:	f107 030f 	add.w	r3, r7, #15
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f003 fa0d 	bl	80104e0 <dmp_i2c_write>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <set_int_enable+0x46>
            return -1;
 800d0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d0:	e030      	b.n	800d134 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800d0d2:	7bfa      	ldrb	r2, [r7, #15]
 800d0d4:	4b19      	ldr	r3, [pc, #100]	; (800d13c <set_int_enable+0xb0>)
 800d0d6:	745a      	strb	r2, [r3, #17]
 800d0d8:	e02b      	b.n	800d132 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800d0da:	4b18      	ldr	r3, [pc, #96]	; (800d13c <set_int_enable+0xb0>)
 800d0dc:	7a9b      	ldrb	r3, [r3, #10]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <set_int_enable+0x5c>
            return -1;
 800d0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e6:	e025      	b.n	800d134 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d005      	beq.n	800d0fa <set_int_enable+0x6e>
 800d0ee:	4b13      	ldr	r3, [pc, #76]	; (800d13c <set_int_enable+0xb0>)
 800d0f0:	7c5b      	ldrb	r3, [r3, #17]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <set_int_enable+0x6e>
            return 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e01c      	b.n	800d134 <set_int_enable+0xa8>
        if (enable)
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 800d100:	2301      	movs	r3, #1
 800d102:	73fb      	strb	r3, [r7, #15]
 800d104:	e001      	b.n	800d10a <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800d106:	2300      	movs	r3, #0
 800d108:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800d10a:	4b0c      	ldr	r3, [pc, #48]	; (800d13c <set_int_enable+0xb0>)
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	7818      	ldrb	r0, [r3, #0]
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <set_int_enable+0xb0>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	7c59      	ldrb	r1, [r3, #17]
 800d116:	f107 030f 	add.w	r3, r7, #15
 800d11a:	2201      	movs	r2, #1
 800d11c:	f003 f9e0 	bl	80104e0 <dmp_i2c_write>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <set_int_enable+0xa0>
            return -1;
 800d126:	f04f 33ff 	mov.w	r3, #4294967295
 800d12a:	e003      	b.n	800d134 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800d12c:	7bfa      	ldrb	r2, [r7, #15]
 800d12e:	4b03      	ldr	r3, [pc, #12]	; (800d13c <set_int_enable+0xb0>)
 800d130:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	20000028 	.word	0x20000028

0800d140 <mpu_init>:
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
//int mpu_init(struct int_param_s *int_param)
int mpu_init(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* 复位设备 */
    /* Reset device. */
    data[0] = BIT_RESET;			//0x80
 800d146:	2380      	movs	r3, #128	; 0x80
 800d148:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800d14a:	4b82      	ldr	r3, [pc, #520]	; (800d354 <mpu_init+0x214>)
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	7818      	ldrb	r0, [r3, #0]
 800d150:	4b80      	ldr	r3, [pc, #512]	; (800d354 <mpu_init+0x214>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	7d59      	ldrb	r1, [r3, #21]
 800d156:	463b      	mov	r3, r7
 800d158:	2201      	movs	r2, #1
 800d15a:	f003 f9c1 	bl	80104e0 <dmp_i2c_write>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <mpu_init+0x2a>
        return -1;
 800d164:	f04f 33ff 	mov.w	r3, #4294967295
 800d168:	e0ef      	b.n	800d34a <mpu_init+0x20a>
    delay_ms(100);
 800d16a:	2064      	movs	r0, #100	; 0x64
 800d16c:	f003 f9a0 	bl	80104b0 <my_hal_delay>

    /* 唤醒设备 */
    /* Wake up chip. */
    data[0] = 0x00;						//0x00
 800d170:	2300      	movs	r3, #0
 800d172:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800d174:	4b77      	ldr	r3, [pc, #476]	; (800d354 <mpu_init+0x214>)
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	7818      	ldrb	r0, [r3, #0]
 800d17a:	4b76      	ldr	r3, [pc, #472]	; (800d354 <mpu_init+0x214>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	7d59      	ldrb	r1, [r3, #21]
 800d180:	463b      	mov	r3, r7
 800d182:	2201      	movs	r2, #1
 800d184:	f003 f9ac 	bl	80104e0 <dmp_i2c_write>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <mpu_init+0x54>
        return -1;
 800d18e:	f04f 33ff 	mov.w	r3, #4294967295
 800d192:	e0da      	b.n	800d34a <mpu_init+0x20a>

//以下是mpu6050寄存器的初始化
#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 800d194:	4b6f      	ldr	r3, [pc, #444]	; (800d354 <mpu_init+0x214>)
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	7818      	ldrb	r0, [r3, #0]
 800d19a:	4b6e      	ldr	r3, [pc, #440]	; (800d354 <mpu_init+0x214>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	7e59      	ldrb	r1, [r3, #25]
 800d1a0:	463b      	mov	r3, r7
 800d1a2:	2206      	movs	r2, #6
 800d1a4:	f003 f9be 	bl	8010524 <dmp_i2c_read>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d002      	beq.n	800d1b4 <mpu_init+0x74>
        return -1;
 800d1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b2:	e0ca      	b.n	800d34a <mpu_init+0x20a>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800d1b4:	797b      	ldrb	r3, [r7, #5]
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	b25b      	sxtb	r3, r3
 800d1ba:	f003 0304 	and.w	r3, r3, #4
 800d1be:	b25a      	sxtb	r2, r3
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	b25b      	sxtb	r3, r3
 800d1c6:	f003 0302 	and.w	r3, r3, #2
 800d1ca:	b25b      	sxtb	r3, r3
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 800d1d0:	787b      	ldrb	r3, [r7, #1]
 800d1d2:	b25b      	sxtb	r3, r3
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	b25b      	sxtb	r3, r3
 800d1de:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d015      	beq.n	800d212 <mpu_init+0xd2>
        /* Congrats, these parts are better. */
        if (rev == 1)
 800d1e6:	79fb      	ldrb	r3, [r7, #7]
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d103      	bne.n	800d1f4 <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 800d1ec:	4b59      	ldr	r3, [pc, #356]	; (800d354 <mpu_init+0x214>)
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	74da      	strb	r2, [r3, #19]
 800d1f2:	e038      	b.n	800d266 <mpu_init+0x126>
        else if (rev == 2)
 800d1f4:	79fb      	ldrb	r3, [r7, #7]
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d103      	bne.n	800d202 <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 800d1fa:	4b56      	ldr	r3, [pc, #344]	; (800d354 <mpu_init+0x214>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	74da      	strb	r2, [r3, #19]
 800d200:	e031      	b.n	800d266 <mpu_init+0x126>
        else {
            log_e("Unsupported software product rev %d.\n", rev);
 800d202:	79fb      	ldrb	r3, [r7, #7]
 800d204:	4619      	mov	r1, r3
 800d206:	4854      	ldr	r0, [pc, #336]	; (800d358 <mpu_init+0x218>)
 800d208:	f007 fc06 	bl	8014a18 <iprintf>
            return -1;
 800d20c:	f04f 33ff 	mov.w	r3, #4294967295
 800d210:	e09b      	b.n	800d34a <mpu_init+0x20a>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 800d212:	4b50      	ldr	r3, [pc, #320]	; (800d354 <mpu_init+0x214>)
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	7818      	ldrb	r0, [r3, #0]
 800d218:	4b4e      	ldr	r3, [pc, #312]	; (800d354 <mpu_init+0x214>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	78d9      	ldrb	r1, [r3, #3]
 800d21e:	463b      	mov	r3, r7
 800d220:	2201      	movs	r2, #1
 800d222:	f003 f97f 	bl	8010524 <dmp_i2c_read>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <mpu_init+0xf2>
            return -1;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
 800d230:	e08b      	b.n	800d34a <mpu_init+0x20a>
        rev = data[0] & 0x0F;
 800d232:	783b      	ldrb	r3, [r7, #0]
 800d234:	f003 030f 	and.w	r3, r3, #15
 800d238:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d105      	bne.n	800d24c <mpu_init+0x10c>
            log_e("Product ID read as 0 indicates device is either "
 800d240:	4846      	ldr	r0, [pc, #280]	; (800d35c <mpu_init+0x21c>)
 800d242:	f007 fc6f 	bl	8014b24 <puts>
                "incompatible or an MPU3050.\n");
            return -1;
 800d246:	f04f 33ff 	mov.w	r3, #4294967295
 800d24a:	e07e      	b.n	800d34a <mpu_init+0x20a>
        } else if (rev == 4) {
 800d24c:	79fb      	ldrb	r3, [r7, #7]
 800d24e:	2b04      	cmp	r3, #4
 800d250:	d106      	bne.n	800d260 <mpu_init+0x120>
            log_i("Half sensitivity part found.\n");
 800d252:	4843      	ldr	r0, [pc, #268]	; (800d360 <mpu_init+0x220>)
 800d254:	f007 fc66 	bl	8014b24 <puts>
            st.chip_cfg.accel_half = 1;
 800d258:	4b3e      	ldr	r3, [pc, #248]	; (800d354 <mpu_init+0x214>)
 800d25a:	2201      	movs	r2, #1
 800d25c:	74da      	strb	r2, [r3, #19]
 800d25e:	e002      	b.n	800d266 <mpu_init+0x126>
        } else
            st.chip_cfg.accel_half = 0;
 800d260:	4b3c      	ldr	r3, [pc, #240]	; (800d354 <mpu_init+0x214>)
 800d262:	2200      	movs	r2, #0
 800d264:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800d266:	4b3b      	ldr	r3, [pc, #236]	; (800d354 <mpu_init+0x214>)
 800d268:	22ff      	movs	r2, #255	; 0xff
 800d26a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800d26c:	4b39      	ldr	r3, [pc, #228]	; (800d354 <mpu_init+0x214>)
 800d26e:	22ff      	movs	r2, #255	; 0xff
 800d270:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800d272:	4b38      	ldr	r3, [pc, #224]	; (800d354 <mpu_init+0x214>)
 800d274:	22ff      	movs	r2, #255	; 0xff
 800d276:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800d278:	4b36      	ldr	r3, [pc, #216]	; (800d354 <mpu_init+0x214>)
 800d27a:	22ff      	movs	r2, #255	; 0xff
 800d27c:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800d27e:	4b35      	ldr	r3, [pc, #212]	; (800d354 <mpu_init+0x214>)
 800d280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d284:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800d286:	4b33      	ldr	r3, [pc, #204]	; (800d354 <mpu_init+0x214>)
 800d288:	22ff      	movs	r2, #255	; 0xff
 800d28a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800d28c:	4b31      	ldr	r3, [pc, #196]	; (800d354 <mpu_init+0x214>)
 800d28e:	22ff      	movs	r2, #255	; 0xff
 800d290:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800d292:	4b30      	ldr	r3, [pc, #192]	; (800d354 <mpu_init+0x214>)
 800d294:	2201      	movs	r2, #1
 800d296:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800d298:	4b2e      	ldr	r3, [pc, #184]	; (800d354 <mpu_init+0x214>)
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 800d2a0:	4b2c      	ldr	r3, [pc, #176]	; (800d354 <mpu_init+0x214>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800d2a8:	4b2a      	ldr	r3, [pc, #168]	; (800d354 <mpu_init+0x214>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800d2ae:	4b29      	ldr	r3, [pc, #164]	; (800d354 <mpu_init+0x214>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800d2b4:	220c      	movs	r2, #12
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	482a      	ldr	r0, [pc, #168]	; (800d364 <mpu_init+0x224>)
 800d2ba:	f006 fd2b 	bl	8013d14 <memset>
    st.chip_cfg.dmp_on = 0;
 800d2be:	4b25      	ldr	r3, [pc, #148]	; (800d354 <mpu_init+0x214>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 800d2c6:	4b23      	ldr	r3, [pc, #140]	; (800d354 <mpu_init+0x214>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800d2ce:	4b21      	ldr	r3, [pc, #132]	; (800d354 <mpu_init+0x214>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	84da      	strh	r2, [r3, #38]	; 0x26
		
		//配置陀螺仪满量程范围, FSR: ±2000°/s, LSB: 16.4 LSB/°/s
    if (mpu_set_gyro_fsr(2000))
 800d2d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d2d8:	f000 f9fa 	bl	800d6d0 <mpu_set_gyro_fsr>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d002      	beq.n	800d2e8 <mpu_init+0x1a8>
        return -1;
 800d2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e6:	e030      	b.n	800d34a <mpu_init+0x20a>
		//配置加速度计满量程范围, FSR: ±2g,  LSB: 16384 LSB/g
    if (mpu_set_accel_fsr(2))
 800d2e8:	2002      	movs	r0, #2
 800d2ea:	f000 fa7f 	bl	800d7ec <mpu_set_accel_fsr>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <mpu_init+0x1ba>
        return -1;
 800d2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f8:	e027      	b.n	800d34a <mpu_init+0x20a>
		//配置数字低通滤波器, 42Hz
    if (mpu_set_lpf(42))
 800d2fa:	202a      	movs	r0, #42	; 0x2a
 800d2fc:	f000 fb1c 	bl	800d938 <mpu_set_lpf>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <mpu_init+0x1cc>
        return -1;
 800d306:	f04f 33ff 	mov.w	r3, #4294967295
 800d30a:	e01e      	b.n	800d34a <mpu_init+0x20a>
		//配置采样频率分频寄存器, 50Hz
    if (mpu_set_sample_rate(50))
 800d30c:	2032      	movs	r0, #50	; 0x32
 800d30e:	f000 fb7b 	bl	800da08 <mpu_set_sample_rate>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <mpu_init+0x1de>
        return -1;
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	e015      	b.n	800d34a <mpu_init+0x20a>
		//选择FIFO, 
    if (mpu_configure_fifo(0))
 800d31e:	2000      	movs	r0, #0
 800d320:	f000 fc60 	bl	800dbe4 <mpu_configure_fifo>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <mpu_init+0x1f0>
        return -1;
 800d32a:	f04f 33ff 	mov.w	r3, #4294967295
 800d32e:	e00c      	b.n	800d34a <mpu_init+0x20a>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800d330:	2000      	movs	r0, #0
 800d332:	f000 fdad 	bl	800de90 <mpu_set_bypass>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <mpu_init+0x202>
        return -1;
 800d33c:	f04f 33ff 	mov.w	r3, #4294967295
 800d340:	e003      	b.n	800d34a <mpu_init+0x20a>
#endif

    mpu_set_sensors(0);
 800d342:	2000      	movs	r0, #0
 800d344:	f000 fca0 	bl	800dc88 <mpu_set_sensors>
    return 0;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20000028 	.word	0x20000028
 800d358:	08019328 	.word	0x08019328
 800d35c:	08019350 	.word	0x08019350
 800d360:	0801939c 	.word	0x0801939c
 800d364:	2000003e 	.word	0x2000003e

0800d368 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 800d372:	79fb      	ldrb	r3, [r7, #7]
 800d374:	2b28      	cmp	r3, #40	; 0x28
 800d376:	d902      	bls.n	800d37e <mpu_lp_accel_mode+0x16>
        return -1;
 800d378:	f04f 33ff 	mov.w	r3, #4294967295
 800d37c:	e06a      	b.n	800d454 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 800d37e:	79fb      	ldrb	r3, [r7, #7]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d11c      	bne.n	800d3be <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 800d384:	2000      	movs	r0, #0
 800d386:	f000 fe49 	bl	800e01c <mpu_set_int_latched>
        tmp[0] = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 800d38e:	2307      	movs	r3, #7
 800d390:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800d392:	4b32      	ldr	r3, [pc, #200]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	7818      	ldrb	r0, [r3, #0]
 800d398:	4b30      	ldr	r3, [pc, #192]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	7d59      	ldrb	r1, [r3, #21]
 800d39e:	f107 030c 	add.w	r3, r7, #12
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	f003 f89c 	bl	80104e0 <dmp_i2c_write>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <mpu_lp_accel_mode+0x4c>
            return -1;
 800d3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b2:	e04f      	b.n	800d454 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 800d3b4:	4b29      	ldr	r3, [pc, #164]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	751a      	strb	r2, [r3, #20]
        return 0;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e04a      	b.n	800d454 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800d3be:	2001      	movs	r0, #1
 800d3c0:	f000 fe2c 	bl	800e01c <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800d3c4:	2320      	movs	r3, #32
 800d3c6:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d105      	bne.n	800d3da <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800d3d2:	2005      	movs	r0, #5
 800d3d4:	f000 fab0 	bl	800d938 <mpu_set_lpf>
 800d3d8:	e016      	b.n	800d408 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	2b05      	cmp	r3, #5
 800d3de:	d805      	bhi.n	800d3ec <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800d3e4:	2005      	movs	r0, #5
 800d3e6:	f000 faa7 	bl	800d938 <mpu_set_lpf>
 800d3ea:	e00d      	b.n	800d408 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	2b14      	cmp	r3, #20
 800d3f0:	d805      	bhi.n	800d3fe <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800d3f6:	200a      	movs	r0, #10
 800d3f8:	f000 fa9e 	bl	800d938 <mpu_set_lpf>
 800d3fc:	e004      	b.n	800d408 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 800d3fe:	2303      	movs	r3, #3
 800d400:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 800d402:	2014      	movs	r0, #20
 800d404:	f000 fa98 	bl	800d938 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800d408:	7b7b      	ldrb	r3, [r7, #13]
 800d40a:	019b      	lsls	r3, r3, #6
 800d40c:	b25b      	sxtb	r3, r3
 800d40e:	f043 0307 	orr.w	r3, r3, #7
 800d412:	b25b      	sxtb	r3, r3
 800d414:	b2db      	uxtb	r3, r3
 800d416:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800d418:	4b10      	ldr	r3, [pc, #64]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	7818      	ldrb	r0, [r3, #0]
 800d41e:	4b0f      	ldr	r3, [pc, #60]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	7d59      	ldrb	r1, [r3, #21]
 800d424:	f107 030c 	add.w	r3, r7, #12
 800d428:	2202      	movs	r2, #2
 800d42a:	f003 f859 	bl	80104e0 <dmp_i2c_write>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d002      	beq.n	800d43a <mpu_lp_accel_mode+0xd2>
        return -1;
 800d434:	f04f 33ff 	mov.w	r3, #4294967295
 800d438:	e00c      	b.n	800d454 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800d43a:	4b08      	ldr	r3, [pc, #32]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d43c:	2208      	movs	r2, #8
 800d43e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800d440:	4b06      	ldr	r3, [pc, #24]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d442:	2200      	movs	r2, #0
 800d444:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800d446:	4b05      	ldr	r3, [pc, #20]	; (800d45c <mpu_lp_accel_mode+0xf4>)
 800d448:	2201      	movs	r2, #1
 800d44a:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800d44c:	2000      	movs	r0, #0
 800d44e:	f000 fbc9 	bl	800dbe4 <mpu_configure_fifo>

    return 0;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000028 	.word	0x20000028

0800d460 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d466:	4b7e      	ldr	r3, [pc, #504]	; (800d660 <mpu_reset_fifo+0x200>)
 800d468:	7a9b      	ldrb	r3, [r3, #10]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d102      	bne.n	800d474 <mpu_reset_fifo+0x14>
        return -1;
 800d46e:	f04f 33ff 	mov.w	r3, #4294967295
 800d472:	e0f1      	b.n	800d658 <mpu_reset_fifo+0x1f8>

    data = 0;
 800d474:	2300      	movs	r3, #0
 800d476:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800d478:	4b79      	ldr	r3, [pc, #484]	; (800d660 <mpu_reset_fifo+0x200>)
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	7818      	ldrb	r0, [r3, #0]
 800d47e:	4b78      	ldr	r3, [pc, #480]	; (800d660 <mpu_reset_fifo+0x200>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	7c59      	ldrb	r1, [r3, #17]
 800d484:	1dfb      	adds	r3, r7, #7
 800d486:	2201      	movs	r2, #1
 800d488:	f003 f82a 	bl	80104e0 <dmp_i2c_write>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <mpu_reset_fifo+0x38>
        return -1;
 800d492:	f04f 33ff 	mov.w	r3, #4294967295
 800d496:	e0df      	b.n	800d658 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800d498:	4b71      	ldr	r3, [pc, #452]	; (800d660 <mpu_reset_fifo+0x200>)
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	7818      	ldrb	r0, [r3, #0]
 800d49e:	4b70      	ldr	r3, [pc, #448]	; (800d660 <mpu_reset_fifo+0x200>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	7959      	ldrb	r1, [r3, #5]
 800d4a4:	1dfb      	adds	r3, r7, #7
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f003 f81a 	bl	80104e0 <dmp_i2c_write>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <mpu_reset_fifo+0x58>
        return -1;
 800d4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b6:	e0cf      	b.n	800d658 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d4b8:	4b69      	ldr	r3, [pc, #420]	; (800d660 <mpu_reset_fifo+0x200>)
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	7818      	ldrb	r0, [r3, #0]
 800d4be:	4b68      	ldr	r3, [pc, #416]	; (800d660 <mpu_reset_fifo+0x200>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	7919      	ldrb	r1, [r3, #4]
 800d4c4:	1dfb      	adds	r3, r7, #7
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f003 f80a 	bl	80104e0 <dmp_i2c_write>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d002      	beq.n	800d4d8 <mpu_reset_fifo+0x78>
        return -1;
 800d4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d6:	e0bf      	b.n	800d658 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 800d4d8:	4b61      	ldr	r3, [pc, #388]	; (800d660 <mpu_reset_fifo+0x200>)
 800d4da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d05c      	beq.n	800d59c <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d4e6:	4b5e      	ldr	r3, [pc, #376]	; (800d660 <mpu_reset_fifo+0x200>)
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	7818      	ldrb	r0, [r3, #0]
 800d4ec:	4b5c      	ldr	r3, [pc, #368]	; (800d660 <mpu_reset_fifo+0x200>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	7919      	ldrb	r1, [r3, #4]
 800d4f2:	1dfb      	adds	r3, r7, #7
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f002 fff3 	bl	80104e0 <dmp_i2c_write>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <mpu_reset_fifo+0xa6>
            return -1;
 800d500:	f04f 33ff 	mov.w	r3, #4294967295
 800d504:	e0a8      	b.n	800d658 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800d506:	2032      	movs	r0, #50	; 0x32
 800d508:	f002 ffd2 	bl	80104b0 <my_hal_delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800d50c:	23c0      	movs	r3, #192	; 0xc0
 800d50e:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800d510:	4b53      	ldr	r3, [pc, #332]	; (800d660 <mpu_reset_fifo+0x200>)
 800d512:	7a9b      	ldrb	r3, [r3, #10]
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d004      	beq.n	800d526 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	f043 0320 	orr.w	r3, r3, #32
 800d522:	b2db      	uxtb	r3, r3
 800d524:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d526:	4b4e      	ldr	r3, [pc, #312]	; (800d660 <mpu_reset_fifo+0x200>)
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	7818      	ldrb	r0, [r3, #0]
 800d52c:	4b4c      	ldr	r3, [pc, #304]	; (800d660 <mpu_reset_fifo+0x200>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	7919      	ldrb	r1, [r3, #4]
 800d532:	1dfb      	adds	r3, r7, #7
 800d534:	2201      	movs	r2, #1
 800d536:	f002 ffd3 	bl	80104e0 <dmp_i2c_write>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <mpu_reset_fifo+0xe6>
            return -1;
 800d540:	f04f 33ff 	mov.w	r3, #4294967295
 800d544:	e088      	b.n	800d658 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 800d546:	4b46      	ldr	r3, [pc, #280]	; (800d660 <mpu_reset_fifo+0x200>)
 800d548:	7c5b      	ldrb	r3, [r3, #17]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800d54e:	2302      	movs	r3, #2
 800d550:	71fb      	strb	r3, [r7, #7]
 800d552:	e001      	b.n	800d558 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800d558:	4b41      	ldr	r3, [pc, #260]	; (800d660 <mpu_reset_fifo+0x200>)
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	7818      	ldrb	r0, [r3, #0]
 800d55e:	4b40      	ldr	r3, [pc, #256]	; (800d660 <mpu_reset_fifo+0x200>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	7c59      	ldrb	r1, [r3, #17]
 800d564:	1dfb      	adds	r3, r7, #7
 800d566:	2201      	movs	r2, #1
 800d568:	f002 ffba 	bl	80104e0 <dmp_i2c_write>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <mpu_reset_fifo+0x118>
            return -1;
 800d572:	f04f 33ff 	mov.w	r3, #4294967295
 800d576:	e06f      	b.n	800d658 <mpu_reset_fifo+0x1f8>
        data = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800d57c:	4b38      	ldr	r3, [pc, #224]	; (800d660 <mpu_reset_fifo+0x200>)
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	7818      	ldrb	r0, [r3, #0]
 800d582:	4b37      	ldr	r3, [pc, #220]	; (800d660 <mpu_reset_fifo+0x200>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	7959      	ldrb	r1, [r3, #5]
 800d588:	1dfb      	adds	r3, r7, #7
 800d58a:	2201      	movs	r2, #1
 800d58c:	f002 ffa8 	bl	80104e0 <dmp_i2c_write>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d05f      	beq.n	800d656 <mpu_reset_fifo+0x1f6>
            return -1;
 800d596:	f04f 33ff 	mov.w	r3, #4294967295
 800d59a:	e05d      	b.n	800d658 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 800d59c:	2304      	movs	r3, #4
 800d59e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d5a0:	4b2f      	ldr	r3, [pc, #188]	; (800d660 <mpu_reset_fifo+0x200>)
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	7818      	ldrb	r0, [r3, #0]
 800d5a6:	4b2e      	ldr	r3, [pc, #184]	; (800d660 <mpu_reset_fifo+0x200>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	7919      	ldrb	r1, [r3, #4]
 800d5ac:	1dfb      	adds	r3, r7, #7
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f002 ff96 	bl	80104e0 <dmp_i2c_write>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d002      	beq.n	800d5c0 <mpu_reset_fifo+0x160>
            return -1;
 800d5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d5be:	e04b      	b.n	800d658 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800d5c0:	4b27      	ldr	r3, [pc, #156]	; (800d660 <mpu_reset_fifo+0x200>)
 800d5c2:	7c9b      	ldrb	r3, [r3, #18]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d105      	bne.n	800d5d4 <mpu_reset_fifo+0x174>
 800d5c8:	4b25      	ldr	r3, [pc, #148]	; (800d660 <mpu_reset_fifo+0x200>)
 800d5ca:	7a9b      	ldrb	r3, [r3, #10]
 800d5cc:	f003 0301 	and.w	r3, r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d102      	bne.n	800d5da <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 800d5d4:	2340      	movs	r3, #64	; 0x40
 800d5d6:	71fb      	strb	r3, [r7, #7]
 800d5d8:	e001      	b.n	800d5de <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800d5da:	2360      	movs	r3, #96	; 0x60
 800d5dc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d5de:	4b20      	ldr	r3, [pc, #128]	; (800d660 <mpu_reset_fifo+0x200>)
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	7818      	ldrb	r0, [r3, #0]
 800d5e4:	4b1e      	ldr	r3, [pc, #120]	; (800d660 <mpu_reset_fifo+0x200>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	7919      	ldrb	r1, [r3, #4]
 800d5ea:	1dfb      	adds	r3, r7, #7
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f002 ff77 	bl	80104e0 <dmp_i2c_write>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <mpu_reset_fifo+0x19e>
            return -1;
 800d5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fc:	e02c      	b.n	800d658 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800d5fe:	2032      	movs	r0, #50	; 0x32
 800d600:	f002 ff56 	bl	80104b0 <my_hal_delay>
        if (st.chip_cfg.int_enable)
 800d604:	4b16      	ldr	r3, [pc, #88]	; (800d660 <mpu_reset_fifo+0x200>)
 800d606:	7c5b      	ldrb	r3, [r3, #17]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 800d60c:	2301      	movs	r3, #1
 800d60e:	71fb      	strb	r3, [r7, #7]
 800d610:	e001      	b.n	800d616 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800d616:	4b12      	ldr	r3, [pc, #72]	; (800d660 <mpu_reset_fifo+0x200>)
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	7818      	ldrb	r0, [r3, #0]
 800d61c:	4b10      	ldr	r3, [pc, #64]	; (800d660 <mpu_reset_fifo+0x200>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	7c59      	ldrb	r1, [r3, #17]
 800d622:	1dfb      	adds	r3, r7, #7
 800d624:	2201      	movs	r2, #1
 800d626:	f002 ff5b 	bl	80104e0 <dmp_i2c_write>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <mpu_reset_fifo+0x1d6>
            return -1;
 800d630:	f04f 33ff 	mov.w	r3, #4294967295
 800d634:	e010      	b.n	800d658 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <mpu_reset_fifo+0x200>)
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	7818      	ldrb	r0, [r3, #0]
 800d63c:	4b08      	ldr	r3, [pc, #32]	; (800d660 <mpu_reset_fifo+0x200>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	7959      	ldrb	r1, [r3, #5]
 800d642:	4b08      	ldr	r3, [pc, #32]	; (800d664 <mpu_reset_fifo+0x204>)
 800d644:	2201      	movs	r2, #1
 800d646:	f002 ff4b 	bl	80104e0 <dmp_i2c_write>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <mpu_reset_fifo+0x1f6>
            return -1;
 800d650:	f04f 33ff 	mov.w	r3, #4294967295
 800d654:	e000      	b.n	800d658 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20000028 	.word	0x20000028
 800d664:	20000038 	.word	0x20000038

0800d668 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800d670:	4b16      	ldr	r3, [pc, #88]	; (800d6cc <mpu_get_gyro_fsr+0x64>)
 800d672:	7a1b      	ldrb	r3, [r3, #8]
 800d674:	2b03      	cmp	r3, #3
 800d676:	d81e      	bhi.n	800d6b6 <mpu_get_gyro_fsr+0x4e>
 800d678:	a201      	add	r2, pc, #4	; (adr r2, 800d680 <mpu_get_gyro_fsr+0x18>)
 800d67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67e:	bf00      	nop
 800d680:	0800d691 	.word	0x0800d691
 800d684:	0800d699 	.word	0x0800d699
 800d688:	0800d6a3 	.word	0x0800d6a3
 800d68c:	0800d6ad 	.word	0x0800d6ad
    case INV_FSR_250DPS:
        fsr[0] = 250;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	22fa      	movs	r2, #250	; 0xfa
 800d694:	801a      	strh	r2, [r3, #0]
        break;
 800d696:	e012      	b.n	800d6be <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d69e:	801a      	strh	r2, [r3, #0]
        break;
 800d6a0:	e00d      	b.n	800d6be <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6a8:	801a      	strh	r2, [r3, #0]
        break;
 800d6aa:	e008      	b.n	800d6be <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d6b2:	801a      	strh	r2, [r3, #0]
        break;
 800d6b4:	e003      	b.n	800d6be <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	801a      	strh	r2, [r3, #0]
        break;
 800d6bc:	bf00      	nop
    }
    return 0;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr
 800d6cc:	20000028 	.word	0x20000028

0800d6d0 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d6da:	4b26      	ldr	r3, [pc, #152]	; (800d774 <mpu_set_gyro_fsr+0xa4>)
 800d6dc:	7a9b      	ldrb	r3, [r3, #10]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d102      	bne.n	800d6e8 <mpu_set_gyro_fsr+0x18>
        return -1;
 800d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e6:	e041      	b.n	800d76c <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d6ee:	d017      	beq.n	800d720 <mpu_set_gyro_fsr+0x50>
 800d6f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d6f4:	dc17      	bgt.n	800d726 <mpu_set_gyro_fsr+0x56>
 800d6f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6fa:	d00e      	beq.n	800d71a <mpu_set_gyro_fsr+0x4a>
 800d6fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d700:	dc11      	bgt.n	800d726 <mpu_set_gyro_fsr+0x56>
 800d702:	2bfa      	cmp	r3, #250	; 0xfa
 800d704:	d003      	beq.n	800d70e <mpu_set_gyro_fsr+0x3e>
 800d706:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d70a:	d003      	beq.n	800d714 <mpu_set_gyro_fsr+0x44>
 800d70c:	e00b      	b.n	800d726 <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
        break;
 800d712:	e00b      	b.n	800d72c <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800d714:	2308      	movs	r3, #8
 800d716:	73fb      	strb	r3, [r7, #15]
        break;
 800d718:	e008      	b.n	800d72c <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800d71a:	2310      	movs	r3, #16
 800d71c:	73fb      	strb	r3, [r7, #15]
        break;
 800d71e:	e005      	b.n	800d72c <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 800d720:	2318      	movs	r3, #24
 800d722:	73fb      	strb	r3, [r7, #15]
        break;
 800d724:	e002      	b.n	800d72c <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800d726:	f04f 33ff 	mov.w	r3, #4294967295
 800d72a:	e01f      	b.n	800d76c <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800d72c:	4b11      	ldr	r3, [pc, #68]	; (800d774 <mpu_set_gyro_fsr+0xa4>)
 800d72e:	7a1a      	ldrb	r2, [r3, #8]
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	08db      	lsrs	r3, r3, #3
 800d734:	b2db      	uxtb	r3, r3
 800d736:	429a      	cmp	r2, r3
 800d738:	d101      	bne.n	800d73e <mpu_set_gyro_fsr+0x6e>
        return 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	e016      	b.n	800d76c <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800d73e:	4b0d      	ldr	r3, [pc, #52]	; (800d774 <mpu_set_gyro_fsr+0xa4>)
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	7818      	ldrb	r0, [r3, #0]
 800d744:	4b0b      	ldr	r3, [pc, #44]	; (800d774 <mpu_set_gyro_fsr+0xa4>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	7999      	ldrb	r1, [r3, #6]
 800d74a:	f107 030f 	add.w	r3, r7, #15
 800d74e:	2201      	movs	r2, #1
 800d750:	f002 fec6 	bl	80104e0 <dmp_i2c_write>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d002      	beq.n	800d760 <mpu_set_gyro_fsr+0x90>
        return -1;
 800d75a:	f04f 33ff 	mov.w	r3, #4294967295
 800d75e:	e005      	b.n	800d76c <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	08db      	lsrs	r3, r3, #3
 800d764:	b2da      	uxtb	r2, r3
 800d766:	4b03      	ldr	r3, [pc, #12]	; (800d774 <mpu_set_gyro_fsr+0xa4>)
 800d768:	721a      	strb	r2, [r3, #8]
    return 0;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	20000028 	.word	0x20000028

0800d778 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800d780:	4b19      	ldr	r3, [pc, #100]	; (800d7e8 <mpu_get_accel_fsr+0x70>)
 800d782:	7a5b      	ldrb	r3, [r3, #9]
 800d784:	2b03      	cmp	r3, #3
 800d786:	d81b      	bhi.n	800d7c0 <mpu_get_accel_fsr+0x48>
 800d788:	a201      	add	r2, pc, #4	; (adr r2, 800d790 <mpu_get_accel_fsr+0x18>)
 800d78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78e:	bf00      	nop
 800d790:	0800d7a1 	.word	0x0800d7a1
 800d794:	0800d7a9 	.word	0x0800d7a9
 800d798:	0800d7b1 	.word	0x0800d7b1
 800d79c:	0800d7b9 	.word	0x0800d7b9
    case INV_FSR_2G:
        fsr[0] = 2;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	701a      	strb	r2, [r3, #0]
        break;
 800d7a6:	e00e      	b.n	800d7c6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	701a      	strb	r2, [r3, #0]
        break;
 800d7ae:	e00a      	b.n	800d7c6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2208      	movs	r2, #8
 800d7b4:	701a      	strb	r2, [r3, #0]
        break;
 800d7b6:	e006      	b.n	800d7c6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2210      	movs	r2, #16
 800d7bc:	701a      	strb	r2, [r3, #0]
        break;
 800d7be:	e002      	b.n	800d7c6 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800d7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c4:	e00a      	b.n	800d7dc <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800d7c6:	4b08      	ldr	r3, [pc, #32]	; (800d7e8 <mpu_get_accel_fsr+0x70>)
 800d7c8:	7cdb      	ldrb	r3, [r3, #19]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d005      	beq.n	800d7da <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	701a      	strb	r2, [r3, #0]
    return 0;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	20000028 	.word	0x20000028

0800d7ec <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d7f6:	4b30      	ldr	r3, [pc, #192]	; (800d8b8 <mpu_set_accel_fsr+0xcc>)
 800d7f8:	7a9b      	ldrb	r3, [r3, #10]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <mpu_set_accel_fsr+0x18>
        return -1;
 800d7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d802:	e054      	b.n	800d8ae <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 800d804:	79fb      	ldrb	r3, [r7, #7]
 800d806:	3b02      	subs	r3, #2
 800d808:	2b0e      	cmp	r3, #14
 800d80a:	d82d      	bhi.n	800d868 <mpu_set_accel_fsr+0x7c>
 800d80c:	a201      	add	r2, pc, #4	; (adr r2, 800d814 <mpu_set_accel_fsr+0x28>)
 800d80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d812:	bf00      	nop
 800d814:	0800d851 	.word	0x0800d851
 800d818:	0800d869 	.word	0x0800d869
 800d81c:	0800d857 	.word	0x0800d857
 800d820:	0800d869 	.word	0x0800d869
 800d824:	0800d869 	.word	0x0800d869
 800d828:	0800d869 	.word	0x0800d869
 800d82c:	0800d85d 	.word	0x0800d85d
 800d830:	0800d869 	.word	0x0800d869
 800d834:	0800d869 	.word	0x0800d869
 800d838:	0800d869 	.word	0x0800d869
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	0800d869 	.word	0x0800d869
 800d844:	0800d869 	.word	0x0800d869
 800d848:	0800d869 	.word	0x0800d869
 800d84c:	0800d863 	.word	0x0800d863
    case 2:
        data = INV_FSR_2G << 3;
 800d850:	2300      	movs	r3, #0
 800d852:	73fb      	strb	r3, [r7, #15]
        break;
 800d854:	e00b      	b.n	800d86e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800d856:	2308      	movs	r3, #8
 800d858:	73fb      	strb	r3, [r7, #15]
        break;
 800d85a:	e008      	b.n	800d86e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 800d85c:	2310      	movs	r3, #16
 800d85e:	73fb      	strb	r3, [r7, #15]
        break;
 800d860:	e005      	b.n	800d86e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800d862:	2318      	movs	r3, #24
 800d864:	73fb      	strb	r3, [r7, #15]
        break;
 800d866:	e002      	b.n	800d86e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 800d868:	f04f 33ff 	mov.w	r3, #4294967295
 800d86c:	e01f      	b.n	800d8ae <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800d86e:	4b12      	ldr	r3, [pc, #72]	; (800d8b8 <mpu_set_accel_fsr+0xcc>)
 800d870:	7a5a      	ldrb	r2, [r3, #9]
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	08db      	lsrs	r3, r3, #3
 800d876:	b2db      	uxtb	r3, r3
 800d878:	429a      	cmp	r2, r3
 800d87a:	d101      	bne.n	800d880 <mpu_set_accel_fsr+0x94>
        return 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e016      	b.n	800d8ae <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800d880:	4b0d      	ldr	r3, [pc, #52]	; (800d8b8 <mpu_set_accel_fsr+0xcc>)
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	7818      	ldrb	r0, [r3, #0]
 800d886:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <mpu_set_accel_fsr+0xcc>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	79d9      	ldrb	r1, [r3, #7]
 800d88c:	f107 030f 	add.w	r3, r7, #15
 800d890:	2201      	movs	r2, #1
 800d892:	f002 fe25 	bl	80104e0 <dmp_i2c_write>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <mpu_set_accel_fsr+0xb6>
        return -1;
 800d89c:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a0:	e005      	b.n	800d8ae <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
 800d8a4:	08db      	lsrs	r3, r3, #3
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	4b03      	ldr	r3, [pc, #12]	; (800d8b8 <mpu_set_accel_fsr+0xcc>)
 800d8aa:	725a      	strb	r2, [r3, #9]
    return 0;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20000028 	.word	0x20000028

0800d8bc <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 800d8c4:	4b1b      	ldr	r3, [pc, #108]	; (800d934 <mpu_get_lpf+0x78>)
 800d8c6:	7adb      	ldrb	r3, [r3, #11]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	2b05      	cmp	r3, #5
 800d8cc:	d826      	bhi.n	800d91c <mpu_get_lpf+0x60>
 800d8ce:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <mpu_get_lpf+0x18>)
 800d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d4:	0800d8ed 	.word	0x0800d8ed
 800d8d8:	0800d8f5 	.word	0x0800d8f5
 800d8dc:	0800d8fd 	.word	0x0800d8fd
 800d8e0:	0800d905 	.word	0x0800d905
 800d8e4:	0800d90d 	.word	0x0800d90d
 800d8e8:	0800d915 	.word	0x0800d915
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	22bc      	movs	r2, #188	; 0xbc
 800d8f0:	801a      	strh	r2, [r3, #0]
        break;
 800d8f2:	e017      	b.n	800d924 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2262      	movs	r2, #98	; 0x62
 800d8f8:	801a      	strh	r2, [r3, #0]
        break;
 800d8fa:	e013      	b.n	800d924 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	222a      	movs	r2, #42	; 0x2a
 800d900:	801a      	strh	r2, [r3, #0]
        break;
 800d902:	e00f      	b.n	800d924 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2214      	movs	r2, #20
 800d908:	801a      	strh	r2, [r3, #0]
        break;
 800d90a:	e00b      	b.n	800d924 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	220a      	movs	r2, #10
 800d910:	801a      	strh	r2, [r3, #0]
        break;
 800d912:	e007      	b.n	800d924 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2205      	movs	r2, #5
 800d918:	801a      	strh	r2, [r3, #0]
        break;
 800d91a:	e003      	b.n	800d924 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	801a      	strh	r2, [r3, #0]
        break;
 800d922:	bf00      	nop
    }
    return 0;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20000028 	.word	0x20000028

0800d938 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d942:	4b23      	ldr	r3, [pc, #140]	; (800d9d0 <mpu_set_lpf+0x98>)
 800d944:	7a9b      	ldrb	r3, [r3, #10]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <mpu_set_lpf+0x18>
        return -1;
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295
 800d94e:	e03b      	b.n	800d9c8 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 800d950:	88fb      	ldrh	r3, [r7, #6]
 800d952:	2bbb      	cmp	r3, #187	; 0xbb
 800d954:	d902      	bls.n	800d95c <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800d956:	2301      	movs	r3, #1
 800d958:	73fb      	strb	r3, [r7, #15]
 800d95a:	e019      	b.n	800d990 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 800d95c:	88fb      	ldrh	r3, [r7, #6]
 800d95e:	2b61      	cmp	r3, #97	; 0x61
 800d960:	d902      	bls.n	800d968 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800d962:	2302      	movs	r3, #2
 800d964:	73fb      	strb	r3, [r7, #15]
 800d966:	e013      	b.n	800d990 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 800d968:	88fb      	ldrh	r3, [r7, #6]
 800d96a:	2b29      	cmp	r3, #41	; 0x29
 800d96c:	d902      	bls.n	800d974 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800d96e:	2303      	movs	r3, #3
 800d970:	73fb      	strb	r3, [r7, #15]
 800d972:	e00d      	b.n	800d990 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	2b13      	cmp	r3, #19
 800d978:	d902      	bls.n	800d980 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 800d97a:	2304      	movs	r3, #4
 800d97c:	73fb      	strb	r3, [r7, #15]
 800d97e:	e007      	b.n	800d990 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800d980:	88fb      	ldrh	r3, [r7, #6]
 800d982:	2b09      	cmp	r3, #9
 800d984:	d902      	bls.n	800d98c <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800d986:	2305      	movs	r3, #5
 800d988:	73fb      	strb	r3, [r7, #15]
 800d98a:	e001      	b.n	800d990 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 800d98c:	2306      	movs	r3, #6
 800d98e:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 800d990:	4b0f      	ldr	r3, [pc, #60]	; (800d9d0 <mpu_set_lpf+0x98>)
 800d992:	7ada      	ldrb	r2, [r3, #11]
 800d994:	7bfb      	ldrb	r3, [r7, #15]
 800d996:	429a      	cmp	r2, r3
 800d998:	d101      	bne.n	800d99e <mpu_set_lpf+0x66>
        return 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	e014      	b.n	800d9c8 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800d99e:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <mpu_set_lpf+0x98>)
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	7818      	ldrb	r0, [r3, #0]
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	; (800d9d0 <mpu_set_lpf+0x98>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	7899      	ldrb	r1, [r3, #2]
 800d9aa:	f107 030f 	add.w	r3, r7, #15
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f002 fd96 	bl	80104e0 <dmp_i2c_write>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d002      	beq.n	800d9c0 <mpu_set_lpf+0x88>
        return -1;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	e003      	b.n	800d9c8 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 800d9c0:	7bfa      	ldrb	r2, [r7, #15]
 800d9c2:	4b03      	ldr	r3, [pc, #12]	; (800d9d0 <mpu_set_lpf+0x98>)
 800d9c4:	72da      	strb	r2, [r3, #11]
    return 0;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20000028 	.word	0x20000028

0800d9d4 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 800d9dc:	4b09      	ldr	r3, [pc, #36]	; (800da04 <mpu_get_sample_rate+0x30>)
 800d9de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d002      	beq.n	800d9ec <mpu_get_sample_rate+0x18>
        return -1;
 800d9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ea:	e004      	b.n	800d9f6 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 800d9ec:	4b05      	ldr	r3, [pc, #20]	; (800da04 <mpu_get_sample_rate+0x30>)
 800d9ee:	89da      	ldrh	r2, [r3, #14]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	801a      	strh	r2, [r3, #0]
    return 0;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	370c      	adds	r7, #12
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	20000028 	.word	0x20000028

0800da08 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800da12:	4b2f      	ldr	r3, [pc, #188]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800da14:	7a9b      	ldrb	r3, [r3, #10]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d102      	bne.n	800da20 <mpu_set_sample_rate+0x18>
        return -1;
 800da1a:	f04f 33ff 	mov.w	r3, #4294967295
 800da1e:	e053      	b.n	800dac8 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 800da20:	4b2b      	ldr	r3, [pc, #172]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800da22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da26:	2b00      	cmp	r3, #0
 800da28:	d002      	beq.n	800da30 <mpu_set_sample_rate+0x28>
        return -1;
 800da2a:	f04f 33ff 	mov.w	r3, #4294967295
 800da2e:	e04b      	b.n	800dac8 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 800da30:	4b27      	ldr	r3, [pc, #156]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800da32:	7d1b      	ldrb	r3, [r3, #20]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00f      	beq.n	800da58 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 800da38:	88fb      	ldrh	r3, [r7, #6]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d009      	beq.n	800da52 <mpu_set_sample_rate+0x4a>
 800da3e:	88fb      	ldrh	r3, [r7, #6]
 800da40:	2b28      	cmp	r3, #40	; 0x28
 800da42:	d806      	bhi.n	800da52 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800da44:	88fb      	ldrh	r3, [r7, #6]
 800da46:	b2db      	uxtb	r3, r3
 800da48:	4618      	mov	r0, r3
 800da4a:	f7ff fc8d 	bl	800d368 <mpu_lp_accel_mode>
                return 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	e03a      	b.n	800dac8 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800da52:	2000      	movs	r0, #0
 800da54:	f7ff fc88 	bl	800d368 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800da58:	88fb      	ldrh	r3, [r7, #6]
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d802      	bhi.n	800da64 <mpu_set_sample_rate+0x5c>
            rate = 4;
 800da5e:	2304      	movs	r3, #4
 800da60:	80fb      	strh	r3, [r7, #6]
 800da62:	e006      	b.n	800da72 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 800da64:	88fb      	ldrh	r3, [r7, #6]
 800da66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da6a:	d902      	bls.n	800da72 <mpu_set_sample_rate+0x6a>
            rate = 1000;
 800da6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da70:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800da72:	88fb      	ldrh	r3, [r7, #6]
 800da74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da78:	fb92 f3f3 	sdiv	r3, r2, r3
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	3b01      	subs	r3, #1
 800da80:	b2db      	uxtb	r3, r3
 800da82:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800da84:	4b12      	ldr	r3, [pc, #72]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	7818      	ldrb	r0, [r3, #0]
 800da8a:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	7859      	ldrb	r1, [r3, #1]
 800da90:	f107 030f 	add.w	r3, r7, #15
 800da94:	2201      	movs	r2, #1
 800da96:	f002 fd23 	bl	80104e0 <dmp_i2c_write>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <mpu_set_sample_rate+0x9e>
            return -1;
 800daa0:	f04f 33ff 	mov.w	r3, #4294967295
 800daa4:	e010      	b.n	800dac8 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800daa6:	7bfb      	ldrb	r3, [r7, #15]
 800daa8:	3301      	adds	r3, #1
 800daaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800daae:	fb92 f3f3 	sdiv	r3, r2, r3
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800dab6:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800dab8:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <mpu_set_sample_rate+0xc8>)
 800daba:	89db      	ldrh	r3, [r3, #14]
 800dabc:	085b      	lsrs	r3, r3, #1
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff ff39 	bl	800d938 <mpu_set_lpf>
        return 0;
 800dac6:	2300      	movs	r3, #0
    }
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3710      	adds	r7, #16
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20000028 	.word	0x20000028

0800dad4 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800dadc:	4b14      	ldr	r3, [pc, #80]	; (800db30 <mpu_get_gyro_sens+0x5c>)
 800dade:	7a1b      	ldrb	r3, [r3, #8]
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	d81b      	bhi.n	800db1c <mpu_get_gyro_sens+0x48>
 800dae4:	a201      	add	r2, pc, #4	; (adr r2, 800daec <mpu_get_gyro_sens+0x18>)
 800dae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daea:	bf00      	nop
 800daec:	0800dafd 	.word	0x0800dafd
 800daf0:	0800db05 	.word	0x0800db05
 800daf4:	0800db0d 	.word	0x0800db0d
 800daf8:	0800db15 	.word	0x0800db15
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a0d      	ldr	r2, [pc, #52]	; (800db34 <mpu_get_gyro_sens+0x60>)
 800db00:	601a      	str	r2, [r3, #0]
        break;
 800db02:	e00e      	b.n	800db22 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a0c      	ldr	r2, [pc, #48]	; (800db38 <mpu_get_gyro_sens+0x64>)
 800db08:	601a      	str	r2, [r3, #0]
        break;
 800db0a:	e00a      	b.n	800db22 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a0b      	ldr	r2, [pc, #44]	; (800db3c <mpu_get_gyro_sens+0x68>)
 800db10:	601a      	str	r2, [r3, #0]
        break;
 800db12:	e006      	b.n	800db22 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a0a      	ldr	r2, [pc, #40]	; (800db40 <mpu_get_gyro_sens+0x6c>)
 800db18:	601a      	str	r2, [r3, #0]
        break;
 800db1a:	e002      	b.n	800db22 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 800db1c:	f04f 33ff 	mov.w	r3, #4294967295
 800db20:	e000      	b.n	800db24 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	20000028 	.word	0x20000028
 800db34:	43030000 	.word	0x43030000
 800db38:	42830000 	.word	0x42830000
 800db3c:	42033333 	.word	0x42033333
 800db40:	41833333 	.word	0x41833333

0800db44 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800db4c:	4b1b      	ldr	r3, [pc, #108]	; (800dbbc <mpu_get_accel_sens+0x78>)
 800db4e:	7a5b      	ldrb	r3, [r3, #9]
 800db50:	2b03      	cmp	r3, #3
 800db52:	d81f      	bhi.n	800db94 <mpu_get_accel_sens+0x50>
 800db54:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <mpu_get_accel_sens+0x18>)
 800db56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5a:	bf00      	nop
 800db5c:	0800db6d 	.word	0x0800db6d
 800db60:	0800db77 	.word	0x0800db77
 800db64:	0800db81 	.word	0x0800db81
 800db68:	0800db8b 	.word	0x0800db8b
    case INV_FSR_2G:
        sens[0] = 16384;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800db72:	801a      	strh	r2, [r3, #0]
        break;
 800db74:	e011      	b.n	800db9a <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f641 729c 	movw	r2, #8092	; 0x1f9c
 800db7c:	801a      	strh	r2, [r3, #0]
        break;
 800db7e:	e00c      	b.n	800db9a <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800db86:	801a      	strh	r2, [r3, #0]
        break;
 800db88:	e007      	b.n	800db9a <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db90:	801a      	strh	r2, [r3, #0]
        break;
 800db92:	e002      	b.n	800db9a <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800db94:	f04f 33ff 	mov.w	r3, #4294967295
 800db98:	e00a      	b.n	800dbb0 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 800db9a:	4b08      	ldr	r3, [pc, #32]	; (800dbbc <mpu_get_accel_sens+0x78>)
 800db9c:	7cdb      	ldrb	r3, [r3, #19]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d005      	beq.n	800dbae <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	085b      	lsrs	r3, r3, #1
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	801a      	strh	r2, [r3, #0]
    return 0;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	20000028 	.word	0x20000028

0800dbc0 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 800dbc8:	4b05      	ldr	r3, [pc, #20]	; (800dbe0 <mpu_get_fifo_config+0x20>)
 800dbca:	7c1a      	ldrb	r2, [r3, #16]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	701a      	strb	r2, [r3, #0]
    return 0;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	370c      	adds	r7, #12
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	20000028 	.word	0x20000028

0800dbe4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	f023 0301 	bic.w	r3, r3, #1
 800dbf8:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800dbfa:	4b22      	ldr	r3, [pc, #136]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dbfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <mpu_configure_fifo+0x24>
        return 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	e038      	b.n	800dc7a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800dc08:	4b1e      	ldr	r3, [pc, #120]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc0a:	7a9b      	ldrb	r3, [r3, #10]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d102      	bne.n	800dc16 <mpu_configure_fifo+0x32>
            return -1;
 800dc10:	f04f 33ff 	mov.w	r3, #4294967295
 800dc14:	e031      	b.n	800dc7a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800dc16:	4b1b      	ldr	r3, [pc, #108]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc18:	7c1b      	ldrb	r3, [r3, #16]
 800dc1a:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800dc1c:	4b19      	ldr	r3, [pc, #100]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc1e:	7a9a      	ldrb	r2, [r3, #10]
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	4013      	ands	r3, r2
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	4b17      	ldr	r3, [pc, #92]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc28:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800dc2a:	4b16      	ldr	r3, [pc, #88]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc2c:	7c1b      	ldrb	r3, [r3, #16]
 800dc2e:	79fa      	ldrb	r2, [r7, #7]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d003      	beq.n	800dc3c <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800dc34:	f04f 33ff 	mov.w	r3, #4294967295
 800dc38:	60fb      	str	r3, [r7, #12]
 800dc3a:	e001      	b.n	800dc40 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d103      	bne.n	800dc4e <mpu_configure_fifo+0x6a>
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc48:	7d1b      	ldrb	r3, [r3, #20]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800dc4e:	2001      	movs	r0, #1
 800dc50:	f7ff fa1c 	bl	800d08c <set_int_enable>
 800dc54:	e002      	b.n	800dc5c <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800dc56:	2000      	movs	r0, #0
 800dc58:	f7ff fa18 	bl	800d08c <set_int_enable>
        if (sensors) {
 800dc5c:	79fb      	ldrb	r3, [r7, #7]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00a      	beq.n	800dc78 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800dc62:	f7ff fbfd 	bl	800d460 <mpu_reset_fifo>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d005      	beq.n	800dc78 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 800dc6c:	4a05      	ldr	r2, [pc, #20]	; (800dc84 <mpu_configure_fifo+0xa0>)
 800dc6e:	7afb      	ldrb	r3, [r7, #11]
 800dc70:	7413      	strb	r3, [r2, #16]
                return -1;
 800dc72:	f04f 33ff 	mov.w	r3, #4294967295
 800dc76:	e000      	b.n	800dc7a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800dc78:	68fb      	ldr	r3, [r7, #12]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20000028 	.word	0x20000028

0800dc88 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	4603      	mov	r3, r0
 800dc90:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	73fb      	strb	r3, [r7, #15]
 800dca0:	e007      	b.n	800dcb2 <mpu_set_sensors+0x2a>
    else if (sensors)
 800dca2:	79fb      	ldrb	r3, [r7, #7]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <mpu_set_sensors+0x26>
        data = 0;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73fb      	strb	r3, [r7, #15]
 800dcac:	e001      	b.n	800dcb2 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800dcae:	2340      	movs	r3, #64	; 0x40
 800dcb0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800dcb2:	4b37      	ldr	r3, [pc, #220]	; (800dd90 <mpu_set_sensors+0x108>)
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	7818      	ldrb	r0, [r3, #0]
 800dcb8:	4b35      	ldr	r3, [pc, #212]	; (800dd90 <mpu_set_sensors+0x108>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	7d59      	ldrb	r1, [r3, #21]
 800dcbe:	f107 030f 	add.w	r3, r7, #15
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f002 fc0c 	bl	80104e0 <dmp_i2c_write>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d005      	beq.n	800dcda <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 800dcce:	4b30      	ldr	r3, [pc, #192]	; (800dd90 <mpu_set_sensors+0x108>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	729a      	strb	r2, [r3, #10]
        return -1;
 800dcd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd8:	e056      	b.n	800dd88 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <mpu_set_sensors+0x108>)
 800dce4:	731a      	strb	r2, [r3, #12]

    data = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d104      	bne.n	800dcfe <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 800dcf4:	7bfb      	ldrb	r3, [r7, #15]
 800dcf6:	f043 0304 	orr.w	r3, r3, #4
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	f003 0320 	and.w	r3, r3, #32
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d104      	bne.n	800dd12 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
 800dd0a:	f043 0302 	orr.w	r3, r3, #2
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800dd12:	79fb      	ldrb	r3, [r7, #7]
 800dd14:	f003 0310 	and.w	r3, r3, #16
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d104      	bne.n	800dd26 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
 800dd1e:	f043 0301 	orr.w	r3, r3, #1
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800dd26:	79fb      	ldrb	r3, [r7, #7]
 800dd28:	f003 0308 	and.w	r3, r3, #8
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d104      	bne.n	800dd3a <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800dd3a:	4b15      	ldr	r3, [pc, #84]	; (800dd90 <mpu_set_sensors+0x108>)
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	7818      	ldrb	r0, [r3, #0]
 800dd40:	4b13      	ldr	r3, [pc, #76]	; (800dd90 <mpu_set_sensors+0x108>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	7d99      	ldrb	r1, [r3, #22]
 800dd46:	f107 030f 	add.w	r3, r7, #15
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f002 fbc8 	bl	80104e0 <dmp_i2c_write>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d005      	beq.n	800dd62 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 800dd56:	4b0e      	ldr	r3, [pc, #56]	; (800dd90 <mpu_set_sensors+0x108>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	729a      	strb	r2, [r3, #10]
        return -1;
 800dd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd60:	e012      	b.n	800dd88 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <mpu_set_sensors+0xec>
 800dd68:	79fb      	ldrb	r3, [r7, #7]
 800dd6a:	2b08      	cmp	r3, #8
 800dd6c:	d002      	beq.n	800dd74 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800dd6e:	2000      	movs	r0, #0
 800dd70:	f000 f954 	bl	800e01c <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 800dd74:	4a06      	ldr	r2, [pc, #24]	; (800dd90 <mpu_set_sensors+0x108>)
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800dd7a:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <mpu_set_sensors+0x108>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800dd80:	2032      	movs	r0, #50	; 0x32
 800dd82:	f002 fb95 	bl	80104b0 <my_hal_delay>
    return 0;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20000028 	.word	0x20000028

0800dd94 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
 800dda0:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 800dda2:	4b3a      	ldr	r3, [pc, #232]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800dda4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d102      	bne.n	800ddb2 <mpu_read_fifo_stream+0x1e>
        return -1;
 800ddac:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb0:	e068      	b.n	800de84 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 800ddb2:	4b36      	ldr	r3, [pc, #216]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800ddb4:	7a9b      	ldrb	r3, [r3, #10]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d102      	bne.n	800ddc0 <mpu_read_fifo_stream+0x2c>
        return -1;
 800ddba:	f04f 33ff 	mov.w	r3, #4294967295
 800ddbe:	e061      	b.n	800de84 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800ddc0:	4b32      	ldr	r3, [pc, #200]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	7818      	ldrb	r0, [r3, #0]
 800ddc6:	4b31      	ldr	r3, [pc, #196]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	7b19      	ldrb	r1, [r3, #12]
 800ddcc:	f107 0314 	add.w	r3, r7, #20
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	f002 fba7 	bl	8010524 <dmp_i2c_read>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <mpu_read_fifo_stream+0x4e>
        return -1;
 800dddc:	f04f 33ff 	mov.w	r3, #4294967295
 800dde0:	e050      	b.n	800de84 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800dde2:	7d3b      	ldrb	r3, [r7, #20]
 800dde4:	021b      	lsls	r3, r3, #8
 800dde6:	b21a      	sxth	r2, r3
 800dde8:	7d7b      	ldrb	r3, [r7, #21]
 800ddea:	b21b      	sxth	r3, r3
 800ddec:	4313      	orrs	r3, r2
 800ddee:	b21b      	sxth	r3, r3
 800ddf0:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 800ddf2:	8afa      	ldrh	r2, [r7, #22]
 800ddf4:	89fb      	ldrh	r3, [r7, #14]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d205      	bcs.n	800de06 <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
        return -1;
 800de00:	f04f 33ff 	mov.w	r3, #4294967295
 800de04:	e03e      	b.n	800de84 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800de06:	4b21      	ldr	r3, [pc, #132]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	885b      	ldrh	r3, [r3, #2]
 800de0c:	085b      	lsrs	r3, r3, #1
 800de0e:	b29b      	uxth	r3, r3
 800de10:	8afa      	ldrh	r2, [r7, #22]
 800de12:	429a      	cmp	r2, r3
 800de14:	d91a      	bls.n	800de4c <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800de16:	4b1d      	ldr	r3, [pc, #116]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	7818      	ldrb	r0, [r3, #0]
 800de1c:	4b1b      	ldr	r3, [pc, #108]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	7cd9      	ldrb	r1, [r3, #19]
 800de22:	f107 0314 	add.w	r3, r7, #20
 800de26:	2201      	movs	r2, #1
 800de28:	f002 fb7c 	bl	8010524 <dmp_i2c_read>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <mpu_read_fifo_stream+0xa4>
            return -1;
 800de32:	f04f 33ff 	mov.w	r3, #4294967295
 800de36:	e025      	b.n	800de84 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 800de38:	7d3b      	ldrb	r3, [r7, #20]
 800de3a:	f003 0310 	and.w	r3, r3, #16
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d004      	beq.n	800de4c <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 800de42:	f7ff fb0d 	bl	800d460 <mpu_reset_fifo>
            return -2;
 800de46:	f06f 0301 	mvn.w	r3, #1
 800de4a:	e01b      	b.n	800de84 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800de4c:	4b0f      	ldr	r3, [pc, #60]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	7818      	ldrb	r0, [r3, #0]
 800de52:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <mpu_read_fifo_stream+0xf8>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	7b59      	ldrb	r1, [r3, #13]
 800de58:	89fb      	ldrh	r3, [r7, #14]
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	f002 fb61 	bl	8010524 <dmp_i2c_read>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <mpu_read_fifo_stream+0xda>
        return -1;
 800de68:	f04f 33ff 	mov.w	r3, #4294967295
 800de6c:	e00a      	b.n	800de84 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 800de6e:	8afa      	ldrh	r2, [r7, #22]
 800de70:	89fb      	ldrh	r3, [r7, #14]
 800de72:	fbb2 f3f3 	udiv	r3, r2, r3
 800de76:	b29b      	uxth	r3, r3
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	3b01      	subs	r3, #1
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	701a      	strb	r2, [r3, #0]
    return 0;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20000028 	.word	0x20000028

0800de90 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800de9a:	4b5f      	ldr	r3, [pc, #380]	; (800e018 <mpu_set_bypass+0x188>)
 800de9c:	7c9b      	ldrb	r3, [r3, #18]
 800de9e:	79fa      	ldrb	r2, [r7, #7]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d101      	bne.n	800dea8 <mpu_set_bypass+0x18>
        return 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	e0b2      	b.n	800e00e <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d050      	beq.n	800df50 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800deae:	4b5a      	ldr	r3, [pc, #360]	; (800e018 <mpu_set_bypass+0x188>)
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	7818      	ldrb	r0, [r3, #0]
 800deb4:	4b58      	ldr	r3, [pc, #352]	; (800e018 <mpu_set_bypass+0x188>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	7919      	ldrb	r1, [r3, #4]
 800deba:	f107 030f 	add.w	r3, r7, #15
 800debe:	2201      	movs	r2, #1
 800dec0:	f002 fb30 	bl	8010524 <dmp_i2c_read>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <mpu_set_bypass+0x40>
            return -1;
 800deca:	f04f 33ff 	mov.w	r3, #4294967295
 800dece:	e09e      	b.n	800e00e <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	f023 0320 	bic.w	r3, r3, #32
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800deda:	4b4f      	ldr	r3, [pc, #316]	; (800e018 <mpu_set_bypass+0x188>)
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	7818      	ldrb	r0, [r3, #0]
 800dee0:	4b4d      	ldr	r3, [pc, #308]	; (800e018 <mpu_set_bypass+0x188>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	7919      	ldrb	r1, [r3, #4]
 800dee6:	f107 030f 	add.w	r3, r7, #15
 800deea:	2201      	movs	r2, #1
 800deec:	f002 faf8 	bl	80104e0 <dmp_i2c_write>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d002      	beq.n	800defc <mpu_set_bypass+0x6c>
            return -1;
 800def6:	f04f 33ff 	mov.w	r3, #4294967295
 800defa:	e088      	b.n	800e00e <mpu_set_bypass+0x17e>
        delay_ms(3);
 800defc:	2003      	movs	r0, #3
 800defe:	f002 fad7 	bl	80104b0 <my_hal_delay>
        tmp = BIT_BYPASS_EN;
 800df02:	2302      	movs	r3, #2
 800df04:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800df06:	4b44      	ldr	r3, [pc, #272]	; (800e018 <mpu_set_bypass+0x188>)
 800df08:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d004      	beq.n	800df1a <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df16:	b2db      	uxtb	r3, r3
 800df18:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800df1a:	4b3f      	ldr	r3, [pc, #252]	; (800e018 <mpu_set_bypass+0x188>)
 800df1c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800df2e:	4b3a      	ldr	r3, [pc, #232]	; (800e018 <mpu_set_bypass+0x188>)
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	7818      	ldrb	r0, [r3, #0]
 800df34:	4b38      	ldr	r3, [pc, #224]	; (800e018 <mpu_set_bypass+0x188>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	7dd9      	ldrb	r1, [r3, #23]
 800df3a:	f107 030f 	add.w	r3, r7, #15
 800df3e:	2201      	movs	r2, #1
 800df40:	f002 face 	bl	80104e0 <dmp_i2c_write>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d05d      	beq.n	800e006 <mpu_set_bypass+0x176>
            return -1;
 800df4a:	f04f 33ff 	mov.w	r3, #4294967295
 800df4e:	e05e      	b.n	800e00e <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800df50:	4b31      	ldr	r3, [pc, #196]	; (800e018 <mpu_set_bypass+0x188>)
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	7818      	ldrb	r0, [r3, #0]
 800df56:	4b30      	ldr	r3, [pc, #192]	; (800e018 <mpu_set_bypass+0x188>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	7919      	ldrb	r1, [r3, #4]
 800df5c:	f107 030f 	add.w	r3, r7, #15
 800df60:	2201      	movs	r2, #1
 800df62:	f002 fadf 	bl	8010524 <dmp_i2c_read>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <mpu_set_bypass+0xe2>
            return -1;
 800df6c:	f04f 33ff 	mov.w	r3, #4294967295
 800df70:	e04d      	b.n	800e00e <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800df72:	4b29      	ldr	r3, [pc, #164]	; (800e018 <mpu_set_bypass+0x188>)
 800df74:	7a9b      	ldrb	r3, [r3, #10]
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	f043 0320 	orr.w	r3, r3, #32
 800df84:	b2db      	uxtb	r3, r3
 800df86:	73fb      	strb	r3, [r7, #15]
 800df88:	e004      	b.n	800df94 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
 800df8c:	f023 0320 	bic.w	r3, r3, #32
 800df90:	b2db      	uxtb	r3, r3
 800df92:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800df94:	4b20      	ldr	r3, [pc, #128]	; (800e018 <mpu_set_bypass+0x188>)
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	7818      	ldrb	r0, [r3, #0]
 800df9a:	4b1f      	ldr	r3, [pc, #124]	; (800e018 <mpu_set_bypass+0x188>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	7919      	ldrb	r1, [r3, #4]
 800dfa0:	f107 030f 	add.w	r3, r7, #15
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f002 fa9b 	bl	80104e0 <dmp_i2c_write>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d002      	beq.n	800dfb6 <mpu_set_bypass+0x126>
            return -1;
 800dfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb4:	e02b      	b.n	800e00e <mpu_set_bypass+0x17e>
        delay_ms(3);
 800dfb6:	2003      	movs	r0, #3
 800dfb8:	f002 fa7a 	bl	80104b0 <my_hal_delay>
        if (st.chip_cfg.active_low_int)
 800dfbc:	4b16      	ldr	r3, [pc, #88]	; (800e018 <mpu_set_bypass+0x188>)
 800dfbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800dfc6:	2380      	movs	r3, #128	; 0x80
 800dfc8:	73fb      	strb	r3, [r7, #15]
 800dfca:	e001      	b.n	800dfd0 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800dfd0:	4b11      	ldr	r3, [pc, #68]	; (800e018 <mpu_set_bypass+0x188>)
 800dfd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d004      	beq.n	800dfe4 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
 800dfdc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800dfe4:	4b0c      	ldr	r3, [pc, #48]	; (800e018 <mpu_set_bypass+0x188>)
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	7818      	ldrb	r0, [r3, #0]
 800dfea:	4b0b      	ldr	r3, [pc, #44]	; (800e018 <mpu_set_bypass+0x188>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	7dd9      	ldrb	r1, [r3, #23]
 800dff0:	f107 030f 	add.w	r3, r7, #15
 800dff4:	2201      	movs	r2, #1
 800dff6:	f002 fa73 	bl	80104e0 <dmp_i2c_write>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <mpu_set_bypass+0x176>
            return -1;
 800e000:	f04f 33ff 	mov.w	r3, #4294967295
 800e004:	e003      	b.n	800e00e <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800e006:	4a04      	ldr	r2, [pc, #16]	; (800e018 <mpu_set_bypass+0x188>)
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	7493      	strb	r3, [r2, #18]
    return 0;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20000028 	.word	0x20000028

0800e01c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800e026:	4b1e      	ldr	r3, [pc, #120]	; (800e0a0 <mpu_set_int_latched+0x84>)
 800e028:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e02c:	79fa      	ldrb	r2, [r7, #7]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d101      	bne.n	800e036 <mpu_set_int_latched+0x1a>
        return 0;
 800e032:	2300      	movs	r3, #0
 800e034:	e030      	b.n	800e098 <mpu_set_int_latched+0x7c>

    if (enable)
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800e03c:	2330      	movs	r3, #48	; 0x30
 800e03e:	73fb      	strb	r3, [r7, #15]
 800e040:	e001      	b.n	800e046 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800e046:	4b16      	ldr	r3, [pc, #88]	; (800e0a0 <mpu_set_int_latched+0x84>)
 800e048:	7c9b      	ldrb	r3, [r3, #18]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d004      	beq.n	800e058 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
 800e050:	f043 0302 	orr.w	r3, r3, #2
 800e054:	b2db      	uxtb	r3, r3
 800e056:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800e058:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <mpu_set_int_latched+0x84>)
 800e05a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d004      	beq.n	800e06c <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 800e062:	7bfb      	ldrb	r3, [r7, #15]
 800e064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800e06c:	4b0c      	ldr	r3, [pc, #48]	; (800e0a0 <mpu_set_int_latched+0x84>)
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	7818      	ldrb	r0, [r3, #0]
 800e072:	4b0b      	ldr	r3, [pc, #44]	; (800e0a0 <mpu_set_int_latched+0x84>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	7dd9      	ldrb	r1, [r3, #23]
 800e078:	f107 030f 	add.w	r3, r7, #15
 800e07c:	2201      	movs	r2, #1
 800e07e:	f002 fa2f 	bl	80104e0 <dmp_i2c_write>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <mpu_set_int_latched+0x72>
        return -1;
 800e088:	f04f 33ff 	mov.w	r3, #4294967295
 800e08c:	e004      	b.n	800e098 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 800e08e:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <mpu_set_int_latched+0x84>)
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	20000028 	.word	0x20000028

0800e0a4 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 800e0ac:	4b41      	ldr	r3, [pc, #260]	; (800e1b4 <get_accel_prod_shift+0x110>)
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	7818      	ldrb	r0, [r3, #0]
 800e0b2:	f107 0310 	add.w	r3, r7, #16
 800e0b6:	2204      	movs	r2, #4
 800e0b8:	210d      	movs	r1, #13
 800e0ba:	f002 fa33 	bl	8010524 <dmp_i2c_read>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <get_accel_prod_shift+0x24>
        return 0x07;
 800e0c4:	2307      	movs	r3, #7
 800e0c6:	e071      	b.n	800e1ac <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800e0c8:	7c3b      	ldrb	r3, [r7, #16]
 800e0ca:	10db      	asrs	r3, r3, #3
 800e0cc:	b25b      	sxtb	r3, r3
 800e0ce:	f003 031c 	and.w	r3, r3, #28
 800e0d2:	b25a      	sxtb	r2, r3
 800e0d4:	7cfb      	ldrb	r3, [r7, #19]
 800e0d6:	111b      	asrs	r3, r3, #4
 800e0d8:	b25b      	sxtb	r3, r3
 800e0da:	f003 0303 	and.w	r3, r3, #3
 800e0de:	b25b      	sxtb	r3, r3
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	b25b      	sxtb	r3, r3
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800e0e8:	7c7b      	ldrb	r3, [r7, #17]
 800e0ea:	10db      	asrs	r3, r3, #3
 800e0ec:	b25b      	sxtb	r3, r3
 800e0ee:	f003 031c 	and.w	r3, r3, #28
 800e0f2:	b25a      	sxtb	r2, r3
 800e0f4:	7cfb      	ldrb	r3, [r7, #19]
 800e0f6:	109b      	asrs	r3, r3, #2
 800e0f8:	b25b      	sxtb	r3, r3
 800e0fa:	f003 0303 	and.w	r3, r3, #3
 800e0fe:	b25b      	sxtb	r3, r3
 800e100:	4313      	orrs	r3, r2
 800e102:	b25b      	sxtb	r3, r3
 800e104:	b2db      	uxtb	r3, r3
 800e106:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800e108:	7cbb      	ldrb	r3, [r7, #18]
 800e10a:	10db      	asrs	r3, r3, #3
 800e10c:	b25b      	sxtb	r3, r3
 800e10e:	f003 031c 	and.w	r3, r3, #28
 800e112:	b25a      	sxtb	r2, r3
 800e114:	7cfb      	ldrb	r3, [r7, #19]
 800e116:	b25b      	sxtb	r3, r3
 800e118:	f003 0303 	and.w	r3, r3, #3
 800e11c:	b25b      	sxtb	r3, r3
 800e11e:	4313      	orrs	r3, r2
 800e120:	b25b      	sxtb	r3, r3
 800e122:	b2db      	uxtb	r3, r3
 800e124:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 800e126:	2300      	movs	r3, #0
 800e128:	75fb      	strb	r3, [r7, #23]
 800e12a:	e03b      	b.n	800e1a4 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
 800e12e:	3318      	adds	r3, #24
 800e130:	443b      	add	r3, r7
 800e132:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d107      	bne.n	800e14a <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	4413      	add	r3, r2
 800e142:	f04f 0200 	mov.w	r2, #0
 800e146:	601a      	str	r2, [r3, #0]
            continue;
 800e148:	e029      	b.n	800e19e <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	4413      	add	r3, r2
 800e152:	4a19      	ldr	r2, [pc, #100]	; (800e1b8 <get_accel_prod_shift+0x114>)
 800e154:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 800e156:	e00f      	b.n	800e178 <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 800e158:	7dfb      	ldrb	r3, [r7, #23]
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	4413      	add	r3, r2
 800e160:	edd3 7a00 	vldr	s15, [r3]
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	4413      	add	r3, r2
 800e16c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800e1bc <get_accel_prod_shift+0x118>
 800e170:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e174:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 800e178:	7dfb      	ldrb	r3, [r7, #23]
 800e17a:	f103 0218 	add.w	r2, r3, #24
 800e17e:	443a      	add	r2, r7
 800e180:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e184:	3a01      	subs	r2, #1
 800e186:	b2d1      	uxtb	r1, r2
 800e188:	f103 0218 	add.w	r2, r3, #24
 800e18c:	443a      	add	r2, r7
 800e18e:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800e192:	3318      	adds	r3, #24
 800e194:	443b      	add	r3, r7
 800e196:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1dc      	bne.n	800e158 <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	75fb      	strb	r3, [r7, #23]
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d9c0      	bls.n	800e12c <get_accel_prod_shift+0x88>
    }
    return 0;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20000028 	.word	0x20000028
 800e1b8:	3eae147b 	.word	0x3eae147b
 800e1bc:	3f845a1d 	.word	0x3f845a1d

0800e1c0 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08a      	sub	sp, #40	; 0x28
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800e1ce:	f107 030c 	add.w	r3, r7, #12
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff ff66 	bl	800e0a4 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 800e1d8:	2300      	movs	r3, #0
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
 800e1dc:	e063      	b.n	800e2a6 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800e1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	440b      	add	r3, r1
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	bfb8      	it	lt
 800e1f8:	425b      	neglt	r3, r3
 800e1fa:	ee07 3a90 	vmov	s15, r3
 800e1fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e202:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e2b8 <accel_self_test+0xf8>
 800e206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e20a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	3328      	adds	r3, #40	; 0x28
 800e214:	443b      	add	r3, r7
 800e216:	3b1c      	subs	r3, #28
 800e218:	edd3 7a00 	vldr	s15, [r3]
 800e21c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e224:	d023      	beq.n	800e26e <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 800e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	3328      	adds	r3, #40	; 0x28
 800e22c:	443b      	add	r3, r7
 800e22e:	3b1c      	subs	r3, #28
 800e230:	ed93 7a00 	vldr	s14, [r3]
 800e234:	edd7 6a07 	vldr	s13, [r7, #28]
 800e238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e244:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 800e248:	edd7 7a06 	vldr	s15, [r7, #24]
 800e24c:	eef0 7ae7 	vabs.f32	s15, s15
 800e250:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e2bc <accel_self_test+0xfc>
 800e254:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25c:	dd20      	ble.n	800e2a0 <accel_self_test+0xe0>
                result |= 1 << jj;
 800e25e:	2201      	movs	r2, #1
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	fa02 f303 	lsl.w	r3, r2, r3
 800e266:	6a3a      	ldr	r2, [r7, #32]
 800e268:	4313      	orrs	r3, r2
 800e26a:	623b      	str	r3, [r7, #32]
 800e26c:	e018      	b.n	800e2a0 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 800e26e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e2c0 <accel_self_test+0x100>
 800e272:	edd7 7a07 	vldr	s15, [r7, #28]
 800e276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e27e:	d408      	bmi.n	800e292 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 800e280:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e2c4 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 800e284:	edd7 7a07 	vldr	s15, [r7, #28]
 800e288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e290:	dd06      	ble.n	800e2a0 <accel_self_test+0xe0>
            result |= 1 << jj;
 800e292:	2201      	movs	r2, #1
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	fa02 f303 	lsl.w	r3, r2, r3
 800e29a:	6a3a      	ldr	r2, [r7, #32]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	dd98      	ble.n	800e1de <accel_self_test+0x1e>
    }

    return result;
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3728      	adds	r7, #40	; 0x28
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	47800000 	.word	0x47800000
 800e2bc:	3e0f5c29 	.word	0x3e0f5c29
 800e2c0:	3e99999a 	.word	0x3e99999a
 800e2c4:	3f733333 	.word	0x3f733333

0800e2c8 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800e2d6:	4b55      	ldr	r3, [pc, #340]	; (800e42c <gyro_self_test+0x164>)
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	7818      	ldrb	r0, [r3, #0]
 800e2dc:	f107 0308 	add.w	r3, r7, #8
 800e2e0:	2203      	movs	r2, #3
 800e2e2:	210d      	movs	r1, #13
 800e2e4:	f002 f91e 	bl	8010524 <dmp_i2c_read>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <gyro_self_test+0x2a>
        return 0x07;
 800e2ee:	2307      	movs	r3, #7
 800e2f0:	e097      	b.n	800e422 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 800e2f2:	7a3b      	ldrb	r3, [r7, #8]
 800e2f4:	f003 031f 	and.w	r3, r3, #31
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800e2fc:	7a7b      	ldrb	r3, [r7, #9]
 800e2fe:	f003 031f 	and.w	r3, r3, #31
 800e302:	b2db      	uxtb	r3, r3
 800e304:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 800e306:	7abb      	ldrb	r3, [r7, #10]
 800e308:	f003 031f 	and.w	r3, r3, #31
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 800e310:	2300      	movs	r3, #0
 800e312:	61fb      	str	r3, [r7, #28]
 800e314:	e080      	b.n	800e418 <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	4413      	add	r3, r2
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	440b      	add	r3, r1
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bfb8      	it	lt
 800e330:	425b      	neglt	r3, r3
 800e332:	ee07 3a90 	vmov	s15, r3
 800e336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e33a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e430 <gyro_self_test+0x168>
 800e33e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e342:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 800e346:	f107 0208 	add.w	r2, r7, #8
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	4413      	add	r3, r2
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d045      	beq.n	800e3e0 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 800e354:	eddf 7a37 	vldr	s15, [pc, #220]	; 800e434 <gyro_self_test+0x16c>
 800e358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e35c:	eddf 6a36 	vldr	s13, [pc, #216]	; 800e438 <gyro_self_test+0x170>
 800e360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e364:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800e368:	e007      	b.n	800e37a <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 800e36a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e36e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e43c <gyro_self_test+0x174>
 800e372:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e376:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800e37a:	f107 0208 	add.w	r2, r7, #8
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	4413      	add	r3, r2
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	3b01      	subs	r3, #1
 800e386:	b2d9      	uxtb	r1, r3
 800e388:	f107 0208 	add.w	r2, r7, #8
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	4413      	add	r3, r2
 800e390:	460a      	mov	r2, r1
 800e392:	701a      	strb	r2, [r3, #0]
 800e394:	f107 0208 	add.w	r2, r7, #8
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	4413      	add	r3, r2
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1e3      	bne.n	800e36a <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800e3a2:	edd7 6a04 	vldr	s13, [r7, #16]
 800e3a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800e3aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3b6:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800e3ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800e3be:	eef0 7ae7 	vabs.f32	s15, s15
 800e3c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e440 <gyro_self_test+0x178>
 800e3c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ce:	dd20      	ble.n	800e412 <gyro_self_test+0x14a>
                result |= 1 << jj;
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3d8:	69ba      	ldr	r2, [r7, #24]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	61bb      	str	r3, [r7, #24]
 800e3de:	e018      	b.n	800e412 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 800e3e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e3e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f0:	d408      	bmi.n	800e404 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 800e3f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e444 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 800e3f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e402:	dd06      	ble.n	800e412 <gyro_self_test+0x14a>
            result |= 1 << jj;
 800e404:	2201      	movs	r2, #1
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	fa02 f303 	lsl.w	r3, r2, r3
 800e40c:	69ba      	ldr	r2, [r7, #24]
 800e40e:	4313      	orrs	r3, r2
 800e410:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	3301      	adds	r3, #1
 800e416:	61fb      	str	r3, [r7, #28]
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	f77f af7b 	ble.w	800e316 <gyro_self_test+0x4e>
    }
    return result;
 800e420:	69bb      	ldr	r3, [r7, #24]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3720      	adds	r7, #32
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20000028 	.word	0x20000028
 800e430:	47800000 	.word	0x47800000
 800e434:	00000083 	.word	0x00000083
 800e438:	454cb000 	.word	0x454cb000
 800e43c:	3f85e354 	.word	0x3f85e354
 800e440:	3e0f5c29 	.word	0x3e0f5c29
 800e444:	42d20000 	.word	0x42d20000

0800e448 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 800e448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e44c:	b0b8      	sub	sp, #224	; 0xe0
 800e44e:	af00      	add	r7, sp, #0
 800e450:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 800e454:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e458:	4613      	mov	r3, r2
 800e45a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 800e45e:	2301      	movs	r3, #1
 800e460:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800e46a:	4ba5      	ldr	r3, [pc, #660]	; (800e700 <get_st_biases+0x2b8>)
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	7818      	ldrb	r0, [r3, #0]
 800e470:	4ba3      	ldr	r3, [pc, #652]	; (800e700 <get_st_biases+0x2b8>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	7d59      	ldrb	r1, [r3, #21]
 800e476:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e47a:	2202      	movs	r2, #2
 800e47c:	f002 f830 	bl	80104e0 <dmp_i2c_write>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <get_st_biases+0x44>
        return -1;
 800e486:	f04f 33ff 	mov.w	r3, #4294967295
 800e48a:	e34b      	b.n	800eb24 <get_st_biases+0x6dc>
    delay_ms(200);
 800e48c:	20c8      	movs	r0, #200	; 0xc8
 800e48e:	f002 f80f 	bl	80104b0 <my_hal_delay>
    data[0] = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800e498:	4b99      	ldr	r3, [pc, #612]	; (800e700 <get_st_biases+0x2b8>)
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	7818      	ldrb	r0, [r3, #0]
 800e49e:	4b98      	ldr	r3, [pc, #608]	; (800e700 <get_st_biases+0x2b8>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	7c59      	ldrb	r1, [r3, #17]
 800e4a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	f002 f819 	bl	80104e0 <dmp_i2c_write>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <get_st_biases+0x72>
        return -1;
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b8:	e334      	b.n	800eb24 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800e4ba:	4b91      	ldr	r3, [pc, #580]	; (800e700 <get_st_biases+0x2b8>)
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	7818      	ldrb	r0, [r3, #0]
 800e4c0:	4b8f      	ldr	r3, [pc, #572]	; (800e700 <get_st_biases+0x2b8>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	7959      	ldrb	r1, [r3, #5]
 800e4c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f002 f808 	bl	80104e0 <dmp_i2c_write>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d002      	beq.n	800e4dc <get_st_biases+0x94>
        return -1;
 800e4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4da:	e323      	b.n	800eb24 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800e4dc:	4b88      	ldr	r3, [pc, #544]	; (800e700 <get_st_biases+0x2b8>)
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	7818      	ldrb	r0, [r3, #0]
 800e4e2:	4b87      	ldr	r3, [pc, #540]	; (800e700 <get_st_biases+0x2b8>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	7d59      	ldrb	r1, [r3, #21]
 800e4e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f001 fff7 	bl	80104e0 <dmp_i2c_write>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <get_st_biases+0xb6>
        return -1;
 800e4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4fc:	e312      	b.n	800eb24 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800e4fe:	4b80      	ldr	r3, [pc, #512]	; (800e700 <get_st_biases+0x2b8>)
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	7818      	ldrb	r0, [r3, #0]
 800e504:	4b7e      	ldr	r3, [pc, #504]	; (800e700 <get_st_biases+0x2b8>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	7e99      	ldrb	r1, [r3, #26]
 800e50a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e50e:	2201      	movs	r2, #1
 800e510:	f001 ffe6 	bl	80104e0 <dmp_i2c_write>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <get_st_biases+0xd8>
        return -1;
 800e51a:	f04f 33ff 	mov.w	r3, #4294967295
 800e51e:	e301      	b.n	800eb24 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800e520:	4b77      	ldr	r3, [pc, #476]	; (800e700 <get_st_biases+0x2b8>)
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	7818      	ldrb	r0, [r3, #0]
 800e526:	4b76      	ldr	r3, [pc, #472]	; (800e700 <get_st_biases+0x2b8>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	7919      	ldrb	r1, [r3, #4]
 800e52c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e530:	2201      	movs	r2, #1
 800e532:	f001 ffd5 	bl	80104e0 <dmp_i2c_write>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <get_st_biases+0xfa>
        return -1;
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
 800e540:	e2f0      	b.n	800eb24 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800e542:	230c      	movs	r3, #12
 800e544:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800e548:	4b6d      	ldr	r3, [pc, #436]	; (800e700 <get_st_biases+0x2b8>)
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	7818      	ldrb	r0, [r3, #0]
 800e54e:	4b6c      	ldr	r3, [pc, #432]	; (800e700 <get_st_biases+0x2b8>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	7919      	ldrb	r1, [r3, #4]
 800e554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e558:	2201      	movs	r2, #1
 800e55a:	f001 ffc1 	bl	80104e0 <dmp_i2c_write>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <get_st_biases+0x122>
        return -1;
 800e564:	f04f 33ff 	mov.w	r3, #4294967295
 800e568:	e2dc      	b.n	800eb24 <get_st_biases+0x6dc>
    delay_ms(15);
 800e56a:	200f      	movs	r0, #15
 800e56c:	f001 ffa0 	bl	80104b0 <my_hal_delay>
    data[0] = st.test->reg_lpf;
 800e570:	4b63      	ldr	r3, [pc, #396]	; (800e700 <get_st_biases+0x2b8>)
 800e572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e574:	7a5b      	ldrb	r3, [r3, #9]
 800e576:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800e57a:	4b61      	ldr	r3, [pc, #388]	; (800e700 <get_st_biases+0x2b8>)
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	7818      	ldrb	r0, [r3, #0]
 800e580:	4b5f      	ldr	r3, [pc, #380]	; (800e700 <get_st_biases+0x2b8>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	7899      	ldrb	r1, [r3, #2]
 800e586:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e58a:	2201      	movs	r2, #1
 800e58c:	f001 ffa8 	bl	80104e0 <dmp_i2c_write>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <get_st_biases+0x154>
        return -1;
 800e596:	f04f 33ff 	mov.w	r3, #4294967295
 800e59a:	e2c3      	b.n	800eb24 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 800e59c:	4b58      	ldr	r3, [pc, #352]	; (800e700 <get_st_biases+0x2b8>)
 800e59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a0:	7a1b      	ldrb	r3, [r3, #8]
 800e5a2:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800e5a6:	4b56      	ldr	r3, [pc, #344]	; (800e700 <get_st_biases+0x2b8>)
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	7818      	ldrb	r0, [r3, #0]
 800e5ac:	4b54      	ldr	r3, [pc, #336]	; (800e700 <get_st_biases+0x2b8>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	7859      	ldrb	r1, [r3, #1]
 800e5b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f001 ff92 	bl	80104e0 <dmp_i2c_write>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <get_st_biases+0x180>
        return -1;
 800e5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c6:	e2ad      	b.n	800eb24 <get_st_biases+0x6dc>
    if (hw_test)
 800e5c8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d008      	beq.n	800e5e2 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 800e5d0:	4b4b      	ldr	r3, [pc, #300]	; (800e700 <get_st_biases+0x2b8>)
 800e5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d4:	7a9b      	ldrb	r3, [r3, #10]
 800e5d6:	f063 031f 	orn	r3, r3, #31
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800e5e0:	e004      	b.n	800e5ec <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 800e5e2:	4b47      	ldr	r3, [pc, #284]	; (800e700 <get_st_biases+0x2b8>)
 800e5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e6:	7a9b      	ldrb	r3, [r3, #10]
 800e5e8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 800e5ec:	4b44      	ldr	r3, [pc, #272]	; (800e700 <get_st_biases+0x2b8>)
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	7818      	ldrb	r0, [r3, #0]
 800e5f2:	4b43      	ldr	r3, [pc, #268]	; (800e700 <get_st_biases+0x2b8>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	7999      	ldrb	r1, [r3, #6]
 800e5f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f001 ff6f 	bl	80104e0 <dmp_i2c_write>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d002      	beq.n	800e60e <get_st_biases+0x1c6>
        return -1;
 800e608:	f04f 33ff 	mov.w	r3, #4294967295
 800e60c:	e28a      	b.n	800eb24 <get_st_biases+0x6dc>

    if (hw_test)
 800e60e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e612:	2b00      	cmp	r3, #0
 800e614:	d008      	beq.n	800e628 <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800e616:	4b3a      	ldr	r3, [pc, #232]	; (800e700 <get_st_biases+0x2b8>)
 800e618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61a:	7adb      	ldrb	r3, [r3, #11]
 800e61c:	f063 031f 	orn	r3, r3, #31
 800e620:	b2db      	uxtb	r3, r3
 800e622:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800e626:	e002      	b.n	800e62e <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 800e628:	2318      	movs	r3, #24
 800e62a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800e62e:	4b34      	ldr	r3, [pc, #208]	; (800e700 <get_st_biases+0x2b8>)
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	7818      	ldrb	r0, [r3, #0]
 800e634:	4b32      	ldr	r3, [pc, #200]	; (800e700 <get_st_biases+0x2b8>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	79d9      	ldrb	r1, [r3, #7]
 800e63a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e63e:	2201      	movs	r2, #1
 800e640:	f001 ff4e 	bl	80104e0 <dmp_i2c_write>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <get_st_biases+0x208>
        return -1;
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295
 800e64e:	e269      	b.n	800eb24 <get_st_biases+0x6dc>
    if (hw_test)
 800e650:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <get_st_biases+0x216>
        delay_ms(200);
 800e658:	20c8      	movs	r0, #200	; 0xc8
 800e65a:	f001 ff29 	bl	80104b0 <my_hal_delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800e65e:	2340      	movs	r3, #64	; 0x40
 800e660:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800e664:	4b26      	ldr	r3, [pc, #152]	; (800e700 <get_st_biases+0x2b8>)
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	7818      	ldrb	r0, [r3, #0]
 800e66a:	4b25      	ldr	r3, [pc, #148]	; (800e700 <get_st_biases+0x2b8>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	7919      	ldrb	r1, [r3, #4]
 800e670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e674:	2201      	movs	r2, #1
 800e676:	f001 ff33 	bl	80104e0 <dmp_i2c_write>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d002      	beq.n	800e686 <get_st_biases+0x23e>
        return -1;
 800e680:	f04f 33ff 	mov.w	r3, #4294967295
 800e684:	e24e      	b.n	800eb24 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800e686:	2378      	movs	r3, #120	; 0x78
 800e688:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800e68c:	4b1c      	ldr	r3, [pc, #112]	; (800e700 <get_st_biases+0x2b8>)
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	7818      	ldrb	r0, [r3, #0]
 800e692:	4b1b      	ldr	r3, [pc, #108]	; (800e700 <get_st_biases+0x2b8>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	7959      	ldrb	r1, [r3, #5]
 800e698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e69c:	2201      	movs	r2, #1
 800e69e:	f001 ff1f 	bl	80104e0 <dmp_i2c_write>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <get_st_biases+0x266>
        return -1;
 800e6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ac:	e23a      	b.n	800eb24 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 800e6ae:	2332      	movs	r3, #50	; 0x32
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f001 fefd 	bl	80104b0 <my_hal_delay>
    data[0] = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800e6bc:	4b10      	ldr	r3, [pc, #64]	; (800e700 <get_st_biases+0x2b8>)
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	7818      	ldrb	r0, [r3, #0]
 800e6c2:	4b0f      	ldr	r3, [pc, #60]	; (800e700 <get_st_biases+0x2b8>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	7959      	ldrb	r1, [r3, #5]
 800e6c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f001 ff07 	bl	80104e0 <dmp_i2c_write>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <get_st_biases+0x296>
        return -1;
 800e6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6dc:	e222      	b.n	800eb24 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 800e6de:	4b08      	ldr	r3, [pc, #32]	; (800e700 <get_st_biases+0x2b8>)
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	7818      	ldrb	r0, [r3, #0]
 800e6e4:	4b06      	ldr	r3, [pc, #24]	; (800e700 <get_st_biases+0x2b8>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	7b19      	ldrb	r1, [r3, #12]
 800e6ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	f001 ff18 	bl	8010524 <dmp_i2c_read>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d004      	beq.n	800e704 <get_st_biases+0x2bc>
        return -1;
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	e211      	b.n	800eb24 <get_st_biases+0x6dc>
 800e700:	20000028 	.word	0x20000028

    fifo_count = (data[0] << 8) | data[1];
 800e704:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800e708:	021b      	lsls	r3, r3, #8
 800e70a:	b21a      	sxth	r2, r3
 800e70c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800e710:	b21b      	sxth	r3, r3
 800e712:	4313      	orrs	r3, r2
 800e714:	b21b      	sxth	r3, r3
 800e716:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800e71a:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800e71e:	4b1d      	ldr	r3, [pc, #116]	; (800e794 <get_st_biases+0x34c>)
 800e720:	fba3 2302 	umull	r2, r3, r3, r2
 800e724:	08db      	lsrs	r3, r3, #3
 800e726:	b29b      	uxth	r3, r3
 800e728:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 800e72c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e730:	f103 0108 	add.w	r1, r3, #8
 800e734:	2300      	movs	r3, #0
 800e736:	600b      	str	r3, [r1, #0]
 800e738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e73c:	1d1a      	adds	r2, r3, #4
 800e73e:	680b      	ldr	r3, [r1, #0]
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	6812      	ldr	r2, [r2, #0]
 800e744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e748:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 800e74a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e74e:	f103 0108 	add.w	r1, r3, #8
 800e752:	2300      	movs	r3, #0
 800e754:	600b      	str	r3, [r1, #0]
 800e756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e75a:	1d1a      	adds	r2, r3, #4
 800e75c:	680b      	ldr	r3, [r1, #0]
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	6812      	ldr	r2, [r2, #0]
 800e762:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e766:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800e768:	2300      	movs	r3, #0
 800e76a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800e76e:	e0a0      	b.n	800e8b2 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 800e770:	4b09      	ldr	r3, [pc, #36]	; (800e798 <get_st_biases+0x350>)
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	7818      	ldrb	r0, [r3, #0]
 800e776:	4b08      	ldr	r3, [pc, #32]	; (800e798 <get_st_biases+0x350>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	7b59      	ldrb	r1, [r3, #13]
 800e77c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e780:	220c      	movs	r2, #12
 800e782:	f001 fecf 	bl	8010524 <dmp_i2c_read>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d007      	beq.n	800e79c <get_st_biases+0x354>
            return -1;
 800e78c:	f04f 33ff 	mov.w	r3, #4294967295
 800e790:	e1c8      	b.n	800eb24 <get_st_biases+0x6dc>
 800e792:	bf00      	nop
 800e794:	aaaaaaab 	.word	0xaaaaaaab
 800e798:	20000028 	.word	0x20000028
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 800e79c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800e7a0:	021b      	lsls	r3, r3, #8
 800e7a2:	b21a      	sxth	r2, r3
 800e7a4:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800e7a8:	b21b      	sxth	r3, r3
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	b21b      	sxth	r3, r3
 800e7ae:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800e7b2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800e7b6:	021b      	lsls	r3, r3, #8
 800e7b8:	b21a      	sxth	r2, r3
 800e7ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800e7be:	b21b      	sxth	r3, r3
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	b21b      	sxth	r3, r3
 800e7c4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800e7c8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800e7cc:	021b      	lsls	r3, r3, #8
 800e7ce:	b21a      	sxth	r2, r3
 800e7d0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800e7d4:	b21b      	sxth	r3, r3
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	b21b      	sxth	r3, r3
 800e7da:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 800e7de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800e7e8:	441a      	add	r2, r3
 800e7ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7ee:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 800e7f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	6819      	ldr	r1, [r3, #0]
 800e7f8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e802:	1d1a      	adds	r2, r3, #4
 800e804:	180b      	adds	r3, r1, r0
 800e806:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800e808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e80c:	3308      	adds	r3, #8
 800e80e:	6819      	ldr	r1, [r3, #0]
 800e810:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 800e814:	4618      	mov	r0, r3
 800e816:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e81a:	f103 0208 	add.w	r2, r3, #8
 800e81e:	180b      	adds	r3, r1, r0
 800e820:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800e822:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800e826:	021b      	lsls	r3, r3, #8
 800e828:	b21a      	sxth	r2, r3
 800e82a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800e82e:	b21b      	sxth	r3, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	b21b      	sxth	r3, r3
 800e834:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800e838:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	b21a      	sxth	r2, r3
 800e840:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800e844:	b21b      	sxth	r3, r3
 800e846:	4313      	orrs	r3, r2
 800e848:	b21b      	sxth	r3, r3
 800e84a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800e84e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800e852:	021b      	lsls	r3, r3, #8
 800e854:	b21a      	sxth	r2, r3
 800e856:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800e85a:	b21b      	sxth	r3, r3
 800e85c:	4313      	orrs	r3, r2
 800e85e:	b21b      	sxth	r3, r3
 800e860:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 800e864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 800e86e:	441a      	add	r2, r3
 800e870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e874:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800e876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e87a:	3304      	adds	r3, #4
 800e87c:	6819      	ldr	r1, [r3, #0]
 800e87e:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 800e882:	4618      	mov	r0, r3
 800e884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e888:	1d1a      	adds	r2, r3, #4
 800e88a:	180b      	adds	r3, r1, r0
 800e88c:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 800e88e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e892:	3308      	adds	r3, #8
 800e894:	6819      	ldr	r1, [r3, #0]
 800e896:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800e89a:	4618      	mov	r0, r3
 800e89c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8a0:	f103 0208 	add.w	r2, r3, #8
 800e8a4:	180b      	adds	r3, r1, r0
 800e8a6:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800e8a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800e8b2:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 800e8b6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	f4ff af58 	bcc.w	800e770 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 800e8c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	17da      	asrs	r2, r3, #31
 800e8c8:	461c      	mov	r4, r3
 800e8ca:	4615      	mov	r5, r2
 800e8cc:	1423      	asrs	r3, r4, #16
 800e8ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e8d2:	0423      	lsls	r3, r4, #16
 800e8d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e8d8:	2283      	movs	r2, #131	; 0x83
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800e8e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e8e4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e8e8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800e8ec:	f7f2 f9cc 	bl	8000c88 <__aeabi_ldivmod>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e906:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e90a:	f7f2 f9bd 	bl	8000c88 <__aeabi_ldivmod>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e916:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800e918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e91c:	3304      	adds	r3, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	17da      	asrs	r2, r3, #31
 800e922:	4698      	mov	r8, r3
 800e924:	4691      	mov	r9, r2
 800e926:	ea4f 4328 	mov.w	r3, r8, asr #16
 800e92a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e92e:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800e932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e936:	2283      	movs	r2, #131	; 0x83
 800e938:	2300      	movs	r3, #0
 800e93a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e93e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e942:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e946:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800e94a:	f7f2 f99d 	bl	8000c88 <__aeabi_ldivmod>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4610      	mov	r0, r2
 800e954:	4619      	mov	r1, r3
 800e956:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e95a:	2200      	movs	r2, #0
 800e95c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e95e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e960:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e964:	f7f2 f990 	bl	8000c88 <__aeabi_ldivmod>
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	4610      	mov	r0, r2
 800e96e:	4619      	mov	r1, r3
 800e970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e974:	1d1a      	adds	r2, r3, #4
 800e976:	4603      	mov	r3, r0
 800e978:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800e97a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e97e:	3308      	adds	r3, #8
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	17da      	asrs	r2, r3, #31
 800e984:	469a      	mov	sl, r3
 800e986:	4693      	mov	fp, r2
 800e988:	ea4f 432a 	mov.w	r3, sl, asr #16
 800e98c:	677b      	str	r3, [r7, #116]	; 0x74
 800e98e:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800e992:	673b      	str	r3, [r7, #112]	; 0x70
 800e994:	2283      	movs	r2, #131	; 0x83
 800e996:	2300      	movs	r3, #0
 800e998:	66ba      	str	r2, [r7, #104]	; 0x68
 800e99a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e99c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e9a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800e9a4:	f7f2 f970 	bl	8000c88 <__aeabi_ldivmod>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	663b      	str	r3, [r7, #96]	; 0x60
 800e9b8:	667a      	str	r2, [r7, #100]	; 0x64
 800e9ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e9be:	f7f2 f963 	bl	8000c88 <__aeabi_ldivmod>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9ce:	f103 0208 	add.w	r2, r3, #8
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800e9d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	17da      	asrs	r2, r3, #31
 800e9de:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9e0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e9e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	141b      	asrs	r3, r3, #16
 800e9ea:	657b      	str	r3, [r7, #84]	; 0x54
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	041b      	lsls	r3, r3, #16
 800e9f0:	653b      	str	r3, [r7, #80]	; 0x50
 800e9f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	64ba      	str	r2, [r7, #72]	; 0x48
 800e9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ea00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ea04:	f7f2 f940 	bl	8000c88 <__aeabi_ldivmod>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	4619      	mov	r1, r3
 800ea10:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800ea14:	2200      	movs	r2, #0
 800ea16:	643b      	str	r3, [r7, #64]	; 0x40
 800ea18:	647a      	str	r2, [r7, #68]	; 0x44
 800ea1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ea1e:	f7f2 f933 	bl	8000c88 <__aeabi_ldivmod>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea2a:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 800ea2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea30:	3304      	adds	r3, #4
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	17da      	asrs	r2, r3, #31
 800ea36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea38:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ea3e:	460b      	mov	r3, r1
 800ea40:	141b      	asrs	r3, r3, #16
 800ea42:	637b      	str	r3, [r7, #52]	; 0x34
 800ea44:	460b      	mov	r3, r1
 800ea46:	041b      	lsls	r3, r3, #16
 800ea48:	633b      	str	r3, [r7, #48]	; 0x30
 800ea4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea4e:	2300      	movs	r3, #0
 800ea50:	62ba      	str	r2, [r7, #40]	; 0x28
 800ea52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ea58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ea5c:	f7f2 f914 	bl	8000c88 <__aeabi_ldivmod>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4610      	mov	r0, r2
 800ea66:	4619      	mov	r1, r3
 800ea68:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	623b      	str	r3, [r7, #32]
 800ea70:	627a      	str	r2, [r7, #36]	; 0x24
 800ea72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea76:	f7f2 f907 	bl	8000c88 <__aeabi_ldivmod>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4610      	mov	r0, r2
 800ea80:	4619      	mov	r1, r3
 800ea82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea86:	3304      	adds	r3, #4
 800ea88:	4602      	mov	r2, r0
 800ea8a:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 800ea8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea90:	3308      	adds	r3, #8
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	17da      	asrs	r2, r3, #31
 800ea96:	61bb      	str	r3, [r7, #24]
 800ea98:	61fa      	str	r2, [r7, #28]
 800ea9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	141b      	asrs	r3, r3, #16
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	041b      	lsls	r3, r3, #16
 800eaa8:	613b      	str	r3, [r7, #16]
 800eaaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eaae:	2300      	movs	r3, #0
 800eab0:	60ba      	str	r2, [r7, #8]
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eab8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eabc:	f7f2 f8e4 	bl	8000c88 <__aeabi_ldivmod>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4610      	mov	r0, r2
 800eac6:	4619      	mov	r1, r3
 800eac8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800eacc:	2200      	movs	r2, #0
 800eace:	603b      	str	r3, [r7, #0]
 800ead0:	607a      	str	r2, [r7, #4]
 800ead2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ead6:	f7f2 f8d7 	bl	8000c88 <__aeabi_ldivmod>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	4610      	mov	r0, r2
 800eae0:	4619      	mov	r1, r3
 800eae2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eae6:	3308      	adds	r3, #8
 800eae8:	4602      	mov	r2, r0
 800eaea:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 800eaec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	dd0a      	ble.n	800eb0e <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 800eaf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eafc:	3308      	adds	r3, #8
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb04:	3308      	adds	r3, #8
 800eb06:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	e009      	b.n	800eb22 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 800eb0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb12:	3308      	adds	r3, #8
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800eb20:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	37e0      	adds	r7, #224	; 0xe0
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb2e:	bf00      	nop

0800eb30 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08e      	sub	sp, #56	; 0x38
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 800eb40:	4b64      	ldr	r3, [pc, #400]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800eb42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d006      	beq.n	800eb58 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	f000 f9e6 	bl	800ef1c <mpu_set_dmp_state>
        dmp_was_on = 1;
 800eb50:	2301      	movs	r3, #1
 800eb52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb56:	e002      	b.n	800eb5e <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 800eb5e:	f107 030c 	add.w	r3, r7, #12
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fd80 	bl	800d668 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800eb68:	f107 030f 	add.w	r3, r7, #15
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe fe03 	bl	800d778 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800eb72:	f107 0308 	add.w	r3, r7, #8
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe fea0 	bl	800d8bc <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 800eb7c:	f107 030a 	add.w	r3, r7, #10
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fe ff27 	bl	800d9d4 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800eb86:	4b53      	ldr	r3, [pc, #332]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800eb88:	7a9b      	ldrb	r3, [r3, #10]
 800eb8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 800eb8e:	f107 030e 	add.w	r3, r7, #14
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff f814 	bl	800dbc0 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 800eb98:	2300      	movs	r3, #0
 800eb9a:	637b      	str	r3, [r7, #52]	; 0x34
 800eb9c:	e00a      	b.n	800ebb4 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 800eb9e:	2200      	movs	r2, #0
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7ff fc50 	bl	800e448 <get_st_biases>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d008      	beq.n	800ebc0 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 800ebae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	dbef      	blt.n	800eb9e <mpu_run_self_test+0x6e>
 800ebbe:	e000      	b.n	800ebc2 <mpu_run_self_test+0x92>
            break;
 800ebc0:	bf00      	nop
    if (ii == tries) {
 800ebc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d102      	bne.n	800ebd2 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800ebd0:	e045      	b.n	800ec5e <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	637b      	str	r3, [r7, #52]	; 0x34
 800ebd6:	e00d      	b.n	800ebf4 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 800ebd8:	f107 0110 	add.w	r1, r7, #16
 800ebdc:	f107 031c 	add.w	r3, r7, #28
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7ff fc30 	bl	800e448 <get_st_biases>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d008      	beq.n	800ec00 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 800ebee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	dbec      	blt.n	800ebd8 <mpu_run_self_test+0xa8>
 800ebfe:	e000      	b.n	800ec02 <mpu_run_self_test+0xd2>
            break;
 800ec00:	bf00      	nop
    if (ii == tries) {
 800ec02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ec06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d102      	bne.n	800ec12 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800ec10:	e025      	b.n	800ec5e <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 800ec12:	f107 0310 	add.w	r3, r7, #16
 800ec16:	4619      	mov	r1, r3
 800ec18:	6838      	ldr	r0, [r7, #0]
 800ec1a:	f7ff fad1 	bl	800e1c0 <accel_self_test>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 800ec24:	f107 031c 	add.w	r3, r7, #28
 800ec28:	4619      	mov	r1, r3
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f7ff fb4c 	bl	800e2c8 <gyro_self_test>
 800ec30:	4603      	mov	r3, r0
 800ec32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		//MPU6050自测返回值为0x03, result = 0x00 | 0x01 | 0x02
    result = 0;
 800ec36:	2300      	movs	r3, #0
 800ec38:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 800ec3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <mpu_run_self_test+0x11a>
        result |= 0x01;
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	f043 0301 	orr.w	r3, r3, #1
 800ec48:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 800ec4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d104      	bne.n	800ec5c <mpu_run_self_test+0x12c>
        result |= 0x02;
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	f043 0302 	orr.w	r3, r3, #2
 800ec58:	633b      	str	r3, [r7, #48]	; 0x30
 800ec5a:	e000      	b.n	800ec5e <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 800ec5c:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800ec5e:	4b1d      	ldr	r3, [pc, #116]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec60:	22ff      	movs	r2, #255	; 0xff
 800ec62:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800ec64:	4b1b      	ldr	r3, [pc, #108]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec66:	22ff      	movs	r2, #255	; 0xff
 800ec68:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800ec6a:	4b1a      	ldr	r3, [pc, #104]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec6c:	22ff      	movs	r2, #255	; 0xff
 800ec6e:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800ec70:	4b18      	ldr	r3, [pc, #96]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec76:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800ec78:	4b16      	ldr	r3, [pc, #88]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec7a:	22ff      	movs	r2, #255	; 0xff
 800ec7c:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800ec7e:	4b15      	ldr	r3, [pc, #84]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec80:	22ff      	movs	r2, #255	; 0xff
 800ec82:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800ec84:	4b13      	ldr	r3, [pc, #76]	; (800ecd4 <mpu_run_self_test+0x1a4>)
 800ec86:	2201      	movs	r2, #1
 800ec88:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800ec8a:	89bb      	ldrh	r3, [r7, #12]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe fd1f 	bl	800d6d0 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fe fda9 	bl	800d7ec <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800ec9a:	893b      	ldrh	r3, [r7, #8]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe fe4b 	bl	800d938 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800eca2:	897b      	ldrh	r3, [r7, #10]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fe feaf 	bl	800da08 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800ecaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe ffea 	bl	800dc88 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800ecb4:	7bbb      	ldrb	r3, [r7, #14]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fe ff94 	bl	800dbe4 <mpu_configure_fifo>

    if (dmp_was_on)
 800ecbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800ecc4:	2001      	movs	r0, #1
 800ecc6:	f000 f929 	bl	800ef1c <mpu_set_dmp_state>

    return result;
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3738      	adds	r7, #56	; 0x38
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	20000028 	.word	0x20000028

0800ecd8 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	4603      	mov	r3, r0
 800ece0:	603a      	str	r2, [r7, #0]
 800ece2:	80fb      	strh	r3, [r7, #6]
 800ece4:	460b      	mov	r3, r1
 800ece6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d102      	bne.n	800ecf4 <mpu_write_mem+0x1c>
        return -1;
 800ecee:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf2:	e03d      	b.n	800ed70 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 800ecf4:	4b20      	ldr	r3, [pc, #128]	; (800ed78 <mpu_write_mem+0xa0>)
 800ecf6:	7a9b      	ldrb	r3, [r3, #10]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d102      	bne.n	800ed02 <mpu_write_mem+0x2a>
        return -1;
 800ecfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ed00:	e036      	b.n	800ed70 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800ed02:	88fb      	ldrh	r3, [r7, #6]
 800ed04:	0a1b      	lsrs	r3, r3, #8
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800ed0c:	88fb      	ldrh	r3, [r7, #6]
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800ed12:	7b7b      	ldrb	r3, [r7, #13]
 800ed14:	461a      	mov	r2, r3
 800ed16:	88bb      	ldrh	r3, [r7, #4]
 800ed18:	4413      	add	r3, r2
 800ed1a:	4a17      	ldr	r2, [pc, #92]	; (800ed78 <mpu_write_mem+0xa0>)
 800ed1c:	6852      	ldr	r2, [r2, #4]
 800ed1e:	8952      	ldrh	r2, [r2, #10]
 800ed20:	4293      	cmp	r3, r2
 800ed22:	dd02      	ble.n	800ed2a <mpu_write_mem+0x52>
        return -1;
 800ed24:	f04f 33ff 	mov.w	r3, #4294967295
 800ed28:	e022      	b.n	800ed70 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800ed2a:	4b13      	ldr	r3, [pc, #76]	; (800ed78 <mpu_write_mem+0xa0>)
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	7818      	ldrb	r0, [r3, #0]
 800ed30:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <mpu_write_mem+0xa0>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	7ed9      	ldrb	r1, [r3, #27]
 800ed36:	f107 030c 	add.w	r3, r7, #12
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	f001 fbd0 	bl	80104e0 <dmp_i2c_write>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d002      	beq.n	800ed4c <mpu_write_mem+0x74>
        return -1;
 800ed46:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4a:	e011      	b.n	800ed70 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <mpu_write_mem+0xa0>)
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	7818      	ldrb	r0, [r3, #0]
 800ed52:	4b09      	ldr	r3, [pc, #36]	; (800ed78 <mpu_write_mem+0xa0>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	7e19      	ldrb	r1, [r3, #24]
 800ed58:	88bb      	ldrh	r3, [r7, #4]
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	f001 fbbf 	bl	80104e0 <dmp_i2c_write>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <mpu_write_mem+0x96>
        return -1;
 800ed68:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6c:	e000      	b.n	800ed70 <mpu_write_mem+0x98>
    return 0;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	20000028 	.word	0x20000028

0800ed7c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	4603      	mov	r3, r0
 800ed84:	603a      	str	r2, [r7, #0]
 800ed86:	80fb      	strh	r3, [r7, #6]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d102      	bne.n	800ed98 <mpu_read_mem+0x1c>
        return -1;
 800ed92:	f04f 33ff 	mov.w	r3, #4294967295
 800ed96:	e03d      	b.n	800ee14 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 800ed98:	4b20      	ldr	r3, [pc, #128]	; (800ee1c <mpu_read_mem+0xa0>)
 800ed9a:	7a9b      	ldrb	r3, [r3, #10]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d102      	bne.n	800eda6 <mpu_read_mem+0x2a>
        return -1;
 800eda0:	f04f 33ff 	mov.w	r3, #4294967295
 800eda4:	e036      	b.n	800ee14 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800eda6:	88fb      	ldrh	r3, [r7, #6]
 800eda8:	0a1b      	lsrs	r3, r3, #8
 800edaa:	b29b      	uxth	r3, r3
 800edac:	b2db      	uxtb	r3, r3
 800edae:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800edb0:	88fb      	ldrh	r3, [r7, #6]
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800edb6:	7b7b      	ldrb	r3, [r7, #13]
 800edb8:	461a      	mov	r2, r3
 800edba:	88bb      	ldrh	r3, [r7, #4]
 800edbc:	4413      	add	r3, r2
 800edbe:	4a17      	ldr	r2, [pc, #92]	; (800ee1c <mpu_read_mem+0xa0>)
 800edc0:	6852      	ldr	r2, [r2, #4]
 800edc2:	8952      	ldrh	r2, [r2, #10]
 800edc4:	4293      	cmp	r3, r2
 800edc6:	dd02      	ble.n	800edce <mpu_read_mem+0x52>
        return -1;
 800edc8:	f04f 33ff 	mov.w	r3, #4294967295
 800edcc:	e022      	b.n	800ee14 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800edce:	4b13      	ldr	r3, [pc, #76]	; (800ee1c <mpu_read_mem+0xa0>)
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	7818      	ldrb	r0, [r3, #0]
 800edd4:	4b11      	ldr	r3, [pc, #68]	; (800ee1c <mpu_read_mem+0xa0>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	7ed9      	ldrb	r1, [r3, #27]
 800edda:	f107 030c 	add.w	r3, r7, #12
 800edde:	2202      	movs	r2, #2
 800ede0:	f001 fb7e 	bl	80104e0 <dmp_i2c_write>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <mpu_read_mem+0x74>
        return -1;
 800edea:	f04f 33ff 	mov.w	r3, #4294967295
 800edee:	e011      	b.n	800ee14 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800edf0:	4b0a      	ldr	r3, [pc, #40]	; (800ee1c <mpu_read_mem+0xa0>)
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	7818      	ldrb	r0, [r3, #0]
 800edf6:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <mpu_read_mem+0xa0>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	7e19      	ldrb	r1, [r3, #24]
 800edfc:	88bb      	ldrh	r3, [r7, #4]
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	f001 fb8f 	bl	8010524 <dmp_i2c_read>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <mpu_read_mem+0x96>
        return -1;
 800ee0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee10:	e000      	b.n	800ee14 <mpu_read_mem+0x98>
    return 0;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20000028 	.word	0x20000028

0800ee20 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08a      	sub	sp, #40	; 0x28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60b9      	str	r1, [r7, #8]
 800ee28:	4611      	mov	r1, r2
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	81fb      	strh	r3, [r7, #14]
 800ee30:	460b      	mov	r3, r1
 800ee32:	81bb      	strh	r3, [r7, #12]
 800ee34:	4613      	mov	r3, r2
 800ee36:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800ee38:	4b37      	ldr	r3, [pc, #220]	; (800ef18 <mpu_load_firmware+0xf8>)
 800ee3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d002      	beq.n	800ee48 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800ee42:	f04f 33ff 	mov.w	r3, #4294967295
 800ee46:	e062      	b.n	800ef0e <mpu_load_firmware+0xee>

    if (!firmware)
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d102      	bne.n	800ee54 <mpu_load_firmware+0x34>
        return -1;
 800ee4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee52:	e05c      	b.n	800ef0e <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800ee54:	2300      	movs	r3, #0
 800ee56:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee58:	e034      	b.n	800eec4 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800ee5a:	89fa      	ldrh	r2, [r7, #14]
 800ee5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	2b10      	cmp	r3, #16
 800ee62:	bfa8      	it	ge
 800ee64:	2310      	movge	r3, #16
 800ee66:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800ee68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee6a:	68ba      	ldr	r2, [r7, #8]
 800ee6c:	441a      	add	r2, r3
 800ee6e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ee70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff ff30 	bl	800ecd8 <mpu_write_mem>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <mpu_load_firmware+0x64>
            return -1;
 800ee7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee82:	e044      	b.n	800ef0e <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 800ee84:	f107 0214 	add.w	r2, r7, #20
 800ee88:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ee8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff ff75 	bl	800ed7c <mpu_read_mem>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <mpu_load_firmware+0x7e>
            return -1;
 800ee98:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9c:	e037      	b.n	800ef0e <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 800ee9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eea0:	68ba      	ldr	r2, [r7, #8]
 800eea2:	4413      	add	r3, r2
 800eea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eea6:	f107 0114 	add.w	r1, r7, #20
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f004 ff22 	bl	8013cf4 <memcmp>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <mpu_load_firmware+0x9c>
            return -2;
 800eeb6:	f06f 0301 	mvn.w	r3, #1
 800eeba:	e028      	b.n	800ef0e <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800eebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec0:	4413      	add	r3, r2
 800eec2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eec4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eec6:	89fb      	ldrh	r3, [r7, #14]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d3c6      	bcc.n	800ee5a <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800eecc:	89bb      	ldrh	r3, [r7, #12]
 800eece:	0a1b      	lsrs	r3, r3, #8
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800eed6:	89bb      	ldrh	r3, [r7, #12]
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800eedc:	4b0e      	ldr	r3, [pc, #56]	; (800ef18 <mpu_load_firmware+0xf8>)
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	7818      	ldrb	r0, [r3, #0]
 800eee2:	4b0d      	ldr	r3, [pc, #52]	; (800ef18 <mpu_load_firmware+0xf8>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	7f59      	ldrb	r1, [r3, #29]
 800eee8:	f107 0310 	add.w	r3, r7, #16
 800eeec:	2202      	movs	r2, #2
 800eeee:	f001 faf7 	bl	80104e0 <dmp_i2c_write>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d002      	beq.n	800eefe <mpu_load_firmware+0xde>
        return -1;
 800eef8:	f04f 33ff 	mov.w	r3, #4294967295
 800eefc:	e007      	b.n	800ef0e <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 800eefe:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <mpu_load_firmware+0xf8>)
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800ef06:	4a04      	ldr	r2, [pc, #16]	; (800ef18 <mpu_load_firmware+0xf8>)
 800ef08:	88fb      	ldrh	r3, [r7, #6]
 800ef0a:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3728      	adds	r7, #40	; 0x28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20000028 	.word	0x20000028

0800ef1c <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800ef26:	4b26      	ldr	r3, [pc, #152]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef2c:	79fa      	ldrb	r2, [r7, #7]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d101      	bne.n	800ef36 <mpu_set_dmp_state+0x1a>
        return 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	e040      	b.n	800efb8 <mpu_set_dmp_state+0x9c>

    if (enable) {
 800ef36:	79fb      	ldrb	r3, [r7, #7]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d027      	beq.n	800ef8c <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 800ef3c:	4b20      	ldr	r3, [pc, #128]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d102      	bne.n	800ef4c <mpu_set_dmp_state+0x30>
            return -1;
 800ef46:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4a:	e035      	b.n	800efb8 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	f7fe f89d 	bl	800d08c <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800ef52:	2000      	movs	r0, #0
 800ef54:	f7fe ff9c 	bl	800de90 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800ef58:	4b19      	ldr	r3, [pc, #100]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fe fd53 	bl	800da08 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800ef66:	4b16      	ldr	r3, [pc, #88]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	7818      	ldrb	r0, [r3, #0]
 800ef6c:	f107 030f 	add.w	r3, r7, #15
 800ef70:	2201      	movs	r2, #1
 800ef72:	2123      	movs	r1, #35	; 0x23
 800ef74:	f001 fab4 	bl	80104e0 <dmp_i2c_write>
        st.chip_cfg.dmp_on = 1;
 800ef78:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800ef80:	2001      	movs	r0, #1
 800ef82:	f7fe f883 	bl	800d08c <set_int_enable>
        mpu_reset_fifo();
 800ef86:	f7fe fa6b 	bl	800d460 <mpu_reset_fifo>
 800ef8a:	e014      	b.n	800efb6 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f7fe f87d 	bl	800d08c <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800ef92:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef94:	7c1b      	ldrb	r3, [r3, #16]
 800ef96:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800ef98:	4b09      	ldr	r3, [pc, #36]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	7818      	ldrb	r0, [r3, #0]
 800ef9e:	f107 030f 	add.w	r3, r7, #15
 800efa2:	2201      	movs	r2, #1
 800efa4:	2123      	movs	r1, #35	; 0x23
 800efa6:	f001 fa9b 	bl	80104e0 <dmp_i2c_write>
        st.chip_cfg.dmp_on = 0;
 800efaa:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <mpu_set_dmp_state+0xa4>)
 800efac:	2200      	movs	r2, #0
 800efae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 800efb2:	f7fe fa55 	bl	800d460 <mpu_reset_fifo>
    }
    return 0;
 800efb6:	2300      	movs	r3, #0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20000028 	.word	0x20000028

0800efc4 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800efc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800efcc:	23c8      	movs	r3, #200	; 0xc8
 800efce:	4904      	ldr	r1, [pc, #16]	; (800efe0 <dmp_load_motion_driver_firmware+0x1c>)
 800efd0:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800efd4:	f7ff ff24 	bl	800ee20 <mpu_load_firmware>
 800efd8:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800efda:	4618      	mov	r0, r3
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	08019eb4 	.word	0x08019eb4

0800efe4 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800efee:	4a6e      	ldr	r2, [pc, #440]	; (800f1a8 <dmp_set_orientation+0x1c4>)
 800eff0:	f107 0314 	add.w	r3, r7, #20
 800eff4:	6812      	ldr	r2, [r2, #0]
 800eff6:	4611      	mov	r1, r2
 800eff8:	8019      	strh	r1, [r3, #0]
 800effa:	3302      	adds	r3, #2
 800effc:	0c12      	lsrs	r2, r2, #16
 800effe:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800f000:	4a6a      	ldr	r2, [pc, #424]	; (800f1ac <dmp_set_orientation+0x1c8>)
 800f002:	f107 0310 	add.w	r3, r7, #16
 800f006:	6812      	ldr	r2, [r2, #0]
 800f008:	4611      	mov	r1, r2
 800f00a:	8019      	strh	r1, [r3, #0]
 800f00c:	3302      	adds	r3, #2
 800f00e:	0c12      	lsrs	r2, r2, #16
 800f010:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800f012:	4a67      	ldr	r2, [pc, #412]	; (800f1b0 <dmp_set_orientation+0x1cc>)
 800f014:	f107 030c 	add.w	r3, r7, #12
 800f018:	6812      	ldr	r2, [r2, #0]
 800f01a:	4611      	mov	r1, r2
 800f01c:	8019      	strh	r1, [r3, #0]
 800f01e:	3302      	adds	r3, #2
 800f020:	0c12      	lsrs	r2, r2, #16
 800f022:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800f024:	4a63      	ldr	r2, [pc, #396]	; (800f1b4 <dmp_set_orientation+0x1d0>)
 800f026:	f107 0308 	add.w	r3, r7, #8
 800f02a:	6812      	ldr	r2, [r2, #0]
 800f02c:	4611      	mov	r1, r2
 800f02e:	8019      	strh	r1, [r3, #0]
 800f030:	3302      	adds	r3, #2
 800f032:	0c12      	lsrs	r2, r2, #16
 800f034:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800f036:	88fb      	ldrh	r3, [r7, #6]
 800f038:	f003 0303 	and.w	r3, r3, #3
 800f03c:	3320      	adds	r3, #32
 800f03e:	443b      	add	r3, r7
 800f040:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f044:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800f046:	88fb      	ldrh	r3, [r7, #6]
 800f048:	08db      	lsrs	r3, r3, #3
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	f003 0303 	and.w	r3, r3, #3
 800f050:	3320      	adds	r3, #32
 800f052:	443b      	add	r3, r7
 800f054:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f058:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800f05a:	88fb      	ldrh	r3, [r7, #6]
 800f05c:	099b      	lsrs	r3, r3, #6
 800f05e:	b29b      	uxth	r3, r3
 800f060:	f003 0303 	and.w	r3, r3, #3
 800f064:	3320      	adds	r3, #32
 800f066:	443b      	add	r3, r7
 800f068:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f06c:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800f06e:	88fb      	ldrh	r3, [r7, #6]
 800f070:	f003 0303 	and.w	r3, r3, #3
 800f074:	3320      	adds	r3, #32
 800f076:	443b      	add	r3, r7
 800f078:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f07c:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800f07e:	88fb      	ldrh	r3, [r7, #6]
 800f080:	08db      	lsrs	r3, r3, #3
 800f082:	b29b      	uxth	r3, r3
 800f084:	f003 0303 	and.w	r3, r3, #3
 800f088:	3320      	adds	r3, #32
 800f08a:	443b      	add	r3, r7
 800f08c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f090:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800f092:	88fb      	ldrh	r3, [r7, #6]
 800f094:	099b      	lsrs	r3, r3, #6
 800f096:	b29b      	uxth	r3, r3
 800f098:	f003 0303 	and.w	r3, r3, #3
 800f09c:	3320      	adds	r3, #32
 800f09e:	443b      	add	r3, r7
 800f0a0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f0a4:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800f0a6:	f107 031c 	add.w	r3, r7, #28
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	2103      	movs	r1, #3
 800f0ae:	f240 4026 	movw	r0, #1062	; 0x426
 800f0b2:	f7ff fe11 	bl	800ecd8 <mpu_write_mem>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d002      	beq.n	800f0c2 <dmp_set_orientation+0xde>
        return -1;
 800f0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c0:	e06e      	b.n	800f1a0 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800f0c2:	f107 0318 	add.w	r3, r7, #24
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	2103      	movs	r1, #3
 800f0ca:	f240 402a 	movw	r0, #1066	; 0x42a
 800f0ce:	f7ff fe03 	bl	800ecd8 <mpu_write_mem>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <dmp_set_orientation+0xfa>
        return -1;
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0dc:	e060      	b.n	800f1a0 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800f0de:	f107 031c 	add.w	r3, r7, #28
 800f0e2:	f107 020c 	add.w	r2, r7, #12
 800f0e6:	6812      	ldr	r2, [r2, #0]
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	8019      	strh	r1, [r3, #0]
 800f0ec:	3302      	adds	r3, #2
 800f0ee:	0c12      	lsrs	r2, r2, #16
 800f0f0:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800f0f2:	f107 0318 	add.w	r3, r7, #24
 800f0f6:	f107 0208 	add.w	r2, r7, #8
 800f0fa:	6812      	ldr	r2, [r2, #0]
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	8019      	strh	r1, [r3, #0]
 800f100:	3302      	adds	r3, #2
 800f102:	0c12      	lsrs	r2, r2, #16
 800f104:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800f106:	88fb      	ldrh	r3, [r7, #6]
 800f108:	f003 0304 	and.w	r3, r3, #4
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d009      	beq.n	800f124 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 800f110:	7f3b      	ldrb	r3, [r7, #28]
 800f112:	f043 0301 	orr.w	r3, r3, #1
 800f116:	b2db      	uxtb	r3, r3
 800f118:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800f11a:	7e3b      	ldrb	r3, [r7, #24]
 800f11c:	f043 0301 	orr.w	r3, r3, #1
 800f120:	b2db      	uxtb	r3, r3
 800f122:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 800f124:	88fb      	ldrh	r3, [r7, #6]
 800f126:	f003 0320 	and.w	r3, r3, #32
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d009      	beq.n	800f142 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800f12e:	7f7b      	ldrb	r3, [r7, #29]
 800f130:	f043 0301 	orr.w	r3, r3, #1
 800f134:	b2db      	uxtb	r3, r3
 800f136:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800f138:	7e7b      	ldrb	r3, [r7, #25]
 800f13a:	f043 0301 	orr.w	r3, r3, #1
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800f142:	88fb      	ldrh	r3, [r7, #6]
 800f144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d009      	beq.n	800f160 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 800f14c:	7fbb      	ldrb	r3, [r7, #30]
 800f14e:	f043 0301 	orr.w	r3, r3, #1
 800f152:	b2db      	uxtb	r3, r3
 800f154:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800f156:	7ebb      	ldrb	r3, [r7, #26]
 800f158:	f043 0301 	orr.w	r3, r3, #1
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800f160:	f107 031c 	add.w	r3, r7, #28
 800f164:	461a      	mov	r2, r3
 800f166:	2103      	movs	r1, #3
 800f168:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800f16c:	f7ff fdb4 	bl	800ecd8 <mpu_write_mem>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d002      	beq.n	800f17c <dmp_set_orientation+0x198>
        return -1;
 800f176:	f04f 33ff 	mov.w	r3, #4294967295
 800f17a:	e011      	b.n	800f1a0 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800f17c:	f107 0318 	add.w	r3, r7, #24
 800f180:	461a      	mov	r2, r3
 800f182:	2103      	movs	r1, #3
 800f184:	f240 4031 	movw	r0, #1073	; 0x431
 800f188:	f7ff fda6 	bl	800ecd8 <mpu_write_mem>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <dmp_set_orientation+0x1b4>
        return -1;
 800f192:	f04f 33ff 	mov.w	r3, #4294967295
 800f196:	e003      	b.n	800f1a0 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800f198:	4a07      	ldr	r2, [pc, #28]	; (800f1b8 <dmp_set_orientation+0x1d4>)
 800f19a:	88fb      	ldrh	r3, [r7, #6]
 800f19c:	8113      	strh	r3, [r2, #8]
    return 0;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	080193bc 	.word	0x080193bc
 800f1ac:	080193c0 	.word	0x080193c0
 800f1b0:	080193c4 	.word	0x080193c4
 800f1b4:	080193c8 	.word	0x080193c8
 800f1b8:	200012cc 	.word	0x200012cc

0800f1bc <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 800f1bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1c0:	b08c      	sub	sp, #48	; 0x30
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800f1c6:	4b80      	ldr	r3, [pc, #512]	; (800f3c8 <dmp_set_gyro_bias+0x20c>)
 800f1c8:	891b      	ldrh	r3, [r3, #8]
 800f1ca:	f003 0303 	and.w	r3, r3, #3
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	69fa      	ldr	r2, [r7, #28]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 800f1d8:	4b7b      	ldr	r3, [pc, #492]	; (800f3c8 <dmp_set_gyro_bias+0x20c>)
 800f1da:	891b      	ldrh	r3, [r3, #8]
 800f1dc:	f003 0304 	and.w	r3, r3, #4
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	425b      	negs	r3, r3
 800f1e8:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800f1ea:	4b77      	ldr	r3, [pc, #476]	; (800f3c8 <dmp_set_gyro_bias+0x20c>)
 800f1ec:	891b      	ldrh	r3, [r3, #8]
 800f1ee:	08db      	lsrs	r3, r3, #3
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	f003 0303 	and.w	r3, r3, #3
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	69fa      	ldr	r2, [r7, #28]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 800f200:	4b71      	ldr	r3, [pc, #452]	; (800f3c8 <dmp_set_gyro_bias+0x20c>)
 800f202:	891b      	ldrh	r3, [r3, #8]
 800f204:	f003 0320 	and.w	r3, r3, #32
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	425b      	negs	r3, r3
 800f210:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800f212:	4b6d      	ldr	r3, [pc, #436]	; (800f3c8 <dmp_set_gyro_bias+0x20c>)
 800f214:	891b      	ldrh	r3, [r3, #8]
 800f216:	099b      	lsrs	r3, r3, #6
 800f218:	b29b      	uxth	r3, r3
 800f21a:	f003 0303 	and.w	r3, r3, #3
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	69fa      	ldr	r2, [r7, #28]
 800f222:	4413      	add	r3, r2
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 800f228:	4b67      	ldr	r3, [pc, #412]	; (800f3c8 <dmp_set_gyro_bias+0x20c>)
 800f22a:	891b      	ldrh	r3, [r3, #8]
 800f22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	425b      	negs	r3, r3
 800f238:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23c:	17da      	asrs	r2, r3, #31
 800f23e:	613b      	str	r3, [r7, #16]
 800f240:	617a      	str	r2, [r7, #20]
 800f242:	4b62      	ldr	r3, [pc, #392]	; (800f3cc <dmp_set_gyro_bias+0x210>)
 800f244:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f248:	460a      	mov	r2, r1
 800f24a:	fb03 f202 	mul.w	r2, r3, r2
 800f24e:	2300      	movs	r3, #0
 800f250:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f254:	4601      	mov	r1, r0
 800f256:	fb01 f303 	mul.w	r3, r1, r3
 800f25a:	4413      	add	r3, r2
 800f25c:	4a5b      	ldr	r2, [pc, #364]	; (800f3cc <dmp_set_gyro_bias+0x210>)
 800f25e:	6939      	ldr	r1, [r7, #16]
 800f260:	fba1 ab02 	umull	sl, fp, r1, r2
 800f264:	445b      	add	r3, fp
 800f266:	469b      	mov	fp, r3
 800f268:	f04f 0200 	mov.w	r2, #0
 800f26c:	f04f 0300 	mov.w	r3, #0
 800f270:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800f274:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800f278:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800f27c:	4613      	mov	r3, r2
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 800f280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f282:	17da      	asrs	r2, r3, #31
 800f284:	60bb      	str	r3, [r7, #8]
 800f286:	60fa      	str	r2, [r7, #12]
 800f288:	4b50      	ldr	r3, [pc, #320]	; (800f3cc <dmp_set_gyro_bias+0x210>)
 800f28a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f28e:	465a      	mov	r2, fp
 800f290:	fb03 f202 	mul.w	r2, r3, r2
 800f294:	2300      	movs	r3, #0
 800f296:	4651      	mov	r1, sl
 800f298:	fb01 f303 	mul.w	r3, r1, r3
 800f29c:	4413      	add	r3, r2
 800f29e:	4a4b      	ldr	r2, [pc, #300]	; (800f3cc <dmp_set_gyro_bias+0x210>)
 800f2a0:	4651      	mov	r1, sl
 800f2a2:	fba1 8902 	umull	r8, r9, r1, r2
 800f2a6:	444b      	add	r3, r9
 800f2a8:	4699      	mov	r9, r3
 800f2aa:	f04f 0200 	mov.w	r2, #0
 800f2ae:	f04f 0300 	mov.w	r3, #0
 800f2b2:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800f2b6:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800f2ba:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800f2be:	4613      	mov	r3, r2
 800f2c0:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 800f2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c4:	17da      	asrs	r2, r3, #31
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	607a      	str	r2, [r7, #4]
 800f2ca:	4b40      	ldr	r3, [pc, #256]	; (800f3cc <dmp_set_gyro_bias+0x210>)
 800f2cc:	e9d7 8900 	ldrd	r8, r9, [r7]
 800f2d0:	464a      	mov	r2, r9
 800f2d2:	fb03 f202 	mul.w	r2, r3, r2
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	4641      	mov	r1, r8
 800f2da:	fb01 f303 	mul.w	r3, r1, r3
 800f2de:	4413      	add	r3, r2
 800f2e0:	4a3a      	ldr	r2, [pc, #232]	; (800f3cc <dmp_set_gyro_bias+0x210>)
 800f2e2:	4641      	mov	r1, r8
 800f2e4:	fba1 4502 	umull	r4, r5, r1, r2
 800f2e8:	442b      	add	r3, r5
 800f2ea:	461d      	mov	r5, r3
 800f2ec:	f04f 0200 	mov.w	r2, #0
 800f2f0:	f04f 0300 	mov.w	r3, #0
 800f2f4:	0fa2      	lsrs	r2, r4, #30
 800f2f6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800f2fa:	17ab      	asrs	r3, r5, #30
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	161b      	asrs	r3, r3, #24
 800f304:	b2db      	uxtb	r3, r3
 800f306:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	141b      	asrs	r3, r3, #16
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	121b      	asrs	r3, r3, #8
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 800f31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f320:	b2db      	uxtb	r3, r3
 800f322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800f326:	f107 0320 	add.w	r3, r7, #32
 800f32a:	461a      	mov	r2, r3
 800f32c:	2104      	movs	r1, #4
 800f32e:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 800f332:	f7ff fcd1 	bl	800ecd8 <mpu_write_mem>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <dmp_set_gyro_bias+0x186>
        return -1;
 800f33c:	f04f 33ff 	mov.w	r3, #4294967295
 800f340:	e03c      	b.n	800f3bc <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	161b      	asrs	r3, r3, #24
 800f346:	b2db      	uxtb	r3, r3
 800f348:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	141b      	asrs	r3, r3, #16
 800f350:	b2db      	uxtb	r3, r3
 800f352:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	121b      	asrs	r3, r3, #8
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	b2db      	uxtb	r3, r3
 800f364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 800f368:	f107 0320 	add.w	r3, r7, #32
 800f36c:	461a      	mov	r2, r3
 800f36e:	2104      	movs	r1, #4
 800f370:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 800f374:	f7ff fcb0 	bl	800ecd8 <mpu_write_mem>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <dmp_set_gyro_bias+0x1c8>
        return -1;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295
 800f382:	e01b      	b.n	800f3bc <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 800f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f386:	161b      	asrs	r3, r3, #24
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	141b      	asrs	r3, r3, #16
 800f392:	b2db      	uxtb	r3, r3
 800f394:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	121b      	asrs	r3, r3, #8
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800f3aa:	f107 0320 	add.w	r3, r7, #32
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	2104      	movs	r1, #4
 800f3b2:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 800f3b6:	f7ff fc8f 	bl	800ecd8 <mpu_write_mem>
 800f3ba:	4603      	mov	r3, r0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3730      	adds	r7, #48	; 0x30
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3c6:	bf00      	nop
 800f3c8:	200012cc 	.word	0x200012cc
 800f3cc:	02cae309 	.word	0x02cae309

0800f3d0 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 800f3d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3d4:	b094      	sub	sp, #80	; 0x50
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800f3da:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe fbb0 	bl	800db44 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 800f3e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	61bb      	str	r3, [r7, #24]
 800f3ec:	61fa      	str	r2, [r7, #28]
 800f3ee:	f04f 0200 	mov.w	r2, #0
 800f3f2:	f04f 0300 	mov.w	r3, #0
 800f3f6:	69f9      	ldr	r1, [r7, #28]
 800f3f8:	03cb      	lsls	r3, r1, #15
 800f3fa:	69b9      	ldr	r1, [r7, #24]
 800f3fc:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 800f400:	69b9      	ldr	r1, [r7, #24]
 800f402:	03ca      	lsls	r2, r1, #15
 800f404:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//    __no_operation();																																			//修改了

    accel_bias_body[0] = bias[dmp.orient & 3];
 800f408:	4b71      	ldr	r3, [pc, #452]	; (800f5d0 <dmp_set_accel_bias+0x200>)
 800f40a:	891b      	ldrh	r3, [r3, #8]
 800f40c:	f003 0303 	and.w	r3, r3, #3
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f414:	4413      	add	r3, r2
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 800f41a:	4b6d      	ldr	r3, [pc, #436]	; (800f5d0 <dmp_set_accel_bias+0x200>)
 800f41c:	891b      	ldrh	r3, [r3, #8]
 800f41e:	f003 0304 	and.w	r3, r3, #4
 800f422:	2b00      	cmp	r3, #0
 800f424:	d002      	beq.n	800f42c <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800f426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f428:	425b      	negs	r3, r3
 800f42a:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800f42c:	4b68      	ldr	r3, [pc, #416]	; (800f5d0 <dmp_set_accel_bias+0x200>)
 800f42e:	891b      	ldrh	r3, [r3, #8]
 800f430:	08db      	lsrs	r3, r3, #3
 800f432:	b29b      	uxth	r3, r3
 800f434:	f003 0303 	and.w	r3, r3, #3
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43c:	4413      	add	r3, r2
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 800f442:	4b63      	ldr	r3, [pc, #396]	; (800f5d0 <dmp_set_accel_bias+0x200>)
 800f444:	891b      	ldrh	r3, [r3, #8]
 800f446:	f003 0320 	and.w	r3, r3, #32
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d002      	beq.n	800f454 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 800f44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f450:	425b      	negs	r3, r3
 800f452:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800f454:	4b5e      	ldr	r3, [pc, #376]	; (800f5d0 <dmp_set_accel_bias+0x200>)
 800f456:	891b      	ldrh	r3, [r3, #8]
 800f458:	099b      	lsrs	r3, r3, #6
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	f003 0303 	and.w	r3, r3, #3
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f464:	4413      	add	r3, r2
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 800f46a:	4b59      	ldr	r3, [pc, #356]	; (800f5d0 <dmp_set_accel_bias+0x200>)
 800f46c:	891b      	ldrh	r3, [r3, #8]
 800f46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f472:	2b00      	cmp	r3, #0
 800f474:	d002      	beq.n	800f47c <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 800f476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f478:	425b      	negs	r3, r3
 800f47a:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 800f47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f47e:	17da      	asrs	r2, r3, #31
 800f480:	613b      	str	r3, [r7, #16]
 800f482:	617a      	str	r2, [r7, #20]
 800f484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f48a:	460a      	mov	r2, r1
 800f48c:	fb02 f203 	mul.w	r2, r2, r3
 800f490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f492:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f496:	4601      	mov	r1, r0
 800f498:	fb01 f303 	mul.w	r3, r1, r3
 800f49c:	4413      	add	r3, r2
 800f49e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a0:	6939      	ldr	r1, [r7, #16]
 800f4a2:	fba2 ab01 	umull	sl, fp, r2, r1
 800f4a6:	445b      	add	r3, fp
 800f4a8:	469b      	mov	fp, r3
 800f4aa:	f04f 0200 	mov.w	r2, #0
 800f4ae:	f04f 0300 	mov.w	r3, #0
 800f4b2:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800f4b6:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800f4ba:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800f4be:	4613      	mov	r3, r2
 800f4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 800f4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c4:	17da      	asrs	r2, r3, #31
 800f4c6:	60bb      	str	r3, [r7, #8]
 800f4c8:	60fa      	str	r2, [r7, #12]
 800f4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f4d0:	465a      	mov	r2, fp
 800f4d2:	fb02 f203 	mul.w	r2, r2, r3
 800f4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4d8:	4651      	mov	r1, sl
 800f4da:	fb01 f303 	mul.w	r3, r1, r3
 800f4de:	4413      	add	r3, r2
 800f4e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4e2:	4651      	mov	r1, sl
 800f4e4:	fba2 8901 	umull	r8, r9, r2, r1
 800f4e8:	444b      	add	r3, r9
 800f4ea:	4699      	mov	r9, r3
 800f4ec:	f04f 0200 	mov.w	r2, #0
 800f4f0:	f04f 0300 	mov.w	r3, #0
 800f4f4:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800f4f8:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800f4fc:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800f500:	4613      	mov	r3, r2
 800f502:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 800f504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f506:	17da      	asrs	r2, r3, #31
 800f508:	603b      	str	r3, [r7, #0]
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f50e:	e9d7 8900 	ldrd	r8, r9, [r7]
 800f512:	464a      	mov	r2, r9
 800f514:	fb02 f203 	mul.w	r2, r2, r3
 800f518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f51a:	4641      	mov	r1, r8
 800f51c:	fb01 f303 	mul.w	r3, r1, r3
 800f520:	4413      	add	r3, r2
 800f522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f524:	4641      	mov	r1, r8
 800f526:	fba2 4501 	umull	r4, r5, r2, r1
 800f52a:	442b      	add	r3, r5
 800f52c:	461d      	mov	r5, r3
 800f52e:	f04f 0200 	mov.w	r2, #0
 800f532:	f04f 0300 	mov.w	r3, #0
 800f536:	0fa2      	lsrs	r2, r4, #30
 800f538:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800f53c:	17ab      	asrs	r3, r5, #30
 800f53e:	4613      	mov	r3, r2
 800f540:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 800f542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f544:	161b      	asrs	r3, r3, #24
 800f546:	b2db      	uxtb	r3, r3
 800f548:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 800f54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54e:	141b      	asrs	r3, r3, #16
 800f550:	b2db      	uxtb	r3, r3
 800f552:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800f556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f558:	121b      	asrs	r3, r3, #8
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 800f560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f562:	b2db      	uxtb	r3, r3
 800f564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 800f568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56a:	161b      	asrs	r3, r3, #24
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800f572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f574:	141b      	asrs	r3, r3, #16
 800f576:	b2db      	uxtb	r3, r3
 800f578:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 800f57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f57e:	121b      	asrs	r3, r3, #8
 800f580:	b2db      	uxtb	r3, r3
 800f582:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800f586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 800f58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f590:	161b      	asrs	r3, r3, #24
 800f592:	b2db      	uxtb	r3, r3
 800f594:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 800f598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f59a:	141b      	asrs	r3, r3, #16
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800f5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5a4:	121b      	asrs	r3, r3, #8
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 800f5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800f5b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	210c      	movs	r1, #12
 800f5bc:	f44f 7025 	mov.w	r0, #660	; 0x294
 800f5c0:	f7ff fb8a 	bl	800ecd8 <mpu_write_mem>
 800f5c4:	4603      	mov	r3, r0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3750      	adds	r7, #80	; 0x50
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5d0:	200012cc 	.word	0x200012cc

0800f5d4 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b088      	sub	sp, #32
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	4603      	mov	r3, r0
 800f5dc:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800f5de:	4a1f      	ldr	r2, [pc, #124]	; (800f65c <dmp_set_fifo_rate+0x88>)
 800f5e0:	f107 0310 	add.w	r3, r7, #16
 800f5e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800f5ea:	88fb      	ldrh	r3, [r7, #6]
 800f5ec:	2bc8      	cmp	r3, #200	; 0xc8
 800f5ee:	d902      	bls.n	800f5f6 <dmp_set_fifo_rate+0x22>
        return -1;
 800f5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f4:	e02e      	b.n	800f654 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800f5f6:	88fb      	ldrh	r3, [r7, #6]
 800f5f8:	22c8      	movs	r2, #200	; 0xc8
 800f5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	3b01      	subs	r3, #1
 800f602:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800f604:	8bfb      	ldrh	r3, [r7, #30]
 800f606:	0a1b      	lsrs	r3, r3, #8
 800f608:	b29b      	uxth	r3, r3
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800f60e:	8bfb      	ldrh	r3, [r7, #30]
 800f610:	b2db      	uxtb	r3, r3
 800f612:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800f614:	f107 0308 	add.w	r3, r7, #8
 800f618:	461a      	mov	r2, r3
 800f61a:	2102      	movs	r1, #2
 800f61c:	f240 2016 	movw	r0, #534	; 0x216
 800f620:	f7ff fb5a 	bl	800ecd8 <mpu_write_mem>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d002      	beq.n	800f630 <dmp_set_fifo_rate+0x5c>
        return -1;
 800f62a:	f04f 33ff 	mov.w	r3, #4294967295
 800f62e:	e011      	b.n	800f654 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800f630:	f107 0310 	add.w	r3, r7, #16
 800f634:	461a      	mov	r2, r3
 800f636:	210c      	movs	r1, #12
 800f638:	f640 20c1 	movw	r0, #2753	; 0xac1
 800f63c:	f7ff fb4c 	bl	800ecd8 <mpu_write_mem>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d002      	beq.n	800f64c <dmp_set_fifo_rate+0x78>
        return -1;
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e003      	b.n	800f654 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800f64c:	4a04      	ldr	r2, [pc, #16]	; (800f660 <dmp_set_fifo_rate+0x8c>)
 800f64e:	88fb      	ldrh	r3, [r7, #6]
 800f650:	8193      	strh	r3, [r2, #12]
    return 0;
 800f652:	2300      	movs	r3, #0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3720      	adds	r7, #32
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	080193cc 	.word	0x080193cc
 800f660:	200012cc 	.word	0x200012cc

0800f664 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b086      	sub	sp, #24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	460a      	mov	r2, r1
 800f66e:	71fb      	strb	r3, [r7, #7]
 800f670:	4613      	mov	r3, r2
 800f672:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800f674:	79fb      	ldrb	r3, [r7, #7]
 800f676:	f003 0307 	and.w	r3, r3, #7
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d003      	beq.n	800f686 <dmp_set_tap_thresh+0x22>
 800f67e:	88bb      	ldrh	r3, [r7, #4]
 800f680:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f684:	d902      	bls.n	800f68c <dmp_set_tap_thresh+0x28>
        return -1;
 800f686:	f04f 33ff 	mov.w	r3, #4294967295
 800f68a:	e10b      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800f68c:	88bb      	ldrh	r3, [r7, #4]
 800f68e:	ee07 3a90 	vmov	s15, r3
 800f692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f696:	eddf 6a85 	vldr	s13, [pc, #532]	; 800f8ac <dmp_set_tap_thresh+0x248>
 800f69a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f69e:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800f6a2:	f107 030b 	add.w	r3, r7, #11
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe f866 	bl	800d778 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800f6ac:	7afb      	ldrb	r3, [r7, #11]
 800f6ae:	3b02      	subs	r3, #2
 800f6b0:	2b0e      	cmp	r3, #14
 800f6b2:	d87d      	bhi.n	800f7b0 <dmp_set_tap_thresh+0x14c>
 800f6b4:	a201      	add	r2, pc, #4	; (adr r2, 800f6bc <dmp_set_tap_thresh+0x58>)
 800f6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ba:	bf00      	nop
 800f6bc:	0800f6f9 	.word	0x0800f6f9
 800f6c0:	0800f7b1 	.word	0x0800f7b1
 800f6c4:	0800f727 	.word	0x0800f727
 800f6c8:	0800f7b1 	.word	0x0800f7b1
 800f6cc:	0800f7b1 	.word	0x0800f7b1
 800f6d0:	0800f7b1 	.word	0x0800f7b1
 800f6d4:	0800f755 	.word	0x0800f755
 800f6d8:	0800f7b1 	.word	0x0800f7b1
 800f6dc:	0800f7b1 	.word	0x0800f7b1
 800f6e0:	0800f7b1 	.word	0x0800f7b1
 800f6e4:	0800f7b1 	.word	0x0800f7b1
 800f6e8:	0800f7b1 	.word	0x0800f7b1
 800f6ec:	0800f7b1 	.word	0x0800f7b1
 800f6f0:	0800f7b1 	.word	0x0800f7b1
 800f6f4:	0800f783 	.word	0x0800f783
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800f6f8:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6fc:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800f8b0 <dmp_set_tap_thresh+0x24c>
 800f700:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f708:	ee17 3a90 	vmov	r3, s15
 800f70c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800f70e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f712:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800f8b4 <dmp_set_tap_thresh+0x250>
 800f716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f71a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f71e:	ee17 3a90 	vmov	r3, s15
 800f722:	82bb      	strh	r3, [r7, #20]
        break;
 800f724:	e047      	b.n	800f7b6 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800f726:	edd7 7a04 	vldr	s15, [r7, #16]
 800f72a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800f8b8 <dmp_set_tap_thresh+0x254>
 800f72e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f736:	ee17 3a90 	vmov	r3, s15
 800f73a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800f73c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f740:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800f8bc <dmp_set_tap_thresh+0x258>
 800f744:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f74c:	ee17 3a90 	vmov	r3, s15
 800f750:	82bb      	strh	r3, [r7, #20]
        break;
 800f752:	e030      	b.n	800f7b6 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800f754:	edd7 7a04 	vldr	s15, [r7, #16]
 800f758:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f8c0 <dmp_set_tap_thresh+0x25c>
 800f75c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f764:	ee17 3a90 	vmov	r3, s15
 800f768:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800f76a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f76e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800f8c4 <dmp_set_tap_thresh+0x260>
 800f772:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f77a:	ee17 3a90 	vmov	r3, s15
 800f77e:	82bb      	strh	r3, [r7, #20]
        break;
 800f780:	e019      	b.n	800f7b6 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800f782:	edd7 7a04 	vldr	s15, [r7, #16]
 800f786:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800f8c8 <dmp_set_tap_thresh+0x264>
 800f78a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f78e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f792:	ee17 3a90 	vmov	r3, s15
 800f796:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800f798:	edd7 7a04 	vldr	s15, [r7, #16]
 800f79c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f8cc <dmp_set_tap_thresh+0x268>
 800f7a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7a8:	ee17 3a90 	vmov	r3, s15
 800f7ac:	82bb      	strh	r3, [r7, #20]
        break;
 800f7ae:	e002      	b.n	800f7b6 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 800f7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b4:	e076      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800f7b6:	8afb      	ldrh	r3, [r7, #22]
 800f7b8:	0a1b      	lsrs	r3, r3, #8
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800f7c0:	8afb      	ldrh	r3, [r7, #22]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800f7c6:	8abb      	ldrh	r3, [r7, #20]
 800f7c8:	0a1b      	lsrs	r3, r3, #8
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800f7d0:	8abb      	ldrh	r3, [r7, #20]
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800f7d6:	79fb      	ldrb	r3, [r7, #7]
 800f7d8:	f003 0301 	and.w	r3, r3, #1
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d01c      	beq.n	800f81a <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800f7e0:	f107 030c 	add.w	r3, r7, #12
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	2102      	movs	r1, #2
 800f7e8:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800f7ec:	f7ff fa74 	bl	800ecd8 <mpu_write_mem>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d002      	beq.n	800f7fc <dmp_set_tap_thresh+0x198>
            return -1;
 800f7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fa:	e053      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800f7fc:	f107 030c 	add.w	r3, r7, #12
 800f800:	3302      	adds	r3, #2
 800f802:	461a      	mov	r2, r3
 800f804:	2102      	movs	r1, #2
 800f806:	f44f 7092 	mov.w	r0, #292	; 0x124
 800f80a:	f7ff fa65 	bl	800ecd8 <mpu_write_mem>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <dmp_set_tap_thresh+0x1b6>
            return -1;
 800f814:	f04f 33ff 	mov.w	r3, #4294967295
 800f818:	e044      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800f81a:	79fb      	ldrb	r3, [r7, #7]
 800f81c:	f003 0302 	and.w	r3, r3, #2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d01c      	beq.n	800f85e <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800f824:	f107 030c 	add.w	r3, r7, #12
 800f828:	461a      	mov	r2, r3
 800f82a:	2102      	movs	r1, #2
 800f82c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800f830:	f7ff fa52 	bl	800ecd8 <mpu_write_mem>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <dmp_set_tap_thresh+0x1dc>
            return -1;
 800f83a:	f04f 33ff 	mov.w	r3, #4294967295
 800f83e:	e031      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800f840:	f107 030c 	add.w	r3, r7, #12
 800f844:	3302      	adds	r3, #2
 800f846:	461a      	mov	r2, r3
 800f848:	2102      	movs	r1, #2
 800f84a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800f84e:	f7ff fa43 	bl	800ecd8 <mpu_write_mem>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d002      	beq.n	800f85e <dmp_set_tap_thresh+0x1fa>
            return -1;
 800f858:	f04f 33ff 	mov.w	r3, #4294967295
 800f85c:	e022      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	f003 0304 	and.w	r3, r3, #4
 800f864:	2b00      	cmp	r3, #0
 800f866:	d01c      	beq.n	800f8a2 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800f868:	f107 030c 	add.w	r3, r7, #12
 800f86c:	461a      	mov	r2, r3
 800f86e:	2102      	movs	r1, #2
 800f870:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800f874:	f7ff fa30 	bl	800ecd8 <mpu_write_mem>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <dmp_set_tap_thresh+0x220>
            return -1;
 800f87e:	f04f 33ff 	mov.w	r3, #4294967295
 800f882:	e00f      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800f884:	f107 030c 	add.w	r3, r7, #12
 800f888:	3302      	adds	r3, #2
 800f88a:	461a      	mov	r2, r3
 800f88c:	2102      	movs	r1, #2
 800f88e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f892:	f7ff fa21 	bl	800ecd8 <mpu_write_mem>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <dmp_set_tap_thresh+0x23e>
            return -1;
 800f89c:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a0:	e000      	b.n	800f8a4 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3718      	adds	r7, #24
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	43480000 	.word	0x43480000
 800f8b0:	46800000 	.word	0x46800000
 800f8b4:	46400000 	.word	0x46400000
 800f8b8:	46000000 	.word	0x46000000
 800f8bc:	45c00000 	.word	0x45c00000
 800f8c0:	45800000 	.word	0x45800000
 800f8c4:	45400000 	.word	0x45400000
 800f8c8:	45000000 	.word	0x45000000
 800f8cc:	44c00000 	.word	0x44c00000

0800f8d0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800f8de:	79fb      	ldrb	r3, [r7, #7]
 800f8e0:	f003 0301 	and.w	r3, r3, #1
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d004      	beq.n	800f8f2 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800f8e8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800f8f2:	79fb      	ldrb	r3, [r7, #7]
 800f8f4:	f003 0302 	and.w	r3, r3, #2
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d004      	beq.n	800f906 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	f043 030c 	orr.w	r3, r3, #12
 800f902:	b2db      	uxtb	r3, r3
 800f904:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800f906:	79fb      	ldrb	r3, [r7, #7]
 800f908:	f003 0304 	and.w	r3, r3, #4
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d004      	beq.n	800f91a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800f910:	7bfb      	ldrb	r3, [r7, #15]
 800f912:	f043 0303 	orr.w	r3, r3, #3
 800f916:	b2db      	uxtb	r3, r3
 800f918:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800f91a:	f107 030f 	add.w	r3, r7, #15
 800f91e:	461a      	mov	r2, r3
 800f920:	2101      	movs	r1, #1
 800f922:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800f926:	f7ff f9d7 	bl	800ecd8 <mpu_write_mem>
 800f92a:	4603      	mov	r3, r0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	4603      	mov	r3, r0
 800f93c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800f93e:	79fb      	ldrb	r3, [r7, #7]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d102      	bne.n	800f94a <dmp_set_tap_count+0x16>
        min_taps = 1;
 800f944:	2301      	movs	r3, #1
 800f946:	71fb      	strb	r3, [r7, #7]
 800f948:	e004      	b.n	800f954 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800f94a:	79fb      	ldrb	r3, [r7, #7]
 800f94c:	2b04      	cmp	r3, #4
 800f94e:	d901      	bls.n	800f954 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800f950:	2304      	movs	r3, #4
 800f952:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800f954:	79fb      	ldrb	r3, [r7, #7]
 800f956:	3b01      	subs	r3, #1
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800f95c:	f107 030f 	add.w	r3, r7, #15
 800f960:	461a      	mov	r2, r3
 800f962:	2101      	movs	r1, #1
 800f964:	f240 104f 	movw	r0, #335	; 0x14f
 800f968:	f7ff f9b6 	bl	800ecd8 <mpu_write_mem>
 800f96c:	4603      	mov	r3, r0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3710      	adds	r7, #16
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
	...

0800f978 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	4603      	mov	r3, r0
 800f980:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800f982:	88fb      	ldrh	r3, [r7, #6]
 800f984:	4a0c      	ldr	r2, [pc, #48]	; (800f9b8 <dmp_set_tap_time+0x40>)
 800f986:	fba2 2303 	umull	r2, r3, r2, r3
 800f98a:	089b      	lsrs	r3, r3, #2
 800f98c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800f98e:	89fb      	ldrh	r3, [r7, #14]
 800f990:	0a1b      	lsrs	r3, r3, #8
 800f992:	b29b      	uxth	r3, r3
 800f994:	b2db      	uxtb	r3, r3
 800f996:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800f998:	89fb      	ldrh	r3, [r7, #14]
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800f99e:	f107 030c 	add.w	r3, r7, #12
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	2102      	movs	r1, #2
 800f9a6:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800f9aa:	f7ff f995 	bl	800ecd8 <mpu_write_mem>
 800f9ae:	4603      	mov	r3, r0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	cccccccd 	.word	0xcccccccd

0800f9bc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800f9c6:	88fb      	ldrh	r3, [r7, #6]
 800f9c8:	4a0c      	ldr	r2, [pc, #48]	; (800f9fc <dmp_set_tap_time_multi+0x40>)
 800f9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ce:	089b      	lsrs	r3, r3, #2
 800f9d0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800f9d2:	89fb      	ldrh	r3, [r7, #14]
 800f9d4:	0a1b      	lsrs	r3, r3, #8
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800f9dc:	89fb      	ldrh	r3, [r7, #14]
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800f9e2:	f107 030c 	add.w	r3, r7, #12
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	2102      	movs	r1, #2
 800f9ea:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800f9ee:	f7ff f973 	bl	800ecd8 <mpu_write_mem>
 800f9f2:	4603      	mov	r3, r0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	cccccccd 	.word	0xcccccccd

0800fa00 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a13      	ldr	r2, [pc, #76]	; (800fa5c <dmp_set_shake_reject_thresh+0x5c>)
 800fa10:	fb82 1203 	smull	r1, r2, r2, r3
 800fa14:	1192      	asrs	r2, r2, #6
 800fa16:	17db      	asrs	r3, r3, #31
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	887a      	ldrh	r2, [r7, #2]
 800fa1c:	fb02 f303 	mul.w	r3, r2, r3
 800fa20:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	161b      	asrs	r3, r3, #24
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	141b      	asrs	r3, r3, #16
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	121b      	asrs	r3, r3, #8
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800fa40:	f107 0308 	add.w	r3, r7, #8
 800fa44:	461a      	mov	r2, r3
 800fa46:	2104      	movs	r1, #4
 800fa48:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800fa4c:	f7ff f944 	bl	800ecd8 <mpu_write_mem>
 800fa50:	4603      	mov	r3, r0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	10624dd3 	.word	0x10624dd3

0800fa60 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	4603      	mov	r3, r0
 800fa68:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800fa6a:	88fb      	ldrh	r3, [r7, #6]
 800fa6c:	4a0c      	ldr	r2, [pc, #48]	; (800faa0 <dmp_set_shake_reject_time+0x40>)
 800fa6e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa72:	089b      	lsrs	r3, r3, #2
 800fa74:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800fa76:	88fb      	ldrh	r3, [r7, #6]
 800fa78:	0a1b      	lsrs	r3, r3, #8
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800fa80:	88fb      	ldrh	r3, [r7, #6]
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800fa86:	f107 030c 	add.w	r3, r7, #12
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	2102      	movs	r1, #2
 800fa8e:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800fa92:	f7ff f921 	bl	800ecd8 <mpu_write_mem>
 800fa96:	4603      	mov	r3, r0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	cccccccd 	.word	0xcccccccd

0800faa4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800faae:	88fb      	ldrh	r3, [r7, #6]
 800fab0:	4a0c      	ldr	r2, [pc, #48]	; (800fae4 <dmp_set_shake_reject_timeout+0x40>)
 800fab2:	fba2 2303 	umull	r2, r3, r2, r3
 800fab6:	089b      	lsrs	r3, r3, #2
 800fab8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800faba:	88fb      	ldrh	r3, [r7, #6]
 800fabc:	0a1b      	lsrs	r3, r3, #8
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800fac4:	88fb      	ldrh	r3, [r7, #6]
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800faca:	f107 030c 	add.w	r3, r7, #12
 800face:	461a      	mov	r2, r3
 800fad0:	2102      	movs	r1, #2
 800fad2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800fad6:	f7ff f8ff 	bl	800ecd8 <mpu_write_mem>
 800fada:	4603      	mov	r3, r0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	cccccccd 	.word	0xcccccccd

0800fae8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800faf2:	2302      	movs	r3, #2
 800faf4:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800faf6:	23ca      	movs	r3, #202	; 0xca
 800faf8:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800fafa:	23e3      	movs	r3, #227	; 0xe3
 800fafc:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800fafe:	2309      	movs	r3, #9
 800fb00:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800fb02:	f107 030c 	add.w	r3, r7, #12
 800fb06:	461a      	mov	r2, r3
 800fb08:	2104      	movs	r1, #4
 800fb0a:	2068      	movs	r0, #104	; 0x68
 800fb0c:	f7ff f8e4 	bl	800ecd8 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800fb10:	23a3      	movs	r3, #163	; 0xa3
 800fb12:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800fb14:	88fb      	ldrh	r3, [r7, #6]
 800fb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d006      	beq.n	800fb2c <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800fb1e:	23c0      	movs	r3, #192	; 0xc0
 800fb20:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800fb22:	23c8      	movs	r3, #200	; 0xc8
 800fb24:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800fb26:	23c2      	movs	r3, #194	; 0xc2
 800fb28:	73fb      	strb	r3, [r7, #15]
 800fb2a:	e005      	b.n	800fb38 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800fb2c:	23a3      	movs	r3, #163	; 0xa3
 800fb2e:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800fb30:	23a3      	movs	r3, #163	; 0xa3
 800fb32:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800fb34:	23a3      	movs	r3, #163	; 0xa3
 800fb36:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800fb38:	88fb      	ldrh	r3, [r7, #6]
 800fb3a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d006      	beq.n	800fb50 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800fb42:	23c4      	movs	r3, #196	; 0xc4
 800fb44:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800fb46:	23cc      	movs	r3, #204	; 0xcc
 800fb48:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800fb4a:	23c6      	movs	r3, #198	; 0xc6
 800fb4c:	74bb      	strb	r3, [r7, #18]
 800fb4e:	e005      	b.n	800fb5c <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800fb50:	23a3      	movs	r3, #163	; 0xa3
 800fb52:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800fb54:	23a3      	movs	r3, #163	; 0xa3
 800fb56:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800fb58:	23a3      	movs	r3, #163	; 0xa3
 800fb5a:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800fb5c:	23a3      	movs	r3, #163	; 0xa3
 800fb5e:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800fb60:	23a3      	movs	r3, #163	; 0xa3
 800fb62:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800fb64:	23a3      	movs	r3, #163	; 0xa3
 800fb66:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 800fb68:	f107 030c 	add.w	r3, r7, #12
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	210a      	movs	r1, #10
 800fb70:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800fb74:	f7ff f8b0 	bl	800ecd8 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800fb78:	88fb      	ldrh	r3, [r7, #6]
 800fb7a:	f003 0303 	and.w	r3, r3, #3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800fb82:	2320      	movs	r3, #32
 800fb84:	733b      	strb	r3, [r7, #12]
 800fb86:	e001      	b.n	800fb8c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800fb88:	23d8      	movs	r3, #216	; 0xd8
 800fb8a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800fb8c:	f107 030c 	add.w	r3, r7, #12
 800fb90:	461a      	mov	r2, r3
 800fb92:	2101      	movs	r1, #1
 800fb94:	f640 20b6 	movw	r0, #2742	; 0xab6
 800fb98:	f7ff f89e 	bl	800ecd8 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800fb9c:	88fb      	ldrh	r3, [r7, #6]
 800fb9e:	f003 0320 	and.w	r3, r3, #32
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d003      	beq.n	800fbae <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800fba6:	2001      	movs	r0, #1
 800fba8:	f000 f8c6 	bl	800fd38 <dmp_enable_gyro_cal>
 800fbac:	e002      	b.n	800fbb4 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800fbae:	2000      	movs	r0, #0
 800fbb0:	f000 f8c2 	bl	800fd38 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800fbb4:	88fb      	ldrh	r3, [r7, #6]
 800fbb6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d01d      	beq.n	800fbfa <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800fbbe:	88fb      	ldrh	r3, [r7, #6]
 800fbc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d008      	beq.n	800fbda <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800fbc8:	23b2      	movs	r3, #178	; 0xb2
 800fbca:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800fbcc:	238b      	movs	r3, #139	; 0x8b
 800fbce:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800fbd0:	23b6      	movs	r3, #182	; 0xb6
 800fbd2:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800fbd4:	239b      	movs	r3, #155	; 0x9b
 800fbd6:	73fb      	strb	r3, [r7, #15]
 800fbd8:	e007      	b.n	800fbea <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800fbda:	23b0      	movs	r3, #176	; 0xb0
 800fbdc:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800fbde:	2380      	movs	r3, #128	; 0x80
 800fbe0:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800fbe2:	23b4      	movs	r3, #180	; 0xb4
 800fbe4:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800fbe6:	2390      	movs	r3, #144	; 0x90
 800fbe8:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800fbea:	f107 030c 	add.w	r3, r7, #12
 800fbee:	461a      	mov	r2, r3
 800fbf0:	2104      	movs	r1, #4
 800fbf2:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800fbf6:	f7ff f86f 	bl	800ecd8 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800fbfa:	88fb      	ldrh	r3, [r7, #6]
 800fbfc:	f003 0301 	and.w	r3, r3, #1
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d025      	beq.n	800fc50 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800fc04:	23f8      	movs	r3, #248	; 0xf8
 800fc06:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800fc08:	f107 030c 	add.w	r3, r7, #12
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	2101      	movs	r1, #1
 800fc10:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800fc14:	f7ff f860 	bl	800ecd8 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800fc18:	21fa      	movs	r1, #250	; 0xfa
 800fc1a:	2007      	movs	r0, #7
 800fc1c:	f7ff fd22 	bl	800f664 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800fc20:	2007      	movs	r0, #7
 800fc22:	f7ff fe55 	bl	800f8d0 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800fc26:	2001      	movs	r0, #1
 800fc28:	f7ff fe84 	bl	800f934 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800fc2c:	2064      	movs	r0, #100	; 0x64
 800fc2e:	f7ff fea3 	bl	800f978 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800fc32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc36:	f7ff fec1 	bl	800f9bc <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800fc3a:	21c8      	movs	r1, #200	; 0xc8
 800fc3c:	483c      	ldr	r0, [pc, #240]	; (800fd30 <dmp_enable_feature+0x248>)
 800fc3e:	f7ff fedf 	bl	800fa00 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800fc42:	2028      	movs	r0, #40	; 0x28
 800fc44:	f7ff ff0c 	bl	800fa60 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800fc48:	200a      	movs	r0, #10
 800fc4a:	f7ff ff2b 	bl	800faa4 <dmp_set_shake_reject_timeout>
 800fc4e:	e009      	b.n	800fc64 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800fc50:	23d8      	movs	r3, #216	; 0xd8
 800fc52:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800fc54:	f107 030c 	add.w	r3, r7, #12
 800fc58:	461a      	mov	r2, r3
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800fc60:	f7ff f83a 	bl	800ecd8 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800fc64:	88fb      	ldrh	r3, [r7, #6]
 800fc66:	f003 0302 	and.w	r3, r3, #2
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d002      	beq.n	800fc74 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 800fc6e:	23d9      	movs	r3, #217	; 0xd9
 800fc70:	733b      	strb	r3, [r7, #12]
 800fc72:	e001      	b.n	800fc78 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800fc74:	23d8      	movs	r3, #216	; 0xd8
 800fc76:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800fc78:	f107 030c 	add.w	r3, r7, #12
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	2101      	movs	r1, #1
 800fc80:	f240 703d 	movw	r0, #1853	; 0x73d
 800fc84:	f7ff f828 	bl	800ecd8 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800fc88:	88fb      	ldrh	r3, [r7, #6]
 800fc8a:	f003 0304 	and.w	r3, r3, #4
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d003      	beq.n	800fc9a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800fc92:	2001      	movs	r0, #1
 800fc94:	f000 f880 	bl	800fd98 <dmp_enable_lp_quat>
 800fc98:	e002      	b.n	800fca0 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	f000 f87c 	bl	800fd98 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800fca0:	88fb      	ldrh	r3, [r7, #6]
 800fca2:	f003 0310 	and.w	r3, r3, #16
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d003      	beq.n	800fcb2 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800fcaa:	2001      	movs	r0, #1
 800fcac:	f000 f89b 	bl	800fde6 <dmp_enable_6x_lp_quat>
 800fcb0:	e002      	b.n	800fcb8 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	f000 f897 	bl	800fde6 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800fcb8:	88fb      	ldrh	r3, [r7, #6]
 800fcba:	f043 0308 	orr.w	r3, r3, #8
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	4b1c      	ldr	r3, [pc, #112]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fcc2:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800fcc4:	f7fd fbcc 	bl	800d460 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800fcc8:	4b1a      	ldr	r3, [pc, #104]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800fcce:	88fb      	ldrh	r3, [r7, #6]
 800fcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d005      	beq.n	800fce4 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800fcd8:	4b16      	ldr	r3, [pc, #88]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fcda:	7b9b      	ldrb	r3, [r3, #14]
 800fcdc:	3306      	adds	r3, #6
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	4b14      	ldr	r3, [pc, #80]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fce2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800fce4:	88fb      	ldrh	r3, [r7, #6]
 800fce6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d005      	beq.n	800fcfa <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800fcee:	4b11      	ldr	r3, [pc, #68]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fcf0:	7b9b      	ldrb	r3, [r3, #14]
 800fcf2:	3306      	adds	r3, #6
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	4b0f      	ldr	r3, [pc, #60]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fcf8:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800fcfa:	88fb      	ldrh	r3, [r7, #6]
 800fcfc:	f003 0314 	and.w	r3, r3, #20
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d005      	beq.n	800fd10 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800fd04:	4b0b      	ldr	r3, [pc, #44]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fd06:	7b9b      	ldrb	r3, [r3, #14]
 800fd08:	3310      	adds	r3, #16
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	4b09      	ldr	r3, [pc, #36]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fd0e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800fd10:	88fb      	ldrh	r3, [r7, #6]
 800fd12:	f003 0303 	and.w	r3, r3, #3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d005      	beq.n	800fd26 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800fd1a:	4b06      	ldr	r3, [pc, #24]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fd1c:	7b9b      	ldrb	r3, [r3, #14]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <dmp_enable_feature+0x24c>)
 800fd24:	739a      	strb	r2, [r3, #14]

    return 0;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	02cae309 	.word	0x02cae309
 800fd34:	200012cc 	.word	0x200012cc

0800fd38 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b088      	sub	sp, #32
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	4603      	mov	r3, r0
 800fd40:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00f      	beq.n	800fd68 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800fd48:	4a11      	ldr	r2, [pc, #68]	; (800fd90 <dmp_enable_gyro_cal+0x58>)
 800fd4a:	f107 0314 	add.w	r3, r7, #20
 800fd4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd50:	c303      	stmia	r3!, {r0, r1}
 800fd52:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800fd54:	f107 0314 	add.w	r3, r7, #20
 800fd58:	461a      	mov	r2, r3
 800fd5a:	2109      	movs	r1, #9
 800fd5c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800fd60:	f7fe ffba 	bl	800ecd8 <mpu_write_mem>
 800fd64:	4603      	mov	r3, r0
 800fd66:	e00e      	b.n	800fd86 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800fd68:	4a0a      	ldr	r2, [pc, #40]	; (800fd94 <dmp_enable_gyro_cal+0x5c>)
 800fd6a:	f107 0308 	add.w	r3, r7, #8
 800fd6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd70:	c303      	stmia	r3!, {r0, r1}
 800fd72:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800fd74:	f107 0308 	add.w	r3, r7, #8
 800fd78:	461a      	mov	r2, r3
 800fd7a:	2109      	movs	r1, #9
 800fd7c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800fd80:	f7fe ffaa 	bl	800ecd8 <mpu_write_mem>
 800fd84:	4603      	mov	r3, r0
    }
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3720      	adds	r7, #32
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	080193d8 	.word	0x080193d8
 800fd94:	080193e4 	.word	0x080193e4

0800fd98 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	4603      	mov	r3, r0
 800fda0:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d008      	beq.n	800fdba <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800fda8:	23c0      	movs	r3, #192	; 0xc0
 800fdaa:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800fdac:	23c2      	movs	r3, #194	; 0xc2
 800fdae:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800fdb0:	23c4      	movs	r3, #196	; 0xc4
 800fdb2:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800fdb4:	23c6      	movs	r3, #198	; 0xc6
 800fdb6:	73fb      	strb	r3, [r7, #15]
 800fdb8:	e006      	b.n	800fdc8 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800fdba:	f107 030c 	add.w	r3, r7, #12
 800fdbe:	2204      	movs	r2, #4
 800fdc0:	218b      	movs	r1, #139	; 0x8b
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f003 ffa6 	bl	8013d14 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800fdc8:	f107 030c 	add.w	r3, r7, #12
 800fdcc:	461a      	mov	r2, r3
 800fdce:	2104      	movs	r1, #4
 800fdd0:	f640 2098 	movw	r0, #2712	; 0xa98
 800fdd4:	f7fe ff80 	bl	800ecd8 <mpu_write_mem>

    return mpu_reset_fifo();
 800fdd8:	f7fd fb42 	bl	800d460 <mpu_reset_fifo>
 800fddc:	4603      	mov	r3, r0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b084      	sub	sp, #16
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	4603      	mov	r3, r0
 800fdee:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d008      	beq.n	800fe08 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800fdf6:	2320      	movs	r3, #32
 800fdf8:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800fdfa:	2328      	movs	r3, #40	; 0x28
 800fdfc:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800fdfe:	2330      	movs	r3, #48	; 0x30
 800fe00:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800fe02:	2338      	movs	r3, #56	; 0x38
 800fe04:	73fb      	strb	r3, [r7, #15]
 800fe06:	e006      	b.n	800fe16 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800fe08:	f107 030c 	add.w	r3, r7, #12
 800fe0c:	2204      	movs	r2, #4
 800fe0e:	21a3      	movs	r1, #163	; 0xa3
 800fe10:	4618      	mov	r0, r3
 800fe12:	f003 ff7f 	bl	8013d14 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800fe16:	f107 030c 	add.w	r3, r7, #12
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	2104      	movs	r1, #4
 800fe1e:	f640 209e 	movw	r0, #2718	; 0xa9e
 800fe22:	f7fe ff59 	bl	800ecd8 <mpu_write_mem>

    return mpu_reset_fifo();
 800fe26:	f7fd fb1b 	bl	800d460 <mpu_reset_fifo>
 800fe2a:	4603      	mov	r3, r0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	3303      	adds	r3, #3
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fe46:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	3303      	adds	r3, #3
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe52:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	3301      	adds	r3, #1
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d012      	beq.n	800fe88 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800fe62:	7bbb      	ldrb	r3, [r7, #14]
 800fe64:	08db      	lsrs	r3, r3, #3
 800fe66:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800fe68:	7bbb      	ldrb	r3, [r7, #14]
 800fe6a:	f003 0307 	and.w	r3, r3, #7
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	3301      	adds	r3, #1
 800fe72:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800fe74:	4b10      	ldr	r3, [pc, #64]	; (800feb8 <decode_gesture+0x84>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d005      	beq.n	800fe88 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800fe7c:	4b0e      	ldr	r3, [pc, #56]	; (800feb8 <decode_gesture+0x84>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	7b39      	ldrb	r1, [r7, #12]
 800fe82:	7b7a      	ldrb	r2, [r7, #13]
 800fe84:	4610      	mov	r0, r2
 800fe86:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	f003 0308 	and.w	r3, r3, #8
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00a      	beq.n	800feac <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800fe96:	4b08      	ldr	r3, [pc, #32]	; (800feb8 <decode_gesture+0x84>)
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d006      	beq.n	800feac <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800fe9e:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <decode_gesture+0x84>)
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	7bfa      	ldrb	r2, [r7, #15]
 800fea4:	0992      	lsrs	r2, r2, #6
 800fea6:	b2d2      	uxtb	r2, r2
 800fea8:	4610      	mov	r0, r2
 800feaa:	4798      	blx	r3
    }

    return 0;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	200012cc 	.word	0x200012cc

0800febc <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b092      	sub	sp, #72	; 0x48
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800feca:	2300      	movs	r3, #0
 800fecc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800fed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fed2:	2200      	movs	r2, #0
 800fed4:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800fed6:	4bae      	ldr	r3, [pc, #696]	; (8010190 <dmp_read_fifo+0x2d4>)
 800fed8:	7b9b      	ldrb	r3, [r3, #14]
 800feda:	b29b      	uxth	r3, r3
 800fedc:	f107 0120 	add.w	r1, r7, #32
 800fee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fd ff56 	bl	800dd94 <mpu_read_fifo_stream>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d002      	beq.n	800fef4 <dmp_read_fifo+0x38>
        return -1;
 800feee:	f04f 33ff 	mov.w	r3, #4294967295
 800fef2:	e148      	b.n	8010186 <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800fef4:	4ba6      	ldr	r3, [pc, #664]	; (8010190 <dmp_read_fifo+0x2d4>)
 800fef6:	895b      	ldrh	r3, [r3, #10]
 800fef8:	f003 0314 	and.w	r3, r3, #20
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 808a 	beq.w	8010016 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800ff02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff06:	061a      	lsls	r2, r3, #24
 800ff08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ff0c:	041b      	lsls	r3, r3, #16
 800ff0e:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800ff10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff14:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800ff16:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800ff18:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ff1c:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff26:	061a      	lsls	r2, r3, #24
 800ff28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ff2c:	041b      	lsls	r3, r3, #16
 800ff2e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800ff30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff34:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff36:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800ff38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff3c:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800ff42:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff44:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff4a:	061a      	lsls	r2, r3, #24
 800ff4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ff50:	041b      	lsls	r3, r3, #16
 800ff52:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800ff54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ff58:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff5a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800ff5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff60:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800ff66:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff68:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff6e:	061a      	lsls	r2, r3, #24
 800ff70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ff74:	041b      	lsls	r3, r3, #16
 800ff76:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800ff78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ff7c:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff7e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800ff80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff84:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800ff8a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff8c:	601a      	str	r2, [r3, #0]
        ii += 16;
 800ff8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ff92:	3310      	adds	r3, #16
 800ff94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	141b      	asrs	r3, r3, #16
 800ff9e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	141b      	asrs	r3, r3, #16
 800ffa8:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	3308      	adds	r3, #8
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	141b      	asrs	r3, r3, #16
 800ffb2:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	330c      	adds	r3, #12
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	141b      	asrs	r3, r3, #16
 800ffbc:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	693a      	ldr	r2, [r7, #16]
 800ffc2:	fb03 f202 	mul.w	r2, r3, r2
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	6979      	ldr	r1, [r7, #20]
 800ffca:	fb01 f303 	mul.w	r3, r1, r3
 800ffce:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	69b9      	ldr	r1, [r7, #24]
 800ffd4:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800ffd8:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	69f9      	ldr	r1, [r7, #28]
 800ffde:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800ffe2:	4413      	add	r3, r2
 800ffe4:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800ffe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffe8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ffec:	db03      	blt.n	800fff6 <dmp_read_fifo+0x13a>
 800ffee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff0:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 800fff4:	dd07      	ble.n	8010006 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800fff6:	f7fd fa33 	bl	800d460 <mpu_reset_fifo>
            sensors[0] = 0;
 800fffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffc:	2200      	movs	r2, #0
 800fffe:	801a      	strh	r2, [r3, #0]
            return -1;
 8010000:	f04f 33ff 	mov.w	r3, #4294967295
 8010004:	e0bf      	b.n	8010186 <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8010006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010008:	f9b3 3000 	ldrsh.w	r3, [r3]
 801000c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010010:	b21a      	sxth	r2, r3
 8010012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010014:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8010016:	4b5e      	ldr	r3, [pc, #376]	; (8010190 <dmp_read_fifo+0x2d4>)
 8010018:	895b      	ldrh	r3, [r3, #10]
 801001a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801001e:	2b00      	cmp	r3, #0
 8010020:	d04c      	beq.n	80100bc <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8010022:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010026:	3348      	adds	r3, #72	; 0x48
 8010028:	443b      	add	r3, r7
 801002a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801002e:	021b      	lsls	r3, r3, #8
 8010030:	b21a      	sxth	r2, r3
 8010032:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010036:	3301      	adds	r3, #1
 8010038:	3348      	adds	r3, #72	; 0x48
 801003a:	443b      	add	r3, r7
 801003c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010040:	b21b      	sxth	r3, r3
 8010042:	4313      	orrs	r3, r2
 8010044:	b21a      	sxth	r2, r3
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 801004a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801004e:	3302      	adds	r3, #2
 8010050:	3348      	adds	r3, #72	; 0x48
 8010052:	443b      	add	r3, r7
 8010054:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010058:	021b      	lsls	r3, r3, #8
 801005a:	b219      	sxth	r1, r3
 801005c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010060:	3303      	adds	r3, #3
 8010062:	3348      	adds	r3, #72	; 0x48
 8010064:	443b      	add	r3, r7
 8010066:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801006a:	b21a      	sxth	r2, r3
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	3302      	adds	r3, #2
 8010070:	430a      	orrs	r2, r1
 8010072:	b212      	sxth	r2, r2
 8010074:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8010076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801007a:	3304      	adds	r3, #4
 801007c:	3348      	adds	r3, #72	; 0x48
 801007e:	443b      	add	r3, r7
 8010080:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010084:	021b      	lsls	r3, r3, #8
 8010086:	b219      	sxth	r1, r3
 8010088:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801008c:	3305      	adds	r3, #5
 801008e:	3348      	adds	r3, #72	; 0x48
 8010090:	443b      	add	r3, r7
 8010092:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010096:	b21a      	sxth	r2, r3
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	3304      	adds	r3, #4
 801009c:	430a      	orrs	r2, r1
 801009e:	b212      	sxth	r2, r2
 80100a0:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80100a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100a6:	3306      	adds	r3, #6
 80100a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 80100ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100b2:	f043 0308 	orr.w	r3, r3, #8
 80100b6:	b21a      	sxth	r2, r3
 80100b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ba:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80100bc:	4b34      	ldr	r3, [pc, #208]	; (8010190 <dmp_read_fifo+0x2d4>)
 80100be:	895b      	ldrh	r3, [r3, #10]
 80100c0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d04c      	beq.n	8010162 <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80100c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100cc:	3348      	adds	r3, #72	; 0x48
 80100ce:	443b      	add	r3, r7
 80100d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80100d4:	021b      	lsls	r3, r3, #8
 80100d6:	b21a      	sxth	r2, r3
 80100d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100dc:	3301      	adds	r3, #1
 80100de:	3348      	adds	r3, #72	; 0x48
 80100e0:	443b      	add	r3, r7
 80100e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80100e6:	b21b      	sxth	r3, r3
 80100e8:	4313      	orrs	r3, r2
 80100ea:	b21a      	sxth	r2, r3
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80100f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100f4:	3302      	adds	r3, #2
 80100f6:	3348      	adds	r3, #72	; 0x48
 80100f8:	443b      	add	r3, r7
 80100fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80100fe:	021b      	lsls	r3, r3, #8
 8010100:	b219      	sxth	r1, r3
 8010102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010106:	3303      	adds	r3, #3
 8010108:	3348      	adds	r3, #72	; 0x48
 801010a:	443b      	add	r3, r7
 801010c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010110:	b21a      	sxth	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3302      	adds	r3, #2
 8010116:	430a      	orrs	r2, r1
 8010118:	b212      	sxth	r2, r2
 801011a:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 801011c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010120:	3304      	adds	r3, #4
 8010122:	3348      	adds	r3, #72	; 0x48
 8010124:	443b      	add	r3, r7
 8010126:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801012a:	021b      	lsls	r3, r3, #8
 801012c:	b219      	sxth	r1, r3
 801012e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010132:	3305      	adds	r3, #5
 8010134:	3348      	adds	r3, #72	; 0x48
 8010136:	443b      	add	r3, r7
 8010138:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801013c:	b21a      	sxth	r2, r3
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	3304      	adds	r3, #4
 8010142:	430a      	orrs	r2, r1
 8010144:	b212      	sxth	r2, r2
 8010146:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8010148:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801014c:	3306      	adds	r3, #6
 801014e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8010152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010158:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801015c:	b21a      	sxth	r2, r3
 801015e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010160:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8010162:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <dmp_read_fifo+0x2d4>)
 8010164:	895b      	ldrh	r3, [r3, #10]
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d007      	beq.n	801017e <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 801016e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010172:	f107 0220 	add.w	r2, r7, #32
 8010176:	4413      	add	r3, r2
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fe5b 	bl	800fe34 <decode_gesture>

    get_ms(timestamp);
 801017e:	6838      	ldr	r0, [r7, #0]
 8010180:	f000 f9a1 	bl	80104c6 <f4_get_tick_ms_cnt>
    return 0;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3748      	adds	r7, #72	; 0x48
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	200012cc 	.word	0x200012cc

08010194 <w_mpu_init>:
 * @brief  MPU_Read_Device_Addr()  		初始化mpu6050.
 * @note   														初始化mpu6050
 * @retval HAL status									mpu_ok/mpu_err
 */
mpu_state_t w_mpu_init(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
	static uint8_t device_id = 0x00u;

	//MPU原始数据清零
	for (int i = 0; i < sizeof(mpu_raw_msg); i++)
 801019a:	2300      	movs	r3, #0
 801019c:	607b      	str	r3, [r7, #4]
 801019e:	e007      	b.n	80101b0 <w_mpu_init+0x1c>
		((uint8_t*) &mpu_raw_msg)[i] = 0;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4a30      	ldr	r2, [pc, #192]	; (8010264 <w_mpu_init+0xd0>)
 80101a4:	4413      	add	r3, r2
 80101a6:	2200      	movs	r2, #0
 80101a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(mpu_raw_msg); i++)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	3301      	adds	r3, #1
 80101ae:	607b      	str	r3, [r7, #4]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b0f      	cmp	r3, #15
 80101b4:	d9f4      	bls.n	80101a0 <w_mpu_init+0xc>

	//这里可以不用初始配置gpio端口, CUBEMX生成开头会有初始化I2C的gpio端口
//	MPU_I2C_GPIO_INIT;

	//检查ID
	device_id = w_mpu_read_device_address();
 80101b6:	f000 f861 	bl	801027c <w_mpu_read_device_address>
 80101ba:	4603      	mov	r3, r0
 80101bc:	461a      	mov	r2, r3
 80101be:	4b2a      	ldr	r3, [pc, #168]	; (8010268 <w_mpu_init+0xd4>)
 80101c0:	701a      	strb	r2, [r3, #0]
	printf("device_id:    0x%x\r\n", device_id);
 80101c2:	4b29      	ldr	r3, [pc, #164]	; (8010268 <w_mpu_init+0xd4>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	4928      	ldr	r1, [pc, #160]	; (801026c <w_mpu_init+0xd8>)
 80101ca:	4829      	ldr	r0, [pc, #164]	; (8010270 <w_mpu_init+0xdc>)
 80101cc:	f004 fcb8 	bl	8014b40 <siprintf>
 80101d0:	4827      	ldr	r0, [pc, #156]	; (8010270 <w_mpu_init+0xdc>)
 80101d2:	f003 fd4d 	bl	8013c70 <printf_Base>
	printf("设备ID:       0x%x\r\n", device_id);
 80101d6:	4b24      	ldr	r3, [pc, #144]	; (8010268 <w_mpu_init+0xd4>)
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	461a      	mov	r2, r3
 80101dc:	4925      	ldr	r1, [pc, #148]	; (8010274 <w_mpu_init+0xe0>)
 80101de:	4824      	ldr	r0, [pc, #144]	; (8010270 <w_mpu_init+0xdc>)
 80101e0:	f004 fcae 	bl	8014b40 <siprintf>
 80101e4:	4822      	ldr	r0, [pc, #136]	; (8010270 <w_mpu_init+0xdc>)
 80101e6:	f003 fd43 	bl	8013c70 <printf_Base>
	printf("\r\n");
 80101ea:	4923      	ldr	r1, [pc, #140]	; (8010278 <w_mpu_init+0xe4>)
 80101ec:	4820      	ldr	r0, [pc, #128]	; (8010270 <w_mpu_init+0xdc>)
 80101ee:	f004 fca7 	bl	8014b40 <siprintf>
 80101f2:	481f      	ldr	r0, [pc, #124]	; (8010270 <w_mpu_init+0xdc>)
 80101f4:	f003 fd3c 	bl	8013c70 <printf_Base>
	if (device_id == mpu_id_err)
 80101f8:	4b1b      	ldr	r3, [pc, #108]	; (8010268 <w_mpu_init+0xd4>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d101      	bne.n	8010204 <w_mpu_init+0x70>
		return mpu_id_err;				//ID错误
 8010200:	2303      	movs	r3, #3
 8010202:	e02b      	b.n	801025c <w_mpu_init+0xc8>

	/* 注意：MPU6000 & MPU6050设备在'上电时'会进入'睡眠模式' */
	/* 注意：MPU6000 & MPU6050设备在'上电时'会进入'睡眠模式' */
	/* 注意：MPU6000 & MPU6050设备在'上电时'会进入'睡眠模式' */
	//复位MPU6050,	0x08
	w_mpu_write_byte(_MPU_PWR_MGMT_1, mpu_pwr_mgmt_1_reset);
 8010204:	2180      	movs	r1, #128	; 0x80
 8010206:	206b      	movs	r0, #107	; 0x6b
 8010208:	f000 f8e6 	bl	80103d8 <w_mpu_write_byte>
	HAL_Delay(50);
 801020c:	2032      	movs	r0, #50	; 0x32
 801020e:	f7f2 ffe7 	bl	80031e0 <HAL_Delay>

	//唤醒MPU6050,	0x00
	w_mpu_write_byte(_MPU_PWR_MGMT_1, mpu_pwr_mgmt_1_rouse);
 8010212:	2100      	movs	r1, #0
 8010214:	206b      	movs	r0, #107	; 0x6b
 8010216:	f000 f8df 	bl	80103d8 <w_mpu_write_byte>
//	HAL_Delay(50);

	//陀螺量程范围，±2000dps.		0x03
	w_mpu_set_gyro_fsr(mpu_gyro_fsr_2000s);
 801021a:	2003      	movs	r0, #3
 801021c:	f000 f8b0 	bl	8010380 <w_mpu_set_gyro_fsr>

	//加速度计程范围，±8g.			0x00
	w_mpu_set_acce_fsr(mpu_acce_fsr_2g);
 8010220:	2000      	movs	r0, #0
 8010222:	f000 f8c3 	bl	80103ac <w_mpu_set_acce_fsr>

	//配置采样频率分频寄存器, 1k/4, 取样率为25Hz。
	w_mpu_set_sample_rate(0x07);
 8010226:	2007      	movs	r0, #7
 8010228:	f000 f880 	bl	801032c <w_mpu_set_sample_rate>

	//配置低通滤波，截止频率100Hz左右。
	w_mpu_set_dlpf(2);
 801022c:	2002      	movs	r0, #2
 801022e:	f000 f892 	bl	8010356 <w_mpu_set_dlpf>

	//中断信号为高电平, 直到有读取操作才消失, 直通辅助I2C。
	w_mpu_write_byte(_MPU_INT_BP_CFG_REG, 0x80);
 8010232:	2180      	movs	r1, #128	; 0x80
 8010234:	2037      	movs	r0, #55	; 0x37
 8010236:	f000 f8cf 	bl	80103d8 <w_mpu_write_byte>

	//使能 "数据就绪" 中断 (Data Ready interrupt) ,所有的传感器寄存器写操作完成时都会产生
	w_mpu_write_byte(_MPU_INT_ENABLE_REG, 0x00);
 801023a:	2100      	movs	r1, #0
 801023c:	2038      	movs	r0, #56	; 0x38
 801023e:	f000 f8cb 	bl	80103d8 <w_mpu_write_byte>

	//不使用辅助I2C.
	w_mpu_write_byte(_MPU_USER_CTRL, 0x00);
 8010242:	2100      	movs	r1, #0
 8010244:	206a      	movs	r0, #106	; 0x6a
 8010246:	f000 f8c7 	bl	80103d8 <w_mpu_write_byte>

	//设备的系统时钟 与 X轴陀螺仪参考.
	w_mpu_write_byte(_MPU_PWR_MGMT_1, mpu_pwr_mgmt_1_clksel_x);
 801024a:	2101      	movs	r1, #1
 801024c:	206b      	movs	r0, #107	; 0x6b
 801024e:	f000 f8c3 	bl	80103d8 <w_mpu_write_byte>

	//加速度与陀螺仪都工作
	w_mpu_write_byte(_MPU_PWR_MGMT_2, 0x00);
 8010252:	2100      	movs	r1, #0
 8010254:	206c      	movs	r0, #108	; 0x6c
 8010256:	f000 f8bf 	bl	80103d8 <w_mpu_write_byte>

	return mpu_ok;
 801025a:	2300      	movs	r3, #0

}
 801025c:	4618      	mov	r0, r3
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	200012dc 	.word	0x200012dc
 8010268:	200012f8 	.word	0x200012f8
 801026c:	08019408 	.word	0x08019408
 8010270:	20001308 	.word	0x20001308
 8010274:	08019420 	.word	0x08019420
 8010278:	08019438 	.word	0x08019438

0801027c <w_mpu_read_device_address>:
 * @brief  MPU_Read_Device_Addr()  		读取MPU的设备ID.
 * @note   														读取MPU的设备ID
 * @retval HAL status									id/mpu_err
 */
uint8_t w_mpu_read_device_address(void)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0
	static uint8_t id = 0x00u;			//存放读取到的数据（设备ID）

	//0x75
	id = w_mpu_read_byte(_MPU_DEVICE_ID);
 8010280:	2075      	movs	r0, #117	; 0x75
 8010282:	f000 f8cf 	bl	8010424 <w_mpu_read_byte>
 8010286:	4603      	mov	r3, r0
 8010288:	461a      	mov	r2, r3
 801028a:	4b06      	ldr	r3, [pc, #24]	; (80102a4 <w_mpu_read_device_address+0x28>)
 801028c:	701a      	strb	r2, [r3, #0]
	if (id == mpu_err)
 801028e:	4b05      	ldr	r3, [pc, #20]	; (80102a4 <w_mpu_read_device_address+0x28>)
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d101      	bne.n	801029a <w_mpu_read_device_address+0x1e>
	{
//		printf("mpu6050_device_id:  0x%x\r\n(ID_ERROR)", id);
		return mpu_id_err;		//设备id错误
 8010296:	2303      	movs	r3, #3
 8010298:	e001      	b.n	801029e <w_mpu_read_device_address+0x22>
	}
	return id;							//返回设备ID
 801029a:	4b02      	ldr	r3, [pc, #8]	; (80102a4 <w_mpu_read_device_address+0x28>)
 801029c:	781b      	ldrb	r3, [r3, #0]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	200012f9 	.word	0x200012f9

080102a8 <w_mpu_read_temperature>:
 * @brief  w_mpu_read_raw_temperature()  		读取MPU温度.
 * @param  *mpu_raw_msg_buff       Note
 * @retval HAL status							mpu_ok/mpu_err
 */
float w_mpu_read_temperature(void)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
	static uint8_t msg_temp[2];					//缓冲区
	static short mpu_temperature_biff;	//温度缓冲区

	//读取内置温度传感器数据
	if (w_mpu_read_byte_len(_MPU_TEMP_OUT_H_REG, msg_temp, sizeof(msg_temp)) == mpu_err)
 80102ac:	2202      	movs	r2, #2
 80102ae:	491c      	ldr	r1, [pc, #112]	; (8010320 <w_mpu_read_temperature+0x78>)
 80102b0:	2041      	movs	r0, #65	; 0x41
 80102b2:	f000 f8d9 	bl	8010468 <w_mpu_read_byte_len>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d102      	bne.n	80102c2 <w_mpu_read_temperature+0x1a>
		return mpu_err;
 80102bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80102c0:	e025      	b.n	801030e <w_mpu_read_temperature+0x66>

	mpu_temperature_biff = ((uint16_t) msg_temp[0] << 8) | msg_temp[1];		//MPU温度值
 80102c2:	4b17      	ldr	r3, [pc, #92]	; (8010320 <w_mpu_read_temperature+0x78>)
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	021b      	lsls	r3, r3, #8
 80102c8:	b21a      	sxth	r2, r3
 80102ca:	4b15      	ldr	r3, [pc, #84]	; (8010320 <w_mpu_read_temperature+0x78>)
 80102cc:	785b      	ldrb	r3, [r3, #1]
 80102ce:	b21b      	sxth	r3, r3
 80102d0:	4313      	orrs	r3, r2
 80102d2:	b21a      	sxth	r2, r3
 80102d4:	4b13      	ldr	r3, [pc, #76]	; (8010324 <w_mpu_read_temperature+0x7c>)
 80102d6:	801a      	strh	r2, [r3, #0]

	return (36.53f + ((double) mpu_temperature_biff) / 340.0f);	//计算后的真实温度值
 80102d8:	4b12      	ldr	r3, [pc, #72]	; (8010324 <w_mpu_read_temperature+0x7c>)
 80102da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f0 f920 	bl	8000524 <__aeabi_i2d>
 80102e4:	f04f 0200 	mov.w	r2, #0
 80102e8:	4b0f      	ldr	r3, [pc, #60]	; (8010328 <w_mpu_read_temperature+0x80>)
 80102ea:	f7f0 faaf 	bl	800084c <__aeabi_ddiv>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	4610      	mov	r0, r2
 80102f4:	4619      	mov	r1, r3
 80102f6:	a308      	add	r3, pc, #32	; (adr r3, 8010318 <w_mpu_read_temperature+0x70>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	f7ef ffc6 	bl	800028c <__adddf3>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	4610      	mov	r0, r2
 8010306:	4619      	mov	r1, r3
 8010308:	f7f0 fc6e 	bl	8000be8 <__aeabi_d2f>
 801030c:	4603      	mov	r3, r0

}
 801030e:	ee07 3a90 	vmov	s15, r3
 8010312:	eeb0 0a67 	vmov.f32	s0, s15
 8010316:	bd80      	pop	{r7, pc}
 8010318:	00000000 	.word	0x00000000
 801031c:	404243d7 	.word	0x404243d7
 8010320:	200012fc 	.word	0x200012fc
 8010324:	200012fe 	.word	0x200012fe
 8010328:	40754000 	.word	0x40754000

0801032c <w_mpu_set_sample_rate>:
 * @brief  mpu_set_sample_rate()  					配置采样频率分频寄存器.
 * @retval HAL status							mpu_ok/mpu_err
 */
//设置MPU6050的采样率
mpu_state_t w_mpu_set_sample_rate(uint16_t rate)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	4603      	mov	r3, r0
 8010334:	80fb      	strh	r3, [r7, #6]
	// 0x19, 设置数字低通滤波器
	if (w_mpu_write_byte(_MPU_SAMPLE_RATE_DIVIDER_REG, rate) == mpu_ok)
 8010336:	88fb      	ldrh	r3, [r7, #6]
 8010338:	b2db      	uxtb	r3, r3
 801033a:	4619      	mov	r1, r3
 801033c:	2019      	movs	r0, #25
 801033e:	f000 f84b 	bl	80103d8 <w_mpu_write_byte>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d101      	bne.n	801034c <w_mpu_set_sample_rate+0x20>
		return mpu_ok;					//配置成功
 8010348:	2300      	movs	r3, #0
 801034a:	e000      	b.n	801034e <w_mpu_set_sample_rate+0x22>
	else
		return mpu_err;					//配置失败
 801034c:	2301      	movs	r3, #1

}
 801034e:	4618      	mov	r0, r3
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <w_mpu_set_dlpf>:
 * @brief  mpu_set_dlpf()  					配置数字低通滤波器.
 * @retval HAL status							mpu_ok/mpu_err
 */

mpu_state_t w_mpu_set_dlpf(uint16_t dlpf)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b082      	sub	sp, #8
 801035a:	af00      	add	r7, sp, #0
 801035c:	4603      	mov	r3, r0
 801035e:	80fb      	strh	r3, [r7, #6]
	// 0x1A,  截止频率100Hz左右。
	if (w_mpu_write_byte(_MPU_CONFIG_REG, dlpf) == mpu_ok)
 8010360:	88fb      	ldrh	r3, [r7, #6]
 8010362:	b2db      	uxtb	r3, r3
 8010364:	4619      	mov	r1, r3
 8010366:	201a      	movs	r0, #26
 8010368:	f000 f836 	bl	80103d8 <w_mpu_write_byte>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d101      	bne.n	8010376 <w_mpu_set_dlpf+0x20>
		return mpu_ok;					//配置成功
 8010372:	2300      	movs	r3, #0
 8010374:	e000      	b.n	8010378 <w_mpu_set_dlpf+0x22>
	else
		return mpu_err;					//配置失败
 8010376:	2301      	movs	r3, #1

}
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <w_mpu_set_gyro_fsr>:
 * @brief  w_mpu_set_gyro_fsr()  		配置陀螺仪满量程范围.
 * @param  fsr       							配置量程范围在mpu_fsr_e中
 * @retval HAL status							mpu_ok/mpu_err
 */
mpu_state_t w_mpu_set_gyro_fsr(mpu_fsr_t gyro_fsr)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	4603      	mov	r3, r0
 8010388:	71fb      	strb	r3, [r7, #7]
	//0x1B
	if (w_mpu_write_byte(_MPU_GYRO_CONFIG_REG, gyro_fsr << 3) == mpu_ok)
 801038a:	79fb      	ldrb	r3, [r7, #7]
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	b2db      	uxtb	r3, r3
 8010390:	4619      	mov	r1, r3
 8010392:	201b      	movs	r0, #27
 8010394:	f000 f820 	bl	80103d8 <w_mpu_write_byte>
 8010398:	4603      	mov	r3, r0
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <w_mpu_set_gyro_fsr+0x22>
		return mpu_ok;					//配置成功
 801039e:	2300      	movs	r3, #0
 80103a0:	e000      	b.n	80103a4 <w_mpu_set_gyro_fsr+0x24>
	else
		return mpu_err;					//配置失败
 80103a2:	2301      	movs	r3, #1

}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <w_mpu_set_acce_fsr>:
 * @brief  mpu_read_raw_data()  		配置加速度计满量程范围.
 * @param  fsr       							配置量程范围在mpu_fsr_e中
 * @retval HAL status							mpu_ok/mpu_err
 */
mpu_state_t w_mpu_set_acce_fsr(mpu_fsr_t acce_fsr)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	71fb      	strb	r3, [r7, #7]
	//0x1C
	if (w_mpu_write_byte(_MPU_ACCE_CONFIG_REG, acce_fsr << 3) == mpu_ok)
 80103b6:	79fb      	ldrb	r3, [r7, #7]
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	4619      	mov	r1, r3
 80103be:	201c      	movs	r0, #28
 80103c0:	f000 f80a 	bl	80103d8 <w_mpu_write_byte>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d101      	bne.n	80103ce <w_mpu_set_acce_fsr+0x22>
		return mpu_ok;					//配置成功
 80103ca:	2300      	movs	r3, #0
 80103cc:	e000      	b.n	80103d0 <w_mpu_set_acce_fsr+0x24>
	else
		return mpu_err;					//配置失败
 80103ce:	2301      	movs	r3, #1

}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <w_mpu_write_byte>:
 * @param  w_data    						需要写入的数据.
 * @note   											传入需要写的寄存器地址, 后面是往这个寄存器写入的一个字节的数据.
 * @retval HAL status						mpu_ok/hal_error
 */
mpu_state_t w_mpu_write_byte(uint8_t reg_addr, uint8_t w_data)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b088      	sub	sp, #32
 80103dc:	af04      	add	r7, sp, #16
 80103de:	4603      	mov	r3, r0
 80103e0:	460a      	mov	r2, r1
 80103e2:	71fb      	strb	r3, [r7, #7]
 80103e4:	4613      	mov	r3, r2
 80103e6:	71bb      	strb	r3, [r7, #6]
	uint8_t w_data_byte = w_data;			//放入要写入的数据
 80103e8:	79bb      	ldrb	r3, [r7, #6]
 80103ea:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(&MPU_I2C_HANDLE, _MPU_WRITE, reg_addr, I2C_MEMADD_SIZE_8BIT, &w_data_byte, 1, 0xfff) == HAL_OK)
 80103ec:	79fb      	ldrb	r3, [r7, #7]
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80103f4:	9302      	str	r3, [sp, #8]
 80103f6:	2301      	movs	r3, #1
 80103f8:	9301      	str	r3, [sp, #4]
 80103fa:	f107 030f 	add.w	r3, r7, #15
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	2301      	movs	r3, #1
 8010402:	21d0      	movs	r1, #208	; 0xd0
 8010404:	4806      	ldr	r0, [pc, #24]	; (8010420 <w_mpu_write_byte+0x48>)
 8010406:	f7f4 fb25 	bl	8004a54 <HAL_I2C_Mem_Write>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d101      	bne.n	8010414 <w_mpu_write_byte+0x3c>
		return mpu_ok;					//写入成功
 8010410:	2300      	movs	r3, #0
 8010412:	e000      	b.n	8010416 <w_mpu_write_byte+0x3e>
	else
		return mpu_err;					//写入失败
 8010414:	2301      	movs	r3, #1

}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	20000468 	.word	0x20000468

08010424 <w_mpu_read_byte>:
 * @param  reg_addr       				读取的寄存器地址.
 * @note   											传入需要读取的寄存器地址
 * @retval HAL status						r_data_byte/mpu_busy
 */
uint8_t w_mpu_read_byte(uint8_t reg_addr)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b086      	sub	sp, #24
 8010428:	af04      	add	r7, sp, #16
 801042a:	4603      	mov	r3, r0
 801042c:	71fb      	strb	r3, [r7, #7]
	static uint8_t r_data_byte = 0x00u;	//存放读取一个Byte的数据
	if (HAL_I2C_Mem_Read(&MPU_I2C_HANDLE, _MPU_READ, reg_addr, I2C_MEMADD_SIZE_8BIT, &r_data_byte, 1, 0xfff) == HAL_OK)
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	b29a      	uxth	r2, r3
 8010432:	f640 73ff 	movw	r3, #4095	; 0xfff
 8010436:	9302      	str	r3, [sp, #8]
 8010438:	2301      	movs	r3, #1
 801043a:	9301      	str	r3, [sp, #4]
 801043c:	4b08      	ldr	r3, [pc, #32]	; (8010460 <w_mpu_read_byte+0x3c>)
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	2301      	movs	r3, #1
 8010442:	21d1      	movs	r1, #209	; 0xd1
 8010444:	4807      	ldr	r0, [pc, #28]	; (8010464 <w_mpu_read_byte+0x40>)
 8010446:	f7f4 fbff 	bl	8004c48 <HAL_I2C_Mem_Read>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d102      	bne.n	8010456 <w_mpu_read_byte+0x32>
//	HAL_Delay(50);
		return r_data_byte;			//返回读取的数据
 8010450:	4b03      	ldr	r3, [pc, #12]	; (8010460 <w_mpu_read_byte+0x3c>)
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	e000      	b.n	8010458 <w_mpu_read_byte+0x34>
	else
////		return mpu_busy;				//iic忙碌（0x02/0x2）
		return mpu_err;
 8010456:	2301      	movs	r3, #1

}
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	20001300 	.word	0x20001300
 8010464:	20000468 	.word	0x20000468

08010468 <w_mpu_read_byte_len>:
 * @param  len    								数据缓冲区的长度.
 * @note   											传入需要读取的寄存器地址, 后面是读取到的数据放入这个数组buff中, 确定这组数据的长度
 * @retval HAL status						mpu_ok/hal_error
 */
mpu_state_t w_mpu_read_byte_len(uint8_t reg_addr, uint8_t *r_data_buf, uint8_t len)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af04      	add	r7, sp, #16
 801046e:	4603      	mov	r3, r0
 8010470:	6039      	str	r1, [r7, #0]
 8010472:	71fb      	strb	r3, [r7, #7]
 8010474:	4613      	mov	r3, r2
 8010476:	71bb      	strb	r3, [r7, #6]

	if (HAL_I2C_Mem_Read(&MPU_I2C_HANDLE, _MPU_READ, reg_addr, I2C_MEMADD_SIZE_8BIT, r_data_buf, len, 0xfff) == HAL_OK)
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	b29a      	uxth	r2, r3
 801047c:	79bb      	ldrb	r3, [r7, #6]
 801047e:	b29b      	uxth	r3, r3
 8010480:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010484:	9102      	str	r1, [sp, #8]
 8010486:	9301      	str	r3, [sp, #4]
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	2301      	movs	r3, #1
 801048e:	21d1      	movs	r1, #209	; 0xd1
 8010490:	4806      	ldr	r0, [pc, #24]	; (80104ac <w_mpu_read_byte_len+0x44>)
 8010492:	f7f4 fbd9 	bl	8004c48 <HAL_I2C_Mem_Read>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d101      	bne.n	80104a0 <w_mpu_read_byte_len+0x38>
//		HAL_Delay(50);
		return mpu_ok;					//读取完成
 801049c:	2300      	movs	r3, #0
 801049e:	e000      	b.n	80104a2 <w_mpu_read_byte_len+0x3a>
	else
//		return mpu_busy;				//iic忙碌
		return mpu_err;
 80104a0:	2301      	movs	r3, #1

}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	20000468 	.word	0x20000468

080104b0 <my_hal_delay>:
//#define		HW_S_HW_MPU_ADDR			_MPU_READ
/**
 * @brief  my_hal_delay()  			ms级别延时, 为DMP库delay_ms
 */
void my_hal_delay(unsigned long ms)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7f2 fe91 	bl	80031e0 <HAL_Delay>
}
 80104be:	bf00      	nop
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <f4_get_tick_ms_cnt>:

/**
 * @brief  get_tick_ms_cnt()  			ms级别时间戳, 为DMP库get_ms
 */
void f4_get_tick_ms_cnt(unsigned long *cnt)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b082      	sub	sp, #8
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
	*cnt = HAL_GetTick();
 80104ce:	f7f2 fe7b 	bl	80031c8 <HAL_GetTick>
 80104d2:	4602      	mov	r2, r0
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	601a      	str	r2, [r3, #0]
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <dmp_i2c_write>:

/**
 * @brief  dmp_i2c_write()  			IIC连续写, 为DMP库i2c的写
 */
uint8_t dmp_i2c_write(unsigned char slave_addr, unsigned char reg_addr, unsigned char len, unsigned char *w_data)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af04      	add	r7, sp, #16
 80104e6:	603b      	str	r3, [r7, #0]
 80104e8:	4603      	mov	r3, r0
 80104ea:	71fb      	strb	r3, [r7, #7]
 80104ec:	460b      	mov	r3, r1
 80104ee:	71bb      	strb	r3, [r7, #6]
 80104f0:	4613      	mov	r3, r2
 80104f2:	717b      	strb	r3, [r7, #5]
	//超时时间看实际更改, 问题不大
	return HAL_I2C_Mem_Write(&MPU_I2C_HANDLE, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, w_data, len, 500);
 80104f4:	79fb      	ldrb	r3, [r7, #7]
 80104f6:	b299      	uxth	r1, r3
 80104f8:	79bb      	ldrb	r3, [r7, #6]
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	797b      	ldrb	r3, [r7, #5]
 80104fe:	b29b      	uxth	r3, r3
 8010500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010504:	9002      	str	r0, [sp, #8]
 8010506:	9301      	str	r3, [sp, #4]
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	2301      	movs	r3, #1
 801050e:	4804      	ldr	r0, [pc, #16]	; (8010520 <dmp_i2c_write+0x40>)
 8010510:	f7f4 faa0 	bl	8004a54 <HAL_I2C_Mem_Write>
 8010514:	4603      	mov	r3, r0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	20000468 	.word	0x20000468

08010524 <dmp_i2c_read>:

/**
 * @brief  dmp_i2c_write()  			IIC连续读, 为DMP库i2c的读
 */
uint8_t dmp_i2c_read(unsigned char slave_addr, unsigned char reg_addr, unsigned char len, unsigned char *r_data)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af04      	add	r7, sp, #16
 801052a:	603b      	str	r3, [r7, #0]
 801052c:	4603      	mov	r3, r0
 801052e:	71fb      	strb	r3, [r7, #7]
 8010530:	460b      	mov	r3, r1
 8010532:	71bb      	strb	r3, [r7, #6]
 8010534:	4613      	mov	r3, r2
 8010536:	717b      	strb	r3, [r7, #5]
	//超时时间看实际更改, 问题不大
	return HAL_I2C_Mem_Read(&MPU_I2C_HANDLE, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, r_data, len, 1000);
 8010538:	79fb      	ldrb	r3, [r7, #7]
 801053a:	b299      	uxth	r1, r3
 801053c:	79bb      	ldrb	r3, [r7, #6]
 801053e:	b29a      	uxth	r2, r3
 8010540:	797b      	ldrb	r3, [r7, #5]
 8010542:	b29b      	uxth	r3, r3
 8010544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010548:	9002      	str	r0, [sp, #8]
 801054a:	9301      	str	r3, [sp, #4]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	9300      	str	r3, [sp, #0]
 8010550:	2301      	movs	r3, #1
 8010552:	4804      	ldr	r0, [pc, #16]	; (8010564 <dmp_i2c_read+0x40>)
 8010554:	f7f4 fb78 	bl	8004c48 <HAL_I2C_Mem_Read>
 8010558:	4603      	mov	r3, r0
}
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	20000468 	.word	0x20000468

08010568 <inv_row_2_scale>:
//陀螺仪方向设置, 绝对位置
static signed char gyro_orientation[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };

//方向转换
static unsigned short inv_row_2_scale(const signed char *row)
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f993 3000 	ldrsb.w	r3, [r3]
 8010576:	2b00      	cmp	r3, #0
 8010578:	dd02      	ble.n	8010580 <inv_row_2_scale+0x18>
		b = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	81fb      	strh	r3, [r7, #14]
 801057e:	e02d      	b.n	80105dc <inv_row_2_scale+0x74>
	else if (row[0] < 0)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f993 3000 	ldrsb.w	r3, [r3]
 8010586:	2b00      	cmp	r3, #0
 8010588:	da02      	bge.n	8010590 <inv_row_2_scale+0x28>
		b = 4;
 801058a:	2304      	movs	r3, #4
 801058c:	81fb      	strh	r3, [r7, #14]
 801058e:	e025      	b.n	80105dc <inv_row_2_scale+0x74>
	else if (row[1] > 0)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3301      	adds	r3, #1
 8010594:	f993 3000 	ldrsb.w	r3, [r3]
 8010598:	2b00      	cmp	r3, #0
 801059a:	dd02      	ble.n	80105a2 <inv_row_2_scale+0x3a>
		b = 1;
 801059c:	2301      	movs	r3, #1
 801059e:	81fb      	strh	r3, [r7, #14]
 80105a0:	e01c      	b.n	80105dc <inv_row_2_scale+0x74>
	else if (row[1] < 0)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3301      	adds	r3, #1
 80105a6:	f993 3000 	ldrsb.w	r3, [r3]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	da02      	bge.n	80105b4 <inv_row_2_scale+0x4c>
		b = 5;
 80105ae:	2305      	movs	r3, #5
 80105b0:	81fb      	strh	r3, [r7, #14]
 80105b2:	e013      	b.n	80105dc <inv_row_2_scale+0x74>
	else if (row[2] > 0)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	3302      	adds	r3, #2
 80105b8:	f993 3000 	ldrsb.w	r3, [r3]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	dd02      	ble.n	80105c6 <inv_row_2_scale+0x5e>
		b = 2;
 80105c0:	2302      	movs	r3, #2
 80105c2:	81fb      	strh	r3, [r7, #14]
 80105c4:	e00a      	b.n	80105dc <inv_row_2_scale+0x74>
	else if (row[2] < 0)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3302      	adds	r3, #2
 80105ca:	f993 3000 	ldrsb.w	r3, [r3]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da02      	bge.n	80105d8 <inv_row_2_scale+0x70>
		b = 6;
 80105d2:	2306      	movs	r3, #6
 80105d4:	81fb      	strh	r3, [r7, #14]
 80105d6:	e001      	b.n	80105dc <inv_row_2_scale+0x74>
	else
		b = 7;      // error
 80105d8:	2307      	movs	r3, #7
 80105da:	81fb      	strh	r3, [r7, #14]
	return b;
 80105dc:	89fb      	ldrh	r3, [r7, #14]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3714      	adds	r7, #20
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr

080105ea <inv_orientation_matrix_to_scalar>:

//陀螺仪方向控制
static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b084      	sub	sp, #16
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
	 {1, 0, 0,
	 0, 1, 0,
	 0, 0, 1};

	 */
	scalar = inv_row_2_scale(mtx);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7ff ffb8 	bl	8010568 <inv_row_2_scale>
 80105f8:	4603      	mov	r3, r0
 80105fa:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 3) << 3;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	3303      	adds	r3, #3
 8010600:	4618      	mov	r0, r3
 8010602:	f7ff ffb1 	bl	8010568 <inv_row_2_scale>
 8010606:	4603      	mov	r3, r0
 8010608:	00db      	lsls	r3, r3, #3
 801060a:	b21a      	sxth	r2, r3
 801060c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010610:	4313      	orrs	r3, r2
 8010612:	b21b      	sxth	r3, r3
 8010614:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 6) << 6;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	3306      	adds	r3, #6
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff ffa4 	bl	8010568 <inv_row_2_scale>
 8010620:	4603      	mov	r3, r0
 8010622:	019b      	lsls	r3, r3, #6
 8010624:	b21a      	sxth	r2, r3
 8010626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801062a:	4313      	orrs	r3, r2
 801062c:	b21b      	sxth	r3, r3
 801062e:	81fb      	strh	r3, [r7, #14]

	return scalar;
 8010630:	89fb      	ldrh	r3, [r7, #14]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
	...

0801063c <run_self_test>:

//MPU6050传感器自测
static void run_self_test(void)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08a      	sub	sp, #40	; 0x28
 8010640:	af00      	add	r7, sp, #0
	int result;
	long gyro[3], accel[3];

	result = mpu_run_self_test(gyro, accel);
 8010642:	f107 020c 	add.w	r2, r7, #12
 8010646:	f107 0318 	add.w	r3, r7, #24
 801064a:	4611      	mov	r1, r2
 801064c:	4618      	mov	r0, r3
 801064e:	f7fe fa6f 	bl	800eb30 <mpu_run_self_test>
 8010652:	6278      	str	r0, [r7, #36]	; 0x24
	if (result == 0x03)
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	2b03      	cmp	r3, #3
 8010658:	d152      	bne.n	8010700 <run_self_test+0xc4>
		/* Test passed. We can trust the gyro data here, so let's push it down
		 * to the DMP.
		 */
		float sens;
		unsigned short accel_sens;
		mpu_get_gyro_sens(&sens);
 801065a:	f107 0308 	add.w	r3, r7, #8
 801065e:	4618      	mov	r0, r3
 8010660:	f7fd fa38 	bl	800dad4 <mpu_get_gyro_sens>
		gyro[0] = (long) (gyro[0] * sens);
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	ee07 3a90 	vmov	s15, r3
 801066a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801066e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801067a:	ee17 3a90 	vmov	r3, s15
 801067e:	61bb      	str	r3, [r7, #24]
		gyro[1] = (long) (gyro[1] * sens);
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	ee07 3a90 	vmov	s15, r3
 8010686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801068a:	edd7 7a02 	vldr	s15, [r7, #8]
 801068e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010696:	ee17 3a90 	vmov	r3, s15
 801069a:	61fb      	str	r3, [r7, #28]
		gyro[2] = (long) (gyro[2] * sens);
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	ee07 3a90 	vmov	s15, r3
 80106a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80106a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80106aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106b2:	ee17 3a90 	vmov	r3, s15
 80106b6:	623b      	str	r3, [r7, #32]
		dmp_set_gyro_bias(gyro);
 80106b8:	f107 0318 	add.w	r3, r7, #24
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fe fd7d 	bl	800f1bc <dmp_set_gyro_bias>
		mpu_get_accel_sens(&accel_sens);
 80106c2:	1dbb      	adds	r3, r7, #6
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fd fa3d 	bl	800db44 <mpu_get_accel_sens>
		accel[0] *= accel_sens;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	88fa      	ldrh	r2, [r7, #6]
 80106ce:	fb02 f303 	mul.w	r3, r2, r3
 80106d2:	60fb      	str	r3, [r7, #12]
		accel[1] *= accel_sens;
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	88fa      	ldrh	r2, [r7, #6]
 80106d8:	fb02 f303 	mul.w	r3, r2, r3
 80106dc:	613b      	str	r3, [r7, #16]
		accel[2] *= accel_sens;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	88fa      	ldrh	r2, [r7, #6]
 80106e2:	fb02 f303 	mul.w	r3, r2, r3
 80106e6:	617b      	str	r3, [r7, #20]
		dmp_set_accel_bias(accel);
 80106e8:	f107 030c 	add.w	r3, r7, #12
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fe fe6f 	bl	800f3d0 <dmp_set_accel_bias>
		printf("自测完成 ......\r\n");
 80106f2:	4905      	ldr	r1, [pc, #20]	; (8010708 <run_self_test+0xcc>)
 80106f4:	4805      	ldr	r0, [pc, #20]	; (801070c <run_self_test+0xd0>)
 80106f6:	f004 fa23 	bl	8014b40 <siprintf>
 80106fa:	4804      	ldr	r0, [pc, #16]	; (801070c <run_self_test+0xd0>)
 80106fc:	f003 fab8 	bl	8013c70 <printf_Base>
	}
}
 8010700:	bf00      	nop
 8010702:	3728      	adds	r7, #40	; 0x28
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	0801943c 	.word	0x0801943c
 801070c:	20001308 	.word	0x20001308

08010710 <dmp_init>:

//DMP初始化
void dmp_init(void)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
	uint8_t temp[1] = { 0 };
 8010716:	2300      	movs	r3, #0
 8010718:	713b      	strb	r3, [r7, #4]
	dmp_i2c_read(HW_S_HW_MPU_ADDR, _MPU_DEVICE_ID, I2C_MEMADD_SIZE_8BIT, temp);
 801071a:	1d3b      	adds	r3, r7, #4
 801071c:	2201      	movs	r2, #1
 801071e:	2175      	movs	r1, #117	; 0x75
 8010720:	20d1      	movs	r0, #209	; 0xd1
 8010722:	f7ff feff 	bl	8010524 <dmp_i2c_read>
	//	 temp[0] = w_mpu_read_device_address();
	printf("mpu设置传感器完成 ......\r\n");
 8010726:	494a      	ldr	r1, [pc, #296]	; (8010850 <dmp_init+0x140>)
 8010728:	484a      	ldr	r0, [pc, #296]	; (8010854 <dmp_init+0x144>)
 801072a:	f004 fa09 	bl	8014b40 <siprintf>
 801072e:	4849      	ldr	r0, [pc, #292]	; (8010854 <dmp_init+0x144>)
 8010730:	f003 fa9e 	bl	8013c70 <printf_Base>
	printf("设备ID:       0x%x\r\n", temp[0]);
 8010734:	793b      	ldrb	r3, [r7, #4]
 8010736:	461a      	mov	r2, r3
 8010738:	4947      	ldr	r1, [pc, #284]	; (8010858 <dmp_init+0x148>)
 801073a:	4846      	ldr	r0, [pc, #280]	; (8010854 <dmp_init+0x144>)
 801073c:	f004 fa00 	bl	8014b40 <siprintf>
 8010740:	4844      	ldr	r0, [pc, #272]	; (8010854 <dmp_init+0x144>)
 8010742:	f003 fa95 	bl	8013c70 <printf_Base>
	printf("\r\n");
 8010746:	4945      	ldr	r1, [pc, #276]	; (801085c <dmp_init+0x14c>)
 8010748:	4842      	ldr	r0, [pc, #264]	; (8010854 <dmp_init+0x144>)
 801074a:	f004 f9f9 	bl	8014b40 <siprintf>
 801074e:	4841      	ldr	r0, [pc, #260]	; (8010854 <dmp_init+0x144>)
 8010750:	f003 fa8e 	bl	8013c70 <printf_Base>

	//检查ID, 不对系统复位
//	if (temp[0] != 0x68)
//		NVIC_SystemReset();

	if (!mpu_init())
 8010754:	f7fc fcf4 	bl	800d140 <mpu_init>
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d174      	bne.n	8010848 <dmp_init+0x138>
	{
		//重启内部寄存器到默认,
		if (!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 801075e:	2078      	movs	r0, #120	; 0x78
 8010760:	f7fd fa92 	bl	800dc88 <mpu_set_sensors>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d106      	bne.n	8010778 <dmp_init+0x68>
			printf("mpu设置传感器完成 ......\r\n");
 801076a:	4939      	ldr	r1, [pc, #228]	; (8010850 <dmp_init+0x140>)
 801076c:	4839      	ldr	r0, [pc, #228]	; (8010854 <dmp_init+0x144>)
 801076e:	f004 f9e7 	bl	8014b40 <siprintf>
 8010772:	4838      	ldr	r0, [pc, #224]	; (8010854 <dmp_init+0x144>)
 8010774:	f003 fa7c 	bl	8013c70 <printf_Base>

		//配置FIFO
		if (!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8010778:	2078      	movs	r0, #120	; 0x78
 801077a:	f7fd fa33 	bl	800dbe4 <mpu_configure_fifo>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d106      	bne.n	8010792 <dmp_init+0x82>
			printf("mpu配置FIFO完成 ......\r\n");
 8010784:	4936      	ldr	r1, [pc, #216]	; (8010860 <dmp_init+0x150>)
 8010786:	4833      	ldr	r0, [pc, #204]	; (8010854 <dmp_init+0x144>)
 8010788:	f004 f9da 	bl	8014b40 <siprintf>
 801078c:	4831      	ldr	r0, [pc, #196]	; (8010854 <dmp_init+0x144>)
 801078e:	f003 fa6f 	bl	8013c70 <printf_Base>

		//配置采样频率分频寄存器
		if (!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 8010792:	2064      	movs	r0, #100	; 0x64
 8010794:	f7fd f938 	bl	800da08 <mpu_set_sample_rate>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d106      	bne.n	80107ac <dmp_init+0x9c>
			printf("mpu设定的采样率完成 ......\r\n");
 801079e:	4931      	ldr	r1, [pc, #196]	; (8010864 <dmp_init+0x154>)
 80107a0:	482c      	ldr	r0, [pc, #176]	; (8010854 <dmp_init+0x144>)
 80107a2:	f004 f9cd 	bl	8014b40 <siprintf>
 80107a6:	482b      	ldr	r0, [pc, #172]	; (8010854 <dmp_init+0x144>)
 80107a8:	f003 fa62 	bl	8013c70 <printf_Base>

		//DMP加载动作驱动程序固件完成
		if (!dmp_load_motion_driver_firmware())
 80107ac:	f7fe fc0a 	bl	800efc4 <dmp_load_motion_driver_firmware>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d106      	bne.n	80107c4 <dmp_init+0xb4>
			printf("DMP加载动作驱动程序固件完成 ......\r\n");
 80107b6:	492c      	ldr	r1, [pc, #176]	; (8010868 <dmp_init+0x158>)
 80107b8:	4826      	ldr	r0, [pc, #152]	; (8010854 <dmp_init+0x144>)
 80107ba:	f004 f9c1 	bl	8014b40 <siprintf>
 80107be:	4825      	ldr	r0, [pc, #148]	; (8010854 <dmp_init+0x144>)
 80107c0:	f003 fa56 	bl	8013c70 <printf_Base>

		//DMP设置陀螺仪方向完成
		if (!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 80107c4:	4829      	ldr	r0, [pc, #164]	; (801086c <dmp_init+0x15c>)
 80107c6:	f7ff ff10 	bl	80105ea <inv_orientation_matrix_to_scalar>
 80107ca:	4603      	mov	r3, r0
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fe fc09 	bl	800efe4 <dmp_set_orientation>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d106      	bne.n	80107e6 <dmp_init+0xd6>
			printf("DMP设置陀螺仪方向完成 ......\r\n");
 80107d8:	4925      	ldr	r1, [pc, #148]	; (8010870 <dmp_init+0x160>)
 80107da:	481e      	ldr	r0, [pc, #120]	; (8010854 <dmp_init+0x144>)
 80107dc:	f004 f9b0 	bl	8014b40 <siprintf>
 80107e0:	481c      	ldr	r0, [pc, #112]	; (8010854 <dmp_init+0x144>)
 80107e2:	f003 fa45 	bl	8013c70 <printf_Base>

		//DMP使功能完整
		if (!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 80107e6:	f240 1073 	movw	r0, #371	; 0x173
 80107ea:	f7ff f97d 	bl	800fae8 <dmp_enable_feature>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d106      	bne.n	8010802 <dmp_init+0xf2>
		DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
		DMP_FEATURE_GYRO_CAL))
			printf("DMP使功能完整 ......\r\n");
 80107f4:	491f      	ldr	r1, [pc, #124]	; (8010874 <dmp_init+0x164>)
 80107f6:	4817      	ldr	r0, [pc, #92]	; (8010854 <dmp_init+0x144>)
 80107f8:	f004 f9a2 	bl	8014b40 <siprintf>
 80107fc:	4815      	ldr	r0, [pc, #84]	; (8010854 <dmp_init+0x144>)
 80107fe:	f003 fa37 	bl	8013c70 <printf_Base>

		//DMP设定FIFO速率完成
		if (!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 8010802:	2064      	movs	r0, #100	; 0x64
 8010804:	f7fe fee6 	bl	800f5d4 <dmp_set_fifo_rate>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <dmp_init+0x10c>
			printf("DMP设定FIFO速率完成 ......\r\n");
 801080e:	491a      	ldr	r1, [pc, #104]	; (8010878 <dmp_init+0x168>)
 8010810:	4810      	ldr	r0, [pc, #64]	; (8010854 <dmp_init+0x144>)
 8010812:	f004 f995 	bl	8014b40 <siprintf>
 8010816:	480f      	ldr	r0, [pc, #60]	; (8010854 <dmp_init+0x144>)
 8010818:	f003 fa2a 	bl	8013c70 <printf_Base>

		//自测自身数据,测试通过. 我们可以相信陀螺仪的数据，把它放下来到DMP
		run_self_test();
 801081c:	f7ff ff0e 	bl	801063c <run_self_test>

		//mpu设置DMP状态完成
		if (!mpu_set_dmp_state(1))
 8010820:	2001      	movs	r0, #1
 8010822:	f7fe fb7b 	bl	800ef1c <mpu_set_dmp_state>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d106      	bne.n	801083a <dmp_init+0x12a>
			printf("mpu设置DMP状态完成 ......\r\n");
 801082c:	4913      	ldr	r1, [pc, #76]	; (801087c <dmp_init+0x16c>)
 801082e:	4809      	ldr	r0, [pc, #36]	; (8010854 <dmp_init+0x144>)
 8010830:	f004 f986 	bl	8014b40 <siprintf>
 8010834:	4807      	ldr	r0, [pc, #28]	; (8010854 <dmp_init+0x144>)
 8010836:	f003 fa1b 	bl	8013c70 <printf_Base>

		printf("\r\n");
 801083a:	4908      	ldr	r1, [pc, #32]	; (801085c <dmp_init+0x14c>)
 801083c:	4805      	ldr	r0, [pc, #20]	; (8010854 <dmp_init+0x144>)
 801083e:	f004 f97f 	bl	8014b40 <siprintf>
 8010842:	4804      	ldr	r0, [pc, #16]	; (8010854 <dmp_init+0x144>)
 8010844:	f003 fa14 	bl	8013c70 <printf_Base>
//		my_hal_delay(200);
//		printf(" ################### ...... MPU配置完成, DMP功能完成 ...... ################### \r\n");
//		my_hal_delay(200);
//		printf("\r\n\r\n\r\n");
	}
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	08019454 	.word	0x08019454
 8010854:	20001308 	.word	0x20001308
 8010858:	08019420 	.word	0x08019420
 801085c:	08019438 	.word	0x08019438
 8010860:	08019478 	.word	0x08019478
 8010864:	08019498 	.word	0x08019498
 8010868:	080194c0 	.word	0x080194c0
 801086c:	20000054 	.word	0x20000054
 8010870:	080194f4 	.word	0x080194f4
 8010874:	0801951c 	.word	0x0801951c
 8010878:	08019538 	.word	0x08019538
 801087c:	0801955c 	.word	0x0801955c

08010880 <read_dmp>:
 * @param  *pose_msg       	传入姿态的地址
 * @note   									参考野火、原子、平衡之家等开源资料
 * @retval HAL status				0/1/2
 */
uint8_t read_dmp(pose_msg_t *pose_msg)
{
 8010880:	b5b0      	push	{r4, r5, r7, lr}
 8010882:	b094      	sub	sp, #80	; 0x50
 8010884:	af02      	add	r7, sp, #8
 8010886:	6078      	str	r0, [r7, #4]
	uint8_t more;
	long quat[4];				//四元数
	int16_t gyro[3], accel[3], sensors;
	unsigned long sensor_timestamp;				//传感器时间戳

	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 8010888:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801088c:	647b      	str	r3, [r7, #68]	; 0x44
 801088e:	f04f 0300 	mov.w	r3, #0
 8010892:	643b      	str	r3, [r7, #64]	; 0x40
 8010894:	f04f 0300 	mov.w	r3, #0
 8010898:	63fb      	str	r3, [r7, #60]	; 0x3c
 801089a:	f04f 0300 	mov.w	r3, #0
 801089e:	63bb      	str	r3, [r7, #56]	; 0x38

	//读取FIFO中的数据
	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 80108a0:	f107 040c 	add.w	r4, r7, #12
 80108a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80108a8:	f107 0114 	add.w	r1, r7, #20
 80108ac:	f107 001c 	add.w	r0, r7, #28
 80108b0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	f107 0312 	add.w	r3, r7, #18
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	4623      	mov	r3, r4
 80108be:	f7ff fafd 	bl	800febc <dmp_read_fifo>
//		return 1;

	if (sensors & INV_WXYZ_QUAT)
 80108c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 80f0 	beq.w	8010ab2 <read_dmp+0x232>
	{
		q0 = quat[0] / q30;
 80108d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d4:	ee07 3a90 	vmov	s15, r3
 80108d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80108dc:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8010ac8 <read_dmp+0x248>
 80108e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80108e4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q1 = quat[1] / q30;
 80108e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ea:	ee07 3a90 	vmov	s15, r3
 80108ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80108f2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8010ac8 <read_dmp+0x248>
 80108f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80108fa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q2 = quat[2] / q30;
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	ee07 3a90 	vmov	s15, r3
 8010904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010908:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010ac8 <read_dmp+0x248>
 801090c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010910:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q3 = quat[3] / q30;
 8010914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010916:	ee07 3a90 	vmov	s15, r3
 801091a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801091e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8010ac8 <read_dmp+0x248>
 8010922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010926:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		pose_msg->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3f;																	//四元数解算, 俯仰角(Pitch)-->绕着X轴旋转
 801092a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801092e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8010932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010936:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801093a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801093e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010942:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010946:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801094a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801094e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010952:	ee17 0a90 	vmov	r0, s15
 8010956:	f7ef fdf7 	bl	8000548 <__aeabi_f2d>
 801095a:	4602      	mov	r2, r0
 801095c:	460b      	mov	r3, r1
 801095e:	ec43 2b10 	vmov	d0, r2, r3
 8010962:	f007 fedb 	bl	801871c <asin>
 8010966:	ec51 0b10 	vmov	r0, r1, d0
 801096a:	a355      	add	r3, pc, #340	; (adr r3, 8010ac0 <read_dmp+0x240>)
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	f7ef fe42 	bl	80005f8 <__aeabi_dmul>
 8010974:	4602      	mov	r2, r0
 8010976:	460b      	mov	r3, r1
 8010978:	4610      	mov	r0, r2
 801097a:	4619      	mov	r1, r3
 801097c:	f7f0 f934 	bl	8000be8 <__aeabi_d2f>
 8010980:	4602      	mov	r2, r0
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	601a      	str	r2, [r3, #0]
		pose_msg->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3f;	//四元数解算, 翻滚角(Roll)-->绕着Y轴旋转
 8010986:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801098a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801098e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010996:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801099a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801099e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80109a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80109a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109aa:	ee17 0a90 	vmov	r0, s15
 80109ae:	f7ef fdcb 	bl	8000548 <__aeabi_f2d>
 80109b2:	4604      	mov	r4, r0
 80109b4:	460d      	mov	r5, r1
 80109b6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80109ba:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80109be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80109c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80109c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80109ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80109d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80109d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80109da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109e6:	ee17 0a90 	vmov	r0, s15
 80109ea:	f7ef fdad 	bl	8000548 <__aeabi_f2d>
 80109ee:	4602      	mov	r2, r0
 80109f0:	460b      	mov	r3, r1
 80109f2:	ec43 2b11 	vmov	d1, r2, r3
 80109f6:	ec45 4b10 	vmov	d0, r4, r5
 80109fa:	f007 fec3 	bl	8018784 <atan2>
 80109fe:	ec51 0b10 	vmov	r0, r1, d0
 8010a02:	a32f      	add	r3, pc, #188	; (adr r3, 8010ac0 <read_dmp+0x240>)
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	f7ef fdf6 	bl	80005f8 <__aeabi_dmul>
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	460b      	mov	r3, r1
 8010a10:	4610      	mov	r0, r2
 8010a12:	4619      	mov	r1, r3
 8010a14:	f7f0 f8e8 	bl	8000be8 <__aeabi_d2f>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	605a      	str	r2, [r3, #4]
		pose_msg->yaw = atan2(2 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3f;								//四元数解算, 偏航角(Yaw)-->绕着Z轴旋转
 8010a1e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010a22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a2a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8010a2e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010a3e:	ee17 0a90 	vmov	r0, s15
 8010a42:	f7ef fd81 	bl	8000548 <__aeabi_f2d>
 8010a46:	4604      	mov	r4, r0
 8010a48:	460d      	mov	r5, r1
 8010a4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010a4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010a52:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010a56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a5e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010a6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a76:	ee17 0a90 	vmov	r0, s15
 8010a7a:	f7ef fd65 	bl	8000548 <__aeabi_f2d>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	460b      	mov	r3, r1
 8010a82:	ec43 2b11 	vmov	d1, r2, r3
 8010a86:	ec45 4b10 	vmov	d0, r4, r5
 8010a8a:	f007 fe7b 	bl	8018784 <atan2>
 8010a8e:	ec51 0b10 	vmov	r0, r1, d0
 8010a92:	a30b      	add	r3, pc, #44	; (adr r3, 8010ac0 <read_dmp+0x240>)
 8010a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a98:	f7ef fdae 	bl	80005f8 <__aeabi_dmul>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	f7f0 f8a0 	bl	8000be8 <__aeabi_d2f>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	609a      	str	r2, [r3, #8]

		return 0;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	e000      	b.n	8010ab4 <read_dmp+0x234>
	}
	else
		return 2;
 8010ab2:	2302      	movs	r3, #2

}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3748      	adds	r7, #72	; 0x48
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bdb0      	pop	{r4, r5, r7, pc}
 8010abc:	f3af 8000 	nop.w
 8010ac0:	60000000 	.word	0x60000000
 8010ac4:	404ca666 	.word	0x404ca666
 8010ac8:	4e800000 	.word	0x4e800000

08010acc <UpdateYawAngle>:
#include "BasicInfor/debug.h"

float YawAngle;

void UpdateYawAngle()
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
	read_dmp(&mpu_pose_msg);
 8010ad0:	4804      	ldr	r0, [pc, #16]	; (8010ae4 <UpdateYawAngle+0x18>)
 8010ad2:	f7ff fed5 	bl	8010880 <read_dmp>
	YawAngle = mpu_pose_msg.yaw;
 8010ad6:	4b03      	ldr	r3, [pc, #12]	; (8010ae4 <UpdateYawAngle+0x18>)
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	4a03      	ldr	r2, [pc, #12]	; (8010ae8 <UpdateYawAngle+0x1c>)
 8010adc:	6013      	str	r3, [r2, #0]
}
 8010ade:	bf00      	nop
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	200012ec 	.word	0x200012ec
 8010ae8:	20001304 	.word	0x20001304

08010aec <InitMPU>:

void InitMPU()
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	af00      	add	r7, sp, #0
	if (w_mpu_init() != mpu_ok)
 8010af0:	f7ff fb50 	bl	8010194 <w_mpu_init>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d012      	beq.n	8010b20 <InitMPU+0x34>
	{
		printfX("初始化 MPU6050 失败\n");
 8010afa:	4912      	ldr	r1, [pc, #72]	; (8010b44 <InitMPU+0x58>)
 8010afc:	4812      	ldr	r0, [pc, #72]	; (8010b48 <InitMPU+0x5c>)
 8010afe:	f004 f81f 	bl	8014b40 <siprintf>
 8010b02:	4811      	ldr	r0, [pc, #68]	; (8010b48 <InitMPU+0x5c>)
 8010b04:	f003 f8b4 	bl	8013c70 <printf_Base>
		printfX("0x%x (ID_ERROR)\r\n", w_mpu_init());
 8010b08:	f7ff fb44 	bl	8010194 <w_mpu_init>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	461a      	mov	r2, r3
 8010b10:	490e      	ldr	r1, [pc, #56]	; (8010b4c <InitMPU+0x60>)
 8010b12:	480d      	ldr	r0, [pc, #52]	; (8010b48 <InitMPU+0x5c>)
 8010b14:	f004 f814 	bl	8014b40 <siprintf>
 8010b18:	480b      	ldr	r0, [pc, #44]	; (8010b48 <InitMPU+0x5c>)
 8010b1a:	f003 f8a9 	bl	8013c70 <printf_Base>
		dmp_init();

		printfX("初始化 DSP 成功\n");
	}

}
 8010b1e:	e00f      	b.n	8010b40 <InitMPU+0x54>
		printfX("开始初始化 DSP\n");
 8010b20:	490b      	ldr	r1, [pc, #44]	; (8010b50 <InitMPU+0x64>)
 8010b22:	4809      	ldr	r0, [pc, #36]	; (8010b48 <InitMPU+0x5c>)
 8010b24:	f004 f80c 	bl	8014b40 <siprintf>
 8010b28:	4807      	ldr	r0, [pc, #28]	; (8010b48 <InitMPU+0x5c>)
 8010b2a:	f003 f8a1 	bl	8013c70 <printf_Base>
		dmp_init();
 8010b2e:	f7ff fdef 	bl	8010710 <dmp_init>
		printfX("初始化 DSP 成功\n");
 8010b32:	4908      	ldr	r1, [pc, #32]	; (8010b54 <InitMPU+0x68>)
 8010b34:	4804      	ldr	r0, [pc, #16]	; (8010b48 <InitMPU+0x5c>)
 8010b36:	f004 f803 	bl	8014b40 <siprintf>
 8010b3a:	4803      	ldr	r0, [pc, #12]	; (8010b48 <InitMPU+0x5c>)
 8010b3c:	f003 f898 	bl	8013c70 <printf_Base>
}
 8010b40:	bf00      	nop
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	08019580 	.word	0x08019580
 8010b48:	20001308 	.word	0x20001308
 8010b4c:	0801959c 	.word	0x0801959c
 8010b50:	080195b0 	.word	0x080195b0
 8010b54:	080195c8 	.word	0x080195c8

08010b58 <Get_MPU_Temperature>:

float Get_MPU_Temperature()
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
	return w_mpu_read_temperature();
 8010b5c:	f7ff fba4 	bl	80102a8 <w_mpu_read_temperature>
 8010b60:	eef0 7a40 	vmov.f32	s15, s0
}
 8010b64:	eeb0 0a67 	vmov.f32	s0, s15
 8010b68:	bd80      	pop	{r7, pc}
	...

08010b6c <delay_us>:
 */

#include "delay.h"

void delay_us(uint32_t us)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 1000000 * us);
 8010b74:	f7f5 fa66 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	4a0a      	ldr	r2, [pc, #40]	; (8010ba4 <delay_us+0x38>)
 8010b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b80:	0c9a      	lsrs	r2, r3, #18
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	fb02 f303 	mul.w	r3, r2, r3
 8010b88:	60fb      	str	r3, [r7, #12]
	while (delay--)
 8010b8a:	e000      	b.n	8010b8e <delay_us+0x22>
		__NOP();
 8010b8c:	bf00      	nop
	while (delay--)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	1e5a      	subs	r2, r3, #1
 8010b92:	60fa      	str	r2, [r7, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1f9      	bne.n	8010b8c <delay_us+0x20>
}
 8010b98:	bf00      	nop
 8010b9a:	bf00      	nop
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	431bde83 	.word	0x431bde83

08010ba8 <Clean_Dormancy_Count>:

//休眠计数 -1 进入预休眠模式
int16_t Dormancy_Count = -1;

void Clean_Dormancy_Count()
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	af00      	add	r7, sp, #0
	if (Dormancy_Count == -1)
 8010bac:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <Clean_Dormancy_Count+0x20>)
 8010bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb6:	d102      	bne.n	8010bbe <Clean_Dormancy_Count+0x16>
	{
		//已经进入预休眠状态 重新启动定时器
		HAL_TIM_Base_Start_IT(&htim7);
 8010bb8:	4804      	ldr	r0, [pc, #16]	; (8010bcc <Clean_Dormancy_Count+0x24>)
 8010bba:	f7f7 f9df 	bl	8007f7c <HAL_TIM_Base_Start_IT>
	}
	Dormancy_Count = 0;
 8010bbe:	4b02      	ldr	r3, [pc, #8]	; (8010bc8 <Clean_Dormancy_Count+0x20>)
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	801a      	strh	r2, [r3, #0]
}
 8010bc4:	bf00      	nop
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	2000005e 	.word	0x2000005e
 8010bcc:	200010a4 	.word	0x200010a4

08010bd0 <PreHibernate>:

void PreHibernate()
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
	Screen_Clear();
 8010bd6:	f002 fe51 	bl	801387c <Screen_Clear>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 8010bda:	2301      	movs	r3, #1
 8010bdc:	607b      	str	r3, [r7, #4]
 8010bde:	e021      	b.n	8010c24 <PreHibernate+0x54>
	{
		Screen_ShowPicture_Num(1, (var % 70) + 1);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a14      	ldr	r2, [pc, #80]	; (8010c34 <PreHibernate+0x64>)
 8010be4:	fb82 1203 	smull	r1, r2, r2, r3
 8010be8:	441a      	add	r2, r3
 8010bea:	1191      	asrs	r1, r2, #6
 8010bec:	17da      	asrs	r2, r3, #31
 8010bee:	1a8a      	subs	r2, r1, r2
 8010bf0:	2146      	movs	r1, #70	; 0x46
 8010bf2:	fb01 f202 	mul.w	r2, r1, r2
 8010bf6:	1a9a      	subs	r2, r3, r2
 8010bf8:	b2d3      	uxtb	r3, r2
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	4619      	mov	r1, r3
 8010c00:	2001      	movs	r0, #1
 8010c02:	f002 fe43 	bl	801388c <Screen_ShowPicture_Num>
		HAL_Delay(40);
 8010c06:	2028      	movs	r0, #40	; 0x28
 8010c08:	f7f2 faea 	bl	80031e0 <HAL_Delay>
		//HAL_Delay(1000);
		//判断是否中途退出预休眠模式
		if (Dormancy_Count != -1)
 8010c0c:	4b0a      	ldr	r3, [pc, #40]	; (8010c38 <PreHibernate+0x68>)
 8010c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c16:	d002      	beq.n	8010c1e <PreHibernate+0x4e>
		{
			Screen_Clear();
 8010c18:	f002 fe30 	bl	801387c <Screen_Clear>
			return;
 8010c1c:	e006      	b.n	8010c2c <PreHibernate+0x5c>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	3301      	adds	r3, #1
 8010c22:	607b      	str	r3, [r7, #4]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f5b3 7f0e 	cmp.w	r3, #568	; 0x238
 8010c2a:	dbd9      	blt.n	8010be0 <PreHibernate+0x10>
		}

	}
	//Screen_Clear();
}
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	ea0ea0eb 	.word	0xea0ea0eb
 8010c38:	2000005e 	.word	0x2000005e

08010c3c <Hibernate>:

void Hibernate()
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	af00      	add	r7, sp, #0
	Screen_Close();
 8010c40:	f002 fe4a 	bl	80138d8 <Screen_Close>
	HAL_PWR_EnterSTANDBYMode();
 8010c44:	f7f4 fd82 	bl	800574c <HAL_PWR_EnterSTANDBYMode>
}
 8010c48:	bf00      	nop
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <Periodic_Dormancy_Counter>:

void Periodic_Dormancy_Counter()
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	af00      	add	r7, sp, #0
	Dormancy_Count++;
 8010c50:	4b10      	ldr	r3, [pc, #64]	; (8010c94 <Periodic_Dormancy_Counter+0x48>)
 8010c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	3301      	adds	r3, #1
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	b21a      	sxth	r2, r3
 8010c5e:	4b0d      	ldr	r3, [pc, #52]	; (8010c94 <Periodic_Dormancy_Counter+0x48>)
 8010c60:	801a      	strh	r2, [r3, #0]

	if (Dormancy_Count > Dormancy_Count_Max)
 8010c62:	4b0c      	ldr	r3, [pc, #48]	; (8010c94 <Periodic_Dormancy_Counter+0x48>)
 8010c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c68:	2b3c      	cmp	r3, #60	; 0x3c
 8010c6a:	dd12      	ble.n	8010c92 <Periodic_Dormancy_Counter+0x46>
	{
		//停止定时器
		HAL_TIM_Base_Stop_IT(&htim7);
 8010c6c:	480a      	ldr	r0, [pc, #40]	; (8010c98 <Periodic_Dormancy_Counter+0x4c>)
 8010c6e:	f7f7 f9f5 	bl	800805c <HAL_TIM_Base_Stop_IT>
		Dormancy_Count = -1;
 8010c72:	4b08      	ldr	r3, [pc, #32]	; (8010c94 <Periodic_Dormancy_Counter+0x48>)
 8010c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c78:	801a      	strh	r2, [r3, #0]
		//进入预休眠模式
		PreHibernate();
 8010c7a:	f7ff ffa9 	bl	8010bd0 <PreHibernate>
		if (Dormancy_Count != -1)
 8010c7e:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <Periodic_Dormancy_Counter+0x48>)
 8010c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c88:	d102      	bne.n	8010c90 <Periodic_Dormancy_Counter+0x44>
		{
			return;
		}
		//执行完成任务 进入休眠模式
		Hibernate();
 8010c8a:	f7ff ffd7 	bl	8010c3c <Hibernate>
 8010c8e:	e000      	b.n	8010c92 <Periodic_Dormancy_Counter+0x46>
			return;
 8010c90:	bf00      	nop
	}
}
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	2000005e 	.word	0x2000005e
 8010c98:	200010a4 	.word	0x200010a4

08010c9c <CalculateDistance>:
//起点
uint8_t StartPoint = 1;

//计算两坐标距离
uint16_t CalculateDistance(MapNodePosition *A, MapNodePosition *B)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
	uint16_t x = abs(A->X - B->X);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	881b      	ldrh	r3, [r3, #0]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	bfb8      	it	lt
 8010cb6:	425b      	neglt	r3, r3
 8010cb8:	81fb      	strh	r3, [r7, #14]
	uint16_t y = abs(A->X - B->X);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	bfb8      	it	lt
 8010cca:	425b      	neglt	r3, r3
 8010ccc:	81bb      	strh	r3, [r7, #12]

	return sqrt(x * x + y * y);
 8010cce:	89fb      	ldrh	r3, [r7, #14]
 8010cd0:	89fa      	ldrh	r2, [r7, #14]
 8010cd2:	fb03 f202 	mul.w	r2, r3, r2
 8010cd6:	89bb      	ldrh	r3, [r7, #12]
 8010cd8:	89b9      	ldrh	r1, [r7, #12]
 8010cda:	fb01 f303 	mul.w	r3, r1, r3
 8010cde:	4413      	add	r3, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ef fc1f 	bl	8000524 <__aeabi_i2d>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	460b      	mov	r3, r1
 8010cea:	ec43 2b10 	vmov	d0, r2, r3
 8010cee:	f007 fd4b 	bl	8018788 <sqrt>
 8010cf2:	ec53 2b10 	vmov	r2, r3, d0
 8010cf6:	4610      	mov	r0, r2
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	f7ef ff55 	bl	8000ba8 <__aeabi_d2uiz>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	b29b      	uxth	r3, r3
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <CalculateFGH>:

//计算 F G H
void CalculateFGH(MapNode *node, Direction direction, MapNode *EndPoint)
{
 8010d0c:	b590      	push	{r4, r7, lr}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	460b      	mov	r3, r1
 8010d16:	607a      	str	r2, [r7, #4]
 8010d18:	72fb      	strb	r3, [r7, #11]

	if (node->ParentNode == 0)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	7c9b      	ldrb	r3, [r3, #18]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d111      	bne.n	8010d46 <CalculateFGH+0x3a>
	{
		node->H = CalculateDistance(&node->Position, &EndPoint->Position);
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f103 020e 	add.w	r2, r3, #14
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	330e      	adds	r3, #14
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	4610      	mov	r0, r2
 8010d30:	f7ff ffb4 	bl	8010c9c <CalculateDistance>
 8010d34:	4603      	mov	r3, r0
 8010d36:	461a      	mov	r2, r3
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	831a      	strh	r2, [r3, #24]
		node->F = node->H;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	8b1a      	ldrh	r2, [r3, #24]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	829a      	strh	r2, [r3, #20]
		return;
 8010d44:	e030      	b.n	8010da8 <CalculateFGH+0x9c>
	}

	node->H = CalculateDistance(&node->Position, &EndPoint->Position);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f103 020e 	add.w	r2, r3, #14
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	330e      	adds	r3, #14
 8010d50:	4619      	mov	r1, r3
 8010d52:	4610      	mov	r0, r2
 8010d54:	f7ff ffa2 	bl	8010c9c <CalculateDistance>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	831a      	strh	r2, [r3, #24]
	node->G = MapList[node->ParentNode].G + MapList[node->ParentNode].ChildNodeDistances[direction];
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	7c9b      	ldrb	r3, [r3, #18]
 8010d64:	4619      	mov	r1, r3
 8010d66:	4a12      	ldr	r2, [pc, #72]	; (8010db0 <CalculateFGH+0xa4>)
 8010d68:	231a      	movs	r3, #26
 8010d6a:	fb01 f303 	mul.w	r3, r1, r3
 8010d6e:	4413      	add	r3, r2
 8010d70:	3316      	adds	r3, #22
 8010d72:	8819      	ldrh	r1, [r3, #0]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	7c9b      	ldrb	r3, [r3, #18]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	7af8      	ldrb	r0, [r7, #11]
 8010d7c:	4c0c      	ldr	r4, [pc, #48]	; (8010db0 <CalculateFGH+0xa4>)
 8010d7e:	4613      	mov	r3, r2
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	4413      	add	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	4403      	add	r3, r0
 8010d8a:	005b      	lsls	r3, r3, #1
 8010d8c:	4423      	add	r3, r4
 8010d8e:	88db      	ldrh	r3, [r3, #6]
 8010d90:	440b      	add	r3, r1
 8010d92:	b29a      	uxth	r2, r3
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	82da      	strh	r2, [r3, #22]
	node->F = node->H + node->G;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	8b1a      	ldrh	r2, [r3, #24]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	8adb      	ldrh	r3, [r3, #22]
 8010da0:	4413      	add	r3, r2
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	829a      	strh	r2, [r3, #20]

	//累计父节点距离
}
 8010da8:	3714      	adds	r7, #20
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd90      	pop	{r4, r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20001ad8 	.word	0x20001ad8

08010db4 <ClearCache>:

//清空缓存
void ClearCache()
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NodeNumber; i++)
 8010dba:	2300      	movs	r3, #0
 8010dbc:	607b      	str	r3, [r7, #4]
 8010dbe:	e018      	b.n	8010df2 <ClearCache+0x3e>
	{
		CloseList[i] = OpenList[i] = NULL;
 8010dc0:	4a11      	ldr	r2, [pc, #68]	; (8010e08 <ClearCache+0x54>)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8010dca:	4a0f      	ldr	r2, [pc, #60]	; (8010e08 <ClearCache+0x54>)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010dd2:	490e      	ldr	r1, [pc, #56]	; (8010e0c <ClearCache+0x58>)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		MapList[i].ParentNode = 0;
 8010dda:	4a0d      	ldr	r2, [pc, #52]	; (8010e10 <ClearCache+0x5c>)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	211a      	movs	r1, #26
 8010de0:	fb01 f303 	mul.w	r3, r1, r3
 8010de4:	4413      	add	r3, r2
 8010de6:	3312      	adds	r3, #18
 8010de8:	2200      	movs	r2, #0
 8010dea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NodeNumber; i++)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	3301      	adds	r3, #1
 8010df0:	607b      	str	r3, [r7, #4]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2b09      	cmp	r3, #9
 8010df6:	dde3      	ble.n	8010dc0 <ClearCache+0xc>
	}
}
 8010df8:	bf00      	nop
 8010dfa:	bf00      	nop
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	20001bdc 	.word	0x20001bdc
 8010e0c:	20001c04 	.word	0x20001c04
 8010e10:	20001ad8 	.word	0x20001ad8

08010e14 <WayFinding>:

//查找路径 返回终点
MapNode* WayFinding(uint8_t end)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08e      	sub	sp, #56	; 0x38
 8010e18:	af02      	add	r7, sp, #8
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	71fb      	strb	r3, [r7, #7]

	MapNode *StartingNode = &MapList[StartPoint];
 8010e1e:	4b79      	ldr	r3, [pc, #484]	; (8011004 <WayFinding+0x1f0>)
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	461a      	mov	r2, r3
 8010e24:	231a      	movs	r3, #26
 8010e26:	fb02 f303 	mul.w	r3, r2, r3
 8010e2a:	4a77      	ldr	r2, [pc, #476]	; (8011008 <WayFinding+0x1f4>)
 8010e2c:	4413      	add	r3, r2
 8010e2e:	613b      	str	r3, [r7, #16]
	MapNode *EndNode = &MapList[end];
 8010e30:	79fb      	ldrb	r3, [r7, #7]
 8010e32:	221a      	movs	r2, #26
 8010e34:	fb02 f303 	mul.w	r3, r2, r3
 8010e38:	4a73      	ldr	r2, [pc, #460]	; (8011008 <WayFinding+0x1f4>)
 8010e3a:	4413      	add	r3, r2
 8010e3c:	60fb      	str	r3, [r7, #12]

	printfX("起点：%d\n终点：%d\n初始朝向：%d\n", StartingNode->Index, EndNode->Index, CurrentDirection);
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	461a      	mov	r2, r3
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	4619      	mov	r1, r3
 8010e4a:	4b70      	ldr	r3, [pc, #448]	; (801100c <WayFinding+0x1f8>)
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	460b      	mov	r3, r1
 8010e52:	496f      	ldr	r1, [pc, #444]	; (8011010 <WayFinding+0x1fc>)
 8010e54:	486f      	ldr	r0, [pc, #444]	; (8011014 <WayFinding+0x200>)
 8010e56:	f003 fe73 	bl	8014b40 <siprintf>
 8010e5a:	486e      	ldr	r0, [pc, #440]	; (8011014 <WayFinding+0x200>)
 8010e5c:	f002 ff08 	bl	8013c70 <printf_Base>

	ClearCache();
 8010e60:	f7ff ffa8 	bl	8010db4 <ClearCache>
	// 把起点加入 open list
	OpenList[StartingNode->Index] = StartingNode;
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	4619      	mov	r1, r3
 8010e6a:	4a6b      	ldr	r2, [pc, #428]	; (8011018 <WayFinding+0x204>)
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	CalculateFGH(StartingNode, Direction_None, EndNode);
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	2104      	movs	r1, #4
 8010e76:	6938      	ldr	r0, [r7, #16]
 8010e78:	f7ff ff48 	bl	8010d0c <CalculateFGH>

	for (int k = 1; k < NodeNumber; k++)
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e80:	e0b4      	b.n	8010fec <WayFinding+0x1d8>
	{
		int f_min = 99999;
 8010e82:	4b66      	ldr	r3, [pc, #408]	; (801101c <WayFinding+0x208>)
 8010e84:	62bb      	str	r3, [r7, #40]	; 0x28
		MapNode *currentNode = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	627b      	str	r3, [r7, #36]	; 0x24

		// 遍历 open list ，查找 F 值最小的节点，把它作为当前要处理的节点
		for (int i = 1; i < NodeNumber; i++)
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	623b      	str	r3, [r7, #32]
 8010e8e:	e01e      	b.n	8010ece <WayFinding+0xba>
		{
			if (OpenList[i] == NULL)
 8010e90:	4a61      	ldr	r2, [pc, #388]	; (8011018 <WayFinding+0x204>)
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d014      	beq.n	8010ec6 <WayFinding+0xb2>
			{
				continue;
			}
			if (OpenList[i]->F < f_min)
 8010e9c:	4a5e      	ldr	r2, [pc, #376]	; (8011018 <WayFinding+0x204>)
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ea4:	8a9b      	ldrh	r3, [r3, #20]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	dd0c      	ble.n	8010ec8 <WayFinding+0xb4>
			{
				f_min = OpenList[i]->F;
 8010eae:	4a5a      	ldr	r2, [pc, #360]	; (8011018 <WayFinding+0x204>)
 8010eb0:	6a3b      	ldr	r3, [r7, #32]
 8010eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eb6:	8a9b      	ldrh	r3, [r3, #20]
 8010eb8:	62bb      	str	r3, [r7, #40]	; 0x28
				currentNode = OpenList[i];
 8010eba:	4a57      	ldr	r2, [pc, #348]	; (8011018 <WayFinding+0x204>)
 8010ebc:	6a3b      	ldr	r3, [r7, #32]
 8010ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8010ec4:	e000      	b.n	8010ec8 <WayFinding+0xb4>
				continue;
 8010ec6:	bf00      	nop
		for (int i = 1; i < NodeNumber; i++)
 8010ec8:	6a3b      	ldr	r3, [r7, #32]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	623b      	str	r3, [r7, #32]
 8010ece:	6a3b      	ldr	r3, [r7, #32]
 8010ed0:	2b09      	cmp	r3, #9
 8010ed2:	dddd      	ble.n	8010e90 <WayFinding+0x7c>
			}
		}

		//把这个节点移到 close list 。
		OpenList[currentNode->Index] = NULL;
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4b4f      	ldr	r3, [pc, #316]	; (8011018 <WayFinding+0x204>)
 8010edc:	2200      	movs	r2, #0
 8010ede:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CloseList[currentNode->Index] = currentNode;
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4a4d      	ldr	r2, [pc, #308]	; (8011020 <WayFinding+0x20c>)
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		//对当前方格的 8 个相邻方格的每一个方格？
		for (int i = 0; i < DirectionNumber; i++)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	61fb      	str	r3, [r7, #28]
 8010ef4:	e06c      	b.n	8010fd0 <WayFinding+0x1bc>
		{
			MapNode *childNode = &MapList[currentNode->ChildNodes[i]];
 8010ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	4413      	add	r3, r2
 8010efc:	3301      	adds	r3, #1
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	461a      	mov	r2, r3
 8010f02:	231a      	movs	r3, #26
 8010f04:	fb02 f303 	mul.w	r3, r2, r3
 8010f08:	4a3f      	ldr	r2, [pc, #252]	; (8011008 <WayFinding+0x1f4>)
 8010f0a:	4413      	add	r3, r2
 8010f0c:	60bb      	str	r3, [r7, #8]

			if (childNode == NULL)
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d057      	beq.n	8010fc4 <WayFinding+0x1b0>
			{
				continue;
			}

			//如果它是不可抵达的或者它在 close list 中，忽略它
			if (CloseList[childNode->Index] != NULL)
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	4b41      	ldr	r3, [pc, #260]	; (8011020 <WayFinding+0x20c>)
 8010f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d151      	bne.n	8010fc8 <WayFinding+0x1b4>
			{
				continue;
			}

			if (OpenList[childNode->Index] == NULL)
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	461a      	mov	r2, r3
 8010f2a:	4b3b      	ldr	r3, [pc, #236]	; (8011018 <WayFinding+0x204>)
 8010f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d116      	bne.n	8010f62 <WayFinding+0x14e>
			{
				//如果它不在 open list 中，把它加入 open list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值

				OpenList[childNode->Index] = childNode;
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4a37      	ldr	r2, [pc, #220]	; (8011018 <WayFinding+0x204>)
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				childNode->ParentNode = currentNode->Index;
 8010f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f44:	781a      	ldrb	r2, [r3, #0]
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	749a      	strb	r2, [r3, #18]
				childNode->Direction = (Direction) i;
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	74da      	strb	r2, [r3, #19]
				CalculateFGH(childNode, (Direction) i, EndNode);
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	4619      	mov	r1, r3
 8010f5a:	68b8      	ldr	r0, [r7, #8]
 8010f5c:	f7ff fed6 	bl	8010d0c <CalculateFGH>
 8010f60:	e033      	b.n	8010fca <WayFinding+0x1b6>
			}
			else
			{
				//如果它已经在 open list 中，检查这条路径 ( 即经由当前方格到达它那里 ) 是否更好，用 G 值作参考

				uint8_t flag = 1;
 8010f62:	2301      	movs	r3, #1
 8010f64:	76fb      	strb	r3, [r7, #27]
				for (int m = 1; m < NodeNumber; m++)
 8010f66:	2301      	movs	r3, #1
 8010f68:	617b      	str	r3, [r7, #20]
 8010f6a:	e015      	b.n	8010f98 <WayFinding+0x184>
				{
					if (OpenList[m] == NULL)
 8010f6c:	4a2a      	ldr	r2, [pc, #168]	; (8011018 <WayFinding+0x204>)
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00b      	beq.n	8010f90 <WayFinding+0x17c>
					{
						continue;
					}
					if (OpenList[m]->G < childNode->G)
 8010f78:	4a27      	ldr	r2, [pc, #156]	; (8011018 <WayFinding+0x204>)
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f80:	8ada      	ldrh	r2, [r3, #22]
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	8adb      	ldrh	r3, [r3, #22]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d203      	bcs.n	8010f92 <WayFinding+0x17e>
					{
						flag = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	76fb      	strb	r3, [r7, #27]
						break;
 8010f8e:	e006      	b.n	8010f9e <WayFinding+0x18a>
						continue;
 8010f90:	bf00      	nop
				for (int m = 1; m < NodeNumber; m++)
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	3301      	adds	r3, #1
 8010f96:	617b      	str	r3, [r7, #20]
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	2b09      	cmp	r3, #9
 8010f9c:	dde6      	ble.n	8010f6c <WayFinding+0x158>
					}
				}

				if (flag == 1)
 8010f9e:	7efb      	ldrb	r3, [r7, #27]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d112      	bne.n	8010fca <WayFinding+0x1b6>
				{
					childNode->ParentNode = currentNode->Index;
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa6:	781a      	ldrb	r2, [r3, #0]
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	749a      	strb	r2, [r3, #18]
					childNode->Direction = (Direction) i;
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	74da      	strb	r2, [r3, #19]
					CalculateFGH(childNode, (Direction) i, EndNode);
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	68b8      	ldr	r0, [r7, #8]
 8010fbe:	f7ff fea5 	bl	8010d0c <CalculateFGH>
 8010fc2:	e002      	b.n	8010fca <WayFinding+0x1b6>
				continue;
 8010fc4:	bf00      	nop
 8010fc6:	e000      	b.n	8010fca <WayFinding+0x1b6>
				continue;
 8010fc8:	bf00      	nop
		for (int i = 0; i < DirectionNumber; i++)
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	61fb      	str	r3, [r7, #28]
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	2b03      	cmp	r3, #3
 8010fd4:	dd8f      	ble.n	8010ef6 <WayFinding+0xe2>
				}
			}
		}

		//停止，当你
		if (OpenList[EndNode->Index] != NULL)
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	4b0e      	ldr	r3, [pc, #56]	; (8011018 <WayFinding+0x204>)
 8010fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d107      	bne.n	8010ff6 <WayFinding+0x1e2>
	for (int k = 1; k < NodeNumber; k++)
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	3301      	adds	r3, #1
 8010fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	2b09      	cmp	r3, #9
 8010ff0:	f77f af47 	ble.w	8010e82 <WayFinding+0x6e>
 8010ff4:	e000      	b.n	8010ff8 <WayFinding+0x1e4>
		{
			// 把终点加入到了 open list 中，此时路径已经找到了，或者
			break;
 8010ff6:	bf00      	nop

		//    查找终点失败，并且 open list 是空的，此时没有路径。
		// 前提条件 一定存在路径
	}

	return EndNode;
 8010ff8:	68fb      	ldr	r3, [r7, #12]

}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3730      	adds	r7, #48	; 0x30
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	200000a8 	.word	0x200000a8
 8011008:	20001ad8 	.word	0x20001ad8
 801100c:	20001c2c 	.word	0x20001c2c
 8011010:	080195e0 	.word	0x080195e0
 8011014:	20001308 	.word	0x20001308
 8011018:	20001bdc 	.word	0x20001bdc
 801101c:	0001869f 	.word	0x0001869f
 8011020:	20001c04 	.word	0x20001c04

08011024 <GetDirectionDeviation>:

//获取当前朝向 向何处转弯 才能调整为目标朝向
Direction GetDirectionDeviation(Direction current, Direction object)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	4603      	mov	r3, r0
 801102c:	460a      	mov	r2, r1
 801102e:	71fb      	strb	r3, [r7, #7]
 8011030:	4613      	mov	r3, r2
 8011032:	71bb      	strb	r3, [r7, #6]
	if (current == object)
 8011034:	79fa      	ldrb	r2, [r7, #7]
 8011036:	79bb      	ldrb	r3, [r7, #6]
 8011038:	429a      	cmp	r2, r3
 801103a:	d101      	bne.n	8011040 <GetDirectionDeviation+0x1c>
	{
		return 0;
 801103c:	2300      	movs	r3, #0
 801103e:	e02a      	b.n	8011096 <GetDirectionDeviation+0x72>
	}
	if ((current + 1) % DirectionNumber == object)
 8011040:	79fb      	ldrb	r3, [r7, #7]
 8011042:	3301      	adds	r3, #1
 8011044:	425a      	negs	r2, r3
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	f002 0203 	and.w	r2, r2, #3
 801104e:	bf58      	it	pl
 8011050:	4253      	negpl	r3, r2
 8011052:	79ba      	ldrb	r2, [r7, #6]
 8011054:	4293      	cmp	r3, r2
 8011056:	d101      	bne.n	801105c <GetDirectionDeviation+0x38>
	{
		return 1;
 8011058:	2301      	movs	r3, #1
 801105a:	e01c      	b.n	8011096 <GetDirectionDeviation+0x72>
	}
	if ((current + 2) % DirectionNumber == object)
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	3302      	adds	r3, #2
 8011060:	425a      	negs	r2, r3
 8011062:	f003 0303 	and.w	r3, r3, #3
 8011066:	f002 0203 	and.w	r2, r2, #3
 801106a:	bf58      	it	pl
 801106c:	4253      	negpl	r3, r2
 801106e:	79ba      	ldrb	r2, [r7, #6]
 8011070:	4293      	cmp	r3, r2
 8011072:	d101      	bne.n	8011078 <GetDirectionDeviation+0x54>
	{
		return 2;
 8011074:	2302      	movs	r3, #2
 8011076:	e00e      	b.n	8011096 <GetDirectionDeviation+0x72>
	}

	if ((current + 3) % DirectionNumber == object)
 8011078:	79fb      	ldrb	r3, [r7, #7]
 801107a:	3303      	adds	r3, #3
 801107c:	425a      	negs	r2, r3
 801107e:	f003 0303 	and.w	r3, r3, #3
 8011082:	f002 0203 	and.w	r2, r2, #3
 8011086:	bf58      	it	pl
 8011088:	4253      	negpl	r3, r2
 801108a:	79ba      	ldrb	r2, [r7, #6]
 801108c:	4293      	cmp	r3, r2
 801108e:	d101      	bne.n	8011094 <GetDirectionDeviation+0x70>
	{
		return 3;
 8011090:	2303      	movs	r3, #3
 8011092:	e000      	b.n	8011096 <GetDirectionDeviation+0x72>
	}
	return 4;
 8011094:	2304      	movs	r3, #4

}
 8011096:	4618      	mov	r0, r3
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
	...

080110a4 <RoadToCommand>:

//从路线生成指令
//layer：递归层数 初始值0
//node：终点
uint8_t RoadToCommand(MapNode *node, uint8_t layer)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	70fb      	strb	r3, [r7, #3]
	if (node->ParentNode == 0)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	7c9b      	ldrb	r3, [r3, #18]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d10b      	bne.n	80110d0 <RoadToCommand+0x2c>
	{
		//父节点为空即为起点
		printfX("%d", node->Index);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	461a      	mov	r2, r3
 80110be:	497f      	ldr	r1, [pc, #508]	; (80112bc <RoadToCommand+0x218>)
 80110c0:	487f      	ldr	r0, [pc, #508]	; (80112c0 <RoadToCommand+0x21c>)
 80110c2:	f003 fd3d 	bl	8014b40 <siprintf>
 80110c6:	487e      	ldr	r0, [pc, #504]	; (80112c0 <RoadToCommand+0x21c>)
 80110c8:	f002 fdd2 	bl	8013c70 <printf_Base>
		return 0;
 80110cc:	2300      	movs	r3, #0
 80110ce:	e0f1      	b.n	80112b4 <RoadToCommand+0x210>
	}
	else
	{
		uint8_t reLayer = RoadToCommand(&MapList[node->ParentNode], layer + 1);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	7c9b      	ldrb	r3, [r3, #18]
 80110d4:	461a      	mov	r2, r3
 80110d6:	231a      	movs	r3, #26
 80110d8:	fb02 f303 	mul.w	r3, r2, r3
 80110dc:	4a79      	ldr	r2, [pc, #484]	; (80112c4 <RoadToCommand+0x220>)
 80110de:	441a      	add	r2, r3
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	3301      	adds	r3, #1
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	4619      	mov	r1, r3
 80110e8:	4610      	mov	r0, r2
 80110ea:	f7ff ffdb 	bl	80110a4 <RoadToCommand>
 80110ee:	4603      	mov	r3, r0
 80110f0:	73fb      	strb	r3, [r7, #15]

		//需要考虑上一端点朝向偏差
		Direction dir = GetDirectionDeviation(CurrentDirection, node->Direction);
 80110f2:	4b75      	ldr	r3, [pc, #468]	; (80112c8 <RoadToCommand+0x224>)
 80110f4:	781a      	ldrb	r2, [r3, #0]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	7cdb      	ldrb	r3, [r3, #19]
 80110fa:	4619      	mov	r1, r3
 80110fc:	4610      	mov	r0, r2
 80110fe:	f7ff ff91 	bl	8011024 <GetDirectionDeviation>
 8011102:	4603      	mov	r3, r0
 8011104:	73bb      	strb	r3, [r7, #14]
		CurrentDirection = node->Direction;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	7cda      	ldrb	r2, [r3, #19]
 801110a:	4b6f      	ldr	r3, [pc, #444]	; (80112c8 <RoadToCommand+0x224>)
 801110c:	701a      	strb	r2, [r3, #0]

		printfX(" -- ");
 801110e:	496f      	ldr	r1, [pc, #444]	; (80112cc <RoadToCommand+0x228>)
 8011110:	486b      	ldr	r0, [pc, #428]	; (80112c0 <RoadToCommand+0x21c>)
 8011112:	f003 fd15 	bl	8014b40 <siprintf>
 8011116:	486a      	ldr	r0, [pc, #424]	; (80112c0 <RoadToCommand+0x21c>)
 8011118:	f002 fdaa 	bl	8013c70 <printf_Base>
		switch (dir)
 801111c:	7bbb      	ldrb	r3, [r7, #14]
 801111e:	2b03      	cmp	r3, #3
 8011120:	f200 80a4 	bhi.w	801126c <RoadToCommand+0x1c8>
 8011124:	a201      	add	r2, pc, #4	; (adr r2, 801112c <RoadToCommand+0x88>)
 8011126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801112a:	bf00      	nop
 801112c:	080111d5 	.word	0x080111d5
 8011130:	08011189 	.word	0x08011189
 8011134:	08011221 	.word	0x08011221
 8011138:	0801113d 	.word	0x0801113d
		{
			case Direction_Left:
				printfX("左");
 801113c:	4964      	ldr	r1, [pc, #400]	; (80112d0 <RoadToCommand+0x22c>)
 801113e:	4860      	ldr	r0, [pc, #384]	; (80112c0 <RoadToCommand+0x21c>)
 8011140:	f003 fcfe 	bl	8014b40 <siprintf>
 8011144:	485e      	ldr	r0, [pc, #376]	; (80112c0 <RoadToCommand+0x21c>)
 8011146:	f002 fd93 	bl	8013c70 <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 801114a:	7bfa      	ldrb	r2, [r7, #15]
 801114c:	4961      	ldr	r1, [pc, #388]	; (80112d4 <RoadToCommand+0x230>)
 801114e:	4613      	mov	r3, r2
 8011150:	005b      	lsls	r3, r3, #1
 8011152:	4413      	add	r3, r2
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	440b      	add	r3, r1
 8011158:	3304      	adds	r3, #4
 801115a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801115e:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 8011160:	7bfa      	ldrb	r2, [r7, #15]
 8011162:	495c      	ldr	r1, [pc, #368]	; (80112d4 <RoadToCommand+0x230>)
 8011164:	4613      	mov	r3, r2
 8011166:	005b      	lsls	r3, r3, #1
 8011168:	4413      	add	r3, r2
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	440b      	add	r3, r1
 801116e:	3308      	adds	r3, #8
 8011170:	2200      	movs	r2, #0
 8011172:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Left;
 8011174:	7bfa      	ldrb	r2, [r7, #15]
 8011176:	4957      	ldr	r1, [pc, #348]	; (80112d4 <RoadToCommand+0x230>)
 8011178:	4613      	mov	r3, r2
 801117a:	005b      	lsls	r3, r3, #1
 801117c:	4413      	add	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	440b      	add	r3, r1
 8011182:	2201      	movs	r2, #1
 8011184:	701a      	strb	r2, [r3, #0]
				break;
 8011186:	e072      	b.n	801126e <RoadToCommand+0x1ca>
			case Direction_Right:
				printfX("右");
 8011188:	4953      	ldr	r1, [pc, #332]	; (80112d8 <RoadToCommand+0x234>)
 801118a:	484d      	ldr	r0, [pc, #308]	; (80112c0 <RoadToCommand+0x21c>)
 801118c:	f003 fcd8 	bl	8014b40 <siprintf>
 8011190:	484b      	ldr	r0, [pc, #300]	; (80112c0 <RoadToCommand+0x21c>)
 8011192:	f002 fd6d 	bl	8013c70 <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 8011196:	7bfa      	ldrb	r2, [r7, #15]
 8011198:	494e      	ldr	r1, [pc, #312]	; (80112d4 <RoadToCommand+0x230>)
 801119a:	4613      	mov	r3, r2
 801119c:	005b      	lsls	r3, r3, #1
 801119e:	4413      	add	r3, r2
 80111a0:	009b      	lsls	r3, r3, #2
 80111a2:	440b      	add	r3, r1
 80111a4:	3304      	adds	r3, #4
 80111a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80111aa:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 80111ac:	7bfa      	ldrb	r2, [r7, #15]
 80111ae:	4949      	ldr	r1, [pc, #292]	; (80112d4 <RoadToCommand+0x230>)
 80111b0:	4613      	mov	r3, r2
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	4413      	add	r3, r2
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	440b      	add	r3, r1
 80111ba:	3308      	adds	r3, #8
 80111bc:	2200      	movs	r2, #0
 80111be:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Right;
 80111c0:	7bfa      	ldrb	r2, [r7, #15]
 80111c2:	4944      	ldr	r1, [pc, #272]	; (80112d4 <RoadToCommand+0x230>)
 80111c4:	4613      	mov	r3, r2
 80111c6:	005b      	lsls	r3, r3, #1
 80111c8:	4413      	add	r3, r2
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	440b      	add	r3, r1
 80111ce:	2202      	movs	r2, #2
 80111d0:	701a      	strb	r2, [r3, #0]
				break;
 80111d2:	e04c      	b.n	801126e <RoadToCommand+0x1ca>
			case Direction_Top:
				printfX("上");
 80111d4:	4941      	ldr	r1, [pc, #260]	; (80112dc <RoadToCommand+0x238>)
 80111d6:	483a      	ldr	r0, [pc, #232]	; (80112c0 <RoadToCommand+0x21c>)
 80111d8:	f003 fcb2 	bl	8014b40 <siprintf>
 80111dc:	4838      	ldr	r0, [pc, #224]	; (80112c0 <RoadToCommand+0x21c>)
 80111de:	f002 fd47 	bl	8013c70 <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 80111e2:	7bfa      	ldrb	r2, [r7, #15]
 80111e4:	493b      	ldr	r1, [pc, #236]	; (80112d4 <RoadToCommand+0x230>)
 80111e6:	4613      	mov	r3, r2
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	4413      	add	r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	440b      	add	r3, r1
 80111f0:	3304      	adds	r3, #4
 80111f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80111f6:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 80111f8:	7bfa      	ldrb	r2, [r7, #15]
 80111fa:	4936      	ldr	r1, [pc, #216]	; (80112d4 <RoadToCommand+0x230>)
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	440b      	add	r3, r1
 8011206:	3308      	adds	r3, #8
 8011208:	2200      	movs	r2, #0
 801120a:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Forward;
 801120c:	7bfa      	ldrb	r2, [r7, #15]
 801120e:	4931      	ldr	r1, [pc, #196]	; (80112d4 <RoadToCommand+0x230>)
 8011210:	4613      	mov	r3, r2
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	4413      	add	r3, r2
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	440b      	add	r3, r1
 801121a:	2200      	movs	r2, #0
 801121c:	701a      	strb	r2, [r3, #0]
				break;
 801121e:	e026      	b.n	801126e <RoadToCommand+0x1ca>
			case Direction_Bottom:		//无法后退 即调头
				printfX("下");
 8011220:	492f      	ldr	r1, [pc, #188]	; (80112e0 <RoadToCommand+0x23c>)
 8011222:	4827      	ldr	r0, [pc, #156]	; (80112c0 <RoadToCommand+0x21c>)
 8011224:	f003 fc8c 	bl	8014b40 <siprintf>
 8011228:	4825      	ldr	r0, [pc, #148]	; (80112c0 <RoadToCommand+0x21c>)
 801122a:	f002 fd21 	bl	8013c70 <printf_Base>
				Commands[reLayer].Duration = Command_Rotation_Duration;
 801122e:	7bfa      	ldrb	r2, [r7, #15]
 8011230:	4928      	ldr	r1, [pc, #160]	; (80112d4 <RoadToCommand+0x230>)
 8011232:	4613      	mov	r3, r2
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	4413      	add	r3, r2
 8011238:	009b      	lsls	r3, r3, #2
 801123a:	440b      	add	r3, r1
 801123c:	3304      	adds	r3, #4
 801123e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011242:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 8011244:	7bfa      	ldrb	r2, [r7, #15]
 8011246:	4923      	ldr	r1, [pc, #140]	; (80112d4 <RoadToCommand+0x230>)
 8011248:	4613      	mov	r3, r2
 801124a:	005b      	lsls	r3, r3, #1
 801124c:	4413      	add	r3, r2
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	440b      	add	r3, r1
 8011252:	3308      	adds	r3, #8
 8011254:	2200      	movs	r2, #0
 8011256:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Rotation;
 8011258:	7bfa      	ldrb	r2, [r7, #15]
 801125a:	491e      	ldr	r1, [pc, #120]	; (80112d4 <RoadToCommand+0x230>)
 801125c:	4613      	mov	r3, r2
 801125e:	005b      	lsls	r3, r3, #1
 8011260:	4413      	add	r3, r2
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	440b      	add	r3, r1
 8011266:	2204      	movs	r2, #4
 8011268:	701a      	strb	r2, [r3, #0]
				break;
 801126a:	e000      	b.n	801126e <RoadToCommand+0x1ca>
			default:
				break;
 801126c:	bf00      	nop
		}
		printfX(" --> ");
 801126e:	491d      	ldr	r1, [pc, #116]	; (80112e4 <RoadToCommand+0x240>)
 8011270:	4813      	ldr	r0, [pc, #76]	; (80112c0 <RoadToCommand+0x21c>)
 8011272:	f003 fc65 	bl	8014b40 <siprintf>
 8011276:	4812      	ldr	r0, [pc, #72]	; (80112c0 <RoadToCommand+0x21c>)
 8011278:	f002 fcfa 	bl	8013c70 <printf_Base>
		printfX("%d", node->Index);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	461a      	mov	r2, r3
 8011282:	490e      	ldr	r1, [pc, #56]	; (80112bc <RoadToCommand+0x218>)
 8011284:	480e      	ldr	r0, [pc, #56]	; (80112c0 <RoadToCommand+0x21c>)
 8011286:	f003 fc5b 	bl	8014b40 <siprintf>
 801128a:	480d      	ldr	r0, [pc, #52]	; (80112c0 <RoadToCommand+0x21c>)
 801128c:	f002 fcf0 	bl	8013c70 <printf_Base>

		//判断是否结束
		if (layer == 0)
 8011290:	78fb      	ldrb	r3, [r7, #3]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10b      	bne.n	80112ae <RoadToCommand+0x20a>
		{
			Command_Number = reLayer + 1;
 8011296:	7bfb      	ldrb	r3, [r7, #15]
 8011298:	3301      	adds	r3, #1
 801129a:	b2da      	uxtb	r2, r3
 801129c:	4b12      	ldr	r3, [pc, #72]	; (80112e8 <RoadToCommand+0x244>)
 801129e:	701a      	strb	r2, [r3, #0]
			printfX("\n");
 80112a0:	4912      	ldr	r1, [pc, #72]	; (80112ec <RoadToCommand+0x248>)
 80112a2:	4807      	ldr	r0, [pc, #28]	; (80112c0 <RoadToCommand+0x21c>)
 80112a4:	f003 fc4c 	bl	8014b40 <siprintf>
 80112a8:	4805      	ldr	r0, [pc, #20]	; (80112c0 <RoadToCommand+0x21c>)
 80112aa:	f002 fce1 	bl	8013c70 <printf_Base>
		}
		return reLayer + 1;
 80112ae:	7bfb      	ldrb	r3, [r7, #15]
 80112b0:	3301      	adds	r3, #1
 80112b2:	b2db      	uxtb	r3, r3
	}

}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3710      	adds	r7, #16
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	0801960c 	.word	0x0801960c
 80112c0:	20001308 	.word	0x20001308
 80112c4:	20001ad8 	.word	0x20001ad8
 80112c8:	20001c2c 	.word	0x20001c2c
 80112cc:	08019610 	.word	0x08019610
 80112d0:	08019618 	.word	0x08019618
 80112d4:	200000ac 	.word	0x200000ac
 80112d8:	0801961c 	.word	0x0801961c
 80112dc:	08019620 	.word	0x08019620
 80112e0:	08019624 	.word	0x08019624
 80112e4:	08019628 	.word	0x08019628
 80112e8:	200000a9 	.word	0x200000a9
 80112ec:	08019630 	.word	0x08019630

080112f0 <GenerateMap>:

//画出地图
void GenerateMap()
{
 80112f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f4:	b09b      	sub	sp, #108	; 0x6c
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	466b      	mov	r3, sp
 80112fa:	461e      	mov	r6, r3
	const int length = 20;
 80112fc:	2314      	movs	r3, #20
 80112fe:	63bb      	str	r3, [r7, #56]	; 0x38
	//0 空地 -1 路 1 2 3 ....节点
	int map[length][length];
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	3b01      	subs	r3, #1
 8011304:	637b      	str	r3, [r7, #52]	; 0x34
 8011306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011308:	2200      	movs	r2, #0
 801130a:	461c      	mov	r4, r3
 801130c:	4615      	mov	r5, r2
 801130e:	f04f 0200 	mov.w	r2, #0
 8011312:	f04f 0300 	mov.w	r3, #0
 8011316:	016b      	lsls	r3, r5, #5
 8011318:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 801131c:	0162      	lsls	r2, r4, #5
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	009c      	lsls	r4, r3, #2
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	3b01      	subs	r3, #1
 8011326:	633b      	str	r3, [r7, #48]	; 0x30
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	2200      	movs	r2, #0
 801132c:	469a      	mov	sl, r3
 801132e:	4693      	mov	fp, r2
 8011330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011332:	2200      	movs	r2, #0
 8011334:	613b      	str	r3, [r7, #16]
 8011336:	617a      	str	r2, [r7, #20]
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	fb03 f20b 	mul.w	r2, r3, fp
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	fb0a f303 	mul.w	r3, sl, r3
 8011344:	4413      	add	r3, r2
 8011346:	693a      	ldr	r2, [r7, #16]
 8011348:	fbaa 8902 	umull	r8, r9, sl, r2
 801134c:	444b      	add	r3, r9
 801134e:	4699      	mov	r9, r3
 8011350:	f04f 0200 	mov.w	r2, #0
 8011354:	f04f 0300 	mov.w	r3, #0
 8011358:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801135c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8011360:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	2200      	movs	r2, #0
 8011368:	60bb      	str	r3, [r7, #8]
 801136a:	60fa      	str	r2, [r7, #12]
 801136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136e:	2200      	movs	r2, #0
 8011370:	603b      	str	r3, [r7, #0]
 8011372:	607a      	str	r2, [r7, #4]
 8011374:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011378:	464b      	mov	r3, r9
 801137a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801137e:	4652      	mov	r2, sl
 8011380:	fb02 f203 	mul.w	r2, r2, r3
 8011384:	465b      	mov	r3, fp
 8011386:	4645      	mov	r5, r8
 8011388:	fb05 f303 	mul.w	r3, r5, r3
 801138c:	4413      	add	r3, r2
 801138e:	4642      	mov	r2, r8
 8011390:	4655      	mov	r5, sl
 8011392:	fba2 0105 	umull	r0, r1, r2, r5
 8011396:	440b      	add	r3, r1
 8011398:	4619      	mov	r1, r3
 801139a:	f04f 0200 	mov.w	r2, #0
 801139e:	f04f 0300 	mov.w	r3, #0
 80113a2:	014b      	lsls	r3, r1, #5
 80113a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80113a8:	0142      	lsls	r2, r0, #5
 80113aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113ae:	fb02 f303 	mul.w	r3, r2, r3
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	3307      	adds	r3, #7
 80113b6:	08db      	lsrs	r3, r3, #3
 80113b8:	00db      	lsls	r3, r3, #3
 80113ba:	ebad 0d03 	sub.w	sp, sp, r3
 80113be:	466b      	mov	r3, sp
 80113c0:	3303      	adds	r3, #3
 80113c2:	089b      	lsrs	r3, r3, #2
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < length; i++)
 80113c8:	2300      	movs	r3, #0
 80113ca:	653b      	str	r3, [r7, #80]	; 0x50
 80113cc:	e016      	b.n	80113fc <GenerateMap+0x10c>
	{
		for (int j = 0; j < length; j++)
 80113ce:	2300      	movs	r3, #0
 80113d0:	657b      	str	r3, [r7, #84]	; 0x54
 80113d2:	e00c      	b.n	80113ee <GenerateMap+0xfe>
		{
			map[i][j] = 0;
 80113d4:	08a2      	lsrs	r2, r4, #2
 80113d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113da:	fb02 f101 	mul.w	r1, r2, r1
 80113de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80113e0:	440a      	add	r2, r1
 80113e2:	2100      	movs	r1, #0
 80113e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < length; j++)
 80113e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113ea:	3301      	adds	r3, #1
 80113ec:	657b      	str	r3, [r7, #84]	; 0x54
 80113ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80113f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f2:	429a      	cmp	r2, r3
 80113f4:	dbee      	blt.n	80113d4 <GenerateMap+0xe4>
	for (int i = 0; i < length; i++)
 80113f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f8:	3301      	adds	r3, #1
 80113fa:	653b      	str	r3, [r7, #80]	; 0x50
 80113fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011400:	429a      	cmp	r2, r3
 8011402:	dbe4      	blt.n	80113ce <GenerateMap+0xde>
		}
	}
	int x = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	65bb      	str	r3, [r7, #88]	; 0x58
	int y = length - 1;
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	3b01      	subs	r3, #1
 801140c:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 0; i < NodeRelationshipNumber; i++)
 801140e:	2300      	movs	r3, #0
 8011410:	663b      	str	r3, [r7, #96]	; 0x60
 8011412:	e34e      	b.n	8011ab2 <GenerateMap+0x7c2>
	{
		//查找节点是否存在
		if (MapList[NodeList[i].NodeA].Index == 0)
 8011414:	4990      	ldr	r1, [pc, #576]	; (8011658 <GenerateMap+0x368>)
 8011416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011418:	4613      	mov	r3, r2
 801141a:	005b      	lsls	r3, r3, #1
 801141c:	4413      	add	r3, r2
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	440b      	add	r3, r1
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	4619      	mov	r1, r3
 8011426:	4a8d      	ldr	r2, [pc, #564]	; (801165c <GenerateMap+0x36c>)
 8011428:	231a      	movs	r3, #26
 801142a:	fb01 f303 	mul.w	r3, r1, r3
 801142e:	4413      	add	r3, r2
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d15b      	bne.n	80114ee <GenerateMap+0x1fe>
		{
			if (i == 0)
 8011436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011438:	2b00      	cmp	r3, #0
 801143a:	d150      	bne.n	80114de <GenerateMap+0x1ee>
			{
				MapList[NodeList[i].NodeA].Index = NodeList[i].NodeA;
 801143c:	4986      	ldr	r1, [pc, #536]	; (8011658 <GenerateMap+0x368>)
 801143e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011440:	4613      	mov	r3, r2
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	4413      	add	r3, r2
 8011446:	005b      	lsls	r3, r3, #1
 8011448:	440b      	add	r3, r1
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	4618      	mov	r0, r3
 801144e:	4982      	ldr	r1, [pc, #520]	; (8011658 <GenerateMap+0x368>)
 8011450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	005b      	lsls	r3, r3, #1
 801145a:	440b      	add	r3, r1
 801145c:	7819      	ldrb	r1, [r3, #0]
 801145e:	4a7f      	ldr	r2, [pc, #508]	; (801165c <GenerateMap+0x36c>)
 8011460:	231a      	movs	r3, #26
 8011462:	fb00 f303 	mul.w	r3, r0, r3
 8011466:	4413      	add	r3, r2
 8011468:	460a      	mov	r2, r1
 801146a:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].Position.X = x;
 801146c:	497a      	ldr	r1, [pc, #488]	; (8011658 <GenerateMap+0x368>)
 801146e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011470:	4613      	mov	r3, r2
 8011472:	005b      	lsls	r3, r3, #1
 8011474:	4413      	add	r3, r2
 8011476:	005b      	lsls	r3, r3, #1
 8011478:	440b      	add	r3, r1
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	4618      	mov	r0, r3
 801147e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011480:	b299      	uxth	r1, r3
 8011482:	4a76      	ldr	r2, [pc, #472]	; (801165c <GenerateMap+0x36c>)
 8011484:	231a      	movs	r3, #26
 8011486:	fb00 f303 	mul.w	r3, r0, r3
 801148a:	4413      	add	r3, r2
 801148c:	330e      	adds	r3, #14
 801148e:	460a      	mov	r2, r1
 8011490:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeA].Position.Y = y;
 8011492:	4971      	ldr	r1, [pc, #452]	; (8011658 <GenerateMap+0x368>)
 8011494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011496:	4613      	mov	r3, r2
 8011498:	005b      	lsls	r3, r3, #1
 801149a:	4413      	add	r3, r2
 801149c:	005b      	lsls	r3, r3, #1
 801149e:	440b      	add	r3, r1
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	4618      	mov	r0, r3
 80114a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114a6:	b299      	uxth	r1, r3
 80114a8:	4a6c      	ldr	r2, [pc, #432]	; (801165c <GenerateMap+0x36c>)
 80114aa:	231a      	movs	r3, #26
 80114ac:	fb00 f303 	mul.w	r3, r0, r3
 80114b0:	4413      	add	r3, r2
 80114b2:	3310      	adds	r3, #16
 80114b4:	460a      	mov	r2, r1
 80114b6:	801a      	strh	r2, [r3, #0]
				//画第一个节点
				map[x][y] = NodeList[i].NodeA;
 80114b8:	4967      	ldr	r1, [pc, #412]	; (8011658 <GenerateMap+0x368>)
 80114ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114bc:	4613      	mov	r3, r2
 80114be:	005b      	lsls	r3, r3, #1
 80114c0:	4413      	add	r3, r2
 80114c2:	005b      	lsls	r3, r3, #1
 80114c4:	440b      	add	r3, r1
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	08a2      	lsrs	r2, r4, #2
 80114ca:	4618      	mov	r0, r3
 80114cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80114d0:	fb02 f101 	mul.w	r1, r2, r1
 80114d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114d6:	440a      	add	r2, r1
 80114d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80114dc:	e029      	b.n	8011532 <GenerateMap+0x242>
			}
			else
			{
				//报错 节点必须存在
				printfX("初始化地图错误，首节点必须存在\n");
 80114de:	4960      	ldr	r1, [pc, #384]	; (8011660 <GenerateMap+0x370>)
 80114e0:	4860      	ldr	r0, [pc, #384]	; (8011664 <GenerateMap+0x374>)
 80114e2:	f003 fb2d 	bl	8014b40 <siprintf>
 80114e6:	485f      	ldr	r0, [pc, #380]	; (8011664 <GenerateMap+0x374>)
 80114e8:	f002 fbc2 	bl	8013c70 <printf_Base>
 80114ec:	e021      	b.n	8011532 <GenerateMap+0x242>
			}
		}
		else
		{
			//修改当前坐标
			x = MapList[NodeList[i].NodeA].Position.X;
 80114ee:	495a      	ldr	r1, [pc, #360]	; (8011658 <GenerateMap+0x368>)
 80114f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114f2:	4613      	mov	r3, r2
 80114f4:	005b      	lsls	r3, r3, #1
 80114f6:	4413      	add	r3, r2
 80114f8:	005b      	lsls	r3, r3, #1
 80114fa:	440b      	add	r3, r1
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	4619      	mov	r1, r3
 8011500:	4a56      	ldr	r2, [pc, #344]	; (801165c <GenerateMap+0x36c>)
 8011502:	231a      	movs	r3, #26
 8011504:	fb01 f303 	mul.w	r3, r1, r3
 8011508:	4413      	add	r3, r2
 801150a:	330e      	adds	r3, #14
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	65bb      	str	r3, [r7, #88]	; 0x58
			y = MapList[NodeList[i].NodeA].Position.Y;
 8011510:	4951      	ldr	r1, [pc, #324]	; (8011658 <GenerateMap+0x368>)
 8011512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011514:	4613      	mov	r3, r2
 8011516:	005b      	lsls	r3, r3, #1
 8011518:	4413      	add	r3, r2
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	440b      	add	r3, r1
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	4619      	mov	r1, r3
 8011522:	4a4e      	ldr	r2, [pc, #312]	; (801165c <GenerateMap+0x36c>)
 8011524:	231a      	movs	r3, #26
 8011526:	fb01 f303 	mul.w	r3, r1, r3
 801152a:	4413      	add	r3, r2
 801152c:	3310      	adds	r3, #16
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		//计算路径
		int x_s = x;
 8011532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011534:	667b      	str	r3, [r7, #100]	; 0x64
		int y_s = y;
 8011536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011538:	64fb      	str	r3, [r7, #76]	; 0x4c
		switch (NodeList[i].Direction)
 801153a:	4947      	ldr	r1, [pc, #284]	; (8011658 <GenerateMap+0x368>)
 801153c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801153e:	4613      	mov	r3, r2
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	4413      	add	r3, r2
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	440b      	add	r3, r1
 8011548:	3302      	adds	r3, #2
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b03      	cmp	r3, #3
 801154e:	f200 81f5 	bhi.w	801193c <GenerateMap+0x64c>
 8011552:	a201      	add	r2, pc, #4	; (adr r2, 8011558 <GenerateMap+0x268>)
 8011554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011558:	08011757 	.word	0x08011757
 801155c:	08011669 	.word	0x08011669
 8011560:	08011845 	.word	0x08011845
 8011564:	08011569 	.word	0x08011569
		{
			case Direction_Left:
				x_s -= NodeList[i].Distance + 1;
 8011568:	493b      	ldr	r1, [pc, #236]	; (8011658 <GenerateMap+0x368>)
 801156a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801156c:	4613      	mov	r3, r2
 801156e:	005b      	lsls	r3, r3, #1
 8011570:	4413      	add	r3, r2
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	440b      	add	r3, r1
 8011576:	3304      	adds	r3, #4
 8011578:	881b      	ldrh	r3, [r3, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	667b      	str	r3, [r7, #100]	; 0x64
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Left] = NodeList[i].NodeB;  //将另一端节点加入方向索引
 8011582:	4935      	ldr	r1, [pc, #212]	; (8011658 <GenerateMap+0x368>)
 8011584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011586:	4613      	mov	r3, r2
 8011588:	005b      	lsls	r3, r3, #1
 801158a:	4413      	add	r3, r2
 801158c:	005b      	lsls	r3, r3, #1
 801158e:	440b      	add	r3, r1
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	4618      	mov	r0, r3
 8011594:	4930      	ldr	r1, [pc, #192]	; (8011658 <GenerateMap+0x368>)
 8011596:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011598:	4613      	mov	r3, r2
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	4413      	add	r3, r2
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	440b      	add	r3, r1
 80115a2:	3301      	adds	r3, #1
 80115a4:	7819      	ldrb	r1, [r3, #0]
 80115a6:	4a2d      	ldr	r2, [pc, #180]	; (801165c <GenerateMap+0x36c>)
 80115a8:	231a      	movs	r3, #26
 80115aa:	fb00 f303 	mul.w	r3, r0, r3
 80115ae:	4413      	add	r3, r2
 80115b0:	3304      	adds	r3, #4
 80115b2:	460a      	mov	r2, r1
 80115b4:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Left] = NodeList[i].Distance;
 80115b6:	4928      	ldr	r1, [pc, #160]	; (8011658 <GenerateMap+0x368>)
 80115b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115ba:	4613      	mov	r3, r2
 80115bc:	005b      	lsls	r3, r3, #1
 80115be:	4413      	add	r3, r2
 80115c0:	005b      	lsls	r3, r3, #1
 80115c2:	440b      	add	r3, r1
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	4618      	mov	r0, r3
 80115c8:	4923      	ldr	r1, [pc, #140]	; (8011658 <GenerateMap+0x368>)
 80115ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115cc:	4613      	mov	r3, r2
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	4413      	add	r3, r2
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	440b      	add	r3, r1
 80115d6:	3304      	adds	r3, #4
 80115d8:	8819      	ldrh	r1, [r3, #0]
 80115da:	4a20      	ldr	r2, [pc, #128]	; (801165c <GenerateMap+0x36c>)
 80115dc:	231a      	movs	r3, #26
 80115de:	fb00 f303 	mul.w	r3, r0, r3
 80115e2:	4413      	add	r3, r2
 80115e4:	330c      	adds	r3, #12
 80115e6:	460a      	mov	r2, r1
 80115e8:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Right] = NodeList[i].NodeA;  //反向索引
 80115ea:	491b      	ldr	r1, [pc, #108]	; (8011658 <GenerateMap+0x368>)
 80115ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115ee:	4613      	mov	r3, r2
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	4413      	add	r3, r2
 80115f4:	005b      	lsls	r3, r3, #1
 80115f6:	440b      	add	r3, r1
 80115f8:	3301      	adds	r3, #1
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	4618      	mov	r0, r3
 80115fe:	4916      	ldr	r1, [pc, #88]	; (8011658 <GenerateMap+0x368>)
 8011600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011602:	4613      	mov	r3, r2
 8011604:	005b      	lsls	r3, r3, #1
 8011606:	4413      	add	r3, r2
 8011608:	005b      	lsls	r3, r3, #1
 801160a:	440b      	add	r3, r1
 801160c:	7819      	ldrb	r1, [r3, #0]
 801160e:	4a13      	ldr	r2, [pc, #76]	; (801165c <GenerateMap+0x36c>)
 8011610:	231a      	movs	r3, #26
 8011612:	fb00 f303 	mul.w	r3, r0, r3
 8011616:	4413      	add	r3, r2
 8011618:	3302      	adds	r3, #2
 801161a:	460a      	mov	r2, r1
 801161c:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Right] = NodeList[i].Distance;
 801161e:	490e      	ldr	r1, [pc, #56]	; (8011658 <GenerateMap+0x368>)
 8011620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	440b      	add	r3, r1
 801162c:	3301      	adds	r3, #1
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	4618      	mov	r0, r3
 8011632:	4909      	ldr	r1, [pc, #36]	; (8011658 <GenerateMap+0x368>)
 8011634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011636:	4613      	mov	r3, r2
 8011638:	005b      	lsls	r3, r3, #1
 801163a:	4413      	add	r3, r2
 801163c:	005b      	lsls	r3, r3, #1
 801163e:	440b      	add	r3, r1
 8011640:	3304      	adds	r3, #4
 8011642:	8819      	ldrh	r1, [r3, #0]
 8011644:	4a05      	ldr	r2, [pc, #20]	; (801165c <GenerateMap+0x36c>)
 8011646:	231a      	movs	r3, #26
 8011648:	fb00 f303 	mul.w	r3, r0, r3
 801164c:	4413      	add	r3, r2
 801164e:	3308      	adds	r3, #8
 8011650:	460a      	mov	r2, r1
 8011652:	801a      	strh	r2, [r3, #0]
				break;
 8011654:	e173      	b.n	801193e <GenerateMap+0x64e>
 8011656:	bf00      	nop
 8011658:	20000060 	.word	0x20000060
 801165c:	20001ad8 	.word	0x20001ad8
 8011660:	08019634 	.word	0x08019634
 8011664:	20001308 	.word	0x20001308
			case Direction_Right:
				x_s += NodeList[i].Distance + 1;
 8011668:	49b2      	ldr	r1, [pc, #712]	; (8011934 <GenerateMap+0x644>)
 801166a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801166c:	4613      	mov	r3, r2
 801166e:	005b      	lsls	r3, r3, #1
 8011670:	4413      	add	r3, r2
 8011672:	005b      	lsls	r3, r3, #1
 8011674:	440b      	add	r3, r1
 8011676:	3304      	adds	r3, #4
 8011678:	881b      	ldrh	r3, [r3, #0]
 801167a:	3301      	adds	r3, #1
 801167c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801167e:	4413      	add	r3, r2
 8011680:	667b      	str	r3, [r7, #100]	; 0x64
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Right] = NodeList[i].NodeB;
 8011682:	49ac      	ldr	r1, [pc, #688]	; (8011934 <GenerateMap+0x644>)
 8011684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011686:	4613      	mov	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	4413      	add	r3, r2
 801168c:	005b      	lsls	r3, r3, #1
 801168e:	440b      	add	r3, r1
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	4618      	mov	r0, r3
 8011694:	49a7      	ldr	r1, [pc, #668]	; (8011934 <GenerateMap+0x644>)
 8011696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011698:	4613      	mov	r3, r2
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	4413      	add	r3, r2
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	440b      	add	r3, r1
 80116a2:	3301      	adds	r3, #1
 80116a4:	7819      	ldrb	r1, [r3, #0]
 80116a6:	4aa4      	ldr	r2, [pc, #656]	; (8011938 <GenerateMap+0x648>)
 80116a8:	231a      	movs	r3, #26
 80116aa:	fb00 f303 	mul.w	r3, r0, r3
 80116ae:	4413      	add	r3, r2
 80116b0:	3302      	adds	r3, #2
 80116b2:	460a      	mov	r2, r1
 80116b4:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Right] = NodeList[i].Distance;
 80116b6:	499f      	ldr	r1, [pc, #636]	; (8011934 <GenerateMap+0x644>)
 80116b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116ba:	4613      	mov	r3, r2
 80116bc:	005b      	lsls	r3, r3, #1
 80116be:	4413      	add	r3, r2
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	440b      	add	r3, r1
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	4618      	mov	r0, r3
 80116c8:	499a      	ldr	r1, [pc, #616]	; (8011934 <GenerateMap+0x644>)
 80116ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116cc:	4613      	mov	r3, r2
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	4413      	add	r3, r2
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	440b      	add	r3, r1
 80116d6:	3304      	adds	r3, #4
 80116d8:	8819      	ldrh	r1, [r3, #0]
 80116da:	4a97      	ldr	r2, [pc, #604]	; (8011938 <GenerateMap+0x648>)
 80116dc:	231a      	movs	r3, #26
 80116de:	fb00 f303 	mul.w	r3, r0, r3
 80116e2:	4413      	add	r3, r2
 80116e4:	3308      	adds	r3, #8
 80116e6:	460a      	mov	r2, r1
 80116e8:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Left] = NodeList[i].NodeA;  //反向索引
 80116ea:	4992      	ldr	r1, [pc, #584]	; (8011934 <GenerateMap+0x644>)
 80116ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116ee:	4613      	mov	r3, r2
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	4413      	add	r3, r2
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	440b      	add	r3, r1
 80116f8:	3301      	adds	r3, #1
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	4618      	mov	r0, r3
 80116fe:	498d      	ldr	r1, [pc, #564]	; (8011934 <GenerateMap+0x644>)
 8011700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011702:	4613      	mov	r3, r2
 8011704:	005b      	lsls	r3, r3, #1
 8011706:	4413      	add	r3, r2
 8011708:	005b      	lsls	r3, r3, #1
 801170a:	440b      	add	r3, r1
 801170c:	7819      	ldrb	r1, [r3, #0]
 801170e:	4a8a      	ldr	r2, [pc, #552]	; (8011938 <GenerateMap+0x648>)
 8011710:	231a      	movs	r3, #26
 8011712:	fb00 f303 	mul.w	r3, r0, r3
 8011716:	4413      	add	r3, r2
 8011718:	3304      	adds	r3, #4
 801171a:	460a      	mov	r2, r1
 801171c:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Left] = NodeList[i].Distance;
 801171e:	4985      	ldr	r1, [pc, #532]	; (8011934 <GenerateMap+0x644>)
 8011720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011722:	4613      	mov	r3, r2
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	4413      	add	r3, r2
 8011728:	005b      	lsls	r3, r3, #1
 801172a:	440b      	add	r3, r1
 801172c:	3301      	adds	r3, #1
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	4618      	mov	r0, r3
 8011732:	4980      	ldr	r1, [pc, #512]	; (8011934 <GenerateMap+0x644>)
 8011734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011736:	4613      	mov	r3, r2
 8011738:	005b      	lsls	r3, r3, #1
 801173a:	4413      	add	r3, r2
 801173c:	005b      	lsls	r3, r3, #1
 801173e:	440b      	add	r3, r1
 8011740:	3304      	adds	r3, #4
 8011742:	8819      	ldrh	r1, [r3, #0]
 8011744:	4a7c      	ldr	r2, [pc, #496]	; (8011938 <GenerateMap+0x648>)
 8011746:	231a      	movs	r3, #26
 8011748:	fb00 f303 	mul.w	r3, r0, r3
 801174c:	4413      	add	r3, r2
 801174e:	330c      	adds	r3, #12
 8011750:	460a      	mov	r2, r1
 8011752:	801a      	strh	r2, [r3, #0]
				break;
 8011754:	e0f3      	b.n	801193e <GenerateMap+0x64e>
			case Direction_Top:
				y_s -= NodeList[i].Distance + 1;
 8011756:	4977      	ldr	r1, [pc, #476]	; (8011934 <GenerateMap+0x644>)
 8011758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801175a:	4613      	mov	r3, r2
 801175c:	005b      	lsls	r3, r3, #1
 801175e:	4413      	add	r3, r2
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	440b      	add	r3, r1
 8011764:	3304      	adds	r3, #4
 8011766:	881b      	ldrh	r3, [r3, #0]
 8011768:	3301      	adds	r3, #1
 801176a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	64fb      	str	r3, [r7, #76]	; 0x4c
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Top] = NodeList[i].NodeB;
 8011770:	4970      	ldr	r1, [pc, #448]	; (8011934 <GenerateMap+0x644>)
 8011772:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011774:	4613      	mov	r3, r2
 8011776:	005b      	lsls	r3, r3, #1
 8011778:	4413      	add	r3, r2
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	440b      	add	r3, r1
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	4618      	mov	r0, r3
 8011782:	496c      	ldr	r1, [pc, #432]	; (8011934 <GenerateMap+0x644>)
 8011784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011786:	4613      	mov	r3, r2
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4413      	add	r3, r2
 801178c:	005b      	lsls	r3, r3, #1
 801178e:	440b      	add	r3, r1
 8011790:	3301      	adds	r3, #1
 8011792:	7819      	ldrb	r1, [r3, #0]
 8011794:	4a68      	ldr	r2, [pc, #416]	; (8011938 <GenerateMap+0x648>)
 8011796:	231a      	movs	r3, #26
 8011798:	fb00 f303 	mul.w	r3, r0, r3
 801179c:	4413      	add	r3, r2
 801179e:	3301      	adds	r3, #1
 80117a0:	460a      	mov	r2, r1
 80117a2:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Top] = NodeList[i].Distance;
 80117a4:	4963      	ldr	r1, [pc, #396]	; (8011934 <GenerateMap+0x644>)
 80117a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117a8:	4613      	mov	r3, r2
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	4413      	add	r3, r2
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	440b      	add	r3, r1
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	4618      	mov	r0, r3
 80117b6:	495f      	ldr	r1, [pc, #380]	; (8011934 <GenerateMap+0x644>)
 80117b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117ba:	4613      	mov	r3, r2
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	4413      	add	r3, r2
 80117c0:	005b      	lsls	r3, r3, #1
 80117c2:	440b      	add	r3, r1
 80117c4:	3304      	adds	r3, #4
 80117c6:	8819      	ldrh	r1, [r3, #0]
 80117c8:	4a5b      	ldr	r2, [pc, #364]	; (8011938 <GenerateMap+0x648>)
 80117ca:	231a      	movs	r3, #26
 80117cc:	fb00 f303 	mul.w	r3, r0, r3
 80117d0:	4413      	add	r3, r2
 80117d2:	3306      	adds	r3, #6
 80117d4:	460a      	mov	r2, r1
 80117d6:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Bottom] = NodeList[i].NodeA;  //反向索引
 80117d8:	4956      	ldr	r1, [pc, #344]	; (8011934 <GenerateMap+0x644>)
 80117da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117dc:	4613      	mov	r3, r2
 80117de:	005b      	lsls	r3, r3, #1
 80117e0:	4413      	add	r3, r2
 80117e2:	005b      	lsls	r3, r3, #1
 80117e4:	440b      	add	r3, r1
 80117e6:	3301      	adds	r3, #1
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	4618      	mov	r0, r3
 80117ec:	4951      	ldr	r1, [pc, #324]	; (8011934 <GenerateMap+0x644>)
 80117ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117f0:	4613      	mov	r3, r2
 80117f2:	005b      	lsls	r3, r3, #1
 80117f4:	4413      	add	r3, r2
 80117f6:	005b      	lsls	r3, r3, #1
 80117f8:	440b      	add	r3, r1
 80117fa:	7819      	ldrb	r1, [r3, #0]
 80117fc:	4a4e      	ldr	r2, [pc, #312]	; (8011938 <GenerateMap+0x648>)
 80117fe:	231a      	movs	r3, #26
 8011800:	fb00 f303 	mul.w	r3, r0, r3
 8011804:	4413      	add	r3, r2
 8011806:	3303      	adds	r3, #3
 8011808:	460a      	mov	r2, r1
 801180a:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Bottom] = NodeList[i].Distance;
 801180c:	4949      	ldr	r1, [pc, #292]	; (8011934 <GenerateMap+0x644>)
 801180e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011810:	4613      	mov	r3, r2
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	4413      	add	r3, r2
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	440b      	add	r3, r1
 801181a:	3301      	adds	r3, #1
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	4618      	mov	r0, r3
 8011820:	4944      	ldr	r1, [pc, #272]	; (8011934 <GenerateMap+0x644>)
 8011822:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011824:	4613      	mov	r3, r2
 8011826:	005b      	lsls	r3, r3, #1
 8011828:	4413      	add	r3, r2
 801182a:	005b      	lsls	r3, r3, #1
 801182c:	440b      	add	r3, r1
 801182e:	3304      	adds	r3, #4
 8011830:	8819      	ldrh	r1, [r3, #0]
 8011832:	4a41      	ldr	r2, [pc, #260]	; (8011938 <GenerateMap+0x648>)
 8011834:	231a      	movs	r3, #26
 8011836:	fb00 f303 	mul.w	r3, r0, r3
 801183a:	4413      	add	r3, r2
 801183c:	330a      	adds	r3, #10
 801183e:	460a      	mov	r2, r1
 8011840:	801a      	strh	r2, [r3, #0]
				break;
 8011842:	e07c      	b.n	801193e <GenerateMap+0x64e>
			case Direction_Bottom:
				y_s += NodeList[i].Distance + 1;
 8011844:	493b      	ldr	r1, [pc, #236]	; (8011934 <GenerateMap+0x644>)
 8011846:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011848:	4613      	mov	r3, r2
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	4413      	add	r3, r2
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	440b      	add	r3, r1
 8011852:	3304      	adds	r3, #4
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	3301      	adds	r3, #1
 8011858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801185a:	4413      	add	r3, r2
 801185c:	64fb      	str	r3, [r7, #76]	; 0x4c
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Bottom] = NodeList[i].NodeB;
 801185e:	4935      	ldr	r1, [pc, #212]	; (8011934 <GenerateMap+0x644>)
 8011860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011862:	4613      	mov	r3, r2
 8011864:	005b      	lsls	r3, r3, #1
 8011866:	4413      	add	r3, r2
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	440b      	add	r3, r1
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	4618      	mov	r0, r3
 8011870:	4930      	ldr	r1, [pc, #192]	; (8011934 <GenerateMap+0x644>)
 8011872:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	440b      	add	r3, r1
 801187e:	3301      	adds	r3, #1
 8011880:	7819      	ldrb	r1, [r3, #0]
 8011882:	4a2d      	ldr	r2, [pc, #180]	; (8011938 <GenerateMap+0x648>)
 8011884:	231a      	movs	r3, #26
 8011886:	fb00 f303 	mul.w	r3, r0, r3
 801188a:	4413      	add	r3, r2
 801188c:	3303      	adds	r3, #3
 801188e:	460a      	mov	r2, r1
 8011890:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Bottom] = NodeList[i].Distance;
 8011892:	4928      	ldr	r1, [pc, #160]	; (8011934 <GenerateMap+0x644>)
 8011894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011896:	4613      	mov	r3, r2
 8011898:	005b      	lsls	r3, r3, #1
 801189a:	4413      	add	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	440b      	add	r3, r1
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	4618      	mov	r0, r3
 80118a4:	4923      	ldr	r1, [pc, #140]	; (8011934 <GenerateMap+0x644>)
 80118a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118a8:	4613      	mov	r3, r2
 80118aa:	005b      	lsls	r3, r3, #1
 80118ac:	4413      	add	r3, r2
 80118ae:	005b      	lsls	r3, r3, #1
 80118b0:	440b      	add	r3, r1
 80118b2:	3304      	adds	r3, #4
 80118b4:	8819      	ldrh	r1, [r3, #0]
 80118b6:	4a20      	ldr	r2, [pc, #128]	; (8011938 <GenerateMap+0x648>)
 80118b8:	231a      	movs	r3, #26
 80118ba:	fb00 f303 	mul.w	r3, r0, r3
 80118be:	4413      	add	r3, r2
 80118c0:	330a      	adds	r3, #10
 80118c2:	460a      	mov	r2, r1
 80118c4:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Top] = NodeList[i].NodeA;  //反向索引
 80118c6:	491b      	ldr	r1, [pc, #108]	; (8011934 <GenerateMap+0x644>)
 80118c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118ca:	4613      	mov	r3, r2
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	4413      	add	r3, r2
 80118d0:	005b      	lsls	r3, r3, #1
 80118d2:	440b      	add	r3, r1
 80118d4:	3301      	adds	r3, #1
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	4618      	mov	r0, r3
 80118da:	4916      	ldr	r1, [pc, #88]	; (8011934 <GenerateMap+0x644>)
 80118dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118de:	4613      	mov	r3, r2
 80118e0:	005b      	lsls	r3, r3, #1
 80118e2:	4413      	add	r3, r2
 80118e4:	005b      	lsls	r3, r3, #1
 80118e6:	440b      	add	r3, r1
 80118e8:	7819      	ldrb	r1, [r3, #0]
 80118ea:	4a13      	ldr	r2, [pc, #76]	; (8011938 <GenerateMap+0x648>)
 80118ec:	231a      	movs	r3, #26
 80118ee:	fb00 f303 	mul.w	r3, r0, r3
 80118f2:	4413      	add	r3, r2
 80118f4:	3301      	adds	r3, #1
 80118f6:	460a      	mov	r2, r1
 80118f8:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Top] = NodeList[i].Distance;
 80118fa:	490e      	ldr	r1, [pc, #56]	; (8011934 <GenerateMap+0x644>)
 80118fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118fe:	4613      	mov	r3, r2
 8011900:	005b      	lsls	r3, r3, #1
 8011902:	4413      	add	r3, r2
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	440b      	add	r3, r1
 8011908:	3301      	adds	r3, #1
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	4618      	mov	r0, r3
 801190e:	4909      	ldr	r1, [pc, #36]	; (8011934 <GenerateMap+0x644>)
 8011910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011912:	4613      	mov	r3, r2
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	4413      	add	r3, r2
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	440b      	add	r3, r1
 801191c:	3304      	adds	r3, #4
 801191e:	8819      	ldrh	r1, [r3, #0]
 8011920:	4a05      	ldr	r2, [pc, #20]	; (8011938 <GenerateMap+0x648>)
 8011922:	231a      	movs	r3, #26
 8011924:	fb00 f303 	mul.w	r3, r0, r3
 8011928:	4413      	add	r3, r2
 801192a:	3306      	adds	r3, #6
 801192c:	460a      	mov	r2, r1
 801192e:	801a      	strh	r2, [r3, #0]
				break;
 8011930:	e005      	b.n	801193e <GenerateMap+0x64e>
 8011932:	bf00      	nop
 8011934:	20000060 	.word	0x20000060
 8011938:	20001ad8 	.word	0x20001ad8
			default:
				break;
 801193c:	bf00      	nop

		}

		//比较起止大小
		int x_max = x_s > x ? x_s : x;
 801193e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011942:	4293      	cmp	r3, r2
 8011944:	bfb8      	it	lt
 8011946:	4613      	movlt	r3, r2
 8011948:	62bb      	str	r3, [r7, #40]	; 0x28
		int x_min = x_s < x ? x_s : x;
 801194a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801194c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801194e:	4293      	cmp	r3, r2
 8011950:	bfa8      	it	ge
 8011952:	4613      	movge	r3, r2
 8011954:	627b      	str	r3, [r7, #36]	; 0x24
		int y_max = y_s > y ? y_s : y;
 8011956:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801195a:	4293      	cmp	r3, r2
 801195c:	bfb8      	it	lt
 801195e:	4613      	movlt	r3, r2
 8011960:	623b      	str	r3, [r7, #32]
		int y_min = y_s < y ? y_s : y;
 8011962:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011966:	4293      	cmp	r3, r2
 8011968:	bfa8      	it	ge
 801196a:	4613      	movge	r3, r2
 801196c:	61fb      	str	r3, [r7, #28]
		//画路径
		if (x == x_s)
 801196e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011972:	429a      	cmp	r2, r3
 8011974:	d115      	bne.n	80119a2 <GenerateMap+0x6b2>
		{
			for (int y_k = y_min + 1; y_k < y_max; y_k++)
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	3301      	adds	r3, #1
 801197a:	64bb      	str	r3, [r7, #72]	; 0x48
 801197c:	e00d      	b.n	801199a <GenerateMap+0x6aa>
			{
				map[x_s][y_k] = -1;
 801197e:	08a2      	lsrs	r2, r4, #2
 8011980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011982:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011984:	fb02 f101 	mul.w	r1, r2, r1
 8011988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801198a:	440a      	add	r2, r1
 801198c:	f04f 31ff 	mov.w	r1, #4294967295
 8011990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int y_k = y_min + 1; y_k < y_max; y_k++)
 8011994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011996:	3301      	adds	r3, #1
 8011998:	64bb      	str	r3, [r7, #72]	; 0x48
 801199a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801199c:	6a3b      	ldr	r3, [r7, #32]
 801199e:	429a      	cmp	r2, r3
 80119a0:	dbed      	blt.n	801197e <GenerateMap+0x68e>
			}
		}
		if (y == y_s)
 80119a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80119a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d115      	bne.n	80119d6 <GenerateMap+0x6e6>
		{
			for (int x_k = x_min + 1; x_k < x_max; x_k++)
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	3301      	adds	r3, #1
 80119ae:	647b      	str	r3, [r7, #68]	; 0x44
 80119b0:	e00d      	b.n	80119ce <GenerateMap+0x6de>
			{
				map[x_k][y_s] = -1;
 80119b2:	08a2      	lsrs	r2, r4, #2
 80119b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119b8:	fb02 f101 	mul.w	r1, r2, r1
 80119bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119be:	440a      	add	r2, r1
 80119c0:	f04f 31ff 	mov.w	r1, #4294967295
 80119c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int x_k = x_min + 1; x_k < x_max; x_k++)
 80119c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119ca:	3301      	adds	r3, #1
 80119cc:	647b      	str	r3, [r7, #68]	; 0x44
 80119ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d2:	429a      	cmp	r2, r3
 80119d4:	dbed      	blt.n	80119b2 <GenerateMap+0x6c2>
			}
		}

		//画节点B
		x = x_s;
 80119d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119d8:	65bb      	str	r3, [r7, #88]	; 0x58
		y = y_s;
 80119da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119dc:	65fb      	str	r3, [r7, #92]	; 0x5c
		map[x][y] = NodeList[i].NodeB;
 80119de:	4977      	ldr	r1, [pc, #476]	; (8011bbc <GenerateMap+0x8cc>)
 80119e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119e2:	4613      	mov	r3, r2
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	440b      	add	r3, r1
 80119ec:	3301      	adds	r3, #1
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	08a2      	lsrs	r2, r4, #2
 80119f2:	4618      	mov	r0, r3
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80119f8:	fb02 f101 	mul.w	r1, r2, r1
 80119fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80119fe:	440a      	add	r2, r1
 8011a00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

		//将节点添加到列表中
		if (MapList[NodeList[i].NodeB].Index == 0)
 8011a04:	496d      	ldr	r1, [pc, #436]	; (8011bbc <GenerateMap+0x8cc>)
 8011a06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a08:	4613      	mov	r3, r2
 8011a0a:	005b      	lsls	r3, r3, #1
 8011a0c:	4413      	add	r3, r2
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	440b      	add	r3, r1
 8011a12:	3301      	adds	r3, #1
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	4619      	mov	r1, r3
 8011a18:	4a69      	ldr	r2, [pc, #420]	; (8011bc0 <GenerateMap+0x8d0>)
 8011a1a:	231a      	movs	r3, #26
 8011a1c:	fb01 f303 	mul.w	r3, r1, r3
 8011a20:	4413      	add	r3, r2
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d141      	bne.n	8011aac <GenerateMap+0x7bc>
		{
			MapList[NodeList[i].NodeB].Index = NodeList[i].NodeB;
 8011a28:	4964      	ldr	r1, [pc, #400]	; (8011bbc <GenerateMap+0x8cc>)
 8011a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	005b      	lsls	r3, r3, #1
 8011a30:	4413      	add	r3, r2
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	440b      	add	r3, r1
 8011a36:	3301      	adds	r3, #1
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	495f      	ldr	r1, [pc, #380]	; (8011bbc <GenerateMap+0x8cc>)
 8011a3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a40:	4613      	mov	r3, r2
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	4413      	add	r3, r2
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	440b      	add	r3, r1
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	7819      	ldrb	r1, [r3, #0]
 8011a4e:	4a5c      	ldr	r2, [pc, #368]	; (8011bc0 <GenerateMap+0x8d0>)
 8011a50:	231a      	movs	r3, #26
 8011a52:	fb00 f303 	mul.w	r3, r0, r3
 8011a56:	4413      	add	r3, r2
 8011a58:	460a      	mov	r2, r1
 8011a5a:	701a      	strb	r2, [r3, #0]
			MapList[NodeList[i].NodeB].Position.X = x;
 8011a5c:	4957      	ldr	r1, [pc, #348]	; (8011bbc <GenerateMap+0x8cc>)
 8011a5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a60:	4613      	mov	r3, r2
 8011a62:	005b      	lsls	r3, r3, #1
 8011a64:	4413      	add	r3, r2
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	440b      	add	r3, r1
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a72:	b299      	uxth	r1, r3
 8011a74:	4a52      	ldr	r2, [pc, #328]	; (8011bc0 <GenerateMap+0x8d0>)
 8011a76:	231a      	movs	r3, #26
 8011a78:	fb00 f303 	mul.w	r3, r0, r3
 8011a7c:	4413      	add	r3, r2
 8011a7e:	330e      	adds	r3, #14
 8011a80:	460a      	mov	r2, r1
 8011a82:	801a      	strh	r2, [r3, #0]
			MapList[NodeList[i].NodeB].Position.Y = y;
 8011a84:	494d      	ldr	r1, [pc, #308]	; (8011bbc <GenerateMap+0x8cc>)
 8011a86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a88:	4613      	mov	r3, r2
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	005b      	lsls	r3, r3, #1
 8011a90:	440b      	add	r3, r1
 8011a92:	3301      	adds	r3, #1
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	4618      	mov	r0, r3
 8011a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a9a:	b299      	uxth	r1, r3
 8011a9c:	4a48      	ldr	r2, [pc, #288]	; (8011bc0 <GenerateMap+0x8d0>)
 8011a9e:	231a      	movs	r3, #26
 8011aa0:	fb00 f303 	mul.w	r3, r0, r3
 8011aa4:	4413      	add	r3, r2
 8011aa6:	3310      	adds	r3, #16
 8011aa8:	460a      	mov	r2, r1
 8011aaa:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NodeRelationshipNumber; i++)
 8011aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011aae:	3301      	adds	r3, #1
 8011ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8011ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ab4:	2b0b      	cmp	r3, #11
 8011ab6:	f77f acad 	ble.w	8011414 <GenerateMap+0x124>
		}
	}

	//将画好的地图显示在屏幕上
	for (int j = 0; j < length; j++)
 8011aba:	2300      	movs	r3, #0
 8011abc:	643b      	str	r3, [r7, #64]	; 0x40
 8011abe:	e073      	b.n	8011ba8 <GenerateMap+0x8b8>
	{
		for (int i = 0; i < length; i++)
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ac4:	e062      	b.n	8011b8c <GenerateMap+0x89c>
		{
			if (map[i][j] == -1)
 8011ac6:	08a2      	lsrs	r2, r4, #2
 8011ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011acc:	fb02 f101 	mul.w	r1, r2, r1
 8011ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ad2:	440a      	add	r2, r1
 8011ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011adc:	d12f      	bne.n	8011b3e <GenerateMap+0x84e>
			{
				if ((i - 1 < 0 || map[i - 1][j] == 0) && (i + 1 > length - 1 || map[i + 1][j] == 0))
 8011ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	dd0b      	ble.n	8011afc <GenerateMap+0x80c>
 8011ae4:	08a2      	lsrs	r2, r4, #2
 8011ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ae8:	1e59      	subs	r1, r3, #1
 8011aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aec:	fb02 f101 	mul.w	r1, r2, r1
 8011af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011af2:	440a      	add	r2, r1
 8011af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d118      	bne.n	8011b2e <GenerateMap+0x83e>
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	3b01      	subs	r3, #1
 8011b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b02:	429a      	cmp	r2, r3
 8011b04:	da0b      	bge.n	8011b1e <GenerateMap+0x82e>
 8011b06:	08a2      	lsrs	r2, r4, #2
 8011b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b0a:	1c59      	adds	r1, r3, #1
 8011b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0e:	fb02 f101 	mul.w	r1, r2, r1
 8011b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b14:	440a      	add	r2, r1
 8011b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d107      	bne.n	8011b2e <GenerateMap+0x83e>
				{
					printfX("|  ");
 8011b1e:	4929      	ldr	r1, [pc, #164]	; (8011bc4 <GenerateMap+0x8d4>)
 8011b20:	4829      	ldr	r0, [pc, #164]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b22:	f003 f80d 	bl	8014b40 <siprintf>
 8011b26:	4828      	ldr	r0, [pc, #160]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b28:	f002 f8a2 	bl	8013c70 <printf_Base>
 8011b2c:	e02b      	b.n	8011b86 <GenerateMap+0x896>
				}
				else
				{
					printfX("--");
 8011b2e:	4927      	ldr	r1, [pc, #156]	; (8011bcc <GenerateMap+0x8dc>)
 8011b30:	4825      	ldr	r0, [pc, #148]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b32:	f003 f805 	bl	8014b40 <siprintf>
 8011b36:	4824      	ldr	r0, [pc, #144]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b38:	f002 f89a 	bl	8013c70 <printf_Base>
 8011b3c:	e023      	b.n	8011b86 <GenerateMap+0x896>
				}

			}
			else if (map[i][j] > 0)
 8011b3e:	08a2      	lsrs	r2, r4, #2
 8011b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b44:	fb02 f101 	mul.w	r1, r2, r1
 8011b48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b4a:	440a      	add	r2, r1
 8011b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	dd11      	ble.n	8011b78 <GenerateMap+0x888>
			{
				printfX("%d ", map[i][j]);
 8011b54:	08a2      	lsrs	r2, r4, #2
 8011b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b5a:	fb02 f101 	mul.w	r1, r2, r1
 8011b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b60:	440a      	add	r2, r1
 8011b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b66:	461a      	mov	r2, r3
 8011b68:	4919      	ldr	r1, [pc, #100]	; (8011bd0 <GenerateMap+0x8e0>)
 8011b6a:	4817      	ldr	r0, [pc, #92]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b6c:	f002 ffe8 	bl	8014b40 <siprintf>
 8011b70:	4815      	ldr	r0, [pc, #84]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b72:	f002 f87d 	bl	8013c70 <printf_Base>
 8011b76:	e006      	b.n	8011b86 <GenerateMap+0x896>
			}
			else
			{
				printfX("   ");
 8011b78:	4916      	ldr	r1, [pc, #88]	; (8011bd4 <GenerateMap+0x8e4>)
 8011b7a:	4813      	ldr	r0, [pc, #76]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b7c:	f002 ffe0 	bl	8014b40 <siprintf>
 8011b80:	4811      	ldr	r0, [pc, #68]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b82:	f002 f875 	bl	8013c70 <printf_Base>
		for (int i = 0; i < length; i++)
 8011b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b88:	3301      	adds	r3, #1
 8011b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b90:	429a      	cmp	r2, r3
 8011b92:	db98      	blt.n	8011ac6 <GenerateMap+0x7d6>
			}

		}
		printfX("\n");
 8011b94:	4910      	ldr	r1, [pc, #64]	; (8011bd8 <GenerateMap+0x8e8>)
 8011b96:	480c      	ldr	r0, [pc, #48]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b98:	f002 ffd2 	bl	8014b40 <siprintf>
 8011b9c:	480a      	ldr	r0, [pc, #40]	; (8011bc8 <GenerateMap+0x8d8>)
 8011b9e:	f002 f867 	bl	8013c70 <printf_Base>
	for (int j = 0; j < length; j++)
 8011ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8011ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bac:	429a      	cmp	r2, r3
 8011bae:	db87      	blt.n	8011ac0 <GenerateMap+0x7d0>
 8011bb0:	46b5      	mov	sp, r6
	}
}
 8011bb2:	bf00      	nop
 8011bb4:	376c      	adds	r7, #108	; 0x6c
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	20000060 	.word	0x20000060
 8011bc0:	20001ad8 	.word	0x20001ad8
 8011bc4:	08019664 	.word	0x08019664
 8011bc8:	20001308 	.word	0x20001308
 8011bcc:	08019668 	.word	0x08019668
 8011bd0:	0801966c 	.word	0x0801966c
 8011bd4:	08019670 	.word	0x08019670
 8011bd8:	08019630 	.word	0x08019630

08011bdc <InitMap>:

//初始化地图
void InitMap()
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	af00      	add	r7, sp, #0
	printfX("初始化地图\n");
 8011be0:	4905      	ldr	r1, [pc, #20]	; (8011bf8 <InitMap+0x1c>)
 8011be2:	4806      	ldr	r0, [pc, #24]	; (8011bfc <InitMap+0x20>)
 8011be4:	f002 ffac 	bl	8014b40 <siprintf>
 8011be8:	4804      	ldr	r0, [pc, #16]	; (8011bfc <InitMap+0x20>)
 8011bea:	f002 f841 	bl	8013c70 <printf_Base>
	GenerateMap();
 8011bee:	f7ff fb7f 	bl	80112f0 <GenerateMap>
}
 8011bf2:	bf00      	nop
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	08019674 	.word	0x08019674
 8011bfc:	20001308 	.word	0x20001308

08011c00 <SetDefaultValue>:

//设置缺省值
void SetDefaultValue(Direction currentDirection, uint8_t stratPoint)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	4603      	mov	r3, r0
 8011c08:	460a      	mov	r2, r1
 8011c0a:	71fb      	strb	r3, [r7, #7]
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	71bb      	strb	r3, [r7, #6]
	CurrentDirection = currentDirection;
 8011c10:	4a05      	ldr	r2, [pc, #20]	; (8011c28 <SetDefaultValue+0x28>)
 8011c12:	79fb      	ldrb	r3, [r7, #7]
 8011c14:	7013      	strb	r3, [r2, #0]
	StartPoint = stratPoint;
 8011c16:	4a05      	ldr	r2, [pc, #20]	; (8011c2c <SetDefaultValue+0x2c>)
 8011c18:	79bb      	ldrb	r3, [r7, #6]
 8011c1a:	7013      	strb	r3, [r2, #0]
}
 8011c1c:	bf00      	nop
 8011c1e:	370c      	adds	r7, #12
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr
 8011c28:	20001c2c 	.word	0x20001c2c
 8011c2c:	200000a8 	.word	0x200000a8

08011c30 <StartWayFindingAndRuning>:

//开始寻路并向终点运动
void StartWayFindingAndRuning(uint8_t end)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	4603      	mov	r3, r0
 8011c38:	71fb      	strb	r3, [r7, #7]
	//查找终点
	MapNode *EndNode = WayFinding(end);
 8011c3a:	79fb      	ldrb	r3, [r7, #7]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff f8e9 	bl	8010e14 <WayFinding>
 8011c42:	60f8      	str	r0, [r7, #12]
	uint8_t layer = RoadToCommand(EndNode, 0);
 8011c44:	2100      	movs	r1, #0
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	f7ff fa2c 	bl	80110a4 <RoadToCommand>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	72fb      	strb	r3, [r7, #11]

	if (layer == 0)
 8011c50:	7afb      	ldrb	r3, [r7, #11]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d107      	bne.n	8011c66 <StartWayFindingAndRuning+0x36>
	{
		printfX("起点与终点重合\n\r");
 8011c56:	490a      	ldr	r1, [pc, #40]	; (8011c80 <StartWayFindingAndRuning+0x50>)
 8011c58:	480a      	ldr	r0, [pc, #40]	; (8011c84 <StartWayFindingAndRuning+0x54>)
 8011c5a:	f002 ff71 	bl	8014b40 <siprintf>
 8011c5e:	4809      	ldr	r0, [pc, #36]	; (8011c84 <StartWayFindingAndRuning+0x54>)
 8011c60:	f002 f806 	bl	8013c70 <printf_Base>
		return;
 8011c64:	e009      	b.n	8011c7a <StartWayFindingAndRuning+0x4a>
	}

	//清空状态
	Status_Control_Clear();
 8011c66:	f000 f811 	bl	8011c8c <Status_Control_Clear>
	//开始运动
	Status_Control_Start(Command_Mode_OneTime, RuningSpeed);
 8011c6a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8011c6e:	2001      	movs	r0, #1
 8011c70:	f000 f834 	bl	8011cdc <Status_Control_Start>
	
	//更改当前位置 假定到达
	StartPoint = end;
 8011c74:	4a04      	ldr	r2, [pc, #16]	; (8011c88 <StartWayFindingAndRuning+0x58>)
 8011c76:	79fb      	ldrb	r3, [r7, #7]
 8011c78:	7013      	strb	r3, [r2, #0]
}
 8011c7a:	3710      	adds	r7, #16
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	08019688 	.word	0x08019688
 8011c84:	20001308 	.word	0x20001308
 8011c88:	200000a8 	.word	0x200000a8

08011c8c <Status_Control_Clear>:

//转弯步进
#define StepLength 0.25

void Status_Control_Clear()
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	af00      	add	r7, sp, #0
	SetCarSpeed(0, 0, 0);
 8011c90:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8011cc4 <Status_Control_Clear+0x38>
 8011c94:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8011cc4 <Status_Control_Clear+0x38>
 8011c98:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011cc4 <Status_Control_Clear+0x38>
 8011c9c:	f000 ff68 	bl	8012b70 <SetCarSpeed>
	StatusControl_RuningFlag = 0;
 8011ca0:	4b09      	ldr	r3, [pc, #36]	; (8011cc8 <Status_Control_Clear+0x3c>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	701a      	strb	r2, [r3, #0]
	Command_Duration_Flag = 0;
 8011ca6:	4b09      	ldr	r3, [pc, #36]	; (8011ccc <Status_Control_Clear+0x40>)
 8011ca8:	2200      	movs	r2, #0
 8011caa:	701a      	strb	r2, [r3, #0]
	Command_Index = -1;
 8011cac:	4b08      	ldr	r3, [pc, #32]	; (8011cd0 <Status_Control_Clear+0x44>)
 8011cae:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb2:	601a      	str	r2, [r3, #0]
	Last_RunCommand_Time = 0;
 8011cb4:	4b07      	ldr	r3, [pc, #28]	; (8011cd4 <Status_Control_Clear+0x48>)
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	601a      	str	r2, [r3, #0]
	AbnormaldState = DriveState_Normal;
 8011cba:	4b07      	ldr	r3, [pc, #28]	; (8011cd8 <Status_Control_Clear+0x4c>)
 8011cbc:	2203      	movs	r2, #3
 8011cbe:	701a      	strb	r2, [r3, #0]
}
 8011cc0:	bf00      	nop
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	00000000 	.word	0x00000000
 8011cc8:	20001c34 	.word	0x20001c34
 8011ccc:	20001c35 	.word	0x20001c35
 8011cd0:	2000019c 	.word	0x2000019c
 8011cd4:	20001c30 	.word	0x20001c30
 8011cd8:	20001c3d 	.word	0x20001c3d

08011cdc <Status_Control_Start>:

void Status_Control_Start(Command_Mode mode, float default_Speed)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	ed87 0a00 	vstr	s0, [r7]
 8011ce8:	71fb      	strb	r3, [r7, #7]
	StatusControl_RuningFlag = 1;
 8011cea:	4b0c      	ldr	r3, [pc, #48]	; (8011d1c <Status_Control_Start+0x40>)
 8011cec:	2201      	movs	r2, #1
 8011cee:	701a      	strb	r2, [r3, #0]
	Default_Speed = default_Speed == 0 ? Motor_Expected_Axis_Speeds[Axis_X] : default_Speed;
 8011cf0:	edd7 7a00 	vldr	s15, [r7]
 8011cf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfc:	d102      	bne.n	8011d04 <Status_Control_Start+0x28>
 8011cfe:	4b08      	ldr	r3, [pc, #32]	; (8011d20 <Status_Control_Start+0x44>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	e000      	b.n	8011d06 <Status_Control_Start+0x2a>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	4a07      	ldr	r2, [pc, #28]	; (8011d24 <Status_Control_Start+0x48>)
 8011d08:	6013      	str	r3, [r2, #0]
	Mode = mode;
 8011d0a:	4a07      	ldr	r2, [pc, #28]	; (8011d28 <Status_Control_Start+0x4c>)
 8011d0c:	79fb      	ldrb	r3, [r7, #7]
 8011d0e:	7013      	strb	r3, [r2, #0]
}
 8011d10:	bf00      	nop
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr
 8011d1c:	20001c34 	.word	0x20001c34
 8011d20:	20001c64 	.word	0x20001c64
 8011d24:	20001c38 	.word	0x20001c38
 8011d28:	20001c3e 	.word	0x20001c3e
 8011d2c:	00000000 	.word	0x00000000

08011d30 <CorrectCarDirection>:

//根据外设修正小车方向
void CorrectCarDirection(DriveState state)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b086      	sub	sp, #24
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4603      	mov	r3, r0
 8011d38:	71fb      	strb	r3, [r7, #7]
	//判断是否停止
	if (Motor_Expected_Axis_Speeds[Axis_X] == 0 && Motor_Expected_Axis_Speeds[Axis_Z] == 0)
 8011d3a:	4b4b      	ldr	r3, [pc, #300]	; (8011e68 <CorrectCarDirection+0x138>)
 8011d3c:	edd3 7a00 	vldr	s15, [r3]
 8011d40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d48:	d107      	bne.n	8011d5a <CorrectCarDirection+0x2a>
 8011d4a:	4b47      	ldr	r3, [pc, #284]	; (8011e68 <CorrectCarDirection+0x138>)
 8011d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011d50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d58:	d07e      	beq.n	8011e58 <CorrectCarDirection+0x128>
	{
		return;
	}

	//return;
	float k = StepLength + 0.005 * fabs(Motor_Expected_Axis_Speeds[Axis_X]);
 8011d5a:	4b43      	ldr	r3, [pc, #268]	; (8011e68 <CorrectCarDirection+0x138>)
 8011d5c:	edd3 7a00 	vldr	s15, [r3]
 8011d60:	eef0 7ae7 	vabs.f32	s15, s15
 8011d64:	ee17 0a90 	vmov	r0, s15
 8011d68:	f7ee fbee 	bl	8000548 <__aeabi_f2d>
 8011d6c:	a33c      	add	r3, pc, #240	; (adr r3, 8011e60 <CorrectCarDirection+0x130>)
 8011d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d72:	f7ee fc41 	bl	80005f8 <__aeabi_dmul>
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	f04f 0200 	mov.w	r2, #0
 8011d82:	4b3a      	ldr	r3, [pc, #232]	; (8011e6c <CorrectCarDirection+0x13c>)
 8011d84:	f7ee fa82 	bl	800028c <__adddf3>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	4610      	mov	r0, r2
 8011d8e:	4619      	mov	r1, r3
 8011d90:	f7ee ff2a 	bl	8000be8 <__aeabi_d2f>
 8011d94:	4603      	mov	r3, r0
 8011d96:	613b      	str	r3, [r7, #16]

	//向另一方向转弯时清空转弯角
	float x = 0.0;
 8011d98:	f04f 0300 	mov.w	r3, #0
 8011d9c:	60fb      	str	r3, [r7, #12]
	float y = 0.0;
 8011d9e:	f04f 0300 	mov.w	r3, #0
 8011da2:	60bb      	str	r3, [r7, #8]
	float z = 0.0;
 8011da4:	f04f 0300 	mov.w	r3, #0
 8011da8:	617b      	str	r3, [r7, #20]

	switch (state)
 8011daa:	79fb      	ldrb	r3, [r7, #7]
 8011dac:	3b01      	subs	r3, #1
 8011dae:	2b04      	cmp	r3, #4
 8011db0:	d82a      	bhi.n	8011e08 <CorrectCarDirection+0xd8>
 8011db2:	a201      	add	r2, pc, #4	; (adr r2, 8011db8 <CorrectCarDirection+0x88>)
 8011db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db8:	08011dcd 	.word	0x08011dcd
 8011dbc:	08011ddb 	.word	0x08011ddb
 8011dc0:	08011e01 	.word	0x08011e01
 8011dc4:	08011de1 	.word	0x08011de1
 8011dc8:	08011df3 	.word	0x08011df3
	{
		case DriveState_Left:
			z = -k;
 8011dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8011dd0:	eef1 7a67 	vneg.f32	s15, s15
 8011dd4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8011dd8:	e017      	b.n	8011e0a <CorrectCarDirection+0xda>
		case DriveState_Right:
			z = k;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	617b      	str	r3, [r7, #20]
			break;
 8011dde:	e014      	b.n	8011e0a <CorrectCarDirection+0xda>
		case DriveState_Sharp_Left:
			z = -k * 2;
 8011de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8011de4:	eef1 7a67 	vneg.f32	s15, s15
 8011de8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011dec:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8011df0:	e00b      	b.n	8011e0a <CorrectCarDirection+0xda>
		case DriveState_Sharp_Right:
			z = k * 2;
 8011df2:	edd7 7a04 	vldr	s15, [r7, #16]
 8011df6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011dfa:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8011dfe:	e004      	b.n	8011e0a <CorrectCarDirection+0xda>
		case DriveState_Normal:
			Motor_Expected_Axis_Speeds[Axis_Z] = 0;
 8011e00:	4b19      	ldr	r3, [pc, #100]	; (8011e68 <CorrectCarDirection+0x138>)
 8011e02:	f04f 0200 	mov.w	r2, #0
 8011e06:	609a      	str	r2, [r3, #8]
		default:
			break;
 8011e08:	bf00      	nop
	}

	if (Motor_Expected_Axis_Speeds[Axis_X] < 0)
 8011e0a:	4b17      	ldr	r3, [pc, #92]	; (8011e68 <CorrectCarDirection+0x138>)
 8011e0c:	edd3 7a00 	vldr	s15, [r3]
 8011e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e18:	d505      	bpl.n	8011e26 <CorrectCarDirection+0xf6>
	{
		z = -z;
 8011e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e1e:	eef1 7a67 	vneg.f32	s15, s15
 8011e22:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (Motor_Expected_Axis_Speeds[Axis_Z] * z < 0)
 8011e26:	4b10      	ldr	r3, [pc, #64]	; (8011e68 <CorrectCarDirection+0x138>)
 8011e28:	ed93 7a02 	vldr	s14, [r3, #8]
 8011e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3c:	d503      	bpl.n	8011e46 <CorrectCarDirection+0x116>
	{
		Motor_Expected_Axis_Speeds[Axis_Z] = 0;
 8011e3e:	4b0a      	ldr	r3, [pc, #40]	; (8011e68 <CorrectCarDirection+0x138>)
 8011e40:	f04f 0200 	mov.w	r2, #0
 8011e44:	609a      	str	r2, [r3, #8]
	}

	AddCarSpeed(x, y, z);
 8011e46:	ed97 1a05 	vldr	s2, [r7, #20]
 8011e4a:	edd7 0a02 	vldr	s1, [r7, #8]
 8011e4e:	ed97 0a03 	vldr	s0, [r7, #12]
 8011e52:	f000 fe5d 	bl	8012b10 <AddCarSpeed>
 8011e56:	e000      	b.n	8011e5a <CorrectCarDirection+0x12a>
		return;
 8011e58:	bf00      	nop
}
 8011e5a:	3718      	adds	r7, #24
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	47ae147b 	.word	0x47ae147b
 8011e64:	3f747ae1 	.word	0x3f747ae1
 8011e68:	20001c64 	.word	0x20001c64
 8011e6c:	3fd00000 	.word	0x3fd00000

08011e70 <UpdateCommand>:

void UpdateCommand()
{
 8011e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011e74:	b082      	sub	sp, #8
 8011e76:	af00      	add	r7, sp, #0
	//判断是否正在运行
	if (StatusControl_RuningFlag == 0)
 8011e78:	4ba2      	ldr	r3, [pc, #648]	; (8012104 <UpdateCommand+0x294>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f000 8137 	beq.w	80120f0 <UpdateCommand+0x280>
	{
		return;
	}

	//判断是否在上个指令的持续时间
	if (Command_Index >= 0 && Commands[Command_Index].RunCommand_Time > 0 && uwTick - Last_RunCommand_Time < Commands[Command_Index].Duration)
 8011e82:	4ba1      	ldr	r3, [pc, #644]	; (8012108 <UpdateCommand+0x298>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	db20      	blt.n	8011ecc <UpdateCommand+0x5c>
 8011e8a:	4b9f      	ldr	r3, [pc, #636]	; (8012108 <UpdateCommand+0x298>)
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	499f      	ldr	r1, [pc, #636]	; (801210c <UpdateCommand+0x29c>)
 8011e90:	4613      	mov	r3, r2
 8011e92:	005b      	lsls	r3, r3, #1
 8011e94:	4413      	add	r3, r2
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	440b      	add	r3, r1
 8011e9a:	3308      	adds	r3, #8
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d014      	beq.n	8011ecc <UpdateCommand+0x5c>
 8011ea2:	4b9b      	ldr	r3, [pc, #620]	; (8012110 <UpdateCommand+0x2a0>)
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	4b9b      	ldr	r3, [pc, #620]	; (8012114 <UpdateCommand+0x2a4>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	1ad1      	subs	r1, r2, r3
 8011eac:	4b96      	ldr	r3, [pc, #600]	; (8012108 <UpdateCommand+0x298>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	4896      	ldr	r0, [pc, #600]	; (801210c <UpdateCommand+0x29c>)
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	005b      	lsls	r3, r3, #1
 8011eb6:	4413      	add	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	4403      	add	r3, r0
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4299      	cmp	r1, r3
 8011ec2:	d203      	bcs.n	8011ecc <UpdateCommand+0x5c>
	{
		Command_Duration_Flag = 1;
 8011ec4:	4b94      	ldr	r3, [pc, #592]	; (8012118 <UpdateCommand+0x2a8>)
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	701a      	strb	r2, [r3, #0]
		return;
 8011eca:	e116      	b.n	80120fa <UpdateCommand+0x28a>
	}

	//是否第一次结束指令持续作用
	if (Command_Duration_Flag == 1)
 8011ecc:	4b92      	ldr	r3, [pc, #584]	; (8012118 <UpdateCommand+0x2a8>)
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d11a      	bne.n	8011f0a <UpdateCommand+0x9a>
	{

		switch (Commands[Command_Index].Type)
		{
			default:
				if (RealState == DriveState_Normal)
 8011ed4:	4b91      	ldr	r3, [pc, #580]	; (801211c <UpdateCommand+0x2ac>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d112      	bne.n	8011f02 <UpdateCommand+0x92>
				{
					SetCarSpeed(Default_Speed, 0, 0);
 8011edc:	4b90      	ldr	r3, [pc, #576]	; (8012120 <UpdateCommand+0x2b0>)
 8011ede:	edd3 7a00 	vldr	s15, [r3]
 8011ee2:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8012124 <UpdateCommand+0x2b4>
 8011ee6:	eddf 0a8f 	vldr	s1, [pc, #572]	; 8012124 <UpdateCommand+0x2b4>
 8011eea:	eeb0 0a67 	vmov.f32	s0, s15
 8011eee:	f000 fe3f 	bl	8012b70 <SetCarSpeed>
					Command_Duration_Flag = 1;
					//放弃这一回合
					return;

				}
				break;
 8011ef2:	bf00      	nop
		}

		Command_Duration_Flag = 0;
 8011ef4:	4b88      	ldr	r3, [pc, #544]	; (8012118 <UpdateCommand+0x2a8>)
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	701a      	strb	r2, [r3, #0]

		AbnormaldState = DriveState_Normal;
 8011efa:	4b8b      	ldr	r3, [pc, #556]	; (8012128 <UpdateCommand+0x2b8>)
 8011efc:	2203      	movs	r2, #3
 8011efe:	701a      	strb	r2, [r3, #0]
 8011f00:	e003      	b.n	8011f0a <UpdateCommand+0x9a>
					Command_Duration_Flag = 1;
 8011f02:	4b85      	ldr	r3, [pc, #532]	; (8012118 <UpdateCommand+0x2a8>)
 8011f04:	2201      	movs	r2, #1
 8011f06:	701a      	strb	r2, [r3, #0]
					return;
 8011f08:	e0f7      	b.n	80120fa <UpdateCommand+0x28a>

	}

	//判断是否在冷却时间
	if (uwTick - Last_RunCommand_Time < Command_CooldownTime * (100.0 - Motor_Expected_Axis_Speeds[Axis_X]) + (Command_Index >= 0 ? Commands[Command_Index].Duration : 0))
 8011f0a:	4b81      	ldr	r3, [pc, #516]	; (8012110 <UpdateCommand+0x2a0>)
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	4b81      	ldr	r3, [pc, #516]	; (8012114 <UpdateCommand+0x2a4>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	1ad3      	subs	r3, r2, r3
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ee faf5 	bl	8000504 <__aeabi_ui2d>
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	460d      	mov	r5, r1
 8011f1e:	4b83      	ldr	r3, [pc, #524]	; (801212c <UpdateCommand+0x2bc>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7ee fb10 	bl	8000548 <__aeabi_f2d>
 8011f28:	4602      	mov	r2, r0
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	f04f 0000 	mov.w	r0, #0
 8011f30:	497f      	ldr	r1, [pc, #508]	; (8012130 <UpdateCommand+0x2c0>)
 8011f32:	f7ee f9a9 	bl	8000288 <__aeabi_dsub>
 8011f36:	4602      	mov	r2, r0
 8011f38:	460b      	mov	r3, r1
 8011f3a:	4610      	mov	r0, r2
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	f04f 0200 	mov.w	r2, #0
 8011f42:	4b7c      	ldr	r3, [pc, #496]	; (8012134 <UpdateCommand+0x2c4>)
 8011f44:	f7ee fb58 	bl	80005f8 <__aeabi_dmul>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	4690      	mov	r8, r2
 8011f4e:	4699      	mov	r9, r3
 8011f50:	4b6d      	ldr	r3, [pc, #436]	; (8012108 <UpdateCommand+0x298>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	db0d      	blt.n	8011f74 <UpdateCommand+0x104>
 8011f58:	4b6b      	ldr	r3, [pc, #428]	; (8012108 <UpdateCommand+0x298>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	496b      	ldr	r1, [pc, #428]	; (801210c <UpdateCommand+0x29c>)
 8011f5e:	4613      	mov	r3, r2
 8011f60:	005b      	lsls	r3, r3, #1
 8011f62:	4413      	add	r3, r2
 8011f64:	009b      	lsls	r3, r3, #2
 8011f66:	440b      	add	r3, r1
 8011f68:	3304      	adds	r3, #4
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ee fac9 	bl	8000504 <__aeabi_ui2d>
 8011f72:	e003      	b.n	8011f7c <UpdateCommand+0x10c>
 8011f74:	f04f 0000 	mov.w	r0, #0
 8011f78:	f04f 0100 	mov.w	r1, #0
 8011f7c:	4642      	mov	r2, r8
 8011f7e:	464b      	mov	r3, r9
 8011f80:	f7ee f984 	bl	800028c <__adddf3>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f7ee fda6 	bl	8000adc <__aeabi_dcmplt>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f040 80ae 	bne.w	80120f4 <UpdateCommand+0x284>
	{
		return;
	}

	//判断是否到达下一指令触发条件
	if (DriveState_Intersection != RealState && DriveState_Turn_Left != RealState && DriveState_Turn_Right != RealState)
 8011f98:	4b60      	ldr	r3, [pc, #384]	; (801211c <UpdateCommand+0x2ac>)
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d01f      	beq.n	8011fe0 <UpdateCommand+0x170>
 8011fa0:	4b5e      	ldr	r3, [pc, #376]	; (801211c <UpdateCommand+0x2ac>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	2b07      	cmp	r3, #7
 8011fa6:	d01b      	beq.n	8011fe0 <UpdateCommand+0x170>
 8011fa8:	4b5c      	ldr	r3, [pc, #368]	; (801211c <UpdateCommand+0x2ac>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b08      	cmp	r3, #8
 8011fae:	d017      	beq.n	8011fe0 <UpdateCommand+0x170>
	{
		if (Motor_Expected_Axis_Speeds[Axis_X] == 0 && Motor_Expected_Axis_Speeds[Axis_Z] == 0 && Command_Index == -1)
 8011fb0:	4b5e      	ldr	r3, [pc, #376]	; (801212c <UpdateCommand+0x2bc>)
 8011fb2:	edd3 7a00 	vldr	s15, [r3]
 8011fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbe:	f040 809b 	bne.w	80120f8 <UpdateCommand+0x288>
 8011fc2:	4b5a      	ldr	r3, [pc, #360]	; (801212c <UpdateCommand+0x2bc>)
 8011fc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8011fc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd0:	f040 8092 	bne.w	80120f8 <UpdateCommand+0x288>
 8011fd4:	4b4c      	ldr	r3, [pc, #304]	; (8012108 <UpdateCommand+0x298>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fdc:	f040 808c 	bne.w	80120f8 <UpdateCommand+0x288>
			return;
		}

	}

	int index = Command_Index + 1;
 8011fe0:	4b49      	ldr	r3, [pc, #292]	; (8012108 <UpdateCommand+0x298>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	607b      	str	r3, [r7, #4]
	if (index > Command_Number - 1)
 8011fe8:	4b53      	ldr	r3, [pc, #332]	; (8012138 <UpdateCommand+0x2c8>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	db08      	blt.n	8012006 <UpdateCommand+0x196>
	{
		//是否为循环模式
		if (Mode == Command_Mode_OneTime)
 8011ff4:	4b51      	ldr	r3, [pc, #324]	; (801213c <UpdateCommand+0x2cc>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d102      	bne.n	8012002 <UpdateCommand+0x192>
		{
			Status_Control_Clear();
 8011ffc:	f7ff fe46 	bl	8011c8c <Status_Control_Clear>
			return;
 8012000:	e07b      	b.n	80120fa <UpdateCommand+0x28a>
		}
		else
		{
			index = 0;
 8012002:	2300      	movs	r3, #0
 8012004:	607b      	str	r3, [r7, #4]
		}
	}

	Command_Index = index;
 8012006:	4a40      	ldr	r2, [pc, #256]	; (8012108 <UpdateCommand+0x298>)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6013      	str	r3, [r2, #0]

	//执行触发后操作
	switch (Commands[Command_Index].Type)
 801200c:	4b3e      	ldr	r3, [pc, #248]	; (8012108 <UpdateCommand+0x298>)
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	493e      	ldr	r1, [pc, #248]	; (801210c <UpdateCommand+0x29c>)
 8012012:	4613      	mov	r3, r2
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	4413      	add	r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	440b      	add	r3, r1
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	2b04      	cmp	r3, #4
 8012020:	d855      	bhi.n	80120ce <UpdateCommand+0x25e>
 8012022:	a201      	add	r2, pc, #4	; (adr r2, 8012028 <UpdateCommand+0x1b8>)
 8012024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012028:	0801203d 	.word	0x0801203d
 801202c:	08012055 	.word	0x08012055
 8012030:	08012081 	.word	0x08012081
 8012034:	080120cf 	.word	0x080120cf
 8012038:	080120b1 	.word	0x080120b1
	{
		case Command_Forward:
			SetCarSpeed(Default_Speed, 0, 0);
 801203c:	4b38      	ldr	r3, [pc, #224]	; (8012120 <UpdateCommand+0x2b0>)
 801203e:	edd3 7a00 	vldr	s15, [r3]
 8012042:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8012124 <UpdateCommand+0x2b4>
 8012046:	eddf 0a37 	vldr	s1, [pc, #220]	; 8012124 <UpdateCommand+0x2b4>
 801204a:	eeb0 0a67 	vmov.f32	s0, s15
 801204e:	f000 fd8f 	bl	8012b70 <SetCarSpeed>
			break;
 8012052:	e03c      	b.n	80120ce <UpdateCommand+0x25e>
		case Command_Left:
			SetCarSpeed(Default_Speed * 0.5, 0, Default_Speed);
 8012054:	4b32      	ldr	r3, [pc, #200]	; (8012120 <UpdateCommand+0x2b0>)
 8012056:	edd3 7a00 	vldr	s15, [r3]
 801205a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801205e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012062:	4b2f      	ldr	r3, [pc, #188]	; (8012120 <UpdateCommand+0x2b0>)
 8012064:	ed93 7a00 	vldr	s14, [r3]
 8012068:	eeb0 1a47 	vmov.f32	s2, s14
 801206c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8012124 <UpdateCommand+0x2b4>
 8012070:	eeb0 0a67 	vmov.f32	s0, s15
 8012074:	f000 fd7c 	bl	8012b70 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Right;
 8012078:	4b2b      	ldr	r3, [pc, #172]	; (8012128 <UpdateCommand+0x2b8>)
 801207a:	2205      	movs	r2, #5
 801207c:	701a      	strb	r2, [r3, #0]
			break;
 801207e:	e026      	b.n	80120ce <UpdateCommand+0x25e>
		case Command_Right:
			SetCarSpeed(Default_Speed * 0.5, 0, -Default_Speed);
 8012080:	4b27      	ldr	r3, [pc, #156]	; (8012120 <UpdateCommand+0x2b0>)
 8012082:	edd3 7a00 	vldr	s15, [r3]
 8012086:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801208a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801208e:	4b24      	ldr	r3, [pc, #144]	; (8012120 <UpdateCommand+0x2b0>)
 8012090:	edd3 7a00 	vldr	s15, [r3]
 8012094:	eef1 7a67 	vneg.f32	s15, s15
 8012098:	eeb0 1a67 	vmov.f32	s2, s15
 801209c:	eddf 0a21 	vldr	s1, [pc, #132]	; 8012124 <UpdateCommand+0x2b4>
 80120a0:	eeb0 0a47 	vmov.f32	s0, s14
 80120a4:	f000 fd64 	bl	8012b70 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Left;
 80120a8:	4b1f      	ldr	r3, [pc, #124]	; (8012128 <UpdateCommand+0x2b8>)
 80120aa:	2204      	movs	r2, #4
 80120ac:	701a      	strb	r2, [r3, #0]
			break;
 80120ae:	e00e      	b.n	80120ce <UpdateCommand+0x25e>
		case Command_Rotation:
			SetCarSpeed(0, 0, Default_Speed);
 80120b0:	4b1b      	ldr	r3, [pc, #108]	; (8012120 <UpdateCommand+0x2b0>)
 80120b2:	edd3 7a00 	vldr	s15, [r3]
 80120b6:	eeb0 1a67 	vmov.f32	s2, s15
 80120ba:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8012124 <UpdateCommand+0x2b4>
 80120be:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012124 <UpdateCommand+0x2b4>
 80120c2:	f000 fd55 	bl	8012b70 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Right;
 80120c6:	4b18      	ldr	r3, [pc, #96]	; (8012128 <UpdateCommand+0x2b8>)
 80120c8:	2205      	movs	r2, #5
 80120ca:	701a      	strb	r2, [r3, #0]
			break;
 80120cc:	bf00      	nop

			break;
	}

	//更新执行时间
	Commands[Command_Index].RunCommand_Time = Last_RunCommand_Time = uwTick;
 80120ce:	4b10      	ldr	r3, [pc, #64]	; (8012110 <UpdateCommand+0x2a0>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4a10      	ldr	r2, [pc, #64]	; (8012114 <UpdateCommand+0x2a4>)
 80120d4:	6013      	str	r3, [r2, #0]
 80120d6:	4b0c      	ldr	r3, [pc, #48]	; (8012108 <UpdateCommand+0x298>)
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	4b0e      	ldr	r3, [pc, #56]	; (8012114 <UpdateCommand+0x2a4>)
 80120dc:	6819      	ldr	r1, [r3, #0]
 80120de:	480b      	ldr	r0, [pc, #44]	; (801210c <UpdateCommand+0x29c>)
 80120e0:	4613      	mov	r3, r2
 80120e2:	005b      	lsls	r3, r3, #1
 80120e4:	4413      	add	r3, r2
 80120e6:	009b      	lsls	r3, r3, #2
 80120e8:	4403      	add	r3, r0
 80120ea:	3308      	adds	r3, #8
 80120ec:	6019      	str	r1, [r3, #0]
 80120ee:	e004      	b.n	80120fa <UpdateCommand+0x28a>
		return;
 80120f0:	bf00      	nop
 80120f2:	e002      	b.n	80120fa <UpdateCommand+0x28a>
		return;
 80120f4:	bf00      	nop
 80120f6:	e000      	b.n	80120fa <UpdateCommand+0x28a>
			return;
 80120f8:	bf00      	nop
}
 80120fa:	3708      	adds	r7, #8
 80120fc:	46bd      	mov	sp, r7
 80120fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012102:	bf00      	nop
 8012104:	20001c34 	.word	0x20001c34
 8012108:	2000019c 	.word	0x2000019c
 801210c:	200000ac 	.word	0x200000ac
 8012110:	20001294 	.word	0x20001294
 8012114:	20001c30 	.word	0x20001c30
 8012118:	20001c35 	.word	0x20001c35
 801211c:	20001c3c 	.word	0x20001c3c
 8012120:	20001c38 	.word	0x20001c38
 8012124:	00000000 	.word	0x00000000
 8012128:	20001c3d 	.word	0x20001c3d
 801212c:	20001c64 	.word	0x20001c64
 8012130:	40590000 	.word	0x40590000
 8012134:	40260000 	.word	0x40260000
 8012138:	200000a9 	.word	0x200000a9
 801213c:	20001c3e 	.word	0x20001c3e

08012140 <ApplyCommand>:

void ApplyCommand()
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
	DriveState state = RealState;
 8012146:	4b09      	ldr	r3, [pc, #36]	; (801216c <ApplyCommand+0x2c>)
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	71fb      	strb	r3, [r7, #7]
	//if (RealState != DriveState_Left && RealState != DriveState_Right && RealState != DriveState_Sharp_Left && RealState != DriveState_Sharp_Right && RealState != DriveState_Normal)
	if (AbnormaldState != DriveState_Normal)
 801214c:	4b08      	ldr	r3, [pc, #32]	; (8012170 <ApplyCommand+0x30>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	2b03      	cmp	r3, #3
 8012152:	d001      	beq.n	8012158 <ApplyCommand+0x18>
	{
		state = DriveState_Derailment;
 8012154:	2306      	movs	r3, #6
 8012156:	71fb      	strb	r3, [r7, #7]
	}

	//修正实际偏差
	CorrectCarDirection(state);
 8012158:	79fb      	ldrb	r3, [r7, #7]
 801215a:	4618      	mov	r0, r3
 801215c:	f7ff fde8 	bl	8011d30 <CorrectCarDirection>
	//将理论值应用到小车
	Periodic_UpdateAndSet_Car_ExpectedSpeed();
 8012160:	f000 fb80 	bl	8012864 <Periodic_UpdateAndSet_Car_ExpectedSpeed>
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	20001c3c 	.word	0x20001c3c
 8012170:	20001c3d 	.word	0x20001c3d

08012174 <Periodic_Status_Control>:

//周期性调用 控制小车运行
void Periodic_Status_Control()
{
 8012174:	b580      	push	{r7, lr}
 8012176:	af00      	add	r7, sp, #0
	//获取当前红外状态
	RealState = GetDriveState();
 8012178:	f000 fb00 	bl	801277c <GetDriveState>
 801217c:	4603      	mov	r3, r0
 801217e:	461a      	mov	r2, r3
 8012180:	4b03      	ldr	r3, [pc, #12]	; (8012190 <Periodic_Status_Control+0x1c>)
 8012182:	701a      	strb	r2, [r3, #0]
	//根据辅助传感器更新异常状态指令
	UpdateCommand();
 8012184:	f7ff fe74 	bl	8011e70 <UpdateCommand>
	//应用指令到实际运行
	ApplyCommand();
 8012188:	f7ff ffda 	bl	8012140 <ApplyCommand>
}
 801218c:	bf00      	nop
 801218e:	bd80      	pop	{r7, pc}
 8012190:	20001c3c 	.word	0x20001c3c
 8012194:	00000000 	.word	0x00000000

08012198 <GetBatteryLevel>:
uint8_t ID[4];          //设备ID缓存数组
uint32_t i;

//获取电量
float GetBatteryLevel()
{
 8012198:	b580      	push	{r7, lr}
 801219a:	af00      	add	r7, sp, #0
	return Get_ADCChannelValue(&hadc1, ADC_CHANNEL_4) * 3.3 * 11 / 4096;
 801219c:	2104      	movs	r1, #4
 801219e:	4818      	ldr	r0, [pc, #96]	; (8012200 <GetBatteryLevel+0x68>)
 80121a0:	f7fa ff52 	bl	800d048 <Get_ADCChannelValue>
 80121a4:	4603      	mov	r3, r0
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7ee f9bc 	bl	8000524 <__aeabi_i2d>
 80121ac:	a312      	add	r3, pc, #72	; (adr r3, 80121f8 <GetBatteryLevel+0x60>)
 80121ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b2:	f7ee fa21 	bl	80005f8 <__aeabi_dmul>
 80121b6:	4602      	mov	r2, r0
 80121b8:	460b      	mov	r3, r1
 80121ba:	4610      	mov	r0, r2
 80121bc:	4619      	mov	r1, r3
 80121be:	f04f 0200 	mov.w	r2, #0
 80121c2:	4b10      	ldr	r3, [pc, #64]	; (8012204 <GetBatteryLevel+0x6c>)
 80121c4:	f7ee fa18 	bl	80005f8 <__aeabi_dmul>
 80121c8:	4602      	mov	r2, r0
 80121ca:	460b      	mov	r3, r1
 80121cc:	4610      	mov	r0, r2
 80121ce:	4619      	mov	r1, r3
 80121d0:	f04f 0200 	mov.w	r2, #0
 80121d4:	4b0c      	ldr	r3, [pc, #48]	; (8012208 <GetBatteryLevel+0x70>)
 80121d6:	f7ee fb39 	bl	800084c <__aeabi_ddiv>
 80121da:	4602      	mov	r2, r0
 80121dc:	460b      	mov	r3, r1
 80121de:	4610      	mov	r0, r2
 80121e0:	4619      	mov	r1, r3
 80121e2:	f7ee fd01 	bl	8000be8 <__aeabi_d2f>
 80121e6:	4603      	mov	r3, r0
 80121e8:	ee07 3a90 	vmov	s15, r3
}
 80121ec:	eeb0 0a67 	vmov.f32	s0, s15
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	f3af 8000 	nop.w
 80121f8:	66666666 	.word	0x66666666
 80121fc:	400a6666 	.word	0x400a6666
 8012200:	20000420 	.word	0x20000420
 8012204:	40260000 	.word	0x40260000
 8012208:	40b00000 	.word	0x40b00000
 801220c:	00000000 	.word	0x00000000

08012210 <GetInternalTemperature>:

//获取内部温度
float GetInternalTemperature()
{
 8012210:	b580      	push	{r7, lr}
 8012212:	af00      	add	r7, sp, #0
	return ((Get_ADCChannelValue(&hadc1, ADC_CHANNEL_TEMPSENSOR) * 3.3 / 4096) - 0.76) / 0.0025 + 25;
 8012214:	2110      	movs	r1, #16
 8012216:	4824      	ldr	r0, [pc, #144]	; (80122a8 <GetInternalTemperature+0x98>)
 8012218:	f7fa ff16 	bl	800d048 <Get_ADCChannelValue>
 801221c:	4603      	mov	r3, r0
 801221e:	4618      	mov	r0, r3
 8012220:	f7ee f980 	bl	8000524 <__aeabi_i2d>
 8012224:	a31a      	add	r3, pc, #104	; (adr r3, 8012290 <GetInternalTemperature+0x80>)
 8012226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222a:	f7ee f9e5 	bl	80005f8 <__aeabi_dmul>
 801222e:	4602      	mov	r2, r0
 8012230:	460b      	mov	r3, r1
 8012232:	4610      	mov	r0, r2
 8012234:	4619      	mov	r1, r3
 8012236:	f04f 0200 	mov.w	r2, #0
 801223a:	4b1c      	ldr	r3, [pc, #112]	; (80122ac <GetInternalTemperature+0x9c>)
 801223c:	f7ee fb06 	bl	800084c <__aeabi_ddiv>
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	4610      	mov	r0, r2
 8012246:	4619      	mov	r1, r3
 8012248:	a313      	add	r3, pc, #76	; (adr r3, 8012298 <GetInternalTemperature+0x88>)
 801224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224e:	f7ee f81b 	bl	8000288 <__aeabi_dsub>
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	4610      	mov	r0, r2
 8012258:	4619      	mov	r1, r3
 801225a:	a311      	add	r3, pc, #68	; (adr r3, 80122a0 <GetInternalTemperature+0x90>)
 801225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012260:	f7ee faf4 	bl	800084c <__aeabi_ddiv>
 8012264:	4602      	mov	r2, r0
 8012266:	460b      	mov	r3, r1
 8012268:	4610      	mov	r0, r2
 801226a:	4619      	mov	r1, r3
 801226c:	f04f 0200 	mov.w	r2, #0
 8012270:	4b0f      	ldr	r3, [pc, #60]	; (80122b0 <GetInternalTemperature+0xa0>)
 8012272:	f7ee f80b 	bl	800028c <__adddf3>
 8012276:	4602      	mov	r2, r0
 8012278:	460b      	mov	r3, r1
 801227a:	4610      	mov	r0, r2
 801227c:	4619      	mov	r1, r3
 801227e:	f7ee fcb3 	bl	8000be8 <__aeabi_d2f>
 8012282:	4603      	mov	r3, r0
 8012284:	ee07 3a90 	vmov	s15, r3
}
 8012288:	eeb0 0a67 	vmov.f32	s0, s15
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	66666666 	.word	0x66666666
 8012294:	400a6666 	.word	0x400a6666
 8012298:	851eb852 	.word	0x851eb852
 801229c:	3fe851eb 	.word	0x3fe851eb
 80122a0:	47ae147b 	.word	0x47ae147b
 80122a4:	3f647ae1 	.word	0x3f647ae1
 80122a8:	20000420 	.word	0x20000420
 80122ac:	40b00000 	.word	0x40b00000
 80122b0:	40390000 	.word	0x40390000

080122b4 <EnableAllMotorEncoders>:

TIM_HandleTypeDef *Motor_Encoders[4] = { &htim1, &htim8, &htim5, &htim4 };

//开启全部编码器
void EnableAllMotorEncoders()
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
	for (int var = 0; var < Motor_Number; ++var)
 80122ba:	2300      	movs	r3, #0
 80122bc:	607b      	str	r3, [r7, #4]
 80122be:	e00a      	b.n	80122d6 <EnableAllMotorEncoders+0x22>
	{
		HAL_TIM_Encoder_Start(Motor_Encoders[var], TIM_CHANNEL_ALL);
 80122c0:	4a09      	ldr	r2, [pc, #36]	; (80122e8 <EnableAllMotorEncoders+0x34>)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122c8:	213c      	movs	r1, #60	; 0x3c
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7f6 f92c 	bl	8008528 <HAL_TIM_Encoder_Start>
	for (int var = 0; var < Motor_Number; ++var)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	3301      	adds	r3, #1
 80122d4:	607b      	str	r3, [r7, #4]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2b03      	cmp	r3, #3
 80122da:	ddf1      	ble.n	80122c0 <EnableAllMotorEncoders+0xc>
	}
}
 80122dc:	bf00      	nop
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	200001b0 	.word	0x200001b0

080122ec <UpdateAllMotorSpeed>:

//

void UpdateAllMotorSpeed()
{
 80122ec:	b5b0      	push	{r4, r5, r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
	short speed_count;
	float speed_duty;

	for (int var = 0; var < Motor_Number; ++var)
 80122f2:	2300      	movs	r3, #0
 80122f4:	60fb      	str	r3, [r7, #12]
 80122f6:	e03a      	b.n	801236e <UpdateAllMotorSpeed+0x82>
	{
		speed_count = (short) __HAL_TIM_GET_COUNTER(Motor_Encoders[var]);
 80122f8:	4a21      	ldr	r2, [pc, #132]	; (8012380 <UpdateAllMotorSpeed+0x94>)
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012304:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_COUNTER(Motor_Encoders[var], 0);
 8012306:	4a1e      	ldr	r2, [pc, #120]	; (8012380 <UpdateAllMotorSpeed+0x94>)
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2200      	movs	r2, #0
 8012312:	625a      	str	r2, [r3, #36]	; 0x24

		//计算速度
		speed_duty = speed_count * 100.0 / Motor_Encoder_Max_Counts[var];
 8012314:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012318:	4618      	mov	r0, r3
 801231a:	f7ee f903 	bl	8000524 <__aeabi_i2d>
 801231e:	f04f 0200 	mov.w	r2, #0
 8012322:	4b18      	ldr	r3, [pc, #96]	; (8012384 <UpdateAllMotorSpeed+0x98>)
 8012324:	f7ee f968 	bl	80005f8 <__aeabi_dmul>
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	4614      	mov	r4, r2
 801232e:	461d      	mov	r5, r3
 8012330:	4a15      	ldr	r2, [pc, #84]	; (8012388 <UpdateAllMotorSpeed+0x9c>)
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	4413      	add	r3, r2
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	4618      	mov	r0, r3
 801233c:	f7ee f904 	bl	8000548 <__aeabi_f2d>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4620      	mov	r0, r4
 8012346:	4629      	mov	r1, r5
 8012348:	f7ee fa80 	bl	800084c <__aeabi_ddiv>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4610      	mov	r0, r2
 8012352:	4619      	mov	r1, r3
 8012354:	f7ee fc48 	bl	8000be8 <__aeabi_d2f>
 8012358:	4603      	mov	r3, r0
 801235a:	607b      	str	r3, [r7, #4]
		Motor_Actual_Speeds[var] = speed_duty;
 801235c:	4a0b      	ldr	r2, [pc, #44]	; (801238c <UpdateAllMotorSpeed+0xa0>)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	4413      	add	r3, r2
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	601a      	str	r2, [r3, #0]
	for (int var = 0; var < Motor_Number; ++var)
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	3301      	adds	r3, #1
 801236c:	60fb      	str	r3, [r7, #12]
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2b03      	cmp	r3, #3
 8012372:	ddc1      	ble.n	80122f8 <UpdateAllMotorSpeed+0xc>
	}

}
 8012374:	bf00      	nop
 8012376:	bf00      	nop
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bdb0      	pop	{r4, r5, r7, pc}
 801237e:	bf00      	nop
 8012380:	200001b0 	.word	0x200001b0
 8012384:	40590000 	.word	0x40590000
 8012388:	200001a0 	.word	0x200001a0
 801238c:	20001c40 	.word	0x20001c40

08012390 <Set_TB6612_State>:
//电机状态缓存
Motor_State Motor_States[] = { Motor_Stop, Motor_Stop, Motor_Stop, Motor_Stop };

//设置驱动板状态
void Set_TB6612_State()
{
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
	if (Motor_States[0] != Motor_Stop || Motor_States[1] != Motor_Stop)
 8012394:	4b14      	ldr	r3, [pc, #80]	; (80123e8 <Set_TB6612_State+0x58>)
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b02      	cmp	r3, #2
 801239a:	d103      	bne.n	80123a4 <Set_TB6612_State+0x14>
 801239c:	4b12      	ldr	r3, [pc, #72]	; (80123e8 <Set_TB6612_State+0x58>)
 801239e:	785b      	ldrb	r3, [r3, #1]
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d005      	beq.n	80123b0 <Set_TB6612_State+0x20>
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_SET);
 80123a4:	2201      	movs	r2, #1
 80123a6:	2104      	movs	r1, #4
 80123a8:	4810      	ldr	r0, [pc, #64]	; (80123ec <Set_TB6612_State+0x5c>)
 80123aa:	f7f2 f9dd 	bl	8004768 <HAL_GPIO_WritePin>
 80123ae:	e004      	b.n	80123ba <Set_TB6612_State+0x2a>
	}
	else
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_RESET);
 80123b0:	2200      	movs	r2, #0
 80123b2:	2104      	movs	r1, #4
 80123b4:	480d      	ldr	r0, [pc, #52]	; (80123ec <Set_TB6612_State+0x5c>)
 80123b6:	f7f2 f9d7 	bl	8004768 <HAL_GPIO_WritePin>
	}

	if (Motor_States[2] != Motor_Stop || Motor_States[3] != Motor_Stop)
 80123ba:	4b0b      	ldr	r3, [pc, #44]	; (80123e8 <Set_TB6612_State+0x58>)
 80123bc:	789b      	ldrb	r3, [r3, #2]
 80123be:	2b02      	cmp	r3, #2
 80123c0:	d103      	bne.n	80123ca <Set_TB6612_State+0x3a>
 80123c2:	4b09      	ldr	r3, [pc, #36]	; (80123e8 <Set_TB6612_State+0x58>)
 80123c4:	78db      	ldrb	r3, [r3, #3]
 80123c6:	2b02      	cmp	r3, #2
 80123c8:	d005      	beq.n	80123d6 <Set_TB6612_State+0x46>
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_SET);
 80123ca:	2201      	movs	r2, #1
 80123cc:	2108      	movs	r1, #8
 80123ce:	4807      	ldr	r0, [pc, #28]	; (80123ec <Set_TB6612_State+0x5c>)
 80123d0:	f7f2 f9ca 	bl	8004768 <HAL_GPIO_WritePin>
 80123d4:	e005      	b.n	80123e2 <Set_TB6612_State+0x52>
	}
	else
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_RESET);
 80123d6:	2200      	movs	r2, #0
 80123d8:	2108      	movs	r1, #8
 80123da:	4804      	ldr	r0, [pc, #16]	; (80123ec <Set_TB6612_State+0x5c>)
 80123dc:	f7f2 f9c4 	bl	8004768 <HAL_GPIO_WritePin>
	}
}
 80123e0:	bf00      	nop
 80123e2:	bf00      	nop
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	20000200 	.word	0x20000200
 80123ec:	40021800 	.word	0x40021800

080123f0 <SetMotorState>:

//设置单个电机状态
void SetMotorState(Motor_Name motor, Motor_State state)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	4603      	mov	r3, r0
 80123f8:	460a      	mov	r2, r1
 80123fa:	71fb      	strb	r3, [r7, #7]
 80123fc:	4613      	mov	r3, r2
 80123fe:	71bb      	strb	r3, [r7, #6]
	//缓存
	Motor_States[motor] = state;
 8012400:	79fb      	ldrb	r3, [r7, #7]
 8012402:	493e      	ldr	r1, [pc, #248]	; (80124fc <SetMotorState+0x10c>)
 8012404:	79ba      	ldrb	r2, [r7, #6]
 8012406:	54ca      	strb	r2, [r1, r3]

	switch (state)
 8012408:	79bb      	ldrb	r3, [r7, #6]
 801240a:	2b02      	cmp	r3, #2
 801240c:	d04c      	beq.n	80124a8 <SetMotorState+0xb8>
 801240e:	2b02      	cmp	r3, #2
 8012410:	dc6d      	bgt.n	80124ee <SetMotorState+0xfe>
 8012412:	2b00      	cmp	r3, #0
 8012414:	d002      	beq.n	801241c <SetMotorState+0x2c>
 8012416:	2b01      	cmp	r3, #1
 8012418:	d023      	beq.n	8012462 <SetMotorState+0x72>
 801241a:	e068      	b.n	80124ee <SetMotorState+0xfe>
	{
		case Motor_Forward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 801241c:	79fb      	ldrb	r3, [r7, #7]
 801241e:	4a38      	ldr	r2, [pc, #224]	; (8012500 <SetMotorState+0x110>)
 8012420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012424:	4619      	mov	r1, r3
 8012426:	4837      	ldr	r0, [pc, #220]	; (8012504 <SetMotorState+0x114>)
 8012428:	f7f5 fea0 	bl	800816c <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_SET);
 801242c:	79fb      	ldrb	r3, [r7, #7]
 801242e:	4a36      	ldr	r2, [pc, #216]	; (8012508 <SetMotorState+0x118>)
 8012430:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012434:	79fb      	ldrb	r3, [r7, #7]
 8012436:	4a35      	ldr	r2, [pc, #212]	; (801250c <SetMotorState+0x11c>)
 8012438:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 801243c:	2201      	movs	r2, #1
 801243e:	4619      	mov	r1, r3
 8012440:	f7f2 f992 	bl	8004768 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 8012444:	79fb      	ldrb	r3, [r7, #7]
 8012446:	4a30      	ldr	r2, [pc, #192]	; (8012508 <SetMotorState+0x118>)
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	4413      	add	r3, r2
 801244c:	6858      	ldr	r0, [r3, #4]
 801244e:	79fb      	ldrb	r3, [r7, #7]
 8012450:	4a2e      	ldr	r2, [pc, #184]	; (801250c <SetMotorState+0x11c>)
 8012452:	009b      	lsls	r3, r3, #2
 8012454:	4413      	add	r3, r2
 8012456:	885b      	ldrh	r3, [r3, #2]
 8012458:	2200      	movs	r2, #0
 801245a:	4619      	mov	r1, r3
 801245c:	f7f2 f984 	bl	8004768 <HAL_GPIO_WritePin>
			break;
 8012460:	e045      	b.n	80124ee <SetMotorState+0xfe>
		case Motor_Backward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8012462:	79fb      	ldrb	r3, [r7, #7]
 8012464:	4a26      	ldr	r2, [pc, #152]	; (8012500 <SetMotorState+0x110>)
 8012466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801246a:	4619      	mov	r1, r3
 801246c:	4825      	ldr	r0, [pc, #148]	; (8012504 <SetMotorState+0x114>)
 801246e:	f7f5 fe7d 	bl	800816c <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8012472:	79fb      	ldrb	r3, [r7, #7]
 8012474:	4a24      	ldr	r2, [pc, #144]	; (8012508 <SetMotorState+0x118>)
 8012476:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801247a:	79fb      	ldrb	r3, [r7, #7]
 801247c:	4a23      	ldr	r2, [pc, #140]	; (801250c <SetMotorState+0x11c>)
 801247e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8012482:	2200      	movs	r2, #0
 8012484:	4619      	mov	r1, r3
 8012486:	f7f2 f96f 	bl	8004768 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_SET);
 801248a:	79fb      	ldrb	r3, [r7, #7]
 801248c:	4a1e      	ldr	r2, [pc, #120]	; (8012508 <SetMotorState+0x118>)
 801248e:	00db      	lsls	r3, r3, #3
 8012490:	4413      	add	r3, r2
 8012492:	6858      	ldr	r0, [r3, #4]
 8012494:	79fb      	ldrb	r3, [r7, #7]
 8012496:	4a1d      	ldr	r2, [pc, #116]	; (801250c <SetMotorState+0x11c>)
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4413      	add	r3, r2
 801249c:	885b      	ldrh	r3, [r3, #2]
 801249e:	2201      	movs	r2, #1
 80124a0:	4619      	mov	r1, r3
 80124a2:	f7f2 f961 	bl	8004768 <HAL_GPIO_WritePin>
			break;
 80124a6:	e022      	b.n	80124ee <SetMotorState+0xfe>
		case Motor_Stop:
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 80124a8:	79fb      	ldrb	r3, [r7, #7]
 80124aa:	4a15      	ldr	r2, [pc, #84]	; (8012500 <SetMotorState+0x110>)
 80124ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124b0:	4619      	mov	r1, r3
 80124b2:	4814      	ldr	r0, [pc, #80]	; (8012504 <SetMotorState+0x114>)
 80124b4:	f7f5 ff22 	bl	80082fc <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 80124b8:	79fb      	ldrb	r3, [r7, #7]
 80124ba:	4a13      	ldr	r2, [pc, #76]	; (8012508 <SetMotorState+0x118>)
 80124bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80124c0:	79fb      	ldrb	r3, [r7, #7]
 80124c2:	4a12      	ldr	r2, [pc, #72]	; (801250c <SetMotorState+0x11c>)
 80124c4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80124c8:	2200      	movs	r2, #0
 80124ca:	4619      	mov	r1, r3
 80124cc:	f7f2 f94c 	bl	8004768 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 80124d0:	79fb      	ldrb	r3, [r7, #7]
 80124d2:	4a0d      	ldr	r2, [pc, #52]	; (8012508 <SetMotorState+0x118>)
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	4413      	add	r3, r2
 80124d8:	6858      	ldr	r0, [r3, #4]
 80124da:	79fb      	ldrb	r3, [r7, #7]
 80124dc:	4a0b      	ldr	r2, [pc, #44]	; (801250c <SetMotorState+0x11c>)
 80124de:	009b      	lsls	r3, r3, #2
 80124e0:	4413      	add	r3, r2
 80124e2:	885b      	ldrh	r3, [r3, #2]
 80124e4:	2200      	movs	r2, #0
 80124e6:	4619      	mov	r1, r3
 80124e8:	f7f2 f93e 	bl	8004768 <HAL_GPIO_WritePin>
			break;
 80124ec:	bf00      	nop
	}

	//设置驱动板状态
	Set_TB6612_State();
 80124ee:	f7ff ff4f 	bl	8012390 <Set_TB6612_State>
}
 80124f2:	bf00      	nop
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	20000200 	.word	0x20000200
 8012500:	200001f0 	.word	0x200001f0
 8012504:	20000f84 	.word	0x20000f84
 8012508:	200001c0 	.word	0x200001c0
 801250c:	200001e0 	.word	0x200001e0

08012510 <SetMotorSpeed>:

//设置单个电机速度
//速度取值 -100 ~ 100 对应占空比 0% - 100%
void SetMotorSpeed(Motor_Name motor, float speed)
{
 8012510:	b590      	push	{r4, r7, lr}
 8012512:	b085      	sub	sp, #20
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	ed87 0a00 	vstr	s0, [r7]
 801251c:	71fb      	strb	r3, [r7, #7]
	uint8_t state = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	73fb      	strb	r3, [r7, #15]
	//设置状态
	if (speed == 0)
 8012522:	edd7 7a00 	vldr	s15, [r7]
 8012526:	eef5 7a40 	vcmp.f32	s15, #0.0
 801252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252e:	d102      	bne.n	8012536 <SetMotorSpeed+0x26>
	{
		state = Motor_Stop;
 8012530:	2302      	movs	r3, #2
 8012532:	73fb      	strb	r3, [r7, #15]
 8012534:	e00b      	b.n	801254e <SetMotorSpeed+0x3e>
	}
	else if (speed > 0)
 8012536:	edd7 7a00 	vldr	s15, [r7]
 801253a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012542:	dd02      	ble.n	801254a <SetMotorSpeed+0x3a>
	{
		state = Motor_Forward;
 8012544:	2300      	movs	r3, #0
 8012546:	73fb      	strb	r3, [r7, #15]
 8012548:	e001      	b.n	801254e <SetMotorSpeed+0x3e>
	}
	else
	{
		state = Motor_Backward;
 801254a:	2301      	movs	r3, #1
 801254c:	73fb      	strb	r3, [r7, #15]
	}

	//检查电机状态
	if (Motor_States[motor] != state)
 801254e:	79fb      	ldrb	r3, [r7, #7]
 8012550:	4a6d      	ldr	r2, [pc, #436]	; (8012708 <SetMotorSpeed+0x1f8>)
 8012552:	5cd3      	ldrb	r3, [r2, r3]
 8012554:	7bfa      	ldrb	r2, [r7, #15]
 8012556:	429a      	cmp	r2, r3
 8012558:	d005      	beq.n	8012566 <SetMotorSpeed+0x56>
	{
		SetMotorState(motor, state);
 801255a:	7bfa      	ldrb	r2, [r7, #15]
 801255c:	79fb      	ldrb	r3, [r7, #7]
 801255e:	4611      	mov	r1, r2
 8012560:	4618      	mov	r0, r3
 8012562:	f7ff ff45 	bl	80123f0 <SetMotorState>
	}

	//修正速度
	if (speed < 0)
 8012566:	edd7 7a00 	vldr	s15, [r7]
 801256a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012572:	d505      	bpl.n	8012580 <SetMotorSpeed+0x70>
	{
		speed = -speed;
 8012574:	edd7 7a00 	vldr	s15, [r7]
 8012578:	eef1 7a67 	vneg.f32	s15, s15
 801257c:	edc7 7a00 	vstr	s15, [r7]
	}

	//设置PWM
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 8012580:	79fb      	ldrb	r3, [r7, #7]
 8012582:	4a62      	ldr	r2, [pc, #392]	; (801270c <SetMotorSpeed+0x1fc>)
 8012584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d128      	bne.n	80125de <SetMotorSpeed+0xce>
 801258c:	edd7 7a00 	vldr	s15, [r7]
 8012590:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8012710 <SetMotorSpeed+0x200>
 8012594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259c:	dd03      	ble.n	80125a6 <SetMotorSpeed+0x96>
 801259e:	f04f 0000 	mov.w	r0, #0
 80125a2:	495c      	ldr	r1, [pc, #368]	; (8012714 <SetMotorSpeed+0x204>)
 80125a4:	e002      	b.n	80125ac <SetMotorSpeed+0x9c>
 80125a6:	6838      	ldr	r0, [r7, #0]
 80125a8:	f7ed ffce 	bl	8000548 <__aeabi_f2d>
 80125ac:	a352      	add	r3, pc, #328	; (adr r3, 80126f8 <SetMotorSpeed+0x1e8>)
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f7ee f821 	bl	80005f8 <__aeabi_dmul>
 80125b6:	4602      	mov	r2, r0
 80125b8:	460b      	mov	r3, r1
 80125ba:	4610      	mov	r0, r2
 80125bc:	4619      	mov	r1, r3
 80125be:	a350      	add	r3, pc, #320	; (adr r3, 8012700 <SetMotorSpeed+0x1f0>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	f7ee f818 	bl	80005f8 <__aeabi_dmul>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4952      	ldr	r1, [pc, #328]	; (8012718 <SetMotorSpeed+0x208>)
 80125ce:	680c      	ldr	r4, [r1, #0]
 80125d0:	4610      	mov	r0, r2
 80125d2:	4619      	mov	r1, r3
 80125d4:	f7ee fae8 	bl	8000ba8 <__aeabi_d2uiz>
 80125d8:	4603      	mov	r3, r0
 80125da:	6363      	str	r3, [r4, #52]	; 0x34
}
 80125dc:	e085      	b.n	80126ea <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 80125de:	79fb      	ldrb	r3, [r7, #7]
 80125e0:	4a4a      	ldr	r2, [pc, #296]	; (801270c <SetMotorSpeed+0x1fc>)
 80125e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125e6:	2b04      	cmp	r3, #4
 80125e8:	d128      	bne.n	801263c <SetMotorSpeed+0x12c>
 80125ea:	edd7 7a00 	vldr	s15, [r7]
 80125ee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012710 <SetMotorSpeed+0x200>
 80125f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80125f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fa:	dd03      	ble.n	8012604 <SetMotorSpeed+0xf4>
 80125fc:	f04f 0000 	mov.w	r0, #0
 8012600:	4944      	ldr	r1, [pc, #272]	; (8012714 <SetMotorSpeed+0x204>)
 8012602:	e002      	b.n	801260a <SetMotorSpeed+0xfa>
 8012604:	6838      	ldr	r0, [r7, #0]
 8012606:	f7ed ff9f 	bl	8000548 <__aeabi_f2d>
 801260a:	a33b      	add	r3, pc, #236	; (adr r3, 80126f8 <SetMotorSpeed+0x1e8>)
 801260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012610:	f7ed fff2 	bl	80005f8 <__aeabi_dmul>
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	4610      	mov	r0, r2
 801261a:	4619      	mov	r1, r3
 801261c:	a338      	add	r3, pc, #224	; (adr r3, 8012700 <SetMotorSpeed+0x1f0>)
 801261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012622:	f7ed ffe9 	bl	80005f8 <__aeabi_dmul>
 8012626:	4602      	mov	r2, r0
 8012628:	460b      	mov	r3, r1
 801262a:	493b      	ldr	r1, [pc, #236]	; (8012718 <SetMotorSpeed+0x208>)
 801262c:	680c      	ldr	r4, [r1, #0]
 801262e:	4610      	mov	r0, r2
 8012630:	4619      	mov	r1, r3
 8012632:	f7ee fab9 	bl	8000ba8 <__aeabi_d2uiz>
 8012636:	4603      	mov	r3, r0
 8012638:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801263a:	e056      	b.n	80126ea <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 801263c:	79fb      	ldrb	r3, [r7, #7]
 801263e:	4a33      	ldr	r2, [pc, #204]	; (801270c <SetMotorSpeed+0x1fc>)
 8012640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012644:	2b08      	cmp	r3, #8
 8012646:	d128      	bne.n	801269a <SetMotorSpeed+0x18a>
 8012648:	edd7 7a00 	vldr	s15, [r7]
 801264c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012710 <SetMotorSpeed+0x200>
 8012650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012658:	dd03      	ble.n	8012662 <SetMotorSpeed+0x152>
 801265a:	f04f 0000 	mov.w	r0, #0
 801265e:	492d      	ldr	r1, [pc, #180]	; (8012714 <SetMotorSpeed+0x204>)
 8012660:	e002      	b.n	8012668 <SetMotorSpeed+0x158>
 8012662:	6838      	ldr	r0, [r7, #0]
 8012664:	f7ed ff70 	bl	8000548 <__aeabi_f2d>
 8012668:	a323      	add	r3, pc, #140	; (adr r3, 80126f8 <SetMotorSpeed+0x1e8>)
 801266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266e:	f7ed ffc3 	bl	80005f8 <__aeabi_dmul>
 8012672:	4602      	mov	r2, r0
 8012674:	460b      	mov	r3, r1
 8012676:	4610      	mov	r0, r2
 8012678:	4619      	mov	r1, r3
 801267a:	a321      	add	r3, pc, #132	; (adr r3, 8012700 <SetMotorSpeed+0x1f0>)
 801267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012680:	f7ed ffba 	bl	80005f8 <__aeabi_dmul>
 8012684:	4602      	mov	r2, r0
 8012686:	460b      	mov	r3, r1
 8012688:	4923      	ldr	r1, [pc, #140]	; (8012718 <SetMotorSpeed+0x208>)
 801268a:	680c      	ldr	r4, [r1, #0]
 801268c:	4610      	mov	r0, r2
 801268e:	4619      	mov	r1, r3
 8012690:	f7ee fa8a 	bl	8000ba8 <__aeabi_d2uiz>
 8012694:	4603      	mov	r3, r0
 8012696:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8012698:	e027      	b.n	80126ea <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 801269a:	edd7 7a00 	vldr	s15, [r7]
 801269e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012710 <SetMotorSpeed+0x200>
 80126a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126aa:	dd03      	ble.n	80126b4 <SetMotorSpeed+0x1a4>
 80126ac:	f04f 0000 	mov.w	r0, #0
 80126b0:	4918      	ldr	r1, [pc, #96]	; (8012714 <SetMotorSpeed+0x204>)
 80126b2:	e002      	b.n	80126ba <SetMotorSpeed+0x1aa>
 80126b4:	6838      	ldr	r0, [r7, #0]
 80126b6:	f7ed ff47 	bl	8000548 <__aeabi_f2d>
 80126ba:	a30f      	add	r3, pc, #60	; (adr r3, 80126f8 <SetMotorSpeed+0x1e8>)
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	f7ed ff9a 	bl	80005f8 <__aeabi_dmul>
 80126c4:	4602      	mov	r2, r0
 80126c6:	460b      	mov	r3, r1
 80126c8:	4610      	mov	r0, r2
 80126ca:	4619      	mov	r1, r3
 80126cc:	a30c      	add	r3, pc, #48	; (adr r3, 8012700 <SetMotorSpeed+0x1f0>)
 80126ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d2:	f7ed ff91 	bl	80005f8 <__aeabi_dmul>
 80126d6:	4602      	mov	r2, r0
 80126d8:	460b      	mov	r3, r1
 80126da:	490f      	ldr	r1, [pc, #60]	; (8012718 <SetMotorSpeed+0x208>)
 80126dc:	680c      	ldr	r4, [r1, #0]
 80126de:	4610      	mov	r0, r2
 80126e0:	4619      	mov	r1, r3
 80126e2:	f7ee fa61 	bl	8000ba8 <__aeabi_d2uiz>
 80126e6:	4603      	mov	r3, r0
 80126e8:	6423      	str	r3, [r4, #64]	; 0x40
}
 80126ea:	bf00      	nop
 80126ec:	3714      	adds	r7, #20
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd90      	pop	{r4, r7, pc}
 80126f2:	bf00      	nop
 80126f4:	f3af 8000 	nop.w
 80126f8:	47ae147b 	.word	0x47ae147b
 80126fc:	3f847ae1 	.word	0x3f847ae1
 8012700:	00000000 	.word	0x00000000
 8012704:	40d067c0 	.word	0x40d067c0
 8012708:	20000200 	.word	0x20000200
 801270c:	200001f0 	.word	0x200001f0
 8012710:	42c80000 	.word	0x42c80000
 8012714:	40590000 	.word	0x40590000
 8012718:	20000f84 	.word	0x20000f84

0801271c <UpdateInfraredData>:
GPIO_TypeDef *Infrared_GPIO_Ports[Infrared_Number] = { Infrared1_GPIO_Port, Infrared2_GPIO_Port, Infrared3_GPIO_Port, Infrared4_GPIO_Port };
uint16_t Infrared_Pins[Infrared_Number] = { Infrared1_Pin, Infrared2_Pin, Infrared3_Pin, Infrared4_Pin };

//获取红外数据
void UpdateInfraredData()
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
	for (int var = 0; var < Infrared_Number; ++var)
 8012722:	2300      	movs	r3, #0
 8012724:	607b      	str	r3, [r7, #4]
 8012726:	e01a      	b.n	801275e <UpdateInfraredData+0x42>
	{
		Infrared_Datas[var] = HAL_GPIO_ReadPin(Infrared_GPIO_Ports[var], Infrared_Pins[var]) == GPIO_PIN_RESET;
 8012728:	4a11      	ldr	r2, [pc, #68]	; (8012770 <UpdateInfraredData+0x54>)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012730:	4910      	ldr	r1, [pc, #64]	; (8012774 <UpdateInfraredData+0x58>)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012738:	4619      	mov	r1, r3
 801273a:	4610      	mov	r0, r2
 801273c:	f7f1 fffc 	bl	8004738 <HAL_GPIO_ReadPin>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	bf0c      	ite	eq
 8012746:	2301      	moveq	r3, #1
 8012748:	2300      	movne	r3, #0
 801274a:	b2db      	uxtb	r3, r3
 801274c:	4619      	mov	r1, r3
 801274e:	4a0a      	ldr	r2, [pc, #40]	; (8012778 <UpdateInfraredData+0x5c>)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4413      	add	r3, r2
 8012754:	460a      	mov	r2, r1
 8012756:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < Infrared_Number; ++var)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	3301      	adds	r3, #1
 801275c:	607b      	str	r3, [r7, #4]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2b03      	cmp	r3, #3
 8012762:	dde1      	ble.n	8012728 <UpdateInfraredData+0xc>
	}
}
 8012764:	bf00      	nop
 8012766:	bf00      	nop
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	20000204 	.word	0x20000204
 8012774:	20000214 	.word	0x20000214
 8012778:	20001c50 	.word	0x20001c50

0801277c <GetDriveState>:

//获取当前行驶状态
DriveState GetDriveState()
{
 801277c:	b580      	push	{r7, lr}
 801277e:	af00      	add	r7, sp, #0
	UpdateInfraredData();
 8012780:	f7ff ffcc 	bl	801271c <UpdateInfraredData>

	//判断
	if (Infrared_Datas[Infrared_Left] && Infrared_Datas[Infrared_Right] && Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Center_Right])
 8012784:	4b32      	ldr	r3, [pc, #200]	; (8012850 <GetDriveState+0xd4>)
 8012786:	785b      	ldrb	r3, [r3, #1]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00d      	beq.n	80127a8 <GetDriveState+0x2c>
 801278c:	4b30      	ldr	r3, [pc, #192]	; (8012850 <GetDriveState+0xd4>)
 801278e:	78db      	ldrb	r3, [r3, #3]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d009      	beq.n	80127a8 <GetDriveState+0x2c>
 8012794:	4b2e      	ldr	r3, [pc, #184]	; (8012850 <GetDriveState+0xd4>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d005      	beq.n	80127a8 <GetDriveState+0x2c>
 801279c:	4b2c      	ldr	r3, [pc, #176]	; (8012850 <GetDriveState+0xd4>)
 801279e:	789b      	ldrb	r3, [r3, #2]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d001      	beq.n	80127a8 <GetDriveState+0x2c>
	{
		return DriveState_Intersection;
 80127a4:	2300      	movs	r3, #0
 80127a6:	e050      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Right])
 80127a8:	4b29      	ldr	r3, [pc, #164]	; (8012850 <GetDriveState+0xd4>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d009      	beq.n	80127c4 <GetDriveState+0x48>
 80127b0:	4b27      	ldr	r3, [pc, #156]	; (8012850 <GetDriveState+0xd4>)
 80127b2:	789b      	ldrb	r3, [r3, #2]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d005      	beq.n	80127c4 <GetDriveState+0x48>
 80127b8:	4b25      	ldr	r3, [pc, #148]	; (8012850 <GetDriveState+0xd4>)
 80127ba:	78db      	ldrb	r3, [r3, #3]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d001      	beq.n	80127c4 <GetDriveState+0x48>
	{
		return DriveState_Turn_Right;
 80127c0:	2308      	movs	r3, #8
 80127c2:	e042      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Left])
 80127c4:	4b22      	ldr	r3, [pc, #136]	; (8012850 <GetDriveState+0xd4>)
 80127c6:	789b      	ldrb	r3, [r3, #2]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d009      	beq.n	80127e0 <GetDriveState+0x64>
 80127cc:	4b20      	ldr	r3, [pc, #128]	; (8012850 <GetDriveState+0xd4>)
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d005      	beq.n	80127e0 <GetDriveState+0x64>
 80127d4:	4b1e      	ldr	r3, [pc, #120]	; (8012850 <GetDriveState+0xd4>)
 80127d6:	785b      	ldrb	r3, [r3, #1]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d001      	beq.n	80127e0 <GetDriveState+0x64>
	{
		return DriveState_Turn_Left;
 80127dc:	2307      	movs	r3, #7
 80127de:	e034      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Right])
 80127e0:	4b1b      	ldr	r3, [pc, #108]	; (8012850 <GetDriveState+0xd4>)
 80127e2:	78db      	ldrb	r3, [r3, #3]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d001      	beq.n	80127ec <GetDriveState+0x70>
	{
		return DriveState_Sharp_Left;
 80127e8:	2304      	movs	r3, #4
 80127ea:	e02e      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Left])
 80127ec:	4b18      	ldr	r3, [pc, #96]	; (8012850 <GetDriveState+0xd4>)
 80127ee:	785b      	ldrb	r3, [r3, #1]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d001      	beq.n	80127f8 <GetDriveState+0x7c>
	{
		return DriveState_Sharp_Right;
 80127f4:	2305      	movs	r3, #5
 80127f6:	e028      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] == 0 && Infrared_Datas[Infrared_Center_Right] == 0 && Infrared_Datas[Infrared_Left] == 0 && Infrared_Datas[Infrared_Right] == 0)
 80127f8:	4b15      	ldr	r3, [pc, #84]	; (8012850 <GetDriveState+0xd4>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10d      	bne.n	801281c <GetDriveState+0xa0>
 8012800:	4b13      	ldr	r3, [pc, #76]	; (8012850 <GetDriveState+0xd4>)
 8012802:	789b      	ldrb	r3, [r3, #2]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d109      	bne.n	801281c <GetDriveState+0xa0>
 8012808:	4b11      	ldr	r3, [pc, #68]	; (8012850 <GetDriveState+0xd4>)
 801280a:	785b      	ldrb	r3, [r3, #1]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d105      	bne.n	801281c <GetDriveState+0xa0>
 8012810:	4b0f      	ldr	r3, [pc, #60]	; (8012850 <GetDriveState+0xd4>)
 8012812:	78db      	ldrb	r3, [r3, #3]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d101      	bne.n	801281c <GetDriveState+0xa0>
	{
		return DriveState_Derailment;
 8012818:	2306      	movs	r3, #6
 801281a:	e016      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] == 0)
 801281c:	4b0c      	ldr	r3, [pc, #48]	; (8012850 <GetDriveState+0xd4>)
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d101      	bne.n	8012828 <GetDriveState+0xac>
	{
		return DriveState_Left;
 8012824:	2301      	movs	r3, #1
 8012826:	e010      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] == 0)
 8012828:	4b09      	ldr	r3, [pc, #36]	; (8012850 <GetDriveState+0xd4>)
 801282a:	789b      	ldrb	r3, [r3, #2]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d101      	bne.n	8012834 <GetDriveState+0xb8>
	{
		return DriveState_Right;
 8012830:	2302      	movs	r3, #2
 8012832:	e00a      	b.n	801284a <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Center_Left])
 8012834:	4b06      	ldr	r3, [pc, #24]	; (8012850 <GetDriveState+0xd4>)
 8012836:	789b      	ldrb	r3, [r3, #2]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d005      	beq.n	8012848 <GetDriveState+0xcc>
 801283c:	4b04      	ldr	r3, [pc, #16]	; (8012850 <GetDriveState+0xd4>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d001      	beq.n	8012848 <GetDriveState+0xcc>
	{
		return DriveState_Normal;
 8012844:	2303      	movs	r3, #3
 8012846:	e000      	b.n	801284a <GetDriveState+0xce>
	}
	else
	{
		return DriveState_Undefined;
 8012848:	2309      	movs	r3, #9
	}
}
 801284a:	4618      	mov	r0, r3
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	20001c50 	.word	0x20001c50

08012854 <InitCar>:
float Abnormal_Axis_Speed[3];

Abnormal_Mode StateAbnormal_Mode;

void InitCar()
{
 8012854:	b580      	push	{r7, lr}
 8012856:	af00      	add	r7, sp, #0
	//初始化PID
	InitMotorPID();
 8012858:	f000 f9a4 	bl	8012ba4 <InitMotorPID>
	//使能小车速度监控
	EnableAllMotorEncoders();
 801285c:	f7ff fd2a 	bl	80122b4 <EnableAllMotorEncoders>
}
 8012860:	bf00      	nop
 8012862:	bd80      	pop	{r7, pc}

08012864 <Periodic_UpdateAndSet_Car_ExpectedSpeed>:
	Abnormal_Axis_Speed[2] = z;
}

//周期更新设置值并应用
void Periodic_UpdateAndSet_Car_ExpectedSpeed()
{
 8012864:	b590      	push	{r4, r7, lr}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
	//CorrectCarDirection();
	//更新实际速度
	Periodic_Update_Car_ActualSpeed();
 801286a:	f000 f857 	bl	801291c <Periodic_Update_Car_ActualSpeed>
	//级联更新计算PID
	for (int motor = 0; motor < Motor_Number; ++motor)
 801286e:	2300      	movs	r3, #0
 8012870:	607b      	str	r3, [r7, #4]
 8012872:	e020      	b.n	80128b6 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x52>
	{
		SetMotorSpeed(motor, UpdateMotorSpeedPID(motor, Motor_Expected_Speeds[motor], Motor_Actual_Speeds[motor]));
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	b2dc      	uxtb	r4, r3
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	b2da      	uxtb	r2, r3
 801287c:	4912      	ldr	r1, [pc, #72]	; (80128c8 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x64>)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	009b      	lsls	r3, r3, #2
 8012882:	440b      	add	r3, r1
 8012884:	edd3 7a00 	vldr	s15, [r3]
 8012888:	4910      	ldr	r1, [pc, #64]	; (80128cc <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x68>)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	440b      	add	r3, r1
 8012890:	ed93 7a00 	vldr	s14, [r3]
 8012894:	eef0 0a47 	vmov.f32	s1, s14
 8012898:	eeb0 0a67 	vmov.f32	s0, s15
 801289c:	4610      	mov	r0, r2
 801289e:	f000 fa45 	bl	8012d2c <UpdateMotorSpeedPID>
 80128a2:	eef0 7a40 	vmov.f32	s15, s0
 80128a6:	eeb0 0a67 	vmov.f32	s0, s15
 80128aa:	4620      	mov	r0, r4
 80128ac:	f7ff fe30 	bl	8012510 <SetMotorSpeed>
	for (int motor = 0; motor < Motor_Number; ++motor)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3301      	adds	r3, #1
 80128b4:	607b      	str	r3, [r7, #4]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	dddb      	ble.n	8012874 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x10>
	}
}
 80128bc:	bf00      	nop
 80128be:	bf00      	nop
 80128c0:	370c      	adds	r7, #12
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd90      	pop	{r4, r7, pc}
 80128c6:	bf00      	nop
 80128c8:	20001c54 	.word	0x20001c54
 80128cc:	20001c40 	.word	0x20001c40

080128d0 <Is_Car_Runing>:

//判断是否停止
uint8_t Is_Car_Runing()
{
 80128d0:	b480      	push	{r7}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 80128d6:	2300      	movs	r3, #0
 80128d8:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < Motor_Number; ++var)
 80128da:	2300      	movs	r3, #0
 80128dc:	603b      	str	r3, [r7, #0]
 80128de:	e010      	b.n	8012902 <Is_Car_Runing+0x32>
	{
		if (Motor_Expected_Speeds[var] != 0)
 80128e0:	4a0d      	ldr	r2, [pc, #52]	; (8012918 <Is_Car_Runing+0x48>)
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	4413      	add	r3, r2
 80128e8:	edd3 7a00 	vldr	s15, [r3]
 80128ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80128f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f4:	d002      	beq.n	80128fc <Is_Car_Runing+0x2c>
		{
			flag = 1;
 80128f6:	2301      	movs	r3, #1
 80128f8:	71fb      	strb	r3, [r7, #7]
			break;
 80128fa:	e005      	b.n	8012908 <Is_Car_Runing+0x38>
	for (int var = 0; var < Motor_Number; ++var)
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	3301      	adds	r3, #1
 8012900:	603b      	str	r3, [r7, #0]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	2b03      	cmp	r3, #3
 8012906:	ddeb      	ble.n	80128e0 <Is_Car_Runing+0x10>
		}
	}
	return flag;
 8012908:	79fb      	ldrb	r3, [r7, #7]
}
 801290a:	4618      	mov	r0, r3
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	20001c54 	.word	0x20001c54

0801291c <Periodic_Update_Car_ActualSpeed>:

//周期更新实际值
void Periodic_Update_Car_ActualSpeed()
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
	UpdateAllMotorSpeed();
 8012922:	f7ff fce3 	bl	80122ec <UpdateAllMotorSpeed>

	//根据电机状态 修正已停止电机的速度
	for (int motor = 0; motor < Motor_Number; ++motor)
 8012926:	2300      	movs	r3, #0
 8012928:	607b      	str	r3, [r7, #4]
 801292a:	e01a      	b.n	8012962 <Periodic_Update_Car_ActualSpeed+0x46>
	{
		if (Motor_States[motor] == Motor_Stop && Motor_Actual_Speeds[motor] != 0)
 801292c:	4a11      	ldr	r2, [pc, #68]	; (8012974 <Periodic_Update_Car_ActualSpeed+0x58>)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4413      	add	r3, r2
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b02      	cmp	r3, #2
 8012936:	d111      	bne.n	801295c <Periodic_Update_Car_ActualSpeed+0x40>
 8012938:	4a0f      	ldr	r2, [pc, #60]	; (8012978 <Periodic_Update_Car_ActualSpeed+0x5c>)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	4413      	add	r3, r2
 8012940:	edd3 7a00 	vldr	s15, [r3]
 8012944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294c:	d006      	beq.n	801295c <Periodic_Update_Car_ActualSpeed+0x40>
		{
			Motor_Actual_Speeds[motor] = 0;
 801294e:	4a0a      	ldr	r2, [pc, #40]	; (8012978 <Periodic_Update_Car_ActualSpeed+0x5c>)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	f04f 0200 	mov.w	r2, #0
 801295a:	601a      	str	r2, [r3, #0]
	for (int motor = 0; motor < Motor_Number; ++motor)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3301      	adds	r3, #1
 8012960:	607b      	str	r3, [r7, #4]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b03      	cmp	r3, #3
 8012966:	dde1      	ble.n	801292c <Periodic_Update_Car_ActualSpeed+0x10>
		}
	}
}
 8012968:	bf00      	nop
 801296a:	bf00      	nop
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	20000200 	.word	0x20000200
 8012978:	20001c40 	.word	0x20001c40

0801297c <Set_Motor_ExpectedSpeed>:

//跳过计算 直接设置某个轮子速度
//只有关闭巡线才能生效
void Set_Motor_ExpectedSpeed(Motor_Name motor, float speed)
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	4603      	mov	r3, r0
 8012984:	ed87 0a00 	vstr	s0, [r7]
 8012988:	71fb      	strb	r3, [r7, #7]
	Motor_Expected_Speeds[motor] = speed;
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	4a05      	ldr	r2, [pc, #20]	; (80129a4 <Set_Motor_ExpectedSpeed+0x28>)
 801298e:	009b      	lsls	r3, r3, #2
 8012990:	4413      	add	r3, r2
 8012992:	683a      	ldr	r2, [r7, #0]
 8012994:	601a      	str	r2, [r3, #0]
}
 8012996:	bf00      	nop
 8012998:	370c      	adds	r7, #12
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	20001c54 	.word	0x20001c54

080129a8 <Transform_AxisSpeed>:

//计算速度并保存
void Transform_AxisSpeed()
{
 80129a8:	b480      	push	{r7}
 80129aa:	b083      	sub	sp, #12
 80129ac:	af00      	add	r7, sp, #0
	Motor_Expected_Speeds[2] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 80129ae:	4b50      	ldr	r3, [pc, #320]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129b0:	ed93 7a00 	vldr	s14, [r3]
 80129b4:	4b4e      	ldr	r3, [pc, #312]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80129ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129be:	4b4d      	ldr	r3, [pc, #308]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 80129c0:	edc3 7a02 	vstr	s15, [r3, #8]
	Motor_Expected_Speeds[0] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 80129c4:	4b4a      	ldr	r3, [pc, #296]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129c6:	ed93 7a00 	vldr	s14, [r3]
 80129ca:	4b49      	ldr	r3, [pc, #292]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80129d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129d4:	4b47      	ldr	r3, [pc, #284]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 80129d6:	edc3 7a00 	vstr	s15, [r3]
	Motor_Expected_Speeds[1] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 80129da:	4b45      	ldr	r3, [pc, #276]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129dc:	ed93 7a00 	vldr	s14, [r3]
 80129e0:	4b43      	ldr	r3, [pc, #268]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80129e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129ea:	4b42      	ldr	r3, [pc, #264]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 80129ec:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Speeds[3] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 80129f0:	4b3f      	ldr	r3, [pc, #252]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129f2:	ed93 7a00 	vldr	s14, [r3]
 80129f6:	4b3e      	ldr	r3, [pc, #248]	; (8012af0 <Transform_AxisSpeed+0x148>)
 80129f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80129fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a00:	4b3c      	ldr	r3, [pc, #240]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a02:	edc3 7a03 	vstr	s15, [r3, #12]

	//输出饱和
	for (int var = 0; var < Motor_Number; ++var)
 8012a06:	2300      	movs	r3, #0
 8012a08:	607b      	str	r3, [r7, #4]
 8012a0a:	e067      	b.n	8012adc <Transform_AxisSpeed+0x134>
	{
		if (Motor_Expected_Speeds[var] < 0)
 8012a0c:	4a39      	ldr	r2, [pc, #228]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	4413      	add	r3, r2
 8012a14:	edd3 7a00 	vldr	s15, [r3]
 8012a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a20:	d527      	bpl.n	8012a72 <Transform_AxisSpeed+0xca>
		{
			if (Motor_Expected_Speeds[var] < -Motor_Expected_Speed_Max)
 8012a22:	4a34      	ldr	r2, [pc, #208]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	4413      	add	r3, r2
 8012a2a:	edd3 7a00 	vldr	s15, [r3]
 8012a2e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012af8 <Transform_AxisSpeed+0x150>
 8012a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3a:	d506      	bpl.n	8012a4a <Transform_AxisSpeed+0xa2>
			{
				Motor_Expected_Speeds[var] = -Motor_Expected_Speed_Max;
 8012a3c:	4a2d      	ldr	r2, [pc, #180]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	4413      	add	r3, r2
 8012a44:	4a2d      	ldr	r2, [pc, #180]	; (8012afc <Transform_AxisSpeed+0x154>)
 8012a46:	601a      	str	r2, [r3, #0]
 8012a48:	e045      	b.n	8012ad6 <Transform_AxisSpeed+0x12e>
			}
			else if (Motor_Expected_Speeds[var] > -Motor_Expected_Speed_Min)
 8012a4a:	4a2a      	ldr	r2, [pc, #168]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	4413      	add	r3, r2
 8012a52:	edd3 7a00 	vldr	s15, [r3]
 8012a56:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8012a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a62:	dd38      	ble.n	8012ad6 <Transform_AxisSpeed+0x12e>
			{
				Motor_Expected_Speeds[var] = -Motor_Expected_Speed_Min;
 8012a64:	4a23      	ldr	r2, [pc, #140]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4413      	add	r3, r2
 8012a6c:	4a24      	ldr	r2, [pc, #144]	; (8012b00 <Transform_AxisSpeed+0x158>)
 8012a6e:	601a      	str	r2, [r3, #0]
 8012a70:	e031      	b.n	8012ad6 <Transform_AxisSpeed+0x12e>
			}
		}
		else if (Motor_Expected_Speeds[var] > 0)
 8012a72:	4a20      	ldr	r2, [pc, #128]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	4413      	add	r3, r2
 8012a7a:	edd3 7a00 	vldr	s15, [r3]
 8012a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a86:	dd26      	ble.n	8012ad6 <Transform_AxisSpeed+0x12e>
		{
			if (Motor_Expected_Speeds[var] > Motor_Expected_Speed_Max)
 8012a88:	4a1a      	ldr	r2, [pc, #104]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	4413      	add	r3, r2
 8012a90:	edd3 7a00 	vldr	s15, [r3]
 8012a94:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8012b04 <Transform_AxisSpeed+0x15c>
 8012a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa0:	dd06      	ble.n	8012ab0 <Transform_AxisSpeed+0x108>
			{
				Motor_Expected_Speeds[var] = Motor_Expected_Speed_Max;
 8012aa2:	4a14      	ldr	r2, [pc, #80]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	009b      	lsls	r3, r3, #2
 8012aa8:	4413      	add	r3, r2
 8012aaa:	4a17      	ldr	r2, [pc, #92]	; (8012b08 <Transform_AxisSpeed+0x160>)
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	e012      	b.n	8012ad6 <Transform_AxisSpeed+0x12e>
			}
			else if (Motor_Expected_Speeds[var] < Motor_Expected_Speed_Min)
 8012ab0:	4a10      	ldr	r2, [pc, #64]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	edd3 7a00 	vldr	s15, [r3]
 8012abc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8012ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac8:	d505      	bpl.n	8012ad6 <Transform_AxisSpeed+0x12e>
			{
				Motor_Expected_Speeds[var] = Motor_Expected_Speed_Min;
 8012aca:	4a0a      	ldr	r2, [pc, #40]	; (8012af4 <Transform_AxisSpeed+0x14c>)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	4413      	add	r3, r2
 8012ad2:	4a0e      	ldr	r2, [pc, #56]	; (8012b0c <Transform_AxisSpeed+0x164>)
 8012ad4:	601a      	str	r2, [r3, #0]
	for (int var = 0; var < Motor_Number; ++var)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	607b      	str	r3, [r7, #4]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b03      	cmp	r3, #3
 8012ae0:	dd94      	ble.n	8012a0c <Transform_AxisSpeed+0x64>
			}
		}
	}
}
 8012ae2:	bf00      	nop
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr
 8012af0:	20001c64 	.word	0x20001c64
 8012af4:	20001c54 	.word	0x20001c54
 8012af8:	c2a00000 	.word	0xc2a00000
 8012afc:	c2a00000 	.word	0xc2a00000
 8012b00:	c0a00000 	.word	0xc0a00000
 8012b04:	42a00000 	.word	0x42a00000
 8012b08:	42a00000 	.word	0x42a00000
 8012b0c:	40a00000 	.word	0x40a00000

08012b10 <AddCarSpeed>:

//在当前速度的基础上添加 速度
void AddCarSpeed(float vx, float vy, float vz)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	ed87 0a03 	vstr	s0, [r7, #12]
 8012b1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8012b1e:	ed87 1a01 	vstr	s2, [r7, #4]
	Motor_Expected_Axis_Speeds[Axis_X] += vx;
 8012b22:	4b12      	ldr	r3, [pc, #72]	; (8012b6c <AddCarSpeed+0x5c>)
 8012b24:	ed93 7a00 	vldr	s14, [r3]
 8012b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b30:	4b0e      	ldr	r3, [pc, #56]	; (8012b6c <AddCarSpeed+0x5c>)
 8012b32:	edc3 7a00 	vstr	s15, [r3]
	Motor_Expected_Axis_Speeds[Axis_Y] += vy;
 8012b36:	4b0d      	ldr	r3, [pc, #52]	; (8012b6c <AddCarSpeed+0x5c>)
 8012b38:	ed93 7a01 	vldr	s14, [r3, #4]
 8012b3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8012b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b44:	4b09      	ldr	r3, [pc, #36]	; (8012b6c <AddCarSpeed+0x5c>)
 8012b46:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Axis_Speeds[Axis_Z] += vz;
 8012b4a:	4b08      	ldr	r3, [pc, #32]	; (8012b6c <AddCarSpeed+0x5c>)
 8012b4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8012b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b58:	4b04      	ldr	r3, [pc, #16]	; (8012b6c <AddCarSpeed+0x5c>)
 8012b5a:	edc3 7a02 	vstr	s15, [r3, #8]

	Transform_AxisSpeed();
 8012b5e:	f7ff ff23 	bl	80129a8 <Transform_AxisSpeed>
}
 8012b62:	bf00      	nop
 8012b64:	3710      	adds	r7, #16
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	20001c64 	.word	0x20001c64

08012b70 <SetCarSpeed>:

//设置速度
void SetCarSpeed(float vx, float vy, float vz)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	ed87 0a03 	vstr	s0, [r7, #12]
 8012b7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8012b7e:	ed87 1a01 	vstr	s2, [r7, #4]
	Motor_Expected_Axis_Speeds[0] = vx;
 8012b82:	4a07      	ldr	r2, [pc, #28]	; (8012ba0 <SetCarSpeed+0x30>)
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	6013      	str	r3, [r2, #0]
	Motor_Expected_Axis_Speeds[1] = vy;
 8012b88:	4a05      	ldr	r2, [pc, #20]	; (8012ba0 <SetCarSpeed+0x30>)
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	6053      	str	r3, [r2, #4]
	Motor_Expected_Axis_Speeds[2] = vz;
 8012b8e:	4a04      	ldr	r2, [pc, #16]	; (8012ba0 <SetCarSpeed+0x30>)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6093      	str	r3, [r2, #8]

	Transform_AxisSpeed();
 8012b94:	f7ff ff08 	bl	80129a8 <Transform_AxisSpeed>
}
 8012b98:	bf00      	nop
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	20001c64 	.word	0x20001c64

08012ba4 <InitMotorPID>:

struct _pid Motor_PID[4];

//初始化PID
void InitMotorPID()
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < Motor_Number; i++)
 8012baa:	2300      	movs	r3, #0
 8012bac:	71fb      	strb	r3, [r7, #7]
 8012bae:	e041      	b.n	8012c34 <InitMotorPID+0x90>
	{
		Motor_PID[i].SetSpeed = 0.0;
 8012bb0:	79fb      	ldrb	r3, [r7, #7]
 8012bb2:	4a25      	ldr	r2, [pc, #148]	; (8012c48 <InitMotorPID+0xa4>)
 8012bb4:	015b      	lsls	r3, r3, #5
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f04f 0200 	mov.w	r2, #0
 8012bbc:	601a      	str	r2, [r3, #0]
		Motor_PID[i].ActualSpeed = 0.0;
 8012bbe:	79fb      	ldrb	r3, [r7, #7]
 8012bc0:	4a21      	ldr	r2, [pc, #132]	; (8012c48 <InitMotorPID+0xa4>)
 8012bc2:	015b      	lsls	r3, r3, #5
 8012bc4:	4413      	add	r3, r2
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	f04f 0200 	mov.w	r2, #0
 8012bcc:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err = 0.0;
 8012bce:	79fb      	ldrb	r3, [r7, #7]
 8012bd0:	4a1d      	ldr	r2, [pc, #116]	; (8012c48 <InitMotorPID+0xa4>)
 8012bd2:	015b      	lsls	r3, r3, #5
 8012bd4:	4413      	add	r3, r2
 8012bd6:	3308      	adds	r3, #8
 8012bd8:	f04f 0200 	mov.w	r2, #0
 8012bdc:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err_next = 0.0;
 8012bde:	79fb      	ldrb	r3, [r7, #7]
 8012be0:	4a19      	ldr	r2, [pc, #100]	; (8012c48 <InitMotorPID+0xa4>)
 8012be2:	015b      	lsls	r3, r3, #5
 8012be4:	4413      	add	r3, r2
 8012be6:	330c      	adds	r3, #12
 8012be8:	f04f 0200 	mov.w	r2, #0
 8012bec:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err_last = 0.0;
 8012bee:	79fb      	ldrb	r3, [r7, #7]
 8012bf0:	4a15      	ldr	r2, [pc, #84]	; (8012c48 <InitMotorPID+0xa4>)
 8012bf2:	015b      	lsls	r3, r3, #5
 8012bf4:	4413      	add	r3, r2
 8012bf6:	3310      	adds	r3, #16
 8012bf8:	f04f 0200 	mov.w	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Kp = 2;
 8012bfe:	79fb      	ldrb	r3, [r7, #7]
 8012c00:	4a11      	ldr	r2, [pc, #68]	; (8012c48 <InitMotorPID+0xa4>)
 8012c02:	015b      	lsls	r3, r3, #5
 8012c04:	4413      	add	r3, r2
 8012c06:	3314      	adds	r3, #20
 8012c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012c0c:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Ki = 4;
 8012c0e:	79fb      	ldrb	r3, [r7, #7]
 8012c10:	4a0d      	ldr	r2, [pc, #52]	; (8012c48 <InitMotorPID+0xa4>)
 8012c12:	015b      	lsls	r3, r3, #5
 8012c14:	4413      	add	r3, r2
 8012c16:	3318      	adds	r3, #24
 8012c18:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8012c1c:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Kd = 2;
 8012c1e:	79fb      	ldrb	r3, [r7, #7]
 8012c20:	4a09      	ldr	r2, [pc, #36]	; (8012c48 <InitMotorPID+0xa4>)
 8012c22:	015b      	lsls	r3, r3, #5
 8012c24:	4413      	add	r3, r2
 8012c26:	331c      	adds	r3, #28
 8012c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012c2c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < Motor_Number; i++)
 8012c2e:	79fb      	ldrb	r3, [r7, #7]
 8012c30:	3301      	adds	r3, #1
 8012c32:	71fb      	strb	r3, [r7, #7]
 8012c34:	79fb      	ldrb	r3, [r7, #7]
 8012c36:	2b03      	cmp	r3, #3
 8012c38:	d9ba      	bls.n	8012bb0 <InitMotorPID+0xc>
	}
}
 8012c3a:	bf00      	nop
 8012c3c:	bf00      	nop
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr
 8012c48:	20001c70 	.word	0x20001c70

08012c4c <PID_realize>:

float PID_realize(struct _pid *pid, float speed, float actualSpeed)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b087      	sub	sp, #28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	ed87 0a02 	vstr	s0, [r7, #8]
 8012c58:	edc7 0a01 	vstr	s1, [r7, #4]
	float incrementSpeed;
	//设置当前值
	pid->SetSpeed = speed;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68ba      	ldr	r2, [r7, #8]
 8012c60:	601a      	str	r2, [r3, #0]
	pid->ActualSpeed = actualSpeed;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	605a      	str	r2, [r3, #4]
	//特殊处理 0 速度
	if (speed == 0)
 8012c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8012c6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c74:	d102      	bne.n	8012c7c <PID_realize+0x30>
	{
		return 0;
 8012c76:	f04f 0300 	mov.w	r3, #0
 8012c7a:	e04d      	b.n	8012d18 <PID_realize+0xcc>
	}

	pid->err = pid->SetSpeed - pid->ActualSpeed;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	ed93 7a00 	vldr	s14, [r3]
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	edc3 7a02 	vstr	s15, [r3, #8]
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	ed93 7a05 	vldr	s14, [r3, #20]
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ca4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	edd3 6a06 	vldr	s13, [r3, #24]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8012cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	edd3 6a07 	vldr	s13, [r3, #28]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	ed93 6a02 	vldr	s12, [r3, #8]
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	edd3 7a03 	vldr	s15, [r3, #12]
 8012cd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012cd6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8012ce0:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cec:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->ActualSpeed += incrementSpeed;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8012cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8012cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->err_last = pid->err_next;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	68da      	ldr	r2, [r3, #12]
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	611a      	str	r2, [r3, #16]
	pid->err_next = pid->err;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	689a      	ldr	r2, [r3, #8]
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	60da      	str	r2, [r3, #12]
	return pid->ActualSpeed;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	685b      	ldr	r3, [r3, #4]
}
 8012d18:	ee07 3a90 	vmov	s15, r3
 8012d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8012d20:	371c      	adds	r7, #28
 8012d22:	46bd      	mov	sp, r7
 8012d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d28:	4770      	bx	lr
	...

08012d2c <UpdateMotorSpeedPID>:
	return current;
}

//依照PID算法更新电机速度
float UpdateMotorSpeedPID(Motor_Name motor, float speed, float actualSpeed)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b086      	sub	sp, #24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	4603      	mov	r3, r0
 8012d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8012d38:	edc7 0a01 	vstr	s1, [r7, #4]
 8012d3c:	73fb      	strb	r3, [r7, #15]
	//下一轮应用值
	float ac = 0;
 8012d3e:	f04f 0300 	mov.w	r3, #0
 8012d42:	617b      	str	r3, [r7, #20]
	ac = PID_realize(&Motor_PID[motor], speed, actualSpeed);
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	015b      	lsls	r3, r3, #5
 8012d48:	4a09      	ldr	r2, [pc, #36]	; (8012d70 <UpdateMotorSpeedPID+0x44>)
 8012d4a:	4413      	add	r3, r2
 8012d4c:	edd7 0a01 	vldr	s1, [r7, #4]
 8012d50:	ed97 0a02 	vldr	s0, [r7, #8]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff ff79 	bl	8012c4c <PID_realize>
 8012d5a:	ed87 0a05 	vstr	s0, [r7, #20]
	//判断是否在上下限内
	//ac = LimitSpeed(ac, speed);

	return ac;
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	ee07 3a90 	vmov	s15, r3
}
 8012d64:	eeb0 0a67 	vmov.f32	s0, s15
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	20001c70 	.word	0x20001c70

08012d74 <Init_FATFS>:
FATFS fs; /* FatFs文件系统对象 */
FIL file; /* 文件对象 */
FRESULT f_res; /* 文件操作结果 */

void Init_FATFS()
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	af00      	add	r7, sp, #0
	FATFS_LinkDriver(&SD_Driver, SDPath);
 8012d78:	4909      	ldr	r1, [pc, #36]	; (8012da0 <Init_FATFS+0x2c>)
 8012d7a:	480a      	ldr	r0, [pc, #40]	; (8012da4 <Init_FATFS+0x30>)
 8012d7c:	f7fa f88e 	bl	800ce9c <FATFS_LinkDriver>

	//在SD卡挂载文件系统，文件系统挂载时会对SD卡初始化
	f_res = f_mount(&fs, (TCHAR const*) SDPath, 1);
 8012d80:	2201      	movs	r2, #1
 8012d82:	4907      	ldr	r1, [pc, #28]	; (8012da0 <Init_FATFS+0x2c>)
 8012d84:	4808      	ldr	r0, [pc, #32]	; (8012da8 <Init_FATFS+0x34>)
 8012d86:	f7f9 fccf 	bl	800c728 <f_mount>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	4b07      	ldr	r3, [pc, #28]	; (8012dac <Init_FATFS+0x38>)
 8012d90:	701a      	strb	r2, [r3, #0]
	printf_fatfs_error(f_res);
 8012d92:	4b06      	ldr	r3, [pc, #24]	; (8012dac <Init_FATFS+0x38>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f000 f80a 	bl	8012db0 <printf_fatfs_error>
}
 8012d9c:	bf00      	nop
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	2000129c 	.word	0x2000129c
 8012da4:	08019a0c 	.word	0x08019a0c
 8012da8:	20001cf0 	.word	0x20001cf0
 8012dac:	20002140 	.word	0x20002140

08012db0 <printf_fatfs_error>:
 * @brief  打印输出信息
 * @param  无
 * @retval 无
 */
void printf_fatfs_error(FRESULT fresult)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	4603      	mov	r3, r0
 8012db8:	71fb      	strb	r3, [r7, #7]
	switch (fresult)
 8012dba:	79fb      	ldrb	r3, [r7, #7]
 8012dbc:	2b13      	cmp	r3, #19
 8012dbe:	f200 80c3 	bhi.w	8012f48 <printf_fatfs_error+0x198>
 8012dc2:	a201      	add	r2, pc, #4	; (adr r2, 8012dc8 <printf_fatfs_error+0x18>)
 8012dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dc8:	08012e19 	.word	0x08012e19
 8012dcc:	08012e29 	.word	0x08012e29
 8012dd0:	08012e39 	.word	0x08012e39
 8012dd4:	08012e49 	.word	0x08012e49
 8012dd8:	08012e59 	.word	0x08012e59
 8012ddc:	08012e69 	.word	0x08012e69
 8012de0:	08012e79 	.word	0x08012e79
 8012de4:	08012e89 	.word	0x08012e89
 8012de8:	08012e89 	.word	0x08012e89
 8012dec:	08012e99 	.word	0x08012e99
 8012df0:	08012ea9 	.word	0x08012ea9
 8012df4:	08012eb9 	.word	0x08012eb9
 8012df8:	08012ec9 	.word	0x08012ec9
 8012dfc:	08012ed9 	.word	0x08012ed9
 8012e00:	08012ee9 	.word	0x08012ee9
 8012e04:	08012ef9 	.word	0x08012ef9
 8012e08:	08012f09 	.word	0x08012f09
 8012e0c:	08012f19 	.word	0x08012f19
 8012e10:	08012f29 	.word	0x08012f29
 8012e14:	08012f39 	.word	0x08012f39
	{
		case FR_OK:
			printfX("》操作成功。\r\n");
 8012e18:	494d      	ldr	r1, [pc, #308]	; (8012f50 <printf_fatfs_error+0x1a0>)
 8012e1a:	484e      	ldr	r0, [pc, #312]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e1c:	f001 fe90 	bl	8014b40 <siprintf>
 8012e20:	484c      	ldr	r0, [pc, #304]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e22:	f000 ff25 	bl	8013c70 <printf_Base>
			break;
 8012e26:	e08f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_DISK_ERR:
			printfX("！！硬件输入输出驱动出错。\r\n");
 8012e28:	494b      	ldr	r1, [pc, #300]	; (8012f58 <printf_fatfs_error+0x1a8>)
 8012e2a:	484a      	ldr	r0, [pc, #296]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e2c:	f001 fe88 	bl	8014b40 <siprintf>
 8012e30:	4848      	ldr	r0, [pc, #288]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e32:	f000 ff1d 	bl	8013c70 <printf_Base>
			break;
 8012e36:	e087      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_INT_ERR:
			printfX("！！断言错误。\r\n");
 8012e38:	4948      	ldr	r1, [pc, #288]	; (8012f5c <printf_fatfs_error+0x1ac>)
 8012e3a:	4846      	ldr	r0, [pc, #280]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e3c:	f001 fe80 	bl	8014b40 <siprintf>
 8012e40:	4844      	ldr	r0, [pc, #272]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e42:	f000 ff15 	bl	8013c70 <printf_Base>
			break;
 8012e46:	e07f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_NOT_READY:
			printfX("！！物理设备无法工作。\r\n");
 8012e48:	4945      	ldr	r1, [pc, #276]	; (8012f60 <printf_fatfs_error+0x1b0>)
 8012e4a:	4842      	ldr	r0, [pc, #264]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e4c:	f001 fe78 	bl	8014b40 <siprintf>
 8012e50:	4840      	ldr	r0, [pc, #256]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e52:	f000 ff0d 	bl	8013c70 <printf_Base>
			break;
 8012e56:	e077      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_NO_FILE:
			printfX("！！无法找到文件。\r\n");
 8012e58:	4942      	ldr	r1, [pc, #264]	; (8012f64 <printf_fatfs_error+0x1b4>)
 8012e5a:	483e      	ldr	r0, [pc, #248]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e5c:	f001 fe70 	bl	8014b40 <siprintf>
 8012e60:	483c      	ldr	r0, [pc, #240]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e62:	f000 ff05 	bl	8013c70 <printf_Base>
			break;
 8012e66:	e06f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_NO_PATH:
			printfX("！！无法找到路径。\r\n");
 8012e68:	493f      	ldr	r1, [pc, #252]	; (8012f68 <printf_fatfs_error+0x1b8>)
 8012e6a:	483a      	ldr	r0, [pc, #232]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e6c:	f001 fe68 	bl	8014b40 <siprintf>
 8012e70:	4838      	ldr	r0, [pc, #224]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e72:	f000 fefd 	bl	8013c70 <printf_Base>
			break;
 8012e76:	e067      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_INVALID_NAME:
			printfX("！！无效的路径名。\r\n");
 8012e78:	493c      	ldr	r1, [pc, #240]	; (8012f6c <printf_fatfs_error+0x1bc>)
 8012e7a:	4836      	ldr	r0, [pc, #216]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e7c:	f001 fe60 	bl	8014b40 <siprintf>
 8012e80:	4834      	ldr	r0, [pc, #208]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e82:	f000 fef5 	bl	8013c70 <printf_Base>
			break;
 8012e86:	e05f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_DENIED:
		case FR_EXIST:
			printfX("！！拒绝访问。\r\n");
 8012e88:	4939      	ldr	r1, [pc, #228]	; (8012f70 <printf_fatfs_error+0x1c0>)
 8012e8a:	4832      	ldr	r0, [pc, #200]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e8c:	f001 fe58 	bl	8014b40 <siprintf>
 8012e90:	4830      	ldr	r0, [pc, #192]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e92:	f000 feed 	bl	8013c70 <printf_Base>
			break;
 8012e96:	e057      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_INVALID_OBJECT:
			printfX("！！无效的文件或路径。\r\n");
 8012e98:	4936      	ldr	r1, [pc, #216]	; (8012f74 <printf_fatfs_error+0x1c4>)
 8012e9a:	482e      	ldr	r0, [pc, #184]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012e9c:	f001 fe50 	bl	8014b40 <siprintf>
 8012ea0:	482c      	ldr	r0, [pc, #176]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ea2:	f000 fee5 	bl	8013c70 <printf_Base>
			break;
 8012ea6:	e04f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_WRITE_PROTECTED:
			printfX("！！逻辑设备写保护。\r\n");
 8012ea8:	4933      	ldr	r1, [pc, #204]	; (8012f78 <printf_fatfs_error+0x1c8>)
 8012eaa:	482a      	ldr	r0, [pc, #168]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012eac:	f001 fe48 	bl	8014b40 <siprintf>
 8012eb0:	4828      	ldr	r0, [pc, #160]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012eb2:	f000 fedd 	bl	8013c70 <printf_Base>
			break;
 8012eb6:	e047      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_INVALID_DRIVE:
			printfX("！！无效的逻辑设备。\r\n");
 8012eb8:	4930      	ldr	r1, [pc, #192]	; (8012f7c <printf_fatfs_error+0x1cc>)
 8012eba:	4826      	ldr	r0, [pc, #152]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ebc:	f001 fe40 	bl	8014b40 <siprintf>
 8012ec0:	4824      	ldr	r0, [pc, #144]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ec2:	f000 fed5 	bl	8013c70 <printf_Base>
			break;
 8012ec6:	e03f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_NOT_ENABLED:
			printfX("！！无效的工作区。\r\n");
 8012ec8:	492d      	ldr	r1, [pc, #180]	; (8012f80 <printf_fatfs_error+0x1d0>)
 8012eca:	4822      	ldr	r0, [pc, #136]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ecc:	f001 fe38 	bl	8014b40 <siprintf>
 8012ed0:	4820      	ldr	r0, [pc, #128]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ed2:	f000 fecd 	bl	8013c70 <printf_Base>
			break;
 8012ed6:	e037      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_NO_FILESYSTEM:
			printfX("！！无效的文件系统。\r\n");
 8012ed8:	492a      	ldr	r1, [pc, #168]	; (8012f84 <printf_fatfs_error+0x1d4>)
 8012eda:	481e      	ldr	r0, [pc, #120]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012edc:	f001 fe30 	bl	8014b40 <siprintf>
 8012ee0:	481c      	ldr	r0, [pc, #112]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ee2:	f000 fec5 	bl	8013c70 <printf_Base>
			break;
 8012ee6:	e02f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_MKFS_ABORTED:
			printfX("！！因函数参数问题导致f_mkfs函数操作失败。\r\n");
 8012ee8:	4927      	ldr	r1, [pc, #156]	; (8012f88 <printf_fatfs_error+0x1d8>)
 8012eea:	481a      	ldr	r0, [pc, #104]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012eec:	f001 fe28 	bl	8014b40 <siprintf>
 8012ef0:	4818      	ldr	r0, [pc, #96]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012ef2:	f000 febd 	bl	8013c70 <printf_Base>
			break;
 8012ef6:	e027      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_TIMEOUT:
			printfX("！！操作超时。\r\n");
 8012ef8:	4924      	ldr	r1, [pc, #144]	; (8012f8c <printf_fatfs_error+0x1dc>)
 8012efa:	4816      	ldr	r0, [pc, #88]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012efc:	f001 fe20 	bl	8014b40 <siprintf>
 8012f00:	4814      	ldr	r0, [pc, #80]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f02:	f000 feb5 	bl	8013c70 <printf_Base>
			break;
 8012f06:	e01f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_LOCKED:
			printfX("！！文件被保护。\r\n");
 8012f08:	4921      	ldr	r1, [pc, #132]	; (8012f90 <printf_fatfs_error+0x1e0>)
 8012f0a:	4812      	ldr	r0, [pc, #72]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f0c:	f001 fe18 	bl	8014b40 <siprintf>
 8012f10:	4810      	ldr	r0, [pc, #64]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f12:	f000 fead 	bl	8013c70 <printf_Base>
			break;
 8012f16:	e017      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_NOT_ENOUGH_CORE:
			printfX("！！长文件名支持获取堆空间失败。\r\n");
 8012f18:	491e      	ldr	r1, [pc, #120]	; (8012f94 <printf_fatfs_error+0x1e4>)
 8012f1a:	480e      	ldr	r0, [pc, #56]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f1c:	f001 fe10 	bl	8014b40 <siprintf>
 8012f20:	480c      	ldr	r0, [pc, #48]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f22:	f000 fea5 	bl	8013c70 <printf_Base>
			break;
 8012f26:	e00f      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_TOO_MANY_OPEN_FILES:
			printfX("！！打开太多文件。\r\n");
 8012f28:	491b      	ldr	r1, [pc, #108]	; (8012f98 <printf_fatfs_error+0x1e8>)
 8012f2a:	480a      	ldr	r0, [pc, #40]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f2c:	f001 fe08 	bl	8014b40 <siprintf>
 8012f30:	4808      	ldr	r0, [pc, #32]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f32:	f000 fe9d 	bl	8013c70 <printf_Base>
			break;
 8012f36:	e007      	b.n	8012f48 <printf_fatfs_error+0x198>
		case FR_INVALID_PARAMETER:
			printfX("！！参数无效。\r\n");
 8012f38:	4918      	ldr	r1, [pc, #96]	; (8012f9c <printf_fatfs_error+0x1ec>)
 8012f3a:	4806      	ldr	r0, [pc, #24]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f3c:	f001 fe00 	bl	8014b40 <siprintf>
 8012f40:	4804      	ldr	r0, [pc, #16]	; (8012f54 <printf_fatfs_error+0x1a4>)
 8012f42:	f000 fe95 	bl	8013c70 <printf_Base>
			break;
 8012f46:	bf00      	nop
	}
}
 8012f48:	bf00      	nop
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	080196a0 	.word	0x080196a0
 8012f54:	20001308 	.word	0x20001308
 8012f58:	080196b8 	.word	0x080196b8
 8012f5c:	080196e4 	.word	0x080196e4
 8012f60:	080196fc 	.word	0x080196fc
 8012f64:	08019720 	.word	0x08019720
 8012f68:	08019740 	.word	0x08019740
 8012f6c:	08019760 	.word	0x08019760
 8012f70:	08019780 	.word	0x08019780
 8012f74:	08019798 	.word	0x08019798
 8012f78:	080197bc 	.word	0x080197bc
 8012f7c:	080197e0 	.word	0x080197e0
 8012f80:	08019804 	.word	0x08019804
 8012f84:	08019824 	.word	0x08019824
 8012f88:	08019848 	.word	0x08019848
 8012f8c:	08019888 	.word	0x08019888
 8012f90:	080198a0 	.word	0x080198a0
 8012f94:	080198bc 	.word	0x080198bc
 8012f98:	080198f0 	.word	0x080198f0
 8012f9c:	08019910 	.word	0x08019910

08012fa0 <Periodic_Update_BreathingLights>:
uint8_t LED1_DirInc;
uint16_t LED1_Pulsewidth;

//周期调用 更新呼吸灯
void Periodic_Update_BreathingLights()
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	af00      	add	r7, sp, #0
	if (LED1_DirInc == 0) //脉宽递增
 8012fa4:	4b15      	ldr	r3, [pc, #84]	; (8012ffc <Periodic_Update_BreathingLights+0x5c>)
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d10f      	bne.n	8012fcc <Periodic_Update_BreathingLights+0x2c>
	{
		LED1_Pulsewidth++;
 8012fac:	4b14      	ldr	r3, [pc, #80]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	4b12      	ldr	r3, [pc, #72]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fb6:	801a      	strh	r2, [r3, #0]
		if (LED1_Pulsewidth >= 999)
 8012fb8:	4b11      	ldr	r3, [pc, #68]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fba:	881b      	ldrh	r3, [r3, #0]
 8012fbc:	f240 32e6 	movw	r2, #998	; 0x3e6
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d910      	bls.n	8012fe6 <Periodic_Update_BreathingLights+0x46>
		{
			LED1_DirInc = 1; //脉宽递减
 8012fc4:	4b0d      	ldr	r3, [pc, #52]	; (8012ffc <Periodic_Update_BreathingLights+0x5c>)
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	701a      	strb	r2, [r3, #0]
 8012fca:	e00c      	b.n	8012fe6 <Periodic_Update_BreathingLights+0x46>
		}
	}
	else
	{
		LED1_Pulsewidth--;
 8012fcc:	4b0c      	ldr	r3, [pc, #48]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	3b01      	subs	r3, #1
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	4b0a      	ldr	r3, [pc, #40]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fd6:	801a      	strh	r2, [r3, #0]
		if (LED1_Pulsewidth <= 1)
 8012fd8:	4b09      	ldr	r3, [pc, #36]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d802      	bhi.n	8012fe6 <Periodic_Update_BreathingLights+0x46>
		{
			LED1_DirInc = 0; //脉宽递增
 8012fe0:	4b06      	ldr	r3, [pc, #24]	; (8012ffc <Periodic_Update_BreathingLights+0x5c>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, LED1_Pulsewidth); //设置CCR的
 8012fe6:	4b06      	ldr	r3, [pc, #24]	; (8013000 <Periodic_Update_BreathingLights+0x60>)
 8012fe8:	881a      	ldrh	r2, [r3, #0]
 8012fea:	4b06      	ldr	r3, [pc, #24]	; (8013004 <Periodic_Update_BreathingLights+0x64>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	635a      	str	r2, [r3, #52]	; 0x34
}
 8012ff0:	bf00      	nop
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	20002141 	.word	0x20002141
 8013000:	20002142 	.word	0x20002142
 8013004:	200011c4 	.word	0x200011c4

08013008 <SPI_WriteByte>:
 * @param    TxData 要发送的数据
 * @param    size   发送数据的字节大小
 * @return  0:写入成功,其他:写入失败
 */
uint8_t SPI_WriteByte(uint8_t *TxData, uint16_t size)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	460b      	mov	r3, r1
 8013012:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
 8013014:	887a      	ldrh	r2, [r7, #2]
 8013016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801301a:	6879      	ldr	r1, [r7, #4]
 801301c:	4803      	ldr	r0, [pc, #12]	; (801302c <SPI_WriteByte+0x24>)
 801301e:	f7f4 fc01 	bl	8007824 <HAL_SPI_Transmit>
 8013022:	4603      	mov	r3, r0
	//return HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);

}
 8013024:	4618      	mov	r0, r3
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	20000e80 	.word	0x20000e80

08013030 <SPI_WriteByte_DMA>:
void SPI_WriteByte_DMA(uint8_t *TxData, uint16_t size)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	460b      	mov	r3, r1
 801303a:	807b      	strh	r3, [r7, #2]
	//return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
	HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);
 801303c:	887b      	ldrh	r3, [r7, #2]
 801303e:	461a      	mov	r2, r3
 8013040:	6879      	ldr	r1, [r7, #4]
 8013042:	4803      	ldr	r0, [pc, #12]	; (8013050 <SPI_WriteByte_DMA+0x20>)
 8013044:	f7f4 fd2a 	bl	8007a9c <HAL_SPI_Transmit_DMA>

}
 8013048:	bf00      	nop
 801304a:	3708      	adds	r7, #8
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20000e80 	.word	0x20000e80

08013054 <LCD_Write_Cmd>:
 * @brief   写命令到LCD
 * @param   cmd —— 需要发送的命令
 * @return  none
 */
static void LCD_Write_Cmd(uint8_t cmd)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	4603      	mov	r3, r0
 801305c:	71fb      	strb	r3, [r7, #7]
	LCD_WR_RS(0);
 801305e:	2200      	movs	r2, #0
 8013060:	2140      	movs	r1, #64	; 0x40
 8013062:	4806      	ldr	r0, [pc, #24]	; (801307c <LCD_Write_Cmd+0x28>)
 8013064:	f7f1 fb80 	bl	8004768 <HAL_GPIO_WritePin>
	SPI_WriteByte(&cmd, 1);
 8013068:	1dfb      	adds	r3, r7, #7
 801306a:	2101      	movs	r1, #1
 801306c:	4618      	mov	r0, r3
 801306e:	f7ff ffcb 	bl	8013008 <SPI_WriteByte>
}
 8013072:	bf00      	nop
 8013074:	3708      	adds	r7, #8
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	40021800 	.word	0x40021800

08013080 <LCD_Write_Data>:
 * @brief   写数据到LCD
 * @param   dat —— 需要发送的数据
 * @return  none
 */
static void LCD_Write_Data(uint8_t dat)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	4603      	mov	r3, r0
 8013088:	71fb      	strb	r3, [r7, #7]
	LCD_WR_RS(1);
 801308a:	2201      	movs	r2, #1
 801308c:	2140      	movs	r1, #64	; 0x40
 801308e:	4806      	ldr	r0, [pc, #24]	; (80130a8 <LCD_Write_Data+0x28>)
 8013090:	f7f1 fb6a 	bl	8004768 <HAL_GPIO_WritePin>
	SPI_WriteByte(&dat, 1);
 8013094:	1dfb      	adds	r3, r7, #7
 8013096:	2101      	movs	r1, #1
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff ffb5 	bl	8013008 <SPI_WriteByte>
}
 801309e:	bf00      	nop
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	40021800 	.word	0x40021800

080130ac <LCD_Write_2Bytes>:
 * @brief  写16位的数据（两个字节）到LCD
 * @param   dat —— 需要发送的16bit数据
 * @return  none
 */
void LCD_Write_2Bytes(const uint16_t dat)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	4603      	mov	r3, r0
 80130b4:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2] = { 0 };
 80130b6:	2300      	movs	r3, #0
 80130b8:	81bb      	strh	r3, [r7, #12]

	data[0] = dat >> 8;
 80130ba:	88fb      	ldrh	r3, [r7, #6]
 80130bc:	0a1b      	lsrs	r3, r3, #8
 80130be:	b29b      	uxth	r3, r3
 80130c0:	b2db      	uxtb	r3, r3
 80130c2:	733b      	strb	r3, [r7, #12]
	LCD_Write_Data(data[0]);
 80130c4:	7b3b      	ldrb	r3, [r7, #12]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7ff ffda 	bl	8013080 <LCD_Write_Data>
	data[1] = dat;
 80130cc:	88fb      	ldrh	r3, [r7, #6]
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	737b      	strb	r3, [r7, #13]
	LCD_Write_Data(data[1]);
 80130d2:	7b7b      	ldrb	r3, [r7, #13]
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff ffd3 	bl	8013080 <LCD_Write_Data>

	//SPI_WriteByte((uint8_t*) data, 2);
}
 80130da:	bf00      	nop
 80130dc:	3710      	adds	r7, #16
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <LCD_Address_Set>:
 * @param   x1,y1   —— 起点坐标
 * @param   x2,y2   —— 终点坐标
 * @return  none
 */
void LCD_Address_Set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80130e2:	b590      	push	{r4, r7, lr}
 80130e4:	b083      	sub	sp, #12
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	4604      	mov	r4, r0
 80130ea:	4608      	mov	r0, r1
 80130ec:	4611      	mov	r1, r2
 80130ee:	461a      	mov	r2, r3
 80130f0:	4623      	mov	r3, r4
 80130f2:	80fb      	strh	r3, [r7, #6]
 80130f4:	4603      	mov	r3, r0
 80130f6:	80bb      	strh	r3, [r7, #4]
 80130f8:	460b      	mov	r3, r1
 80130fa:	807b      	strh	r3, [r7, #2]
 80130fc:	4613      	mov	r3, r2
 80130fe:	803b      	strh	r3, [r7, #0]
	/* 指定X方向操作区域 */
	LCD_Write_Cmd(0x2a);
 8013100:	202a      	movs	r0, #42	; 0x2a
 8013102:	f7ff ffa7 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(x1 >> 8);
 8013106:	88fb      	ldrh	r3, [r7, #6]
 8013108:	0a1b      	lsrs	r3, r3, #8
 801310a:	b29b      	uxth	r3, r3
 801310c:	b2db      	uxtb	r3, r3
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff ffb6 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(x1);
 8013114:	88fb      	ldrh	r3, [r7, #6]
 8013116:	b2db      	uxtb	r3, r3
 8013118:	4618      	mov	r0, r3
 801311a:	f7ff ffb1 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(x2 >> 8);
 801311e:	887b      	ldrh	r3, [r7, #2]
 8013120:	0a1b      	lsrs	r3, r3, #8
 8013122:	b29b      	uxth	r3, r3
 8013124:	b2db      	uxtb	r3, r3
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff ffaa 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(x2);
 801312c:	887b      	ldrh	r3, [r7, #2]
 801312e:	b2db      	uxtb	r3, r3
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff ffa5 	bl	8013080 <LCD_Write_Data>

	/* 指定Y方向操作区域 */
	LCD_Write_Cmd(0x2b);
 8013136:	202b      	movs	r0, #43	; 0x2b
 8013138:	f7ff ff8c 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(y1 >> 8);
 801313c:	88bb      	ldrh	r3, [r7, #4]
 801313e:	0a1b      	lsrs	r3, r3, #8
 8013140:	b29b      	uxth	r3, r3
 8013142:	b2db      	uxtb	r3, r3
 8013144:	4618      	mov	r0, r3
 8013146:	f7ff ff9b 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(y1);
 801314a:	88bb      	ldrh	r3, [r7, #4]
 801314c:	b2db      	uxtb	r3, r3
 801314e:	4618      	mov	r0, r3
 8013150:	f7ff ff96 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(y2 >> 8);
 8013154:	883b      	ldrh	r3, [r7, #0]
 8013156:	0a1b      	lsrs	r3, r3, #8
 8013158:	b29b      	uxth	r3, r3
 801315a:	b2db      	uxtb	r3, r3
 801315c:	4618      	mov	r0, r3
 801315e:	f7ff ff8f 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(y2);
 8013162:	883b      	ldrh	r3, [r7, #0]
 8013164:	b2db      	uxtb	r3, r3
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff ff8a 	bl	8013080 <LCD_Write_Data>

	/* 发送该命令，LCD开始等待接收显存数据 */
	LCD_Write_Cmd(0x2C);
 801316c:	202c      	movs	r0, #44	; 0x2c
 801316e:	f7ff ff71 	bl	8013054 <LCD_Write_Cmd>
}
 8013172:	bf00      	nop
 8013174:	370c      	adds	r7, #12
 8013176:	46bd      	mov	sp, r7
 8013178:	bd90      	pop	{r4, r7, pc}
	...

0801317c <LCD_Clear>:
 * @brief   以一种颜色清空LCD屏
 * @param   color —— 清屏颜色(16bit)
 * @return  none
 */
void LCD_Clear(uint16_t color)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	4603      	mov	r3, r0
 8013184:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	uint8_t data[2] = { 0 };  //color是16bit的，每个像素点需要两个字节的显存
 8013186:	2300      	movs	r3, #0
 8013188:	813b      	strh	r3, [r7, #8]

	/* 将16bit的color值分开为两个单独的字节 */
	data[0] = color >> 8;
 801318a:	88fb      	ldrh	r3, [r7, #6]
 801318c:	0a1b      	lsrs	r3, r3, #8
 801318e:	b29b      	uxth	r3, r3
 8013190:	b2db      	uxtb	r3, r3
 8013192:	723b      	strb	r3, [r7, #8]
	data[1] = color;
 8013194:	88fb      	ldrh	r3, [r7, #6]
 8013196:	b2db      	uxtb	r3, r3
 8013198:	727b      	strb	r3, [r7, #9]

	/* 显存的值需要逐字节写入 */
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 801319a:	2300      	movs	r3, #0
 801319c:	81bb      	strh	r3, [r7, #12]
 801319e:	e00d      	b.n	80131bc <LCD_Clear+0x40>
	{
		lcd_buf[j * 2] = data[0];
 80131a0:	89bb      	ldrh	r3, [r7, #12]
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	7a39      	ldrb	r1, [r7, #8]
 80131a6:	4a16      	ldr	r2, [pc, #88]	; (8013200 <LCD_Clear+0x84>)
 80131a8:	54d1      	strb	r1, [r2, r3]
		lcd_buf[j * 2 + 1] = data[1];
 80131aa:	89bb      	ldrh	r3, [r7, #12]
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	3301      	adds	r3, #1
 80131b0:	7a79      	ldrb	r1, [r7, #9]
 80131b2:	4a13      	ldr	r2, [pc, #76]	; (8013200 <LCD_Clear+0x84>)
 80131b4:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 80131b6:	89bb      	ldrh	r3, [r7, #12]
 80131b8:	3301      	adds	r3, #1
 80131ba:	81bb      	strh	r3, [r7, #12]
 80131bc:	89bb      	ldrh	r3, [r7, #12]
 80131be:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80131c2:	d3ed      	bcc.n	80131a0 <LCD_Clear+0x24>
	}
	/* 指定显存操作地址为全屏幕 */
	LCD_Address_Set(0, 0, LCD_Width - 1, LCD_Height - 1);
 80131c4:	23ef      	movs	r3, #239	; 0xef
 80131c6:	22ef      	movs	r2, #239	; 0xef
 80131c8:	2100      	movs	r1, #0
 80131ca:	2000      	movs	r0, #0
 80131cc:	f7ff ff89 	bl	80130e2 <LCD_Address_Set>
	/* 指定接下来的数据为数据 */
	LCD_WR_RS(1);
 80131d0:	2201      	movs	r2, #1
 80131d2:	2140      	movs	r1, #64	; 0x40
 80131d4:	480b      	ldr	r0, [pc, #44]	; (8013204 <LCD_Clear+0x88>)
 80131d6:	f7f1 fac7 	bl	8004768 <HAL_GPIO_WritePin>
	/* 将显存缓冲区的数据全部写入缓冲区 */
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 80131da:	2300      	movs	r3, #0
 80131dc:	81fb      	strh	r3, [r7, #14]
 80131de:	e007      	b.n	80131f0 <LCD_Clear+0x74>
	{
		SPI_WriteByte(lcd_buf, (uint16_t) LCD_Buf_Size);
 80131e0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80131e4:	4806      	ldr	r0, [pc, #24]	; (8013200 <LCD_Clear+0x84>)
 80131e6:	f7ff ff0f 	bl	8013008 <SPI_WriteByte>
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 80131ea:	89fb      	ldrh	r3, [r7, #14]
 80131ec:	3301      	adds	r3, #1
 80131ee:	81fb      	strh	r3, [r7, #14]
 80131f0:	89fb      	ldrh	r3, [r7, #14]
 80131f2:	2b63      	cmp	r3, #99	; 0x63
 80131f4:	d9f4      	bls.n	80131e0 <LCD_Clear+0x64>
	}
}
 80131f6:	bf00      	nop
 80131f8:	bf00      	nop
 80131fa:	3710      	adds	r7, #16
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	20002144 	.word	0x20002144
 8013204:	40021800 	.word	0x40021800

08013208 <LCD_Init>:
 * @brief   LCD初始化
 * @param   none
 * @return  none
 */
void LCD_Init(void)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	af00      	add	r7, sp, #0
	/* 初始化和LCD通信的引脚 */
	/* 复位LCD */
	LCD_PWR(0);
 801320c:	2200      	movs	r2, #0
 801320e:	2110      	movs	r1, #16
 8013210:	486a      	ldr	r0, [pc, #424]	; (80133bc <LCD_Init+0x1b4>)
 8013212:	f7f1 faa9 	bl	8004768 <HAL_GPIO_WritePin>
	LCD_RST(0);
 8013216:	2200      	movs	r2, #0
 8013218:	2120      	movs	r1, #32
 801321a:	4868      	ldr	r0, [pc, #416]	; (80133bc <LCD_Init+0x1b4>)
 801321c:	f7f1 faa4 	bl	8004768 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8013220:	2064      	movs	r0, #100	; 0x64
 8013222:	f7ef ffdd 	bl	80031e0 <HAL_Delay>
	LCD_RST(1);
 8013226:	2201      	movs	r2, #1
 8013228:	2120      	movs	r1, #32
 801322a:	4864      	ldr	r0, [pc, #400]	; (80133bc <LCD_Init+0x1b4>)
 801322c:	f7f1 fa9c 	bl	8004768 <HAL_GPIO_WritePin>

	HAL_Delay(120);
 8013230:	2078      	movs	r0, #120	; 0x78
 8013232:	f7ef ffd5 	bl	80031e0 <HAL_Delay>

	/* 关闭睡眠模式 */
	LCD_Write_Cmd(0x11);
 8013236:	2011      	movs	r0, #17
 8013238:	f7ff ff0c 	bl	8013054 <LCD_Write_Cmd>
	HAL_Delay(120);
 801323c:	2078      	movs	r0, #120	; 0x78
 801323e:	f7ef ffcf 	bl	80031e0 <HAL_Delay>

	/* 开始设置显存扫描模式，数据格式等 */
	LCD_Write_Cmd(0x36);
 8013242:	2036      	movs	r0, #54	; 0x36
 8013244:	f7ff ff06 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8013248:	2000      	movs	r0, #0
 801324a:	f7ff ff19 	bl	8013080 <LCD_Write_Data>
	/* RGB 5-6-5-bit格式  */
	LCD_Write_Cmd(0x3A);
 801324e:	203a      	movs	r0, #58	; 0x3a
 8013250:	f7ff ff00 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x65);
 8013254:	2065      	movs	r0, #101	; 0x65
 8013256:	f7ff ff13 	bl	8013080 <LCD_Write_Data>
	/* porch 设置 */
	LCD_Write_Cmd(0xB2);
 801325a:	20b2      	movs	r0, #178	; 0xb2
 801325c:	f7ff fefa 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x0C);
 8013260:	200c      	movs	r0, #12
 8013262:	f7ff ff0d 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8013266:	200c      	movs	r0, #12
 8013268:	f7ff ff0a 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 801326c:	2000      	movs	r0, #0
 801326e:	f7ff ff07 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 8013272:	2033      	movs	r0, #51	; 0x33
 8013274:	f7ff ff04 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 8013278:	2033      	movs	r0, #51	; 0x33
 801327a:	f7ff ff01 	bl	8013080 <LCD_Write_Data>
	/* VGH设置 */
	LCD_Write_Cmd(0xB7);
 801327e:	20b7      	movs	r0, #183	; 0xb7
 8013280:	f7ff fee8 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x72);
 8013284:	2072      	movs	r0, #114	; 0x72
 8013286:	f7ff fefb 	bl	8013080 <LCD_Write_Data>
	/* VCOM 设置 */
	LCD_Write_Cmd(0xBB);
 801328a:	20bb      	movs	r0, #187	; 0xbb
 801328c:	f7ff fee2 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x3D);
 8013290:	203d      	movs	r0, #61	; 0x3d
 8013292:	f7ff fef5 	bl	8013080 <LCD_Write_Data>
	/* LCM 设置 */
	LCD_Write_Cmd(0xC0);
 8013296:	20c0      	movs	r0, #192	; 0xc0
 8013298:	f7ff fedc 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x2C);
 801329c:	202c      	movs	r0, #44	; 0x2c
 801329e:	f7ff feef 	bl	8013080 <LCD_Write_Data>
	/* VDV and VRH 设置 */
	LCD_Write_Cmd(0xC2);
 80132a2:	20c2      	movs	r0, #194	; 0xc2
 80132a4:	f7ff fed6 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 80132a8:	2001      	movs	r0, #1
 80132aa:	f7ff fee9 	bl	8013080 <LCD_Write_Data>
	/* VRH 设置 */
	LCD_Write_Cmd(0xC3);
 80132ae:	20c3      	movs	r0, #195	; 0xc3
 80132b0:	f7ff fed0 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x19);
 80132b4:	2019      	movs	r0, #25
 80132b6:	f7ff fee3 	bl	8013080 <LCD_Write_Data>
	/* VDV 设置 */
	LCD_Write_Cmd(0xC4);
 80132ba:	20c4      	movs	r0, #196	; 0xc4
 80132bc:	f7ff feca 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 80132c0:	2020      	movs	r0, #32
 80132c2:	f7ff fedd 	bl	8013080 <LCD_Write_Data>
	/* 普通模式下显存速率设置 60Mhz */
	LCD_Write_Cmd(0xC6);
 80132c6:	20c6      	movs	r0, #198	; 0xc6
 80132c8:	f7ff fec4 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 80132cc:	200f      	movs	r0, #15
 80132ce:	f7ff fed7 	bl	8013080 <LCD_Write_Data>
	/* 电源控制 */
	LCD_Write_Cmd(0xD0);
 80132d2:	20d0      	movs	r0, #208	; 0xd0
 80132d4:	f7ff febe 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0xA4);
 80132d8:	20a4      	movs	r0, #164	; 0xa4
 80132da:	f7ff fed1 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0xA1);
 80132de:	20a1      	movs	r0, #161	; 0xa1
 80132e0:	f7ff fece 	bl	8013080 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE0);
 80132e4:	20e0      	movs	r0, #224	; 0xe0
 80132e6:	f7ff feb5 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 80132ea:	20d0      	movs	r0, #208	; 0xd0
 80132ec:	f7ff fec8 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 80132f0:	2004      	movs	r0, #4
 80132f2:	f7ff fec5 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 80132f6:	200d      	movs	r0, #13
 80132f8:	f7ff fec2 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 80132fc:	2011      	movs	r0, #17
 80132fe:	f7ff febf 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 8013302:	2013      	movs	r0, #19
 8013304:	f7ff febc 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x2B);
 8013308:	202b      	movs	r0, #43	; 0x2b
 801330a:	f7ff feb9 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 801330e:	203f      	movs	r0, #63	; 0x3f
 8013310:	f7ff feb6 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x54);
 8013314:	2054      	movs	r0, #84	; 0x54
 8013316:	f7ff feb3 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x4C);
 801331a:	204c      	movs	r0, #76	; 0x4c
 801331c:	f7ff feb0 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x18);
 8013320:	2018      	movs	r0, #24
 8013322:	f7ff fead 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 8013326:	200d      	movs	r0, #13
 8013328:	f7ff feaa 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 801332c:	200b      	movs	r0, #11
 801332e:	f7ff fea7 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 8013332:	201f      	movs	r0, #31
 8013334:	f7ff fea4 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 8013338:	2023      	movs	r0, #35	; 0x23
 801333a:	f7ff fea1 	bl	8013080 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE1);
 801333e:	20e1      	movs	r0, #225	; 0xe1
 8013340:	f7ff fe88 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 8013344:	20d0      	movs	r0, #208	; 0xd0
 8013346:	f7ff fe9b 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 801334a:	2004      	movs	r0, #4
 801334c:	f7ff fe98 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8013350:	200c      	movs	r0, #12
 8013352:	f7ff fe95 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 8013356:	2011      	movs	r0, #17
 8013358:	f7ff fe92 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 801335c:	2013      	movs	r0, #19
 801335e:	f7ff fe8f 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 8013362:	202c      	movs	r0, #44	; 0x2c
 8013364:	f7ff fe8c 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8013368:	203f      	movs	r0, #63	; 0x3f
 801336a:	f7ff fe89 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x44);
 801336e:	2044      	movs	r0, #68	; 0x44
 8013370:	f7ff fe86 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x51);
 8013374:	2051      	movs	r0, #81	; 0x51
 8013376:	f7ff fe83 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x2F);
 801337a:	202f      	movs	r0, #47	; 0x2f
 801337c:	f7ff fe80 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 8013380:	201f      	movs	r0, #31
 8013382:	f7ff fe7d 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 8013386:	201f      	movs	r0, #31
 8013388:	f7ff fe7a 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x20);
 801338c:	2020      	movs	r0, #32
 801338e:	f7ff fe77 	bl	8013080 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 8013392:	2023      	movs	r0, #35	; 0x23
 8013394:	f7ff fe74 	bl	8013080 <LCD_Write_Data>
	/* 显示开 */
	LCD_Write_Cmd(0x21);
 8013398:	2021      	movs	r0, #33	; 0x21
 801339a:	f7ff fe5b 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x29);
 801339e:	2029      	movs	r0, #41	; 0x29
 80133a0:	f7ff fe58 	bl	8013054 <LCD_Write_Cmd>

	/* 清屏为白色 */
	LCD_Clear(WHITE);
 80133a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80133a8:	f7ff fee8 	bl	801317c <LCD_Clear>

	/*打开显示*/
	LCD_PWR(1);
 80133ac:	2201      	movs	r2, #1
 80133ae:	2110      	movs	r1, #16
 80133b0:	4802      	ldr	r0, [pc, #8]	; (80133bc <LCD_Init+0x1b4>)
 80133b2:	f7f1 f9d9 	bl	8004768 <HAL_GPIO_WritePin>
}
 80133b6:	bf00      	nop
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	40021800 	.word	0x40021800

080133c0 <LCD_ShowChar>:
 * @param   size	字体大小(支持16/24/32号字体)
 * @return  none
 * @note		需要font.h字库文件的支持
 */
void LCD_ShowChar(uint16_t x, uint16_t y, char ch, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b087      	sub	sp, #28
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	4604      	mov	r4, r0
 80133c8:	4608      	mov	r0, r1
 80133ca:	4611      	mov	r1, r2
 80133cc:	461a      	mov	r2, r3
 80133ce:	4623      	mov	r3, r4
 80133d0:	80fb      	strh	r3, [r7, #6]
 80133d2:	4603      	mov	r3, r0
 80133d4:	80bb      	strh	r3, [r7, #4]
 80133d6:	460b      	mov	r3, r1
 80133d8:	70fb      	strb	r3, [r7, #3]
 80133da:	4613      	mov	r3, r2
 80133dc:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0, j = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	617b      	str	r3, [r7, #20]
 80133e2:	2300      	movs	r3, #0
 80133e4:	613b      	str	r3, [r7, #16]
	uint8_t temp = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	73fb      	strb	r3, [r7, #15]
	uint8_t size = 0;
 80133ea:	2300      	movs	r3, #0
 80133ec:	737b      	strb	r3, [r7, #13]
	uint8_t t = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	73bb      	strb	r3, [r7, #14]

	/* 检测显示是否会越界 */
	if ((x > (LCD_Width - font_size / 2)) || (y > (LCD_Height - font_size)))
 80133f2:	88fa      	ldrh	r2, [r7, #6]
 80133f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80133f8:	085b      	lsrs	r3, r3, #1
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8013400:	429a      	cmp	r2, r3
 8013402:	f300 8110 	bgt.w	8013626 <LCD_ShowChar+0x266>
 8013406:	88ba      	ldrh	r2, [r7, #4]
 8013408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801340c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8013410:	429a      	cmp	r2, r3
 8013412:	f300 8108 	bgt.w	8013626 <LCD_ShowChar+0x266>
		return;

	/* 根据字符大小设置显存操作区域 */
	LCD_Address_Set(x, y, x + font_size / 2 - 1, y + font_size - 1);
 8013416:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801341a:	085b      	lsrs	r3, r3, #1
 801341c:	b2db      	uxtb	r3, r3
 801341e:	b29a      	uxth	r2, r3
 8013420:	88fb      	ldrh	r3, [r7, #6]
 8013422:	4413      	add	r3, r2
 8013424:	b29b      	uxth	r3, r3
 8013426:	3b01      	subs	r3, #1
 8013428:	b29c      	uxth	r4, r3
 801342a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801342e:	b29a      	uxth	r2, r3
 8013430:	88bb      	ldrh	r3, [r7, #4]
 8013432:	4413      	add	r3, r2
 8013434:	b29b      	uxth	r3, r3
 8013436:	3b01      	subs	r3, #1
 8013438:	b29b      	uxth	r3, r3
 801343a:	88b9      	ldrh	r1, [r7, #4]
 801343c:	88f8      	ldrh	r0, [r7, #6]
 801343e:	4622      	mov	r2, r4
 8013440:	f7ff fe4f 	bl	80130e2 <LCD_Address_Set>

	/* 计算字符在字库中的偏移值*/
	uint8_t charIndex = ch - ' ';
 8013444:	78fb      	ldrb	r3, [r7, #3]
 8013446:	3b20      	subs	r3, #32
 8013448:	733b      	strb	r3, [r7, #12]

	/* 显示16号/32号字体 */
	if ((font_size == 16) || (font_size == 32))
 801344a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801344e:	2b10      	cmp	r3, #16
 8013450:	d003      	beq.n	801345a <LCD_ShowChar+0x9a>
 8013452:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013456:	2b20      	cmp	r3, #32
 8013458:	d158      	bne.n	801350c <LCD_ShowChar+0x14c>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 801345a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801345e:	08db      	lsrs	r3, r3, #3
 8013460:	b2db      	uxtb	r3, r3
 8013462:	461a      	mov	r2, r3
 8013464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013468:	f003 0307 	and.w	r3, r3, #7
 801346c:	b2db      	uxtb	r3, r3
 801346e:	2b00      	cmp	r3, #0
 8013470:	bf14      	ite	ne
 8013472:	2301      	movne	r3, #1
 8013474:	2300      	moveq	r3, #0
 8013476:	b2db      	uxtb	r3, r3
 8013478:	4413      	add	r3, r2
 801347a:	b2da      	uxtb	r2, r3
 801347c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013480:	085b      	lsrs	r3, r3, #1
 8013482:	b2db      	uxtb	r3, r3
 8013484:	fb12 f303 	smulbb	r3, r2, r3
 8013488:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 801348a:	2300      	movs	r3, #0
 801348c:	617b      	str	r3, [r7, #20]
 801348e:	e038      	b.n	8013502 <LCD_ShowChar+0x142>
		{
			if (font_size == 16)
 8013490:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013494:	2b10      	cmp	r3, #16
 8013496:	d108      	bne.n	80134aa <LCD_ShowChar+0xea>
				temp = F16X8[charIndex][i];	//调用1608字体
 8013498:	7b3b      	ldrb	r3, [r7, #12]
 801349a:	4a67      	ldr	r2, [pc, #412]	; (8013638 <LCD_ShowChar+0x278>)
 801349c:	011b      	lsls	r3, r3, #4
 801349e:	441a      	add	r2, r3
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	4413      	add	r3, r2
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	73fb      	strb	r3, [r7, #15]
 80134a8:	e00f      	b.n	80134ca <LCD_ShowChar+0x10a>
			else if (font_size == 32)
 80134aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134ae:	2b20      	cmp	r3, #32
 80134b0:	f040 80bb 	bne.w	801362a <LCD_ShowChar+0x26a>
				temp = F32X16[charIndex][i];	//调用3216字体
 80134b4:	7b3a      	ldrb	r2, [r7, #12]
 80134b6:	4961      	ldr	r1, [pc, #388]	; (801363c <LCD_ShowChar+0x27c>)
 80134b8:	4613      	mov	r3, r2
 80134ba:	011b      	lsls	r3, r3, #4
 80134bc:	1a9b      	subs	r3, r3, r2
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	18ca      	adds	r2, r1, r3
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	4413      	add	r3, r2
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	73fb      	strb	r3, [r7, #15]
			else
				return;			//没有的字库

			for (j = 0; j < 8; j++)
 80134ca:	2300      	movs	r3, #0
 80134cc:	613b      	str	r3, [r7, #16]
 80134ce:	e012      	b.n	80134f6 <LCD_ShowChar+0x136>
			{
				if (temp & 0x80)
 80134d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	da04      	bge.n	80134e2 <LCD_ShowChar+0x122>
					LCD_Write_2Bytes(font_color);
 80134d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80134da:	4618      	mov	r0, r3
 80134dc:	f7ff fde6 	bl	80130ac <LCD_Write_2Bytes>
 80134e0:	e003      	b.n	80134ea <LCD_ShowChar+0x12a>
				else
					LCD_Write_2Bytes(back_color);
 80134e2:	883b      	ldrh	r3, [r7, #0]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ff fde1 	bl	80130ac <LCD_Write_2Bytes>

				temp <<= 1;
 80134ea:	7bfb      	ldrb	r3, [r7, #15]
 80134ec:	005b      	lsls	r3, r3, #1
 80134ee:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	3301      	adds	r3, #1
 80134f4:	613b      	str	r3, [r7, #16]
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	2b07      	cmp	r3, #7
 80134fa:	d9e9      	bls.n	80134d0 <LCD_ShowChar+0x110>
		for (i = 0; i < size; i++)
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	3301      	adds	r3, #1
 8013500:	617b      	str	r3, [r7, #20]
 8013502:	7b7b      	ldrb	r3, [r7, #13]
 8013504:	697a      	ldr	r2, [r7, #20]
 8013506:	429a      	cmp	r2, r3
 8013508:	d3c2      	bcc.n	8013490 <LCD_ShowChar+0xd0>
	if ((font_size == 16) || (font_size == 32))
 801350a:	e091      	b.n	8013630 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 显示12号字体 */
	else if (font_size == 12)
 801350c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013510:	2b0c      	cmp	r3, #12
 8013512:	d146      	bne.n	80135a2 <LCD_ShowChar+0x1e2>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 8013514:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013518:	08db      	lsrs	r3, r3, #3
 801351a:	b2db      	uxtb	r3, r3
 801351c:	461a      	mov	r2, r3
 801351e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013522:	f003 0307 	and.w	r3, r3, #7
 8013526:	b2db      	uxtb	r3, r3
 8013528:	2b00      	cmp	r3, #0
 801352a:	bf14      	ite	ne
 801352c:	2301      	movne	r3, #1
 801352e:	2300      	moveq	r3, #0
 8013530:	b2db      	uxtb	r3, r3
 8013532:	4413      	add	r3, r2
 8013534:	b2da      	uxtb	r2, r3
 8013536:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801353a:	085b      	lsrs	r3, r3, #1
 801353c:	b2db      	uxtb	r3, r3
 801353e:	fb12 f303 	smulbb	r3, r2, r3
 8013542:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 8013544:	2300      	movs	r3, #0
 8013546:	617b      	str	r3, [r7, #20]
 8013548:	e026      	b.n	8013598 <LCD_ShowChar+0x1d8>
		{
			temp = F12X6[charIndex][i];
 801354a:	7b3a      	ldrb	r2, [r7, #12]
 801354c:	493c      	ldr	r1, [pc, #240]	; (8013640 <LCD_ShowChar+0x280>)
 801354e:	4613      	mov	r3, r2
 8013550:	005b      	lsls	r3, r3, #1
 8013552:	4413      	add	r3, r2
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	18ca      	adds	r2, r1, r3
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	4413      	add	r3, r2
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	73fb      	strb	r3, [r7, #15]

			for (j = 0; j < 6; j++)
 8013560:	2300      	movs	r3, #0
 8013562:	613b      	str	r3, [r7, #16]
 8013564:	e012      	b.n	801358c <LCD_ShowChar+0x1cc>
			{
				if (temp & 0x80)
 8013566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801356a:	2b00      	cmp	r3, #0
 801356c:	da04      	bge.n	8013578 <LCD_ShowChar+0x1b8>
					LCD_Write_2Bytes(font_color);
 801356e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013570:	4618      	mov	r0, r3
 8013572:	f7ff fd9b 	bl	80130ac <LCD_Write_2Bytes>
 8013576:	e003      	b.n	8013580 <LCD_ShowChar+0x1c0>
				else
					LCD_Write_2Bytes(back_color);
 8013578:	883b      	ldrh	r3, [r7, #0]
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff fd96 	bl	80130ac <LCD_Write_2Bytes>

				temp <<= 1;
 8013580:	7bfb      	ldrb	r3, [r7, #15]
 8013582:	005b      	lsls	r3, r3, #1
 8013584:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 6; j++)
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	3301      	adds	r3, #1
 801358a:	613b      	str	r3, [r7, #16]
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	2b05      	cmp	r3, #5
 8013590:	d9e9      	bls.n	8013566 <LCD_ShowChar+0x1a6>
		for (i = 0; i < size; i++)
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	3301      	adds	r3, #1
 8013596:	617b      	str	r3, [r7, #20]
 8013598:	7b7b      	ldrb	r3, [r7, #13]
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	429a      	cmp	r2, r3
 801359e:	d3d4      	bcc.n	801354a <LCD_ShowChar+0x18a>
 80135a0:	e046      	b.n	8013630 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 显示24号字体 */
	else if (font_size == 24)
 80135a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135a6:	2b18      	cmp	r3, #24
 80135a8:	d141      	bne.n	801362e <LCD_ShowChar+0x26e>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size * 16) / 8;
 80135aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135ae:	005b      	lsls	r3, r3, #1
 80135b0:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 80135b2:	2300      	movs	r3, #0
 80135b4:	617b      	str	r3, [r7, #20]
 80135b6:	e031      	b.n	801361c <LCD_ShowChar+0x25c>
		{
			temp = F24X12[charIndex][i];
 80135b8:	7b3a      	ldrb	r2, [r7, #12]
 80135ba:	4922      	ldr	r1, [pc, #136]	; (8013644 <LCD_ShowChar+0x284>)
 80135bc:	4613      	mov	r3, r2
 80135be:	005b      	lsls	r3, r3, #1
 80135c0:	4413      	add	r3, r2
 80135c2:	011b      	lsls	r3, r3, #4
 80135c4:	18ca      	adds	r2, r1, r3
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	4413      	add	r3, r2
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	73fb      	strb	r3, [r7, #15]
			if (i % 2 == 0)
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	f003 0301 	and.w	r3, r3, #1
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d102      	bne.n	80135de <LCD_ShowChar+0x21e>
				t = 8;
 80135d8:	2308      	movs	r3, #8
 80135da:	73bb      	strb	r3, [r7, #14]
 80135dc:	e001      	b.n	80135e2 <LCD_ShowChar+0x222>
			else
				t = 4;
 80135de:	2304      	movs	r3, #4
 80135e0:	73bb      	strb	r3, [r7, #14]
			for (j = 0; j < t; j++)
 80135e2:	2300      	movs	r3, #0
 80135e4:	613b      	str	r3, [r7, #16]
 80135e6:	e012      	b.n	801360e <LCD_ShowChar+0x24e>
			{
				if (temp & 0x80)
 80135e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	da04      	bge.n	80135fa <LCD_ShowChar+0x23a>
					LCD_Write_2Bytes(font_color);
 80135f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7ff fd5a 	bl	80130ac <LCD_Write_2Bytes>
 80135f8:	e003      	b.n	8013602 <LCD_ShowChar+0x242>
				else
					LCD_Write_2Bytes(back_color);
 80135fa:	883b      	ldrh	r3, [r7, #0]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7ff fd55 	bl	80130ac <LCD_Write_2Bytes>

				temp <<= 1;
 8013602:	7bfb      	ldrb	r3, [r7, #15]
 8013604:	005b      	lsls	r3, r3, #1
 8013606:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < t; j++)
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	3301      	adds	r3, #1
 801360c:	613b      	str	r3, [r7, #16]
 801360e:	7bbb      	ldrb	r3, [r7, #14]
 8013610:	693a      	ldr	r2, [r7, #16]
 8013612:	429a      	cmp	r2, r3
 8013614:	d3e8      	bcc.n	80135e8 <LCD_ShowChar+0x228>
		for (i = 0; i < size; i++)
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	3301      	adds	r3, #1
 801361a:	617b      	str	r3, [r7, #20]
 801361c:	7b7b      	ldrb	r3, [r7, #13]
 801361e:	697a      	ldr	r2, [r7, #20]
 8013620:	429a      	cmp	r2, r3
 8013622:	d3c9      	bcc.n	80135b8 <LCD_ShowChar+0x1f8>
 8013624:	e004      	b.n	8013630 <LCD_ShowChar+0x270>
		return;
 8013626:	bf00      	nop
 8013628:	e002      	b.n	8013630 <LCD_ShowChar+0x270>
				return;			//没有的字库
 801362a:	bf00      	nop
 801362c:	e000      	b.n	8013630 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 其余字体 */
	else
		return;
 801362e:	bf00      	nop
}
 8013630:	371c      	adds	r7, #28
 8013632:	46bd      	mov	sp, r7
 8013634:	bd90      	pop	{r4, r7, pc}
 8013636:	bf00      	nop
 8013638:	0801af20 	.word	0x0801af20
 801363c:	0801c6e0 	.word	0x0801c6e0
 8013640:	0801aaac 	.word	0x0801aaac
 8013644:	0801b510 	.word	0x0801b510

08013648 <LCD_ShowCharStr>:
 * @return  none
 * @note		1. 需要font.h字库文件的支持
 * 					2. 超过指定width不显示超过的字符
 */
void LCD_ShowCharStr(uint16_t x, uint16_t y, uint8_t max_width, char *str, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 8013648:	b590      	push	{r4, r7, lr}
 801364a:	b087      	sub	sp, #28
 801364c:	af02      	add	r7, sp, #8
 801364e:	607b      	str	r3, [r7, #4]
 8013650:	4603      	mov	r3, r0
 8013652:	81fb      	strh	r3, [r7, #14]
 8013654:	460b      	mov	r3, r1
 8013656:	81bb      	strh	r3, [r7, #12]
 8013658:	4613      	mov	r3, r2
 801365a:	72fb      	strb	r3, [r7, #11]

	max_width += x;
 801365c:	89fb      	ldrh	r3, [r7, #14]
 801365e:	b2da      	uxtb	r2, r3
 8013660:	7afb      	ldrb	r3, [r7, #11]
 8013662:	4413      	add	r3, r2
 8013664:	72fb      	strb	r3, [r7, #11]

	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 8013666:	e01c      	b.n	80136a2 <LCD_ShowCharStr+0x5a>
	{
		if (x >= max_width)
 8013668:	7afb      	ldrb	r3, [r7, #11]
 801366a:	b29b      	uxth	r3, r3
 801366c:	89fa      	ldrh	r2, [r7, #14]
 801366e:	429a      	cmp	r2, r3
 8013670:	d220      	bcs.n	80136b4 <LCD_ShowCharStr+0x6c>
		{
			//x方向越界，结束
			break;
		}

		LCD_ShowChar(x, y, *str, back_color, font_color, font_size);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	781a      	ldrb	r2, [r3, #0]
 8013676:	8c3c      	ldrh	r4, [r7, #32]
 8013678:	89b9      	ldrh	r1, [r7, #12]
 801367a:	89f8      	ldrh	r0, [r7, #14]
 801367c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013684:	9300      	str	r3, [sp, #0]
 8013686:	4623      	mov	r3, r4
 8013688:	f7ff fe9a 	bl	80133c0 <LCD_ShowChar>
		x += font_size / 2;
 801368c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013690:	085b      	lsrs	r3, r3, #1
 8013692:	b2db      	uxtb	r3, r3
 8013694:	b29a      	uxth	r2, r3
 8013696:	89fb      	ldrh	r3, [r7, #14]
 8013698:	4413      	add	r3, r2
 801369a:	81fb      	strh	r3, [r7, #14]
		str++;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	3301      	adds	r3, #1
 80136a0:	607b      	str	r3, [r7, #4]
	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b7e      	cmp	r3, #126	; 0x7e
 80136a8:	d805      	bhi.n	80136b6 <LCD_ShowCharStr+0x6e>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	2b1f      	cmp	r3, #31
 80136b0:	d8da      	bhi.n	8013668 <LCD_ShowCharStr+0x20>
	}
}
 80136b2:	e000      	b.n	80136b6 <LCD_ShowCharStr+0x6e>
			break;
 80136b4:	bf00      	nop
}
 80136b6:	bf00      	nop
 80136b8:	3714      	adds	r7, #20
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd90      	pop	{r4, r7, pc}
	...

080136c0 <LCD_Show_Image>:
 * @param   p —— 图片缓存数据起始地址
 * @note		Image2Lcd取模方式：C语言数据/水平扫描/16位真彩色(RGB565)/高位在前		其他的不要选
 * @return  none
 */
void LCD_Show_Image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint8_t *p)
{
 80136c0:	b590      	push	{r4, r7, lr}
 80136c2:	b087      	sub	sp, #28
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	4604      	mov	r4, r0
 80136c8:	4608      	mov	r0, r1
 80136ca:	4611      	mov	r1, r2
 80136cc:	461a      	mov	r2, r3
 80136ce:	4623      	mov	r3, r4
 80136d0:	80fb      	strh	r3, [r7, #6]
 80136d2:	4603      	mov	r3, r0
 80136d4:	80bb      	strh	r3, [r7, #4]
 80136d6:	460b      	mov	r3, r1
 80136d8:	807b      	strh	r3, [r7, #2]
 80136da:	4613      	mov	r3, r2
 80136dc:	803b      	strh	r3, [r7, #0]
	uint32_t img_size = width * height * 2;		//图片所占字节数
 80136de:	887b      	ldrh	r3, [r7, #2]
 80136e0:	883a      	ldrh	r2, [r7, #0]
 80136e2:	fb02 f303 	mul.w	r3, r2, r3
 80136e6:	005b      	lsls	r3, r3, #1
 80136e8:	60fb      	str	r3, [r7, #12]
	uint32_t remain_size = img_size;									//图片每次发送后剩余的字节数
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	74fb      	strb	r3, [r7, #19]
	uint8_t flag = 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	74bb      	strb	r3, [r7, #18]

	/* 错误检测 */
	if (x + width > LCD_Width || y + height > LCD_Height)
 80136f6:	88fa      	ldrh	r2, [r7, #6]
 80136f8:	887b      	ldrh	r3, [r7, #2]
 80136fa:	4413      	add	r3, r2
 80136fc:	2bf0      	cmp	r3, #240	; 0xf0
 80136fe:	dc53      	bgt.n	80137a8 <LCD_Show_Image+0xe8>
 8013700:	88ba      	ldrh	r2, [r7, #4]
 8013702:	883b      	ldrh	r3, [r7, #0]
 8013704:	4413      	add	r3, r2
 8013706:	2bf0      	cmp	r3, #240	; 0xf0
 8013708:	dc4e      	bgt.n	80137a8 <LCD_Show_Image+0xe8>
	{
		return;
	}

	LCD_Address_Set(x, y, x + width - 1, y + height - 1);
 801370a:	88fa      	ldrh	r2, [r7, #6]
 801370c:	887b      	ldrh	r3, [r7, #2]
 801370e:	4413      	add	r3, r2
 8013710:	b29b      	uxth	r3, r3
 8013712:	3b01      	subs	r3, #1
 8013714:	b29c      	uxth	r4, r3
 8013716:	88ba      	ldrh	r2, [r7, #4]
 8013718:	883b      	ldrh	r3, [r7, #0]
 801371a:	4413      	add	r3, r2
 801371c:	b29b      	uxth	r3, r3
 801371e:	3b01      	subs	r3, #1
 8013720:	b29b      	uxth	r3, r3
 8013722:	88b9      	ldrh	r1, [r7, #4]
 8013724:	88f8      	ldrh	r0, [r7, #6]
 8013726:	4622      	mov	r2, r4
 8013728:	f7ff fcdb 	bl	80130e2 <LCD_Address_Set>

	LCD_WR_RS(1);
 801372c:	2201      	movs	r2, #1
 801372e:	2140      	movs	r1, #64	; 0x40
 8013730:	481f      	ldr	r0, [pc, #124]	; (80137b0 <LCD_Show_Image+0xf0>)
 8013732:	f7f1 f819 	bl	8004768 <HAL_GPIO_WritePin>

	/* SPI每次最大发送2^16 = 65536个数据,图片最大大小为240*240*2 = 115200，会超过此大小，所以设计循环发送算法 */
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 8013736:	2300      	movs	r3, #0
 8013738:	74fb      	strb	r3, [r7, #19]
 801373a:	e02f      	b.n	801379c <LCD_Show_Image+0xdc>
	{
		if (flag != 0)
 801373c:	7cbb      	ldrb	r3, [r7, #18]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d002      	beq.n	8013748 <LCD_Show_Image+0x88>
		{
			//非首次进入 等待传输完成
			delay_us(SPI_DMA_Delay_us);
 8013742:	20b4      	movs	r0, #180	; 0xb4
 8013744:	f7fd fa12 	bl	8010b6c <delay_us>
		}
		if (remain_size / SPI_DMA_Max_Length >= 1)
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801374e:	d30f      	bcc.n	8013770 <LCD_Show_Image+0xb0>
		{
			SPI_WriteByte_DMA((uint8_t*) p, SPI_DMA_Max_Length - 1);
 8013750:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8013754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013756:	f7ff fc6b 	bl	8013030 <SPI_WriteByte_DMA>
			p += SPI_DMA_Max_Length - 1;
 801375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8013760:	337f      	adds	r3, #127	; 0x7f
 8013762:	62bb      	str	r3, [r7, #40]	; 0x28
			remain_size -= SPI_DMA_Max_Length - 1;
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 801376a:	3b7f      	subs	r3, #127	; 0x7f
 801376c:	617b      	str	r3, [r7, #20]
 801376e:	e010      	b.n	8013792 <LCD_Show_Image+0xd2>

		}
		else
		{
			SPI_WriteByte_DMA((uint8_t*) p, remain_size % (SPI_DMA_Max_Length - 1));
 8013770:	697a      	ldr	r2, [r7, #20]
 8013772:	4b10      	ldr	r3, [pc, #64]	; (80137b4 <LCD_Show_Image+0xf4>)
 8013774:	fba3 1302 	umull	r1, r3, r3, r2
 8013778:	1ad1      	subs	r1, r2, r3
 801377a:	0849      	lsrs	r1, r1, #1
 801377c:	440b      	add	r3, r1
 801377e:	0b99      	lsrs	r1, r3, #14
 8013780:	460b      	mov	r3, r1
 8013782:	03db      	lsls	r3, r3, #15
 8013784:	1a5b      	subs	r3, r3, r1
 8013786:	1ad1      	subs	r1, r2, r3
 8013788:	b28b      	uxth	r3, r1
 801378a:	4619      	mov	r1, r3
 801378c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801378e:	f7ff fc4f 	bl	8013030 <SPI_WriteByte_DMA>
		}

		flag = 1;
 8013792:	2301      	movs	r3, #1
 8013794:	74bb      	strb	r3, [r7, #18]
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 8013796:	7cfb      	ldrb	r3, [r7, #19]
 8013798:	3301      	adds	r3, #1
 801379a:	74fb      	strb	r3, [r7, #19]
 801379c:	7cfa      	ldrb	r2, [r7, #19]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	0bdb      	lsrs	r3, r3, #15
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d9ca      	bls.n	801373c <LCD_Show_Image+0x7c>
 80137a6:	e000      	b.n	80137aa <LCD_Show_Image+0xea>
		return;
 80137a8:	bf00      	nop
	}
}
 80137aa:	371c      	adds	r7, #28
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd90      	pop	{r4, r7, pc}
 80137b0:	40021800 	.word	0x40021800
 80137b4:	00020005 	.word	0x00020005

080137b8 <LCD_ShowStringLineX>:
uint16_t LCD_FontColor = WHITE;
uint16_t LCD_BackgroundColor = BLACK;

//显示一行字符串
void LCD_ShowStringLineX(uint8_t line, char *chr, uint8_t size)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b086      	sub	sp, #24
 80137bc:	af04      	add	r7, sp, #16
 80137be:	4603      	mov	r3, r0
 80137c0:	6039      	str	r1, [r7, #0]
 80137c2:	71fb      	strb	r3, [r7, #7]
 80137c4:	4613      	mov	r3, r2
 80137c6:	71bb      	strb	r3, [r7, #6]
	LCD_ShowCharStr(0, line * size, LCD_Width, chr, LCD_BackgroundColor, LCD_FontColor, size);
 80137c8:	79fb      	ldrb	r3, [r7, #7]
 80137ca:	b29a      	uxth	r2, r3
 80137cc:	79bb      	ldrb	r3, [r7, #6]
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	fb12 f303 	smulbb	r3, r2, r3
 80137d4:	b298      	uxth	r0, r3
 80137d6:	4b09      	ldr	r3, [pc, #36]	; (80137fc <LCD_ShowStringLineX+0x44>)
 80137d8:	881b      	ldrh	r3, [r3, #0]
 80137da:	4a09      	ldr	r2, [pc, #36]	; (8013800 <LCD_ShowStringLineX+0x48>)
 80137dc:	8812      	ldrh	r2, [r2, #0]
 80137de:	79b9      	ldrb	r1, [r7, #6]
 80137e0:	9102      	str	r1, [sp, #8]
 80137e2:	9201      	str	r2, [sp, #4]
 80137e4:	9300      	str	r3, [sp, #0]
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	22f0      	movs	r2, #240	; 0xf0
 80137ea:	4601      	mov	r1, r0
 80137ec:	2000      	movs	r0, #0
 80137ee:	f7ff ff2b 	bl	8013648 <LCD_ShowCharStr>
}
 80137f2:	bf00      	nop
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
 80137fa:	bf00      	nop
 80137fc:	200025c4 	.word	0x200025c4
 8013800:	2000021c 	.word	0x2000021c

08013804 <LCD_Close>:
//	HAL_Delay(2000);
//	LCD_Clear(BLACK);
}

void LCD_Close()
{
 8013804:	b580      	push	{r7, lr}
 8013806:	af00      	add	r7, sp, #0

	LCD_Write_Cmd(0x53);
 8013808:	2053      	movs	r0, #83	; 0x53
 801380a:	f7ff fc23 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x28);
 801380e:	2028      	movs	r0, #40	; 0x28
 8013810:	f7ff fc20 	bl	8013054 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x10);
 8013814:	2010      	movs	r0, #16
 8013816:	f7ff fc1d 	bl	8013054 <LCD_Write_Cmd>
	LCD_PWR(0);
 801381a:	2200      	movs	r2, #0
 801381c:	2110      	movs	r1, #16
 801381e:	4805      	ldr	r0, [pc, #20]	; (8013834 <LCD_Close+0x30>)
 8013820:	f7f0 ffa2 	bl	8004768 <HAL_GPIO_WritePin>
	LCD_RST(0);
 8013824:	2200      	movs	r2, #0
 8013826:	2120      	movs	r1, #32
 8013828:	4802      	ldr	r0, [pc, #8]	; (8013834 <LCD_Close+0x30>)
 801382a:	f7f0 ff9d 	bl	8004768 <HAL_GPIO_WritePin>
}
 801382e:	bf00      	nop
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	40021800 	.word	0x40021800

08013838 <Screen_Init>:
#define ImageBufferLength 115208
uint8_t ImageBuffer[ImageBufferLength];
char ImageNameString[40];

void Screen_Init()
{
 8013838:	b580      	push	{r7, lr}
 801383a:	af00      	add	r7, sp, #0
#if defined USE_OLED
	OLED_InitX(PuppySauce);
#else
	LCD_Init();
 801383c:	f7ff fce4 	bl	8013208 <LCD_Init>
#if defined SCREEN_USE_FATFS

	Screen_ShowPicture_Num(0, 0);
 8013840:	2100      	movs	r1, #0
 8013842:	2000      	movs	r0, #0
 8013844:	f000 f822 	bl	801388c <Screen_ShowPicture_Num>
	HAL_Delay(2000);
 8013848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801384c:	f7ef fcc8 	bl	80031e0 <HAL_Delay>
#endif
	Screen_Clear();
 8013850:	f000 f814 	bl	801387c <Screen_Clear>
#endif
}
 8013854:	bf00      	nop
 8013856:	bd80      	pop	{r7, pc}

08013858 <Screen_ShowStringLine>:
	LCD_Show_Image(x0, y0, length, width, BMP);
#endif
}

void Screen_ShowStringLine(uint8_t line, char *chr, uint8_t size)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	4603      	mov	r3, r0
 8013860:	6039      	str	r1, [r7, #0]
 8013862:	71fb      	strb	r3, [r7, #7]
 8013864:	4613      	mov	r3, r2
 8013866:	71bb      	strb	r3, [r7, #6]
#if defined USE_OLED
	OLED_ShowStringLine(line, chr);
#else
	LCD_ShowStringLineX(line, chr, size);
 8013868:	79ba      	ldrb	r2, [r7, #6]
 801386a:	79fb      	ldrb	r3, [r7, #7]
 801386c:	6839      	ldr	r1, [r7, #0]
 801386e:	4618      	mov	r0, r3
 8013870:	f7ff ffa2 	bl	80137b8 <LCD_ShowStringLineX>
#endif
}
 8013874:	bf00      	nop
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <Screen_Clear>:

void Screen_Clear()
{
 801387c:	b580      	push	{r7, lr}
 801387e:	af00      	add	r7, sp, #0
#if defined USE_OLED
	OLED_Clear();
#else
	LCD_Clear(BLACK);
 8013880:	2000      	movs	r0, #0
 8013882:	f7ff fc7b 	bl	801317c <LCD_Clear>
#endif
}
 8013886:	bf00      	nop
 8013888:	bd80      	pop	{r7, pc}
	...

0801388c <Screen_ShowPicture_Num>:

void Screen_ShowPicture_Num(uint8_t a, uint8_t b)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	4603      	mov	r3, r0
 8013894:	460a      	mov	r2, r1
 8013896:	71fb      	strb	r3, [r7, #7]
 8013898:	4613      	mov	r3, r2
 801389a:	71bb      	strb	r3, [r7, #6]
			break;
		default:
			break;
	}
#else
	switch (a)
 801389c:	79fb      	ldrb	r3, [r7, #7]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d002      	beq.n	80138a8 <Screen_ShowPicture_Num+0x1c>
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d004      	beq.n	80138b0 <Screen_ShowPicture_Num+0x24>
		case 1:
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
			Screen_ShowFileImage(ImageNameString);
			break;
		default:
			break;
 80138a6:	e00d      	b.n	80138c4 <Screen_ShowPicture_Num+0x38>
			Screen_ShowFileImage("Images/PuppySauce.bmp");
 80138a8:	4808      	ldr	r0, [pc, #32]	; (80138cc <Screen_ShowPicture_Num+0x40>)
 80138aa:	f000 f81b 	bl	80138e4 <Screen_ShowFileImage>
			break;
 80138ae:	e009      	b.n	80138c4 <Screen_ShowPicture_Num+0x38>
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
 80138b0:	79bb      	ldrb	r3, [r7, #6]
 80138b2:	461a      	mov	r2, r3
 80138b4:	4906      	ldr	r1, [pc, #24]	; (80138d0 <Screen_ShowPicture_Num+0x44>)
 80138b6:	4807      	ldr	r0, [pc, #28]	; (80138d4 <Screen_ShowPicture_Num+0x48>)
 80138b8:	f001 f942 	bl	8014b40 <siprintf>
			Screen_ShowFileImage(ImageNameString);
 80138bc:	4805      	ldr	r0, [pc, #20]	; (80138d4 <Screen_ShowPicture_Num+0x48>)
 80138be:	f000 f811 	bl	80138e4 <Screen_ShowFileImage>
			break;
 80138c2:	bf00      	nop
	}
#endif
}
 80138c4:	bf00      	nop
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	08019928 	.word	0x08019928
 80138d0:	08019940 	.word	0x08019940
 80138d4:	200025c8 	.word	0x200025c8

080138d8 <Screen_Close>:

void Screen_Close()
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	af00      	add	r7, sp, #0
#if defined USE_OLED

#else
	LCD_Close();
 80138dc:	f7ff ff92 	bl	8013804 <LCD_Close>
#endif
}
 80138e0:	bf00      	nop
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <Screen_ShowFileImage>:
#define  readRowNum 15
BYTE pColorData[960 * readRowNum]; /* 一行真彩色数据缓存 240 * 2 = 480 */
uint8_t ImageTransform_Buffer[480 * readRowNum];

void Screen_ShowFileImage(const char *fileName)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b09c      	sub	sp, #112	; 0x70
 80138e8:	af02      	add	r7, sp, #8
 80138ea:	6078      	str	r0, [r7, #4]

	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	WORD fileType;
	unsigned int read_num;
	f_res = f_open(&file, fileName, FA_OPEN_EXISTING | FA_READ);
 80138ec:	2201      	movs	r2, #1
 80138ee:	6879      	ldr	r1, [r7, #4]
 80138f0:	487c      	ldr	r0, [pc, #496]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 80138f2:	f7f8 ff5d 	bl	800c7b0 <f_open>
 80138f6:	4603      	mov	r3, r0
 80138f8:	461a      	mov	r2, r3
 80138fa:	4b7b      	ldr	r3, [pc, #492]	; (8013ae8 <Screen_ShowFileImage+0x204>)
 80138fc:	701a      	strb	r2, [r3, #0]
	/*-------------------------------------------------------------------------------------------------------*/
	if (f_res == FR_OK)
 80138fe:	4b7a      	ldr	r3, [pc, #488]	; (8013ae8 <Screen_ShowFileImage+0x204>)
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d124      	bne.n	8013950 <Screen_ShowFileImage+0x6c>
	{
		//printfX("打开文件成功\r\n");

		/* 读取文件头信息  两个字节*/
		f_read(&file, &fileType, sizeof(WORD), &read_num);
 8013906:	f107 0308 	add.w	r3, r7, #8
 801390a:	f107 010e 	add.w	r1, r7, #14
 801390e:	2202      	movs	r2, #2
 8013910:	4874      	ldr	r0, [pc, #464]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 8013912:	f7f8 ffd2 	bl	800c8ba <f_read>

		/* 判断是不是bmp文件 "BM"*/
		if (fileType != 0x4d42)
 8013916:	89fb      	ldrh	r3, [r7, #14]
 8013918:	f644 5242 	movw	r2, #19778	; 0x4d42
 801391c:	4293      	cmp	r3, r2
 801391e:	d006      	beq.n	801392e <Screen_ShowFileImage+0x4a>
		{
			printfX("这不是一个 .bmp 文件!\r\n");
 8013920:	4972      	ldr	r1, [pc, #456]	; (8013aec <Screen_ShowFileImage+0x208>)
 8013922:	4873      	ldr	r0, [pc, #460]	; (8013af0 <Screen_ShowFileImage+0x20c>)
 8013924:	f001 f90c 	bl	8014b40 <siprintf>
 8013928:	4871      	ldr	r0, [pc, #452]	; (8013af0 <Screen_ShowFileImage+0x20c>)
 801392a:	f000 f9a1 	bl	8013c70 <printf_Base>
		{
			//printfX("这是一个 .bmp 文件\r\n");
		}

		/* 读取BMP文件头信息*/
		f_read(&file, &bitHead, sizeof(tagBITMAPFILEHEADER), &read_num);
 801392e:	f107 0308 	add.w	r3, r7, #8
 8013932:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013936:	220c      	movs	r2, #12
 8013938:	486a      	ldr	r0, [pc, #424]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 801393a:	f7f8 ffbe 	bl	800c8ba <f_read>
		//showBmpHead(&bitHead);

		/* 读取位图信息头信息 */
		f_read(&file, &bitInfoHead, sizeof(BITMAPINFOHEADER), &read_num);
 801393e:	f107 0308 	add.w	r3, r7, #8
 8013942:	f107 0110 	add.w	r1, r7, #16
 8013946:	2228      	movs	r2, #40	; 0x28
 8013948:	4866      	ldr	r0, [pc, #408]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 801394a:	f7f8 ffb6 	bl	800c8ba <f_read>
 801394e:	e009      	b.n	8013964 <Screen_ShowFileImage+0x80>
		//showBmpInforHead(&bitInfoHead);
	}
	else
	{
		printfX("打开文件失败!错误代码：f_res = %d \r\n", f_res);
 8013950:	4b65      	ldr	r3, [pc, #404]	; (8013ae8 <Screen_ShowFileImage+0x204>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	461a      	mov	r2, r3
 8013956:	4967      	ldr	r1, [pc, #412]	; (8013af4 <Screen_ShowFileImage+0x210>)
 8013958:	4865      	ldr	r0, [pc, #404]	; (8013af0 <Screen_ShowFileImage+0x20c>)
 801395a:	f001 f8f1 	bl	8014b40 <siprintf>
 801395e:	4864      	ldr	r0, [pc, #400]	; (8013af0 <Screen_ShowFileImage+0x20c>)
 8013960:	f000 f986 	bl	8013c70 <printf_Base>
	}
	/*-------------------------------------------------------------------------------------------------------*/
	width = 240;
 8013964:	23f0      	movs	r3, #240	; 0xf0
 8013966:	65bb      	str	r3, [r7, #88]	; 0x58
	height = 240;
 8013968:	23f0      	movs	r3, #240	; 0xf0
 801396a:	657b      	str	r3, [r7, #84]	; 0x54
	uint16_t temp = 0;
 801396c:	2300      	movs	r3, #0
 801396e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int row, m;
	/* 计算位图的实际宽度并确保它为32的倍数	*/
	l_width = WIDTHBYTES(width * bitInfoHead.biBitCount);
 8013972:	8bfb      	ldrh	r3, [r7, #30]
 8013974:	461a      	mov	r2, r3
 8013976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013978:	fb02 f303 	mul.w	r3, r2, r3
 801397c:	331f      	adds	r3, #31
 801397e:	2b00      	cmp	r3, #0
 8013980:	da00      	bge.n	8013984 <Screen_ShowFileImage+0xa0>
 8013982:	331f      	adds	r3, #31
 8013984:	115b      	asrs	r3, r3, #5
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (l_width > 720)
 801398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801398c:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8013990:	dd07      	ble.n	80139a2 <Screen_ShowFileImage+0xbe>
	{
		printfX("\n 本图片太大(%d)，无法在液晶屏上显示 (<=240)\n", l_width);
 8013992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013994:	4958      	ldr	r1, [pc, #352]	; (8013af8 <Screen_ShowFileImage+0x214>)
 8013996:	4856      	ldr	r0, [pc, #344]	; (8013af0 <Screen_ShowFileImage+0x20c>)
 8013998:	f001 f8d2 	bl	8014b40 <siprintf>
 801399c:	4854      	ldr	r0, [pc, #336]	; (8013af0 <Screen_ShowFileImage+0x20c>)
 801399e:	f000 f967 	bl	8013c70 <printf_Base>
	}

	for (i = 0; i < height / readRowNum; i++)
 80139a2:	2300      	movs	r3, #0
 80139a4:	667b      	str	r3, [r7, #100]	; 0x64
 80139a6:	e08a      	b.n	8013abe <Screen_ShowFileImage+0x1da>
	{
		/*从文件的后面读起，BMP文件的原始图像方向为右下角到左上角*/
		f_lseek(&file, bitHead.bfOffBits + (height - (i + 1) * readRowNum) * l_width);
 80139a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80139aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139ac:	3301      	adds	r3, #1
 80139ae:	4619      	mov	r1, r3
 80139b0:	011b      	lsls	r3, r3, #4
 80139b2:	1ac9      	subs	r1, r1, r3
 80139b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139b6:	440b      	add	r3, r1
 80139b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80139ba:	fb01 f303 	mul.w	r3, r1, r3
 80139be:	4413      	add	r3, r2
 80139c0:	4619      	mov	r1, r3
 80139c2:	4848      	ldr	r0, [pc, #288]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 80139c4:	f7f9 f898 	bl	800caf8 <f_lseek>
		/* 读取一行bmp的数据到数组pColorData里面 */
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 80139c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139ca:	4613      	mov	r3, r2
 80139cc:	011b      	lsls	r3, r3, #4
 80139ce:	1a9b      	subs	r3, r3, r2
 80139d0:	461a      	mov	r2, r3
 80139d2:	f107 0308 	add.w	r3, r7, #8
 80139d6:	4949      	ldr	r1, [pc, #292]	; (8013afc <Screen_ShowFileImage+0x218>)
 80139d8:	4842      	ldr	r0, [pc, #264]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 80139da:	f7f8 ff6e 	bl	800c8ba <f_read>

		for (m = 0; m < readRowNum; m++)
 80139de:	2300      	movs	r3, #0
 80139e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80139e2:	e056      	b.n	8013a92 <Screen_ShowFileImage+0x1ae>
		{
			for (j = 0; j < width; j++) 											   //一行有效信息
 80139e4:	2300      	movs	r3, #0
 80139e6:	663b      	str	r3, [r7, #96]	; 0x60
 80139e8:	e04c      	b.n	8013a84 <Screen_ShowFileImage+0x1a0>
			{
				k = j * 3 + m * width * 3;																	 //一行中第K个像素的起点
 80139ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80139ee:	fb03 f202 	mul.w	r2, r3, r2
 80139f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80139f4:	441a      	add	r2, r3
 80139f6:	4613      	mov	r3, r2
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	4413      	add	r3, r2
 80139fc:	64bb      	str	r3, [r7, #72]	; 0x48
				row = readRowNum - m - 1;
 80139fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a00:	f1c3 030e 	rsb	r3, r3, #14
 8013a04:	647b      	str	r3, [r7, #68]	; 0x44
				temp = RGB24TORGB16(pColorData[k + 2], pColorData[k + 1], pColorData[k]);
 8013a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a08:	3302      	adds	r3, #2
 8013a0a:	4a3c      	ldr	r2, [pc, #240]	; (8013afc <Screen_ShowFileImage+0x218>)
 8013a0c:	5cd3      	ldrb	r3, [r2, r3]
 8013a0e:	08db      	lsrs	r3, r3, #3
 8013a10:	b2db      	uxtb	r3, r3
 8013a12:	02db      	lsls	r3, r3, #11
 8013a14:	b21a      	sxth	r2, r3
 8013a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a18:	3301      	adds	r3, #1
 8013a1a:	4938      	ldr	r1, [pc, #224]	; (8013afc <Screen_ShowFileImage+0x218>)
 8013a1c:	5ccb      	ldrb	r3, [r1, r3]
 8013a1e:	089b      	lsrs	r3, r3, #2
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	015b      	lsls	r3, r3, #5
 8013a24:	b21b      	sxth	r3, r3
 8013a26:	4313      	orrs	r3, r2
 8013a28:	b21a      	sxth	r2, r3
 8013a2a:	4934      	ldr	r1, [pc, #208]	; (8013afc <Screen_ShowFileImage+0x218>)
 8013a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a2e:	440b      	add	r3, r1
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	08db      	lsrs	r3, r3, #3
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	b21b      	sxth	r3, r3
 8013a38:	4313      	orrs	r3, r2
 8013a3a:	b21b      	sxth	r3, r3
 8013a3c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				ImageTransform_Buffer[row * 480 + j * 2] = temp >> 8;
 8013a40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013a44:	0a1b      	lsrs	r3, r3, #8
 8013a46:	b299      	uxth	r1, r3
 8013a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	011b      	lsls	r3, r3, #4
 8013a4e:	1a9b      	subs	r3, r3, r2
 8013a50:	011b      	lsls	r3, r3, #4
 8013a52:	461a      	mov	r2, r3
 8013a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a56:	4413      	add	r3, r2
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	b2c9      	uxtb	r1, r1
 8013a5c:	4a28      	ldr	r2, [pc, #160]	; (8013b00 <Screen_ShowFileImage+0x21c>)
 8013a5e:	54d1      	strb	r1, [r2, r3]
				ImageTransform_Buffer[row * 480 + j * 2 + 1] = temp;
 8013a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a62:	4613      	mov	r3, r2
 8013a64:	011b      	lsls	r3, r3, #4
 8013a66:	1a9b      	subs	r3, r3, r2
 8013a68:	011b      	lsls	r3, r3, #4
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a6e:	4413      	add	r3, r2
 8013a70:	005b      	lsls	r3, r3, #1
 8013a72:	3301      	adds	r3, #1
 8013a74:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8013a78:	b2d1      	uxtb	r1, r2
 8013a7a:	4a21      	ldr	r2, [pc, #132]	; (8013b00 <Screen_ShowFileImage+0x21c>)
 8013a7c:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j < width; j++) 											   //一行有效信息
 8013a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a80:	3301      	adds	r3, #1
 8013a82:	663b      	str	r3, [r7, #96]	; 0x60
 8013a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	dbae      	blt.n	80139ea <Screen_ShowFileImage+0x106>
		for (m = 0; m < readRowNum; m++)
 8013a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a8e:	3301      	adds	r3, #1
 8013a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a94:	2b0e      	cmp	r3, #14
 8013a96:	dda5      	ble.n	80139e4 <Screen_ShowFileImage+0x100>
//				ImageTransform_Buffer[row * 480 + j * 2] = ((pColorData[k + 1] << 1) | pColorData[k] >> 7);
//				ImageTransform_Buffer[row * 480 + j * 2 + 1] = (pColorData[k] & 0x1F) | ((pColorData[k] & 0xE0) << 1);
			}
		}

		LCD_Show_Image(0, i * readRowNum, 240, readRowNum, ImageTransform_Buffer);
 8013a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	461a      	mov	r2, r3
 8013a9e:	0112      	lsls	r2, r2, #4
 8013aa0:	1ad3      	subs	r3, r2, r3
 8013aa2:	b299      	uxth	r1, r3
 8013aa4:	4b16      	ldr	r3, [pc, #88]	; (8013b00 <Screen_ShowFileImage+0x21c>)
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	230f      	movs	r3, #15
 8013aaa:	22f0      	movs	r2, #240	; 0xf0
 8013aac:	2000      	movs	r0, #0
 8013aae:	f7ff fe07 	bl	80136c0 <LCD_Show_Image>
		delay_us(LCD_File_Disp_Delay_us);
 8013ab2:	2028      	movs	r0, #40	; 0x28
 8013ab4:	f7fd f85a 	bl	8010b6c <delay_us>
	for (i = 0; i < height / readRowNum; i++)
 8013ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013aba:	3301      	adds	r3, #1
 8013abc:	667b      	str	r3, [r7, #100]	; 0x64
 8013abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ac0:	4a10      	ldr	r2, [pc, #64]	; (8013b04 <Screen_ShowFileImage+0x220>)
 8013ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ac6:	441a      	add	r2, r3
 8013ac8:	10d2      	asrs	r2, r2, #3
 8013aca:	17db      	asrs	r3, r3, #31
 8013acc:	1ad3      	subs	r3, r2, r3
 8013ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	f6ff af69 	blt.w	80139a8 <Screen_ShowFileImage+0xc4>
	}
	// 不再读写，关闭文件 //
	f_close(&file);
 8013ad6:	4803      	ldr	r0, [pc, #12]	; (8013ae4 <Screen_ShowFileImage+0x200>)
 8013ad8:	f7f8 fff6 	bl	800cac8 <f_close>

	// 注销一个FatFS设备：SD卡 //
	//FATFS_UnLinkDriver(SDPath);

	//printfX("总耗时：%.d ms\n\n", (int )(uwTick - time));
}
 8013adc:	bf00      	nop
 8013ade:	3768      	adds	r7, #104	; 0x68
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	20001f1c 	.word	0x20001f1c
 8013ae8:	20002140 	.word	0x20002140
 8013aec:	0801995c 	.word	0x0801995c
 8013af0:	20001308 	.word	0x20001308
 8013af4:	0801997c 	.word	0x0801997c
 8013af8:	080199ac 	.word	0x080199ac
 8013afc:	200025f0 	.word	0x200025f0
 8013b00:	20005e30 	.word	0x20005e30
 8013b04:	88888889 	.word	0x88888889

08013b08 <Init_USART>:
uint8_t RxData_Index[UART_Number];
//1 未读 0 已读
uint8_t RxData_Flag[UART_Number];

void Init_USART()
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
	//打开串口接收中断
	for (int var = 0; var < UART_Number; ++var)
 8013b0e:	2300      	movs	r3, #0
 8013b10:	607b      	str	r3, [r7, #4]
 8013b12:	e00d      	b.n	8013b30 <Init_USART+0x28>
	{
		HAL_UART_Receive_IT(UART_Handles[var], &RxData_Buffer[var], 1);
 8013b14:	4a0a      	ldr	r2, [pc, #40]	; (8013b40 <Init_USART+0x38>)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	4a09      	ldr	r2, [pc, #36]	; (8013b44 <Init_USART+0x3c>)
 8013b20:	4413      	add	r3, r2
 8013b22:	2201      	movs	r2, #1
 8013b24:	4619      	mov	r1, r3
 8013b26:	f7f5 fcc6 	bl	80094b6 <HAL_UART_Receive_IT>
	for (int var = 0; var < UART_Number; ++var)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	607b      	str	r3, [r7, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	ddee      	ble.n	8013b14 <Init_USART+0xc>
	}
}
 8013b36:	bf00      	nop
 8013b38:	bf00      	nop
 8013b3a:	3708      	adds	r7, #8
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	20000220 	.word	0x20000220
 8013b44:	20007aa0 	.word	0x20007aa0

08013b48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013b48:	b5b0      	push	{r4, r5, r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8013b50:	2300      	movs	r3, #0
 8013b52:	73fb      	strb	r3, [r7, #15]
	//判断串口序号
	for (int var = 0; var < UART_Number; ++var)
 8013b54:	2300      	movs	r3, #0
 8013b56:	60bb      	str	r3, [r7, #8]
 8013b58:	e00c      	b.n	8013b74 <HAL_UART_RxCpltCallback+0x2c>
	{
		if (huart->Instance == UART_Types[var])
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	4932      	ldr	r1, [pc, #200]	; (8013c28 <HAL_UART_RxCpltCallback+0xe0>)
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d101      	bne.n	8013b6e <HAL_UART_RxCpltCallback+0x26>
		{
			index = var;
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	73fb      	strb	r3, [r7, #15]
	for (int var = 0; var < UART_Number; ++var)
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	3301      	adds	r3, #1
 8013b72:	60bb      	str	r3, [r7, #8]
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	ddef      	ble.n	8013b5a <HAL_UART_RxCpltCallback+0x12>
		}
	}

	//判断结束字符
	if (RxData_Buffer[index] == '\0' || RxData_Buffer[index] == '#' || RxData_Buffer[index] == '\n')
 8013b7a:	7bfb      	ldrb	r3, [r7, #15]
 8013b7c:	4a2b      	ldr	r2, [pc, #172]	; (8013c2c <HAL_UART_RxCpltCallback+0xe4>)
 8013b7e:	5cd3      	ldrb	r3, [r2, r3]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d009      	beq.n	8013b98 <HAL_UART_RxCpltCallback+0x50>
 8013b84:	7bfb      	ldrb	r3, [r7, #15]
 8013b86:	4a29      	ldr	r2, [pc, #164]	; (8013c2c <HAL_UART_RxCpltCallback+0xe4>)
 8013b88:	5cd3      	ldrb	r3, [r2, r3]
 8013b8a:	2b23      	cmp	r3, #35	; 0x23
 8013b8c:	d004      	beq.n	8013b98 <HAL_UART_RxCpltCallback+0x50>
 8013b8e:	7bfb      	ldrb	r3, [r7, #15]
 8013b90:	4a26      	ldr	r2, [pc, #152]	; (8013c2c <HAL_UART_RxCpltCallback+0xe4>)
 8013b92:	5cd3      	ldrb	r3, [r2, r3]
 8013b94:	2b0a      	cmp	r3, #10
 8013b96:	d116      	bne.n	8013bc6 <HAL_UART_RxCpltCallback+0x7e>
	{
		RxData[index][RxData_Index[index]++] = '\0';
 8013b98:	7bfa      	ldrb	r2, [r7, #15]
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	4924      	ldr	r1, [pc, #144]	; (8013c30 <HAL_UART_RxCpltCallback+0xe8>)
 8013b9e:	5cc9      	ldrb	r1, [r1, r3]
 8013ba0:	1c48      	adds	r0, r1, #1
 8013ba2:	b2c4      	uxtb	r4, r0
 8013ba4:	4822      	ldr	r0, [pc, #136]	; (8013c30 <HAL_UART_RxCpltCallback+0xe8>)
 8013ba6:	54c4      	strb	r4, [r0, r3]
 8013ba8:	4608      	mov	r0, r1
 8013baa:	4922      	ldr	r1, [pc, #136]	; (8013c34 <HAL_UART_RxCpltCallback+0xec>)
 8013bac:	4613      	mov	r3, r2
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	4413      	add	r3, r2
 8013bb2:	00db      	lsls	r3, r3, #3
 8013bb4:	440b      	add	r3, r1
 8013bb6:	4403      	add	r3, r0
 8013bb8:	2200      	movs	r2, #0
 8013bba:	701a      	strb	r2, [r3, #0]
		RxData_Flag[index] = RX_UnRead;
 8013bbc:	7bfb      	ldrb	r3, [r7, #15]
 8013bbe:	4a1e      	ldr	r2, [pc, #120]	; (8013c38 <HAL_UART_RxCpltCallback+0xf0>)
 8013bc0:	2101      	movs	r1, #1
 8013bc2:	54d1      	strb	r1, [r2, r3]
 8013bc4:	e021      	b.n	8013c0a <HAL_UART_RxCpltCallback+0xc2>
	}
	else
	{
		//未读 则清零
		if (RxData_Flag[index] == RX_UnRead)
 8013bc6:	7bfb      	ldrb	r3, [r7, #15]
 8013bc8:	4a1b      	ldr	r2, [pc, #108]	; (8013c38 <HAL_UART_RxCpltCallback+0xf0>)
 8013bca:	5cd3      	ldrb	r3, [r2, r3]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d107      	bne.n	8013be0 <HAL_UART_RxCpltCallback+0x98>
		{
			RxData_Flag[index] = RX_NoData;
 8013bd0:	7bfb      	ldrb	r3, [r7, #15]
 8013bd2:	4a19      	ldr	r2, [pc, #100]	; (8013c38 <HAL_UART_RxCpltCallback+0xf0>)
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	54d1      	strb	r1, [r2, r3]
			RxData_Index[index] = RX_NoData;
 8013bd8:	7bfb      	ldrb	r3, [r7, #15]
 8013bda:	4a15      	ldr	r2, [pc, #84]	; (8013c30 <HAL_UART_RxCpltCallback+0xe8>)
 8013bdc:	2100      	movs	r1, #0
 8013bde:	54d1      	strb	r1, [r2, r3]
		}

		//复制数据
		RxData[index][RxData_Index[index]++] = RxData_Buffer[index];
 8013be0:	7bf8      	ldrb	r0, [r7, #15]
 8013be2:	7bfa      	ldrb	r2, [r7, #15]
 8013be4:	7bfb      	ldrb	r3, [r7, #15]
 8013be6:	4912      	ldr	r1, [pc, #72]	; (8013c30 <HAL_UART_RxCpltCallback+0xe8>)
 8013be8:	5cc9      	ldrb	r1, [r1, r3]
 8013bea:	1c4c      	adds	r4, r1, #1
 8013bec:	b2e5      	uxtb	r5, r4
 8013bee:	4c10      	ldr	r4, [pc, #64]	; (8013c30 <HAL_UART_RxCpltCallback+0xe8>)
 8013bf0:	54e5      	strb	r5, [r4, r3]
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	4b0d      	ldr	r3, [pc, #52]	; (8013c2c <HAL_UART_RxCpltCallback+0xe4>)
 8013bf6:	5c18      	ldrb	r0, [r3, r0]
 8013bf8:	490e      	ldr	r1, [pc, #56]	; (8013c34 <HAL_UART_RxCpltCallback+0xec>)
 8013bfa:	4613      	mov	r3, r2
 8013bfc:	009b      	lsls	r3, r3, #2
 8013bfe:	4413      	add	r3, r2
 8013c00:	00db      	lsls	r3, r3, #3
 8013c02:	440b      	add	r3, r1
 8013c04:	4423      	add	r3, r4
 8013c06:	4602      	mov	r2, r0
 8013c08:	701a      	strb	r2, [r3, #0]
	}

	//打开串口接收中断
	HAL_UART_Receive_IT(UART_Handles[index], &RxData_Buffer[index], 1);
 8013c0a:	7bfb      	ldrb	r3, [r7, #15]
 8013c0c:	4a0b      	ldr	r2, [pc, #44]	; (8013c3c <HAL_UART_RxCpltCallback+0xf4>)
 8013c0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013c12:	7bfb      	ldrb	r3, [r7, #15]
 8013c14:	4a05      	ldr	r2, [pc, #20]	; (8013c2c <HAL_UART_RxCpltCallback+0xe4>)
 8013c16:	4413      	add	r3, r2
 8013c18:	2201      	movs	r2, #1
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	f7f5 fc4b 	bl	80094b6 <HAL_UART_Receive_IT>
}
 8013c20:	bf00      	nop
 8013c22:	3710      	adds	r7, #16
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bdb0      	pop	{r4, r5, r7, pc}
 8013c28:	20000228 	.word	0x20000228
 8013c2c:	20007aa0 	.word	0x20007aa0
 8013c30:	20007aa4 	.word	0x20007aa4
 8013c34:	20007a50 	.word	0x20007a50
 8013c38:	20007aa8 	.word	0x20007aa8
 8013c3c:	20000220 	.word	0x20000220

08013c40 <CleanRxData>:

//清除未读标志
void CleanRxData(uint8_t index)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	4603      	mov	r3, r0
 8013c48:	71fb      	strb	r3, [r7, #7]

	RxData_Flag[index] = 0;
 8013c4a:	79fb      	ldrb	r3, [r7, #7]
 8013c4c:	4a06      	ldr	r2, [pc, #24]	; (8013c68 <CleanRxData+0x28>)
 8013c4e:	2100      	movs	r1, #0
 8013c50:	54d1      	strb	r1, [r2, r3]
	RxData_Index[index] = 0;
 8013c52:	79fb      	ldrb	r3, [r7, #7]
 8013c54:	4a05      	ldr	r2, [pc, #20]	; (8013c6c <CleanRxData+0x2c>)
 8013c56:	2100      	movs	r1, #0
 8013c58:	54d1      	strb	r1, [r2, r3]
}
 8013c5a:	bf00      	nop
 8013c5c:	370c      	adds	r7, #12
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c64:	4770      	bx	lr
 8013c66:	bf00      	nop
 8013c68:	20007aa8 	.word	0x20007aa8
 8013c6c:	20007aa4 	.word	0x20007aa4

08013c70 <printf_Base>:

void printf_Base(const char *TX_String)
{
 8013c70:	b590      	push	{r4, r7, lr}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART_Handles[Printf_UART], (uint8_t*) TX_String, strlen(TX_String), 0xFFFF);
 8013c78:	4b08      	ldr	r3, [pc, #32]	; (8013c9c <printf_Base+0x2c>)
 8013c7a:	685c      	ldr	r4, [r3, #4]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ec faa7 	bl	80001d0 <strlen>
 8013c82:	4603      	mov	r3, r0
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c8a:	6879      	ldr	r1, [r7, #4]
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f7f5 fb80 	bl	8009392 <HAL_UART_Transmit>
}
 8013c92:	bf00      	nop
 8013c94:	370c      	adds	r7, #12
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd90      	pop	{r4, r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	20000220 	.word	0x20000220

08013ca0 <__errno>:
 8013ca0:	4b01      	ldr	r3, [pc, #4]	; (8013ca8 <__errno+0x8>)
 8013ca2:	6818      	ldr	r0, [r3, #0]
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop
 8013ca8:	20000230 	.word	0x20000230

08013cac <__libc_init_array>:
 8013cac:	b570      	push	{r4, r5, r6, lr}
 8013cae:	4d0d      	ldr	r5, [pc, #52]	; (8013ce4 <__libc_init_array+0x38>)
 8013cb0:	4c0d      	ldr	r4, [pc, #52]	; (8013ce8 <__libc_init_array+0x3c>)
 8013cb2:	1b64      	subs	r4, r4, r5
 8013cb4:	10a4      	asrs	r4, r4, #2
 8013cb6:	2600      	movs	r6, #0
 8013cb8:	42a6      	cmp	r6, r4
 8013cba:	d109      	bne.n	8013cd0 <__libc_init_array+0x24>
 8013cbc:	4d0b      	ldr	r5, [pc, #44]	; (8013cec <__libc_init_array+0x40>)
 8013cbe:	4c0c      	ldr	r4, [pc, #48]	; (8013cf0 <__libc_init_array+0x44>)
 8013cc0:	f005 fac8 	bl	8019254 <_init>
 8013cc4:	1b64      	subs	r4, r4, r5
 8013cc6:	10a4      	asrs	r4, r4, #2
 8013cc8:	2600      	movs	r6, #0
 8013cca:	42a6      	cmp	r6, r4
 8013ccc:	d105      	bne.n	8013cda <__libc_init_array+0x2e>
 8013cce:	bd70      	pop	{r4, r5, r6, pc}
 8013cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cd4:	4798      	blx	r3
 8013cd6:	3601      	adds	r6, #1
 8013cd8:	e7ee      	b.n	8013cb8 <__libc_init_array+0xc>
 8013cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cde:	4798      	blx	r3
 8013ce0:	3601      	adds	r6, #1
 8013ce2:	e7f2      	b.n	8013cca <__libc_init_array+0x1e>
 8013ce4:	0801e250 	.word	0x0801e250
 8013ce8:	0801e250 	.word	0x0801e250
 8013cec:	0801e250 	.word	0x0801e250
 8013cf0:	0801e254 	.word	0x0801e254

08013cf4 <memcmp>:
 8013cf4:	b510      	push	{r4, lr}
 8013cf6:	3901      	subs	r1, #1
 8013cf8:	4402      	add	r2, r0
 8013cfa:	4290      	cmp	r0, r2
 8013cfc:	d101      	bne.n	8013d02 <memcmp+0xe>
 8013cfe:	2000      	movs	r0, #0
 8013d00:	e005      	b.n	8013d0e <memcmp+0x1a>
 8013d02:	7803      	ldrb	r3, [r0, #0]
 8013d04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013d08:	42a3      	cmp	r3, r4
 8013d0a:	d001      	beq.n	8013d10 <memcmp+0x1c>
 8013d0c:	1b18      	subs	r0, r3, r4
 8013d0e:	bd10      	pop	{r4, pc}
 8013d10:	3001      	adds	r0, #1
 8013d12:	e7f2      	b.n	8013cfa <memcmp+0x6>

08013d14 <memset>:
 8013d14:	4402      	add	r2, r0
 8013d16:	4603      	mov	r3, r0
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	d100      	bne.n	8013d1e <memset+0xa>
 8013d1c:	4770      	bx	lr
 8013d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d22:	e7f9      	b.n	8013d18 <memset+0x4>

08013d24 <__cvt>:
 8013d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d28:	ec55 4b10 	vmov	r4, r5, d0
 8013d2c:	2d00      	cmp	r5, #0
 8013d2e:	460e      	mov	r6, r1
 8013d30:	4619      	mov	r1, r3
 8013d32:	462b      	mov	r3, r5
 8013d34:	bfbb      	ittet	lt
 8013d36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013d3a:	461d      	movlt	r5, r3
 8013d3c:	2300      	movge	r3, #0
 8013d3e:	232d      	movlt	r3, #45	; 0x2d
 8013d40:	700b      	strb	r3, [r1, #0]
 8013d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013d48:	4691      	mov	r9, r2
 8013d4a:	f023 0820 	bic.w	r8, r3, #32
 8013d4e:	bfbc      	itt	lt
 8013d50:	4622      	movlt	r2, r4
 8013d52:	4614      	movlt	r4, r2
 8013d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013d58:	d005      	beq.n	8013d66 <__cvt+0x42>
 8013d5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013d5e:	d100      	bne.n	8013d62 <__cvt+0x3e>
 8013d60:	3601      	adds	r6, #1
 8013d62:	2102      	movs	r1, #2
 8013d64:	e000      	b.n	8013d68 <__cvt+0x44>
 8013d66:	2103      	movs	r1, #3
 8013d68:	ab03      	add	r3, sp, #12
 8013d6a:	9301      	str	r3, [sp, #4]
 8013d6c:	ab02      	add	r3, sp, #8
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	ec45 4b10 	vmov	d0, r4, r5
 8013d74:	4653      	mov	r3, sl
 8013d76:	4632      	mov	r2, r6
 8013d78:	f001 fefa 	bl	8015b70 <_dtoa_r>
 8013d7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013d80:	4607      	mov	r7, r0
 8013d82:	d102      	bne.n	8013d8a <__cvt+0x66>
 8013d84:	f019 0f01 	tst.w	r9, #1
 8013d88:	d022      	beq.n	8013dd0 <__cvt+0xac>
 8013d8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013d8e:	eb07 0906 	add.w	r9, r7, r6
 8013d92:	d110      	bne.n	8013db6 <__cvt+0x92>
 8013d94:	783b      	ldrb	r3, [r7, #0]
 8013d96:	2b30      	cmp	r3, #48	; 0x30
 8013d98:	d10a      	bne.n	8013db0 <__cvt+0x8c>
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	4620      	mov	r0, r4
 8013da0:	4629      	mov	r1, r5
 8013da2:	f7ec fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8013da6:	b918      	cbnz	r0, 8013db0 <__cvt+0x8c>
 8013da8:	f1c6 0601 	rsb	r6, r6, #1
 8013dac:	f8ca 6000 	str.w	r6, [sl]
 8013db0:	f8da 3000 	ldr.w	r3, [sl]
 8013db4:	4499      	add	r9, r3
 8013db6:	2200      	movs	r2, #0
 8013db8:	2300      	movs	r3, #0
 8013dba:	4620      	mov	r0, r4
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	f7ec fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 8013dc2:	b108      	cbz	r0, 8013dc8 <__cvt+0xa4>
 8013dc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8013dc8:	2230      	movs	r2, #48	; 0x30
 8013dca:	9b03      	ldr	r3, [sp, #12]
 8013dcc:	454b      	cmp	r3, r9
 8013dce:	d307      	bcc.n	8013de0 <__cvt+0xbc>
 8013dd0:	9b03      	ldr	r3, [sp, #12]
 8013dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dd4:	1bdb      	subs	r3, r3, r7
 8013dd6:	4638      	mov	r0, r7
 8013dd8:	6013      	str	r3, [r2, #0]
 8013dda:	b004      	add	sp, #16
 8013ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013de0:	1c59      	adds	r1, r3, #1
 8013de2:	9103      	str	r1, [sp, #12]
 8013de4:	701a      	strb	r2, [r3, #0]
 8013de6:	e7f0      	b.n	8013dca <__cvt+0xa6>

08013de8 <__exponent>:
 8013de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dea:	4603      	mov	r3, r0
 8013dec:	2900      	cmp	r1, #0
 8013dee:	bfb8      	it	lt
 8013df0:	4249      	neglt	r1, r1
 8013df2:	f803 2b02 	strb.w	r2, [r3], #2
 8013df6:	bfb4      	ite	lt
 8013df8:	222d      	movlt	r2, #45	; 0x2d
 8013dfa:	222b      	movge	r2, #43	; 0x2b
 8013dfc:	2909      	cmp	r1, #9
 8013dfe:	7042      	strb	r2, [r0, #1]
 8013e00:	dd2a      	ble.n	8013e58 <__exponent+0x70>
 8013e02:	f10d 0407 	add.w	r4, sp, #7
 8013e06:	46a4      	mov	ip, r4
 8013e08:	270a      	movs	r7, #10
 8013e0a:	46a6      	mov	lr, r4
 8013e0c:	460a      	mov	r2, r1
 8013e0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013e12:	fb07 1516 	mls	r5, r7, r6, r1
 8013e16:	3530      	adds	r5, #48	; 0x30
 8013e18:	2a63      	cmp	r2, #99	; 0x63
 8013e1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8013e1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013e22:	4631      	mov	r1, r6
 8013e24:	dcf1      	bgt.n	8013e0a <__exponent+0x22>
 8013e26:	3130      	adds	r1, #48	; 0x30
 8013e28:	f1ae 0502 	sub.w	r5, lr, #2
 8013e2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013e30:	1c44      	adds	r4, r0, #1
 8013e32:	4629      	mov	r1, r5
 8013e34:	4561      	cmp	r1, ip
 8013e36:	d30a      	bcc.n	8013e4e <__exponent+0x66>
 8013e38:	f10d 0209 	add.w	r2, sp, #9
 8013e3c:	eba2 020e 	sub.w	r2, r2, lr
 8013e40:	4565      	cmp	r5, ip
 8013e42:	bf88      	it	hi
 8013e44:	2200      	movhi	r2, #0
 8013e46:	4413      	add	r3, r2
 8013e48:	1a18      	subs	r0, r3, r0
 8013e4a:	b003      	add	sp, #12
 8013e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013e56:	e7ed      	b.n	8013e34 <__exponent+0x4c>
 8013e58:	2330      	movs	r3, #48	; 0x30
 8013e5a:	3130      	adds	r1, #48	; 0x30
 8013e5c:	7083      	strb	r3, [r0, #2]
 8013e5e:	70c1      	strb	r1, [r0, #3]
 8013e60:	1d03      	adds	r3, r0, #4
 8013e62:	e7f1      	b.n	8013e48 <__exponent+0x60>

08013e64 <_printf_float>:
 8013e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e68:	ed2d 8b02 	vpush	{d8}
 8013e6c:	b08d      	sub	sp, #52	; 0x34
 8013e6e:	460c      	mov	r4, r1
 8013e70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013e74:	4616      	mov	r6, r2
 8013e76:	461f      	mov	r7, r3
 8013e78:	4605      	mov	r5, r0
 8013e7a:	f003 f98d 	bl	8017198 <_localeconv_r>
 8013e7e:	f8d0 a000 	ldr.w	sl, [r0]
 8013e82:	4650      	mov	r0, sl
 8013e84:	f7ec f9a4 	bl	80001d0 <strlen>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8013e8c:	6823      	ldr	r3, [r4, #0]
 8013e8e:	9305      	str	r3, [sp, #20]
 8013e90:	f8d8 3000 	ldr.w	r3, [r8]
 8013e94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013e98:	3307      	adds	r3, #7
 8013e9a:	f023 0307 	bic.w	r3, r3, #7
 8013e9e:	f103 0208 	add.w	r2, r3, #8
 8013ea2:	f8c8 2000 	str.w	r2, [r8]
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013eae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013eb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013eb6:	9307      	str	r3, [sp, #28]
 8013eb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ebc:	ee08 0a10 	vmov	s16, r0
 8013ec0:	4b9f      	ldr	r3, [pc, #636]	; (8014140 <_printf_float+0x2dc>)
 8013ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8013eca:	f7ec fe2f 	bl	8000b2c <__aeabi_dcmpun>
 8013ece:	bb88      	cbnz	r0, 8013f34 <_printf_float+0xd0>
 8013ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ed4:	4b9a      	ldr	r3, [pc, #616]	; (8014140 <_printf_float+0x2dc>)
 8013ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8013eda:	f7ec fe09 	bl	8000af0 <__aeabi_dcmple>
 8013ede:	bb48      	cbnz	r0, 8013f34 <_printf_float+0xd0>
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	4640      	mov	r0, r8
 8013ee6:	4649      	mov	r1, r9
 8013ee8:	f7ec fdf8 	bl	8000adc <__aeabi_dcmplt>
 8013eec:	b110      	cbz	r0, 8013ef4 <_printf_float+0x90>
 8013eee:	232d      	movs	r3, #45	; 0x2d
 8013ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ef4:	4b93      	ldr	r3, [pc, #588]	; (8014144 <_printf_float+0x2e0>)
 8013ef6:	4894      	ldr	r0, [pc, #592]	; (8014148 <_printf_float+0x2e4>)
 8013ef8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013efc:	bf94      	ite	ls
 8013efe:	4698      	movls	r8, r3
 8013f00:	4680      	movhi	r8, r0
 8013f02:	2303      	movs	r3, #3
 8013f04:	6123      	str	r3, [r4, #16]
 8013f06:	9b05      	ldr	r3, [sp, #20]
 8013f08:	f023 0204 	bic.w	r2, r3, #4
 8013f0c:	6022      	str	r2, [r4, #0]
 8013f0e:	f04f 0900 	mov.w	r9, #0
 8013f12:	9700      	str	r7, [sp, #0]
 8013f14:	4633      	mov	r3, r6
 8013f16:	aa0b      	add	r2, sp, #44	; 0x2c
 8013f18:	4621      	mov	r1, r4
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	f000 f9d8 	bl	80142d0 <_printf_common>
 8013f20:	3001      	adds	r0, #1
 8013f22:	f040 8090 	bne.w	8014046 <_printf_float+0x1e2>
 8013f26:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2a:	b00d      	add	sp, #52	; 0x34
 8013f2c:	ecbd 8b02 	vpop	{d8}
 8013f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f34:	4642      	mov	r2, r8
 8013f36:	464b      	mov	r3, r9
 8013f38:	4640      	mov	r0, r8
 8013f3a:	4649      	mov	r1, r9
 8013f3c:	f7ec fdf6 	bl	8000b2c <__aeabi_dcmpun>
 8013f40:	b140      	cbz	r0, 8013f54 <_printf_float+0xf0>
 8013f42:	464b      	mov	r3, r9
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	bfbc      	itt	lt
 8013f48:	232d      	movlt	r3, #45	; 0x2d
 8013f4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013f4e:	487f      	ldr	r0, [pc, #508]	; (801414c <_printf_float+0x2e8>)
 8013f50:	4b7f      	ldr	r3, [pc, #508]	; (8014150 <_printf_float+0x2ec>)
 8013f52:	e7d1      	b.n	8013ef8 <_printf_float+0x94>
 8013f54:	6863      	ldr	r3, [r4, #4]
 8013f56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013f5a:	9206      	str	r2, [sp, #24]
 8013f5c:	1c5a      	adds	r2, r3, #1
 8013f5e:	d13f      	bne.n	8013fe0 <_printf_float+0x17c>
 8013f60:	2306      	movs	r3, #6
 8013f62:	6063      	str	r3, [r4, #4]
 8013f64:	9b05      	ldr	r3, [sp, #20]
 8013f66:	6861      	ldr	r1, [r4, #4]
 8013f68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	9303      	str	r3, [sp, #12]
 8013f70:	ab0a      	add	r3, sp, #40	; 0x28
 8013f72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013f76:	ab09      	add	r3, sp, #36	; 0x24
 8013f78:	ec49 8b10 	vmov	d0, r8, r9
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	6022      	str	r2, [r4, #0]
 8013f80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013f84:	4628      	mov	r0, r5
 8013f86:	f7ff fecd 	bl	8013d24 <__cvt>
 8013f8a:	9b06      	ldr	r3, [sp, #24]
 8013f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f8e:	2b47      	cmp	r3, #71	; 0x47
 8013f90:	4680      	mov	r8, r0
 8013f92:	d108      	bne.n	8013fa6 <_printf_float+0x142>
 8013f94:	1cc8      	adds	r0, r1, #3
 8013f96:	db02      	blt.n	8013f9e <_printf_float+0x13a>
 8013f98:	6863      	ldr	r3, [r4, #4]
 8013f9a:	4299      	cmp	r1, r3
 8013f9c:	dd41      	ble.n	8014022 <_printf_float+0x1be>
 8013f9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013fa2:	fa5f fb8b 	uxtb.w	fp, fp
 8013fa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013faa:	d820      	bhi.n	8013fee <_printf_float+0x18a>
 8013fac:	3901      	subs	r1, #1
 8013fae:	465a      	mov	r2, fp
 8013fb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8013fb6:	f7ff ff17 	bl	8013de8 <__exponent>
 8013fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013fbc:	1813      	adds	r3, r2, r0
 8013fbe:	2a01      	cmp	r2, #1
 8013fc0:	4681      	mov	r9, r0
 8013fc2:	6123      	str	r3, [r4, #16]
 8013fc4:	dc02      	bgt.n	8013fcc <_printf_float+0x168>
 8013fc6:	6822      	ldr	r2, [r4, #0]
 8013fc8:	07d2      	lsls	r2, r2, #31
 8013fca:	d501      	bpl.n	8013fd0 <_printf_float+0x16c>
 8013fcc:	3301      	adds	r3, #1
 8013fce:	6123      	str	r3, [r4, #16]
 8013fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d09c      	beq.n	8013f12 <_printf_float+0xae>
 8013fd8:	232d      	movs	r3, #45	; 0x2d
 8013fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fde:	e798      	b.n	8013f12 <_printf_float+0xae>
 8013fe0:	9a06      	ldr	r2, [sp, #24]
 8013fe2:	2a47      	cmp	r2, #71	; 0x47
 8013fe4:	d1be      	bne.n	8013f64 <_printf_float+0x100>
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d1bc      	bne.n	8013f64 <_printf_float+0x100>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e7b9      	b.n	8013f62 <_printf_float+0xfe>
 8013fee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013ff2:	d118      	bne.n	8014026 <_printf_float+0x1c2>
 8013ff4:	2900      	cmp	r1, #0
 8013ff6:	6863      	ldr	r3, [r4, #4]
 8013ff8:	dd0b      	ble.n	8014012 <_printf_float+0x1ae>
 8013ffa:	6121      	str	r1, [r4, #16]
 8013ffc:	b913      	cbnz	r3, 8014004 <_printf_float+0x1a0>
 8013ffe:	6822      	ldr	r2, [r4, #0]
 8014000:	07d0      	lsls	r0, r2, #31
 8014002:	d502      	bpl.n	801400a <_printf_float+0x1a6>
 8014004:	3301      	adds	r3, #1
 8014006:	440b      	add	r3, r1
 8014008:	6123      	str	r3, [r4, #16]
 801400a:	65a1      	str	r1, [r4, #88]	; 0x58
 801400c:	f04f 0900 	mov.w	r9, #0
 8014010:	e7de      	b.n	8013fd0 <_printf_float+0x16c>
 8014012:	b913      	cbnz	r3, 801401a <_printf_float+0x1b6>
 8014014:	6822      	ldr	r2, [r4, #0]
 8014016:	07d2      	lsls	r2, r2, #31
 8014018:	d501      	bpl.n	801401e <_printf_float+0x1ba>
 801401a:	3302      	adds	r3, #2
 801401c:	e7f4      	b.n	8014008 <_printf_float+0x1a4>
 801401e:	2301      	movs	r3, #1
 8014020:	e7f2      	b.n	8014008 <_printf_float+0x1a4>
 8014022:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014028:	4299      	cmp	r1, r3
 801402a:	db05      	blt.n	8014038 <_printf_float+0x1d4>
 801402c:	6823      	ldr	r3, [r4, #0]
 801402e:	6121      	str	r1, [r4, #16]
 8014030:	07d8      	lsls	r0, r3, #31
 8014032:	d5ea      	bpl.n	801400a <_printf_float+0x1a6>
 8014034:	1c4b      	adds	r3, r1, #1
 8014036:	e7e7      	b.n	8014008 <_printf_float+0x1a4>
 8014038:	2900      	cmp	r1, #0
 801403a:	bfd4      	ite	le
 801403c:	f1c1 0202 	rsble	r2, r1, #2
 8014040:	2201      	movgt	r2, #1
 8014042:	4413      	add	r3, r2
 8014044:	e7e0      	b.n	8014008 <_printf_float+0x1a4>
 8014046:	6823      	ldr	r3, [r4, #0]
 8014048:	055a      	lsls	r2, r3, #21
 801404a:	d407      	bmi.n	801405c <_printf_float+0x1f8>
 801404c:	6923      	ldr	r3, [r4, #16]
 801404e:	4642      	mov	r2, r8
 8014050:	4631      	mov	r1, r6
 8014052:	4628      	mov	r0, r5
 8014054:	47b8      	blx	r7
 8014056:	3001      	adds	r0, #1
 8014058:	d12c      	bne.n	80140b4 <_printf_float+0x250>
 801405a:	e764      	b.n	8013f26 <_printf_float+0xc2>
 801405c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014060:	f240 80e0 	bls.w	8014224 <_printf_float+0x3c0>
 8014064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014068:	2200      	movs	r2, #0
 801406a:	2300      	movs	r3, #0
 801406c:	f7ec fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014070:	2800      	cmp	r0, #0
 8014072:	d034      	beq.n	80140de <_printf_float+0x27a>
 8014074:	4a37      	ldr	r2, [pc, #220]	; (8014154 <_printf_float+0x2f0>)
 8014076:	2301      	movs	r3, #1
 8014078:	4631      	mov	r1, r6
 801407a:	4628      	mov	r0, r5
 801407c:	47b8      	blx	r7
 801407e:	3001      	adds	r0, #1
 8014080:	f43f af51 	beq.w	8013f26 <_printf_float+0xc2>
 8014084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014088:	429a      	cmp	r2, r3
 801408a:	db02      	blt.n	8014092 <_printf_float+0x22e>
 801408c:	6823      	ldr	r3, [r4, #0]
 801408e:	07d8      	lsls	r0, r3, #31
 8014090:	d510      	bpl.n	80140b4 <_printf_float+0x250>
 8014092:	ee18 3a10 	vmov	r3, s16
 8014096:	4652      	mov	r2, sl
 8014098:	4631      	mov	r1, r6
 801409a:	4628      	mov	r0, r5
 801409c:	47b8      	blx	r7
 801409e:	3001      	adds	r0, #1
 80140a0:	f43f af41 	beq.w	8013f26 <_printf_float+0xc2>
 80140a4:	f04f 0800 	mov.w	r8, #0
 80140a8:	f104 091a 	add.w	r9, r4, #26
 80140ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140ae:	3b01      	subs	r3, #1
 80140b0:	4543      	cmp	r3, r8
 80140b2:	dc09      	bgt.n	80140c8 <_printf_float+0x264>
 80140b4:	6823      	ldr	r3, [r4, #0]
 80140b6:	079b      	lsls	r3, r3, #30
 80140b8:	f100 8105 	bmi.w	80142c6 <_printf_float+0x462>
 80140bc:	68e0      	ldr	r0, [r4, #12]
 80140be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140c0:	4298      	cmp	r0, r3
 80140c2:	bfb8      	it	lt
 80140c4:	4618      	movlt	r0, r3
 80140c6:	e730      	b.n	8013f2a <_printf_float+0xc6>
 80140c8:	2301      	movs	r3, #1
 80140ca:	464a      	mov	r2, r9
 80140cc:	4631      	mov	r1, r6
 80140ce:	4628      	mov	r0, r5
 80140d0:	47b8      	blx	r7
 80140d2:	3001      	adds	r0, #1
 80140d4:	f43f af27 	beq.w	8013f26 <_printf_float+0xc2>
 80140d8:	f108 0801 	add.w	r8, r8, #1
 80140dc:	e7e6      	b.n	80140ac <_printf_float+0x248>
 80140de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	dc39      	bgt.n	8014158 <_printf_float+0x2f4>
 80140e4:	4a1b      	ldr	r2, [pc, #108]	; (8014154 <_printf_float+0x2f0>)
 80140e6:	2301      	movs	r3, #1
 80140e8:	4631      	mov	r1, r6
 80140ea:	4628      	mov	r0, r5
 80140ec:	47b8      	blx	r7
 80140ee:	3001      	adds	r0, #1
 80140f0:	f43f af19 	beq.w	8013f26 <_printf_float+0xc2>
 80140f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140f8:	4313      	orrs	r3, r2
 80140fa:	d102      	bne.n	8014102 <_printf_float+0x29e>
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	07d9      	lsls	r1, r3, #31
 8014100:	d5d8      	bpl.n	80140b4 <_printf_float+0x250>
 8014102:	ee18 3a10 	vmov	r3, s16
 8014106:	4652      	mov	r2, sl
 8014108:	4631      	mov	r1, r6
 801410a:	4628      	mov	r0, r5
 801410c:	47b8      	blx	r7
 801410e:	3001      	adds	r0, #1
 8014110:	f43f af09 	beq.w	8013f26 <_printf_float+0xc2>
 8014114:	f04f 0900 	mov.w	r9, #0
 8014118:	f104 0a1a 	add.w	sl, r4, #26
 801411c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801411e:	425b      	negs	r3, r3
 8014120:	454b      	cmp	r3, r9
 8014122:	dc01      	bgt.n	8014128 <_printf_float+0x2c4>
 8014124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014126:	e792      	b.n	801404e <_printf_float+0x1ea>
 8014128:	2301      	movs	r3, #1
 801412a:	4652      	mov	r2, sl
 801412c:	4631      	mov	r1, r6
 801412e:	4628      	mov	r0, r5
 8014130:	47b8      	blx	r7
 8014132:	3001      	adds	r0, #1
 8014134:	f43f aef7 	beq.w	8013f26 <_printf_float+0xc2>
 8014138:	f109 0901 	add.w	r9, r9, #1
 801413c:	e7ee      	b.n	801411c <_printf_float+0x2b8>
 801413e:	bf00      	nop
 8014140:	7fefffff 	.word	0x7fefffff
 8014144:	0801dd28 	.word	0x0801dd28
 8014148:	0801dd2c 	.word	0x0801dd2c
 801414c:	0801dd34 	.word	0x0801dd34
 8014150:	0801dd30 	.word	0x0801dd30
 8014154:	0801dd38 	.word	0x0801dd38
 8014158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801415a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801415c:	429a      	cmp	r2, r3
 801415e:	bfa8      	it	ge
 8014160:	461a      	movge	r2, r3
 8014162:	2a00      	cmp	r2, #0
 8014164:	4691      	mov	r9, r2
 8014166:	dc37      	bgt.n	80141d8 <_printf_float+0x374>
 8014168:	f04f 0b00 	mov.w	fp, #0
 801416c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014170:	f104 021a 	add.w	r2, r4, #26
 8014174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014176:	9305      	str	r3, [sp, #20]
 8014178:	eba3 0309 	sub.w	r3, r3, r9
 801417c:	455b      	cmp	r3, fp
 801417e:	dc33      	bgt.n	80141e8 <_printf_float+0x384>
 8014180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014184:	429a      	cmp	r2, r3
 8014186:	db3b      	blt.n	8014200 <_printf_float+0x39c>
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	07da      	lsls	r2, r3, #31
 801418c:	d438      	bmi.n	8014200 <_printf_float+0x39c>
 801418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014190:	9a05      	ldr	r2, [sp, #20]
 8014192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014194:	1a9a      	subs	r2, r3, r2
 8014196:	eba3 0901 	sub.w	r9, r3, r1
 801419a:	4591      	cmp	r9, r2
 801419c:	bfa8      	it	ge
 801419e:	4691      	movge	r9, r2
 80141a0:	f1b9 0f00 	cmp.w	r9, #0
 80141a4:	dc35      	bgt.n	8014212 <_printf_float+0x3ae>
 80141a6:	f04f 0800 	mov.w	r8, #0
 80141aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80141ae:	f104 0a1a 	add.w	sl, r4, #26
 80141b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141b6:	1a9b      	subs	r3, r3, r2
 80141b8:	eba3 0309 	sub.w	r3, r3, r9
 80141bc:	4543      	cmp	r3, r8
 80141be:	f77f af79 	ble.w	80140b4 <_printf_float+0x250>
 80141c2:	2301      	movs	r3, #1
 80141c4:	4652      	mov	r2, sl
 80141c6:	4631      	mov	r1, r6
 80141c8:	4628      	mov	r0, r5
 80141ca:	47b8      	blx	r7
 80141cc:	3001      	adds	r0, #1
 80141ce:	f43f aeaa 	beq.w	8013f26 <_printf_float+0xc2>
 80141d2:	f108 0801 	add.w	r8, r8, #1
 80141d6:	e7ec      	b.n	80141b2 <_printf_float+0x34e>
 80141d8:	4613      	mov	r3, r2
 80141da:	4631      	mov	r1, r6
 80141dc:	4642      	mov	r2, r8
 80141de:	4628      	mov	r0, r5
 80141e0:	47b8      	blx	r7
 80141e2:	3001      	adds	r0, #1
 80141e4:	d1c0      	bne.n	8014168 <_printf_float+0x304>
 80141e6:	e69e      	b.n	8013f26 <_printf_float+0xc2>
 80141e8:	2301      	movs	r3, #1
 80141ea:	4631      	mov	r1, r6
 80141ec:	4628      	mov	r0, r5
 80141ee:	9205      	str	r2, [sp, #20]
 80141f0:	47b8      	blx	r7
 80141f2:	3001      	adds	r0, #1
 80141f4:	f43f ae97 	beq.w	8013f26 <_printf_float+0xc2>
 80141f8:	9a05      	ldr	r2, [sp, #20]
 80141fa:	f10b 0b01 	add.w	fp, fp, #1
 80141fe:	e7b9      	b.n	8014174 <_printf_float+0x310>
 8014200:	ee18 3a10 	vmov	r3, s16
 8014204:	4652      	mov	r2, sl
 8014206:	4631      	mov	r1, r6
 8014208:	4628      	mov	r0, r5
 801420a:	47b8      	blx	r7
 801420c:	3001      	adds	r0, #1
 801420e:	d1be      	bne.n	801418e <_printf_float+0x32a>
 8014210:	e689      	b.n	8013f26 <_printf_float+0xc2>
 8014212:	9a05      	ldr	r2, [sp, #20]
 8014214:	464b      	mov	r3, r9
 8014216:	4442      	add	r2, r8
 8014218:	4631      	mov	r1, r6
 801421a:	4628      	mov	r0, r5
 801421c:	47b8      	blx	r7
 801421e:	3001      	adds	r0, #1
 8014220:	d1c1      	bne.n	80141a6 <_printf_float+0x342>
 8014222:	e680      	b.n	8013f26 <_printf_float+0xc2>
 8014224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014226:	2a01      	cmp	r2, #1
 8014228:	dc01      	bgt.n	801422e <_printf_float+0x3ca>
 801422a:	07db      	lsls	r3, r3, #31
 801422c:	d538      	bpl.n	80142a0 <_printf_float+0x43c>
 801422e:	2301      	movs	r3, #1
 8014230:	4642      	mov	r2, r8
 8014232:	4631      	mov	r1, r6
 8014234:	4628      	mov	r0, r5
 8014236:	47b8      	blx	r7
 8014238:	3001      	adds	r0, #1
 801423a:	f43f ae74 	beq.w	8013f26 <_printf_float+0xc2>
 801423e:	ee18 3a10 	vmov	r3, s16
 8014242:	4652      	mov	r2, sl
 8014244:	4631      	mov	r1, r6
 8014246:	4628      	mov	r0, r5
 8014248:	47b8      	blx	r7
 801424a:	3001      	adds	r0, #1
 801424c:	f43f ae6b 	beq.w	8013f26 <_printf_float+0xc2>
 8014250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014254:	2200      	movs	r2, #0
 8014256:	2300      	movs	r3, #0
 8014258:	f7ec fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 801425c:	b9d8      	cbnz	r0, 8014296 <_printf_float+0x432>
 801425e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014260:	f108 0201 	add.w	r2, r8, #1
 8014264:	3b01      	subs	r3, #1
 8014266:	4631      	mov	r1, r6
 8014268:	4628      	mov	r0, r5
 801426a:	47b8      	blx	r7
 801426c:	3001      	adds	r0, #1
 801426e:	d10e      	bne.n	801428e <_printf_float+0x42a>
 8014270:	e659      	b.n	8013f26 <_printf_float+0xc2>
 8014272:	2301      	movs	r3, #1
 8014274:	4652      	mov	r2, sl
 8014276:	4631      	mov	r1, r6
 8014278:	4628      	mov	r0, r5
 801427a:	47b8      	blx	r7
 801427c:	3001      	adds	r0, #1
 801427e:	f43f ae52 	beq.w	8013f26 <_printf_float+0xc2>
 8014282:	f108 0801 	add.w	r8, r8, #1
 8014286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014288:	3b01      	subs	r3, #1
 801428a:	4543      	cmp	r3, r8
 801428c:	dcf1      	bgt.n	8014272 <_printf_float+0x40e>
 801428e:	464b      	mov	r3, r9
 8014290:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014294:	e6dc      	b.n	8014050 <_printf_float+0x1ec>
 8014296:	f04f 0800 	mov.w	r8, #0
 801429a:	f104 0a1a 	add.w	sl, r4, #26
 801429e:	e7f2      	b.n	8014286 <_printf_float+0x422>
 80142a0:	2301      	movs	r3, #1
 80142a2:	4642      	mov	r2, r8
 80142a4:	e7df      	b.n	8014266 <_printf_float+0x402>
 80142a6:	2301      	movs	r3, #1
 80142a8:	464a      	mov	r2, r9
 80142aa:	4631      	mov	r1, r6
 80142ac:	4628      	mov	r0, r5
 80142ae:	47b8      	blx	r7
 80142b0:	3001      	adds	r0, #1
 80142b2:	f43f ae38 	beq.w	8013f26 <_printf_float+0xc2>
 80142b6:	f108 0801 	add.w	r8, r8, #1
 80142ba:	68e3      	ldr	r3, [r4, #12]
 80142bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142be:	1a5b      	subs	r3, r3, r1
 80142c0:	4543      	cmp	r3, r8
 80142c2:	dcf0      	bgt.n	80142a6 <_printf_float+0x442>
 80142c4:	e6fa      	b.n	80140bc <_printf_float+0x258>
 80142c6:	f04f 0800 	mov.w	r8, #0
 80142ca:	f104 0919 	add.w	r9, r4, #25
 80142ce:	e7f4      	b.n	80142ba <_printf_float+0x456>

080142d0 <_printf_common>:
 80142d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	4616      	mov	r6, r2
 80142d6:	4699      	mov	r9, r3
 80142d8:	688a      	ldr	r2, [r1, #8]
 80142da:	690b      	ldr	r3, [r1, #16]
 80142dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142e0:	4293      	cmp	r3, r2
 80142e2:	bfb8      	it	lt
 80142e4:	4613      	movlt	r3, r2
 80142e6:	6033      	str	r3, [r6, #0]
 80142e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142ec:	4607      	mov	r7, r0
 80142ee:	460c      	mov	r4, r1
 80142f0:	b10a      	cbz	r2, 80142f6 <_printf_common+0x26>
 80142f2:	3301      	adds	r3, #1
 80142f4:	6033      	str	r3, [r6, #0]
 80142f6:	6823      	ldr	r3, [r4, #0]
 80142f8:	0699      	lsls	r1, r3, #26
 80142fa:	bf42      	ittt	mi
 80142fc:	6833      	ldrmi	r3, [r6, #0]
 80142fe:	3302      	addmi	r3, #2
 8014300:	6033      	strmi	r3, [r6, #0]
 8014302:	6825      	ldr	r5, [r4, #0]
 8014304:	f015 0506 	ands.w	r5, r5, #6
 8014308:	d106      	bne.n	8014318 <_printf_common+0x48>
 801430a:	f104 0a19 	add.w	sl, r4, #25
 801430e:	68e3      	ldr	r3, [r4, #12]
 8014310:	6832      	ldr	r2, [r6, #0]
 8014312:	1a9b      	subs	r3, r3, r2
 8014314:	42ab      	cmp	r3, r5
 8014316:	dc26      	bgt.n	8014366 <_printf_common+0x96>
 8014318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801431c:	1e13      	subs	r3, r2, #0
 801431e:	6822      	ldr	r2, [r4, #0]
 8014320:	bf18      	it	ne
 8014322:	2301      	movne	r3, #1
 8014324:	0692      	lsls	r2, r2, #26
 8014326:	d42b      	bmi.n	8014380 <_printf_common+0xb0>
 8014328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801432c:	4649      	mov	r1, r9
 801432e:	4638      	mov	r0, r7
 8014330:	47c0      	blx	r8
 8014332:	3001      	adds	r0, #1
 8014334:	d01e      	beq.n	8014374 <_printf_common+0xa4>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	68e5      	ldr	r5, [r4, #12]
 801433a:	6832      	ldr	r2, [r6, #0]
 801433c:	f003 0306 	and.w	r3, r3, #6
 8014340:	2b04      	cmp	r3, #4
 8014342:	bf08      	it	eq
 8014344:	1aad      	subeq	r5, r5, r2
 8014346:	68a3      	ldr	r3, [r4, #8]
 8014348:	6922      	ldr	r2, [r4, #16]
 801434a:	bf0c      	ite	eq
 801434c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014350:	2500      	movne	r5, #0
 8014352:	4293      	cmp	r3, r2
 8014354:	bfc4      	itt	gt
 8014356:	1a9b      	subgt	r3, r3, r2
 8014358:	18ed      	addgt	r5, r5, r3
 801435a:	2600      	movs	r6, #0
 801435c:	341a      	adds	r4, #26
 801435e:	42b5      	cmp	r5, r6
 8014360:	d11a      	bne.n	8014398 <_printf_common+0xc8>
 8014362:	2000      	movs	r0, #0
 8014364:	e008      	b.n	8014378 <_printf_common+0xa8>
 8014366:	2301      	movs	r3, #1
 8014368:	4652      	mov	r2, sl
 801436a:	4649      	mov	r1, r9
 801436c:	4638      	mov	r0, r7
 801436e:	47c0      	blx	r8
 8014370:	3001      	adds	r0, #1
 8014372:	d103      	bne.n	801437c <_printf_common+0xac>
 8014374:	f04f 30ff 	mov.w	r0, #4294967295
 8014378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437c:	3501      	adds	r5, #1
 801437e:	e7c6      	b.n	801430e <_printf_common+0x3e>
 8014380:	18e1      	adds	r1, r4, r3
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	2030      	movs	r0, #48	; 0x30
 8014386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801438a:	4422      	add	r2, r4
 801438c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014394:	3302      	adds	r3, #2
 8014396:	e7c7      	b.n	8014328 <_printf_common+0x58>
 8014398:	2301      	movs	r3, #1
 801439a:	4622      	mov	r2, r4
 801439c:	4649      	mov	r1, r9
 801439e:	4638      	mov	r0, r7
 80143a0:	47c0      	blx	r8
 80143a2:	3001      	adds	r0, #1
 80143a4:	d0e6      	beq.n	8014374 <_printf_common+0xa4>
 80143a6:	3601      	adds	r6, #1
 80143a8:	e7d9      	b.n	801435e <_printf_common+0x8e>
	...

080143ac <_printf_i>:
 80143ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143b0:	7e0f      	ldrb	r7, [r1, #24]
 80143b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80143b4:	2f78      	cmp	r7, #120	; 0x78
 80143b6:	4691      	mov	r9, r2
 80143b8:	4680      	mov	r8, r0
 80143ba:	460c      	mov	r4, r1
 80143bc:	469a      	mov	sl, r3
 80143be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80143c2:	d807      	bhi.n	80143d4 <_printf_i+0x28>
 80143c4:	2f62      	cmp	r7, #98	; 0x62
 80143c6:	d80a      	bhi.n	80143de <_printf_i+0x32>
 80143c8:	2f00      	cmp	r7, #0
 80143ca:	f000 80d8 	beq.w	801457e <_printf_i+0x1d2>
 80143ce:	2f58      	cmp	r7, #88	; 0x58
 80143d0:	f000 80a3 	beq.w	801451a <_printf_i+0x16e>
 80143d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143dc:	e03a      	b.n	8014454 <_printf_i+0xa8>
 80143de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143e2:	2b15      	cmp	r3, #21
 80143e4:	d8f6      	bhi.n	80143d4 <_printf_i+0x28>
 80143e6:	a101      	add	r1, pc, #4	; (adr r1, 80143ec <_printf_i+0x40>)
 80143e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80143ec:	08014445 	.word	0x08014445
 80143f0:	08014459 	.word	0x08014459
 80143f4:	080143d5 	.word	0x080143d5
 80143f8:	080143d5 	.word	0x080143d5
 80143fc:	080143d5 	.word	0x080143d5
 8014400:	080143d5 	.word	0x080143d5
 8014404:	08014459 	.word	0x08014459
 8014408:	080143d5 	.word	0x080143d5
 801440c:	080143d5 	.word	0x080143d5
 8014410:	080143d5 	.word	0x080143d5
 8014414:	080143d5 	.word	0x080143d5
 8014418:	08014565 	.word	0x08014565
 801441c:	08014489 	.word	0x08014489
 8014420:	08014547 	.word	0x08014547
 8014424:	080143d5 	.word	0x080143d5
 8014428:	080143d5 	.word	0x080143d5
 801442c:	08014587 	.word	0x08014587
 8014430:	080143d5 	.word	0x080143d5
 8014434:	08014489 	.word	0x08014489
 8014438:	080143d5 	.word	0x080143d5
 801443c:	080143d5 	.word	0x080143d5
 8014440:	0801454f 	.word	0x0801454f
 8014444:	682b      	ldr	r3, [r5, #0]
 8014446:	1d1a      	adds	r2, r3, #4
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	602a      	str	r2, [r5, #0]
 801444c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014454:	2301      	movs	r3, #1
 8014456:	e0a3      	b.n	80145a0 <_printf_i+0x1f4>
 8014458:	6820      	ldr	r0, [r4, #0]
 801445a:	6829      	ldr	r1, [r5, #0]
 801445c:	0606      	lsls	r6, r0, #24
 801445e:	f101 0304 	add.w	r3, r1, #4
 8014462:	d50a      	bpl.n	801447a <_printf_i+0xce>
 8014464:	680e      	ldr	r6, [r1, #0]
 8014466:	602b      	str	r3, [r5, #0]
 8014468:	2e00      	cmp	r6, #0
 801446a:	da03      	bge.n	8014474 <_printf_i+0xc8>
 801446c:	232d      	movs	r3, #45	; 0x2d
 801446e:	4276      	negs	r6, r6
 8014470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014474:	485e      	ldr	r0, [pc, #376]	; (80145f0 <_printf_i+0x244>)
 8014476:	230a      	movs	r3, #10
 8014478:	e019      	b.n	80144ae <_printf_i+0x102>
 801447a:	680e      	ldr	r6, [r1, #0]
 801447c:	602b      	str	r3, [r5, #0]
 801447e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014482:	bf18      	it	ne
 8014484:	b236      	sxthne	r6, r6
 8014486:	e7ef      	b.n	8014468 <_printf_i+0xbc>
 8014488:	682b      	ldr	r3, [r5, #0]
 801448a:	6820      	ldr	r0, [r4, #0]
 801448c:	1d19      	adds	r1, r3, #4
 801448e:	6029      	str	r1, [r5, #0]
 8014490:	0601      	lsls	r1, r0, #24
 8014492:	d501      	bpl.n	8014498 <_printf_i+0xec>
 8014494:	681e      	ldr	r6, [r3, #0]
 8014496:	e002      	b.n	801449e <_printf_i+0xf2>
 8014498:	0646      	lsls	r6, r0, #25
 801449a:	d5fb      	bpl.n	8014494 <_printf_i+0xe8>
 801449c:	881e      	ldrh	r6, [r3, #0]
 801449e:	4854      	ldr	r0, [pc, #336]	; (80145f0 <_printf_i+0x244>)
 80144a0:	2f6f      	cmp	r7, #111	; 0x6f
 80144a2:	bf0c      	ite	eq
 80144a4:	2308      	moveq	r3, #8
 80144a6:	230a      	movne	r3, #10
 80144a8:	2100      	movs	r1, #0
 80144aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80144ae:	6865      	ldr	r5, [r4, #4]
 80144b0:	60a5      	str	r5, [r4, #8]
 80144b2:	2d00      	cmp	r5, #0
 80144b4:	bfa2      	ittt	ge
 80144b6:	6821      	ldrge	r1, [r4, #0]
 80144b8:	f021 0104 	bicge.w	r1, r1, #4
 80144bc:	6021      	strge	r1, [r4, #0]
 80144be:	b90e      	cbnz	r6, 80144c4 <_printf_i+0x118>
 80144c0:	2d00      	cmp	r5, #0
 80144c2:	d04d      	beq.n	8014560 <_printf_i+0x1b4>
 80144c4:	4615      	mov	r5, r2
 80144c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80144ca:	fb03 6711 	mls	r7, r3, r1, r6
 80144ce:	5dc7      	ldrb	r7, [r0, r7]
 80144d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80144d4:	4637      	mov	r7, r6
 80144d6:	42bb      	cmp	r3, r7
 80144d8:	460e      	mov	r6, r1
 80144da:	d9f4      	bls.n	80144c6 <_printf_i+0x11a>
 80144dc:	2b08      	cmp	r3, #8
 80144de:	d10b      	bne.n	80144f8 <_printf_i+0x14c>
 80144e0:	6823      	ldr	r3, [r4, #0]
 80144e2:	07de      	lsls	r6, r3, #31
 80144e4:	d508      	bpl.n	80144f8 <_printf_i+0x14c>
 80144e6:	6923      	ldr	r3, [r4, #16]
 80144e8:	6861      	ldr	r1, [r4, #4]
 80144ea:	4299      	cmp	r1, r3
 80144ec:	bfde      	ittt	le
 80144ee:	2330      	movle	r3, #48	; 0x30
 80144f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80144f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80144f8:	1b52      	subs	r2, r2, r5
 80144fa:	6122      	str	r2, [r4, #16]
 80144fc:	f8cd a000 	str.w	sl, [sp]
 8014500:	464b      	mov	r3, r9
 8014502:	aa03      	add	r2, sp, #12
 8014504:	4621      	mov	r1, r4
 8014506:	4640      	mov	r0, r8
 8014508:	f7ff fee2 	bl	80142d0 <_printf_common>
 801450c:	3001      	adds	r0, #1
 801450e:	d14c      	bne.n	80145aa <_printf_i+0x1fe>
 8014510:	f04f 30ff 	mov.w	r0, #4294967295
 8014514:	b004      	add	sp, #16
 8014516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801451a:	4835      	ldr	r0, [pc, #212]	; (80145f0 <_printf_i+0x244>)
 801451c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014520:	6829      	ldr	r1, [r5, #0]
 8014522:	6823      	ldr	r3, [r4, #0]
 8014524:	f851 6b04 	ldr.w	r6, [r1], #4
 8014528:	6029      	str	r1, [r5, #0]
 801452a:	061d      	lsls	r5, r3, #24
 801452c:	d514      	bpl.n	8014558 <_printf_i+0x1ac>
 801452e:	07df      	lsls	r7, r3, #31
 8014530:	bf44      	itt	mi
 8014532:	f043 0320 	orrmi.w	r3, r3, #32
 8014536:	6023      	strmi	r3, [r4, #0]
 8014538:	b91e      	cbnz	r6, 8014542 <_printf_i+0x196>
 801453a:	6823      	ldr	r3, [r4, #0]
 801453c:	f023 0320 	bic.w	r3, r3, #32
 8014540:	6023      	str	r3, [r4, #0]
 8014542:	2310      	movs	r3, #16
 8014544:	e7b0      	b.n	80144a8 <_printf_i+0xfc>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	f043 0320 	orr.w	r3, r3, #32
 801454c:	6023      	str	r3, [r4, #0]
 801454e:	2378      	movs	r3, #120	; 0x78
 8014550:	4828      	ldr	r0, [pc, #160]	; (80145f4 <_printf_i+0x248>)
 8014552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014556:	e7e3      	b.n	8014520 <_printf_i+0x174>
 8014558:	0659      	lsls	r1, r3, #25
 801455a:	bf48      	it	mi
 801455c:	b2b6      	uxthmi	r6, r6
 801455e:	e7e6      	b.n	801452e <_printf_i+0x182>
 8014560:	4615      	mov	r5, r2
 8014562:	e7bb      	b.n	80144dc <_printf_i+0x130>
 8014564:	682b      	ldr	r3, [r5, #0]
 8014566:	6826      	ldr	r6, [r4, #0]
 8014568:	6961      	ldr	r1, [r4, #20]
 801456a:	1d18      	adds	r0, r3, #4
 801456c:	6028      	str	r0, [r5, #0]
 801456e:	0635      	lsls	r5, r6, #24
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	d501      	bpl.n	8014578 <_printf_i+0x1cc>
 8014574:	6019      	str	r1, [r3, #0]
 8014576:	e002      	b.n	801457e <_printf_i+0x1d2>
 8014578:	0670      	lsls	r0, r6, #25
 801457a:	d5fb      	bpl.n	8014574 <_printf_i+0x1c8>
 801457c:	8019      	strh	r1, [r3, #0]
 801457e:	2300      	movs	r3, #0
 8014580:	6123      	str	r3, [r4, #16]
 8014582:	4615      	mov	r5, r2
 8014584:	e7ba      	b.n	80144fc <_printf_i+0x150>
 8014586:	682b      	ldr	r3, [r5, #0]
 8014588:	1d1a      	adds	r2, r3, #4
 801458a:	602a      	str	r2, [r5, #0]
 801458c:	681d      	ldr	r5, [r3, #0]
 801458e:	6862      	ldr	r2, [r4, #4]
 8014590:	2100      	movs	r1, #0
 8014592:	4628      	mov	r0, r5
 8014594:	f7eb fe24 	bl	80001e0 <memchr>
 8014598:	b108      	cbz	r0, 801459e <_printf_i+0x1f2>
 801459a:	1b40      	subs	r0, r0, r5
 801459c:	6060      	str	r0, [r4, #4]
 801459e:	6863      	ldr	r3, [r4, #4]
 80145a0:	6123      	str	r3, [r4, #16]
 80145a2:	2300      	movs	r3, #0
 80145a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145a8:	e7a8      	b.n	80144fc <_printf_i+0x150>
 80145aa:	6923      	ldr	r3, [r4, #16]
 80145ac:	462a      	mov	r2, r5
 80145ae:	4649      	mov	r1, r9
 80145b0:	4640      	mov	r0, r8
 80145b2:	47d0      	blx	sl
 80145b4:	3001      	adds	r0, #1
 80145b6:	d0ab      	beq.n	8014510 <_printf_i+0x164>
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	079b      	lsls	r3, r3, #30
 80145bc:	d413      	bmi.n	80145e6 <_printf_i+0x23a>
 80145be:	68e0      	ldr	r0, [r4, #12]
 80145c0:	9b03      	ldr	r3, [sp, #12]
 80145c2:	4298      	cmp	r0, r3
 80145c4:	bfb8      	it	lt
 80145c6:	4618      	movlt	r0, r3
 80145c8:	e7a4      	b.n	8014514 <_printf_i+0x168>
 80145ca:	2301      	movs	r3, #1
 80145cc:	4632      	mov	r2, r6
 80145ce:	4649      	mov	r1, r9
 80145d0:	4640      	mov	r0, r8
 80145d2:	47d0      	blx	sl
 80145d4:	3001      	adds	r0, #1
 80145d6:	d09b      	beq.n	8014510 <_printf_i+0x164>
 80145d8:	3501      	adds	r5, #1
 80145da:	68e3      	ldr	r3, [r4, #12]
 80145dc:	9903      	ldr	r1, [sp, #12]
 80145de:	1a5b      	subs	r3, r3, r1
 80145e0:	42ab      	cmp	r3, r5
 80145e2:	dcf2      	bgt.n	80145ca <_printf_i+0x21e>
 80145e4:	e7eb      	b.n	80145be <_printf_i+0x212>
 80145e6:	2500      	movs	r5, #0
 80145e8:	f104 0619 	add.w	r6, r4, #25
 80145ec:	e7f5      	b.n	80145da <_printf_i+0x22e>
 80145ee:	bf00      	nop
 80145f0:	0801dd3a 	.word	0x0801dd3a
 80145f4:	0801dd4b 	.word	0x0801dd4b

080145f8 <_scanf_float>:
 80145f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145fc:	b087      	sub	sp, #28
 80145fe:	4617      	mov	r7, r2
 8014600:	9303      	str	r3, [sp, #12]
 8014602:	688b      	ldr	r3, [r1, #8]
 8014604:	1e5a      	subs	r2, r3, #1
 8014606:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801460a:	bf83      	ittte	hi
 801460c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014610:	195b      	addhi	r3, r3, r5
 8014612:	9302      	strhi	r3, [sp, #8]
 8014614:	2300      	movls	r3, #0
 8014616:	bf86      	itte	hi
 8014618:	f240 135d 	movwhi	r3, #349	; 0x15d
 801461c:	608b      	strhi	r3, [r1, #8]
 801461e:	9302      	strls	r3, [sp, #8]
 8014620:	680b      	ldr	r3, [r1, #0]
 8014622:	468b      	mov	fp, r1
 8014624:	2500      	movs	r5, #0
 8014626:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801462a:	f84b 3b1c 	str.w	r3, [fp], #28
 801462e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014632:	4680      	mov	r8, r0
 8014634:	460c      	mov	r4, r1
 8014636:	465e      	mov	r6, fp
 8014638:	46aa      	mov	sl, r5
 801463a:	46a9      	mov	r9, r5
 801463c:	9501      	str	r5, [sp, #4]
 801463e:	68a2      	ldr	r2, [r4, #8]
 8014640:	b152      	cbz	r2, 8014658 <_scanf_float+0x60>
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	2b4e      	cmp	r3, #78	; 0x4e
 8014648:	d864      	bhi.n	8014714 <_scanf_float+0x11c>
 801464a:	2b40      	cmp	r3, #64	; 0x40
 801464c:	d83c      	bhi.n	80146c8 <_scanf_float+0xd0>
 801464e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014652:	b2c8      	uxtb	r0, r1
 8014654:	280e      	cmp	r0, #14
 8014656:	d93a      	bls.n	80146ce <_scanf_float+0xd6>
 8014658:	f1b9 0f00 	cmp.w	r9, #0
 801465c:	d003      	beq.n	8014666 <_scanf_float+0x6e>
 801465e:	6823      	ldr	r3, [r4, #0]
 8014660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014664:	6023      	str	r3, [r4, #0]
 8014666:	f10a 3aff 	add.w	sl, sl, #4294967295
 801466a:	f1ba 0f01 	cmp.w	sl, #1
 801466e:	f200 8113 	bhi.w	8014898 <_scanf_float+0x2a0>
 8014672:	455e      	cmp	r6, fp
 8014674:	f200 8105 	bhi.w	8014882 <_scanf_float+0x28a>
 8014678:	2501      	movs	r5, #1
 801467a:	4628      	mov	r0, r5
 801467c:	b007      	add	sp, #28
 801467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014682:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014686:	2a0d      	cmp	r2, #13
 8014688:	d8e6      	bhi.n	8014658 <_scanf_float+0x60>
 801468a:	a101      	add	r1, pc, #4	; (adr r1, 8014690 <_scanf_float+0x98>)
 801468c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014690:	080147cf 	.word	0x080147cf
 8014694:	08014659 	.word	0x08014659
 8014698:	08014659 	.word	0x08014659
 801469c:	08014659 	.word	0x08014659
 80146a0:	0801482f 	.word	0x0801482f
 80146a4:	08014807 	.word	0x08014807
 80146a8:	08014659 	.word	0x08014659
 80146ac:	08014659 	.word	0x08014659
 80146b0:	080147dd 	.word	0x080147dd
 80146b4:	08014659 	.word	0x08014659
 80146b8:	08014659 	.word	0x08014659
 80146bc:	08014659 	.word	0x08014659
 80146c0:	08014659 	.word	0x08014659
 80146c4:	08014795 	.word	0x08014795
 80146c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80146cc:	e7db      	b.n	8014686 <_scanf_float+0x8e>
 80146ce:	290e      	cmp	r1, #14
 80146d0:	d8c2      	bhi.n	8014658 <_scanf_float+0x60>
 80146d2:	a001      	add	r0, pc, #4	; (adr r0, 80146d8 <_scanf_float+0xe0>)
 80146d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80146d8:	08014787 	.word	0x08014787
 80146dc:	08014659 	.word	0x08014659
 80146e0:	08014787 	.word	0x08014787
 80146e4:	0801481b 	.word	0x0801481b
 80146e8:	08014659 	.word	0x08014659
 80146ec:	08014735 	.word	0x08014735
 80146f0:	08014771 	.word	0x08014771
 80146f4:	08014771 	.word	0x08014771
 80146f8:	08014771 	.word	0x08014771
 80146fc:	08014771 	.word	0x08014771
 8014700:	08014771 	.word	0x08014771
 8014704:	08014771 	.word	0x08014771
 8014708:	08014771 	.word	0x08014771
 801470c:	08014771 	.word	0x08014771
 8014710:	08014771 	.word	0x08014771
 8014714:	2b6e      	cmp	r3, #110	; 0x6e
 8014716:	d809      	bhi.n	801472c <_scanf_float+0x134>
 8014718:	2b60      	cmp	r3, #96	; 0x60
 801471a:	d8b2      	bhi.n	8014682 <_scanf_float+0x8a>
 801471c:	2b54      	cmp	r3, #84	; 0x54
 801471e:	d077      	beq.n	8014810 <_scanf_float+0x218>
 8014720:	2b59      	cmp	r3, #89	; 0x59
 8014722:	d199      	bne.n	8014658 <_scanf_float+0x60>
 8014724:	2d07      	cmp	r5, #7
 8014726:	d197      	bne.n	8014658 <_scanf_float+0x60>
 8014728:	2508      	movs	r5, #8
 801472a:	e029      	b.n	8014780 <_scanf_float+0x188>
 801472c:	2b74      	cmp	r3, #116	; 0x74
 801472e:	d06f      	beq.n	8014810 <_scanf_float+0x218>
 8014730:	2b79      	cmp	r3, #121	; 0x79
 8014732:	e7f6      	b.n	8014722 <_scanf_float+0x12a>
 8014734:	6821      	ldr	r1, [r4, #0]
 8014736:	05c8      	lsls	r0, r1, #23
 8014738:	d51a      	bpl.n	8014770 <_scanf_float+0x178>
 801473a:	9b02      	ldr	r3, [sp, #8]
 801473c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014740:	6021      	str	r1, [r4, #0]
 8014742:	f109 0901 	add.w	r9, r9, #1
 8014746:	b11b      	cbz	r3, 8014750 <_scanf_float+0x158>
 8014748:	3b01      	subs	r3, #1
 801474a:	3201      	adds	r2, #1
 801474c:	9302      	str	r3, [sp, #8]
 801474e:	60a2      	str	r2, [r4, #8]
 8014750:	68a3      	ldr	r3, [r4, #8]
 8014752:	3b01      	subs	r3, #1
 8014754:	60a3      	str	r3, [r4, #8]
 8014756:	6923      	ldr	r3, [r4, #16]
 8014758:	3301      	adds	r3, #1
 801475a:	6123      	str	r3, [r4, #16]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	3b01      	subs	r3, #1
 8014760:	2b00      	cmp	r3, #0
 8014762:	607b      	str	r3, [r7, #4]
 8014764:	f340 8084 	ble.w	8014870 <_scanf_float+0x278>
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	3301      	adds	r3, #1
 801476c:	603b      	str	r3, [r7, #0]
 801476e:	e766      	b.n	801463e <_scanf_float+0x46>
 8014770:	eb1a 0f05 	cmn.w	sl, r5
 8014774:	f47f af70 	bne.w	8014658 <_scanf_float+0x60>
 8014778:	6822      	ldr	r2, [r4, #0]
 801477a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801477e:	6022      	str	r2, [r4, #0]
 8014780:	f806 3b01 	strb.w	r3, [r6], #1
 8014784:	e7e4      	b.n	8014750 <_scanf_float+0x158>
 8014786:	6822      	ldr	r2, [r4, #0]
 8014788:	0610      	lsls	r0, r2, #24
 801478a:	f57f af65 	bpl.w	8014658 <_scanf_float+0x60>
 801478e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014792:	e7f4      	b.n	801477e <_scanf_float+0x186>
 8014794:	f1ba 0f00 	cmp.w	sl, #0
 8014798:	d10e      	bne.n	80147b8 <_scanf_float+0x1c0>
 801479a:	f1b9 0f00 	cmp.w	r9, #0
 801479e:	d10e      	bne.n	80147be <_scanf_float+0x1c6>
 80147a0:	6822      	ldr	r2, [r4, #0]
 80147a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80147a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80147aa:	d108      	bne.n	80147be <_scanf_float+0x1c6>
 80147ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80147b0:	6022      	str	r2, [r4, #0]
 80147b2:	f04f 0a01 	mov.w	sl, #1
 80147b6:	e7e3      	b.n	8014780 <_scanf_float+0x188>
 80147b8:	f1ba 0f02 	cmp.w	sl, #2
 80147bc:	d055      	beq.n	801486a <_scanf_float+0x272>
 80147be:	2d01      	cmp	r5, #1
 80147c0:	d002      	beq.n	80147c8 <_scanf_float+0x1d0>
 80147c2:	2d04      	cmp	r5, #4
 80147c4:	f47f af48 	bne.w	8014658 <_scanf_float+0x60>
 80147c8:	3501      	adds	r5, #1
 80147ca:	b2ed      	uxtb	r5, r5
 80147cc:	e7d8      	b.n	8014780 <_scanf_float+0x188>
 80147ce:	f1ba 0f01 	cmp.w	sl, #1
 80147d2:	f47f af41 	bne.w	8014658 <_scanf_float+0x60>
 80147d6:	f04f 0a02 	mov.w	sl, #2
 80147da:	e7d1      	b.n	8014780 <_scanf_float+0x188>
 80147dc:	b97d      	cbnz	r5, 80147fe <_scanf_float+0x206>
 80147de:	f1b9 0f00 	cmp.w	r9, #0
 80147e2:	f47f af3c 	bne.w	801465e <_scanf_float+0x66>
 80147e6:	6822      	ldr	r2, [r4, #0]
 80147e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80147ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80147f0:	f47f af39 	bne.w	8014666 <_scanf_float+0x6e>
 80147f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80147f8:	6022      	str	r2, [r4, #0]
 80147fa:	2501      	movs	r5, #1
 80147fc:	e7c0      	b.n	8014780 <_scanf_float+0x188>
 80147fe:	2d03      	cmp	r5, #3
 8014800:	d0e2      	beq.n	80147c8 <_scanf_float+0x1d0>
 8014802:	2d05      	cmp	r5, #5
 8014804:	e7de      	b.n	80147c4 <_scanf_float+0x1cc>
 8014806:	2d02      	cmp	r5, #2
 8014808:	f47f af26 	bne.w	8014658 <_scanf_float+0x60>
 801480c:	2503      	movs	r5, #3
 801480e:	e7b7      	b.n	8014780 <_scanf_float+0x188>
 8014810:	2d06      	cmp	r5, #6
 8014812:	f47f af21 	bne.w	8014658 <_scanf_float+0x60>
 8014816:	2507      	movs	r5, #7
 8014818:	e7b2      	b.n	8014780 <_scanf_float+0x188>
 801481a:	6822      	ldr	r2, [r4, #0]
 801481c:	0591      	lsls	r1, r2, #22
 801481e:	f57f af1b 	bpl.w	8014658 <_scanf_float+0x60>
 8014822:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014826:	6022      	str	r2, [r4, #0]
 8014828:	f8cd 9004 	str.w	r9, [sp, #4]
 801482c:	e7a8      	b.n	8014780 <_scanf_float+0x188>
 801482e:	6822      	ldr	r2, [r4, #0]
 8014830:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014834:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014838:	d006      	beq.n	8014848 <_scanf_float+0x250>
 801483a:	0550      	lsls	r0, r2, #21
 801483c:	f57f af0c 	bpl.w	8014658 <_scanf_float+0x60>
 8014840:	f1b9 0f00 	cmp.w	r9, #0
 8014844:	f43f af0f 	beq.w	8014666 <_scanf_float+0x6e>
 8014848:	0591      	lsls	r1, r2, #22
 801484a:	bf58      	it	pl
 801484c:	9901      	ldrpl	r1, [sp, #4]
 801484e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014852:	bf58      	it	pl
 8014854:	eba9 0101 	subpl.w	r1, r9, r1
 8014858:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801485c:	bf58      	it	pl
 801485e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014862:	6022      	str	r2, [r4, #0]
 8014864:	f04f 0900 	mov.w	r9, #0
 8014868:	e78a      	b.n	8014780 <_scanf_float+0x188>
 801486a:	f04f 0a03 	mov.w	sl, #3
 801486e:	e787      	b.n	8014780 <_scanf_float+0x188>
 8014870:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014874:	4639      	mov	r1, r7
 8014876:	4640      	mov	r0, r8
 8014878:	4798      	blx	r3
 801487a:	2800      	cmp	r0, #0
 801487c:	f43f aedf 	beq.w	801463e <_scanf_float+0x46>
 8014880:	e6ea      	b.n	8014658 <_scanf_float+0x60>
 8014882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014886:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801488a:	463a      	mov	r2, r7
 801488c:	4640      	mov	r0, r8
 801488e:	4798      	blx	r3
 8014890:	6923      	ldr	r3, [r4, #16]
 8014892:	3b01      	subs	r3, #1
 8014894:	6123      	str	r3, [r4, #16]
 8014896:	e6ec      	b.n	8014672 <_scanf_float+0x7a>
 8014898:	1e6b      	subs	r3, r5, #1
 801489a:	2b06      	cmp	r3, #6
 801489c:	d825      	bhi.n	80148ea <_scanf_float+0x2f2>
 801489e:	2d02      	cmp	r5, #2
 80148a0:	d836      	bhi.n	8014910 <_scanf_float+0x318>
 80148a2:	455e      	cmp	r6, fp
 80148a4:	f67f aee8 	bls.w	8014678 <_scanf_float+0x80>
 80148a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80148b0:	463a      	mov	r2, r7
 80148b2:	4640      	mov	r0, r8
 80148b4:	4798      	blx	r3
 80148b6:	6923      	ldr	r3, [r4, #16]
 80148b8:	3b01      	subs	r3, #1
 80148ba:	6123      	str	r3, [r4, #16]
 80148bc:	e7f1      	b.n	80148a2 <_scanf_float+0x2aa>
 80148be:	9802      	ldr	r0, [sp, #8]
 80148c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80148c8:	9002      	str	r0, [sp, #8]
 80148ca:	463a      	mov	r2, r7
 80148cc:	4640      	mov	r0, r8
 80148ce:	4798      	blx	r3
 80148d0:	6923      	ldr	r3, [r4, #16]
 80148d2:	3b01      	subs	r3, #1
 80148d4:	6123      	str	r3, [r4, #16]
 80148d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80148da:	fa5f fa8a 	uxtb.w	sl, sl
 80148de:	f1ba 0f02 	cmp.w	sl, #2
 80148e2:	d1ec      	bne.n	80148be <_scanf_float+0x2c6>
 80148e4:	3d03      	subs	r5, #3
 80148e6:	b2ed      	uxtb	r5, r5
 80148e8:	1b76      	subs	r6, r6, r5
 80148ea:	6823      	ldr	r3, [r4, #0]
 80148ec:	05da      	lsls	r2, r3, #23
 80148ee:	d52f      	bpl.n	8014950 <_scanf_float+0x358>
 80148f0:	055b      	lsls	r3, r3, #21
 80148f2:	d510      	bpl.n	8014916 <_scanf_float+0x31e>
 80148f4:	455e      	cmp	r6, fp
 80148f6:	f67f aebf 	bls.w	8014678 <_scanf_float+0x80>
 80148fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014902:	463a      	mov	r2, r7
 8014904:	4640      	mov	r0, r8
 8014906:	4798      	blx	r3
 8014908:	6923      	ldr	r3, [r4, #16]
 801490a:	3b01      	subs	r3, #1
 801490c:	6123      	str	r3, [r4, #16]
 801490e:	e7f1      	b.n	80148f4 <_scanf_float+0x2fc>
 8014910:	46aa      	mov	sl, r5
 8014912:	9602      	str	r6, [sp, #8]
 8014914:	e7df      	b.n	80148d6 <_scanf_float+0x2de>
 8014916:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801491a:	6923      	ldr	r3, [r4, #16]
 801491c:	2965      	cmp	r1, #101	; 0x65
 801491e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014922:	f106 35ff 	add.w	r5, r6, #4294967295
 8014926:	6123      	str	r3, [r4, #16]
 8014928:	d00c      	beq.n	8014944 <_scanf_float+0x34c>
 801492a:	2945      	cmp	r1, #69	; 0x45
 801492c:	d00a      	beq.n	8014944 <_scanf_float+0x34c>
 801492e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014932:	463a      	mov	r2, r7
 8014934:	4640      	mov	r0, r8
 8014936:	4798      	blx	r3
 8014938:	6923      	ldr	r3, [r4, #16]
 801493a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801493e:	3b01      	subs	r3, #1
 8014940:	1eb5      	subs	r5, r6, #2
 8014942:	6123      	str	r3, [r4, #16]
 8014944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014948:	463a      	mov	r2, r7
 801494a:	4640      	mov	r0, r8
 801494c:	4798      	blx	r3
 801494e:	462e      	mov	r6, r5
 8014950:	6825      	ldr	r5, [r4, #0]
 8014952:	f015 0510 	ands.w	r5, r5, #16
 8014956:	d159      	bne.n	8014a0c <_scanf_float+0x414>
 8014958:	7035      	strb	r5, [r6, #0]
 801495a:	6823      	ldr	r3, [r4, #0]
 801495c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014964:	d11b      	bne.n	801499e <_scanf_float+0x3a6>
 8014966:	9b01      	ldr	r3, [sp, #4]
 8014968:	454b      	cmp	r3, r9
 801496a:	eba3 0209 	sub.w	r2, r3, r9
 801496e:	d123      	bne.n	80149b8 <_scanf_float+0x3c0>
 8014970:	2200      	movs	r2, #0
 8014972:	4659      	mov	r1, fp
 8014974:	4640      	mov	r0, r8
 8014976:	f000 ff25 	bl	80157c4 <_strtod_r>
 801497a:	6822      	ldr	r2, [r4, #0]
 801497c:	9b03      	ldr	r3, [sp, #12]
 801497e:	f012 0f02 	tst.w	r2, #2
 8014982:	ec57 6b10 	vmov	r6, r7, d0
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	d021      	beq.n	80149ce <_scanf_float+0x3d6>
 801498a:	9903      	ldr	r1, [sp, #12]
 801498c:	1d1a      	adds	r2, r3, #4
 801498e:	600a      	str	r2, [r1, #0]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	e9c3 6700 	strd	r6, r7, [r3]
 8014996:	68e3      	ldr	r3, [r4, #12]
 8014998:	3301      	adds	r3, #1
 801499a:	60e3      	str	r3, [r4, #12]
 801499c:	e66d      	b.n	801467a <_scanf_float+0x82>
 801499e:	9b04      	ldr	r3, [sp, #16]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d0e5      	beq.n	8014970 <_scanf_float+0x378>
 80149a4:	9905      	ldr	r1, [sp, #20]
 80149a6:	230a      	movs	r3, #10
 80149a8:	462a      	mov	r2, r5
 80149aa:	3101      	adds	r1, #1
 80149ac:	4640      	mov	r0, r8
 80149ae:	f000 ff91 	bl	80158d4 <_strtol_r>
 80149b2:	9b04      	ldr	r3, [sp, #16]
 80149b4:	9e05      	ldr	r6, [sp, #20]
 80149b6:	1ac2      	subs	r2, r0, r3
 80149b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80149bc:	429e      	cmp	r6, r3
 80149be:	bf28      	it	cs
 80149c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80149c4:	4912      	ldr	r1, [pc, #72]	; (8014a10 <_scanf_float+0x418>)
 80149c6:	4630      	mov	r0, r6
 80149c8:	f000 f8ba 	bl	8014b40 <siprintf>
 80149cc:	e7d0      	b.n	8014970 <_scanf_float+0x378>
 80149ce:	9903      	ldr	r1, [sp, #12]
 80149d0:	f012 0f04 	tst.w	r2, #4
 80149d4:	f103 0204 	add.w	r2, r3, #4
 80149d8:	600a      	str	r2, [r1, #0]
 80149da:	d1d9      	bne.n	8014990 <_scanf_float+0x398>
 80149dc:	f8d3 8000 	ldr.w	r8, [r3]
 80149e0:	ee10 2a10 	vmov	r2, s0
 80149e4:	ee10 0a10 	vmov	r0, s0
 80149e8:	463b      	mov	r3, r7
 80149ea:	4639      	mov	r1, r7
 80149ec:	f7ec f89e 	bl	8000b2c <__aeabi_dcmpun>
 80149f0:	b128      	cbz	r0, 80149fe <_scanf_float+0x406>
 80149f2:	4808      	ldr	r0, [pc, #32]	; (8014a14 <_scanf_float+0x41c>)
 80149f4:	f000 f89e 	bl	8014b34 <nanf>
 80149f8:	ed88 0a00 	vstr	s0, [r8]
 80149fc:	e7cb      	b.n	8014996 <_scanf_float+0x39e>
 80149fe:	4630      	mov	r0, r6
 8014a00:	4639      	mov	r1, r7
 8014a02:	f7ec f8f1 	bl	8000be8 <__aeabi_d2f>
 8014a06:	f8c8 0000 	str.w	r0, [r8]
 8014a0a:	e7c4      	b.n	8014996 <_scanf_float+0x39e>
 8014a0c:	2500      	movs	r5, #0
 8014a0e:	e634      	b.n	801467a <_scanf_float+0x82>
 8014a10:	0801dd5c 	.word	0x0801dd5c
 8014a14:	0801e1d0 	.word	0x0801e1d0

08014a18 <iprintf>:
 8014a18:	b40f      	push	{r0, r1, r2, r3}
 8014a1a:	4b0a      	ldr	r3, [pc, #40]	; (8014a44 <iprintf+0x2c>)
 8014a1c:	b513      	push	{r0, r1, r4, lr}
 8014a1e:	681c      	ldr	r4, [r3, #0]
 8014a20:	b124      	cbz	r4, 8014a2c <iprintf+0x14>
 8014a22:	69a3      	ldr	r3, [r4, #24]
 8014a24:	b913      	cbnz	r3, 8014a2c <iprintf+0x14>
 8014a26:	4620      	mov	r0, r4
 8014a28:	f001 ffaa 	bl	8016980 <__sinit>
 8014a2c:	ab05      	add	r3, sp, #20
 8014a2e:	9a04      	ldr	r2, [sp, #16]
 8014a30:	68a1      	ldr	r1, [r4, #8]
 8014a32:	9301      	str	r3, [sp, #4]
 8014a34:	4620      	mov	r0, r4
 8014a36:	f003 fb81 	bl	801813c <_vfiprintf_r>
 8014a3a:	b002      	add	sp, #8
 8014a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a40:	b004      	add	sp, #16
 8014a42:	4770      	bx	lr
 8014a44:	20000230 	.word	0x20000230

08014a48 <_puts_r>:
 8014a48:	b570      	push	{r4, r5, r6, lr}
 8014a4a:	460e      	mov	r6, r1
 8014a4c:	4605      	mov	r5, r0
 8014a4e:	b118      	cbz	r0, 8014a58 <_puts_r+0x10>
 8014a50:	6983      	ldr	r3, [r0, #24]
 8014a52:	b90b      	cbnz	r3, 8014a58 <_puts_r+0x10>
 8014a54:	f001 ff94 	bl	8016980 <__sinit>
 8014a58:	69ab      	ldr	r3, [r5, #24]
 8014a5a:	68ac      	ldr	r4, [r5, #8]
 8014a5c:	b913      	cbnz	r3, 8014a64 <_puts_r+0x1c>
 8014a5e:	4628      	mov	r0, r5
 8014a60:	f001 ff8e 	bl	8016980 <__sinit>
 8014a64:	4b2c      	ldr	r3, [pc, #176]	; (8014b18 <_puts_r+0xd0>)
 8014a66:	429c      	cmp	r4, r3
 8014a68:	d120      	bne.n	8014aac <_puts_r+0x64>
 8014a6a:	686c      	ldr	r4, [r5, #4]
 8014a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a6e:	07db      	lsls	r3, r3, #31
 8014a70:	d405      	bmi.n	8014a7e <_puts_r+0x36>
 8014a72:	89a3      	ldrh	r3, [r4, #12]
 8014a74:	0598      	lsls	r0, r3, #22
 8014a76:	d402      	bmi.n	8014a7e <_puts_r+0x36>
 8014a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a7a:	f002 fb92 	bl	80171a2 <__retarget_lock_acquire_recursive>
 8014a7e:	89a3      	ldrh	r3, [r4, #12]
 8014a80:	0719      	lsls	r1, r3, #28
 8014a82:	d51d      	bpl.n	8014ac0 <_puts_r+0x78>
 8014a84:	6923      	ldr	r3, [r4, #16]
 8014a86:	b1db      	cbz	r3, 8014ac0 <_puts_r+0x78>
 8014a88:	3e01      	subs	r6, #1
 8014a8a:	68a3      	ldr	r3, [r4, #8]
 8014a8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014a90:	3b01      	subs	r3, #1
 8014a92:	60a3      	str	r3, [r4, #8]
 8014a94:	bb39      	cbnz	r1, 8014ae6 <_puts_r+0x9e>
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	da38      	bge.n	8014b0c <_puts_r+0xc4>
 8014a9a:	4622      	mov	r2, r4
 8014a9c:	210a      	movs	r1, #10
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	f000 ff1a 	bl	80158d8 <__swbuf_r>
 8014aa4:	3001      	adds	r0, #1
 8014aa6:	d011      	beq.n	8014acc <_puts_r+0x84>
 8014aa8:	250a      	movs	r5, #10
 8014aaa:	e011      	b.n	8014ad0 <_puts_r+0x88>
 8014aac:	4b1b      	ldr	r3, [pc, #108]	; (8014b1c <_puts_r+0xd4>)
 8014aae:	429c      	cmp	r4, r3
 8014ab0:	d101      	bne.n	8014ab6 <_puts_r+0x6e>
 8014ab2:	68ac      	ldr	r4, [r5, #8]
 8014ab4:	e7da      	b.n	8014a6c <_puts_r+0x24>
 8014ab6:	4b1a      	ldr	r3, [pc, #104]	; (8014b20 <_puts_r+0xd8>)
 8014ab8:	429c      	cmp	r4, r3
 8014aba:	bf08      	it	eq
 8014abc:	68ec      	ldreq	r4, [r5, #12]
 8014abe:	e7d5      	b.n	8014a6c <_puts_r+0x24>
 8014ac0:	4621      	mov	r1, r4
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f000 ff5a 	bl	801597c <__swsetup_r>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d0dd      	beq.n	8014a88 <_puts_r+0x40>
 8014acc:	f04f 35ff 	mov.w	r5, #4294967295
 8014ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ad2:	07da      	lsls	r2, r3, #31
 8014ad4:	d405      	bmi.n	8014ae2 <_puts_r+0x9a>
 8014ad6:	89a3      	ldrh	r3, [r4, #12]
 8014ad8:	059b      	lsls	r3, r3, #22
 8014ada:	d402      	bmi.n	8014ae2 <_puts_r+0x9a>
 8014adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ade:	f002 fb61 	bl	80171a4 <__retarget_lock_release_recursive>
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	bd70      	pop	{r4, r5, r6, pc}
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	da04      	bge.n	8014af4 <_puts_r+0xac>
 8014aea:	69a2      	ldr	r2, [r4, #24]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	dc06      	bgt.n	8014afe <_puts_r+0xb6>
 8014af0:	290a      	cmp	r1, #10
 8014af2:	d004      	beq.n	8014afe <_puts_r+0xb6>
 8014af4:	6823      	ldr	r3, [r4, #0]
 8014af6:	1c5a      	adds	r2, r3, #1
 8014af8:	6022      	str	r2, [r4, #0]
 8014afa:	7019      	strb	r1, [r3, #0]
 8014afc:	e7c5      	b.n	8014a8a <_puts_r+0x42>
 8014afe:	4622      	mov	r2, r4
 8014b00:	4628      	mov	r0, r5
 8014b02:	f000 fee9 	bl	80158d8 <__swbuf_r>
 8014b06:	3001      	adds	r0, #1
 8014b08:	d1bf      	bne.n	8014a8a <_puts_r+0x42>
 8014b0a:	e7df      	b.n	8014acc <_puts_r+0x84>
 8014b0c:	6823      	ldr	r3, [r4, #0]
 8014b0e:	250a      	movs	r5, #10
 8014b10:	1c5a      	adds	r2, r3, #1
 8014b12:	6022      	str	r2, [r4, #0]
 8014b14:	701d      	strb	r5, [r3, #0]
 8014b16:	e7db      	b.n	8014ad0 <_puts_r+0x88>
 8014b18:	0801df6c 	.word	0x0801df6c
 8014b1c:	0801df8c 	.word	0x0801df8c
 8014b20:	0801df4c 	.word	0x0801df4c

08014b24 <puts>:
 8014b24:	4b02      	ldr	r3, [pc, #8]	; (8014b30 <puts+0xc>)
 8014b26:	4601      	mov	r1, r0
 8014b28:	6818      	ldr	r0, [r3, #0]
 8014b2a:	f7ff bf8d 	b.w	8014a48 <_puts_r>
 8014b2e:	bf00      	nop
 8014b30:	20000230 	.word	0x20000230

08014b34 <nanf>:
 8014b34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014b3c <nanf+0x8>
 8014b38:	4770      	bx	lr
 8014b3a:	bf00      	nop
 8014b3c:	7fc00000 	.word	0x7fc00000

08014b40 <siprintf>:
 8014b40:	b40e      	push	{r1, r2, r3}
 8014b42:	b500      	push	{lr}
 8014b44:	b09c      	sub	sp, #112	; 0x70
 8014b46:	ab1d      	add	r3, sp, #116	; 0x74
 8014b48:	9002      	str	r0, [sp, #8]
 8014b4a:	9006      	str	r0, [sp, #24]
 8014b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b50:	4809      	ldr	r0, [pc, #36]	; (8014b78 <siprintf+0x38>)
 8014b52:	9107      	str	r1, [sp, #28]
 8014b54:	9104      	str	r1, [sp, #16]
 8014b56:	4909      	ldr	r1, [pc, #36]	; (8014b7c <siprintf+0x3c>)
 8014b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b5c:	9105      	str	r1, [sp, #20]
 8014b5e:	6800      	ldr	r0, [r0, #0]
 8014b60:	9301      	str	r3, [sp, #4]
 8014b62:	a902      	add	r1, sp, #8
 8014b64:	f003 f9c0 	bl	8017ee8 <_svfiprintf_r>
 8014b68:	9b02      	ldr	r3, [sp, #8]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	701a      	strb	r2, [r3, #0]
 8014b6e:	b01c      	add	sp, #112	; 0x70
 8014b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b74:	b003      	add	sp, #12
 8014b76:	4770      	bx	lr
 8014b78:	20000230 	.word	0x20000230
 8014b7c:	ffff0208 	.word	0xffff0208

08014b80 <sulp>:
 8014b80:	b570      	push	{r4, r5, r6, lr}
 8014b82:	4604      	mov	r4, r0
 8014b84:	460d      	mov	r5, r1
 8014b86:	ec45 4b10 	vmov	d0, r4, r5
 8014b8a:	4616      	mov	r6, r2
 8014b8c:	f002 ff0a 	bl	80179a4 <__ulp>
 8014b90:	ec51 0b10 	vmov	r0, r1, d0
 8014b94:	b17e      	cbz	r6, 8014bb6 <sulp+0x36>
 8014b96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014b9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	dd09      	ble.n	8014bb6 <sulp+0x36>
 8014ba2:	051b      	lsls	r3, r3, #20
 8014ba4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014ba8:	2400      	movs	r4, #0
 8014baa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014bae:	4622      	mov	r2, r4
 8014bb0:	462b      	mov	r3, r5
 8014bb2:	f7eb fd21 	bl	80005f8 <__aeabi_dmul>
 8014bb6:	bd70      	pop	{r4, r5, r6, pc}

08014bb8 <_strtod_l>:
 8014bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bbc:	ed2d 8b02 	vpush	{d8}
 8014bc0:	b09d      	sub	sp, #116	; 0x74
 8014bc2:	461f      	mov	r7, r3
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	9318      	str	r3, [sp, #96]	; 0x60
 8014bc8:	4ba2      	ldr	r3, [pc, #648]	; (8014e54 <_strtod_l+0x29c>)
 8014bca:	9213      	str	r2, [sp, #76]	; 0x4c
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	9305      	str	r3, [sp, #20]
 8014bd0:	4604      	mov	r4, r0
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	4688      	mov	r8, r1
 8014bd6:	f7eb fafb 	bl	80001d0 <strlen>
 8014bda:	f04f 0a00 	mov.w	sl, #0
 8014bde:	4605      	mov	r5, r0
 8014be0:	f04f 0b00 	mov.w	fp, #0
 8014be4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bea:	781a      	ldrb	r2, [r3, #0]
 8014bec:	2a2b      	cmp	r2, #43	; 0x2b
 8014bee:	d04e      	beq.n	8014c8e <_strtod_l+0xd6>
 8014bf0:	d83b      	bhi.n	8014c6a <_strtod_l+0xb2>
 8014bf2:	2a0d      	cmp	r2, #13
 8014bf4:	d834      	bhi.n	8014c60 <_strtod_l+0xa8>
 8014bf6:	2a08      	cmp	r2, #8
 8014bf8:	d834      	bhi.n	8014c64 <_strtod_l+0xac>
 8014bfa:	2a00      	cmp	r2, #0
 8014bfc:	d03e      	beq.n	8014c7c <_strtod_l+0xc4>
 8014bfe:	2300      	movs	r3, #0
 8014c00:	930a      	str	r3, [sp, #40]	; 0x28
 8014c02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014c04:	7833      	ldrb	r3, [r6, #0]
 8014c06:	2b30      	cmp	r3, #48	; 0x30
 8014c08:	f040 80b0 	bne.w	8014d6c <_strtod_l+0x1b4>
 8014c0c:	7873      	ldrb	r3, [r6, #1]
 8014c0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014c12:	2b58      	cmp	r3, #88	; 0x58
 8014c14:	d168      	bne.n	8014ce8 <_strtod_l+0x130>
 8014c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c18:	9301      	str	r3, [sp, #4]
 8014c1a:	ab18      	add	r3, sp, #96	; 0x60
 8014c1c:	9702      	str	r7, [sp, #8]
 8014c1e:	9300      	str	r3, [sp, #0]
 8014c20:	4a8d      	ldr	r2, [pc, #564]	; (8014e58 <_strtod_l+0x2a0>)
 8014c22:	ab19      	add	r3, sp, #100	; 0x64
 8014c24:	a917      	add	r1, sp, #92	; 0x5c
 8014c26:	4620      	mov	r0, r4
 8014c28:	f001 ffae 	bl	8016b88 <__gethex>
 8014c2c:	f010 0707 	ands.w	r7, r0, #7
 8014c30:	4605      	mov	r5, r0
 8014c32:	d005      	beq.n	8014c40 <_strtod_l+0x88>
 8014c34:	2f06      	cmp	r7, #6
 8014c36:	d12c      	bne.n	8014c92 <_strtod_l+0xda>
 8014c38:	3601      	adds	r6, #1
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8014c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8014c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	f040 8590 	bne.w	8015768 <_strtod_l+0xbb0>
 8014c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c4a:	b1eb      	cbz	r3, 8014c88 <_strtod_l+0xd0>
 8014c4c:	4652      	mov	r2, sl
 8014c4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014c52:	ec43 2b10 	vmov	d0, r2, r3
 8014c56:	b01d      	add	sp, #116	; 0x74
 8014c58:	ecbd 8b02 	vpop	{d8}
 8014c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c60:	2a20      	cmp	r2, #32
 8014c62:	d1cc      	bne.n	8014bfe <_strtod_l+0x46>
 8014c64:	3301      	adds	r3, #1
 8014c66:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c68:	e7be      	b.n	8014be8 <_strtod_l+0x30>
 8014c6a:	2a2d      	cmp	r2, #45	; 0x2d
 8014c6c:	d1c7      	bne.n	8014bfe <_strtod_l+0x46>
 8014c6e:	2201      	movs	r2, #1
 8014c70:	920a      	str	r2, [sp, #40]	; 0x28
 8014c72:	1c5a      	adds	r2, r3, #1
 8014c74:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c76:	785b      	ldrb	r3, [r3, #1]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1c2      	bne.n	8014c02 <_strtod_l+0x4a>
 8014c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	f040 856e 	bne.w	8015764 <_strtod_l+0xbac>
 8014c88:	4652      	mov	r2, sl
 8014c8a:	465b      	mov	r3, fp
 8014c8c:	e7e1      	b.n	8014c52 <_strtod_l+0x9a>
 8014c8e:	2200      	movs	r2, #0
 8014c90:	e7ee      	b.n	8014c70 <_strtod_l+0xb8>
 8014c92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c94:	b13a      	cbz	r2, 8014ca6 <_strtod_l+0xee>
 8014c96:	2135      	movs	r1, #53	; 0x35
 8014c98:	a81a      	add	r0, sp, #104	; 0x68
 8014c9a:	f002 ff8e 	bl	8017bba <__copybits>
 8014c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f002 fb4d 	bl	8017340 <_Bfree>
 8014ca6:	3f01      	subs	r7, #1
 8014ca8:	2f04      	cmp	r7, #4
 8014caa:	d806      	bhi.n	8014cba <_strtod_l+0x102>
 8014cac:	e8df f007 	tbb	[pc, r7]
 8014cb0:	1714030a 	.word	0x1714030a
 8014cb4:	0a          	.byte	0x0a
 8014cb5:	00          	.byte	0x00
 8014cb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014cba:	0728      	lsls	r0, r5, #28
 8014cbc:	d5c0      	bpl.n	8014c40 <_strtod_l+0x88>
 8014cbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014cc2:	e7bd      	b.n	8014c40 <_strtod_l+0x88>
 8014cc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014cc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014cca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014cce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014cd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014cd6:	e7f0      	b.n	8014cba <_strtod_l+0x102>
 8014cd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014e5c <_strtod_l+0x2a4>
 8014cdc:	e7ed      	b.n	8014cba <_strtod_l+0x102>
 8014cde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014ce2:	f04f 3aff 	mov.w	sl, #4294967295
 8014ce6:	e7e8      	b.n	8014cba <_strtod_l+0x102>
 8014ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cea:	1c5a      	adds	r2, r3, #1
 8014cec:	9217      	str	r2, [sp, #92]	; 0x5c
 8014cee:	785b      	ldrb	r3, [r3, #1]
 8014cf0:	2b30      	cmp	r3, #48	; 0x30
 8014cf2:	d0f9      	beq.n	8014ce8 <_strtod_l+0x130>
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d0a3      	beq.n	8014c40 <_strtod_l+0x88>
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	f04f 0900 	mov.w	r9, #0
 8014cfe:	9304      	str	r3, [sp, #16]
 8014d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d02:	9308      	str	r3, [sp, #32]
 8014d04:	f8cd 901c 	str.w	r9, [sp, #28]
 8014d08:	464f      	mov	r7, r9
 8014d0a:	220a      	movs	r2, #10
 8014d0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014d0e:	7806      	ldrb	r6, [r0, #0]
 8014d10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014d14:	b2d9      	uxtb	r1, r3
 8014d16:	2909      	cmp	r1, #9
 8014d18:	d92a      	bls.n	8014d70 <_strtod_l+0x1b8>
 8014d1a:	9905      	ldr	r1, [sp, #20]
 8014d1c:	462a      	mov	r2, r5
 8014d1e:	f003 fb9a 	bl	8018456 <strncmp>
 8014d22:	b398      	cbz	r0, 8014d8c <_strtod_l+0x1d4>
 8014d24:	2000      	movs	r0, #0
 8014d26:	4632      	mov	r2, r6
 8014d28:	463d      	mov	r5, r7
 8014d2a:	9005      	str	r0, [sp, #20]
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2a65      	cmp	r2, #101	; 0x65
 8014d30:	d001      	beq.n	8014d36 <_strtod_l+0x17e>
 8014d32:	2a45      	cmp	r2, #69	; 0x45
 8014d34:	d118      	bne.n	8014d68 <_strtod_l+0x1b0>
 8014d36:	b91d      	cbnz	r5, 8014d40 <_strtod_l+0x188>
 8014d38:	9a04      	ldr	r2, [sp, #16]
 8014d3a:	4302      	orrs	r2, r0
 8014d3c:	d09e      	beq.n	8014c7c <_strtod_l+0xc4>
 8014d3e:	2500      	movs	r5, #0
 8014d40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014d44:	f108 0201 	add.w	r2, r8, #1
 8014d48:	9217      	str	r2, [sp, #92]	; 0x5c
 8014d4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014d4e:	2a2b      	cmp	r2, #43	; 0x2b
 8014d50:	d075      	beq.n	8014e3e <_strtod_l+0x286>
 8014d52:	2a2d      	cmp	r2, #45	; 0x2d
 8014d54:	d07b      	beq.n	8014e4e <_strtod_l+0x296>
 8014d56:	f04f 0c00 	mov.w	ip, #0
 8014d5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014d5e:	2909      	cmp	r1, #9
 8014d60:	f240 8082 	bls.w	8014e68 <_strtod_l+0x2b0>
 8014d64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014d68:	2600      	movs	r6, #0
 8014d6a:	e09d      	b.n	8014ea8 <_strtod_l+0x2f0>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	e7c4      	b.n	8014cfa <_strtod_l+0x142>
 8014d70:	2f08      	cmp	r7, #8
 8014d72:	bfd8      	it	le
 8014d74:	9907      	ldrle	r1, [sp, #28]
 8014d76:	f100 0001 	add.w	r0, r0, #1
 8014d7a:	bfda      	itte	le
 8014d7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014d80:	9307      	strle	r3, [sp, #28]
 8014d82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014d86:	3701      	adds	r7, #1
 8014d88:	9017      	str	r0, [sp, #92]	; 0x5c
 8014d8a:	e7bf      	b.n	8014d0c <_strtod_l+0x154>
 8014d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d8e:	195a      	adds	r2, r3, r5
 8014d90:	9217      	str	r2, [sp, #92]	; 0x5c
 8014d92:	5d5a      	ldrb	r2, [r3, r5]
 8014d94:	2f00      	cmp	r7, #0
 8014d96:	d037      	beq.n	8014e08 <_strtod_l+0x250>
 8014d98:	9005      	str	r0, [sp, #20]
 8014d9a:	463d      	mov	r5, r7
 8014d9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014da0:	2b09      	cmp	r3, #9
 8014da2:	d912      	bls.n	8014dca <_strtod_l+0x212>
 8014da4:	2301      	movs	r3, #1
 8014da6:	e7c2      	b.n	8014d2e <_strtod_l+0x176>
 8014da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014daa:	1c5a      	adds	r2, r3, #1
 8014dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8014dae:	785a      	ldrb	r2, [r3, #1]
 8014db0:	3001      	adds	r0, #1
 8014db2:	2a30      	cmp	r2, #48	; 0x30
 8014db4:	d0f8      	beq.n	8014da8 <_strtod_l+0x1f0>
 8014db6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014dba:	2b08      	cmp	r3, #8
 8014dbc:	f200 84d9 	bhi.w	8015772 <_strtod_l+0xbba>
 8014dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dc2:	9005      	str	r0, [sp, #20]
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	9308      	str	r3, [sp, #32]
 8014dc8:	4605      	mov	r5, r0
 8014dca:	3a30      	subs	r2, #48	; 0x30
 8014dcc:	f100 0301 	add.w	r3, r0, #1
 8014dd0:	d014      	beq.n	8014dfc <_strtod_l+0x244>
 8014dd2:	9905      	ldr	r1, [sp, #20]
 8014dd4:	4419      	add	r1, r3
 8014dd6:	9105      	str	r1, [sp, #20]
 8014dd8:	462b      	mov	r3, r5
 8014dda:	eb00 0e05 	add.w	lr, r0, r5
 8014dde:	210a      	movs	r1, #10
 8014de0:	4573      	cmp	r3, lr
 8014de2:	d113      	bne.n	8014e0c <_strtod_l+0x254>
 8014de4:	182b      	adds	r3, r5, r0
 8014de6:	2b08      	cmp	r3, #8
 8014de8:	f105 0501 	add.w	r5, r5, #1
 8014dec:	4405      	add	r5, r0
 8014dee:	dc1c      	bgt.n	8014e2a <_strtod_l+0x272>
 8014df0:	9907      	ldr	r1, [sp, #28]
 8014df2:	230a      	movs	r3, #10
 8014df4:	fb03 2301 	mla	r3, r3, r1, r2
 8014df8:	9307      	str	r3, [sp, #28]
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014dfe:	1c51      	adds	r1, r2, #1
 8014e00:	9117      	str	r1, [sp, #92]	; 0x5c
 8014e02:	7852      	ldrb	r2, [r2, #1]
 8014e04:	4618      	mov	r0, r3
 8014e06:	e7c9      	b.n	8014d9c <_strtod_l+0x1e4>
 8014e08:	4638      	mov	r0, r7
 8014e0a:	e7d2      	b.n	8014db2 <_strtod_l+0x1fa>
 8014e0c:	2b08      	cmp	r3, #8
 8014e0e:	dc04      	bgt.n	8014e1a <_strtod_l+0x262>
 8014e10:	9e07      	ldr	r6, [sp, #28]
 8014e12:	434e      	muls	r6, r1
 8014e14:	9607      	str	r6, [sp, #28]
 8014e16:	3301      	adds	r3, #1
 8014e18:	e7e2      	b.n	8014de0 <_strtod_l+0x228>
 8014e1a:	f103 0c01 	add.w	ip, r3, #1
 8014e1e:	f1bc 0f10 	cmp.w	ip, #16
 8014e22:	bfd8      	it	le
 8014e24:	fb01 f909 	mulle.w	r9, r1, r9
 8014e28:	e7f5      	b.n	8014e16 <_strtod_l+0x25e>
 8014e2a:	2d10      	cmp	r5, #16
 8014e2c:	bfdc      	itt	le
 8014e2e:	230a      	movle	r3, #10
 8014e30:	fb03 2909 	mlale	r9, r3, r9, r2
 8014e34:	e7e1      	b.n	8014dfa <_strtod_l+0x242>
 8014e36:	2300      	movs	r3, #0
 8014e38:	9305      	str	r3, [sp, #20]
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e77c      	b.n	8014d38 <_strtod_l+0x180>
 8014e3e:	f04f 0c00 	mov.w	ip, #0
 8014e42:	f108 0202 	add.w	r2, r8, #2
 8014e46:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e48:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014e4c:	e785      	b.n	8014d5a <_strtod_l+0x1a2>
 8014e4e:	f04f 0c01 	mov.w	ip, #1
 8014e52:	e7f6      	b.n	8014e42 <_strtod_l+0x28a>
 8014e54:	0801e014 	.word	0x0801e014
 8014e58:	0801dd64 	.word	0x0801dd64
 8014e5c:	7ff00000 	.word	0x7ff00000
 8014e60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e62:	1c51      	adds	r1, r2, #1
 8014e64:	9117      	str	r1, [sp, #92]	; 0x5c
 8014e66:	7852      	ldrb	r2, [r2, #1]
 8014e68:	2a30      	cmp	r2, #48	; 0x30
 8014e6a:	d0f9      	beq.n	8014e60 <_strtod_l+0x2a8>
 8014e6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014e70:	2908      	cmp	r1, #8
 8014e72:	f63f af79 	bhi.w	8014d68 <_strtod_l+0x1b0>
 8014e76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014e7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e7c:	9206      	str	r2, [sp, #24]
 8014e7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e80:	1c51      	adds	r1, r2, #1
 8014e82:	9117      	str	r1, [sp, #92]	; 0x5c
 8014e84:	7852      	ldrb	r2, [r2, #1]
 8014e86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014e8a:	2e09      	cmp	r6, #9
 8014e8c:	d937      	bls.n	8014efe <_strtod_l+0x346>
 8014e8e:	9e06      	ldr	r6, [sp, #24]
 8014e90:	1b89      	subs	r1, r1, r6
 8014e92:	2908      	cmp	r1, #8
 8014e94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014e98:	dc02      	bgt.n	8014ea0 <_strtod_l+0x2e8>
 8014e9a:	4576      	cmp	r6, lr
 8014e9c:	bfa8      	it	ge
 8014e9e:	4676      	movge	r6, lr
 8014ea0:	f1bc 0f00 	cmp.w	ip, #0
 8014ea4:	d000      	beq.n	8014ea8 <_strtod_l+0x2f0>
 8014ea6:	4276      	negs	r6, r6
 8014ea8:	2d00      	cmp	r5, #0
 8014eaa:	d14d      	bne.n	8014f48 <_strtod_l+0x390>
 8014eac:	9904      	ldr	r1, [sp, #16]
 8014eae:	4301      	orrs	r1, r0
 8014eb0:	f47f aec6 	bne.w	8014c40 <_strtod_l+0x88>
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	f47f aee1 	bne.w	8014c7c <_strtod_l+0xc4>
 8014eba:	2a69      	cmp	r2, #105	; 0x69
 8014ebc:	d027      	beq.n	8014f0e <_strtod_l+0x356>
 8014ebe:	dc24      	bgt.n	8014f0a <_strtod_l+0x352>
 8014ec0:	2a49      	cmp	r2, #73	; 0x49
 8014ec2:	d024      	beq.n	8014f0e <_strtod_l+0x356>
 8014ec4:	2a4e      	cmp	r2, #78	; 0x4e
 8014ec6:	f47f aed9 	bne.w	8014c7c <_strtod_l+0xc4>
 8014eca:	499f      	ldr	r1, [pc, #636]	; (8015148 <_strtod_l+0x590>)
 8014ecc:	a817      	add	r0, sp, #92	; 0x5c
 8014ece:	f002 f8b3 	bl	8017038 <__match>
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	f43f aed2 	beq.w	8014c7c <_strtod_l+0xc4>
 8014ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	2b28      	cmp	r3, #40	; 0x28
 8014ede:	d12d      	bne.n	8014f3c <_strtod_l+0x384>
 8014ee0:	499a      	ldr	r1, [pc, #616]	; (801514c <_strtod_l+0x594>)
 8014ee2:	aa1a      	add	r2, sp, #104	; 0x68
 8014ee4:	a817      	add	r0, sp, #92	; 0x5c
 8014ee6:	f002 f8bb 	bl	8017060 <__hexnan>
 8014eea:	2805      	cmp	r0, #5
 8014eec:	d126      	bne.n	8014f3c <_strtod_l+0x384>
 8014eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ef0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014ef4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014ef8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014efc:	e6a0      	b.n	8014c40 <_strtod_l+0x88>
 8014efe:	210a      	movs	r1, #10
 8014f00:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014f04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014f08:	e7b9      	b.n	8014e7e <_strtod_l+0x2c6>
 8014f0a:	2a6e      	cmp	r2, #110	; 0x6e
 8014f0c:	e7db      	b.n	8014ec6 <_strtod_l+0x30e>
 8014f0e:	4990      	ldr	r1, [pc, #576]	; (8015150 <_strtod_l+0x598>)
 8014f10:	a817      	add	r0, sp, #92	; 0x5c
 8014f12:	f002 f891 	bl	8017038 <__match>
 8014f16:	2800      	cmp	r0, #0
 8014f18:	f43f aeb0 	beq.w	8014c7c <_strtod_l+0xc4>
 8014f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f1e:	498d      	ldr	r1, [pc, #564]	; (8015154 <_strtod_l+0x59c>)
 8014f20:	3b01      	subs	r3, #1
 8014f22:	a817      	add	r0, sp, #92	; 0x5c
 8014f24:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f26:	f002 f887 	bl	8017038 <__match>
 8014f2a:	b910      	cbnz	r0, 8014f32 <_strtod_l+0x37a>
 8014f2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f2e:	3301      	adds	r3, #1
 8014f30:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f32:	f8df b230 	ldr.w	fp, [pc, #560]	; 8015164 <_strtod_l+0x5ac>
 8014f36:	f04f 0a00 	mov.w	sl, #0
 8014f3a:	e681      	b.n	8014c40 <_strtod_l+0x88>
 8014f3c:	4886      	ldr	r0, [pc, #536]	; (8015158 <_strtod_l+0x5a0>)
 8014f3e:	f003 fa2f 	bl	80183a0 <nan>
 8014f42:	ec5b ab10 	vmov	sl, fp, d0
 8014f46:	e67b      	b.n	8014c40 <_strtod_l+0x88>
 8014f48:	9b05      	ldr	r3, [sp, #20]
 8014f4a:	9807      	ldr	r0, [sp, #28]
 8014f4c:	1af3      	subs	r3, r6, r3
 8014f4e:	2f00      	cmp	r7, #0
 8014f50:	bf08      	it	eq
 8014f52:	462f      	moveq	r7, r5
 8014f54:	2d10      	cmp	r5, #16
 8014f56:	9306      	str	r3, [sp, #24]
 8014f58:	46a8      	mov	r8, r5
 8014f5a:	bfa8      	it	ge
 8014f5c:	f04f 0810 	movge.w	r8, #16
 8014f60:	f7eb fad0 	bl	8000504 <__aeabi_ui2d>
 8014f64:	2d09      	cmp	r5, #9
 8014f66:	4682      	mov	sl, r0
 8014f68:	468b      	mov	fp, r1
 8014f6a:	dd13      	ble.n	8014f94 <_strtod_l+0x3dc>
 8014f6c:	4b7b      	ldr	r3, [pc, #492]	; (801515c <_strtod_l+0x5a4>)
 8014f6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014f72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014f76:	f7eb fb3f 	bl	80005f8 <__aeabi_dmul>
 8014f7a:	4682      	mov	sl, r0
 8014f7c:	4648      	mov	r0, r9
 8014f7e:	468b      	mov	fp, r1
 8014f80:	f7eb fac0 	bl	8000504 <__aeabi_ui2d>
 8014f84:	4602      	mov	r2, r0
 8014f86:	460b      	mov	r3, r1
 8014f88:	4650      	mov	r0, sl
 8014f8a:	4659      	mov	r1, fp
 8014f8c:	f7eb f97e 	bl	800028c <__adddf3>
 8014f90:	4682      	mov	sl, r0
 8014f92:	468b      	mov	fp, r1
 8014f94:	2d0f      	cmp	r5, #15
 8014f96:	dc38      	bgt.n	801500a <_strtod_l+0x452>
 8014f98:	9b06      	ldr	r3, [sp, #24]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	f43f ae50 	beq.w	8014c40 <_strtod_l+0x88>
 8014fa0:	dd24      	ble.n	8014fec <_strtod_l+0x434>
 8014fa2:	2b16      	cmp	r3, #22
 8014fa4:	dc0b      	bgt.n	8014fbe <_strtod_l+0x406>
 8014fa6:	496d      	ldr	r1, [pc, #436]	; (801515c <_strtod_l+0x5a4>)
 8014fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fb0:	4652      	mov	r2, sl
 8014fb2:	465b      	mov	r3, fp
 8014fb4:	f7eb fb20 	bl	80005f8 <__aeabi_dmul>
 8014fb8:	4682      	mov	sl, r0
 8014fba:	468b      	mov	fp, r1
 8014fbc:	e640      	b.n	8014c40 <_strtod_l+0x88>
 8014fbe:	9a06      	ldr	r2, [sp, #24]
 8014fc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014fc4:	4293      	cmp	r3, r2
 8014fc6:	db20      	blt.n	801500a <_strtod_l+0x452>
 8014fc8:	4c64      	ldr	r4, [pc, #400]	; (801515c <_strtod_l+0x5a4>)
 8014fca:	f1c5 050f 	rsb	r5, r5, #15
 8014fce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014fd2:	4652      	mov	r2, sl
 8014fd4:	465b      	mov	r3, fp
 8014fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fda:	f7eb fb0d 	bl	80005f8 <__aeabi_dmul>
 8014fde:	9b06      	ldr	r3, [sp, #24]
 8014fe0:	1b5d      	subs	r5, r3, r5
 8014fe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014fea:	e7e3      	b.n	8014fb4 <_strtod_l+0x3fc>
 8014fec:	9b06      	ldr	r3, [sp, #24]
 8014fee:	3316      	adds	r3, #22
 8014ff0:	db0b      	blt.n	801500a <_strtod_l+0x452>
 8014ff2:	9b05      	ldr	r3, [sp, #20]
 8014ff4:	1b9e      	subs	r6, r3, r6
 8014ff6:	4b59      	ldr	r3, [pc, #356]	; (801515c <_strtod_l+0x5a4>)
 8014ff8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8014ffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015000:	4650      	mov	r0, sl
 8015002:	4659      	mov	r1, fp
 8015004:	f7eb fc22 	bl	800084c <__aeabi_ddiv>
 8015008:	e7d6      	b.n	8014fb8 <_strtod_l+0x400>
 801500a:	9b06      	ldr	r3, [sp, #24]
 801500c:	eba5 0808 	sub.w	r8, r5, r8
 8015010:	4498      	add	r8, r3
 8015012:	f1b8 0f00 	cmp.w	r8, #0
 8015016:	dd74      	ble.n	8015102 <_strtod_l+0x54a>
 8015018:	f018 030f 	ands.w	r3, r8, #15
 801501c:	d00a      	beq.n	8015034 <_strtod_l+0x47c>
 801501e:	494f      	ldr	r1, [pc, #316]	; (801515c <_strtod_l+0x5a4>)
 8015020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015024:	4652      	mov	r2, sl
 8015026:	465b      	mov	r3, fp
 8015028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801502c:	f7eb fae4 	bl	80005f8 <__aeabi_dmul>
 8015030:	4682      	mov	sl, r0
 8015032:	468b      	mov	fp, r1
 8015034:	f038 080f 	bics.w	r8, r8, #15
 8015038:	d04f      	beq.n	80150da <_strtod_l+0x522>
 801503a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801503e:	dd22      	ble.n	8015086 <_strtod_l+0x4ce>
 8015040:	2500      	movs	r5, #0
 8015042:	462e      	mov	r6, r5
 8015044:	9507      	str	r5, [sp, #28]
 8015046:	9505      	str	r5, [sp, #20]
 8015048:	2322      	movs	r3, #34	; 0x22
 801504a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8015164 <_strtod_l+0x5ac>
 801504e:	6023      	str	r3, [r4, #0]
 8015050:	f04f 0a00 	mov.w	sl, #0
 8015054:	9b07      	ldr	r3, [sp, #28]
 8015056:	2b00      	cmp	r3, #0
 8015058:	f43f adf2 	beq.w	8014c40 <_strtod_l+0x88>
 801505c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801505e:	4620      	mov	r0, r4
 8015060:	f002 f96e 	bl	8017340 <_Bfree>
 8015064:	9905      	ldr	r1, [sp, #20]
 8015066:	4620      	mov	r0, r4
 8015068:	f002 f96a 	bl	8017340 <_Bfree>
 801506c:	4631      	mov	r1, r6
 801506e:	4620      	mov	r0, r4
 8015070:	f002 f966 	bl	8017340 <_Bfree>
 8015074:	9907      	ldr	r1, [sp, #28]
 8015076:	4620      	mov	r0, r4
 8015078:	f002 f962 	bl	8017340 <_Bfree>
 801507c:	4629      	mov	r1, r5
 801507e:	4620      	mov	r0, r4
 8015080:	f002 f95e 	bl	8017340 <_Bfree>
 8015084:	e5dc      	b.n	8014c40 <_strtod_l+0x88>
 8015086:	4b36      	ldr	r3, [pc, #216]	; (8015160 <_strtod_l+0x5a8>)
 8015088:	9304      	str	r3, [sp, #16]
 801508a:	2300      	movs	r3, #0
 801508c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015090:	4650      	mov	r0, sl
 8015092:	4659      	mov	r1, fp
 8015094:	4699      	mov	r9, r3
 8015096:	f1b8 0f01 	cmp.w	r8, #1
 801509a:	dc21      	bgt.n	80150e0 <_strtod_l+0x528>
 801509c:	b10b      	cbz	r3, 80150a2 <_strtod_l+0x4ea>
 801509e:	4682      	mov	sl, r0
 80150a0:	468b      	mov	fp, r1
 80150a2:	4b2f      	ldr	r3, [pc, #188]	; (8015160 <_strtod_l+0x5a8>)
 80150a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80150a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80150ac:	4652      	mov	r2, sl
 80150ae:	465b      	mov	r3, fp
 80150b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80150b4:	f7eb faa0 	bl	80005f8 <__aeabi_dmul>
 80150b8:	4b2a      	ldr	r3, [pc, #168]	; (8015164 <_strtod_l+0x5ac>)
 80150ba:	460a      	mov	r2, r1
 80150bc:	400b      	ands	r3, r1
 80150be:	492a      	ldr	r1, [pc, #168]	; (8015168 <_strtod_l+0x5b0>)
 80150c0:	428b      	cmp	r3, r1
 80150c2:	4682      	mov	sl, r0
 80150c4:	d8bc      	bhi.n	8015040 <_strtod_l+0x488>
 80150c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80150ca:	428b      	cmp	r3, r1
 80150cc:	bf86      	itte	hi
 80150ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801516c <_strtod_l+0x5b4>
 80150d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80150d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80150da:	2300      	movs	r3, #0
 80150dc:	9304      	str	r3, [sp, #16]
 80150de:	e084      	b.n	80151ea <_strtod_l+0x632>
 80150e0:	f018 0f01 	tst.w	r8, #1
 80150e4:	d005      	beq.n	80150f2 <_strtod_l+0x53a>
 80150e6:	9b04      	ldr	r3, [sp, #16]
 80150e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ec:	f7eb fa84 	bl	80005f8 <__aeabi_dmul>
 80150f0:	2301      	movs	r3, #1
 80150f2:	9a04      	ldr	r2, [sp, #16]
 80150f4:	3208      	adds	r2, #8
 80150f6:	f109 0901 	add.w	r9, r9, #1
 80150fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80150fe:	9204      	str	r2, [sp, #16]
 8015100:	e7c9      	b.n	8015096 <_strtod_l+0x4de>
 8015102:	d0ea      	beq.n	80150da <_strtod_l+0x522>
 8015104:	f1c8 0800 	rsb	r8, r8, #0
 8015108:	f018 020f 	ands.w	r2, r8, #15
 801510c:	d00a      	beq.n	8015124 <_strtod_l+0x56c>
 801510e:	4b13      	ldr	r3, [pc, #76]	; (801515c <_strtod_l+0x5a4>)
 8015110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015114:	4650      	mov	r0, sl
 8015116:	4659      	mov	r1, fp
 8015118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511c:	f7eb fb96 	bl	800084c <__aeabi_ddiv>
 8015120:	4682      	mov	sl, r0
 8015122:	468b      	mov	fp, r1
 8015124:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015128:	d0d7      	beq.n	80150da <_strtod_l+0x522>
 801512a:	f1b8 0f1f 	cmp.w	r8, #31
 801512e:	dd1f      	ble.n	8015170 <_strtod_l+0x5b8>
 8015130:	2500      	movs	r5, #0
 8015132:	462e      	mov	r6, r5
 8015134:	9507      	str	r5, [sp, #28]
 8015136:	9505      	str	r5, [sp, #20]
 8015138:	2322      	movs	r3, #34	; 0x22
 801513a:	f04f 0a00 	mov.w	sl, #0
 801513e:	f04f 0b00 	mov.w	fp, #0
 8015142:	6023      	str	r3, [r4, #0]
 8015144:	e786      	b.n	8015054 <_strtod_l+0x49c>
 8015146:	bf00      	nop
 8015148:	0801dd35 	.word	0x0801dd35
 801514c:	0801dd78 	.word	0x0801dd78
 8015150:	0801dd2d 	.word	0x0801dd2d
 8015154:	0801debc 	.word	0x0801debc
 8015158:	0801e1d0 	.word	0x0801e1d0
 801515c:	0801e0b0 	.word	0x0801e0b0
 8015160:	0801e088 	.word	0x0801e088
 8015164:	7ff00000 	.word	0x7ff00000
 8015168:	7ca00000 	.word	0x7ca00000
 801516c:	7fefffff 	.word	0x7fefffff
 8015170:	f018 0310 	ands.w	r3, r8, #16
 8015174:	bf18      	it	ne
 8015176:	236a      	movne	r3, #106	; 0x6a
 8015178:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8015528 <_strtod_l+0x970>
 801517c:	9304      	str	r3, [sp, #16]
 801517e:	4650      	mov	r0, sl
 8015180:	4659      	mov	r1, fp
 8015182:	2300      	movs	r3, #0
 8015184:	f018 0f01 	tst.w	r8, #1
 8015188:	d004      	beq.n	8015194 <_strtod_l+0x5dc>
 801518a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801518e:	f7eb fa33 	bl	80005f8 <__aeabi_dmul>
 8015192:	2301      	movs	r3, #1
 8015194:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015198:	f109 0908 	add.w	r9, r9, #8
 801519c:	d1f2      	bne.n	8015184 <_strtod_l+0x5cc>
 801519e:	b10b      	cbz	r3, 80151a4 <_strtod_l+0x5ec>
 80151a0:	4682      	mov	sl, r0
 80151a2:	468b      	mov	fp, r1
 80151a4:	9b04      	ldr	r3, [sp, #16]
 80151a6:	b1c3      	cbz	r3, 80151da <_strtod_l+0x622>
 80151a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80151ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	4659      	mov	r1, fp
 80151b4:	dd11      	ble.n	80151da <_strtod_l+0x622>
 80151b6:	2b1f      	cmp	r3, #31
 80151b8:	f340 8124 	ble.w	8015404 <_strtod_l+0x84c>
 80151bc:	2b34      	cmp	r3, #52	; 0x34
 80151be:	bfde      	ittt	le
 80151c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80151c4:	f04f 33ff 	movle.w	r3, #4294967295
 80151c8:	fa03 f202 	lslle.w	r2, r3, r2
 80151cc:	f04f 0a00 	mov.w	sl, #0
 80151d0:	bfcc      	ite	gt
 80151d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80151d6:	ea02 0b01 	andle.w	fp, r2, r1
 80151da:	2200      	movs	r2, #0
 80151dc:	2300      	movs	r3, #0
 80151de:	4650      	mov	r0, sl
 80151e0:	4659      	mov	r1, fp
 80151e2:	f7eb fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	d1a2      	bne.n	8015130 <_strtod_l+0x578>
 80151ea:	9b07      	ldr	r3, [sp, #28]
 80151ec:	9300      	str	r3, [sp, #0]
 80151ee:	9908      	ldr	r1, [sp, #32]
 80151f0:	462b      	mov	r3, r5
 80151f2:	463a      	mov	r2, r7
 80151f4:	4620      	mov	r0, r4
 80151f6:	f002 f90b 	bl	8017410 <__s2b>
 80151fa:	9007      	str	r0, [sp, #28]
 80151fc:	2800      	cmp	r0, #0
 80151fe:	f43f af1f 	beq.w	8015040 <_strtod_l+0x488>
 8015202:	9b05      	ldr	r3, [sp, #20]
 8015204:	1b9e      	subs	r6, r3, r6
 8015206:	9b06      	ldr	r3, [sp, #24]
 8015208:	2b00      	cmp	r3, #0
 801520a:	bfb4      	ite	lt
 801520c:	4633      	movlt	r3, r6
 801520e:	2300      	movge	r3, #0
 8015210:	930c      	str	r3, [sp, #48]	; 0x30
 8015212:	9b06      	ldr	r3, [sp, #24]
 8015214:	2500      	movs	r5, #0
 8015216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801521a:	9312      	str	r3, [sp, #72]	; 0x48
 801521c:	462e      	mov	r6, r5
 801521e:	9b07      	ldr	r3, [sp, #28]
 8015220:	4620      	mov	r0, r4
 8015222:	6859      	ldr	r1, [r3, #4]
 8015224:	f002 f84c 	bl	80172c0 <_Balloc>
 8015228:	9005      	str	r0, [sp, #20]
 801522a:	2800      	cmp	r0, #0
 801522c:	f43f af0c 	beq.w	8015048 <_strtod_l+0x490>
 8015230:	9b07      	ldr	r3, [sp, #28]
 8015232:	691a      	ldr	r2, [r3, #16]
 8015234:	3202      	adds	r2, #2
 8015236:	f103 010c 	add.w	r1, r3, #12
 801523a:	0092      	lsls	r2, r2, #2
 801523c:	300c      	adds	r0, #12
 801523e:	f002 f831 	bl	80172a4 <memcpy>
 8015242:	ec4b ab10 	vmov	d0, sl, fp
 8015246:	aa1a      	add	r2, sp, #104	; 0x68
 8015248:	a919      	add	r1, sp, #100	; 0x64
 801524a:	4620      	mov	r0, r4
 801524c:	f002 fc26 	bl	8017a9c <__d2b>
 8015250:	ec4b ab18 	vmov	d8, sl, fp
 8015254:	9018      	str	r0, [sp, #96]	; 0x60
 8015256:	2800      	cmp	r0, #0
 8015258:	f43f aef6 	beq.w	8015048 <_strtod_l+0x490>
 801525c:	2101      	movs	r1, #1
 801525e:	4620      	mov	r0, r4
 8015260:	f002 f970 	bl	8017544 <__i2b>
 8015264:	4606      	mov	r6, r0
 8015266:	2800      	cmp	r0, #0
 8015268:	f43f aeee 	beq.w	8015048 <_strtod_l+0x490>
 801526c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801526e:	9904      	ldr	r1, [sp, #16]
 8015270:	2b00      	cmp	r3, #0
 8015272:	bfab      	itete	ge
 8015274:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8015276:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8015278:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801527a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801527e:	bfac      	ite	ge
 8015280:	eb03 0902 	addge.w	r9, r3, r2
 8015284:	1ad7      	sublt	r7, r2, r3
 8015286:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015288:	eba3 0801 	sub.w	r8, r3, r1
 801528c:	4490      	add	r8, r2
 801528e:	4ba1      	ldr	r3, [pc, #644]	; (8015514 <_strtod_l+0x95c>)
 8015290:	f108 38ff 	add.w	r8, r8, #4294967295
 8015294:	4598      	cmp	r8, r3
 8015296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801529a:	f280 80c7 	bge.w	801542c <_strtod_l+0x874>
 801529e:	eba3 0308 	sub.w	r3, r3, r8
 80152a2:	2b1f      	cmp	r3, #31
 80152a4:	eba2 0203 	sub.w	r2, r2, r3
 80152a8:	f04f 0101 	mov.w	r1, #1
 80152ac:	f300 80b1 	bgt.w	8015412 <_strtod_l+0x85a>
 80152b0:	fa01 f303 	lsl.w	r3, r1, r3
 80152b4:	930d      	str	r3, [sp, #52]	; 0x34
 80152b6:	2300      	movs	r3, #0
 80152b8:	9308      	str	r3, [sp, #32]
 80152ba:	eb09 0802 	add.w	r8, r9, r2
 80152be:	9b04      	ldr	r3, [sp, #16]
 80152c0:	45c1      	cmp	r9, r8
 80152c2:	4417      	add	r7, r2
 80152c4:	441f      	add	r7, r3
 80152c6:	464b      	mov	r3, r9
 80152c8:	bfa8      	it	ge
 80152ca:	4643      	movge	r3, r8
 80152cc:	42bb      	cmp	r3, r7
 80152ce:	bfa8      	it	ge
 80152d0:	463b      	movge	r3, r7
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	bfc2      	ittt	gt
 80152d6:	eba8 0803 	subgt.w	r8, r8, r3
 80152da:	1aff      	subgt	r7, r7, r3
 80152dc:	eba9 0903 	subgt.w	r9, r9, r3
 80152e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	dd17      	ble.n	8015316 <_strtod_l+0x75e>
 80152e6:	4631      	mov	r1, r6
 80152e8:	461a      	mov	r2, r3
 80152ea:	4620      	mov	r0, r4
 80152ec:	f002 f9ea 	bl	80176c4 <__pow5mult>
 80152f0:	4606      	mov	r6, r0
 80152f2:	2800      	cmp	r0, #0
 80152f4:	f43f aea8 	beq.w	8015048 <_strtod_l+0x490>
 80152f8:	4601      	mov	r1, r0
 80152fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80152fc:	4620      	mov	r0, r4
 80152fe:	f002 f937 	bl	8017570 <__multiply>
 8015302:	900b      	str	r0, [sp, #44]	; 0x2c
 8015304:	2800      	cmp	r0, #0
 8015306:	f43f ae9f 	beq.w	8015048 <_strtod_l+0x490>
 801530a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801530c:	4620      	mov	r0, r4
 801530e:	f002 f817 	bl	8017340 <_Bfree>
 8015312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015314:	9318      	str	r3, [sp, #96]	; 0x60
 8015316:	f1b8 0f00 	cmp.w	r8, #0
 801531a:	f300 808c 	bgt.w	8015436 <_strtod_l+0x87e>
 801531e:	9b06      	ldr	r3, [sp, #24]
 8015320:	2b00      	cmp	r3, #0
 8015322:	dd08      	ble.n	8015336 <_strtod_l+0x77e>
 8015324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015326:	9905      	ldr	r1, [sp, #20]
 8015328:	4620      	mov	r0, r4
 801532a:	f002 f9cb 	bl	80176c4 <__pow5mult>
 801532e:	9005      	str	r0, [sp, #20]
 8015330:	2800      	cmp	r0, #0
 8015332:	f43f ae89 	beq.w	8015048 <_strtod_l+0x490>
 8015336:	2f00      	cmp	r7, #0
 8015338:	dd08      	ble.n	801534c <_strtod_l+0x794>
 801533a:	9905      	ldr	r1, [sp, #20]
 801533c:	463a      	mov	r2, r7
 801533e:	4620      	mov	r0, r4
 8015340:	f002 fa1a 	bl	8017778 <__lshift>
 8015344:	9005      	str	r0, [sp, #20]
 8015346:	2800      	cmp	r0, #0
 8015348:	f43f ae7e 	beq.w	8015048 <_strtod_l+0x490>
 801534c:	f1b9 0f00 	cmp.w	r9, #0
 8015350:	dd08      	ble.n	8015364 <_strtod_l+0x7ac>
 8015352:	4631      	mov	r1, r6
 8015354:	464a      	mov	r2, r9
 8015356:	4620      	mov	r0, r4
 8015358:	f002 fa0e 	bl	8017778 <__lshift>
 801535c:	4606      	mov	r6, r0
 801535e:	2800      	cmp	r0, #0
 8015360:	f43f ae72 	beq.w	8015048 <_strtod_l+0x490>
 8015364:	9a05      	ldr	r2, [sp, #20]
 8015366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015368:	4620      	mov	r0, r4
 801536a:	f002 fa91 	bl	8017890 <__mdiff>
 801536e:	4605      	mov	r5, r0
 8015370:	2800      	cmp	r0, #0
 8015372:	f43f ae69 	beq.w	8015048 <_strtod_l+0x490>
 8015376:	68c3      	ldr	r3, [r0, #12]
 8015378:	930b      	str	r3, [sp, #44]	; 0x2c
 801537a:	2300      	movs	r3, #0
 801537c:	60c3      	str	r3, [r0, #12]
 801537e:	4631      	mov	r1, r6
 8015380:	f002 fa6a 	bl	8017858 <__mcmp>
 8015384:	2800      	cmp	r0, #0
 8015386:	da60      	bge.n	801544a <_strtod_l+0x892>
 8015388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801538a:	ea53 030a 	orrs.w	r3, r3, sl
 801538e:	f040 8082 	bne.w	8015496 <_strtod_l+0x8de>
 8015392:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015396:	2b00      	cmp	r3, #0
 8015398:	d17d      	bne.n	8015496 <_strtod_l+0x8de>
 801539a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801539e:	0d1b      	lsrs	r3, r3, #20
 80153a0:	051b      	lsls	r3, r3, #20
 80153a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80153a6:	d976      	bls.n	8015496 <_strtod_l+0x8de>
 80153a8:	696b      	ldr	r3, [r5, #20]
 80153aa:	b913      	cbnz	r3, 80153b2 <_strtod_l+0x7fa>
 80153ac:	692b      	ldr	r3, [r5, #16]
 80153ae:	2b01      	cmp	r3, #1
 80153b0:	dd71      	ble.n	8015496 <_strtod_l+0x8de>
 80153b2:	4629      	mov	r1, r5
 80153b4:	2201      	movs	r2, #1
 80153b6:	4620      	mov	r0, r4
 80153b8:	f002 f9de 	bl	8017778 <__lshift>
 80153bc:	4631      	mov	r1, r6
 80153be:	4605      	mov	r5, r0
 80153c0:	f002 fa4a 	bl	8017858 <__mcmp>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	dd66      	ble.n	8015496 <_strtod_l+0x8de>
 80153c8:	9904      	ldr	r1, [sp, #16]
 80153ca:	4a53      	ldr	r2, [pc, #332]	; (8015518 <_strtod_l+0x960>)
 80153cc:	465b      	mov	r3, fp
 80153ce:	2900      	cmp	r1, #0
 80153d0:	f000 8081 	beq.w	80154d6 <_strtod_l+0x91e>
 80153d4:	ea02 010b 	and.w	r1, r2, fp
 80153d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80153dc:	dc7b      	bgt.n	80154d6 <_strtod_l+0x91e>
 80153de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80153e2:	f77f aea9 	ble.w	8015138 <_strtod_l+0x580>
 80153e6:	4b4d      	ldr	r3, [pc, #308]	; (801551c <_strtod_l+0x964>)
 80153e8:	4650      	mov	r0, sl
 80153ea:	4659      	mov	r1, fp
 80153ec:	2200      	movs	r2, #0
 80153ee:	f7eb f903 	bl	80005f8 <__aeabi_dmul>
 80153f2:	460b      	mov	r3, r1
 80153f4:	4303      	orrs	r3, r0
 80153f6:	bf08      	it	eq
 80153f8:	2322      	moveq	r3, #34	; 0x22
 80153fa:	4682      	mov	sl, r0
 80153fc:	468b      	mov	fp, r1
 80153fe:	bf08      	it	eq
 8015400:	6023      	streq	r3, [r4, #0]
 8015402:	e62b      	b.n	801505c <_strtod_l+0x4a4>
 8015404:	f04f 32ff 	mov.w	r2, #4294967295
 8015408:	fa02 f303 	lsl.w	r3, r2, r3
 801540c:	ea03 0a0a 	and.w	sl, r3, sl
 8015410:	e6e3      	b.n	80151da <_strtod_l+0x622>
 8015412:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015416:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801541a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801541e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015422:	fa01 f308 	lsl.w	r3, r1, r8
 8015426:	9308      	str	r3, [sp, #32]
 8015428:	910d      	str	r1, [sp, #52]	; 0x34
 801542a:	e746      	b.n	80152ba <_strtod_l+0x702>
 801542c:	2300      	movs	r3, #0
 801542e:	9308      	str	r3, [sp, #32]
 8015430:	2301      	movs	r3, #1
 8015432:	930d      	str	r3, [sp, #52]	; 0x34
 8015434:	e741      	b.n	80152ba <_strtod_l+0x702>
 8015436:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015438:	4642      	mov	r2, r8
 801543a:	4620      	mov	r0, r4
 801543c:	f002 f99c 	bl	8017778 <__lshift>
 8015440:	9018      	str	r0, [sp, #96]	; 0x60
 8015442:	2800      	cmp	r0, #0
 8015444:	f47f af6b 	bne.w	801531e <_strtod_l+0x766>
 8015448:	e5fe      	b.n	8015048 <_strtod_l+0x490>
 801544a:	465f      	mov	r7, fp
 801544c:	d16e      	bne.n	801552c <_strtod_l+0x974>
 801544e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015454:	b342      	cbz	r2, 80154a8 <_strtod_l+0x8f0>
 8015456:	4a32      	ldr	r2, [pc, #200]	; (8015520 <_strtod_l+0x968>)
 8015458:	4293      	cmp	r3, r2
 801545a:	d128      	bne.n	80154ae <_strtod_l+0x8f6>
 801545c:	9b04      	ldr	r3, [sp, #16]
 801545e:	4651      	mov	r1, sl
 8015460:	b1eb      	cbz	r3, 801549e <_strtod_l+0x8e6>
 8015462:	4b2d      	ldr	r3, [pc, #180]	; (8015518 <_strtod_l+0x960>)
 8015464:	403b      	ands	r3, r7
 8015466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801546a:	f04f 32ff 	mov.w	r2, #4294967295
 801546e:	d819      	bhi.n	80154a4 <_strtod_l+0x8ec>
 8015470:	0d1b      	lsrs	r3, r3, #20
 8015472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015476:	fa02 f303 	lsl.w	r3, r2, r3
 801547a:	4299      	cmp	r1, r3
 801547c:	d117      	bne.n	80154ae <_strtod_l+0x8f6>
 801547e:	4b29      	ldr	r3, [pc, #164]	; (8015524 <_strtod_l+0x96c>)
 8015480:	429f      	cmp	r7, r3
 8015482:	d102      	bne.n	801548a <_strtod_l+0x8d2>
 8015484:	3101      	adds	r1, #1
 8015486:	f43f addf 	beq.w	8015048 <_strtod_l+0x490>
 801548a:	4b23      	ldr	r3, [pc, #140]	; (8015518 <_strtod_l+0x960>)
 801548c:	403b      	ands	r3, r7
 801548e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015492:	f04f 0a00 	mov.w	sl, #0
 8015496:	9b04      	ldr	r3, [sp, #16]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d1a4      	bne.n	80153e6 <_strtod_l+0x82e>
 801549c:	e5de      	b.n	801505c <_strtod_l+0x4a4>
 801549e:	f04f 33ff 	mov.w	r3, #4294967295
 80154a2:	e7ea      	b.n	801547a <_strtod_l+0x8c2>
 80154a4:	4613      	mov	r3, r2
 80154a6:	e7e8      	b.n	801547a <_strtod_l+0x8c2>
 80154a8:	ea53 030a 	orrs.w	r3, r3, sl
 80154ac:	d08c      	beq.n	80153c8 <_strtod_l+0x810>
 80154ae:	9b08      	ldr	r3, [sp, #32]
 80154b0:	b1db      	cbz	r3, 80154ea <_strtod_l+0x932>
 80154b2:	423b      	tst	r3, r7
 80154b4:	d0ef      	beq.n	8015496 <_strtod_l+0x8de>
 80154b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154b8:	9a04      	ldr	r2, [sp, #16]
 80154ba:	4650      	mov	r0, sl
 80154bc:	4659      	mov	r1, fp
 80154be:	b1c3      	cbz	r3, 80154f2 <_strtod_l+0x93a>
 80154c0:	f7ff fb5e 	bl	8014b80 <sulp>
 80154c4:	4602      	mov	r2, r0
 80154c6:	460b      	mov	r3, r1
 80154c8:	ec51 0b18 	vmov	r0, r1, d8
 80154cc:	f7ea fede 	bl	800028c <__adddf3>
 80154d0:	4682      	mov	sl, r0
 80154d2:	468b      	mov	fp, r1
 80154d4:	e7df      	b.n	8015496 <_strtod_l+0x8de>
 80154d6:	4013      	ands	r3, r2
 80154d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80154dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80154e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80154e4:	f04f 3aff 	mov.w	sl, #4294967295
 80154e8:	e7d5      	b.n	8015496 <_strtod_l+0x8de>
 80154ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154ec:	ea13 0f0a 	tst.w	r3, sl
 80154f0:	e7e0      	b.n	80154b4 <_strtod_l+0x8fc>
 80154f2:	f7ff fb45 	bl	8014b80 <sulp>
 80154f6:	4602      	mov	r2, r0
 80154f8:	460b      	mov	r3, r1
 80154fa:	ec51 0b18 	vmov	r0, r1, d8
 80154fe:	f7ea fec3 	bl	8000288 <__aeabi_dsub>
 8015502:	2200      	movs	r2, #0
 8015504:	2300      	movs	r3, #0
 8015506:	4682      	mov	sl, r0
 8015508:	468b      	mov	fp, r1
 801550a:	f7eb fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 801550e:	2800      	cmp	r0, #0
 8015510:	d0c1      	beq.n	8015496 <_strtod_l+0x8de>
 8015512:	e611      	b.n	8015138 <_strtod_l+0x580>
 8015514:	fffffc02 	.word	0xfffffc02
 8015518:	7ff00000 	.word	0x7ff00000
 801551c:	39500000 	.word	0x39500000
 8015520:	000fffff 	.word	0x000fffff
 8015524:	7fefffff 	.word	0x7fefffff
 8015528:	0801dd90 	.word	0x0801dd90
 801552c:	4631      	mov	r1, r6
 801552e:	4628      	mov	r0, r5
 8015530:	f002 fb10 	bl	8017b54 <__ratio>
 8015534:	ec59 8b10 	vmov	r8, r9, d0
 8015538:	ee10 0a10 	vmov	r0, s0
 801553c:	2200      	movs	r2, #0
 801553e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015542:	4649      	mov	r1, r9
 8015544:	f7eb fad4 	bl	8000af0 <__aeabi_dcmple>
 8015548:	2800      	cmp	r0, #0
 801554a:	d07a      	beq.n	8015642 <_strtod_l+0xa8a>
 801554c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801554e:	2b00      	cmp	r3, #0
 8015550:	d04a      	beq.n	80155e8 <_strtod_l+0xa30>
 8015552:	4b95      	ldr	r3, [pc, #596]	; (80157a8 <_strtod_l+0xbf0>)
 8015554:	2200      	movs	r2, #0
 8015556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801555a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80157a8 <_strtod_l+0xbf0>
 801555e:	f04f 0800 	mov.w	r8, #0
 8015562:	4b92      	ldr	r3, [pc, #584]	; (80157ac <_strtod_l+0xbf4>)
 8015564:	403b      	ands	r3, r7
 8015566:	930d      	str	r3, [sp, #52]	; 0x34
 8015568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801556a:	4b91      	ldr	r3, [pc, #580]	; (80157b0 <_strtod_l+0xbf8>)
 801556c:	429a      	cmp	r2, r3
 801556e:	f040 80b0 	bne.w	80156d2 <_strtod_l+0xb1a>
 8015572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015576:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801557a:	ec4b ab10 	vmov	d0, sl, fp
 801557e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015582:	f002 fa0f 	bl	80179a4 <__ulp>
 8015586:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801558a:	ec53 2b10 	vmov	r2, r3, d0
 801558e:	f7eb f833 	bl	80005f8 <__aeabi_dmul>
 8015592:	4652      	mov	r2, sl
 8015594:	465b      	mov	r3, fp
 8015596:	f7ea fe79 	bl	800028c <__adddf3>
 801559a:	460b      	mov	r3, r1
 801559c:	4983      	ldr	r1, [pc, #524]	; (80157ac <_strtod_l+0xbf4>)
 801559e:	4a85      	ldr	r2, [pc, #532]	; (80157b4 <_strtod_l+0xbfc>)
 80155a0:	4019      	ands	r1, r3
 80155a2:	4291      	cmp	r1, r2
 80155a4:	4682      	mov	sl, r0
 80155a6:	d960      	bls.n	801566a <_strtod_l+0xab2>
 80155a8:	ee18 3a90 	vmov	r3, s17
 80155ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80155b0:	4293      	cmp	r3, r2
 80155b2:	d104      	bne.n	80155be <_strtod_l+0xa06>
 80155b4:	ee18 3a10 	vmov	r3, s16
 80155b8:	3301      	adds	r3, #1
 80155ba:	f43f ad45 	beq.w	8015048 <_strtod_l+0x490>
 80155be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80157c0 <_strtod_l+0xc08>
 80155c2:	f04f 3aff 	mov.w	sl, #4294967295
 80155c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80155c8:	4620      	mov	r0, r4
 80155ca:	f001 feb9 	bl	8017340 <_Bfree>
 80155ce:	9905      	ldr	r1, [sp, #20]
 80155d0:	4620      	mov	r0, r4
 80155d2:	f001 feb5 	bl	8017340 <_Bfree>
 80155d6:	4631      	mov	r1, r6
 80155d8:	4620      	mov	r0, r4
 80155da:	f001 feb1 	bl	8017340 <_Bfree>
 80155de:	4629      	mov	r1, r5
 80155e0:	4620      	mov	r0, r4
 80155e2:	f001 fead 	bl	8017340 <_Bfree>
 80155e6:	e61a      	b.n	801521e <_strtod_l+0x666>
 80155e8:	f1ba 0f00 	cmp.w	sl, #0
 80155ec:	d11b      	bne.n	8015626 <_strtod_l+0xa6e>
 80155ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155f2:	b9f3      	cbnz	r3, 8015632 <_strtod_l+0xa7a>
 80155f4:	4b6c      	ldr	r3, [pc, #432]	; (80157a8 <_strtod_l+0xbf0>)
 80155f6:	2200      	movs	r2, #0
 80155f8:	4640      	mov	r0, r8
 80155fa:	4649      	mov	r1, r9
 80155fc:	f7eb fa6e 	bl	8000adc <__aeabi_dcmplt>
 8015600:	b9d0      	cbnz	r0, 8015638 <_strtod_l+0xa80>
 8015602:	4640      	mov	r0, r8
 8015604:	4649      	mov	r1, r9
 8015606:	4b6c      	ldr	r3, [pc, #432]	; (80157b8 <_strtod_l+0xc00>)
 8015608:	2200      	movs	r2, #0
 801560a:	f7ea fff5 	bl	80005f8 <__aeabi_dmul>
 801560e:	4680      	mov	r8, r0
 8015610:	4689      	mov	r9, r1
 8015612:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801561a:	9315      	str	r3, [sp, #84]	; 0x54
 801561c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015620:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015624:	e79d      	b.n	8015562 <_strtod_l+0x9aa>
 8015626:	f1ba 0f01 	cmp.w	sl, #1
 801562a:	d102      	bne.n	8015632 <_strtod_l+0xa7a>
 801562c:	2f00      	cmp	r7, #0
 801562e:	f43f ad83 	beq.w	8015138 <_strtod_l+0x580>
 8015632:	4b62      	ldr	r3, [pc, #392]	; (80157bc <_strtod_l+0xc04>)
 8015634:	2200      	movs	r2, #0
 8015636:	e78e      	b.n	8015556 <_strtod_l+0x99e>
 8015638:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80157b8 <_strtod_l+0xc00>
 801563c:	f04f 0800 	mov.w	r8, #0
 8015640:	e7e7      	b.n	8015612 <_strtod_l+0xa5a>
 8015642:	4b5d      	ldr	r3, [pc, #372]	; (80157b8 <_strtod_l+0xc00>)
 8015644:	4640      	mov	r0, r8
 8015646:	4649      	mov	r1, r9
 8015648:	2200      	movs	r2, #0
 801564a:	f7ea ffd5 	bl	80005f8 <__aeabi_dmul>
 801564e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015650:	4680      	mov	r8, r0
 8015652:	4689      	mov	r9, r1
 8015654:	b933      	cbnz	r3, 8015664 <_strtod_l+0xaac>
 8015656:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801565a:	900e      	str	r0, [sp, #56]	; 0x38
 801565c:	930f      	str	r3, [sp, #60]	; 0x3c
 801565e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015662:	e7dd      	b.n	8015620 <_strtod_l+0xa68>
 8015664:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8015668:	e7f9      	b.n	801565e <_strtod_l+0xaa6>
 801566a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801566e:	9b04      	ldr	r3, [sp, #16]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d1a8      	bne.n	80155c6 <_strtod_l+0xa0e>
 8015674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801567a:	0d1b      	lsrs	r3, r3, #20
 801567c:	051b      	lsls	r3, r3, #20
 801567e:	429a      	cmp	r2, r3
 8015680:	d1a1      	bne.n	80155c6 <_strtod_l+0xa0e>
 8015682:	4640      	mov	r0, r8
 8015684:	4649      	mov	r1, r9
 8015686:	f7eb fb67 	bl	8000d58 <__aeabi_d2lz>
 801568a:	f7ea ff87 	bl	800059c <__aeabi_l2d>
 801568e:	4602      	mov	r2, r0
 8015690:	460b      	mov	r3, r1
 8015692:	4640      	mov	r0, r8
 8015694:	4649      	mov	r1, r9
 8015696:	f7ea fdf7 	bl	8000288 <__aeabi_dsub>
 801569a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801569c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80156a0:	ea43 030a 	orr.w	r3, r3, sl
 80156a4:	4313      	orrs	r3, r2
 80156a6:	4680      	mov	r8, r0
 80156a8:	4689      	mov	r9, r1
 80156aa:	d055      	beq.n	8015758 <_strtod_l+0xba0>
 80156ac:	a336      	add	r3, pc, #216	; (adr r3, 8015788 <_strtod_l+0xbd0>)
 80156ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b2:	f7eb fa13 	bl	8000adc <__aeabi_dcmplt>
 80156b6:	2800      	cmp	r0, #0
 80156b8:	f47f acd0 	bne.w	801505c <_strtod_l+0x4a4>
 80156bc:	a334      	add	r3, pc, #208	; (adr r3, 8015790 <_strtod_l+0xbd8>)
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	4640      	mov	r0, r8
 80156c4:	4649      	mov	r1, r9
 80156c6:	f7eb fa27 	bl	8000b18 <__aeabi_dcmpgt>
 80156ca:	2800      	cmp	r0, #0
 80156cc:	f43f af7b 	beq.w	80155c6 <_strtod_l+0xa0e>
 80156d0:	e4c4      	b.n	801505c <_strtod_l+0x4a4>
 80156d2:	9b04      	ldr	r3, [sp, #16]
 80156d4:	b333      	cbz	r3, 8015724 <_strtod_l+0xb6c>
 80156d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80156dc:	d822      	bhi.n	8015724 <_strtod_l+0xb6c>
 80156de:	a32e      	add	r3, pc, #184	; (adr r3, 8015798 <_strtod_l+0xbe0>)
 80156e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e4:	4640      	mov	r0, r8
 80156e6:	4649      	mov	r1, r9
 80156e8:	f7eb fa02 	bl	8000af0 <__aeabi_dcmple>
 80156ec:	b1a0      	cbz	r0, 8015718 <_strtod_l+0xb60>
 80156ee:	4649      	mov	r1, r9
 80156f0:	4640      	mov	r0, r8
 80156f2:	f7eb fa59 	bl	8000ba8 <__aeabi_d2uiz>
 80156f6:	2801      	cmp	r0, #1
 80156f8:	bf38      	it	cc
 80156fa:	2001      	movcc	r0, #1
 80156fc:	f7ea ff02 	bl	8000504 <__aeabi_ui2d>
 8015700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015702:	4680      	mov	r8, r0
 8015704:	4689      	mov	r9, r1
 8015706:	bb23      	cbnz	r3, 8015752 <_strtod_l+0xb9a>
 8015708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801570c:	9010      	str	r0, [sp, #64]	; 0x40
 801570e:	9311      	str	r3, [sp, #68]	; 0x44
 8015710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015714:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801571a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801571c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015720:	1a9b      	subs	r3, r3, r2
 8015722:	9309      	str	r3, [sp, #36]	; 0x24
 8015724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015728:	eeb0 0a48 	vmov.f32	s0, s16
 801572c:	eef0 0a68 	vmov.f32	s1, s17
 8015730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015734:	f002 f936 	bl	80179a4 <__ulp>
 8015738:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801573c:	ec53 2b10 	vmov	r2, r3, d0
 8015740:	f7ea ff5a 	bl	80005f8 <__aeabi_dmul>
 8015744:	ec53 2b18 	vmov	r2, r3, d8
 8015748:	f7ea fda0 	bl	800028c <__adddf3>
 801574c:	4682      	mov	sl, r0
 801574e:	468b      	mov	fp, r1
 8015750:	e78d      	b.n	801566e <_strtod_l+0xab6>
 8015752:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8015756:	e7db      	b.n	8015710 <_strtod_l+0xb58>
 8015758:	a311      	add	r3, pc, #68	; (adr r3, 80157a0 <_strtod_l+0xbe8>)
 801575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575e:	f7eb f9bd 	bl	8000adc <__aeabi_dcmplt>
 8015762:	e7b2      	b.n	80156ca <_strtod_l+0xb12>
 8015764:	2300      	movs	r3, #0
 8015766:	930a      	str	r3, [sp, #40]	; 0x28
 8015768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801576a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801576c:	6013      	str	r3, [r2, #0]
 801576e:	f7ff ba6b 	b.w	8014c48 <_strtod_l+0x90>
 8015772:	2a65      	cmp	r2, #101	; 0x65
 8015774:	f43f ab5f 	beq.w	8014e36 <_strtod_l+0x27e>
 8015778:	2a45      	cmp	r2, #69	; 0x45
 801577a:	f43f ab5c 	beq.w	8014e36 <_strtod_l+0x27e>
 801577e:	2301      	movs	r3, #1
 8015780:	f7ff bb94 	b.w	8014eac <_strtod_l+0x2f4>
 8015784:	f3af 8000 	nop.w
 8015788:	94a03595 	.word	0x94a03595
 801578c:	3fdfffff 	.word	0x3fdfffff
 8015790:	35afe535 	.word	0x35afe535
 8015794:	3fe00000 	.word	0x3fe00000
 8015798:	ffc00000 	.word	0xffc00000
 801579c:	41dfffff 	.word	0x41dfffff
 80157a0:	94a03595 	.word	0x94a03595
 80157a4:	3fcfffff 	.word	0x3fcfffff
 80157a8:	3ff00000 	.word	0x3ff00000
 80157ac:	7ff00000 	.word	0x7ff00000
 80157b0:	7fe00000 	.word	0x7fe00000
 80157b4:	7c9fffff 	.word	0x7c9fffff
 80157b8:	3fe00000 	.word	0x3fe00000
 80157bc:	bff00000 	.word	0xbff00000
 80157c0:	7fefffff 	.word	0x7fefffff

080157c4 <_strtod_r>:
 80157c4:	4b01      	ldr	r3, [pc, #4]	; (80157cc <_strtod_r+0x8>)
 80157c6:	f7ff b9f7 	b.w	8014bb8 <_strtod_l>
 80157ca:	bf00      	nop
 80157cc:	20000298 	.word	0x20000298

080157d0 <_strtol_l.constprop.0>:
 80157d0:	2b01      	cmp	r3, #1
 80157d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d6:	d001      	beq.n	80157dc <_strtol_l.constprop.0+0xc>
 80157d8:	2b24      	cmp	r3, #36	; 0x24
 80157da:	d906      	bls.n	80157ea <_strtol_l.constprop.0+0x1a>
 80157dc:	f7fe fa60 	bl	8013ca0 <__errno>
 80157e0:	2316      	movs	r3, #22
 80157e2:	6003      	str	r3, [r0, #0]
 80157e4:	2000      	movs	r0, #0
 80157e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80158d0 <_strtol_l.constprop.0+0x100>
 80157ee:	460d      	mov	r5, r1
 80157f0:	462e      	mov	r6, r5
 80157f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80157fa:	f017 0708 	ands.w	r7, r7, #8
 80157fe:	d1f7      	bne.n	80157f0 <_strtol_l.constprop.0+0x20>
 8015800:	2c2d      	cmp	r4, #45	; 0x2d
 8015802:	d132      	bne.n	801586a <_strtol_l.constprop.0+0x9a>
 8015804:	782c      	ldrb	r4, [r5, #0]
 8015806:	2701      	movs	r7, #1
 8015808:	1cb5      	adds	r5, r6, #2
 801580a:	2b00      	cmp	r3, #0
 801580c:	d05b      	beq.n	80158c6 <_strtol_l.constprop.0+0xf6>
 801580e:	2b10      	cmp	r3, #16
 8015810:	d109      	bne.n	8015826 <_strtol_l.constprop.0+0x56>
 8015812:	2c30      	cmp	r4, #48	; 0x30
 8015814:	d107      	bne.n	8015826 <_strtol_l.constprop.0+0x56>
 8015816:	782c      	ldrb	r4, [r5, #0]
 8015818:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801581c:	2c58      	cmp	r4, #88	; 0x58
 801581e:	d14d      	bne.n	80158bc <_strtol_l.constprop.0+0xec>
 8015820:	786c      	ldrb	r4, [r5, #1]
 8015822:	2310      	movs	r3, #16
 8015824:	3502      	adds	r5, #2
 8015826:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801582a:	f108 38ff 	add.w	r8, r8, #4294967295
 801582e:	f04f 0c00 	mov.w	ip, #0
 8015832:	fbb8 f9f3 	udiv	r9, r8, r3
 8015836:	4666      	mov	r6, ip
 8015838:	fb03 8a19 	mls	sl, r3, r9, r8
 801583c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015840:	f1be 0f09 	cmp.w	lr, #9
 8015844:	d816      	bhi.n	8015874 <_strtol_l.constprop.0+0xa4>
 8015846:	4674      	mov	r4, lr
 8015848:	42a3      	cmp	r3, r4
 801584a:	dd24      	ble.n	8015896 <_strtol_l.constprop.0+0xc6>
 801584c:	f1bc 0f00 	cmp.w	ip, #0
 8015850:	db1e      	blt.n	8015890 <_strtol_l.constprop.0+0xc0>
 8015852:	45b1      	cmp	r9, r6
 8015854:	d31c      	bcc.n	8015890 <_strtol_l.constprop.0+0xc0>
 8015856:	d101      	bne.n	801585c <_strtol_l.constprop.0+0x8c>
 8015858:	45a2      	cmp	sl, r4
 801585a:	db19      	blt.n	8015890 <_strtol_l.constprop.0+0xc0>
 801585c:	fb06 4603 	mla	r6, r6, r3, r4
 8015860:	f04f 0c01 	mov.w	ip, #1
 8015864:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015868:	e7e8      	b.n	801583c <_strtol_l.constprop.0+0x6c>
 801586a:	2c2b      	cmp	r4, #43	; 0x2b
 801586c:	bf04      	itt	eq
 801586e:	782c      	ldrbeq	r4, [r5, #0]
 8015870:	1cb5      	addeq	r5, r6, #2
 8015872:	e7ca      	b.n	801580a <_strtol_l.constprop.0+0x3a>
 8015874:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015878:	f1be 0f19 	cmp.w	lr, #25
 801587c:	d801      	bhi.n	8015882 <_strtol_l.constprop.0+0xb2>
 801587e:	3c37      	subs	r4, #55	; 0x37
 8015880:	e7e2      	b.n	8015848 <_strtol_l.constprop.0+0x78>
 8015882:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8015886:	f1be 0f19 	cmp.w	lr, #25
 801588a:	d804      	bhi.n	8015896 <_strtol_l.constprop.0+0xc6>
 801588c:	3c57      	subs	r4, #87	; 0x57
 801588e:	e7db      	b.n	8015848 <_strtol_l.constprop.0+0x78>
 8015890:	f04f 3cff 	mov.w	ip, #4294967295
 8015894:	e7e6      	b.n	8015864 <_strtol_l.constprop.0+0x94>
 8015896:	f1bc 0f00 	cmp.w	ip, #0
 801589a:	da05      	bge.n	80158a8 <_strtol_l.constprop.0+0xd8>
 801589c:	2322      	movs	r3, #34	; 0x22
 801589e:	6003      	str	r3, [r0, #0]
 80158a0:	4646      	mov	r6, r8
 80158a2:	b942      	cbnz	r2, 80158b6 <_strtol_l.constprop.0+0xe6>
 80158a4:	4630      	mov	r0, r6
 80158a6:	e79e      	b.n	80157e6 <_strtol_l.constprop.0+0x16>
 80158a8:	b107      	cbz	r7, 80158ac <_strtol_l.constprop.0+0xdc>
 80158aa:	4276      	negs	r6, r6
 80158ac:	2a00      	cmp	r2, #0
 80158ae:	d0f9      	beq.n	80158a4 <_strtol_l.constprop.0+0xd4>
 80158b0:	f1bc 0f00 	cmp.w	ip, #0
 80158b4:	d000      	beq.n	80158b8 <_strtol_l.constprop.0+0xe8>
 80158b6:	1e69      	subs	r1, r5, #1
 80158b8:	6011      	str	r1, [r2, #0]
 80158ba:	e7f3      	b.n	80158a4 <_strtol_l.constprop.0+0xd4>
 80158bc:	2430      	movs	r4, #48	; 0x30
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d1b1      	bne.n	8015826 <_strtol_l.constprop.0+0x56>
 80158c2:	2308      	movs	r3, #8
 80158c4:	e7af      	b.n	8015826 <_strtol_l.constprop.0+0x56>
 80158c6:	2c30      	cmp	r4, #48	; 0x30
 80158c8:	d0a5      	beq.n	8015816 <_strtol_l.constprop.0+0x46>
 80158ca:	230a      	movs	r3, #10
 80158cc:	e7ab      	b.n	8015826 <_strtol_l.constprop.0+0x56>
 80158ce:	bf00      	nop
 80158d0:	0801ddb9 	.word	0x0801ddb9

080158d4 <_strtol_r>:
 80158d4:	f7ff bf7c 	b.w	80157d0 <_strtol_l.constprop.0>

080158d8 <__swbuf_r>:
 80158d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158da:	460e      	mov	r6, r1
 80158dc:	4614      	mov	r4, r2
 80158de:	4605      	mov	r5, r0
 80158e0:	b118      	cbz	r0, 80158ea <__swbuf_r+0x12>
 80158e2:	6983      	ldr	r3, [r0, #24]
 80158e4:	b90b      	cbnz	r3, 80158ea <__swbuf_r+0x12>
 80158e6:	f001 f84b 	bl	8016980 <__sinit>
 80158ea:	4b21      	ldr	r3, [pc, #132]	; (8015970 <__swbuf_r+0x98>)
 80158ec:	429c      	cmp	r4, r3
 80158ee:	d12b      	bne.n	8015948 <__swbuf_r+0x70>
 80158f0:	686c      	ldr	r4, [r5, #4]
 80158f2:	69a3      	ldr	r3, [r4, #24]
 80158f4:	60a3      	str	r3, [r4, #8]
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	071a      	lsls	r2, r3, #28
 80158fa:	d52f      	bpl.n	801595c <__swbuf_r+0x84>
 80158fc:	6923      	ldr	r3, [r4, #16]
 80158fe:	b36b      	cbz	r3, 801595c <__swbuf_r+0x84>
 8015900:	6923      	ldr	r3, [r4, #16]
 8015902:	6820      	ldr	r0, [r4, #0]
 8015904:	1ac0      	subs	r0, r0, r3
 8015906:	6963      	ldr	r3, [r4, #20]
 8015908:	b2f6      	uxtb	r6, r6
 801590a:	4283      	cmp	r3, r0
 801590c:	4637      	mov	r7, r6
 801590e:	dc04      	bgt.n	801591a <__swbuf_r+0x42>
 8015910:	4621      	mov	r1, r4
 8015912:	4628      	mov	r0, r5
 8015914:	f000 ffa0 	bl	8016858 <_fflush_r>
 8015918:	bb30      	cbnz	r0, 8015968 <__swbuf_r+0x90>
 801591a:	68a3      	ldr	r3, [r4, #8]
 801591c:	3b01      	subs	r3, #1
 801591e:	60a3      	str	r3, [r4, #8]
 8015920:	6823      	ldr	r3, [r4, #0]
 8015922:	1c5a      	adds	r2, r3, #1
 8015924:	6022      	str	r2, [r4, #0]
 8015926:	701e      	strb	r6, [r3, #0]
 8015928:	6963      	ldr	r3, [r4, #20]
 801592a:	3001      	adds	r0, #1
 801592c:	4283      	cmp	r3, r0
 801592e:	d004      	beq.n	801593a <__swbuf_r+0x62>
 8015930:	89a3      	ldrh	r3, [r4, #12]
 8015932:	07db      	lsls	r3, r3, #31
 8015934:	d506      	bpl.n	8015944 <__swbuf_r+0x6c>
 8015936:	2e0a      	cmp	r6, #10
 8015938:	d104      	bne.n	8015944 <__swbuf_r+0x6c>
 801593a:	4621      	mov	r1, r4
 801593c:	4628      	mov	r0, r5
 801593e:	f000 ff8b 	bl	8016858 <_fflush_r>
 8015942:	b988      	cbnz	r0, 8015968 <__swbuf_r+0x90>
 8015944:	4638      	mov	r0, r7
 8015946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015948:	4b0a      	ldr	r3, [pc, #40]	; (8015974 <__swbuf_r+0x9c>)
 801594a:	429c      	cmp	r4, r3
 801594c:	d101      	bne.n	8015952 <__swbuf_r+0x7a>
 801594e:	68ac      	ldr	r4, [r5, #8]
 8015950:	e7cf      	b.n	80158f2 <__swbuf_r+0x1a>
 8015952:	4b09      	ldr	r3, [pc, #36]	; (8015978 <__swbuf_r+0xa0>)
 8015954:	429c      	cmp	r4, r3
 8015956:	bf08      	it	eq
 8015958:	68ec      	ldreq	r4, [r5, #12]
 801595a:	e7ca      	b.n	80158f2 <__swbuf_r+0x1a>
 801595c:	4621      	mov	r1, r4
 801595e:	4628      	mov	r0, r5
 8015960:	f000 f80c 	bl	801597c <__swsetup_r>
 8015964:	2800      	cmp	r0, #0
 8015966:	d0cb      	beq.n	8015900 <__swbuf_r+0x28>
 8015968:	f04f 37ff 	mov.w	r7, #4294967295
 801596c:	e7ea      	b.n	8015944 <__swbuf_r+0x6c>
 801596e:	bf00      	nop
 8015970:	0801df6c 	.word	0x0801df6c
 8015974:	0801df8c 	.word	0x0801df8c
 8015978:	0801df4c 	.word	0x0801df4c

0801597c <__swsetup_r>:
 801597c:	4b32      	ldr	r3, [pc, #200]	; (8015a48 <__swsetup_r+0xcc>)
 801597e:	b570      	push	{r4, r5, r6, lr}
 8015980:	681d      	ldr	r5, [r3, #0]
 8015982:	4606      	mov	r6, r0
 8015984:	460c      	mov	r4, r1
 8015986:	b125      	cbz	r5, 8015992 <__swsetup_r+0x16>
 8015988:	69ab      	ldr	r3, [r5, #24]
 801598a:	b913      	cbnz	r3, 8015992 <__swsetup_r+0x16>
 801598c:	4628      	mov	r0, r5
 801598e:	f000 fff7 	bl	8016980 <__sinit>
 8015992:	4b2e      	ldr	r3, [pc, #184]	; (8015a4c <__swsetup_r+0xd0>)
 8015994:	429c      	cmp	r4, r3
 8015996:	d10f      	bne.n	80159b8 <__swsetup_r+0x3c>
 8015998:	686c      	ldr	r4, [r5, #4]
 801599a:	89a3      	ldrh	r3, [r4, #12]
 801599c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159a0:	0719      	lsls	r1, r3, #28
 80159a2:	d42c      	bmi.n	80159fe <__swsetup_r+0x82>
 80159a4:	06dd      	lsls	r5, r3, #27
 80159a6:	d411      	bmi.n	80159cc <__swsetup_r+0x50>
 80159a8:	2309      	movs	r3, #9
 80159aa:	6033      	str	r3, [r6, #0]
 80159ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159b0:	81a3      	strh	r3, [r4, #12]
 80159b2:	f04f 30ff 	mov.w	r0, #4294967295
 80159b6:	e03e      	b.n	8015a36 <__swsetup_r+0xba>
 80159b8:	4b25      	ldr	r3, [pc, #148]	; (8015a50 <__swsetup_r+0xd4>)
 80159ba:	429c      	cmp	r4, r3
 80159bc:	d101      	bne.n	80159c2 <__swsetup_r+0x46>
 80159be:	68ac      	ldr	r4, [r5, #8]
 80159c0:	e7eb      	b.n	801599a <__swsetup_r+0x1e>
 80159c2:	4b24      	ldr	r3, [pc, #144]	; (8015a54 <__swsetup_r+0xd8>)
 80159c4:	429c      	cmp	r4, r3
 80159c6:	bf08      	it	eq
 80159c8:	68ec      	ldreq	r4, [r5, #12]
 80159ca:	e7e6      	b.n	801599a <__swsetup_r+0x1e>
 80159cc:	0758      	lsls	r0, r3, #29
 80159ce:	d512      	bpl.n	80159f6 <__swsetup_r+0x7a>
 80159d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159d2:	b141      	cbz	r1, 80159e6 <__swsetup_r+0x6a>
 80159d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159d8:	4299      	cmp	r1, r3
 80159da:	d002      	beq.n	80159e2 <__swsetup_r+0x66>
 80159dc:	4630      	mov	r0, r6
 80159de:	f002 f947 	bl	8017c70 <_free_r>
 80159e2:	2300      	movs	r3, #0
 80159e4:	6363      	str	r3, [r4, #52]	; 0x34
 80159e6:	89a3      	ldrh	r3, [r4, #12]
 80159e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80159ec:	81a3      	strh	r3, [r4, #12]
 80159ee:	2300      	movs	r3, #0
 80159f0:	6063      	str	r3, [r4, #4]
 80159f2:	6923      	ldr	r3, [r4, #16]
 80159f4:	6023      	str	r3, [r4, #0]
 80159f6:	89a3      	ldrh	r3, [r4, #12]
 80159f8:	f043 0308 	orr.w	r3, r3, #8
 80159fc:	81a3      	strh	r3, [r4, #12]
 80159fe:	6923      	ldr	r3, [r4, #16]
 8015a00:	b94b      	cbnz	r3, 8015a16 <__swsetup_r+0x9a>
 8015a02:	89a3      	ldrh	r3, [r4, #12]
 8015a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a0c:	d003      	beq.n	8015a16 <__swsetup_r+0x9a>
 8015a0e:	4621      	mov	r1, r4
 8015a10:	4630      	mov	r0, r6
 8015a12:	f001 fbed 	bl	80171f0 <__smakebuf_r>
 8015a16:	89a0      	ldrh	r0, [r4, #12]
 8015a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a1c:	f010 0301 	ands.w	r3, r0, #1
 8015a20:	d00a      	beq.n	8015a38 <__swsetup_r+0xbc>
 8015a22:	2300      	movs	r3, #0
 8015a24:	60a3      	str	r3, [r4, #8]
 8015a26:	6963      	ldr	r3, [r4, #20]
 8015a28:	425b      	negs	r3, r3
 8015a2a:	61a3      	str	r3, [r4, #24]
 8015a2c:	6923      	ldr	r3, [r4, #16]
 8015a2e:	b943      	cbnz	r3, 8015a42 <__swsetup_r+0xc6>
 8015a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a34:	d1ba      	bne.n	80159ac <__swsetup_r+0x30>
 8015a36:	bd70      	pop	{r4, r5, r6, pc}
 8015a38:	0781      	lsls	r1, r0, #30
 8015a3a:	bf58      	it	pl
 8015a3c:	6963      	ldrpl	r3, [r4, #20]
 8015a3e:	60a3      	str	r3, [r4, #8]
 8015a40:	e7f4      	b.n	8015a2c <__swsetup_r+0xb0>
 8015a42:	2000      	movs	r0, #0
 8015a44:	e7f7      	b.n	8015a36 <__swsetup_r+0xba>
 8015a46:	bf00      	nop
 8015a48:	20000230 	.word	0x20000230
 8015a4c:	0801df6c 	.word	0x0801df6c
 8015a50:	0801df8c 	.word	0x0801df8c
 8015a54:	0801df4c 	.word	0x0801df4c

08015a58 <quorem>:
 8015a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5c:	6903      	ldr	r3, [r0, #16]
 8015a5e:	690c      	ldr	r4, [r1, #16]
 8015a60:	42a3      	cmp	r3, r4
 8015a62:	4607      	mov	r7, r0
 8015a64:	f2c0 8081 	blt.w	8015b6a <quorem+0x112>
 8015a68:	3c01      	subs	r4, #1
 8015a6a:	f101 0814 	add.w	r8, r1, #20
 8015a6e:	f100 0514 	add.w	r5, r0, #20
 8015a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a76:	9301      	str	r3, [sp, #4]
 8015a78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a80:	3301      	adds	r3, #1
 8015a82:	429a      	cmp	r2, r3
 8015a84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015a8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015a90:	d331      	bcc.n	8015af6 <quorem+0x9e>
 8015a92:	f04f 0e00 	mov.w	lr, #0
 8015a96:	4640      	mov	r0, r8
 8015a98:	46ac      	mov	ip, r5
 8015a9a:	46f2      	mov	sl, lr
 8015a9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015aa0:	b293      	uxth	r3, r2
 8015aa2:	fb06 e303 	mla	r3, r6, r3, lr
 8015aa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	ebaa 0303 	sub.w	r3, sl, r3
 8015ab0:	f8dc a000 	ldr.w	sl, [ip]
 8015ab4:	0c12      	lsrs	r2, r2, #16
 8015ab6:	fa13 f38a 	uxtah	r3, r3, sl
 8015aba:	fb06 e202 	mla	r2, r6, r2, lr
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	9b00      	ldr	r3, [sp, #0]
 8015ac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ac6:	b292      	uxth	r2, r2
 8015ac8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ad0:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ad4:	4581      	cmp	r9, r0
 8015ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015ada:	f84c 3b04 	str.w	r3, [ip], #4
 8015ade:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015ae2:	d2db      	bcs.n	8015a9c <quorem+0x44>
 8015ae4:	f855 300b 	ldr.w	r3, [r5, fp]
 8015ae8:	b92b      	cbnz	r3, 8015af6 <quorem+0x9e>
 8015aea:	9b01      	ldr	r3, [sp, #4]
 8015aec:	3b04      	subs	r3, #4
 8015aee:	429d      	cmp	r5, r3
 8015af0:	461a      	mov	r2, r3
 8015af2:	d32e      	bcc.n	8015b52 <quorem+0xfa>
 8015af4:	613c      	str	r4, [r7, #16]
 8015af6:	4638      	mov	r0, r7
 8015af8:	f001 feae 	bl	8017858 <__mcmp>
 8015afc:	2800      	cmp	r0, #0
 8015afe:	db24      	blt.n	8015b4a <quorem+0xf2>
 8015b00:	3601      	adds	r6, #1
 8015b02:	4628      	mov	r0, r5
 8015b04:	f04f 0c00 	mov.w	ip, #0
 8015b08:	f858 2b04 	ldr.w	r2, [r8], #4
 8015b0c:	f8d0 e000 	ldr.w	lr, [r0]
 8015b10:	b293      	uxth	r3, r2
 8015b12:	ebac 0303 	sub.w	r3, ip, r3
 8015b16:	0c12      	lsrs	r2, r2, #16
 8015b18:	fa13 f38e 	uxtah	r3, r3, lr
 8015b1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b2a:	45c1      	cmp	r9, r8
 8015b2c:	f840 3b04 	str.w	r3, [r0], #4
 8015b30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015b34:	d2e8      	bcs.n	8015b08 <quorem+0xb0>
 8015b36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b3e:	b922      	cbnz	r2, 8015b4a <quorem+0xf2>
 8015b40:	3b04      	subs	r3, #4
 8015b42:	429d      	cmp	r5, r3
 8015b44:	461a      	mov	r2, r3
 8015b46:	d30a      	bcc.n	8015b5e <quorem+0x106>
 8015b48:	613c      	str	r4, [r7, #16]
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	b003      	add	sp, #12
 8015b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b52:	6812      	ldr	r2, [r2, #0]
 8015b54:	3b04      	subs	r3, #4
 8015b56:	2a00      	cmp	r2, #0
 8015b58:	d1cc      	bne.n	8015af4 <quorem+0x9c>
 8015b5a:	3c01      	subs	r4, #1
 8015b5c:	e7c7      	b.n	8015aee <quorem+0x96>
 8015b5e:	6812      	ldr	r2, [r2, #0]
 8015b60:	3b04      	subs	r3, #4
 8015b62:	2a00      	cmp	r2, #0
 8015b64:	d1f0      	bne.n	8015b48 <quorem+0xf0>
 8015b66:	3c01      	subs	r4, #1
 8015b68:	e7eb      	b.n	8015b42 <quorem+0xea>
 8015b6a:	2000      	movs	r0, #0
 8015b6c:	e7ee      	b.n	8015b4c <quorem+0xf4>
	...

08015b70 <_dtoa_r>:
 8015b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b74:	ed2d 8b04 	vpush	{d8-d9}
 8015b78:	ec57 6b10 	vmov	r6, r7, d0
 8015b7c:	b093      	sub	sp, #76	; 0x4c
 8015b7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015b80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015b84:	9106      	str	r1, [sp, #24]
 8015b86:	ee10 aa10 	vmov	sl, s0
 8015b8a:	4604      	mov	r4, r0
 8015b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8015b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8015b90:	46bb      	mov	fp, r7
 8015b92:	b975      	cbnz	r5, 8015bb2 <_dtoa_r+0x42>
 8015b94:	2010      	movs	r0, #16
 8015b96:	f001 fb6b 	bl	8017270 <malloc>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	6260      	str	r0, [r4, #36]	; 0x24
 8015b9e:	b920      	cbnz	r0, 8015baa <_dtoa_r+0x3a>
 8015ba0:	4ba7      	ldr	r3, [pc, #668]	; (8015e40 <_dtoa_r+0x2d0>)
 8015ba2:	21ea      	movs	r1, #234	; 0xea
 8015ba4:	48a7      	ldr	r0, [pc, #668]	; (8015e44 <_dtoa_r+0x2d4>)
 8015ba6:	f002 fc89 	bl	80184bc <__assert_func>
 8015baa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015bae:	6005      	str	r5, [r0, #0]
 8015bb0:	60c5      	str	r5, [r0, #12]
 8015bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bb4:	6819      	ldr	r1, [r3, #0]
 8015bb6:	b151      	cbz	r1, 8015bce <_dtoa_r+0x5e>
 8015bb8:	685a      	ldr	r2, [r3, #4]
 8015bba:	604a      	str	r2, [r1, #4]
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	4093      	lsls	r3, r2
 8015bc0:	608b      	str	r3, [r1, #8]
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f001 fbbc 	bl	8017340 <_Bfree>
 8015bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bca:	2200      	movs	r2, #0
 8015bcc:	601a      	str	r2, [r3, #0]
 8015bce:	1e3b      	subs	r3, r7, #0
 8015bd0:	bfaa      	itet	ge
 8015bd2:	2300      	movge	r3, #0
 8015bd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015bd8:	f8c8 3000 	strge.w	r3, [r8]
 8015bdc:	4b9a      	ldr	r3, [pc, #616]	; (8015e48 <_dtoa_r+0x2d8>)
 8015bde:	bfbc      	itt	lt
 8015be0:	2201      	movlt	r2, #1
 8015be2:	f8c8 2000 	strlt.w	r2, [r8]
 8015be6:	ea33 030b 	bics.w	r3, r3, fp
 8015bea:	d11b      	bne.n	8015c24 <_dtoa_r+0xb4>
 8015bec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015bee:	f242 730f 	movw	r3, #9999	; 0x270f
 8015bf2:	6013      	str	r3, [r2, #0]
 8015bf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015bf8:	4333      	orrs	r3, r6
 8015bfa:	f000 8592 	beq.w	8016722 <_dtoa_r+0xbb2>
 8015bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c00:	b963      	cbnz	r3, 8015c1c <_dtoa_r+0xac>
 8015c02:	4b92      	ldr	r3, [pc, #584]	; (8015e4c <_dtoa_r+0x2dc>)
 8015c04:	e022      	b.n	8015c4c <_dtoa_r+0xdc>
 8015c06:	4b92      	ldr	r3, [pc, #584]	; (8015e50 <_dtoa_r+0x2e0>)
 8015c08:	9301      	str	r3, [sp, #4]
 8015c0a:	3308      	adds	r3, #8
 8015c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c0e:	6013      	str	r3, [r2, #0]
 8015c10:	9801      	ldr	r0, [sp, #4]
 8015c12:	b013      	add	sp, #76	; 0x4c
 8015c14:	ecbd 8b04 	vpop	{d8-d9}
 8015c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c1c:	4b8b      	ldr	r3, [pc, #556]	; (8015e4c <_dtoa_r+0x2dc>)
 8015c1e:	9301      	str	r3, [sp, #4]
 8015c20:	3303      	adds	r3, #3
 8015c22:	e7f3      	b.n	8015c0c <_dtoa_r+0x9c>
 8015c24:	2200      	movs	r2, #0
 8015c26:	2300      	movs	r3, #0
 8015c28:	4650      	mov	r0, sl
 8015c2a:	4659      	mov	r1, fp
 8015c2c:	f7ea ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8015c30:	ec4b ab19 	vmov	d9, sl, fp
 8015c34:	4680      	mov	r8, r0
 8015c36:	b158      	cbz	r0, 8015c50 <_dtoa_r+0xe0>
 8015c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	6013      	str	r3, [r2, #0]
 8015c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f000 856b 	beq.w	801671c <_dtoa_r+0xbac>
 8015c46:	4883      	ldr	r0, [pc, #524]	; (8015e54 <_dtoa_r+0x2e4>)
 8015c48:	6018      	str	r0, [r3, #0]
 8015c4a:	1e43      	subs	r3, r0, #1
 8015c4c:	9301      	str	r3, [sp, #4]
 8015c4e:	e7df      	b.n	8015c10 <_dtoa_r+0xa0>
 8015c50:	ec4b ab10 	vmov	d0, sl, fp
 8015c54:	aa10      	add	r2, sp, #64	; 0x40
 8015c56:	a911      	add	r1, sp, #68	; 0x44
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f001 ff1f 	bl	8017a9c <__d2b>
 8015c5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015c62:	ee08 0a10 	vmov	s16, r0
 8015c66:	2d00      	cmp	r5, #0
 8015c68:	f000 8084 	beq.w	8015d74 <_dtoa_r+0x204>
 8015c6c:	ee19 3a90 	vmov	r3, s19
 8015c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015c78:	4656      	mov	r6, sl
 8015c7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015c7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015c82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015c86:	4b74      	ldr	r3, [pc, #464]	; (8015e58 <_dtoa_r+0x2e8>)
 8015c88:	2200      	movs	r2, #0
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	4639      	mov	r1, r7
 8015c8e:	f7ea fafb 	bl	8000288 <__aeabi_dsub>
 8015c92:	a365      	add	r3, pc, #404	; (adr r3, 8015e28 <_dtoa_r+0x2b8>)
 8015c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c98:	f7ea fcae 	bl	80005f8 <__aeabi_dmul>
 8015c9c:	a364      	add	r3, pc, #400	; (adr r3, 8015e30 <_dtoa_r+0x2c0>)
 8015c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca2:	f7ea faf3 	bl	800028c <__adddf3>
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	4628      	mov	r0, r5
 8015caa:	460f      	mov	r7, r1
 8015cac:	f7ea fc3a 	bl	8000524 <__aeabi_i2d>
 8015cb0:	a361      	add	r3, pc, #388	; (adr r3, 8015e38 <_dtoa_r+0x2c8>)
 8015cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb6:	f7ea fc9f 	bl	80005f8 <__aeabi_dmul>
 8015cba:	4602      	mov	r2, r0
 8015cbc:	460b      	mov	r3, r1
 8015cbe:	4630      	mov	r0, r6
 8015cc0:	4639      	mov	r1, r7
 8015cc2:	f7ea fae3 	bl	800028c <__adddf3>
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	460f      	mov	r7, r1
 8015cca:	f7ea ff45 	bl	8000b58 <__aeabi_d2iz>
 8015cce:	2200      	movs	r2, #0
 8015cd0:	9000      	str	r0, [sp, #0]
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	4630      	mov	r0, r6
 8015cd6:	4639      	mov	r1, r7
 8015cd8:	f7ea ff00 	bl	8000adc <__aeabi_dcmplt>
 8015cdc:	b150      	cbz	r0, 8015cf4 <_dtoa_r+0x184>
 8015cde:	9800      	ldr	r0, [sp, #0]
 8015ce0:	f7ea fc20 	bl	8000524 <__aeabi_i2d>
 8015ce4:	4632      	mov	r2, r6
 8015ce6:	463b      	mov	r3, r7
 8015ce8:	f7ea feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8015cec:	b910      	cbnz	r0, 8015cf4 <_dtoa_r+0x184>
 8015cee:	9b00      	ldr	r3, [sp, #0]
 8015cf0:	3b01      	subs	r3, #1
 8015cf2:	9300      	str	r3, [sp, #0]
 8015cf4:	9b00      	ldr	r3, [sp, #0]
 8015cf6:	2b16      	cmp	r3, #22
 8015cf8:	d85a      	bhi.n	8015db0 <_dtoa_r+0x240>
 8015cfa:	9a00      	ldr	r2, [sp, #0]
 8015cfc:	4b57      	ldr	r3, [pc, #348]	; (8015e5c <_dtoa_r+0x2ec>)
 8015cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d06:	ec51 0b19 	vmov	r0, r1, d9
 8015d0a:	f7ea fee7 	bl	8000adc <__aeabi_dcmplt>
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	d050      	beq.n	8015db4 <_dtoa_r+0x244>
 8015d12:	9b00      	ldr	r3, [sp, #0]
 8015d14:	3b01      	subs	r3, #1
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	2300      	movs	r3, #0
 8015d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d1e:	1b5d      	subs	r5, r3, r5
 8015d20:	1e6b      	subs	r3, r5, #1
 8015d22:	9305      	str	r3, [sp, #20]
 8015d24:	bf45      	ittet	mi
 8015d26:	f1c5 0301 	rsbmi	r3, r5, #1
 8015d2a:	9304      	strmi	r3, [sp, #16]
 8015d2c:	2300      	movpl	r3, #0
 8015d2e:	2300      	movmi	r3, #0
 8015d30:	bf4c      	ite	mi
 8015d32:	9305      	strmi	r3, [sp, #20]
 8015d34:	9304      	strpl	r3, [sp, #16]
 8015d36:	9b00      	ldr	r3, [sp, #0]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	db3d      	blt.n	8015db8 <_dtoa_r+0x248>
 8015d3c:	9b05      	ldr	r3, [sp, #20]
 8015d3e:	9a00      	ldr	r2, [sp, #0]
 8015d40:	920a      	str	r2, [sp, #40]	; 0x28
 8015d42:	4413      	add	r3, r2
 8015d44:	9305      	str	r3, [sp, #20]
 8015d46:	2300      	movs	r3, #0
 8015d48:	9307      	str	r3, [sp, #28]
 8015d4a:	9b06      	ldr	r3, [sp, #24]
 8015d4c:	2b09      	cmp	r3, #9
 8015d4e:	f200 8089 	bhi.w	8015e64 <_dtoa_r+0x2f4>
 8015d52:	2b05      	cmp	r3, #5
 8015d54:	bfc4      	itt	gt
 8015d56:	3b04      	subgt	r3, #4
 8015d58:	9306      	strgt	r3, [sp, #24]
 8015d5a:	9b06      	ldr	r3, [sp, #24]
 8015d5c:	f1a3 0302 	sub.w	r3, r3, #2
 8015d60:	bfcc      	ite	gt
 8015d62:	2500      	movgt	r5, #0
 8015d64:	2501      	movle	r5, #1
 8015d66:	2b03      	cmp	r3, #3
 8015d68:	f200 8087 	bhi.w	8015e7a <_dtoa_r+0x30a>
 8015d6c:	e8df f003 	tbb	[pc, r3]
 8015d70:	59383a2d 	.word	0x59383a2d
 8015d74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015d78:	441d      	add	r5, r3
 8015d7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015d7e:	2b20      	cmp	r3, #32
 8015d80:	bfc1      	itttt	gt
 8015d82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015d86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015d8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8015d8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015d92:	bfda      	itte	le
 8015d94:	f1c3 0320 	rsble	r3, r3, #32
 8015d98:	fa06 f003 	lslle.w	r0, r6, r3
 8015d9c:	4318      	orrgt	r0, r3
 8015d9e:	f7ea fbb1 	bl	8000504 <__aeabi_ui2d>
 8015da2:	2301      	movs	r3, #1
 8015da4:	4606      	mov	r6, r0
 8015da6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015daa:	3d01      	subs	r5, #1
 8015dac:	930e      	str	r3, [sp, #56]	; 0x38
 8015dae:	e76a      	b.n	8015c86 <_dtoa_r+0x116>
 8015db0:	2301      	movs	r3, #1
 8015db2:	e7b2      	b.n	8015d1a <_dtoa_r+0x1aa>
 8015db4:	900b      	str	r0, [sp, #44]	; 0x2c
 8015db6:	e7b1      	b.n	8015d1c <_dtoa_r+0x1ac>
 8015db8:	9b04      	ldr	r3, [sp, #16]
 8015dba:	9a00      	ldr	r2, [sp, #0]
 8015dbc:	1a9b      	subs	r3, r3, r2
 8015dbe:	9304      	str	r3, [sp, #16]
 8015dc0:	4253      	negs	r3, r2
 8015dc2:	9307      	str	r3, [sp, #28]
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8015dc8:	e7bf      	b.n	8015d4a <_dtoa_r+0x1da>
 8015dca:	2300      	movs	r3, #0
 8015dcc:	9308      	str	r3, [sp, #32]
 8015dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	dc55      	bgt.n	8015e80 <_dtoa_r+0x310>
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015dda:	461a      	mov	r2, r3
 8015ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8015dde:	e00c      	b.n	8015dfa <_dtoa_r+0x28a>
 8015de0:	2301      	movs	r3, #1
 8015de2:	e7f3      	b.n	8015dcc <_dtoa_r+0x25c>
 8015de4:	2300      	movs	r3, #0
 8015de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015de8:	9308      	str	r3, [sp, #32]
 8015dea:	9b00      	ldr	r3, [sp, #0]
 8015dec:	4413      	add	r3, r2
 8015dee:	9302      	str	r3, [sp, #8]
 8015df0:	3301      	adds	r3, #1
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	9303      	str	r3, [sp, #12]
 8015df6:	bfb8      	it	lt
 8015df8:	2301      	movlt	r3, #1
 8015dfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	6042      	str	r2, [r0, #4]
 8015e00:	2204      	movs	r2, #4
 8015e02:	f102 0614 	add.w	r6, r2, #20
 8015e06:	429e      	cmp	r6, r3
 8015e08:	6841      	ldr	r1, [r0, #4]
 8015e0a:	d93d      	bls.n	8015e88 <_dtoa_r+0x318>
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f001 fa57 	bl	80172c0 <_Balloc>
 8015e12:	9001      	str	r0, [sp, #4]
 8015e14:	2800      	cmp	r0, #0
 8015e16:	d13b      	bne.n	8015e90 <_dtoa_r+0x320>
 8015e18:	4b11      	ldr	r3, [pc, #68]	; (8015e60 <_dtoa_r+0x2f0>)
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015e20:	e6c0      	b.n	8015ba4 <_dtoa_r+0x34>
 8015e22:	2301      	movs	r3, #1
 8015e24:	e7df      	b.n	8015de6 <_dtoa_r+0x276>
 8015e26:	bf00      	nop
 8015e28:	636f4361 	.word	0x636f4361
 8015e2c:	3fd287a7 	.word	0x3fd287a7
 8015e30:	8b60c8b3 	.word	0x8b60c8b3
 8015e34:	3fc68a28 	.word	0x3fc68a28
 8015e38:	509f79fb 	.word	0x509f79fb
 8015e3c:	3fd34413 	.word	0x3fd34413
 8015e40:	0801dec6 	.word	0x0801dec6
 8015e44:	0801dedd 	.word	0x0801dedd
 8015e48:	7ff00000 	.word	0x7ff00000
 8015e4c:	0801dec2 	.word	0x0801dec2
 8015e50:	0801deb9 	.word	0x0801deb9
 8015e54:	0801dd39 	.word	0x0801dd39
 8015e58:	3ff80000 	.word	0x3ff80000
 8015e5c:	0801e0b0 	.word	0x0801e0b0
 8015e60:	0801df38 	.word	0x0801df38
 8015e64:	2501      	movs	r5, #1
 8015e66:	2300      	movs	r3, #0
 8015e68:	9306      	str	r3, [sp, #24]
 8015e6a:	9508      	str	r5, [sp, #32]
 8015e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015e74:	2200      	movs	r2, #0
 8015e76:	2312      	movs	r3, #18
 8015e78:	e7b0      	b.n	8015ddc <_dtoa_r+0x26c>
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	9308      	str	r3, [sp, #32]
 8015e7e:	e7f5      	b.n	8015e6c <_dtoa_r+0x2fc>
 8015e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015e86:	e7b8      	b.n	8015dfa <_dtoa_r+0x28a>
 8015e88:	3101      	adds	r1, #1
 8015e8a:	6041      	str	r1, [r0, #4]
 8015e8c:	0052      	lsls	r2, r2, #1
 8015e8e:	e7b8      	b.n	8015e02 <_dtoa_r+0x292>
 8015e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e92:	9a01      	ldr	r2, [sp, #4]
 8015e94:	601a      	str	r2, [r3, #0]
 8015e96:	9b03      	ldr	r3, [sp, #12]
 8015e98:	2b0e      	cmp	r3, #14
 8015e9a:	f200 809d 	bhi.w	8015fd8 <_dtoa_r+0x468>
 8015e9e:	2d00      	cmp	r5, #0
 8015ea0:	f000 809a 	beq.w	8015fd8 <_dtoa_r+0x468>
 8015ea4:	9b00      	ldr	r3, [sp, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	dd32      	ble.n	8015f10 <_dtoa_r+0x3a0>
 8015eaa:	4ab7      	ldr	r2, [pc, #732]	; (8016188 <_dtoa_r+0x618>)
 8015eac:	f003 030f 	and.w	r3, r3, #15
 8015eb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015eb8:	9b00      	ldr	r3, [sp, #0]
 8015eba:	05d8      	lsls	r0, r3, #23
 8015ebc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015ec0:	d516      	bpl.n	8015ef0 <_dtoa_r+0x380>
 8015ec2:	4bb2      	ldr	r3, [pc, #712]	; (801618c <_dtoa_r+0x61c>)
 8015ec4:	ec51 0b19 	vmov	r0, r1, d9
 8015ec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ecc:	f7ea fcbe 	bl	800084c <__aeabi_ddiv>
 8015ed0:	f007 070f 	and.w	r7, r7, #15
 8015ed4:	4682      	mov	sl, r0
 8015ed6:	468b      	mov	fp, r1
 8015ed8:	2503      	movs	r5, #3
 8015eda:	4eac      	ldr	r6, [pc, #688]	; (801618c <_dtoa_r+0x61c>)
 8015edc:	b957      	cbnz	r7, 8015ef4 <_dtoa_r+0x384>
 8015ede:	4642      	mov	r2, r8
 8015ee0:	464b      	mov	r3, r9
 8015ee2:	4650      	mov	r0, sl
 8015ee4:	4659      	mov	r1, fp
 8015ee6:	f7ea fcb1 	bl	800084c <__aeabi_ddiv>
 8015eea:	4682      	mov	sl, r0
 8015eec:	468b      	mov	fp, r1
 8015eee:	e028      	b.n	8015f42 <_dtoa_r+0x3d2>
 8015ef0:	2502      	movs	r5, #2
 8015ef2:	e7f2      	b.n	8015eda <_dtoa_r+0x36a>
 8015ef4:	07f9      	lsls	r1, r7, #31
 8015ef6:	d508      	bpl.n	8015f0a <_dtoa_r+0x39a>
 8015ef8:	4640      	mov	r0, r8
 8015efa:	4649      	mov	r1, r9
 8015efc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015f00:	f7ea fb7a 	bl	80005f8 <__aeabi_dmul>
 8015f04:	3501      	adds	r5, #1
 8015f06:	4680      	mov	r8, r0
 8015f08:	4689      	mov	r9, r1
 8015f0a:	107f      	asrs	r7, r7, #1
 8015f0c:	3608      	adds	r6, #8
 8015f0e:	e7e5      	b.n	8015edc <_dtoa_r+0x36c>
 8015f10:	f000 809b 	beq.w	801604a <_dtoa_r+0x4da>
 8015f14:	9b00      	ldr	r3, [sp, #0]
 8015f16:	4f9d      	ldr	r7, [pc, #628]	; (801618c <_dtoa_r+0x61c>)
 8015f18:	425e      	negs	r6, r3
 8015f1a:	4b9b      	ldr	r3, [pc, #620]	; (8016188 <_dtoa_r+0x618>)
 8015f1c:	f006 020f 	and.w	r2, r6, #15
 8015f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f28:	ec51 0b19 	vmov	r0, r1, d9
 8015f2c:	f7ea fb64 	bl	80005f8 <__aeabi_dmul>
 8015f30:	1136      	asrs	r6, r6, #4
 8015f32:	4682      	mov	sl, r0
 8015f34:	468b      	mov	fp, r1
 8015f36:	2300      	movs	r3, #0
 8015f38:	2502      	movs	r5, #2
 8015f3a:	2e00      	cmp	r6, #0
 8015f3c:	d17a      	bne.n	8016034 <_dtoa_r+0x4c4>
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1d3      	bne.n	8015eea <_dtoa_r+0x37a>
 8015f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f000 8082 	beq.w	801604e <_dtoa_r+0x4de>
 8015f4a:	4b91      	ldr	r3, [pc, #580]	; (8016190 <_dtoa_r+0x620>)
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	4650      	mov	r0, sl
 8015f50:	4659      	mov	r1, fp
 8015f52:	f7ea fdc3 	bl	8000adc <__aeabi_dcmplt>
 8015f56:	2800      	cmp	r0, #0
 8015f58:	d079      	beq.n	801604e <_dtoa_r+0x4de>
 8015f5a:	9b03      	ldr	r3, [sp, #12]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d076      	beq.n	801604e <_dtoa_r+0x4de>
 8015f60:	9b02      	ldr	r3, [sp, #8]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	dd36      	ble.n	8015fd4 <_dtoa_r+0x464>
 8015f66:	9b00      	ldr	r3, [sp, #0]
 8015f68:	4650      	mov	r0, sl
 8015f6a:	4659      	mov	r1, fp
 8015f6c:	1e5f      	subs	r7, r3, #1
 8015f6e:	2200      	movs	r2, #0
 8015f70:	4b88      	ldr	r3, [pc, #544]	; (8016194 <_dtoa_r+0x624>)
 8015f72:	f7ea fb41 	bl	80005f8 <__aeabi_dmul>
 8015f76:	9e02      	ldr	r6, [sp, #8]
 8015f78:	4682      	mov	sl, r0
 8015f7a:	468b      	mov	fp, r1
 8015f7c:	3501      	adds	r5, #1
 8015f7e:	4628      	mov	r0, r5
 8015f80:	f7ea fad0 	bl	8000524 <__aeabi_i2d>
 8015f84:	4652      	mov	r2, sl
 8015f86:	465b      	mov	r3, fp
 8015f88:	f7ea fb36 	bl	80005f8 <__aeabi_dmul>
 8015f8c:	4b82      	ldr	r3, [pc, #520]	; (8016198 <_dtoa_r+0x628>)
 8015f8e:	2200      	movs	r2, #0
 8015f90:	f7ea f97c 	bl	800028c <__adddf3>
 8015f94:	46d0      	mov	r8, sl
 8015f96:	46d9      	mov	r9, fp
 8015f98:	4682      	mov	sl, r0
 8015f9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015f9e:	2e00      	cmp	r6, #0
 8015fa0:	d158      	bne.n	8016054 <_dtoa_r+0x4e4>
 8015fa2:	4b7e      	ldr	r3, [pc, #504]	; (801619c <_dtoa_r+0x62c>)
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	4640      	mov	r0, r8
 8015fa8:	4649      	mov	r1, r9
 8015faa:	f7ea f96d 	bl	8000288 <__aeabi_dsub>
 8015fae:	4652      	mov	r2, sl
 8015fb0:	465b      	mov	r3, fp
 8015fb2:	4680      	mov	r8, r0
 8015fb4:	4689      	mov	r9, r1
 8015fb6:	f7ea fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 8015fba:	2800      	cmp	r0, #0
 8015fbc:	f040 8295 	bne.w	80164ea <_dtoa_r+0x97a>
 8015fc0:	4652      	mov	r2, sl
 8015fc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015fc6:	4640      	mov	r0, r8
 8015fc8:	4649      	mov	r1, r9
 8015fca:	f7ea fd87 	bl	8000adc <__aeabi_dcmplt>
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	f040 8289 	bne.w	80164e6 <_dtoa_r+0x976>
 8015fd4:	ec5b ab19 	vmov	sl, fp, d9
 8015fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f2c0 8148 	blt.w	8016270 <_dtoa_r+0x700>
 8015fe0:	9a00      	ldr	r2, [sp, #0]
 8015fe2:	2a0e      	cmp	r2, #14
 8015fe4:	f300 8144 	bgt.w	8016270 <_dtoa_r+0x700>
 8015fe8:	4b67      	ldr	r3, [pc, #412]	; (8016188 <_dtoa_r+0x618>)
 8015fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015fee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f280 80d5 	bge.w	80161a4 <_dtoa_r+0x634>
 8015ffa:	9b03      	ldr	r3, [sp, #12]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	f300 80d1 	bgt.w	80161a4 <_dtoa_r+0x634>
 8016002:	f040 826f 	bne.w	80164e4 <_dtoa_r+0x974>
 8016006:	4b65      	ldr	r3, [pc, #404]	; (801619c <_dtoa_r+0x62c>)
 8016008:	2200      	movs	r2, #0
 801600a:	4640      	mov	r0, r8
 801600c:	4649      	mov	r1, r9
 801600e:	f7ea faf3 	bl	80005f8 <__aeabi_dmul>
 8016012:	4652      	mov	r2, sl
 8016014:	465b      	mov	r3, fp
 8016016:	f7ea fd75 	bl	8000b04 <__aeabi_dcmpge>
 801601a:	9e03      	ldr	r6, [sp, #12]
 801601c:	4637      	mov	r7, r6
 801601e:	2800      	cmp	r0, #0
 8016020:	f040 8245 	bne.w	80164ae <_dtoa_r+0x93e>
 8016024:	9d01      	ldr	r5, [sp, #4]
 8016026:	2331      	movs	r3, #49	; 0x31
 8016028:	f805 3b01 	strb.w	r3, [r5], #1
 801602c:	9b00      	ldr	r3, [sp, #0]
 801602e:	3301      	adds	r3, #1
 8016030:	9300      	str	r3, [sp, #0]
 8016032:	e240      	b.n	80164b6 <_dtoa_r+0x946>
 8016034:	07f2      	lsls	r2, r6, #31
 8016036:	d505      	bpl.n	8016044 <_dtoa_r+0x4d4>
 8016038:	e9d7 2300 	ldrd	r2, r3, [r7]
 801603c:	f7ea fadc 	bl	80005f8 <__aeabi_dmul>
 8016040:	3501      	adds	r5, #1
 8016042:	2301      	movs	r3, #1
 8016044:	1076      	asrs	r6, r6, #1
 8016046:	3708      	adds	r7, #8
 8016048:	e777      	b.n	8015f3a <_dtoa_r+0x3ca>
 801604a:	2502      	movs	r5, #2
 801604c:	e779      	b.n	8015f42 <_dtoa_r+0x3d2>
 801604e:	9f00      	ldr	r7, [sp, #0]
 8016050:	9e03      	ldr	r6, [sp, #12]
 8016052:	e794      	b.n	8015f7e <_dtoa_r+0x40e>
 8016054:	9901      	ldr	r1, [sp, #4]
 8016056:	4b4c      	ldr	r3, [pc, #304]	; (8016188 <_dtoa_r+0x618>)
 8016058:	4431      	add	r1, r6
 801605a:	910d      	str	r1, [sp, #52]	; 0x34
 801605c:	9908      	ldr	r1, [sp, #32]
 801605e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016062:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016066:	2900      	cmp	r1, #0
 8016068:	d043      	beq.n	80160f2 <_dtoa_r+0x582>
 801606a:	494d      	ldr	r1, [pc, #308]	; (80161a0 <_dtoa_r+0x630>)
 801606c:	2000      	movs	r0, #0
 801606e:	f7ea fbed 	bl	800084c <__aeabi_ddiv>
 8016072:	4652      	mov	r2, sl
 8016074:	465b      	mov	r3, fp
 8016076:	f7ea f907 	bl	8000288 <__aeabi_dsub>
 801607a:	9d01      	ldr	r5, [sp, #4]
 801607c:	4682      	mov	sl, r0
 801607e:	468b      	mov	fp, r1
 8016080:	4649      	mov	r1, r9
 8016082:	4640      	mov	r0, r8
 8016084:	f7ea fd68 	bl	8000b58 <__aeabi_d2iz>
 8016088:	4606      	mov	r6, r0
 801608a:	f7ea fa4b 	bl	8000524 <__aeabi_i2d>
 801608e:	4602      	mov	r2, r0
 8016090:	460b      	mov	r3, r1
 8016092:	4640      	mov	r0, r8
 8016094:	4649      	mov	r1, r9
 8016096:	f7ea f8f7 	bl	8000288 <__aeabi_dsub>
 801609a:	3630      	adds	r6, #48	; 0x30
 801609c:	f805 6b01 	strb.w	r6, [r5], #1
 80160a0:	4652      	mov	r2, sl
 80160a2:	465b      	mov	r3, fp
 80160a4:	4680      	mov	r8, r0
 80160a6:	4689      	mov	r9, r1
 80160a8:	f7ea fd18 	bl	8000adc <__aeabi_dcmplt>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	d163      	bne.n	8016178 <_dtoa_r+0x608>
 80160b0:	4642      	mov	r2, r8
 80160b2:	464b      	mov	r3, r9
 80160b4:	4936      	ldr	r1, [pc, #216]	; (8016190 <_dtoa_r+0x620>)
 80160b6:	2000      	movs	r0, #0
 80160b8:	f7ea f8e6 	bl	8000288 <__aeabi_dsub>
 80160bc:	4652      	mov	r2, sl
 80160be:	465b      	mov	r3, fp
 80160c0:	f7ea fd0c 	bl	8000adc <__aeabi_dcmplt>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	f040 80b5 	bne.w	8016234 <_dtoa_r+0x6c4>
 80160ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160cc:	429d      	cmp	r5, r3
 80160ce:	d081      	beq.n	8015fd4 <_dtoa_r+0x464>
 80160d0:	4b30      	ldr	r3, [pc, #192]	; (8016194 <_dtoa_r+0x624>)
 80160d2:	2200      	movs	r2, #0
 80160d4:	4650      	mov	r0, sl
 80160d6:	4659      	mov	r1, fp
 80160d8:	f7ea fa8e 	bl	80005f8 <__aeabi_dmul>
 80160dc:	4b2d      	ldr	r3, [pc, #180]	; (8016194 <_dtoa_r+0x624>)
 80160de:	4682      	mov	sl, r0
 80160e0:	468b      	mov	fp, r1
 80160e2:	4640      	mov	r0, r8
 80160e4:	4649      	mov	r1, r9
 80160e6:	2200      	movs	r2, #0
 80160e8:	f7ea fa86 	bl	80005f8 <__aeabi_dmul>
 80160ec:	4680      	mov	r8, r0
 80160ee:	4689      	mov	r9, r1
 80160f0:	e7c6      	b.n	8016080 <_dtoa_r+0x510>
 80160f2:	4650      	mov	r0, sl
 80160f4:	4659      	mov	r1, fp
 80160f6:	f7ea fa7f 	bl	80005f8 <__aeabi_dmul>
 80160fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160fc:	9d01      	ldr	r5, [sp, #4]
 80160fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8016100:	4682      	mov	sl, r0
 8016102:	468b      	mov	fp, r1
 8016104:	4649      	mov	r1, r9
 8016106:	4640      	mov	r0, r8
 8016108:	f7ea fd26 	bl	8000b58 <__aeabi_d2iz>
 801610c:	4606      	mov	r6, r0
 801610e:	f7ea fa09 	bl	8000524 <__aeabi_i2d>
 8016112:	3630      	adds	r6, #48	; 0x30
 8016114:	4602      	mov	r2, r0
 8016116:	460b      	mov	r3, r1
 8016118:	4640      	mov	r0, r8
 801611a:	4649      	mov	r1, r9
 801611c:	f7ea f8b4 	bl	8000288 <__aeabi_dsub>
 8016120:	f805 6b01 	strb.w	r6, [r5], #1
 8016124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016126:	429d      	cmp	r5, r3
 8016128:	4680      	mov	r8, r0
 801612a:	4689      	mov	r9, r1
 801612c:	f04f 0200 	mov.w	r2, #0
 8016130:	d124      	bne.n	801617c <_dtoa_r+0x60c>
 8016132:	4b1b      	ldr	r3, [pc, #108]	; (80161a0 <_dtoa_r+0x630>)
 8016134:	4650      	mov	r0, sl
 8016136:	4659      	mov	r1, fp
 8016138:	f7ea f8a8 	bl	800028c <__adddf3>
 801613c:	4602      	mov	r2, r0
 801613e:	460b      	mov	r3, r1
 8016140:	4640      	mov	r0, r8
 8016142:	4649      	mov	r1, r9
 8016144:	f7ea fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8016148:	2800      	cmp	r0, #0
 801614a:	d173      	bne.n	8016234 <_dtoa_r+0x6c4>
 801614c:	4652      	mov	r2, sl
 801614e:	465b      	mov	r3, fp
 8016150:	4913      	ldr	r1, [pc, #76]	; (80161a0 <_dtoa_r+0x630>)
 8016152:	2000      	movs	r0, #0
 8016154:	f7ea f898 	bl	8000288 <__aeabi_dsub>
 8016158:	4602      	mov	r2, r0
 801615a:	460b      	mov	r3, r1
 801615c:	4640      	mov	r0, r8
 801615e:	4649      	mov	r1, r9
 8016160:	f7ea fcbc 	bl	8000adc <__aeabi_dcmplt>
 8016164:	2800      	cmp	r0, #0
 8016166:	f43f af35 	beq.w	8015fd4 <_dtoa_r+0x464>
 801616a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801616c:	1e6b      	subs	r3, r5, #1
 801616e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016170:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016174:	2b30      	cmp	r3, #48	; 0x30
 8016176:	d0f8      	beq.n	801616a <_dtoa_r+0x5fa>
 8016178:	9700      	str	r7, [sp, #0]
 801617a:	e049      	b.n	8016210 <_dtoa_r+0x6a0>
 801617c:	4b05      	ldr	r3, [pc, #20]	; (8016194 <_dtoa_r+0x624>)
 801617e:	f7ea fa3b 	bl	80005f8 <__aeabi_dmul>
 8016182:	4680      	mov	r8, r0
 8016184:	4689      	mov	r9, r1
 8016186:	e7bd      	b.n	8016104 <_dtoa_r+0x594>
 8016188:	0801e0b0 	.word	0x0801e0b0
 801618c:	0801e088 	.word	0x0801e088
 8016190:	3ff00000 	.word	0x3ff00000
 8016194:	40240000 	.word	0x40240000
 8016198:	401c0000 	.word	0x401c0000
 801619c:	40140000 	.word	0x40140000
 80161a0:	3fe00000 	.word	0x3fe00000
 80161a4:	9d01      	ldr	r5, [sp, #4]
 80161a6:	4656      	mov	r6, sl
 80161a8:	465f      	mov	r7, fp
 80161aa:	4642      	mov	r2, r8
 80161ac:	464b      	mov	r3, r9
 80161ae:	4630      	mov	r0, r6
 80161b0:	4639      	mov	r1, r7
 80161b2:	f7ea fb4b 	bl	800084c <__aeabi_ddiv>
 80161b6:	f7ea fccf 	bl	8000b58 <__aeabi_d2iz>
 80161ba:	4682      	mov	sl, r0
 80161bc:	f7ea f9b2 	bl	8000524 <__aeabi_i2d>
 80161c0:	4642      	mov	r2, r8
 80161c2:	464b      	mov	r3, r9
 80161c4:	f7ea fa18 	bl	80005f8 <__aeabi_dmul>
 80161c8:	4602      	mov	r2, r0
 80161ca:	460b      	mov	r3, r1
 80161cc:	4630      	mov	r0, r6
 80161ce:	4639      	mov	r1, r7
 80161d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80161d4:	f7ea f858 	bl	8000288 <__aeabi_dsub>
 80161d8:	f805 6b01 	strb.w	r6, [r5], #1
 80161dc:	9e01      	ldr	r6, [sp, #4]
 80161de:	9f03      	ldr	r7, [sp, #12]
 80161e0:	1bae      	subs	r6, r5, r6
 80161e2:	42b7      	cmp	r7, r6
 80161e4:	4602      	mov	r2, r0
 80161e6:	460b      	mov	r3, r1
 80161e8:	d135      	bne.n	8016256 <_dtoa_r+0x6e6>
 80161ea:	f7ea f84f 	bl	800028c <__adddf3>
 80161ee:	4642      	mov	r2, r8
 80161f0:	464b      	mov	r3, r9
 80161f2:	4606      	mov	r6, r0
 80161f4:	460f      	mov	r7, r1
 80161f6:	f7ea fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 80161fa:	b9d0      	cbnz	r0, 8016232 <_dtoa_r+0x6c2>
 80161fc:	4642      	mov	r2, r8
 80161fe:	464b      	mov	r3, r9
 8016200:	4630      	mov	r0, r6
 8016202:	4639      	mov	r1, r7
 8016204:	f7ea fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8016208:	b110      	cbz	r0, 8016210 <_dtoa_r+0x6a0>
 801620a:	f01a 0f01 	tst.w	sl, #1
 801620e:	d110      	bne.n	8016232 <_dtoa_r+0x6c2>
 8016210:	4620      	mov	r0, r4
 8016212:	ee18 1a10 	vmov	r1, s16
 8016216:	f001 f893 	bl	8017340 <_Bfree>
 801621a:	2300      	movs	r3, #0
 801621c:	9800      	ldr	r0, [sp, #0]
 801621e:	702b      	strb	r3, [r5, #0]
 8016220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016222:	3001      	adds	r0, #1
 8016224:	6018      	str	r0, [r3, #0]
 8016226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016228:	2b00      	cmp	r3, #0
 801622a:	f43f acf1 	beq.w	8015c10 <_dtoa_r+0xa0>
 801622e:	601d      	str	r5, [r3, #0]
 8016230:	e4ee      	b.n	8015c10 <_dtoa_r+0xa0>
 8016232:	9f00      	ldr	r7, [sp, #0]
 8016234:	462b      	mov	r3, r5
 8016236:	461d      	mov	r5, r3
 8016238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801623c:	2a39      	cmp	r2, #57	; 0x39
 801623e:	d106      	bne.n	801624e <_dtoa_r+0x6de>
 8016240:	9a01      	ldr	r2, [sp, #4]
 8016242:	429a      	cmp	r2, r3
 8016244:	d1f7      	bne.n	8016236 <_dtoa_r+0x6c6>
 8016246:	9901      	ldr	r1, [sp, #4]
 8016248:	2230      	movs	r2, #48	; 0x30
 801624a:	3701      	adds	r7, #1
 801624c:	700a      	strb	r2, [r1, #0]
 801624e:	781a      	ldrb	r2, [r3, #0]
 8016250:	3201      	adds	r2, #1
 8016252:	701a      	strb	r2, [r3, #0]
 8016254:	e790      	b.n	8016178 <_dtoa_r+0x608>
 8016256:	4ba6      	ldr	r3, [pc, #664]	; (80164f0 <_dtoa_r+0x980>)
 8016258:	2200      	movs	r2, #0
 801625a:	f7ea f9cd 	bl	80005f8 <__aeabi_dmul>
 801625e:	2200      	movs	r2, #0
 8016260:	2300      	movs	r3, #0
 8016262:	4606      	mov	r6, r0
 8016264:	460f      	mov	r7, r1
 8016266:	f7ea fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801626a:	2800      	cmp	r0, #0
 801626c:	d09d      	beq.n	80161aa <_dtoa_r+0x63a>
 801626e:	e7cf      	b.n	8016210 <_dtoa_r+0x6a0>
 8016270:	9a08      	ldr	r2, [sp, #32]
 8016272:	2a00      	cmp	r2, #0
 8016274:	f000 80d7 	beq.w	8016426 <_dtoa_r+0x8b6>
 8016278:	9a06      	ldr	r2, [sp, #24]
 801627a:	2a01      	cmp	r2, #1
 801627c:	f300 80ba 	bgt.w	80163f4 <_dtoa_r+0x884>
 8016280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016282:	2a00      	cmp	r2, #0
 8016284:	f000 80b2 	beq.w	80163ec <_dtoa_r+0x87c>
 8016288:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801628c:	9e07      	ldr	r6, [sp, #28]
 801628e:	9d04      	ldr	r5, [sp, #16]
 8016290:	9a04      	ldr	r2, [sp, #16]
 8016292:	441a      	add	r2, r3
 8016294:	9204      	str	r2, [sp, #16]
 8016296:	9a05      	ldr	r2, [sp, #20]
 8016298:	2101      	movs	r1, #1
 801629a:	441a      	add	r2, r3
 801629c:	4620      	mov	r0, r4
 801629e:	9205      	str	r2, [sp, #20]
 80162a0:	f001 f950 	bl	8017544 <__i2b>
 80162a4:	4607      	mov	r7, r0
 80162a6:	2d00      	cmp	r5, #0
 80162a8:	dd0c      	ble.n	80162c4 <_dtoa_r+0x754>
 80162aa:	9b05      	ldr	r3, [sp, #20]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	dd09      	ble.n	80162c4 <_dtoa_r+0x754>
 80162b0:	42ab      	cmp	r3, r5
 80162b2:	9a04      	ldr	r2, [sp, #16]
 80162b4:	bfa8      	it	ge
 80162b6:	462b      	movge	r3, r5
 80162b8:	1ad2      	subs	r2, r2, r3
 80162ba:	9204      	str	r2, [sp, #16]
 80162bc:	9a05      	ldr	r2, [sp, #20]
 80162be:	1aed      	subs	r5, r5, r3
 80162c0:	1ad3      	subs	r3, r2, r3
 80162c2:	9305      	str	r3, [sp, #20]
 80162c4:	9b07      	ldr	r3, [sp, #28]
 80162c6:	b31b      	cbz	r3, 8016310 <_dtoa_r+0x7a0>
 80162c8:	9b08      	ldr	r3, [sp, #32]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	f000 80af 	beq.w	801642e <_dtoa_r+0x8be>
 80162d0:	2e00      	cmp	r6, #0
 80162d2:	dd13      	ble.n	80162fc <_dtoa_r+0x78c>
 80162d4:	4639      	mov	r1, r7
 80162d6:	4632      	mov	r2, r6
 80162d8:	4620      	mov	r0, r4
 80162da:	f001 f9f3 	bl	80176c4 <__pow5mult>
 80162de:	ee18 2a10 	vmov	r2, s16
 80162e2:	4601      	mov	r1, r0
 80162e4:	4607      	mov	r7, r0
 80162e6:	4620      	mov	r0, r4
 80162e8:	f001 f942 	bl	8017570 <__multiply>
 80162ec:	ee18 1a10 	vmov	r1, s16
 80162f0:	4680      	mov	r8, r0
 80162f2:	4620      	mov	r0, r4
 80162f4:	f001 f824 	bl	8017340 <_Bfree>
 80162f8:	ee08 8a10 	vmov	s16, r8
 80162fc:	9b07      	ldr	r3, [sp, #28]
 80162fe:	1b9a      	subs	r2, r3, r6
 8016300:	d006      	beq.n	8016310 <_dtoa_r+0x7a0>
 8016302:	ee18 1a10 	vmov	r1, s16
 8016306:	4620      	mov	r0, r4
 8016308:	f001 f9dc 	bl	80176c4 <__pow5mult>
 801630c:	ee08 0a10 	vmov	s16, r0
 8016310:	2101      	movs	r1, #1
 8016312:	4620      	mov	r0, r4
 8016314:	f001 f916 	bl	8017544 <__i2b>
 8016318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801631a:	2b00      	cmp	r3, #0
 801631c:	4606      	mov	r6, r0
 801631e:	f340 8088 	ble.w	8016432 <_dtoa_r+0x8c2>
 8016322:	461a      	mov	r2, r3
 8016324:	4601      	mov	r1, r0
 8016326:	4620      	mov	r0, r4
 8016328:	f001 f9cc 	bl	80176c4 <__pow5mult>
 801632c:	9b06      	ldr	r3, [sp, #24]
 801632e:	2b01      	cmp	r3, #1
 8016330:	4606      	mov	r6, r0
 8016332:	f340 8081 	ble.w	8016438 <_dtoa_r+0x8c8>
 8016336:	f04f 0800 	mov.w	r8, #0
 801633a:	6933      	ldr	r3, [r6, #16]
 801633c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016340:	6918      	ldr	r0, [r3, #16]
 8016342:	f001 f8af 	bl	80174a4 <__hi0bits>
 8016346:	f1c0 0020 	rsb	r0, r0, #32
 801634a:	9b05      	ldr	r3, [sp, #20]
 801634c:	4418      	add	r0, r3
 801634e:	f010 001f 	ands.w	r0, r0, #31
 8016352:	f000 8092 	beq.w	801647a <_dtoa_r+0x90a>
 8016356:	f1c0 0320 	rsb	r3, r0, #32
 801635a:	2b04      	cmp	r3, #4
 801635c:	f340 808a 	ble.w	8016474 <_dtoa_r+0x904>
 8016360:	f1c0 001c 	rsb	r0, r0, #28
 8016364:	9b04      	ldr	r3, [sp, #16]
 8016366:	4403      	add	r3, r0
 8016368:	9304      	str	r3, [sp, #16]
 801636a:	9b05      	ldr	r3, [sp, #20]
 801636c:	4403      	add	r3, r0
 801636e:	4405      	add	r5, r0
 8016370:	9305      	str	r3, [sp, #20]
 8016372:	9b04      	ldr	r3, [sp, #16]
 8016374:	2b00      	cmp	r3, #0
 8016376:	dd07      	ble.n	8016388 <_dtoa_r+0x818>
 8016378:	ee18 1a10 	vmov	r1, s16
 801637c:	461a      	mov	r2, r3
 801637e:	4620      	mov	r0, r4
 8016380:	f001 f9fa 	bl	8017778 <__lshift>
 8016384:	ee08 0a10 	vmov	s16, r0
 8016388:	9b05      	ldr	r3, [sp, #20]
 801638a:	2b00      	cmp	r3, #0
 801638c:	dd05      	ble.n	801639a <_dtoa_r+0x82a>
 801638e:	4631      	mov	r1, r6
 8016390:	461a      	mov	r2, r3
 8016392:	4620      	mov	r0, r4
 8016394:	f001 f9f0 	bl	8017778 <__lshift>
 8016398:	4606      	mov	r6, r0
 801639a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801639c:	2b00      	cmp	r3, #0
 801639e:	d06e      	beq.n	801647e <_dtoa_r+0x90e>
 80163a0:	ee18 0a10 	vmov	r0, s16
 80163a4:	4631      	mov	r1, r6
 80163a6:	f001 fa57 	bl	8017858 <__mcmp>
 80163aa:	2800      	cmp	r0, #0
 80163ac:	da67      	bge.n	801647e <_dtoa_r+0x90e>
 80163ae:	9b00      	ldr	r3, [sp, #0]
 80163b0:	3b01      	subs	r3, #1
 80163b2:	ee18 1a10 	vmov	r1, s16
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	220a      	movs	r2, #10
 80163ba:	2300      	movs	r3, #0
 80163bc:	4620      	mov	r0, r4
 80163be:	f000 ffe1 	bl	8017384 <__multadd>
 80163c2:	9b08      	ldr	r3, [sp, #32]
 80163c4:	ee08 0a10 	vmov	s16, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	f000 81b1 	beq.w	8016730 <_dtoa_r+0xbc0>
 80163ce:	2300      	movs	r3, #0
 80163d0:	4639      	mov	r1, r7
 80163d2:	220a      	movs	r2, #10
 80163d4:	4620      	mov	r0, r4
 80163d6:	f000 ffd5 	bl	8017384 <__multadd>
 80163da:	9b02      	ldr	r3, [sp, #8]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	4607      	mov	r7, r0
 80163e0:	f300 808e 	bgt.w	8016500 <_dtoa_r+0x990>
 80163e4:	9b06      	ldr	r3, [sp, #24]
 80163e6:	2b02      	cmp	r3, #2
 80163e8:	dc51      	bgt.n	801648e <_dtoa_r+0x91e>
 80163ea:	e089      	b.n	8016500 <_dtoa_r+0x990>
 80163ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80163f2:	e74b      	b.n	801628c <_dtoa_r+0x71c>
 80163f4:	9b03      	ldr	r3, [sp, #12]
 80163f6:	1e5e      	subs	r6, r3, #1
 80163f8:	9b07      	ldr	r3, [sp, #28]
 80163fa:	42b3      	cmp	r3, r6
 80163fc:	bfbf      	itttt	lt
 80163fe:	9b07      	ldrlt	r3, [sp, #28]
 8016400:	9607      	strlt	r6, [sp, #28]
 8016402:	1af2      	sublt	r2, r6, r3
 8016404:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016406:	bfb6      	itet	lt
 8016408:	189b      	addlt	r3, r3, r2
 801640a:	1b9e      	subge	r6, r3, r6
 801640c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801640e:	9b03      	ldr	r3, [sp, #12]
 8016410:	bfb8      	it	lt
 8016412:	2600      	movlt	r6, #0
 8016414:	2b00      	cmp	r3, #0
 8016416:	bfb7      	itett	lt
 8016418:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801641c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016420:	1a9d      	sublt	r5, r3, r2
 8016422:	2300      	movlt	r3, #0
 8016424:	e734      	b.n	8016290 <_dtoa_r+0x720>
 8016426:	9e07      	ldr	r6, [sp, #28]
 8016428:	9d04      	ldr	r5, [sp, #16]
 801642a:	9f08      	ldr	r7, [sp, #32]
 801642c:	e73b      	b.n	80162a6 <_dtoa_r+0x736>
 801642e:	9a07      	ldr	r2, [sp, #28]
 8016430:	e767      	b.n	8016302 <_dtoa_r+0x792>
 8016432:	9b06      	ldr	r3, [sp, #24]
 8016434:	2b01      	cmp	r3, #1
 8016436:	dc18      	bgt.n	801646a <_dtoa_r+0x8fa>
 8016438:	f1ba 0f00 	cmp.w	sl, #0
 801643c:	d115      	bne.n	801646a <_dtoa_r+0x8fa>
 801643e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016442:	b993      	cbnz	r3, 801646a <_dtoa_r+0x8fa>
 8016444:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016448:	0d1b      	lsrs	r3, r3, #20
 801644a:	051b      	lsls	r3, r3, #20
 801644c:	b183      	cbz	r3, 8016470 <_dtoa_r+0x900>
 801644e:	9b04      	ldr	r3, [sp, #16]
 8016450:	3301      	adds	r3, #1
 8016452:	9304      	str	r3, [sp, #16]
 8016454:	9b05      	ldr	r3, [sp, #20]
 8016456:	3301      	adds	r3, #1
 8016458:	9305      	str	r3, [sp, #20]
 801645a:	f04f 0801 	mov.w	r8, #1
 801645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016460:	2b00      	cmp	r3, #0
 8016462:	f47f af6a 	bne.w	801633a <_dtoa_r+0x7ca>
 8016466:	2001      	movs	r0, #1
 8016468:	e76f      	b.n	801634a <_dtoa_r+0x7da>
 801646a:	f04f 0800 	mov.w	r8, #0
 801646e:	e7f6      	b.n	801645e <_dtoa_r+0x8ee>
 8016470:	4698      	mov	r8, r3
 8016472:	e7f4      	b.n	801645e <_dtoa_r+0x8ee>
 8016474:	f43f af7d 	beq.w	8016372 <_dtoa_r+0x802>
 8016478:	4618      	mov	r0, r3
 801647a:	301c      	adds	r0, #28
 801647c:	e772      	b.n	8016364 <_dtoa_r+0x7f4>
 801647e:	9b03      	ldr	r3, [sp, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	dc37      	bgt.n	80164f4 <_dtoa_r+0x984>
 8016484:	9b06      	ldr	r3, [sp, #24]
 8016486:	2b02      	cmp	r3, #2
 8016488:	dd34      	ble.n	80164f4 <_dtoa_r+0x984>
 801648a:	9b03      	ldr	r3, [sp, #12]
 801648c:	9302      	str	r3, [sp, #8]
 801648e:	9b02      	ldr	r3, [sp, #8]
 8016490:	b96b      	cbnz	r3, 80164ae <_dtoa_r+0x93e>
 8016492:	4631      	mov	r1, r6
 8016494:	2205      	movs	r2, #5
 8016496:	4620      	mov	r0, r4
 8016498:	f000 ff74 	bl	8017384 <__multadd>
 801649c:	4601      	mov	r1, r0
 801649e:	4606      	mov	r6, r0
 80164a0:	ee18 0a10 	vmov	r0, s16
 80164a4:	f001 f9d8 	bl	8017858 <__mcmp>
 80164a8:	2800      	cmp	r0, #0
 80164aa:	f73f adbb 	bgt.w	8016024 <_dtoa_r+0x4b4>
 80164ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164b0:	9d01      	ldr	r5, [sp, #4]
 80164b2:	43db      	mvns	r3, r3
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	f04f 0800 	mov.w	r8, #0
 80164ba:	4631      	mov	r1, r6
 80164bc:	4620      	mov	r0, r4
 80164be:	f000 ff3f 	bl	8017340 <_Bfree>
 80164c2:	2f00      	cmp	r7, #0
 80164c4:	f43f aea4 	beq.w	8016210 <_dtoa_r+0x6a0>
 80164c8:	f1b8 0f00 	cmp.w	r8, #0
 80164cc:	d005      	beq.n	80164da <_dtoa_r+0x96a>
 80164ce:	45b8      	cmp	r8, r7
 80164d0:	d003      	beq.n	80164da <_dtoa_r+0x96a>
 80164d2:	4641      	mov	r1, r8
 80164d4:	4620      	mov	r0, r4
 80164d6:	f000 ff33 	bl	8017340 <_Bfree>
 80164da:	4639      	mov	r1, r7
 80164dc:	4620      	mov	r0, r4
 80164de:	f000 ff2f 	bl	8017340 <_Bfree>
 80164e2:	e695      	b.n	8016210 <_dtoa_r+0x6a0>
 80164e4:	2600      	movs	r6, #0
 80164e6:	4637      	mov	r7, r6
 80164e8:	e7e1      	b.n	80164ae <_dtoa_r+0x93e>
 80164ea:	9700      	str	r7, [sp, #0]
 80164ec:	4637      	mov	r7, r6
 80164ee:	e599      	b.n	8016024 <_dtoa_r+0x4b4>
 80164f0:	40240000 	.word	0x40240000
 80164f4:	9b08      	ldr	r3, [sp, #32]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	f000 80ca 	beq.w	8016690 <_dtoa_r+0xb20>
 80164fc:	9b03      	ldr	r3, [sp, #12]
 80164fe:	9302      	str	r3, [sp, #8]
 8016500:	2d00      	cmp	r5, #0
 8016502:	dd05      	ble.n	8016510 <_dtoa_r+0x9a0>
 8016504:	4639      	mov	r1, r7
 8016506:	462a      	mov	r2, r5
 8016508:	4620      	mov	r0, r4
 801650a:	f001 f935 	bl	8017778 <__lshift>
 801650e:	4607      	mov	r7, r0
 8016510:	f1b8 0f00 	cmp.w	r8, #0
 8016514:	d05b      	beq.n	80165ce <_dtoa_r+0xa5e>
 8016516:	6879      	ldr	r1, [r7, #4]
 8016518:	4620      	mov	r0, r4
 801651a:	f000 fed1 	bl	80172c0 <_Balloc>
 801651e:	4605      	mov	r5, r0
 8016520:	b928      	cbnz	r0, 801652e <_dtoa_r+0x9be>
 8016522:	4b87      	ldr	r3, [pc, #540]	; (8016740 <_dtoa_r+0xbd0>)
 8016524:	4602      	mov	r2, r0
 8016526:	f240 21ea 	movw	r1, #746	; 0x2ea
 801652a:	f7ff bb3b 	b.w	8015ba4 <_dtoa_r+0x34>
 801652e:	693a      	ldr	r2, [r7, #16]
 8016530:	3202      	adds	r2, #2
 8016532:	0092      	lsls	r2, r2, #2
 8016534:	f107 010c 	add.w	r1, r7, #12
 8016538:	300c      	adds	r0, #12
 801653a:	f000 feb3 	bl	80172a4 <memcpy>
 801653e:	2201      	movs	r2, #1
 8016540:	4629      	mov	r1, r5
 8016542:	4620      	mov	r0, r4
 8016544:	f001 f918 	bl	8017778 <__lshift>
 8016548:	9b01      	ldr	r3, [sp, #4]
 801654a:	f103 0901 	add.w	r9, r3, #1
 801654e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016552:	4413      	add	r3, r2
 8016554:	9305      	str	r3, [sp, #20]
 8016556:	f00a 0301 	and.w	r3, sl, #1
 801655a:	46b8      	mov	r8, r7
 801655c:	9304      	str	r3, [sp, #16]
 801655e:	4607      	mov	r7, r0
 8016560:	4631      	mov	r1, r6
 8016562:	ee18 0a10 	vmov	r0, s16
 8016566:	f7ff fa77 	bl	8015a58 <quorem>
 801656a:	4641      	mov	r1, r8
 801656c:	9002      	str	r0, [sp, #8]
 801656e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016572:	ee18 0a10 	vmov	r0, s16
 8016576:	f001 f96f 	bl	8017858 <__mcmp>
 801657a:	463a      	mov	r2, r7
 801657c:	9003      	str	r0, [sp, #12]
 801657e:	4631      	mov	r1, r6
 8016580:	4620      	mov	r0, r4
 8016582:	f001 f985 	bl	8017890 <__mdiff>
 8016586:	68c2      	ldr	r2, [r0, #12]
 8016588:	f109 3bff 	add.w	fp, r9, #4294967295
 801658c:	4605      	mov	r5, r0
 801658e:	bb02      	cbnz	r2, 80165d2 <_dtoa_r+0xa62>
 8016590:	4601      	mov	r1, r0
 8016592:	ee18 0a10 	vmov	r0, s16
 8016596:	f001 f95f 	bl	8017858 <__mcmp>
 801659a:	4602      	mov	r2, r0
 801659c:	4629      	mov	r1, r5
 801659e:	4620      	mov	r0, r4
 80165a0:	9207      	str	r2, [sp, #28]
 80165a2:	f000 fecd 	bl	8017340 <_Bfree>
 80165a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80165aa:	ea43 0102 	orr.w	r1, r3, r2
 80165ae:	9b04      	ldr	r3, [sp, #16]
 80165b0:	430b      	orrs	r3, r1
 80165b2:	464d      	mov	r5, r9
 80165b4:	d10f      	bne.n	80165d6 <_dtoa_r+0xa66>
 80165b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80165ba:	d02a      	beq.n	8016612 <_dtoa_r+0xaa2>
 80165bc:	9b03      	ldr	r3, [sp, #12]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	dd02      	ble.n	80165c8 <_dtoa_r+0xa58>
 80165c2:	9b02      	ldr	r3, [sp, #8]
 80165c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80165c8:	f88b a000 	strb.w	sl, [fp]
 80165cc:	e775      	b.n	80164ba <_dtoa_r+0x94a>
 80165ce:	4638      	mov	r0, r7
 80165d0:	e7ba      	b.n	8016548 <_dtoa_r+0x9d8>
 80165d2:	2201      	movs	r2, #1
 80165d4:	e7e2      	b.n	801659c <_dtoa_r+0xa2c>
 80165d6:	9b03      	ldr	r3, [sp, #12]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	db04      	blt.n	80165e6 <_dtoa_r+0xa76>
 80165dc:	9906      	ldr	r1, [sp, #24]
 80165de:	430b      	orrs	r3, r1
 80165e0:	9904      	ldr	r1, [sp, #16]
 80165e2:	430b      	orrs	r3, r1
 80165e4:	d122      	bne.n	801662c <_dtoa_r+0xabc>
 80165e6:	2a00      	cmp	r2, #0
 80165e8:	ddee      	ble.n	80165c8 <_dtoa_r+0xa58>
 80165ea:	ee18 1a10 	vmov	r1, s16
 80165ee:	2201      	movs	r2, #1
 80165f0:	4620      	mov	r0, r4
 80165f2:	f001 f8c1 	bl	8017778 <__lshift>
 80165f6:	4631      	mov	r1, r6
 80165f8:	ee08 0a10 	vmov	s16, r0
 80165fc:	f001 f92c 	bl	8017858 <__mcmp>
 8016600:	2800      	cmp	r0, #0
 8016602:	dc03      	bgt.n	801660c <_dtoa_r+0xa9c>
 8016604:	d1e0      	bne.n	80165c8 <_dtoa_r+0xa58>
 8016606:	f01a 0f01 	tst.w	sl, #1
 801660a:	d0dd      	beq.n	80165c8 <_dtoa_r+0xa58>
 801660c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016610:	d1d7      	bne.n	80165c2 <_dtoa_r+0xa52>
 8016612:	2339      	movs	r3, #57	; 0x39
 8016614:	f88b 3000 	strb.w	r3, [fp]
 8016618:	462b      	mov	r3, r5
 801661a:	461d      	mov	r5, r3
 801661c:	3b01      	subs	r3, #1
 801661e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016622:	2a39      	cmp	r2, #57	; 0x39
 8016624:	d071      	beq.n	801670a <_dtoa_r+0xb9a>
 8016626:	3201      	adds	r2, #1
 8016628:	701a      	strb	r2, [r3, #0]
 801662a:	e746      	b.n	80164ba <_dtoa_r+0x94a>
 801662c:	2a00      	cmp	r2, #0
 801662e:	dd07      	ble.n	8016640 <_dtoa_r+0xad0>
 8016630:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016634:	d0ed      	beq.n	8016612 <_dtoa_r+0xaa2>
 8016636:	f10a 0301 	add.w	r3, sl, #1
 801663a:	f88b 3000 	strb.w	r3, [fp]
 801663e:	e73c      	b.n	80164ba <_dtoa_r+0x94a>
 8016640:	9b05      	ldr	r3, [sp, #20]
 8016642:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016646:	4599      	cmp	r9, r3
 8016648:	d047      	beq.n	80166da <_dtoa_r+0xb6a>
 801664a:	ee18 1a10 	vmov	r1, s16
 801664e:	2300      	movs	r3, #0
 8016650:	220a      	movs	r2, #10
 8016652:	4620      	mov	r0, r4
 8016654:	f000 fe96 	bl	8017384 <__multadd>
 8016658:	45b8      	cmp	r8, r7
 801665a:	ee08 0a10 	vmov	s16, r0
 801665e:	f04f 0300 	mov.w	r3, #0
 8016662:	f04f 020a 	mov.w	r2, #10
 8016666:	4641      	mov	r1, r8
 8016668:	4620      	mov	r0, r4
 801666a:	d106      	bne.n	801667a <_dtoa_r+0xb0a>
 801666c:	f000 fe8a 	bl	8017384 <__multadd>
 8016670:	4680      	mov	r8, r0
 8016672:	4607      	mov	r7, r0
 8016674:	f109 0901 	add.w	r9, r9, #1
 8016678:	e772      	b.n	8016560 <_dtoa_r+0x9f0>
 801667a:	f000 fe83 	bl	8017384 <__multadd>
 801667e:	4639      	mov	r1, r7
 8016680:	4680      	mov	r8, r0
 8016682:	2300      	movs	r3, #0
 8016684:	220a      	movs	r2, #10
 8016686:	4620      	mov	r0, r4
 8016688:	f000 fe7c 	bl	8017384 <__multadd>
 801668c:	4607      	mov	r7, r0
 801668e:	e7f1      	b.n	8016674 <_dtoa_r+0xb04>
 8016690:	9b03      	ldr	r3, [sp, #12]
 8016692:	9302      	str	r3, [sp, #8]
 8016694:	9d01      	ldr	r5, [sp, #4]
 8016696:	ee18 0a10 	vmov	r0, s16
 801669a:	4631      	mov	r1, r6
 801669c:	f7ff f9dc 	bl	8015a58 <quorem>
 80166a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80166a4:	9b01      	ldr	r3, [sp, #4]
 80166a6:	f805 ab01 	strb.w	sl, [r5], #1
 80166aa:	1aea      	subs	r2, r5, r3
 80166ac:	9b02      	ldr	r3, [sp, #8]
 80166ae:	4293      	cmp	r3, r2
 80166b0:	dd09      	ble.n	80166c6 <_dtoa_r+0xb56>
 80166b2:	ee18 1a10 	vmov	r1, s16
 80166b6:	2300      	movs	r3, #0
 80166b8:	220a      	movs	r2, #10
 80166ba:	4620      	mov	r0, r4
 80166bc:	f000 fe62 	bl	8017384 <__multadd>
 80166c0:	ee08 0a10 	vmov	s16, r0
 80166c4:	e7e7      	b.n	8016696 <_dtoa_r+0xb26>
 80166c6:	9b02      	ldr	r3, [sp, #8]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	bfc8      	it	gt
 80166cc:	461d      	movgt	r5, r3
 80166ce:	9b01      	ldr	r3, [sp, #4]
 80166d0:	bfd8      	it	le
 80166d2:	2501      	movle	r5, #1
 80166d4:	441d      	add	r5, r3
 80166d6:	f04f 0800 	mov.w	r8, #0
 80166da:	ee18 1a10 	vmov	r1, s16
 80166de:	2201      	movs	r2, #1
 80166e0:	4620      	mov	r0, r4
 80166e2:	f001 f849 	bl	8017778 <__lshift>
 80166e6:	4631      	mov	r1, r6
 80166e8:	ee08 0a10 	vmov	s16, r0
 80166ec:	f001 f8b4 	bl	8017858 <__mcmp>
 80166f0:	2800      	cmp	r0, #0
 80166f2:	dc91      	bgt.n	8016618 <_dtoa_r+0xaa8>
 80166f4:	d102      	bne.n	80166fc <_dtoa_r+0xb8c>
 80166f6:	f01a 0f01 	tst.w	sl, #1
 80166fa:	d18d      	bne.n	8016618 <_dtoa_r+0xaa8>
 80166fc:	462b      	mov	r3, r5
 80166fe:	461d      	mov	r5, r3
 8016700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016704:	2a30      	cmp	r2, #48	; 0x30
 8016706:	d0fa      	beq.n	80166fe <_dtoa_r+0xb8e>
 8016708:	e6d7      	b.n	80164ba <_dtoa_r+0x94a>
 801670a:	9a01      	ldr	r2, [sp, #4]
 801670c:	429a      	cmp	r2, r3
 801670e:	d184      	bne.n	801661a <_dtoa_r+0xaaa>
 8016710:	9b00      	ldr	r3, [sp, #0]
 8016712:	3301      	adds	r3, #1
 8016714:	9300      	str	r3, [sp, #0]
 8016716:	2331      	movs	r3, #49	; 0x31
 8016718:	7013      	strb	r3, [r2, #0]
 801671a:	e6ce      	b.n	80164ba <_dtoa_r+0x94a>
 801671c:	4b09      	ldr	r3, [pc, #36]	; (8016744 <_dtoa_r+0xbd4>)
 801671e:	f7ff ba95 	b.w	8015c4c <_dtoa_r+0xdc>
 8016722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016724:	2b00      	cmp	r3, #0
 8016726:	f47f aa6e 	bne.w	8015c06 <_dtoa_r+0x96>
 801672a:	4b07      	ldr	r3, [pc, #28]	; (8016748 <_dtoa_r+0xbd8>)
 801672c:	f7ff ba8e 	b.w	8015c4c <_dtoa_r+0xdc>
 8016730:	9b02      	ldr	r3, [sp, #8]
 8016732:	2b00      	cmp	r3, #0
 8016734:	dcae      	bgt.n	8016694 <_dtoa_r+0xb24>
 8016736:	9b06      	ldr	r3, [sp, #24]
 8016738:	2b02      	cmp	r3, #2
 801673a:	f73f aea8 	bgt.w	801648e <_dtoa_r+0x91e>
 801673e:	e7a9      	b.n	8016694 <_dtoa_r+0xb24>
 8016740:	0801df38 	.word	0x0801df38
 8016744:	0801dd38 	.word	0x0801dd38
 8016748:	0801deb9 	.word	0x0801deb9

0801674c <__sflush_r>:
 801674c:	898a      	ldrh	r2, [r1, #12]
 801674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016752:	4605      	mov	r5, r0
 8016754:	0710      	lsls	r0, r2, #28
 8016756:	460c      	mov	r4, r1
 8016758:	d458      	bmi.n	801680c <__sflush_r+0xc0>
 801675a:	684b      	ldr	r3, [r1, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	dc05      	bgt.n	801676c <__sflush_r+0x20>
 8016760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016762:	2b00      	cmp	r3, #0
 8016764:	dc02      	bgt.n	801676c <__sflush_r+0x20>
 8016766:	2000      	movs	r0, #0
 8016768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801676c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801676e:	2e00      	cmp	r6, #0
 8016770:	d0f9      	beq.n	8016766 <__sflush_r+0x1a>
 8016772:	2300      	movs	r3, #0
 8016774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016778:	682f      	ldr	r7, [r5, #0]
 801677a:	602b      	str	r3, [r5, #0]
 801677c:	d032      	beq.n	80167e4 <__sflush_r+0x98>
 801677e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016780:	89a3      	ldrh	r3, [r4, #12]
 8016782:	075a      	lsls	r2, r3, #29
 8016784:	d505      	bpl.n	8016792 <__sflush_r+0x46>
 8016786:	6863      	ldr	r3, [r4, #4]
 8016788:	1ac0      	subs	r0, r0, r3
 801678a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801678c:	b10b      	cbz	r3, 8016792 <__sflush_r+0x46>
 801678e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016790:	1ac0      	subs	r0, r0, r3
 8016792:	2300      	movs	r3, #0
 8016794:	4602      	mov	r2, r0
 8016796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016798:	6a21      	ldr	r1, [r4, #32]
 801679a:	4628      	mov	r0, r5
 801679c:	47b0      	blx	r6
 801679e:	1c43      	adds	r3, r0, #1
 80167a0:	89a3      	ldrh	r3, [r4, #12]
 80167a2:	d106      	bne.n	80167b2 <__sflush_r+0x66>
 80167a4:	6829      	ldr	r1, [r5, #0]
 80167a6:	291d      	cmp	r1, #29
 80167a8:	d82c      	bhi.n	8016804 <__sflush_r+0xb8>
 80167aa:	4a2a      	ldr	r2, [pc, #168]	; (8016854 <__sflush_r+0x108>)
 80167ac:	40ca      	lsrs	r2, r1
 80167ae:	07d6      	lsls	r6, r2, #31
 80167b0:	d528      	bpl.n	8016804 <__sflush_r+0xb8>
 80167b2:	2200      	movs	r2, #0
 80167b4:	6062      	str	r2, [r4, #4]
 80167b6:	04d9      	lsls	r1, r3, #19
 80167b8:	6922      	ldr	r2, [r4, #16]
 80167ba:	6022      	str	r2, [r4, #0]
 80167bc:	d504      	bpl.n	80167c8 <__sflush_r+0x7c>
 80167be:	1c42      	adds	r2, r0, #1
 80167c0:	d101      	bne.n	80167c6 <__sflush_r+0x7a>
 80167c2:	682b      	ldr	r3, [r5, #0]
 80167c4:	b903      	cbnz	r3, 80167c8 <__sflush_r+0x7c>
 80167c6:	6560      	str	r0, [r4, #84]	; 0x54
 80167c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167ca:	602f      	str	r7, [r5, #0]
 80167cc:	2900      	cmp	r1, #0
 80167ce:	d0ca      	beq.n	8016766 <__sflush_r+0x1a>
 80167d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167d4:	4299      	cmp	r1, r3
 80167d6:	d002      	beq.n	80167de <__sflush_r+0x92>
 80167d8:	4628      	mov	r0, r5
 80167da:	f001 fa49 	bl	8017c70 <_free_r>
 80167de:	2000      	movs	r0, #0
 80167e0:	6360      	str	r0, [r4, #52]	; 0x34
 80167e2:	e7c1      	b.n	8016768 <__sflush_r+0x1c>
 80167e4:	6a21      	ldr	r1, [r4, #32]
 80167e6:	2301      	movs	r3, #1
 80167e8:	4628      	mov	r0, r5
 80167ea:	47b0      	blx	r6
 80167ec:	1c41      	adds	r1, r0, #1
 80167ee:	d1c7      	bne.n	8016780 <__sflush_r+0x34>
 80167f0:	682b      	ldr	r3, [r5, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d0c4      	beq.n	8016780 <__sflush_r+0x34>
 80167f6:	2b1d      	cmp	r3, #29
 80167f8:	d001      	beq.n	80167fe <__sflush_r+0xb2>
 80167fa:	2b16      	cmp	r3, #22
 80167fc:	d101      	bne.n	8016802 <__sflush_r+0xb6>
 80167fe:	602f      	str	r7, [r5, #0]
 8016800:	e7b1      	b.n	8016766 <__sflush_r+0x1a>
 8016802:	89a3      	ldrh	r3, [r4, #12]
 8016804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016808:	81a3      	strh	r3, [r4, #12]
 801680a:	e7ad      	b.n	8016768 <__sflush_r+0x1c>
 801680c:	690f      	ldr	r7, [r1, #16]
 801680e:	2f00      	cmp	r7, #0
 8016810:	d0a9      	beq.n	8016766 <__sflush_r+0x1a>
 8016812:	0793      	lsls	r3, r2, #30
 8016814:	680e      	ldr	r6, [r1, #0]
 8016816:	bf08      	it	eq
 8016818:	694b      	ldreq	r3, [r1, #20]
 801681a:	600f      	str	r7, [r1, #0]
 801681c:	bf18      	it	ne
 801681e:	2300      	movne	r3, #0
 8016820:	eba6 0807 	sub.w	r8, r6, r7
 8016824:	608b      	str	r3, [r1, #8]
 8016826:	f1b8 0f00 	cmp.w	r8, #0
 801682a:	dd9c      	ble.n	8016766 <__sflush_r+0x1a>
 801682c:	6a21      	ldr	r1, [r4, #32]
 801682e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016830:	4643      	mov	r3, r8
 8016832:	463a      	mov	r2, r7
 8016834:	4628      	mov	r0, r5
 8016836:	47b0      	blx	r6
 8016838:	2800      	cmp	r0, #0
 801683a:	dc06      	bgt.n	801684a <__sflush_r+0xfe>
 801683c:	89a3      	ldrh	r3, [r4, #12]
 801683e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016842:	81a3      	strh	r3, [r4, #12]
 8016844:	f04f 30ff 	mov.w	r0, #4294967295
 8016848:	e78e      	b.n	8016768 <__sflush_r+0x1c>
 801684a:	4407      	add	r7, r0
 801684c:	eba8 0800 	sub.w	r8, r8, r0
 8016850:	e7e9      	b.n	8016826 <__sflush_r+0xda>
 8016852:	bf00      	nop
 8016854:	20400001 	.word	0x20400001

08016858 <_fflush_r>:
 8016858:	b538      	push	{r3, r4, r5, lr}
 801685a:	690b      	ldr	r3, [r1, #16]
 801685c:	4605      	mov	r5, r0
 801685e:	460c      	mov	r4, r1
 8016860:	b913      	cbnz	r3, 8016868 <_fflush_r+0x10>
 8016862:	2500      	movs	r5, #0
 8016864:	4628      	mov	r0, r5
 8016866:	bd38      	pop	{r3, r4, r5, pc}
 8016868:	b118      	cbz	r0, 8016872 <_fflush_r+0x1a>
 801686a:	6983      	ldr	r3, [r0, #24]
 801686c:	b90b      	cbnz	r3, 8016872 <_fflush_r+0x1a>
 801686e:	f000 f887 	bl	8016980 <__sinit>
 8016872:	4b14      	ldr	r3, [pc, #80]	; (80168c4 <_fflush_r+0x6c>)
 8016874:	429c      	cmp	r4, r3
 8016876:	d11b      	bne.n	80168b0 <_fflush_r+0x58>
 8016878:	686c      	ldr	r4, [r5, #4]
 801687a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d0ef      	beq.n	8016862 <_fflush_r+0xa>
 8016882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016884:	07d0      	lsls	r0, r2, #31
 8016886:	d404      	bmi.n	8016892 <_fflush_r+0x3a>
 8016888:	0599      	lsls	r1, r3, #22
 801688a:	d402      	bmi.n	8016892 <_fflush_r+0x3a>
 801688c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801688e:	f000 fc88 	bl	80171a2 <__retarget_lock_acquire_recursive>
 8016892:	4628      	mov	r0, r5
 8016894:	4621      	mov	r1, r4
 8016896:	f7ff ff59 	bl	801674c <__sflush_r>
 801689a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801689c:	07da      	lsls	r2, r3, #31
 801689e:	4605      	mov	r5, r0
 80168a0:	d4e0      	bmi.n	8016864 <_fflush_r+0xc>
 80168a2:	89a3      	ldrh	r3, [r4, #12]
 80168a4:	059b      	lsls	r3, r3, #22
 80168a6:	d4dd      	bmi.n	8016864 <_fflush_r+0xc>
 80168a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168aa:	f000 fc7b 	bl	80171a4 <__retarget_lock_release_recursive>
 80168ae:	e7d9      	b.n	8016864 <_fflush_r+0xc>
 80168b0:	4b05      	ldr	r3, [pc, #20]	; (80168c8 <_fflush_r+0x70>)
 80168b2:	429c      	cmp	r4, r3
 80168b4:	d101      	bne.n	80168ba <_fflush_r+0x62>
 80168b6:	68ac      	ldr	r4, [r5, #8]
 80168b8:	e7df      	b.n	801687a <_fflush_r+0x22>
 80168ba:	4b04      	ldr	r3, [pc, #16]	; (80168cc <_fflush_r+0x74>)
 80168bc:	429c      	cmp	r4, r3
 80168be:	bf08      	it	eq
 80168c0:	68ec      	ldreq	r4, [r5, #12]
 80168c2:	e7da      	b.n	801687a <_fflush_r+0x22>
 80168c4:	0801df6c 	.word	0x0801df6c
 80168c8:	0801df8c 	.word	0x0801df8c
 80168cc:	0801df4c 	.word	0x0801df4c

080168d0 <std>:
 80168d0:	2300      	movs	r3, #0
 80168d2:	b510      	push	{r4, lr}
 80168d4:	4604      	mov	r4, r0
 80168d6:	e9c0 3300 	strd	r3, r3, [r0]
 80168da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168de:	6083      	str	r3, [r0, #8]
 80168e0:	8181      	strh	r1, [r0, #12]
 80168e2:	6643      	str	r3, [r0, #100]	; 0x64
 80168e4:	81c2      	strh	r2, [r0, #14]
 80168e6:	6183      	str	r3, [r0, #24]
 80168e8:	4619      	mov	r1, r3
 80168ea:	2208      	movs	r2, #8
 80168ec:	305c      	adds	r0, #92	; 0x5c
 80168ee:	f7fd fa11 	bl	8013d14 <memset>
 80168f2:	4b05      	ldr	r3, [pc, #20]	; (8016908 <std+0x38>)
 80168f4:	6263      	str	r3, [r4, #36]	; 0x24
 80168f6:	4b05      	ldr	r3, [pc, #20]	; (801690c <std+0x3c>)
 80168f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80168fa:	4b05      	ldr	r3, [pc, #20]	; (8016910 <std+0x40>)
 80168fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80168fe:	4b05      	ldr	r3, [pc, #20]	; (8016914 <std+0x44>)
 8016900:	6224      	str	r4, [r4, #32]
 8016902:	6323      	str	r3, [r4, #48]	; 0x30
 8016904:	bd10      	pop	{r4, pc}
 8016906:	bf00      	nop
 8016908:	080183d1 	.word	0x080183d1
 801690c:	080183f3 	.word	0x080183f3
 8016910:	0801842b 	.word	0x0801842b
 8016914:	0801844f 	.word	0x0801844f

08016918 <_cleanup_r>:
 8016918:	4901      	ldr	r1, [pc, #4]	; (8016920 <_cleanup_r+0x8>)
 801691a:	f000 b8af 	b.w	8016a7c <_fwalk_reent>
 801691e:	bf00      	nop
 8016920:	08016859 	.word	0x08016859

08016924 <__sfmoreglue>:
 8016924:	b570      	push	{r4, r5, r6, lr}
 8016926:	2268      	movs	r2, #104	; 0x68
 8016928:	1e4d      	subs	r5, r1, #1
 801692a:	4355      	muls	r5, r2
 801692c:	460e      	mov	r6, r1
 801692e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016932:	f001 fa09 	bl	8017d48 <_malloc_r>
 8016936:	4604      	mov	r4, r0
 8016938:	b140      	cbz	r0, 801694c <__sfmoreglue+0x28>
 801693a:	2100      	movs	r1, #0
 801693c:	e9c0 1600 	strd	r1, r6, [r0]
 8016940:	300c      	adds	r0, #12
 8016942:	60a0      	str	r0, [r4, #8]
 8016944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016948:	f7fd f9e4 	bl	8013d14 <memset>
 801694c:	4620      	mov	r0, r4
 801694e:	bd70      	pop	{r4, r5, r6, pc}

08016950 <__sfp_lock_acquire>:
 8016950:	4801      	ldr	r0, [pc, #4]	; (8016958 <__sfp_lock_acquire+0x8>)
 8016952:	f000 bc26 	b.w	80171a2 <__retarget_lock_acquire_recursive>
 8016956:	bf00      	nop
 8016958:	20007aab 	.word	0x20007aab

0801695c <__sfp_lock_release>:
 801695c:	4801      	ldr	r0, [pc, #4]	; (8016964 <__sfp_lock_release+0x8>)
 801695e:	f000 bc21 	b.w	80171a4 <__retarget_lock_release_recursive>
 8016962:	bf00      	nop
 8016964:	20007aab 	.word	0x20007aab

08016968 <__sinit_lock_acquire>:
 8016968:	4801      	ldr	r0, [pc, #4]	; (8016970 <__sinit_lock_acquire+0x8>)
 801696a:	f000 bc1a 	b.w	80171a2 <__retarget_lock_acquire_recursive>
 801696e:	bf00      	nop
 8016970:	20007aac 	.word	0x20007aac

08016974 <__sinit_lock_release>:
 8016974:	4801      	ldr	r0, [pc, #4]	; (801697c <__sinit_lock_release+0x8>)
 8016976:	f000 bc15 	b.w	80171a4 <__retarget_lock_release_recursive>
 801697a:	bf00      	nop
 801697c:	20007aac 	.word	0x20007aac

08016980 <__sinit>:
 8016980:	b510      	push	{r4, lr}
 8016982:	4604      	mov	r4, r0
 8016984:	f7ff fff0 	bl	8016968 <__sinit_lock_acquire>
 8016988:	69a3      	ldr	r3, [r4, #24]
 801698a:	b11b      	cbz	r3, 8016994 <__sinit+0x14>
 801698c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016990:	f7ff bff0 	b.w	8016974 <__sinit_lock_release>
 8016994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016998:	6523      	str	r3, [r4, #80]	; 0x50
 801699a:	4b13      	ldr	r3, [pc, #76]	; (80169e8 <__sinit+0x68>)
 801699c:	4a13      	ldr	r2, [pc, #76]	; (80169ec <__sinit+0x6c>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80169a2:	42a3      	cmp	r3, r4
 80169a4:	bf04      	itt	eq
 80169a6:	2301      	moveq	r3, #1
 80169a8:	61a3      	streq	r3, [r4, #24]
 80169aa:	4620      	mov	r0, r4
 80169ac:	f000 f820 	bl	80169f0 <__sfp>
 80169b0:	6060      	str	r0, [r4, #4]
 80169b2:	4620      	mov	r0, r4
 80169b4:	f000 f81c 	bl	80169f0 <__sfp>
 80169b8:	60a0      	str	r0, [r4, #8]
 80169ba:	4620      	mov	r0, r4
 80169bc:	f000 f818 	bl	80169f0 <__sfp>
 80169c0:	2200      	movs	r2, #0
 80169c2:	60e0      	str	r0, [r4, #12]
 80169c4:	2104      	movs	r1, #4
 80169c6:	6860      	ldr	r0, [r4, #4]
 80169c8:	f7ff ff82 	bl	80168d0 <std>
 80169cc:	68a0      	ldr	r0, [r4, #8]
 80169ce:	2201      	movs	r2, #1
 80169d0:	2109      	movs	r1, #9
 80169d2:	f7ff ff7d 	bl	80168d0 <std>
 80169d6:	68e0      	ldr	r0, [r4, #12]
 80169d8:	2202      	movs	r2, #2
 80169da:	2112      	movs	r1, #18
 80169dc:	f7ff ff78 	bl	80168d0 <std>
 80169e0:	2301      	movs	r3, #1
 80169e2:	61a3      	str	r3, [r4, #24]
 80169e4:	e7d2      	b.n	801698c <__sinit+0xc>
 80169e6:	bf00      	nop
 80169e8:	0801dd24 	.word	0x0801dd24
 80169ec:	08016919 	.word	0x08016919

080169f0 <__sfp>:
 80169f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f2:	4607      	mov	r7, r0
 80169f4:	f7ff ffac 	bl	8016950 <__sfp_lock_acquire>
 80169f8:	4b1e      	ldr	r3, [pc, #120]	; (8016a74 <__sfp+0x84>)
 80169fa:	681e      	ldr	r6, [r3, #0]
 80169fc:	69b3      	ldr	r3, [r6, #24]
 80169fe:	b913      	cbnz	r3, 8016a06 <__sfp+0x16>
 8016a00:	4630      	mov	r0, r6
 8016a02:	f7ff ffbd 	bl	8016980 <__sinit>
 8016a06:	3648      	adds	r6, #72	; 0x48
 8016a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	d503      	bpl.n	8016a18 <__sfp+0x28>
 8016a10:	6833      	ldr	r3, [r6, #0]
 8016a12:	b30b      	cbz	r3, 8016a58 <__sfp+0x68>
 8016a14:	6836      	ldr	r6, [r6, #0]
 8016a16:	e7f7      	b.n	8016a08 <__sfp+0x18>
 8016a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a1c:	b9d5      	cbnz	r5, 8016a54 <__sfp+0x64>
 8016a1e:	4b16      	ldr	r3, [pc, #88]	; (8016a78 <__sfp+0x88>)
 8016a20:	60e3      	str	r3, [r4, #12]
 8016a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a26:	6665      	str	r5, [r4, #100]	; 0x64
 8016a28:	f000 fbba 	bl	80171a0 <__retarget_lock_init_recursive>
 8016a2c:	f7ff ff96 	bl	801695c <__sfp_lock_release>
 8016a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a38:	6025      	str	r5, [r4, #0]
 8016a3a:	61a5      	str	r5, [r4, #24]
 8016a3c:	2208      	movs	r2, #8
 8016a3e:	4629      	mov	r1, r5
 8016a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a44:	f7fd f966 	bl	8013d14 <memset>
 8016a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a50:	4620      	mov	r0, r4
 8016a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a54:	3468      	adds	r4, #104	; 0x68
 8016a56:	e7d9      	b.n	8016a0c <__sfp+0x1c>
 8016a58:	2104      	movs	r1, #4
 8016a5a:	4638      	mov	r0, r7
 8016a5c:	f7ff ff62 	bl	8016924 <__sfmoreglue>
 8016a60:	4604      	mov	r4, r0
 8016a62:	6030      	str	r0, [r6, #0]
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d1d5      	bne.n	8016a14 <__sfp+0x24>
 8016a68:	f7ff ff78 	bl	801695c <__sfp_lock_release>
 8016a6c:	230c      	movs	r3, #12
 8016a6e:	603b      	str	r3, [r7, #0]
 8016a70:	e7ee      	b.n	8016a50 <__sfp+0x60>
 8016a72:	bf00      	nop
 8016a74:	0801dd24 	.word	0x0801dd24
 8016a78:	ffff0001 	.word	0xffff0001

08016a7c <_fwalk_reent>:
 8016a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a80:	4606      	mov	r6, r0
 8016a82:	4688      	mov	r8, r1
 8016a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a88:	2700      	movs	r7, #0
 8016a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8016a92:	d505      	bpl.n	8016aa0 <_fwalk_reent+0x24>
 8016a94:	6824      	ldr	r4, [r4, #0]
 8016a96:	2c00      	cmp	r4, #0
 8016a98:	d1f7      	bne.n	8016a8a <_fwalk_reent+0xe>
 8016a9a:	4638      	mov	r0, r7
 8016a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016aa0:	89ab      	ldrh	r3, [r5, #12]
 8016aa2:	2b01      	cmp	r3, #1
 8016aa4:	d907      	bls.n	8016ab6 <_fwalk_reent+0x3a>
 8016aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016aaa:	3301      	adds	r3, #1
 8016aac:	d003      	beq.n	8016ab6 <_fwalk_reent+0x3a>
 8016aae:	4629      	mov	r1, r5
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	47c0      	blx	r8
 8016ab4:	4307      	orrs	r7, r0
 8016ab6:	3568      	adds	r5, #104	; 0x68
 8016ab8:	e7e9      	b.n	8016a8e <_fwalk_reent+0x12>

08016aba <rshift>:
 8016aba:	6903      	ldr	r3, [r0, #16]
 8016abc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ac4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016ac8:	f100 0414 	add.w	r4, r0, #20
 8016acc:	dd45      	ble.n	8016b5a <rshift+0xa0>
 8016ace:	f011 011f 	ands.w	r1, r1, #31
 8016ad2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016ad6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016ada:	d10c      	bne.n	8016af6 <rshift+0x3c>
 8016adc:	f100 0710 	add.w	r7, r0, #16
 8016ae0:	4629      	mov	r1, r5
 8016ae2:	42b1      	cmp	r1, r6
 8016ae4:	d334      	bcc.n	8016b50 <rshift+0x96>
 8016ae6:	1a9b      	subs	r3, r3, r2
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	1eea      	subs	r2, r5, #3
 8016aec:	4296      	cmp	r6, r2
 8016aee:	bf38      	it	cc
 8016af0:	2300      	movcc	r3, #0
 8016af2:	4423      	add	r3, r4
 8016af4:	e015      	b.n	8016b22 <rshift+0x68>
 8016af6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016afa:	f1c1 0820 	rsb	r8, r1, #32
 8016afe:	40cf      	lsrs	r7, r1
 8016b00:	f105 0e04 	add.w	lr, r5, #4
 8016b04:	46a1      	mov	r9, r4
 8016b06:	4576      	cmp	r6, lr
 8016b08:	46f4      	mov	ip, lr
 8016b0a:	d815      	bhi.n	8016b38 <rshift+0x7e>
 8016b0c:	1a9a      	subs	r2, r3, r2
 8016b0e:	0092      	lsls	r2, r2, #2
 8016b10:	3a04      	subs	r2, #4
 8016b12:	3501      	adds	r5, #1
 8016b14:	42ae      	cmp	r6, r5
 8016b16:	bf38      	it	cc
 8016b18:	2200      	movcc	r2, #0
 8016b1a:	18a3      	adds	r3, r4, r2
 8016b1c:	50a7      	str	r7, [r4, r2]
 8016b1e:	b107      	cbz	r7, 8016b22 <rshift+0x68>
 8016b20:	3304      	adds	r3, #4
 8016b22:	1b1a      	subs	r2, r3, r4
 8016b24:	42a3      	cmp	r3, r4
 8016b26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016b2a:	bf08      	it	eq
 8016b2c:	2300      	moveq	r3, #0
 8016b2e:	6102      	str	r2, [r0, #16]
 8016b30:	bf08      	it	eq
 8016b32:	6143      	streq	r3, [r0, #20]
 8016b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b38:	f8dc c000 	ldr.w	ip, [ip]
 8016b3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8016b40:	ea4c 0707 	orr.w	r7, ip, r7
 8016b44:	f849 7b04 	str.w	r7, [r9], #4
 8016b48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016b4c:	40cf      	lsrs	r7, r1
 8016b4e:	e7da      	b.n	8016b06 <rshift+0x4c>
 8016b50:	f851 cb04 	ldr.w	ip, [r1], #4
 8016b54:	f847 cf04 	str.w	ip, [r7, #4]!
 8016b58:	e7c3      	b.n	8016ae2 <rshift+0x28>
 8016b5a:	4623      	mov	r3, r4
 8016b5c:	e7e1      	b.n	8016b22 <rshift+0x68>

08016b5e <__hexdig_fun>:
 8016b5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016b62:	2b09      	cmp	r3, #9
 8016b64:	d802      	bhi.n	8016b6c <__hexdig_fun+0xe>
 8016b66:	3820      	subs	r0, #32
 8016b68:	b2c0      	uxtb	r0, r0
 8016b6a:	4770      	bx	lr
 8016b6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016b70:	2b05      	cmp	r3, #5
 8016b72:	d801      	bhi.n	8016b78 <__hexdig_fun+0x1a>
 8016b74:	3847      	subs	r0, #71	; 0x47
 8016b76:	e7f7      	b.n	8016b68 <__hexdig_fun+0xa>
 8016b78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016b7c:	2b05      	cmp	r3, #5
 8016b7e:	d801      	bhi.n	8016b84 <__hexdig_fun+0x26>
 8016b80:	3827      	subs	r0, #39	; 0x27
 8016b82:	e7f1      	b.n	8016b68 <__hexdig_fun+0xa>
 8016b84:	2000      	movs	r0, #0
 8016b86:	4770      	bx	lr

08016b88 <__gethex>:
 8016b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8c:	ed2d 8b02 	vpush	{d8}
 8016b90:	b089      	sub	sp, #36	; 0x24
 8016b92:	ee08 0a10 	vmov	s16, r0
 8016b96:	9304      	str	r3, [sp, #16]
 8016b98:	4bb4      	ldr	r3, [pc, #720]	; (8016e6c <__gethex+0x2e4>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	9301      	str	r3, [sp, #4]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	468b      	mov	fp, r1
 8016ba2:	4690      	mov	r8, r2
 8016ba4:	f7e9 fb14 	bl	80001d0 <strlen>
 8016ba8:	9b01      	ldr	r3, [sp, #4]
 8016baa:	f8db 2000 	ldr.w	r2, [fp]
 8016bae:	4403      	add	r3, r0
 8016bb0:	4682      	mov	sl, r0
 8016bb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016bb6:	9305      	str	r3, [sp, #20]
 8016bb8:	1c93      	adds	r3, r2, #2
 8016bba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016bbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016bc2:	32fe      	adds	r2, #254	; 0xfe
 8016bc4:	18d1      	adds	r1, r2, r3
 8016bc6:	461f      	mov	r7, r3
 8016bc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016bcc:	9100      	str	r1, [sp, #0]
 8016bce:	2830      	cmp	r0, #48	; 0x30
 8016bd0:	d0f8      	beq.n	8016bc4 <__gethex+0x3c>
 8016bd2:	f7ff ffc4 	bl	8016b5e <__hexdig_fun>
 8016bd6:	4604      	mov	r4, r0
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	d13a      	bne.n	8016c52 <__gethex+0xca>
 8016bdc:	9901      	ldr	r1, [sp, #4]
 8016bde:	4652      	mov	r2, sl
 8016be0:	4638      	mov	r0, r7
 8016be2:	f001 fc38 	bl	8018456 <strncmp>
 8016be6:	4605      	mov	r5, r0
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d168      	bne.n	8016cbe <__gethex+0x136>
 8016bec:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016bf0:	eb07 060a 	add.w	r6, r7, sl
 8016bf4:	f7ff ffb3 	bl	8016b5e <__hexdig_fun>
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	d062      	beq.n	8016cc2 <__gethex+0x13a>
 8016bfc:	4633      	mov	r3, r6
 8016bfe:	7818      	ldrb	r0, [r3, #0]
 8016c00:	2830      	cmp	r0, #48	; 0x30
 8016c02:	461f      	mov	r7, r3
 8016c04:	f103 0301 	add.w	r3, r3, #1
 8016c08:	d0f9      	beq.n	8016bfe <__gethex+0x76>
 8016c0a:	f7ff ffa8 	bl	8016b5e <__hexdig_fun>
 8016c0e:	2301      	movs	r3, #1
 8016c10:	fab0 f480 	clz	r4, r0
 8016c14:	0964      	lsrs	r4, r4, #5
 8016c16:	4635      	mov	r5, r6
 8016c18:	9300      	str	r3, [sp, #0]
 8016c1a:	463a      	mov	r2, r7
 8016c1c:	4616      	mov	r6, r2
 8016c1e:	3201      	adds	r2, #1
 8016c20:	7830      	ldrb	r0, [r6, #0]
 8016c22:	f7ff ff9c 	bl	8016b5e <__hexdig_fun>
 8016c26:	2800      	cmp	r0, #0
 8016c28:	d1f8      	bne.n	8016c1c <__gethex+0x94>
 8016c2a:	9901      	ldr	r1, [sp, #4]
 8016c2c:	4652      	mov	r2, sl
 8016c2e:	4630      	mov	r0, r6
 8016c30:	f001 fc11 	bl	8018456 <strncmp>
 8016c34:	b980      	cbnz	r0, 8016c58 <__gethex+0xd0>
 8016c36:	b94d      	cbnz	r5, 8016c4c <__gethex+0xc4>
 8016c38:	eb06 050a 	add.w	r5, r6, sl
 8016c3c:	462a      	mov	r2, r5
 8016c3e:	4616      	mov	r6, r2
 8016c40:	3201      	adds	r2, #1
 8016c42:	7830      	ldrb	r0, [r6, #0]
 8016c44:	f7ff ff8b 	bl	8016b5e <__hexdig_fun>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d1f8      	bne.n	8016c3e <__gethex+0xb6>
 8016c4c:	1bad      	subs	r5, r5, r6
 8016c4e:	00ad      	lsls	r5, r5, #2
 8016c50:	e004      	b.n	8016c5c <__gethex+0xd4>
 8016c52:	2400      	movs	r4, #0
 8016c54:	4625      	mov	r5, r4
 8016c56:	e7e0      	b.n	8016c1a <__gethex+0x92>
 8016c58:	2d00      	cmp	r5, #0
 8016c5a:	d1f7      	bne.n	8016c4c <__gethex+0xc4>
 8016c5c:	7833      	ldrb	r3, [r6, #0]
 8016c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016c62:	2b50      	cmp	r3, #80	; 0x50
 8016c64:	d13b      	bne.n	8016cde <__gethex+0x156>
 8016c66:	7873      	ldrb	r3, [r6, #1]
 8016c68:	2b2b      	cmp	r3, #43	; 0x2b
 8016c6a:	d02c      	beq.n	8016cc6 <__gethex+0x13e>
 8016c6c:	2b2d      	cmp	r3, #45	; 0x2d
 8016c6e:	d02e      	beq.n	8016cce <__gethex+0x146>
 8016c70:	1c71      	adds	r1, r6, #1
 8016c72:	f04f 0900 	mov.w	r9, #0
 8016c76:	7808      	ldrb	r0, [r1, #0]
 8016c78:	f7ff ff71 	bl	8016b5e <__hexdig_fun>
 8016c7c:	1e43      	subs	r3, r0, #1
 8016c7e:	b2db      	uxtb	r3, r3
 8016c80:	2b18      	cmp	r3, #24
 8016c82:	d82c      	bhi.n	8016cde <__gethex+0x156>
 8016c84:	f1a0 0210 	sub.w	r2, r0, #16
 8016c88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016c8c:	f7ff ff67 	bl	8016b5e <__hexdig_fun>
 8016c90:	1e43      	subs	r3, r0, #1
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	2b18      	cmp	r3, #24
 8016c96:	d91d      	bls.n	8016cd4 <__gethex+0x14c>
 8016c98:	f1b9 0f00 	cmp.w	r9, #0
 8016c9c:	d000      	beq.n	8016ca0 <__gethex+0x118>
 8016c9e:	4252      	negs	r2, r2
 8016ca0:	4415      	add	r5, r2
 8016ca2:	f8cb 1000 	str.w	r1, [fp]
 8016ca6:	b1e4      	cbz	r4, 8016ce2 <__gethex+0x15a>
 8016ca8:	9b00      	ldr	r3, [sp, #0]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	bf14      	ite	ne
 8016cae:	2700      	movne	r7, #0
 8016cb0:	2706      	moveq	r7, #6
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	b009      	add	sp, #36	; 0x24
 8016cb6:	ecbd 8b02 	vpop	{d8}
 8016cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cbe:	463e      	mov	r6, r7
 8016cc0:	4625      	mov	r5, r4
 8016cc2:	2401      	movs	r4, #1
 8016cc4:	e7ca      	b.n	8016c5c <__gethex+0xd4>
 8016cc6:	f04f 0900 	mov.w	r9, #0
 8016cca:	1cb1      	adds	r1, r6, #2
 8016ccc:	e7d3      	b.n	8016c76 <__gethex+0xee>
 8016cce:	f04f 0901 	mov.w	r9, #1
 8016cd2:	e7fa      	b.n	8016cca <__gethex+0x142>
 8016cd4:	230a      	movs	r3, #10
 8016cd6:	fb03 0202 	mla	r2, r3, r2, r0
 8016cda:	3a10      	subs	r2, #16
 8016cdc:	e7d4      	b.n	8016c88 <__gethex+0x100>
 8016cde:	4631      	mov	r1, r6
 8016ce0:	e7df      	b.n	8016ca2 <__gethex+0x11a>
 8016ce2:	1bf3      	subs	r3, r6, r7
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	4621      	mov	r1, r4
 8016ce8:	2b07      	cmp	r3, #7
 8016cea:	dc0b      	bgt.n	8016d04 <__gethex+0x17c>
 8016cec:	ee18 0a10 	vmov	r0, s16
 8016cf0:	f000 fae6 	bl	80172c0 <_Balloc>
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	b940      	cbnz	r0, 8016d0a <__gethex+0x182>
 8016cf8:	4b5d      	ldr	r3, [pc, #372]	; (8016e70 <__gethex+0x2e8>)
 8016cfa:	4602      	mov	r2, r0
 8016cfc:	21de      	movs	r1, #222	; 0xde
 8016cfe:	485d      	ldr	r0, [pc, #372]	; (8016e74 <__gethex+0x2ec>)
 8016d00:	f001 fbdc 	bl	80184bc <__assert_func>
 8016d04:	3101      	adds	r1, #1
 8016d06:	105b      	asrs	r3, r3, #1
 8016d08:	e7ee      	b.n	8016ce8 <__gethex+0x160>
 8016d0a:	f100 0914 	add.w	r9, r0, #20
 8016d0e:	f04f 0b00 	mov.w	fp, #0
 8016d12:	f1ca 0301 	rsb	r3, sl, #1
 8016d16:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d1a:	f8cd b000 	str.w	fp, [sp]
 8016d1e:	9306      	str	r3, [sp, #24]
 8016d20:	42b7      	cmp	r7, r6
 8016d22:	d340      	bcc.n	8016da6 <__gethex+0x21e>
 8016d24:	9802      	ldr	r0, [sp, #8]
 8016d26:	9b00      	ldr	r3, [sp, #0]
 8016d28:	f840 3b04 	str.w	r3, [r0], #4
 8016d2c:	eba0 0009 	sub.w	r0, r0, r9
 8016d30:	1080      	asrs	r0, r0, #2
 8016d32:	0146      	lsls	r6, r0, #5
 8016d34:	6120      	str	r0, [r4, #16]
 8016d36:	4618      	mov	r0, r3
 8016d38:	f000 fbb4 	bl	80174a4 <__hi0bits>
 8016d3c:	1a30      	subs	r0, r6, r0
 8016d3e:	f8d8 6000 	ldr.w	r6, [r8]
 8016d42:	42b0      	cmp	r0, r6
 8016d44:	dd63      	ble.n	8016e0e <__gethex+0x286>
 8016d46:	1b87      	subs	r7, r0, r6
 8016d48:	4639      	mov	r1, r7
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	f000 ff58 	bl	8017c00 <__any_on>
 8016d50:	4682      	mov	sl, r0
 8016d52:	b1a8      	cbz	r0, 8016d80 <__gethex+0x1f8>
 8016d54:	1e7b      	subs	r3, r7, #1
 8016d56:	1159      	asrs	r1, r3, #5
 8016d58:	f003 021f 	and.w	r2, r3, #31
 8016d5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016d60:	f04f 0a01 	mov.w	sl, #1
 8016d64:	fa0a f202 	lsl.w	r2, sl, r2
 8016d68:	420a      	tst	r2, r1
 8016d6a:	d009      	beq.n	8016d80 <__gethex+0x1f8>
 8016d6c:	4553      	cmp	r3, sl
 8016d6e:	dd05      	ble.n	8016d7c <__gethex+0x1f4>
 8016d70:	1eb9      	subs	r1, r7, #2
 8016d72:	4620      	mov	r0, r4
 8016d74:	f000 ff44 	bl	8017c00 <__any_on>
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	d145      	bne.n	8016e08 <__gethex+0x280>
 8016d7c:	f04f 0a02 	mov.w	sl, #2
 8016d80:	4639      	mov	r1, r7
 8016d82:	4620      	mov	r0, r4
 8016d84:	f7ff fe99 	bl	8016aba <rshift>
 8016d88:	443d      	add	r5, r7
 8016d8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016d8e:	42ab      	cmp	r3, r5
 8016d90:	da4c      	bge.n	8016e2c <__gethex+0x2a4>
 8016d92:	ee18 0a10 	vmov	r0, s16
 8016d96:	4621      	mov	r1, r4
 8016d98:	f000 fad2 	bl	8017340 <_Bfree>
 8016d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d9e:	2300      	movs	r3, #0
 8016da0:	6013      	str	r3, [r2, #0]
 8016da2:	27a3      	movs	r7, #163	; 0xa3
 8016da4:	e785      	b.n	8016cb2 <__gethex+0x12a>
 8016da6:	1e73      	subs	r3, r6, #1
 8016da8:	9a05      	ldr	r2, [sp, #20]
 8016daa:	9303      	str	r3, [sp, #12]
 8016dac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016db0:	4293      	cmp	r3, r2
 8016db2:	d019      	beq.n	8016de8 <__gethex+0x260>
 8016db4:	f1bb 0f20 	cmp.w	fp, #32
 8016db8:	d107      	bne.n	8016dca <__gethex+0x242>
 8016dba:	9b02      	ldr	r3, [sp, #8]
 8016dbc:	9a00      	ldr	r2, [sp, #0]
 8016dbe:	f843 2b04 	str.w	r2, [r3], #4
 8016dc2:	9302      	str	r3, [sp, #8]
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	469b      	mov	fp, r3
 8016dca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016dce:	f7ff fec6 	bl	8016b5e <__hexdig_fun>
 8016dd2:	9b00      	ldr	r3, [sp, #0]
 8016dd4:	f000 000f 	and.w	r0, r0, #15
 8016dd8:	fa00 f00b 	lsl.w	r0, r0, fp
 8016ddc:	4303      	orrs	r3, r0
 8016dde:	9300      	str	r3, [sp, #0]
 8016de0:	f10b 0b04 	add.w	fp, fp, #4
 8016de4:	9b03      	ldr	r3, [sp, #12]
 8016de6:	e00d      	b.n	8016e04 <__gethex+0x27c>
 8016de8:	9b03      	ldr	r3, [sp, #12]
 8016dea:	9a06      	ldr	r2, [sp, #24]
 8016dec:	4413      	add	r3, r2
 8016dee:	42bb      	cmp	r3, r7
 8016df0:	d3e0      	bcc.n	8016db4 <__gethex+0x22c>
 8016df2:	4618      	mov	r0, r3
 8016df4:	9901      	ldr	r1, [sp, #4]
 8016df6:	9307      	str	r3, [sp, #28]
 8016df8:	4652      	mov	r2, sl
 8016dfa:	f001 fb2c 	bl	8018456 <strncmp>
 8016dfe:	9b07      	ldr	r3, [sp, #28]
 8016e00:	2800      	cmp	r0, #0
 8016e02:	d1d7      	bne.n	8016db4 <__gethex+0x22c>
 8016e04:	461e      	mov	r6, r3
 8016e06:	e78b      	b.n	8016d20 <__gethex+0x198>
 8016e08:	f04f 0a03 	mov.w	sl, #3
 8016e0c:	e7b8      	b.n	8016d80 <__gethex+0x1f8>
 8016e0e:	da0a      	bge.n	8016e26 <__gethex+0x29e>
 8016e10:	1a37      	subs	r7, r6, r0
 8016e12:	4621      	mov	r1, r4
 8016e14:	ee18 0a10 	vmov	r0, s16
 8016e18:	463a      	mov	r2, r7
 8016e1a:	f000 fcad 	bl	8017778 <__lshift>
 8016e1e:	1bed      	subs	r5, r5, r7
 8016e20:	4604      	mov	r4, r0
 8016e22:	f100 0914 	add.w	r9, r0, #20
 8016e26:	f04f 0a00 	mov.w	sl, #0
 8016e2a:	e7ae      	b.n	8016d8a <__gethex+0x202>
 8016e2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016e30:	42a8      	cmp	r0, r5
 8016e32:	dd72      	ble.n	8016f1a <__gethex+0x392>
 8016e34:	1b45      	subs	r5, r0, r5
 8016e36:	42ae      	cmp	r6, r5
 8016e38:	dc36      	bgt.n	8016ea8 <__gethex+0x320>
 8016e3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e3e:	2b02      	cmp	r3, #2
 8016e40:	d02a      	beq.n	8016e98 <__gethex+0x310>
 8016e42:	2b03      	cmp	r3, #3
 8016e44:	d02c      	beq.n	8016ea0 <__gethex+0x318>
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d11c      	bne.n	8016e84 <__gethex+0x2fc>
 8016e4a:	42ae      	cmp	r6, r5
 8016e4c:	d11a      	bne.n	8016e84 <__gethex+0x2fc>
 8016e4e:	2e01      	cmp	r6, #1
 8016e50:	d112      	bne.n	8016e78 <__gethex+0x2f0>
 8016e52:	9a04      	ldr	r2, [sp, #16]
 8016e54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016e58:	6013      	str	r3, [r2, #0]
 8016e5a:	2301      	movs	r3, #1
 8016e5c:	6123      	str	r3, [r4, #16]
 8016e5e:	f8c9 3000 	str.w	r3, [r9]
 8016e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e64:	2762      	movs	r7, #98	; 0x62
 8016e66:	601c      	str	r4, [r3, #0]
 8016e68:	e723      	b.n	8016cb2 <__gethex+0x12a>
 8016e6a:	bf00      	nop
 8016e6c:	0801e014 	.word	0x0801e014
 8016e70:	0801df38 	.word	0x0801df38
 8016e74:	0801dfac 	.word	0x0801dfac
 8016e78:	1e71      	subs	r1, r6, #1
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	f000 fec0 	bl	8017c00 <__any_on>
 8016e80:	2800      	cmp	r0, #0
 8016e82:	d1e6      	bne.n	8016e52 <__gethex+0x2ca>
 8016e84:	ee18 0a10 	vmov	r0, s16
 8016e88:	4621      	mov	r1, r4
 8016e8a:	f000 fa59 	bl	8017340 <_Bfree>
 8016e8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e90:	2300      	movs	r3, #0
 8016e92:	6013      	str	r3, [r2, #0]
 8016e94:	2750      	movs	r7, #80	; 0x50
 8016e96:	e70c      	b.n	8016cb2 <__gethex+0x12a>
 8016e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d1f2      	bne.n	8016e84 <__gethex+0x2fc>
 8016e9e:	e7d8      	b.n	8016e52 <__gethex+0x2ca>
 8016ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1d5      	bne.n	8016e52 <__gethex+0x2ca>
 8016ea6:	e7ed      	b.n	8016e84 <__gethex+0x2fc>
 8016ea8:	1e6f      	subs	r7, r5, #1
 8016eaa:	f1ba 0f00 	cmp.w	sl, #0
 8016eae:	d131      	bne.n	8016f14 <__gethex+0x38c>
 8016eb0:	b127      	cbz	r7, 8016ebc <__gethex+0x334>
 8016eb2:	4639      	mov	r1, r7
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f000 fea3 	bl	8017c00 <__any_on>
 8016eba:	4682      	mov	sl, r0
 8016ebc:	117b      	asrs	r3, r7, #5
 8016ebe:	2101      	movs	r1, #1
 8016ec0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016ec4:	f007 071f 	and.w	r7, r7, #31
 8016ec8:	fa01 f707 	lsl.w	r7, r1, r7
 8016ecc:	421f      	tst	r7, r3
 8016ece:	4629      	mov	r1, r5
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	bf18      	it	ne
 8016ed4:	f04a 0a02 	orrne.w	sl, sl, #2
 8016ed8:	1b76      	subs	r6, r6, r5
 8016eda:	f7ff fdee 	bl	8016aba <rshift>
 8016ede:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016ee2:	2702      	movs	r7, #2
 8016ee4:	f1ba 0f00 	cmp.w	sl, #0
 8016ee8:	d048      	beq.n	8016f7c <__gethex+0x3f4>
 8016eea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016eee:	2b02      	cmp	r3, #2
 8016ef0:	d015      	beq.n	8016f1e <__gethex+0x396>
 8016ef2:	2b03      	cmp	r3, #3
 8016ef4:	d017      	beq.n	8016f26 <__gethex+0x39e>
 8016ef6:	2b01      	cmp	r3, #1
 8016ef8:	d109      	bne.n	8016f0e <__gethex+0x386>
 8016efa:	f01a 0f02 	tst.w	sl, #2
 8016efe:	d006      	beq.n	8016f0e <__gethex+0x386>
 8016f00:	f8d9 0000 	ldr.w	r0, [r9]
 8016f04:	ea4a 0a00 	orr.w	sl, sl, r0
 8016f08:	f01a 0f01 	tst.w	sl, #1
 8016f0c:	d10e      	bne.n	8016f2c <__gethex+0x3a4>
 8016f0e:	f047 0710 	orr.w	r7, r7, #16
 8016f12:	e033      	b.n	8016f7c <__gethex+0x3f4>
 8016f14:	f04f 0a01 	mov.w	sl, #1
 8016f18:	e7d0      	b.n	8016ebc <__gethex+0x334>
 8016f1a:	2701      	movs	r7, #1
 8016f1c:	e7e2      	b.n	8016ee4 <__gethex+0x35c>
 8016f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f20:	f1c3 0301 	rsb	r3, r3, #1
 8016f24:	9315      	str	r3, [sp, #84]	; 0x54
 8016f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d0f0      	beq.n	8016f0e <__gethex+0x386>
 8016f2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016f30:	f104 0314 	add.w	r3, r4, #20
 8016f34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016f38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016f3c:	f04f 0c00 	mov.w	ip, #0
 8016f40:	4618      	mov	r0, r3
 8016f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f46:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016f4a:	d01c      	beq.n	8016f86 <__gethex+0x3fe>
 8016f4c:	3201      	adds	r2, #1
 8016f4e:	6002      	str	r2, [r0, #0]
 8016f50:	2f02      	cmp	r7, #2
 8016f52:	f104 0314 	add.w	r3, r4, #20
 8016f56:	d13f      	bne.n	8016fd8 <__gethex+0x450>
 8016f58:	f8d8 2000 	ldr.w	r2, [r8]
 8016f5c:	3a01      	subs	r2, #1
 8016f5e:	42b2      	cmp	r2, r6
 8016f60:	d10a      	bne.n	8016f78 <__gethex+0x3f0>
 8016f62:	1171      	asrs	r1, r6, #5
 8016f64:	2201      	movs	r2, #1
 8016f66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016f6a:	f006 061f 	and.w	r6, r6, #31
 8016f6e:	fa02 f606 	lsl.w	r6, r2, r6
 8016f72:	421e      	tst	r6, r3
 8016f74:	bf18      	it	ne
 8016f76:	4617      	movne	r7, r2
 8016f78:	f047 0720 	orr.w	r7, r7, #32
 8016f7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f7e:	601c      	str	r4, [r3, #0]
 8016f80:	9b04      	ldr	r3, [sp, #16]
 8016f82:	601d      	str	r5, [r3, #0]
 8016f84:	e695      	b.n	8016cb2 <__gethex+0x12a>
 8016f86:	4299      	cmp	r1, r3
 8016f88:	f843 cc04 	str.w	ip, [r3, #-4]
 8016f8c:	d8d8      	bhi.n	8016f40 <__gethex+0x3b8>
 8016f8e:	68a3      	ldr	r3, [r4, #8]
 8016f90:	459b      	cmp	fp, r3
 8016f92:	db19      	blt.n	8016fc8 <__gethex+0x440>
 8016f94:	6861      	ldr	r1, [r4, #4]
 8016f96:	ee18 0a10 	vmov	r0, s16
 8016f9a:	3101      	adds	r1, #1
 8016f9c:	f000 f990 	bl	80172c0 <_Balloc>
 8016fa0:	4681      	mov	r9, r0
 8016fa2:	b918      	cbnz	r0, 8016fac <__gethex+0x424>
 8016fa4:	4b1a      	ldr	r3, [pc, #104]	; (8017010 <__gethex+0x488>)
 8016fa6:	4602      	mov	r2, r0
 8016fa8:	2184      	movs	r1, #132	; 0x84
 8016faa:	e6a8      	b.n	8016cfe <__gethex+0x176>
 8016fac:	6922      	ldr	r2, [r4, #16]
 8016fae:	3202      	adds	r2, #2
 8016fb0:	f104 010c 	add.w	r1, r4, #12
 8016fb4:	0092      	lsls	r2, r2, #2
 8016fb6:	300c      	adds	r0, #12
 8016fb8:	f000 f974 	bl	80172a4 <memcpy>
 8016fbc:	4621      	mov	r1, r4
 8016fbe:	ee18 0a10 	vmov	r0, s16
 8016fc2:	f000 f9bd 	bl	8017340 <_Bfree>
 8016fc6:	464c      	mov	r4, r9
 8016fc8:	6923      	ldr	r3, [r4, #16]
 8016fca:	1c5a      	adds	r2, r3, #1
 8016fcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016fd0:	6122      	str	r2, [r4, #16]
 8016fd2:	2201      	movs	r2, #1
 8016fd4:	615a      	str	r2, [r3, #20]
 8016fd6:	e7bb      	b.n	8016f50 <__gethex+0x3c8>
 8016fd8:	6922      	ldr	r2, [r4, #16]
 8016fda:	455a      	cmp	r2, fp
 8016fdc:	dd0b      	ble.n	8016ff6 <__gethex+0x46e>
 8016fde:	2101      	movs	r1, #1
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f7ff fd6a 	bl	8016aba <rshift>
 8016fe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016fea:	3501      	adds	r5, #1
 8016fec:	42ab      	cmp	r3, r5
 8016fee:	f6ff aed0 	blt.w	8016d92 <__gethex+0x20a>
 8016ff2:	2701      	movs	r7, #1
 8016ff4:	e7c0      	b.n	8016f78 <__gethex+0x3f0>
 8016ff6:	f016 061f 	ands.w	r6, r6, #31
 8016ffa:	d0fa      	beq.n	8016ff2 <__gethex+0x46a>
 8016ffc:	4453      	add	r3, sl
 8016ffe:	f1c6 0620 	rsb	r6, r6, #32
 8017002:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017006:	f000 fa4d 	bl	80174a4 <__hi0bits>
 801700a:	42b0      	cmp	r0, r6
 801700c:	dbe7      	blt.n	8016fde <__gethex+0x456>
 801700e:	e7f0      	b.n	8016ff2 <__gethex+0x46a>
 8017010:	0801df38 	.word	0x0801df38

08017014 <L_shift>:
 8017014:	f1c2 0208 	rsb	r2, r2, #8
 8017018:	0092      	lsls	r2, r2, #2
 801701a:	b570      	push	{r4, r5, r6, lr}
 801701c:	f1c2 0620 	rsb	r6, r2, #32
 8017020:	6843      	ldr	r3, [r0, #4]
 8017022:	6804      	ldr	r4, [r0, #0]
 8017024:	fa03 f506 	lsl.w	r5, r3, r6
 8017028:	432c      	orrs	r4, r5
 801702a:	40d3      	lsrs	r3, r2
 801702c:	6004      	str	r4, [r0, #0]
 801702e:	f840 3f04 	str.w	r3, [r0, #4]!
 8017032:	4288      	cmp	r0, r1
 8017034:	d3f4      	bcc.n	8017020 <L_shift+0xc>
 8017036:	bd70      	pop	{r4, r5, r6, pc}

08017038 <__match>:
 8017038:	b530      	push	{r4, r5, lr}
 801703a:	6803      	ldr	r3, [r0, #0]
 801703c:	3301      	adds	r3, #1
 801703e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017042:	b914      	cbnz	r4, 801704a <__match+0x12>
 8017044:	6003      	str	r3, [r0, #0]
 8017046:	2001      	movs	r0, #1
 8017048:	bd30      	pop	{r4, r5, pc}
 801704a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801704e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017052:	2d19      	cmp	r5, #25
 8017054:	bf98      	it	ls
 8017056:	3220      	addls	r2, #32
 8017058:	42a2      	cmp	r2, r4
 801705a:	d0f0      	beq.n	801703e <__match+0x6>
 801705c:	2000      	movs	r0, #0
 801705e:	e7f3      	b.n	8017048 <__match+0x10>

08017060 <__hexnan>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	680b      	ldr	r3, [r1, #0]
 8017066:	115e      	asrs	r6, r3, #5
 8017068:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801706c:	f013 031f 	ands.w	r3, r3, #31
 8017070:	b087      	sub	sp, #28
 8017072:	bf18      	it	ne
 8017074:	3604      	addne	r6, #4
 8017076:	2500      	movs	r5, #0
 8017078:	1f37      	subs	r7, r6, #4
 801707a:	4690      	mov	r8, r2
 801707c:	6802      	ldr	r2, [r0, #0]
 801707e:	9301      	str	r3, [sp, #4]
 8017080:	4682      	mov	sl, r0
 8017082:	f846 5c04 	str.w	r5, [r6, #-4]
 8017086:	46b9      	mov	r9, r7
 8017088:	463c      	mov	r4, r7
 801708a:	9502      	str	r5, [sp, #8]
 801708c:	46ab      	mov	fp, r5
 801708e:	7851      	ldrb	r1, [r2, #1]
 8017090:	1c53      	adds	r3, r2, #1
 8017092:	9303      	str	r3, [sp, #12]
 8017094:	b341      	cbz	r1, 80170e8 <__hexnan+0x88>
 8017096:	4608      	mov	r0, r1
 8017098:	9205      	str	r2, [sp, #20]
 801709a:	9104      	str	r1, [sp, #16]
 801709c:	f7ff fd5f 	bl	8016b5e <__hexdig_fun>
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d14f      	bne.n	8017144 <__hexnan+0xe4>
 80170a4:	9904      	ldr	r1, [sp, #16]
 80170a6:	9a05      	ldr	r2, [sp, #20]
 80170a8:	2920      	cmp	r1, #32
 80170aa:	d818      	bhi.n	80170de <__hexnan+0x7e>
 80170ac:	9b02      	ldr	r3, [sp, #8]
 80170ae:	459b      	cmp	fp, r3
 80170b0:	dd13      	ble.n	80170da <__hexnan+0x7a>
 80170b2:	454c      	cmp	r4, r9
 80170b4:	d206      	bcs.n	80170c4 <__hexnan+0x64>
 80170b6:	2d07      	cmp	r5, #7
 80170b8:	dc04      	bgt.n	80170c4 <__hexnan+0x64>
 80170ba:	462a      	mov	r2, r5
 80170bc:	4649      	mov	r1, r9
 80170be:	4620      	mov	r0, r4
 80170c0:	f7ff ffa8 	bl	8017014 <L_shift>
 80170c4:	4544      	cmp	r4, r8
 80170c6:	d950      	bls.n	801716a <__hexnan+0x10a>
 80170c8:	2300      	movs	r3, #0
 80170ca:	f1a4 0904 	sub.w	r9, r4, #4
 80170ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80170d2:	f8cd b008 	str.w	fp, [sp, #8]
 80170d6:	464c      	mov	r4, r9
 80170d8:	461d      	mov	r5, r3
 80170da:	9a03      	ldr	r2, [sp, #12]
 80170dc:	e7d7      	b.n	801708e <__hexnan+0x2e>
 80170de:	2929      	cmp	r1, #41	; 0x29
 80170e0:	d156      	bne.n	8017190 <__hexnan+0x130>
 80170e2:	3202      	adds	r2, #2
 80170e4:	f8ca 2000 	str.w	r2, [sl]
 80170e8:	f1bb 0f00 	cmp.w	fp, #0
 80170ec:	d050      	beq.n	8017190 <__hexnan+0x130>
 80170ee:	454c      	cmp	r4, r9
 80170f0:	d206      	bcs.n	8017100 <__hexnan+0xa0>
 80170f2:	2d07      	cmp	r5, #7
 80170f4:	dc04      	bgt.n	8017100 <__hexnan+0xa0>
 80170f6:	462a      	mov	r2, r5
 80170f8:	4649      	mov	r1, r9
 80170fa:	4620      	mov	r0, r4
 80170fc:	f7ff ff8a 	bl	8017014 <L_shift>
 8017100:	4544      	cmp	r4, r8
 8017102:	d934      	bls.n	801716e <__hexnan+0x10e>
 8017104:	f1a8 0204 	sub.w	r2, r8, #4
 8017108:	4623      	mov	r3, r4
 801710a:	f853 1b04 	ldr.w	r1, [r3], #4
 801710e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017112:	429f      	cmp	r7, r3
 8017114:	d2f9      	bcs.n	801710a <__hexnan+0xaa>
 8017116:	1b3b      	subs	r3, r7, r4
 8017118:	f023 0303 	bic.w	r3, r3, #3
 801711c:	3304      	adds	r3, #4
 801711e:	3401      	adds	r4, #1
 8017120:	3e03      	subs	r6, #3
 8017122:	42b4      	cmp	r4, r6
 8017124:	bf88      	it	hi
 8017126:	2304      	movhi	r3, #4
 8017128:	4443      	add	r3, r8
 801712a:	2200      	movs	r2, #0
 801712c:	f843 2b04 	str.w	r2, [r3], #4
 8017130:	429f      	cmp	r7, r3
 8017132:	d2fb      	bcs.n	801712c <__hexnan+0xcc>
 8017134:	683b      	ldr	r3, [r7, #0]
 8017136:	b91b      	cbnz	r3, 8017140 <__hexnan+0xe0>
 8017138:	4547      	cmp	r7, r8
 801713a:	d127      	bne.n	801718c <__hexnan+0x12c>
 801713c:	2301      	movs	r3, #1
 801713e:	603b      	str	r3, [r7, #0]
 8017140:	2005      	movs	r0, #5
 8017142:	e026      	b.n	8017192 <__hexnan+0x132>
 8017144:	3501      	adds	r5, #1
 8017146:	2d08      	cmp	r5, #8
 8017148:	f10b 0b01 	add.w	fp, fp, #1
 801714c:	dd06      	ble.n	801715c <__hexnan+0xfc>
 801714e:	4544      	cmp	r4, r8
 8017150:	d9c3      	bls.n	80170da <__hexnan+0x7a>
 8017152:	2300      	movs	r3, #0
 8017154:	f844 3c04 	str.w	r3, [r4, #-4]
 8017158:	2501      	movs	r5, #1
 801715a:	3c04      	subs	r4, #4
 801715c:	6822      	ldr	r2, [r4, #0]
 801715e:	f000 000f 	and.w	r0, r0, #15
 8017162:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017166:	6022      	str	r2, [r4, #0]
 8017168:	e7b7      	b.n	80170da <__hexnan+0x7a>
 801716a:	2508      	movs	r5, #8
 801716c:	e7b5      	b.n	80170da <__hexnan+0x7a>
 801716e:	9b01      	ldr	r3, [sp, #4]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d0df      	beq.n	8017134 <__hexnan+0xd4>
 8017174:	f04f 32ff 	mov.w	r2, #4294967295
 8017178:	f1c3 0320 	rsb	r3, r3, #32
 801717c:	fa22 f303 	lsr.w	r3, r2, r3
 8017180:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017184:	401a      	ands	r2, r3
 8017186:	f846 2c04 	str.w	r2, [r6, #-4]
 801718a:	e7d3      	b.n	8017134 <__hexnan+0xd4>
 801718c:	3f04      	subs	r7, #4
 801718e:	e7d1      	b.n	8017134 <__hexnan+0xd4>
 8017190:	2004      	movs	r0, #4
 8017192:	b007      	add	sp, #28
 8017194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017198 <_localeconv_r>:
 8017198:	4800      	ldr	r0, [pc, #0]	; (801719c <_localeconv_r+0x4>)
 801719a:	4770      	bx	lr
 801719c:	20000388 	.word	0x20000388

080171a0 <__retarget_lock_init_recursive>:
 80171a0:	4770      	bx	lr

080171a2 <__retarget_lock_acquire_recursive>:
 80171a2:	4770      	bx	lr

080171a4 <__retarget_lock_release_recursive>:
 80171a4:	4770      	bx	lr

080171a6 <__swhatbuf_r>:
 80171a6:	b570      	push	{r4, r5, r6, lr}
 80171a8:	460e      	mov	r6, r1
 80171aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171ae:	2900      	cmp	r1, #0
 80171b0:	b096      	sub	sp, #88	; 0x58
 80171b2:	4614      	mov	r4, r2
 80171b4:	461d      	mov	r5, r3
 80171b6:	da08      	bge.n	80171ca <__swhatbuf_r+0x24>
 80171b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171bc:	2200      	movs	r2, #0
 80171be:	602a      	str	r2, [r5, #0]
 80171c0:	061a      	lsls	r2, r3, #24
 80171c2:	d410      	bmi.n	80171e6 <__swhatbuf_r+0x40>
 80171c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171c8:	e00e      	b.n	80171e8 <__swhatbuf_r+0x42>
 80171ca:	466a      	mov	r2, sp
 80171cc:	f001 f9b6 	bl	801853c <_fstat_r>
 80171d0:	2800      	cmp	r0, #0
 80171d2:	dbf1      	blt.n	80171b8 <__swhatbuf_r+0x12>
 80171d4:	9a01      	ldr	r2, [sp, #4]
 80171d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80171da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80171de:	425a      	negs	r2, r3
 80171e0:	415a      	adcs	r2, r3
 80171e2:	602a      	str	r2, [r5, #0]
 80171e4:	e7ee      	b.n	80171c4 <__swhatbuf_r+0x1e>
 80171e6:	2340      	movs	r3, #64	; 0x40
 80171e8:	2000      	movs	r0, #0
 80171ea:	6023      	str	r3, [r4, #0]
 80171ec:	b016      	add	sp, #88	; 0x58
 80171ee:	bd70      	pop	{r4, r5, r6, pc}

080171f0 <__smakebuf_r>:
 80171f0:	898b      	ldrh	r3, [r1, #12]
 80171f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171f4:	079d      	lsls	r5, r3, #30
 80171f6:	4606      	mov	r6, r0
 80171f8:	460c      	mov	r4, r1
 80171fa:	d507      	bpl.n	801720c <__smakebuf_r+0x1c>
 80171fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	6123      	str	r3, [r4, #16]
 8017204:	2301      	movs	r3, #1
 8017206:	6163      	str	r3, [r4, #20]
 8017208:	b002      	add	sp, #8
 801720a:	bd70      	pop	{r4, r5, r6, pc}
 801720c:	ab01      	add	r3, sp, #4
 801720e:	466a      	mov	r2, sp
 8017210:	f7ff ffc9 	bl	80171a6 <__swhatbuf_r>
 8017214:	9900      	ldr	r1, [sp, #0]
 8017216:	4605      	mov	r5, r0
 8017218:	4630      	mov	r0, r6
 801721a:	f000 fd95 	bl	8017d48 <_malloc_r>
 801721e:	b948      	cbnz	r0, 8017234 <__smakebuf_r+0x44>
 8017220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017224:	059a      	lsls	r2, r3, #22
 8017226:	d4ef      	bmi.n	8017208 <__smakebuf_r+0x18>
 8017228:	f023 0303 	bic.w	r3, r3, #3
 801722c:	f043 0302 	orr.w	r3, r3, #2
 8017230:	81a3      	strh	r3, [r4, #12]
 8017232:	e7e3      	b.n	80171fc <__smakebuf_r+0xc>
 8017234:	4b0d      	ldr	r3, [pc, #52]	; (801726c <__smakebuf_r+0x7c>)
 8017236:	62b3      	str	r3, [r6, #40]	; 0x28
 8017238:	89a3      	ldrh	r3, [r4, #12]
 801723a:	6020      	str	r0, [r4, #0]
 801723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017240:	81a3      	strh	r3, [r4, #12]
 8017242:	9b00      	ldr	r3, [sp, #0]
 8017244:	6163      	str	r3, [r4, #20]
 8017246:	9b01      	ldr	r3, [sp, #4]
 8017248:	6120      	str	r0, [r4, #16]
 801724a:	b15b      	cbz	r3, 8017264 <__smakebuf_r+0x74>
 801724c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017250:	4630      	mov	r0, r6
 8017252:	f001 f985 	bl	8018560 <_isatty_r>
 8017256:	b128      	cbz	r0, 8017264 <__smakebuf_r+0x74>
 8017258:	89a3      	ldrh	r3, [r4, #12]
 801725a:	f023 0303 	bic.w	r3, r3, #3
 801725e:	f043 0301 	orr.w	r3, r3, #1
 8017262:	81a3      	strh	r3, [r4, #12]
 8017264:	89a0      	ldrh	r0, [r4, #12]
 8017266:	4305      	orrs	r5, r0
 8017268:	81a5      	strh	r5, [r4, #12]
 801726a:	e7cd      	b.n	8017208 <__smakebuf_r+0x18>
 801726c:	08016919 	.word	0x08016919

08017270 <malloc>:
 8017270:	4b02      	ldr	r3, [pc, #8]	; (801727c <malloc+0xc>)
 8017272:	4601      	mov	r1, r0
 8017274:	6818      	ldr	r0, [r3, #0]
 8017276:	f000 bd67 	b.w	8017d48 <_malloc_r>
 801727a:	bf00      	nop
 801727c:	20000230 	.word	0x20000230

08017280 <__ascii_mbtowc>:
 8017280:	b082      	sub	sp, #8
 8017282:	b901      	cbnz	r1, 8017286 <__ascii_mbtowc+0x6>
 8017284:	a901      	add	r1, sp, #4
 8017286:	b142      	cbz	r2, 801729a <__ascii_mbtowc+0x1a>
 8017288:	b14b      	cbz	r3, 801729e <__ascii_mbtowc+0x1e>
 801728a:	7813      	ldrb	r3, [r2, #0]
 801728c:	600b      	str	r3, [r1, #0]
 801728e:	7812      	ldrb	r2, [r2, #0]
 8017290:	1e10      	subs	r0, r2, #0
 8017292:	bf18      	it	ne
 8017294:	2001      	movne	r0, #1
 8017296:	b002      	add	sp, #8
 8017298:	4770      	bx	lr
 801729a:	4610      	mov	r0, r2
 801729c:	e7fb      	b.n	8017296 <__ascii_mbtowc+0x16>
 801729e:	f06f 0001 	mvn.w	r0, #1
 80172a2:	e7f8      	b.n	8017296 <__ascii_mbtowc+0x16>

080172a4 <memcpy>:
 80172a4:	440a      	add	r2, r1
 80172a6:	4291      	cmp	r1, r2
 80172a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80172ac:	d100      	bne.n	80172b0 <memcpy+0xc>
 80172ae:	4770      	bx	lr
 80172b0:	b510      	push	{r4, lr}
 80172b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172ba:	4291      	cmp	r1, r2
 80172bc:	d1f9      	bne.n	80172b2 <memcpy+0xe>
 80172be:	bd10      	pop	{r4, pc}

080172c0 <_Balloc>:
 80172c0:	b570      	push	{r4, r5, r6, lr}
 80172c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80172c4:	4604      	mov	r4, r0
 80172c6:	460d      	mov	r5, r1
 80172c8:	b976      	cbnz	r6, 80172e8 <_Balloc+0x28>
 80172ca:	2010      	movs	r0, #16
 80172cc:	f7ff ffd0 	bl	8017270 <malloc>
 80172d0:	4602      	mov	r2, r0
 80172d2:	6260      	str	r0, [r4, #36]	; 0x24
 80172d4:	b920      	cbnz	r0, 80172e0 <_Balloc+0x20>
 80172d6:	4b18      	ldr	r3, [pc, #96]	; (8017338 <_Balloc+0x78>)
 80172d8:	4818      	ldr	r0, [pc, #96]	; (801733c <_Balloc+0x7c>)
 80172da:	2166      	movs	r1, #102	; 0x66
 80172dc:	f001 f8ee 	bl	80184bc <__assert_func>
 80172e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172e4:	6006      	str	r6, [r0, #0]
 80172e6:	60c6      	str	r6, [r0, #12]
 80172e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80172ea:	68f3      	ldr	r3, [r6, #12]
 80172ec:	b183      	cbz	r3, 8017310 <_Balloc+0x50>
 80172ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172f6:	b9b8      	cbnz	r0, 8017328 <_Balloc+0x68>
 80172f8:	2101      	movs	r1, #1
 80172fa:	fa01 f605 	lsl.w	r6, r1, r5
 80172fe:	1d72      	adds	r2, r6, #5
 8017300:	0092      	lsls	r2, r2, #2
 8017302:	4620      	mov	r0, r4
 8017304:	f000 fc9d 	bl	8017c42 <_calloc_r>
 8017308:	b160      	cbz	r0, 8017324 <_Balloc+0x64>
 801730a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801730e:	e00e      	b.n	801732e <_Balloc+0x6e>
 8017310:	2221      	movs	r2, #33	; 0x21
 8017312:	2104      	movs	r1, #4
 8017314:	4620      	mov	r0, r4
 8017316:	f000 fc94 	bl	8017c42 <_calloc_r>
 801731a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801731c:	60f0      	str	r0, [r6, #12]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d1e4      	bne.n	80172ee <_Balloc+0x2e>
 8017324:	2000      	movs	r0, #0
 8017326:	bd70      	pop	{r4, r5, r6, pc}
 8017328:	6802      	ldr	r2, [r0, #0]
 801732a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801732e:	2300      	movs	r3, #0
 8017330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017334:	e7f7      	b.n	8017326 <_Balloc+0x66>
 8017336:	bf00      	nop
 8017338:	0801dec6 	.word	0x0801dec6
 801733c:	0801e028 	.word	0x0801e028

08017340 <_Bfree>:
 8017340:	b570      	push	{r4, r5, r6, lr}
 8017342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017344:	4605      	mov	r5, r0
 8017346:	460c      	mov	r4, r1
 8017348:	b976      	cbnz	r6, 8017368 <_Bfree+0x28>
 801734a:	2010      	movs	r0, #16
 801734c:	f7ff ff90 	bl	8017270 <malloc>
 8017350:	4602      	mov	r2, r0
 8017352:	6268      	str	r0, [r5, #36]	; 0x24
 8017354:	b920      	cbnz	r0, 8017360 <_Bfree+0x20>
 8017356:	4b09      	ldr	r3, [pc, #36]	; (801737c <_Bfree+0x3c>)
 8017358:	4809      	ldr	r0, [pc, #36]	; (8017380 <_Bfree+0x40>)
 801735a:	218a      	movs	r1, #138	; 0x8a
 801735c:	f001 f8ae 	bl	80184bc <__assert_func>
 8017360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017364:	6006      	str	r6, [r0, #0]
 8017366:	60c6      	str	r6, [r0, #12]
 8017368:	b13c      	cbz	r4, 801737a <_Bfree+0x3a>
 801736a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801736c:	6862      	ldr	r2, [r4, #4]
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017374:	6021      	str	r1, [r4, #0]
 8017376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801737a:	bd70      	pop	{r4, r5, r6, pc}
 801737c:	0801dec6 	.word	0x0801dec6
 8017380:	0801e028 	.word	0x0801e028

08017384 <__multadd>:
 8017384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017388:	690d      	ldr	r5, [r1, #16]
 801738a:	4607      	mov	r7, r0
 801738c:	460c      	mov	r4, r1
 801738e:	461e      	mov	r6, r3
 8017390:	f101 0c14 	add.w	ip, r1, #20
 8017394:	2000      	movs	r0, #0
 8017396:	f8dc 3000 	ldr.w	r3, [ip]
 801739a:	b299      	uxth	r1, r3
 801739c:	fb02 6101 	mla	r1, r2, r1, r6
 80173a0:	0c1e      	lsrs	r6, r3, #16
 80173a2:	0c0b      	lsrs	r3, r1, #16
 80173a4:	fb02 3306 	mla	r3, r2, r6, r3
 80173a8:	b289      	uxth	r1, r1
 80173aa:	3001      	adds	r0, #1
 80173ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80173b0:	4285      	cmp	r5, r0
 80173b2:	f84c 1b04 	str.w	r1, [ip], #4
 80173b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80173ba:	dcec      	bgt.n	8017396 <__multadd+0x12>
 80173bc:	b30e      	cbz	r6, 8017402 <__multadd+0x7e>
 80173be:	68a3      	ldr	r3, [r4, #8]
 80173c0:	42ab      	cmp	r3, r5
 80173c2:	dc19      	bgt.n	80173f8 <__multadd+0x74>
 80173c4:	6861      	ldr	r1, [r4, #4]
 80173c6:	4638      	mov	r0, r7
 80173c8:	3101      	adds	r1, #1
 80173ca:	f7ff ff79 	bl	80172c0 <_Balloc>
 80173ce:	4680      	mov	r8, r0
 80173d0:	b928      	cbnz	r0, 80173de <__multadd+0x5a>
 80173d2:	4602      	mov	r2, r0
 80173d4:	4b0c      	ldr	r3, [pc, #48]	; (8017408 <__multadd+0x84>)
 80173d6:	480d      	ldr	r0, [pc, #52]	; (801740c <__multadd+0x88>)
 80173d8:	21b5      	movs	r1, #181	; 0xb5
 80173da:	f001 f86f 	bl	80184bc <__assert_func>
 80173de:	6922      	ldr	r2, [r4, #16]
 80173e0:	3202      	adds	r2, #2
 80173e2:	f104 010c 	add.w	r1, r4, #12
 80173e6:	0092      	lsls	r2, r2, #2
 80173e8:	300c      	adds	r0, #12
 80173ea:	f7ff ff5b 	bl	80172a4 <memcpy>
 80173ee:	4621      	mov	r1, r4
 80173f0:	4638      	mov	r0, r7
 80173f2:	f7ff ffa5 	bl	8017340 <_Bfree>
 80173f6:	4644      	mov	r4, r8
 80173f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80173fc:	3501      	adds	r5, #1
 80173fe:	615e      	str	r6, [r3, #20]
 8017400:	6125      	str	r5, [r4, #16]
 8017402:	4620      	mov	r0, r4
 8017404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017408:	0801df38 	.word	0x0801df38
 801740c:	0801e028 	.word	0x0801e028

08017410 <__s2b>:
 8017410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017414:	460c      	mov	r4, r1
 8017416:	4615      	mov	r5, r2
 8017418:	461f      	mov	r7, r3
 801741a:	2209      	movs	r2, #9
 801741c:	3308      	adds	r3, #8
 801741e:	4606      	mov	r6, r0
 8017420:	fb93 f3f2 	sdiv	r3, r3, r2
 8017424:	2100      	movs	r1, #0
 8017426:	2201      	movs	r2, #1
 8017428:	429a      	cmp	r2, r3
 801742a:	db09      	blt.n	8017440 <__s2b+0x30>
 801742c:	4630      	mov	r0, r6
 801742e:	f7ff ff47 	bl	80172c0 <_Balloc>
 8017432:	b940      	cbnz	r0, 8017446 <__s2b+0x36>
 8017434:	4602      	mov	r2, r0
 8017436:	4b19      	ldr	r3, [pc, #100]	; (801749c <__s2b+0x8c>)
 8017438:	4819      	ldr	r0, [pc, #100]	; (80174a0 <__s2b+0x90>)
 801743a:	21ce      	movs	r1, #206	; 0xce
 801743c:	f001 f83e 	bl	80184bc <__assert_func>
 8017440:	0052      	lsls	r2, r2, #1
 8017442:	3101      	adds	r1, #1
 8017444:	e7f0      	b.n	8017428 <__s2b+0x18>
 8017446:	9b08      	ldr	r3, [sp, #32]
 8017448:	6143      	str	r3, [r0, #20]
 801744a:	2d09      	cmp	r5, #9
 801744c:	f04f 0301 	mov.w	r3, #1
 8017450:	6103      	str	r3, [r0, #16]
 8017452:	dd16      	ble.n	8017482 <__s2b+0x72>
 8017454:	f104 0909 	add.w	r9, r4, #9
 8017458:	46c8      	mov	r8, r9
 801745a:	442c      	add	r4, r5
 801745c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017460:	4601      	mov	r1, r0
 8017462:	3b30      	subs	r3, #48	; 0x30
 8017464:	220a      	movs	r2, #10
 8017466:	4630      	mov	r0, r6
 8017468:	f7ff ff8c 	bl	8017384 <__multadd>
 801746c:	45a0      	cmp	r8, r4
 801746e:	d1f5      	bne.n	801745c <__s2b+0x4c>
 8017470:	f1a5 0408 	sub.w	r4, r5, #8
 8017474:	444c      	add	r4, r9
 8017476:	1b2d      	subs	r5, r5, r4
 8017478:	1963      	adds	r3, r4, r5
 801747a:	42bb      	cmp	r3, r7
 801747c:	db04      	blt.n	8017488 <__s2b+0x78>
 801747e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017482:	340a      	adds	r4, #10
 8017484:	2509      	movs	r5, #9
 8017486:	e7f6      	b.n	8017476 <__s2b+0x66>
 8017488:	f814 3b01 	ldrb.w	r3, [r4], #1
 801748c:	4601      	mov	r1, r0
 801748e:	3b30      	subs	r3, #48	; 0x30
 8017490:	220a      	movs	r2, #10
 8017492:	4630      	mov	r0, r6
 8017494:	f7ff ff76 	bl	8017384 <__multadd>
 8017498:	e7ee      	b.n	8017478 <__s2b+0x68>
 801749a:	bf00      	nop
 801749c:	0801df38 	.word	0x0801df38
 80174a0:	0801e028 	.word	0x0801e028

080174a4 <__hi0bits>:
 80174a4:	0c03      	lsrs	r3, r0, #16
 80174a6:	041b      	lsls	r3, r3, #16
 80174a8:	b9d3      	cbnz	r3, 80174e0 <__hi0bits+0x3c>
 80174aa:	0400      	lsls	r0, r0, #16
 80174ac:	2310      	movs	r3, #16
 80174ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80174b2:	bf04      	itt	eq
 80174b4:	0200      	lsleq	r0, r0, #8
 80174b6:	3308      	addeq	r3, #8
 80174b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80174bc:	bf04      	itt	eq
 80174be:	0100      	lsleq	r0, r0, #4
 80174c0:	3304      	addeq	r3, #4
 80174c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80174c6:	bf04      	itt	eq
 80174c8:	0080      	lsleq	r0, r0, #2
 80174ca:	3302      	addeq	r3, #2
 80174cc:	2800      	cmp	r0, #0
 80174ce:	db05      	blt.n	80174dc <__hi0bits+0x38>
 80174d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80174d4:	f103 0301 	add.w	r3, r3, #1
 80174d8:	bf08      	it	eq
 80174da:	2320      	moveq	r3, #32
 80174dc:	4618      	mov	r0, r3
 80174de:	4770      	bx	lr
 80174e0:	2300      	movs	r3, #0
 80174e2:	e7e4      	b.n	80174ae <__hi0bits+0xa>

080174e4 <__lo0bits>:
 80174e4:	6803      	ldr	r3, [r0, #0]
 80174e6:	f013 0207 	ands.w	r2, r3, #7
 80174ea:	4601      	mov	r1, r0
 80174ec:	d00b      	beq.n	8017506 <__lo0bits+0x22>
 80174ee:	07da      	lsls	r2, r3, #31
 80174f0:	d423      	bmi.n	801753a <__lo0bits+0x56>
 80174f2:	0798      	lsls	r0, r3, #30
 80174f4:	bf49      	itett	mi
 80174f6:	085b      	lsrmi	r3, r3, #1
 80174f8:	089b      	lsrpl	r3, r3, #2
 80174fa:	2001      	movmi	r0, #1
 80174fc:	600b      	strmi	r3, [r1, #0]
 80174fe:	bf5c      	itt	pl
 8017500:	600b      	strpl	r3, [r1, #0]
 8017502:	2002      	movpl	r0, #2
 8017504:	4770      	bx	lr
 8017506:	b298      	uxth	r0, r3
 8017508:	b9a8      	cbnz	r0, 8017536 <__lo0bits+0x52>
 801750a:	0c1b      	lsrs	r3, r3, #16
 801750c:	2010      	movs	r0, #16
 801750e:	b2da      	uxtb	r2, r3
 8017510:	b90a      	cbnz	r2, 8017516 <__lo0bits+0x32>
 8017512:	3008      	adds	r0, #8
 8017514:	0a1b      	lsrs	r3, r3, #8
 8017516:	071a      	lsls	r2, r3, #28
 8017518:	bf04      	itt	eq
 801751a:	091b      	lsreq	r3, r3, #4
 801751c:	3004      	addeq	r0, #4
 801751e:	079a      	lsls	r2, r3, #30
 8017520:	bf04      	itt	eq
 8017522:	089b      	lsreq	r3, r3, #2
 8017524:	3002      	addeq	r0, #2
 8017526:	07da      	lsls	r2, r3, #31
 8017528:	d403      	bmi.n	8017532 <__lo0bits+0x4e>
 801752a:	085b      	lsrs	r3, r3, #1
 801752c:	f100 0001 	add.w	r0, r0, #1
 8017530:	d005      	beq.n	801753e <__lo0bits+0x5a>
 8017532:	600b      	str	r3, [r1, #0]
 8017534:	4770      	bx	lr
 8017536:	4610      	mov	r0, r2
 8017538:	e7e9      	b.n	801750e <__lo0bits+0x2a>
 801753a:	2000      	movs	r0, #0
 801753c:	4770      	bx	lr
 801753e:	2020      	movs	r0, #32
 8017540:	4770      	bx	lr
	...

08017544 <__i2b>:
 8017544:	b510      	push	{r4, lr}
 8017546:	460c      	mov	r4, r1
 8017548:	2101      	movs	r1, #1
 801754a:	f7ff feb9 	bl	80172c0 <_Balloc>
 801754e:	4602      	mov	r2, r0
 8017550:	b928      	cbnz	r0, 801755e <__i2b+0x1a>
 8017552:	4b05      	ldr	r3, [pc, #20]	; (8017568 <__i2b+0x24>)
 8017554:	4805      	ldr	r0, [pc, #20]	; (801756c <__i2b+0x28>)
 8017556:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801755a:	f000 ffaf 	bl	80184bc <__assert_func>
 801755e:	2301      	movs	r3, #1
 8017560:	6144      	str	r4, [r0, #20]
 8017562:	6103      	str	r3, [r0, #16]
 8017564:	bd10      	pop	{r4, pc}
 8017566:	bf00      	nop
 8017568:	0801df38 	.word	0x0801df38
 801756c:	0801e028 	.word	0x0801e028

08017570 <__multiply>:
 8017570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017574:	4691      	mov	r9, r2
 8017576:	690a      	ldr	r2, [r1, #16]
 8017578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801757c:	429a      	cmp	r2, r3
 801757e:	bfb8      	it	lt
 8017580:	460b      	movlt	r3, r1
 8017582:	460c      	mov	r4, r1
 8017584:	bfbc      	itt	lt
 8017586:	464c      	movlt	r4, r9
 8017588:	4699      	movlt	r9, r3
 801758a:	6927      	ldr	r7, [r4, #16]
 801758c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017590:	68a3      	ldr	r3, [r4, #8]
 8017592:	6861      	ldr	r1, [r4, #4]
 8017594:	eb07 060a 	add.w	r6, r7, sl
 8017598:	42b3      	cmp	r3, r6
 801759a:	b085      	sub	sp, #20
 801759c:	bfb8      	it	lt
 801759e:	3101      	addlt	r1, #1
 80175a0:	f7ff fe8e 	bl	80172c0 <_Balloc>
 80175a4:	b930      	cbnz	r0, 80175b4 <__multiply+0x44>
 80175a6:	4602      	mov	r2, r0
 80175a8:	4b44      	ldr	r3, [pc, #272]	; (80176bc <__multiply+0x14c>)
 80175aa:	4845      	ldr	r0, [pc, #276]	; (80176c0 <__multiply+0x150>)
 80175ac:	f240 115d 	movw	r1, #349	; 0x15d
 80175b0:	f000 ff84 	bl	80184bc <__assert_func>
 80175b4:	f100 0514 	add.w	r5, r0, #20
 80175b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80175bc:	462b      	mov	r3, r5
 80175be:	2200      	movs	r2, #0
 80175c0:	4543      	cmp	r3, r8
 80175c2:	d321      	bcc.n	8017608 <__multiply+0x98>
 80175c4:	f104 0314 	add.w	r3, r4, #20
 80175c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80175cc:	f109 0314 	add.w	r3, r9, #20
 80175d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80175d4:	9202      	str	r2, [sp, #8]
 80175d6:	1b3a      	subs	r2, r7, r4
 80175d8:	3a15      	subs	r2, #21
 80175da:	f022 0203 	bic.w	r2, r2, #3
 80175de:	3204      	adds	r2, #4
 80175e0:	f104 0115 	add.w	r1, r4, #21
 80175e4:	428f      	cmp	r7, r1
 80175e6:	bf38      	it	cc
 80175e8:	2204      	movcc	r2, #4
 80175ea:	9201      	str	r2, [sp, #4]
 80175ec:	9a02      	ldr	r2, [sp, #8]
 80175ee:	9303      	str	r3, [sp, #12]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d80c      	bhi.n	801760e <__multiply+0x9e>
 80175f4:	2e00      	cmp	r6, #0
 80175f6:	dd03      	ble.n	8017600 <__multiply+0x90>
 80175f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d05a      	beq.n	80176b6 <__multiply+0x146>
 8017600:	6106      	str	r6, [r0, #16]
 8017602:	b005      	add	sp, #20
 8017604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017608:	f843 2b04 	str.w	r2, [r3], #4
 801760c:	e7d8      	b.n	80175c0 <__multiply+0x50>
 801760e:	f8b3 a000 	ldrh.w	sl, [r3]
 8017612:	f1ba 0f00 	cmp.w	sl, #0
 8017616:	d024      	beq.n	8017662 <__multiply+0xf2>
 8017618:	f104 0e14 	add.w	lr, r4, #20
 801761c:	46a9      	mov	r9, r5
 801761e:	f04f 0c00 	mov.w	ip, #0
 8017622:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017626:	f8d9 1000 	ldr.w	r1, [r9]
 801762a:	fa1f fb82 	uxth.w	fp, r2
 801762e:	b289      	uxth	r1, r1
 8017630:	fb0a 110b 	mla	r1, sl, fp, r1
 8017634:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017638:	f8d9 2000 	ldr.w	r2, [r9]
 801763c:	4461      	add	r1, ip
 801763e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017642:	fb0a c20b 	mla	r2, sl, fp, ip
 8017646:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801764a:	b289      	uxth	r1, r1
 801764c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017650:	4577      	cmp	r7, lr
 8017652:	f849 1b04 	str.w	r1, [r9], #4
 8017656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801765a:	d8e2      	bhi.n	8017622 <__multiply+0xb2>
 801765c:	9a01      	ldr	r2, [sp, #4]
 801765e:	f845 c002 	str.w	ip, [r5, r2]
 8017662:	9a03      	ldr	r2, [sp, #12]
 8017664:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017668:	3304      	adds	r3, #4
 801766a:	f1b9 0f00 	cmp.w	r9, #0
 801766e:	d020      	beq.n	80176b2 <__multiply+0x142>
 8017670:	6829      	ldr	r1, [r5, #0]
 8017672:	f104 0c14 	add.w	ip, r4, #20
 8017676:	46ae      	mov	lr, r5
 8017678:	f04f 0a00 	mov.w	sl, #0
 801767c:	f8bc b000 	ldrh.w	fp, [ip]
 8017680:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017684:	fb09 220b 	mla	r2, r9, fp, r2
 8017688:	4492      	add	sl, r2
 801768a:	b289      	uxth	r1, r1
 801768c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017690:	f84e 1b04 	str.w	r1, [lr], #4
 8017694:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017698:	f8be 1000 	ldrh.w	r1, [lr]
 801769c:	0c12      	lsrs	r2, r2, #16
 801769e:	fb09 1102 	mla	r1, r9, r2, r1
 80176a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80176a6:	4567      	cmp	r7, ip
 80176a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80176ac:	d8e6      	bhi.n	801767c <__multiply+0x10c>
 80176ae:	9a01      	ldr	r2, [sp, #4]
 80176b0:	50a9      	str	r1, [r5, r2]
 80176b2:	3504      	adds	r5, #4
 80176b4:	e79a      	b.n	80175ec <__multiply+0x7c>
 80176b6:	3e01      	subs	r6, #1
 80176b8:	e79c      	b.n	80175f4 <__multiply+0x84>
 80176ba:	bf00      	nop
 80176bc:	0801df38 	.word	0x0801df38
 80176c0:	0801e028 	.word	0x0801e028

080176c4 <__pow5mult>:
 80176c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176c8:	4615      	mov	r5, r2
 80176ca:	f012 0203 	ands.w	r2, r2, #3
 80176ce:	4606      	mov	r6, r0
 80176d0:	460f      	mov	r7, r1
 80176d2:	d007      	beq.n	80176e4 <__pow5mult+0x20>
 80176d4:	4c25      	ldr	r4, [pc, #148]	; (801776c <__pow5mult+0xa8>)
 80176d6:	3a01      	subs	r2, #1
 80176d8:	2300      	movs	r3, #0
 80176da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80176de:	f7ff fe51 	bl	8017384 <__multadd>
 80176e2:	4607      	mov	r7, r0
 80176e4:	10ad      	asrs	r5, r5, #2
 80176e6:	d03d      	beq.n	8017764 <__pow5mult+0xa0>
 80176e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80176ea:	b97c      	cbnz	r4, 801770c <__pow5mult+0x48>
 80176ec:	2010      	movs	r0, #16
 80176ee:	f7ff fdbf 	bl	8017270 <malloc>
 80176f2:	4602      	mov	r2, r0
 80176f4:	6270      	str	r0, [r6, #36]	; 0x24
 80176f6:	b928      	cbnz	r0, 8017704 <__pow5mult+0x40>
 80176f8:	4b1d      	ldr	r3, [pc, #116]	; (8017770 <__pow5mult+0xac>)
 80176fa:	481e      	ldr	r0, [pc, #120]	; (8017774 <__pow5mult+0xb0>)
 80176fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017700:	f000 fedc 	bl	80184bc <__assert_func>
 8017704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017708:	6004      	str	r4, [r0, #0]
 801770a:	60c4      	str	r4, [r0, #12]
 801770c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017714:	b94c      	cbnz	r4, 801772a <__pow5mult+0x66>
 8017716:	f240 2171 	movw	r1, #625	; 0x271
 801771a:	4630      	mov	r0, r6
 801771c:	f7ff ff12 	bl	8017544 <__i2b>
 8017720:	2300      	movs	r3, #0
 8017722:	f8c8 0008 	str.w	r0, [r8, #8]
 8017726:	4604      	mov	r4, r0
 8017728:	6003      	str	r3, [r0, #0]
 801772a:	f04f 0900 	mov.w	r9, #0
 801772e:	07eb      	lsls	r3, r5, #31
 8017730:	d50a      	bpl.n	8017748 <__pow5mult+0x84>
 8017732:	4639      	mov	r1, r7
 8017734:	4622      	mov	r2, r4
 8017736:	4630      	mov	r0, r6
 8017738:	f7ff ff1a 	bl	8017570 <__multiply>
 801773c:	4639      	mov	r1, r7
 801773e:	4680      	mov	r8, r0
 8017740:	4630      	mov	r0, r6
 8017742:	f7ff fdfd 	bl	8017340 <_Bfree>
 8017746:	4647      	mov	r7, r8
 8017748:	106d      	asrs	r5, r5, #1
 801774a:	d00b      	beq.n	8017764 <__pow5mult+0xa0>
 801774c:	6820      	ldr	r0, [r4, #0]
 801774e:	b938      	cbnz	r0, 8017760 <__pow5mult+0x9c>
 8017750:	4622      	mov	r2, r4
 8017752:	4621      	mov	r1, r4
 8017754:	4630      	mov	r0, r6
 8017756:	f7ff ff0b 	bl	8017570 <__multiply>
 801775a:	6020      	str	r0, [r4, #0]
 801775c:	f8c0 9000 	str.w	r9, [r0]
 8017760:	4604      	mov	r4, r0
 8017762:	e7e4      	b.n	801772e <__pow5mult+0x6a>
 8017764:	4638      	mov	r0, r7
 8017766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801776a:	bf00      	nop
 801776c:	0801e178 	.word	0x0801e178
 8017770:	0801dec6 	.word	0x0801dec6
 8017774:	0801e028 	.word	0x0801e028

08017778 <__lshift>:
 8017778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801777c:	460c      	mov	r4, r1
 801777e:	6849      	ldr	r1, [r1, #4]
 8017780:	6923      	ldr	r3, [r4, #16]
 8017782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017786:	68a3      	ldr	r3, [r4, #8]
 8017788:	4607      	mov	r7, r0
 801778a:	4691      	mov	r9, r2
 801778c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017790:	f108 0601 	add.w	r6, r8, #1
 8017794:	42b3      	cmp	r3, r6
 8017796:	db0b      	blt.n	80177b0 <__lshift+0x38>
 8017798:	4638      	mov	r0, r7
 801779a:	f7ff fd91 	bl	80172c0 <_Balloc>
 801779e:	4605      	mov	r5, r0
 80177a0:	b948      	cbnz	r0, 80177b6 <__lshift+0x3e>
 80177a2:	4602      	mov	r2, r0
 80177a4:	4b2a      	ldr	r3, [pc, #168]	; (8017850 <__lshift+0xd8>)
 80177a6:	482b      	ldr	r0, [pc, #172]	; (8017854 <__lshift+0xdc>)
 80177a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80177ac:	f000 fe86 	bl	80184bc <__assert_func>
 80177b0:	3101      	adds	r1, #1
 80177b2:	005b      	lsls	r3, r3, #1
 80177b4:	e7ee      	b.n	8017794 <__lshift+0x1c>
 80177b6:	2300      	movs	r3, #0
 80177b8:	f100 0114 	add.w	r1, r0, #20
 80177bc:	f100 0210 	add.w	r2, r0, #16
 80177c0:	4618      	mov	r0, r3
 80177c2:	4553      	cmp	r3, sl
 80177c4:	db37      	blt.n	8017836 <__lshift+0xbe>
 80177c6:	6920      	ldr	r0, [r4, #16]
 80177c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80177cc:	f104 0314 	add.w	r3, r4, #20
 80177d0:	f019 091f 	ands.w	r9, r9, #31
 80177d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80177d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80177dc:	d02f      	beq.n	801783e <__lshift+0xc6>
 80177de:	f1c9 0e20 	rsb	lr, r9, #32
 80177e2:	468a      	mov	sl, r1
 80177e4:	f04f 0c00 	mov.w	ip, #0
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	fa02 f209 	lsl.w	r2, r2, r9
 80177ee:	ea42 020c 	orr.w	r2, r2, ip
 80177f2:	f84a 2b04 	str.w	r2, [sl], #4
 80177f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80177fa:	4298      	cmp	r0, r3
 80177fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017800:	d8f2      	bhi.n	80177e8 <__lshift+0x70>
 8017802:	1b03      	subs	r3, r0, r4
 8017804:	3b15      	subs	r3, #21
 8017806:	f023 0303 	bic.w	r3, r3, #3
 801780a:	3304      	adds	r3, #4
 801780c:	f104 0215 	add.w	r2, r4, #21
 8017810:	4290      	cmp	r0, r2
 8017812:	bf38      	it	cc
 8017814:	2304      	movcc	r3, #4
 8017816:	f841 c003 	str.w	ip, [r1, r3]
 801781a:	f1bc 0f00 	cmp.w	ip, #0
 801781e:	d001      	beq.n	8017824 <__lshift+0xac>
 8017820:	f108 0602 	add.w	r6, r8, #2
 8017824:	3e01      	subs	r6, #1
 8017826:	4638      	mov	r0, r7
 8017828:	612e      	str	r6, [r5, #16]
 801782a:	4621      	mov	r1, r4
 801782c:	f7ff fd88 	bl	8017340 <_Bfree>
 8017830:	4628      	mov	r0, r5
 8017832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017836:	f842 0f04 	str.w	r0, [r2, #4]!
 801783a:	3301      	adds	r3, #1
 801783c:	e7c1      	b.n	80177c2 <__lshift+0x4a>
 801783e:	3904      	subs	r1, #4
 8017840:	f853 2b04 	ldr.w	r2, [r3], #4
 8017844:	f841 2f04 	str.w	r2, [r1, #4]!
 8017848:	4298      	cmp	r0, r3
 801784a:	d8f9      	bhi.n	8017840 <__lshift+0xc8>
 801784c:	e7ea      	b.n	8017824 <__lshift+0xac>
 801784e:	bf00      	nop
 8017850:	0801df38 	.word	0x0801df38
 8017854:	0801e028 	.word	0x0801e028

08017858 <__mcmp>:
 8017858:	b530      	push	{r4, r5, lr}
 801785a:	6902      	ldr	r2, [r0, #16]
 801785c:	690c      	ldr	r4, [r1, #16]
 801785e:	1b12      	subs	r2, r2, r4
 8017860:	d10e      	bne.n	8017880 <__mcmp+0x28>
 8017862:	f100 0314 	add.w	r3, r0, #20
 8017866:	3114      	adds	r1, #20
 8017868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801786c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017878:	42a5      	cmp	r5, r4
 801787a:	d003      	beq.n	8017884 <__mcmp+0x2c>
 801787c:	d305      	bcc.n	801788a <__mcmp+0x32>
 801787e:	2201      	movs	r2, #1
 8017880:	4610      	mov	r0, r2
 8017882:	bd30      	pop	{r4, r5, pc}
 8017884:	4283      	cmp	r3, r0
 8017886:	d3f3      	bcc.n	8017870 <__mcmp+0x18>
 8017888:	e7fa      	b.n	8017880 <__mcmp+0x28>
 801788a:	f04f 32ff 	mov.w	r2, #4294967295
 801788e:	e7f7      	b.n	8017880 <__mcmp+0x28>

08017890 <__mdiff>:
 8017890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017894:	460c      	mov	r4, r1
 8017896:	4606      	mov	r6, r0
 8017898:	4611      	mov	r1, r2
 801789a:	4620      	mov	r0, r4
 801789c:	4690      	mov	r8, r2
 801789e:	f7ff ffdb 	bl	8017858 <__mcmp>
 80178a2:	1e05      	subs	r5, r0, #0
 80178a4:	d110      	bne.n	80178c8 <__mdiff+0x38>
 80178a6:	4629      	mov	r1, r5
 80178a8:	4630      	mov	r0, r6
 80178aa:	f7ff fd09 	bl	80172c0 <_Balloc>
 80178ae:	b930      	cbnz	r0, 80178be <__mdiff+0x2e>
 80178b0:	4b3a      	ldr	r3, [pc, #232]	; (801799c <__mdiff+0x10c>)
 80178b2:	4602      	mov	r2, r0
 80178b4:	f240 2132 	movw	r1, #562	; 0x232
 80178b8:	4839      	ldr	r0, [pc, #228]	; (80179a0 <__mdiff+0x110>)
 80178ba:	f000 fdff 	bl	80184bc <__assert_func>
 80178be:	2301      	movs	r3, #1
 80178c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80178c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c8:	bfa4      	itt	ge
 80178ca:	4643      	movge	r3, r8
 80178cc:	46a0      	movge	r8, r4
 80178ce:	4630      	mov	r0, r6
 80178d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80178d4:	bfa6      	itte	ge
 80178d6:	461c      	movge	r4, r3
 80178d8:	2500      	movge	r5, #0
 80178da:	2501      	movlt	r5, #1
 80178dc:	f7ff fcf0 	bl	80172c0 <_Balloc>
 80178e0:	b920      	cbnz	r0, 80178ec <__mdiff+0x5c>
 80178e2:	4b2e      	ldr	r3, [pc, #184]	; (801799c <__mdiff+0x10c>)
 80178e4:	4602      	mov	r2, r0
 80178e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80178ea:	e7e5      	b.n	80178b8 <__mdiff+0x28>
 80178ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80178f0:	6926      	ldr	r6, [r4, #16]
 80178f2:	60c5      	str	r5, [r0, #12]
 80178f4:	f104 0914 	add.w	r9, r4, #20
 80178f8:	f108 0514 	add.w	r5, r8, #20
 80178fc:	f100 0e14 	add.w	lr, r0, #20
 8017900:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017904:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017908:	f108 0210 	add.w	r2, r8, #16
 801790c:	46f2      	mov	sl, lr
 801790e:	2100      	movs	r1, #0
 8017910:	f859 3b04 	ldr.w	r3, [r9], #4
 8017914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017918:	fa1f f883 	uxth.w	r8, r3
 801791c:	fa11 f18b 	uxtah	r1, r1, fp
 8017920:	0c1b      	lsrs	r3, r3, #16
 8017922:	eba1 0808 	sub.w	r8, r1, r8
 8017926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801792a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801792e:	fa1f f888 	uxth.w	r8, r8
 8017932:	1419      	asrs	r1, r3, #16
 8017934:	454e      	cmp	r6, r9
 8017936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801793a:	f84a 3b04 	str.w	r3, [sl], #4
 801793e:	d8e7      	bhi.n	8017910 <__mdiff+0x80>
 8017940:	1b33      	subs	r3, r6, r4
 8017942:	3b15      	subs	r3, #21
 8017944:	f023 0303 	bic.w	r3, r3, #3
 8017948:	3304      	adds	r3, #4
 801794a:	3415      	adds	r4, #21
 801794c:	42a6      	cmp	r6, r4
 801794e:	bf38      	it	cc
 8017950:	2304      	movcc	r3, #4
 8017952:	441d      	add	r5, r3
 8017954:	4473      	add	r3, lr
 8017956:	469e      	mov	lr, r3
 8017958:	462e      	mov	r6, r5
 801795a:	4566      	cmp	r6, ip
 801795c:	d30e      	bcc.n	801797c <__mdiff+0xec>
 801795e:	f10c 0203 	add.w	r2, ip, #3
 8017962:	1b52      	subs	r2, r2, r5
 8017964:	f022 0203 	bic.w	r2, r2, #3
 8017968:	3d03      	subs	r5, #3
 801796a:	45ac      	cmp	ip, r5
 801796c:	bf38      	it	cc
 801796e:	2200      	movcc	r2, #0
 8017970:	441a      	add	r2, r3
 8017972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017976:	b17b      	cbz	r3, 8017998 <__mdiff+0x108>
 8017978:	6107      	str	r7, [r0, #16]
 801797a:	e7a3      	b.n	80178c4 <__mdiff+0x34>
 801797c:	f856 8b04 	ldr.w	r8, [r6], #4
 8017980:	fa11 f288 	uxtah	r2, r1, r8
 8017984:	1414      	asrs	r4, r2, #16
 8017986:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801798a:	b292      	uxth	r2, r2
 801798c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017990:	f84e 2b04 	str.w	r2, [lr], #4
 8017994:	1421      	asrs	r1, r4, #16
 8017996:	e7e0      	b.n	801795a <__mdiff+0xca>
 8017998:	3f01      	subs	r7, #1
 801799a:	e7ea      	b.n	8017972 <__mdiff+0xe2>
 801799c:	0801df38 	.word	0x0801df38
 80179a0:	0801e028 	.word	0x0801e028

080179a4 <__ulp>:
 80179a4:	b082      	sub	sp, #8
 80179a6:	ed8d 0b00 	vstr	d0, [sp]
 80179aa:	9b01      	ldr	r3, [sp, #4]
 80179ac:	4912      	ldr	r1, [pc, #72]	; (80179f8 <__ulp+0x54>)
 80179ae:	4019      	ands	r1, r3
 80179b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80179b4:	2900      	cmp	r1, #0
 80179b6:	dd05      	ble.n	80179c4 <__ulp+0x20>
 80179b8:	2200      	movs	r2, #0
 80179ba:	460b      	mov	r3, r1
 80179bc:	ec43 2b10 	vmov	d0, r2, r3
 80179c0:	b002      	add	sp, #8
 80179c2:	4770      	bx	lr
 80179c4:	4249      	negs	r1, r1
 80179c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80179ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80179ce:	f04f 0200 	mov.w	r2, #0
 80179d2:	f04f 0300 	mov.w	r3, #0
 80179d6:	da04      	bge.n	80179e2 <__ulp+0x3e>
 80179d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80179dc:	fa41 f300 	asr.w	r3, r1, r0
 80179e0:	e7ec      	b.n	80179bc <__ulp+0x18>
 80179e2:	f1a0 0114 	sub.w	r1, r0, #20
 80179e6:	291e      	cmp	r1, #30
 80179e8:	bfda      	itte	le
 80179ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80179ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80179f2:	2101      	movgt	r1, #1
 80179f4:	460a      	mov	r2, r1
 80179f6:	e7e1      	b.n	80179bc <__ulp+0x18>
 80179f8:	7ff00000 	.word	0x7ff00000

080179fc <__b2d>:
 80179fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fe:	6905      	ldr	r5, [r0, #16]
 8017a00:	f100 0714 	add.w	r7, r0, #20
 8017a04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017a08:	1f2e      	subs	r6, r5, #4
 8017a0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f7ff fd48 	bl	80174a4 <__hi0bits>
 8017a14:	f1c0 0320 	rsb	r3, r0, #32
 8017a18:	280a      	cmp	r0, #10
 8017a1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017a98 <__b2d+0x9c>
 8017a1e:	600b      	str	r3, [r1, #0]
 8017a20:	dc14      	bgt.n	8017a4c <__b2d+0x50>
 8017a22:	f1c0 0e0b 	rsb	lr, r0, #11
 8017a26:	fa24 f10e 	lsr.w	r1, r4, lr
 8017a2a:	42b7      	cmp	r7, r6
 8017a2c:	ea41 030c 	orr.w	r3, r1, ip
 8017a30:	bf34      	ite	cc
 8017a32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a36:	2100      	movcs	r1, #0
 8017a38:	3015      	adds	r0, #21
 8017a3a:	fa04 f000 	lsl.w	r0, r4, r0
 8017a3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8017a42:	ea40 0201 	orr.w	r2, r0, r1
 8017a46:	ec43 2b10 	vmov	d0, r2, r3
 8017a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a4c:	42b7      	cmp	r7, r6
 8017a4e:	bf3a      	itte	cc
 8017a50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a54:	f1a5 0608 	subcc.w	r6, r5, #8
 8017a58:	2100      	movcs	r1, #0
 8017a5a:	380b      	subs	r0, #11
 8017a5c:	d017      	beq.n	8017a8e <__b2d+0x92>
 8017a5e:	f1c0 0c20 	rsb	ip, r0, #32
 8017a62:	fa04 f500 	lsl.w	r5, r4, r0
 8017a66:	42be      	cmp	r6, r7
 8017a68:	fa21 f40c 	lsr.w	r4, r1, ip
 8017a6c:	ea45 0504 	orr.w	r5, r5, r4
 8017a70:	bf8c      	ite	hi
 8017a72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017a76:	2400      	movls	r4, #0
 8017a78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017a7c:	fa01 f000 	lsl.w	r0, r1, r0
 8017a80:	fa24 f40c 	lsr.w	r4, r4, ip
 8017a84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017a88:	ea40 0204 	orr.w	r2, r0, r4
 8017a8c:	e7db      	b.n	8017a46 <__b2d+0x4a>
 8017a8e:	ea44 030c 	orr.w	r3, r4, ip
 8017a92:	460a      	mov	r2, r1
 8017a94:	e7d7      	b.n	8017a46 <__b2d+0x4a>
 8017a96:	bf00      	nop
 8017a98:	3ff00000 	.word	0x3ff00000

08017a9c <__d2b>:
 8017a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017aa0:	4689      	mov	r9, r1
 8017aa2:	2101      	movs	r1, #1
 8017aa4:	ec57 6b10 	vmov	r6, r7, d0
 8017aa8:	4690      	mov	r8, r2
 8017aaa:	f7ff fc09 	bl	80172c0 <_Balloc>
 8017aae:	4604      	mov	r4, r0
 8017ab0:	b930      	cbnz	r0, 8017ac0 <__d2b+0x24>
 8017ab2:	4602      	mov	r2, r0
 8017ab4:	4b25      	ldr	r3, [pc, #148]	; (8017b4c <__d2b+0xb0>)
 8017ab6:	4826      	ldr	r0, [pc, #152]	; (8017b50 <__d2b+0xb4>)
 8017ab8:	f240 310a 	movw	r1, #778	; 0x30a
 8017abc:	f000 fcfe 	bl	80184bc <__assert_func>
 8017ac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017ac8:	bb35      	cbnz	r5, 8017b18 <__d2b+0x7c>
 8017aca:	2e00      	cmp	r6, #0
 8017acc:	9301      	str	r3, [sp, #4]
 8017ace:	d028      	beq.n	8017b22 <__d2b+0x86>
 8017ad0:	4668      	mov	r0, sp
 8017ad2:	9600      	str	r6, [sp, #0]
 8017ad4:	f7ff fd06 	bl	80174e4 <__lo0bits>
 8017ad8:	9900      	ldr	r1, [sp, #0]
 8017ada:	b300      	cbz	r0, 8017b1e <__d2b+0x82>
 8017adc:	9a01      	ldr	r2, [sp, #4]
 8017ade:	f1c0 0320 	rsb	r3, r0, #32
 8017ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8017ae6:	430b      	orrs	r3, r1
 8017ae8:	40c2      	lsrs	r2, r0
 8017aea:	6163      	str	r3, [r4, #20]
 8017aec:	9201      	str	r2, [sp, #4]
 8017aee:	9b01      	ldr	r3, [sp, #4]
 8017af0:	61a3      	str	r3, [r4, #24]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	bf14      	ite	ne
 8017af6:	2202      	movne	r2, #2
 8017af8:	2201      	moveq	r2, #1
 8017afa:	6122      	str	r2, [r4, #16]
 8017afc:	b1d5      	cbz	r5, 8017b34 <__d2b+0x98>
 8017afe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017b02:	4405      	add	r5, r0
 8017b04:	f8c9 5000 	str.w	r5, [r9]
 8017b08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017b0c:	f8c8 0000 	str.w	r0, [r8]
 8017b10:	4620      	mov	r0, r4
 8017b12:	b003      	add	sp, #12
 8017b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017b1c:	e7d5      	b.n	8017aca <__d2b+0x2e>
 8017b1e:	6161      	str	r1, [r4, #20]
 8017b20:	e7e5      	b.n	8017aee <__d2b+0x52>
 8017b22:	a801      	add	r0, sp, #4
 8017b24:	f7ff fcde 	bl	80174e4 <__lo0bits>
 8017b28:	9b01      	ldr	r3, [sp, #4]
 8017b2a:	6163      	str	r3, [r4, #20]
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	6122      	str	r2, [r4, #16]
 8017b30:	3020      	adds	r0, #32
 8017b32:	e7e3      	b.n	8017afc <__d2b+0x60>
 8017b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017b3c:	f8c9 0000 	str.w	r0, [r9]
 8017b40:	6918      	ldr	r0, [r3, #16]
 8017b42:	f7ff fcaf 	bl	80174a4 <__hi0bits>
 8017b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017b4a:	e7df      	b.n	8017b0c <__d2b+0x70>
 8017b4c:	0801df38 	.word	0x0801df38
 8017b50:	0801e028 	.word	0x0801e028

08017b54 <__ratio>:
 8017b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b58:	4688      	mov	r8, r1
 8017b5a:	4669      	mov	r1, sp
 8017b5c:	4681      	mov	r9, r0
 8017b5e:	f7ff ff4d 	bl	80179fc <__b2d>
 8017b62:	a901      	add	r1, sp, #4
 8017b64:	4640      	mov	r0, r8
 8017b66:	ec55 4b10 	vmov	r4, r5, d0
 8017b6a:	f7ff ff47 	bl	80179fc <__b2d>
 8017b6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017b76:	eba3 0c02 	sub.w	ip, r3, r2
 8017b7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017b7e:	1a9b      	subs	r3, r3, r2
 8017b80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017b84:	ec51 0b10 	vmov	r0, r1, d0
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	bfd6      	itet	le
 8017b8c:	460a      	movle	r2, r1
 8017b8e:	462a      	movgt	r2, r5
 8017b90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017b94:	468b      	mov	fp, r1
 8017b96:	462f      	mov	r7, r5
 8017b98:	bfd4      	ite	le
 8017b9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017b9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	ee10 2a10 	vmov	r2, s0
 8017ba8:	465b      	mov	r3, fp
 8017baa:	4639      	mov	r1, r7
 8017bac:	f7e8 fe4e 	bl	800084c <__aeabi_ddiv>
 8017bb0:	ec41 0b10 	vmov	d0, r0, r1
 8017bb4:	b003      	add	sp, #12
 8017bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bba <__copybits>:
 8017bba:	3901      	subs	r1, #1
 8017bbc:	b570      	push	{r4, r5, r6, lr}
 8017bbe:	1149      	asrs	r1, r1, #5
 8017bc0:	6914      	ldr	r4, [r2, #16]
 8017bc2:	3101      	adds	r1, #1
 8017bc4:	f102 0314 	add.w	r3, r2, #20
 8017bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017bcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017bd0:	1f05      	subs	r5, r0, #4
 8017bd2:	42a3      	cmp	r3, r4
 8017bd4:	d30c      	bcc.n	8017bf0 <__copybits+0x36>
 8017bd6:	1aa3      	subs	r3, r4, r2
 8017bd8:	3b11      	subs	r3, #17
 8017bda:	f023 0303 	bic.w	r3, r3, #3
 8017bde:	3211      	adds	r2, #17
 8017be0:	42a2      	cmp	r2, r4
 8017be2:	bf88      	it	hi
 8017be4:	2300      	movhi	r3, #0
 8017be6:	4418      	add	r0, r3
 8017be8:	2300      	movs	r3, #0
 8017bea:	4288      	cmp	r0, r1
 8017bec:	d305      	bcc.n	8017bfa <__copybits+0x40>
 8017bee:	bd70      	pop	{r4, r5, r6, pc}
 8017bf0:	f853 6b04 	ldr.w	r6, [r3], #4
 8017bf4:	f845 6f04 	str.w	r6, [r5, #4]!
 8017bf8:	e7eb      	b.n	8017bd2 <__copybits+0x18>
 8017bfa:	f840 3b04 	str.w	r3, [r0], #4
 8017bfe:	e7f4      	b.n	8017bea <__copybits+0x30>

08017c00 <__any_on>:
 8017c00:	f100 0214 	add.w	r2, r0, #20
 8017c04:	6900      	ldr	r0, [r0, #16]
 8017c06:	114b      	asrs	r3, r1, #5
 8017c08:	4298      	cmp	r0, r3
 8017c0a:	b510      	push	{r4, lr}
 8017c0c:	db11      	blt.n	8017c32 <__any_on+0x32>
 8017c0e:	dd0a      	ble.n	8017c26 <__any_on+0x26>
 8017c10:	f011 011f 	ands.w	r1, r1, #31
 8017c14:	d007      	beq.n	8017c26 <__any_on+0x26>
 8017c16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017c1a:	fa24 f001 	lsr.w	r0, r4, r1
 8017c1e:	fa00 f101 	lsl.w	r1, r0, r1
 8017c22:	428c      	cmp	r4, r1
 8017c24:	d10b      	bne.n	8017c3e <__any_on+0x3e>
 8017c26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017c2a:	4293      	cmp	r3, r2
 8017c2c:	d803      	bhi.n	8017c36 <__any_on+0x36>
 8017c2e:	2000      	movs	r0, #0
 8017c30:	bd10      	pop	{r4, pc}
 8017c32:	4603      	mov	r3, r0
 8017c34:	e7f7      	b.n	8017c26 <__any_on+0x26>
 8017c36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c3a:	2900      	cmp	r1, #0
 8017c3c:	d0f5      	beq.n	8017c2a <__any_on+0x2a>
 8017c3e:	2001      	movs	r0, #1
 8017c40:	e7f6      	b.n	8017c30 <__any_on+0x30>

08017c42 <_calloc_r>:
 8017c42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c44:	fba1 2402 	umull	r2, r4, r1, r2
 8017c48:	b94c      	cbnz	r4, 8017c5e <_calloc_r+0x1c>
 8017c4a:	4611      	mov	r1, r2
 8017c4c:	9201      	str	r2, [sp, #4]
 8017c4e:	f000 f87b 	bl	8017d48 <_malloc_r>
 8017c52:	9a01      	ldr	r2, [sp, #4]
 8017c54:	4605      	mov	r5, r0
 8017c56:	b930      	cbnz	r0, 8017c66 <_calloc_r+0x24>
 8017c58:	4628      	mov	r0, r5
 8017c5a:	b003      	add	sp, #12
 8017c5c:	bd30      	pop	{r4, r5, pc}
 8017c5e:	220c      	movs	r2, #12
 8017c60:	6002      	str	r2, [r0, #0]
 8017c62:	2500      	movs	r5, #0
 8017c64:	e7f8      	b.n	8017c58 <_calloc_r+0x16>
 8017c66:	4621      	mov	r1, r4
 8017c68:	f7fc f854 	bl	8013d14 <memset>
 8017c6c:	e7f4      	b.n	8017c58 <_calloc_r+0x16>
	...

08017c70 <_free_r>:
 8017c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c72:	2900      	cmp	r1, #0
 8017c74:	d044      	beq.n	8017d00 <_free_r+0x90>
 8017c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c7a:	9001      	str	r0, [sp, #4]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8017c82:	bfb8      	it	lt
 8017c84:	18e4      	addlt	r4, r4, r3
 8017c86:	f000 fca7 	bl	80185d8 <__malloc_lock>
 8017c8a:	4a1e      	ldr	r2, [pc, #120]	; (8017d04 <_free_r+0x94>)
 8017c8c:	9801      	ldr	r0, [sp, #4]
 8017c8e:	6813      	ldr	r3, [r2, #0]
 8017c90:	b933      	cbnz	r3, 8017ca0 <_free_r+0x30>
 8017c92:	6063      	str	r3, [r4, #4]
 8017c94:	6014      	str	r4, [r2, #0]
 8017c96:	b003      	add	sp, #12
 8017c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c9c:	f000 bca2 	b.w	80185e4 <__malloc_unlock>
 8017ca0:	42a3      	cmp	r3, r4
 8017ca2:	d908      	bls.n	8017cb6 <_free_r+0x46>
 8017ca4:	6825      	ldr	r5, [r4, #0]
 8017ca6:	1961      	adds	r1, r4, r5
 8017ca8:	428b      	cmp	r3, r1
 8017caa:	bf01      	itttt	eq
 8017cac:	6819      	ldreq	r1, [r3, #0]
 8017cae:	685b      	ldreq	r3, [r3, #4]
 8017cb0:	1949      	addeq	r1, r1, r5
 8017cb2:	6021      	streq	r1, [r4, #0]
 8017cb4:	e7ed      	b.n	8017c92 <_free_r+0x22>
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	685b      	ldr	r3, [r3, #4]
 8017cba:	b10b      	cbz	r3, 8017cc0 <_free_r+0x50>
 8017cbc:	42a3      	cmp	r3, r4
 8017cbe:	d9fa      	bls.n	8017cb6 <_free_r+0x46>
 8017cc0:	6811      	ldr	r1, [r2, #0]
 8017cc2:	1855      	adds	r5, r2, r1
 8017cc4:	42a5      	cmp	r5, r4
 8017cc6:	d10b      	bne.n	8017ce0 <_free_r+0x70>
 8017cc8:	6824      	ldr	r4, [r4, #0]
 8017cca:	4421      	add	r1, r4
 8017ccc:	1854      	adds	r4, r2, r1
 8017cce:	42a3      	cmp	r3, r4
 8017cd0:	6011      	str	r1, [r2, #0]
 8017cd2:	d1e0      	bne.n	8017c96 <_free_r+0x26>
 8017cd4:	681c      	ldr	r4, [r3, #0]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	6053      	str	r3, [r2, #4]
 8017cda:	4421      	add	r1, r4
 8017cdc:	6011      	str	r1, [r2, #0]
 8017cde:	e7da      	b.n	8017c96 <_free_r+0x26>
 8017ce0:	d902      	bls.n	8017ce8 <_free_r+0x78>
 8017ce2:	230c      	movs	r3, #12
 8017ce4:	6003      	str	r3, [r0, #0]
 8017ce6:	e7d6      	b.n	8017c96 <_free_r+0x26>
 8017ce8:	6825      	ldr	r5, [r4, #0]
 8017cea:	1961      	adds	r1, r4, r5
 8017cec:	428b      	cmp	r3, r1
 8017cee:	bf04      	itt	eq
 8017cf0:	6819      	ldreq	r1, [r3, #0]
 8017cf2:	685b      	ldreq	r3, [r3, #4]
 8017cf4:	6063      	str	r3, [r4, #4]
 8017cf6:	bf04      	itt	eq
 8017cf8:	1949      	addeq	r1, r1, r5
 8017cfa:	6021      	streq	r1, [r4, #0]
 8017cfc:	6054      	str	r4, [r2, #4]
 8017cfe:	e7ca      	b.n	8017c96 <_free_r+0x26>
 8017d00:	b003      	add	sp, #12
 8017d02:	bd30      	pop	{r4, r5, pc}
 8017d04:	20007ab0 	.word	0x20007ab0

08017d08 <sbrk_aligned>:
 8017d08:	b570      	push	{r4, r5, r6, lr}
 8017d0a:	4e0e      	ldr	r6, [pc, #56]	; (8017d44 <sbrk_aligned+0x3c>)
 8017d0c:	460c      	mov	r4, r1
 8017d0e:	6831      	ldr	r1, [r6, #0]
 8017d10:	4605      	mov	r5, r0
 8017d12:	b911      	cbnz	r1, 8017d1a <sbrk_aligned+0x12>
 8017d14:	f000 fb4c 	bl	80183b0 <_sbrk_r>
 8017d18:	6030      	str	r0, [r6, #0]
 8017d1a:	4621      	mov	r1, r4
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	f000 fb47 	bl	80183b0 <_sbrk_r>
 8017d22:	1c43      	adds	r3, r0, #1
 8017d24:	d00a      	beq.n	8017d3c <sbrk_aligned+0x34>
 8017d26:	1cc4      	adds	r4, r0, #3
 8017d28:	f024 0403 	bic.w	r4, r4, #3
 8017d2c:	42a0      	cmp	r0, r4
 8017d2e:	d007      	beq.n	8017d40 <sbrk_aligned+0x38>
 8017d30:	1a21      	subs	r1, r4, r0
 8017d32:	4628      	mov	r0, r5
 8017d34:	f000 fb3c 	bl	80183b0 <_sbrk_r>
 8017d38:	3001      	adds	r0, #1
 8017d3a:	d101      	bne.n	8017d40 <sbrk_aligned+0x38>
 8017d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8017d40:	4620      	mov	r0, r4
 8017d42:	bd70      	pop	{r4, r5, r6, pc}
 8017d44:	20007ab4 	.word	0x20007ab4

08017d48 <_malloc_r>:
 8017d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d4c:	1ccd      	adds	r5, r1, #3
 8017d4e:	f025 0503 	bic.w	r5, r5, #3
 8017d52:	3508      	adds	r5, #8
 8017d54:	2d0c      	cmp	r5, #12
 8017d56:	bf38      	it	cc
 8017d58:	250c      	movcc	r5, #12
 8017d5a:	2d00      	cmp	r5, #0
 8017d5c:	4607      	mov	r7, r0
 8017d5e:	db01      	blt.n	8017d64 <_malloc_r+0x1c>
 8017d60:	42a9      	cmp	r1, r5
 8017d62:	d905      	bls.n	8017d70 <_malloc_r+0x28>
 8017d64:	230c      	movs	r3, #12
 8017d66:	603b      	str	r3, [r7, #0]
 8017d68:	2600      	movs	r6, #0
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d70:	4e2e      	ldr	r6, [pc, #184]	; (8017e2c <_malloc_r+0xe4>)
 8017d72:	f000 fc31 	bl	80185d8 <__malloc_lock>
 8017d76:	6833      	ldr	r3, [r6, #0]
 8017d78:	461c      	mov	r4, r3
 8017d7a:	bb34      	cbnz	r4, 8017dca <_malloc_r+0x82>
 8017d7c:	4629      	mov	r1, r5
 8017d7e:	4638      	mov	r0, r7
 8017d80:	f7ff ffc2 	bl	8017d08 <sbrk_aligned>
 8017d84:	1c43      	adds	r3, r0, #1
 8017d86:	4604      	mov	r4, r0
 8017d88:	d14d      	bne.n	8017e26 <_malloc_r+0xde>
 8017d8a:	6834      	ldr	r4, [r6, #0]
 8017d8c:	4626      	mov	r6, r4
 8017d8e:	2e00      	cmp	r6, #0
 8017d90:	d140      	bne.n	8017e14 <_malloc_r+0xcc>
 8017d92:	6823      	ldr	r3, [r4, #0]
 8017d94:	4631      	mov	r1, r6
 8017d96:	4638      	mov	r0, r7
 8017d98:	eb04 0803 	add.w	r8, r4, r3
 8017d9c:	f000 fb08 	bl	80183b0 <_sbrk_r>
 8017da0:	4580      	cmp	r8, r0
 8017da2:	d13a      	bne.n	8017e1a <_malloc_r+0xd2>
 8017da4:	6821      	ldr	r1, [r4, #0]
 8017da6:	3503      	adds	r5, #3
 8017da8:	1a6d      	subs	r5, r5, r1
 8017daa:	f025 0503 	bic.w	r5, r5, #3
 8017dae:	3508      	adds	r5, #8
 8017db0:	2d0c      	cmp	r5, #12
 8017db2:	bf38      	it	cc
 8017db4:	250c      	movcc	r5, #12
 8017db6:	4629      	mov	r1, r5
 8017db8:	4638      	mov	r0, r7
 8017dba:	f7ff ffa5 	bl	8017d08 <sbrk_aligned>
 8017dbe:	3001      	adds	r0, #1
 8017dc0:	d02b      	beq.n	8017e1a <_malloc_r+0xd2>
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	442b      	add	r3, r5
 8017dc6:	6023      	str	r3, [r4, #0]
 8017dc8:	e00e      	b.n	8017de8 <_malloc_r+0xa0>
 8017dca:	6822      	ldr	r2, [r4, #0]
 8017dcc:	1b52      	subs	r2, r2, r5
 8017dce:	d41e      	bmi.n	8017e0e <_malloc_r+0xc6>
 8017dd0:	2a0b      	cmp	r2, #11
 8017dd2:	d916      	bls.n	8017e02 <_malloc_r+0xba>
 8017dd4:	1961      	adds	r1, r4, r5
 8017dd6:	42a3      	cmp	r3, r4
 8017dd8:	6025      	str	r5, [r4, #0]
 8017dda:	bf18      	it	ne
 8017ddc:	6059      	strne	r1, [r3, #4]
 8017dde:	6863      	ldr	r3, [r4, #4]
 8017de0:	bf08      	it	eq
 8017de2:	6031      	streq	r1, [r6, #0]
 8017de4:	5162      	str	r2, [r4, r5]
 8017de6:	604b      	str	r3, [r1, #4]
 8017de8:	4638      	mov	r0, r7
 8017dea:	f104 060b 	add.w	r6, r4, #11
 8017dee:	f000 fbf9 	bl	80185e4 <__malloc_unlock>
 8017df2:	f026 0607 	bic.w	r6, r6, #7
 8017df6:	1d23      	adds	r3, r4, #4
 8017df8:	1af2      	subs	r2, r6, r3
 8017dfa:	d0b6      	beq.n	8017d6a <_malloc_r+0x22>
 8017dfc:	1b9b      	subs	r3, r3, r6
 8017dfe:	50a3      	str	r3, [r4, r2]
 8017e00:	e7b3      	b.n	8017d6a <_malloc_r+0x22>
 8017e02:	6862      	ldr	r2, [r4, #4]
 8017e04:	42a3      	cmp	r3, r4
 8017e06:	bf0c      	ite	eq
 8017e08:	6032      	streq	r2, [r6, #0]
 8017e0a:	605a      	strne	r2, [r3, #4]
 8017e0c:	e7ec      	b.n	8017de8 <_malloc_r+0xa0>
 8017e0e:	4623      	mov	r3, r4
 8017e10:	6864      	ldr	r4, [r4, #4]
 8017e12:	e7b2      	b.n	8017d7a <_malloc_r+0x32>
 8017e14:	4634      	mov	r4, r6
 8017e16:	6876      	ldr	r6, [r6, #4]
 8017e18:	e7b9      	b.n	8017d8e <_malloc_r+0x46>
 8017e1a:	230c      	movs	r3, #12
 8017e1c:	603b      	str	r3, [r7, #0]
 8017e1e:	4638      	mov	r0, r7
 8017e20:	f000 fbe0 	bl	80185e4 <__malloc_unlock>
 8017e24:	e7a1      	b.n	8017d6a <_malloc_r+0x22>
 8017e26:	6025      	str	r5, [r4, #0]
 8017e28:	e7de      	b.n	8017de8 <_malloc_r+0xa0>
 8017e2a:	bf00      	nop
 8017e2c:	20007ab0 	.word	0x20007ab0

08017e30 <__ssputs_r>:
 8017e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e34:	688e      	ldr	r6, [r1, #8]
 8017e36:	429e      	cmp	r6, r3
 8017e38:	4682      	mov	sl, r0
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	4690      	mov	r8, r2
 8017e3e:	461f      	mov	r7, r3
 8017e40:	d838      	bhi.n	8017eb4 <__ssputs_r+0x84>
 8017e42:	898a      	ldrh	r2, [r1, #12]
 8017e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e48:	d032      	beq.n	8017eb0 <__ssputs_r+0x80>
 8017e4a:	6825      	ldr	r5, [r4, #0]
 8017e4c:	6909      	ldr	r1, [r1, #16]
 8017e4e:	eba5 0901 	sub.w	r9, r5, r1
 8017e52:	6965      	ldr	r5, [r4, #20]
 8017e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	444b      	add	r3, r9
 8017e60:	106d      	asrs	r5, r5, #1
 8017e62:	429d      	cmp	r5, r3
 8017e64:	bf38      	it	cc
 8017e66:	461d      	movcc	r5, r3
 8017e68:	0553      	lsls	r3, r2, #21
 8017e6a:	d531      	bpl.n	8017ed0 <__ssputs_r+0xa0>
 8017e6c:	4629      	mov	r1, r5
 8017e6e:	f7ff ff6b 	bl	8017d48 <_malloc_r>
 8017e72:	4606      	mov	r6, r0
 8017e74:	b950      	cbnz	r0, 8017e8c <__ssputs_r+0x5c>
 8017e76:	230c      	movs	r3, #12
 8017e78:	f8ca 3000 	str.w	r3, [sl]
 8017e7c:	89a3      	ldrh	r3, [r4, #12]
 8017e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e82:	81a3      	strh	r3, [r4, #12]
 8017e84:	f04f 30ff 	mov.w	r0, #4294967295
 8017e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e8c:	6921      	ldr	r1, [r4, #16]
 8017e8e:	464a      	mov	r2, r9
 8017e90:	f7ff fa08 	bl	80172a4 <memcpy>
 8017e94:	89a3      	ldrh	r3, [r4, #12]
 8017e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e9e:	81a3      	strh	r3, [r4, #12]
 8017ea0:	6126      	str	r6, [r4, #16]
 8017ea2:	6165      	str	r5, [r4, #20]
 8017ea4:	444e      	add	r6, r9
 8017ea6:	eba5 0509 	sub.w	r5, r5, r9
 8017eaa:	6026      	str	r6, [r4, #0]
 8017eac:	60a5      	str	r5, [r4, #8]
 8017eae:	463e      	mov	r6, r7
 8017eb0:	42be      	cmp	r6, r7
 8017eb2:	d900      	bls.n	8017eb6 <__ssputs_r+0x86>
 8017eb4:	463e      	mov	r6, r7
 8017eb6:	6820      	ldr	r0, [r4, #0]
 8017eb8:	4632      	mov	r2, r6
 8017eba:	4641      	mov	r1, r8
 8017ebc:	f000 fb72 	bl	80185a4 <memmove>
 8017ec0:	68a3      	ldr	r3, [r4, #8]
 8017ec2:	1b9b      	subs	r3, r3, r6
 8017ec4:	60a3      	str	r3, [r4, #8]
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	4433      	add	r3, r6
 8017eca:	6023      	str	r3, [r4, #0]
 8017ecc:	2000      	movs	r0, #0
 8017ece:	e7db      	b.n	8017e88 <__ssputs_r+0x58>
 8017ed0:	462a      	mov	r2, r5
 8017ed2:	f000 fb8d 	bl	80185f0 <_realloc_r>
 8017ed6:	4606      	mov	r6, r0
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	d1e1      	bne.n	8017ea0 <__ssputs_r+0x70>
 8017edc:	6921      	ldr	r1, [r4, #16]
 8017ede:	4650      	mov	r0, sl
 8017ee0:	f7ff fec6 	bl	8017c70 <_free_r>
 8017ee4:	e7c7      	b.n	8017e76 <__ssputs_r+0x46>
	...

08017ee8 <_svfiprintf_r>:
 8017ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eec:	4698      	mov	r8, r3
 8017eee:	898b      	ldrh	r3, [r1, #12]
 8017ef0:	061b      	lsls	r3, r3, #24
 8017ef2:	b09d      	sub	sp, #116	; 0x74
 8017ef4:	4607      	mov	r7, r0
 8017ef6:	460d      	mov	r5, r1
 8017ef8:	4614      	mov	r4, r2
 8017efa:	d50e      	bpl.n	8017f1a <_svfiprintf_r+0x32>
 8017efc:	690b      	ldr	r3, [r1, #16]
 8017efe:	b963      	cbnz	r3, 8017f1a <_svfiprintf_r+0x32>
 8017f00:	2140      	movs	r1, #64	; 0x40
 8017f02:	f7ff ff21 	bl	8017d48 <_malloc_r>
 8017f06:	6028      	str	r0, [r5, #0]
 8017f08:	6128      	str	r0, [r5, #16]
 8017f0a:	b920      	cbnz	r0, 8017f16 <_svfiprintf_r+0x2e>
 8017f0c:	230c      	movs	r3, #12
 8017f0e:	603b      	str	r3, [r7, #0]
 8017f10:	f04f 30ff 	mov.w	r0, #4294967295
 8017f14:	e0d1      	b.n	80180ba <_svfiprintf_r+0x1d2>
 8017f16:	2340      	movs	r3, #64	; 0x40
 8017f18:	616b      	str	r3, [r5, #20]
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8017f1e:	2320      	movs	r3, #32
 8017f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f28:	2330      	movs	r3, #48	; 0x30
 8017f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80180d4 <_svfiprintf_r+0x1ec>
 8017f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f32:	f04f 0901 	mov.w	r9, #1
 8017f36:	4623      	mov	r3, r4
 8017f38:	469a      	mov	sl, r3
 8017f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f3e:	b10a      	cbz	r2, 8017f44 <_svfiprintf_r+0x5c>
 8017f40:	2a25      	cmp	r2, #37	; 0x25
 8017f42:	d1f9      	bne.n	8017f38 <_svfiprintf_r+0x50>
 8017f44:	ebba 0b04 	subs.w	fp, sl, r4
 8017f48:	d00b      	beq.n	8017f62 <_svfiprintf_r+0x7a>
 8017f4a:	465b      	mov	r3, fp
 8017f4c:	4622      	mov	r2, r4
 8017f4e:	4629      	mov	r1, r5
 8017f50:	4638      	mov	r0, r7
 8017f52:	f7ff ff6d 	bl	8017e30 <__ssputs_r>
 8017f56:	3001      	adds	r0, #1
 8017f58:	f000 80aa 	beq.w	80180b0 <_svfiprintf_r+0x1c8>
 8017f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f5e:	445a      	add	r2, fp
 8017f60:	9209      	str	r2, [sp, #36]	; 0x24
 8017f62:	f89a 3000 	ldrb.w	r3, [sl]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	f000 80a2 	beq.w	80180b0 <_svfiprintf_r+0x1c8>
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f76:	f10a 0a01 	add.w	sl, sl, #1
 8017f7a:	9304      	str	r3, [sp, #16]
 8017f7c:	9307      	str	r3, [sp, #28]
 8017f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f82:	931a      	str	r3, [sp, #104]	; 0x68
 8017f84:	4654      	mov	r4, sl
 8017f86:	2205      	movs	r2, #5
 8017f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f8c:	4851      	ldr	r0, [pc, #324]	; (80180d4 <_svfiprintf_r+0x1ec>)
 8017f8e:	f7e8 f927 	bl	80001e0 <memchr>
 8017f92:	9a04      	ldr	r2, [sp, #16]
 8017f94:	b9d8      	cbnz	r0, 8017fce <_svfiprintf_r+0xe6>
 8017f96:	06d0      	lsls	r0, r2, #27
 8017f98:	bf44      	itt	mi
 8017f9a:	2320      	movmi	r3, #32
 8017f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017fa0:	0711      	lsls	r1, r2, #28
 8017fa2:	bf44      	itt	mi
 8017fa4:	232b      	movmi	r3, #43	; 0x2b
 8017fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017faa:	f89a 3000 	ldrb.w	r3, [sl]
 8017fae:	2b2a      	cmp	r3, #42	; 0x2a
 8017fb0:	d015      	beq.n	8017fde <_svfiprintf_r+0xf6>
 8017fb2:	9a07      	ldr	r2, [sp, #28]
 8017fb4:	4654      	mov	r4, sl
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	f04f 0c0a 	mov.w	ip, #10
 8017fbc:	4621      	mov	r1, r4
 8017fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fc2:	3b30      	subs	r3, #48	; 0x30
 8017fc4:	2b09      	cmp	r3, #9
 8017fc6:	d94e      	bls.n	8018066 <_svfiprintf_r+0x17e>
 8017fc8:	b1b0      	cbz	r0, 8017ff8 <_svfiprintf_r+0x110>
 8017fca:	9207      	str	r2, [sp, #28]
 8017fcc:	e014      	b.n	8017ff8 <_svfiprintf_r+0x110>
 8017fce:	eba0 0308 	sub.w	r3, r0, r8
 8017fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8017fd6:	4313      	orrs	r3, r2
 8017fd8:	9304      	str	r3, [sp, #16]
 8017fda:	46a2      	mov	sl, r4
 8017fdc:	e7d2      	b.n	8017f84 <_svfiprintf_r+0x9c>
 8017fde:	9b03      	ldr	r3, [sp, #12]
 8017fe0:	1d19      	adds	r1, r3, #4
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	9103      	str	r1, [sp, #12]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	bfbb      	ittet	lt
 8017fea:	425b      	neglt	r3, r3
 8017fec:	f042 0202 	orrlt.w	r2, r2, #2
 8017ff0:	9307      	strge	r3, [sp, #28]
 8017ff2:	9307      	strlt	r3, [sp, #28]
 8017ff4:	bfb8      	it	lt
 8017ff6:	9204      	strlt	r2, [sp, #16]
 8017ff8:	7823      	ldrb	r3, [r4, #0]
 8017ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8017ffc:	d10c      	bne.n	8018018 <_svfiprintf_r+0x130>
 8017ffe:	7863      	ldrb	r3, [r4, #1]
 8018000:	2b2a      	cmp	r3, #42	; 0x2a
 8018002:	d135      	bne.n	8018070 <_svfiprintf_r+0x188>
 8018004:	9b03      	ldr	r3, [sp, #12]
 8018006:	1d1a      	adds	r2, r3, #4
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	9203      	str	r2, [sp, #12]
 801800c:	2b00      	cmp	r3, #0
 801800e:	bfb8      	it	lt
 8018010:	f04f 33ff 	movlt.w	r3, #4294967295
 8018014:	3402      	adds	r4, #2
 8018016:	9305      	str	r3, [sp, #20]
 8018018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80180e4 <_svfiprintf_r+0x1fc>
 801801c:	7821      	ldrb	r1, [r4, #0]
 801801e:	2203      	movs	r2, #3
 8018020:	4650      	mov	r0, sl
 8018022:	f7e8 f8dd 	bl	80001e0 <memchr>
 8018026:	b140      	cbz	r0, 801803a <_svfiprintf_r+0x152>
 8018028:	2340      	movs	r3, #64	; 0x40
 801802a:	eba0 000a 	sub.w	r0, r0, sl
 801802e:	fa03 f000 	lsl.w	r0, r3, r0
 8018032:	9b04      	ldr	r3, [sp, #16]
 8018034:	4303      	orrs	r3, r0
 8018036:	3401      	adds	r4, #1
 8018038:	9304      	str	r3, [sp, #16]
 801803a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801803e:	4826      	ldr	r0, [pc, #152]	; (80180d8 <_svfiprintf_r+0x1f0>)
 8018040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018044:	2206      	movs	r2, #6
 8018046:	f7e8 f8cb 	bl	80001e0 <memchr>
 801804a:	2800      	cmp	r0, #0
 801804c:	d038      	beq.n	80180c0 <_svfiprintf_r+0x1d8>
 801804e:	4b23      	ldr	r3, [pc, #140]	; (80180dc <_svfiprintf_r+0x1f4>)
 8018050:	bb1b      	cbnz	r3, 801809a <_svfiprintf_r+0x1b2>
 8018052:	9b03      	ldr	r3, [sp, #12]
 8018054:	3307      	adds	r3, #7
 8018056:	f023 0307 	bic.w	r3, r3, #7
 801805a:	3308      	adds	r3, #8
 801805c:	9303      	str	r3, [sp, #12]
 801805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018060:	4433      	add	r3, r6
 8018062:	9309      	str	r3, [sp, #36]	; 0x24
 8018064:	e767      	b.n	8017f36 <_svfiprintf_r+0x4e>
 8018066:	fb0c 3202 	mla	r2, ip, r2, r3
 801806a:	460c      	mov	r4, r1
 801806c:	2001      	movs	r0, #1
 801806e:	e7a5      	b.n	8017fbc <_svfiprintf_r+0xd4>
 8018070:	2300      	movs	r3, #0
 8018072:	3401      	adds	r4, #1
 8018074:	9305      	str	r3, [sp, #20]
 8018076:	4619      	mov	r1, r3
 8018078:	f04f 0c0a 	mov.w	ip, #10
 801807c:	4620      	mov	r0, r4
 801807e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018082:	3a30      	subs	r2, #48	; 0x30
 8018084:	2a09      	cmp	r2, #9
 8018086:	d903      	bls.n	8018090 <_svfiprintf_r+0x1a8>
 8018088:	2b00      	cmp	r3, #0
 801808a:	d0c5      	beq.n	8018018 <_svfiprintf_r+0x130>
 801808c:	9105      	str	r1, [sp, #20]
 801808e:	e7c3      	b.n	8018018 <_svfiprintf_r+0x130>
 8018090:	fb0c 2101 	mla	r1, ip, r1, r2
 8018094:	4604      	mov	r4, r0
 8018096:	2301      	movs	r3, #1
 8018098:	e7f0      	b.n	801807c <_svfiprintf_r+0x194>
 801809a:	ab03      	add	r3, sp, #12
 801809c:	9300      	str	r3, [sp, #0]
 801809e:	462a      	mov	r2, r5
 80180a0:	4b0f      	ldr	r3, [pc, #60]	; (80180e0 <_svfiprintf_r+0x1f8>)
 80180a2:	a904      	add	r1, sp, #16
 80180a4:	4638      	mov	r0, r7
 80180a6:	f7fb fedd 	bl	8013e64 <_printf_float>
 80180aa:	1c42      	adds	r2, r0, #1
 80180ac:	4606      	mov	r6, r0
 80180ae:	d1d6      	bne.n	801805e <_svfiprintf_r+0x176>
 80180b0:	89ab      	ldrh	r3, [r5, #12]
 80180b2:	065b      	lsls	r3, r3, #25
 80180b4:	f53f af2c 	bmi.w	8017f10 <_svfiprintf_r+0x28>
 80180b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180ba:	b01d      	add	sp, #116	; 0x74
 80180bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180c0:	ab03      	add	r3, sp, #12
 80180c2:	9300      	str	r3, [sp, #0]
 80180c4:	462a      	mov	r2, r5
 80180c6:	4b06      	ldr	r3, [pc, #24]	; (80180e0 <_svfiprintf_r+0x1f8>)
 80180c8:	a904      	add	r1, sp, #16
 80180ca:	4638      	mov	r0, r7
 80180cc:	f7fc f96e 	bl	80143ac <_printf_i>
 80180d0:	e7eb      	b.n	80180aa <_svfiprintf_r+0x1c2>
 80180d2:	bf00      	nop
 80180d4:	0801e184 	.word	0x0801e184
 80180d8:	0801e18e 	.word	0x0801e18e
 80180dc:	08013e65 	.word	0x08013e65
 80180e0:	08017e31 	.word	0x08017e31
 80180e4:	0801e18a 	.word	0x0801e18a

080180e8 <__sfputc_r>:
 80180e8:	6893      	ldr	r3, [r2, #8]
 80180ea:	3b01      	subs	r3, #1
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	b410      	push	{r4}
 80180f0:	6093      	str	r3, [r2, #8]
 80180f2:	da08      	bge.n	8018106 <__sfputc_r+0x1e>
 80180f4:	6994      	ldr	r4, [r2, #24]
 80180f6:	42a3      	cmp	r3, r4
 80180f8:	db01      	blt.n	80180fe <__sfputc_r+0x16>
 80180fa:	290a      	cmp	r1, #10
 80180fc:	d103      	bne.n	8018106 <__sfputc_r+0x1e>
 80180fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018102:	f7fd bbe9 	b.w	80158d8 <__swbuf_r>
 8018106:	6813      	ldr	r3, [r2, #0]
 8018108:	1c58      	adds	r0, r3, #1
 801810a:	6010      	str	r0, [r2, #0]
 801810c:	7019      	strb	r1, [r3, #0]
 801810e:	4608      	mov	r0, r1
 8018110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018114:	4770      	bx	lr

08018116 <__sfputs_r>:
 8018116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018118:	4606      	mov	r6, r0
 801811a:	460f      	mov	r7, r1
 801811c:	4614      	mov	r4, r2
 801811e:	18d5      	adds	r5, r2, r3
 8018120:	42ac      	cmp	r4, r5
 8018122:	d101      	bne.n	8018128 <__sfputs_r+0x12>
 8018124:	2000      	movs	r0, #0
 8018126:	e007      	b.n	8018138 <__sfputs_r+0x22>
 8018128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801812c:	463a      	mov	r2, r7
 801812e:	4630      	mov	r0, r6
 8018130:	f7ff ffda 	bl	80180e8 <__sfputc_r>
 8018134:	1c43      	adds	r3, r0, #1
 8018136:	d1f3      	bne.n	8018120 <__sfputs_r+0xa>
 8018138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801813c <_vfiprintf_r>:
 801813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018140:	460d      	mov	r5, r1
 8018142:	b09d      	sub	sp, #116	; 0x74
 8018144:	4614      	mov	r4, r2
 8018146:	4698      	mov	r8, r3
 8018148:	4606      	mov	r6, r0
 801814a:	b118      	cbz	r0, 8018154 <_vfiprintf_r+0x18>
 801814c:	6983      	ldr	r3, [r0, #24]
 801814e:	b90b      	cbnz	r3, 8018154 <_vfiprintf_r+0x18>
 8018150:	f7fe fc16 	bl	8016980 <__sinit>
 8018154:	4b89      	ldr	r3, [pc, #548]	; (801837c <_vfiprintf_r+0x240>)
 8018156:	429d      	cmp	r5, r3
 8018158:	d11b      	bne.n	8018192 <_vfiprintf_r+0x56>
 801815a:	6875      	ldr	r5, [r6, #4]
 801815c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801815e:	07d9      	lsls	r1, r3, #31
 8018160:	d405      	bmi.n	801816e <_vfiprintf_r+0x32>
 8018162:	89ab      	ldrh	r3, [r5, #12]
 8018164:	059a      	lsls	r2, r3, #22
 8018166:	d402      	bmi.n	801816e <_vfiprintf_r+0x32>
 8018168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801816a:	f7ff f81a 	bl	80171a2 <__retarget_lock_acquire_recursive>
 801816e:	89ab      	ldrh	r3, [r5, #12]
 8018170:	071b      	lsls	r3, r3, #28
 8018172:	d501      	bpl.n	8018178 <_vfiprintf_r+0x3c>
 8018174:	692b      	ldr	r3, [r5, #16]
 8018176:	b9eb      	cbnz	r3, 80181b4 <_vfiprintf_r+0x78>
 8018178:	4629      	mov	r1, r5
 801817a:	4630      	mov	r0, r6
 801817c:	f7fd fbfe 	bl	801597c <__swsetup_r>
 8018180:	b1c0      	cbz	r0, 80181b4 <_vfiprintf_r+0x78>
 8018182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018184:	07dc      	lsls	r4, r3, #31
 8018186:	d50e      	bpl.n	80181a6 <_vfiprintf_r+0x6a>
 8018188:	f04f 30ff 	mov.w	r0, #4294967295
 801818c:	b01d      	add	sp, #116	; 0x74
 801818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018192:	4b7b      	ldr	r3, [pc, #492]	; (8018380 <_vfiprintf_r+0x244>)
 8018194:	429d      	cmp	r5, r3
 8018196:	d101      	bne.n	801819c <_vfiprintf_r+0x60>
 8018198:	68b5      	ldr	r5, [r6, #8]
 801819a:	e7df      	b.n	801815c <_vfiprintf_r+0x20>
 801819c:	4b79      	ldr	r3, [pc, #484]	; (8018384 <_vfiprintf_r+0x248>)
 801819e:	429d      	cmp	r5, r3
 80181a0:	bf08      	it	eq
 80181a2:	68f5      	ldreq	r5, [r6, #12]
 80181a4:	e7da      	b.n	801815c <_vfiprintf_r+0x20>
 80181a6:	89ab      	ldrh	r3, [r5, #12]
 80181a8:	0598      	lsls	r0, r3, #22
 80181aa:	d4ed      	bmi.n	8018188 <_vfiprintf_r+0x4c>
 80181ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80181ae:	f7fe fff9 	bl	80171a4 <__retarget_lock_release_recursive>
 80181b2:	e7e9      	b.n	8018188 <_vfiprintf_r+0x4c>
 80181b4:	2300      	movs	r3, #0
 80181b6:	9309      	str	r3, [sp, #36]	; 0x24
 80181b8:	2320      	movs	r3, #32
 80181ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181be:	f8cd 800c 	str.w	r8, [sp, #12]
 80181c2:	2330      	movs	r3, #48	; 0x30
 80181c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018388 <_vfiprintf_r+0x24c>
 80181c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181cc:	f04f 0901 	mov.w	r9, #1
 80181d0:	4623      	mov	r3, r4
 80181d2:	469a      	mov	sl, r3
 80181d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181d8:	b10a      	cbz	r2, 80181de <_vfiprintf_r+0xa2>
 80181da:	2a25      	cmp	r2, #37	; 0x25
 80181dc:	d1f9      	bne.n	80181d2 <_vfiprintf_r+0x96>
 80181de:	ebba 0b04 	subs.w	fp, sl, r4
 80181e2:	d00b      	beq.n	80181fc <_vfiprintf_r+0xc0>
 80181e4:	465b      	mov	r3, fp
 80181e6:	4622      	mov	r2, r4
 80181e8:	4629      	mov	r1, r5
 80181ea:	4630      	mov	r0, r6
 80181ec:	f7ff ff93 	bl	8018116 <__sfputs_r>
 80181f0:	3001      	adds	r0, #1
 80181f2:	f000 80aa 	beq.w	801834a <_vfiprintf_r+0x20e>
 80181f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181f8:	445a      	add	r2, fp
 80181fa:	9209      	str	r2, [sp, #36]	; 0x24
 80181fc:	f89a 3000 	ldrb.w	r3, [sl]
 8018200:	2b00      	cmp	r3, #0
 8018202:	f000 80a2 	beq.w	801834a <_vfiprintf_r+0x20e>
 8018206:	2300      	movs	r3, #0
 8018208:	f04f 32ff 	mov.w	r2, #4294967295
 801820c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018210:	f10a 0a01 	add.w	sl, sl, #1
 8018214:	9304      	str	r3, [sp, #16]
 8018216:	9307      	str	r3, [sp, #28]
 8018218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801821c:	931a      	str	r3, [sp, #104]	; 0x68
 801821e:	4654      	mov	r4, sl
 8018220:	2205      	movs	r2, #5
 8018222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018226:	4858      	ldr	r0, [pc, #352]	; (8018388 <_vfiprintf_r+0x24c>)
 8018228:	f7e7 ffda 	bl	80001e0 <memchr>
 801822c:	9a04      	ldr	r2, [sp, #16]
 801822e:	b9d8      	cbnz	r0, 8018268 <_vfiprintf_r+0x12c>
 8018230:	06d1      	lsls	r1, r2, #27
 8018232:	bf44      	itt	mi
 8018234:	2320      	movmi	r3, #32
 8018236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801823a:	0713      	lsls	r3, r2, #28
 801823c:	bf44      	itt	mi
 801823e:	232b      	movmi	r3, #43	; 0x2b
 8018240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018244:	f89a 3000 	ldrb.w	r3, [sl]
 8018248:	2b2a      	cmp	r3, #42	; 0x2a
 801824a:	d015      	beq.n	8018278 <_vfiprintf_r+0x13c>
 801824c:	9a07      	ldr	r2, [sp, #28]
 801824e:	4654      	mov	r4, sl
 8018250:	2000      	movs	r0, #0
 8018252:	f04f 0c0a 	mov.w	ip, #10
 8018256:	4621      	mov	r1, r4
 8018258:	f811 3b01 	ldrb.w	r3, [r1], #1
 801825c:	3b30      	subs	r3, #48	; 0x30
 801825e:	2b09      	cmp	r3, #9
 8018260:	d94e      	bls.n	8018300 <_vfiprintf_r+0x1c4>
 8018262:	b1b0      	cbz	r0, 8018292 <_vfiprintf_r+0x156>
 8018264:	9207      	str	r2, [sp, #28]
 8018266:	e014      	b.n	8018292 <_vfiprintf_r+0x156>
 8018268:	eba0 0308 	sub.w	r3, r0, r8
 801826c:	fa09 f303 	lsl.w	r3, r9, r3
 8018270:	4313      	orrs	r3, r2
 8018272:	9304      	str	r3, [sp, #16]
 8018274:	46a2      	mov	sl, r4
 8018276:	e7d2      	b.n	801821e <_vfiprintf_r+0xe2>
 8018278:	9b03      	ldr	r3, [sp, #12]
 801827a:	1d19      	adds	r1, r3, #4
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	9103      	str	r1, [sp, #12]
 8018280:	2b00      	cmp	r3, #0
 8018282:	bfbb      	ittet	lt
 8018284:	425b      	neglt	r3, r3
 8018286:	f042 0202 	orrlt.w	r2, r2, #2
 801828a:	9307      	strge	r3, [sp, #28]
 801828c:	9307      	strlt	r3, [sp, #28]
 801828e:	bfb8      	it	lt
 8018290:	9204      	strlt	r2, [sp, #16]
 8018292:	7823      	ldrb	r3, [r4, #0]
 8018294:	2b2e      	cmp	r3, #46	; 0x2e
 8018296:	d10c      	bne.n	80182b2 <_vfiprintf_r+0x176>
 8018298:	7863      	ldrb	r3, [r4, #1]
 801829a:	2b2a      	cmp	r3, #42	; 0x2a
 801829c:	d135      	bne.n	801830a <_vfiprintf_r+0x1ce>
 801829e:	9b03      	ldr	r3, [sp, #12]
 80182a0:	1d1a      	adds	r2, r3, #4
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	9203      	str	r2, [sp, #12]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	bfb8      	it	lt
 80182aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80182ae:	3402      	adds	r4, #2
 80182b0:	9305      	str	r3, [sp, #20]
 80182b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018398 <_vfiprintf_r+0x25c>
 80182b6:	7821      	ldrb	r1, [r4, #0]
 80182b8:	2203      	movs	r2, #3
 80182ba:	4650      	mov	r0, sl
 80182bc:	f7e7 ff90 	bl	80001e0 <memchr>
 80182c0:	b140      	cbz	r0, 80182d4 <_vfiprintf_r+0x198>
 80182c2:	2340      	movs	r3, #64	; 0x40
 80182c4:	eba0 000a 	sub.w	r0, r0, sl
 80182c8:	fa03 f000 	lsl.w	r0, r3, r0
 80182cc:	9b04      	ldr	r3, [sp, #16]
 80182ce:	4303      	orrs	r3, r0
 80182d0:	3401      	adds	r4, #1
 80182d2:	9304      	str	r3, [sp, #16]
 80182d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182d8:	482c      	ldr	r0, [pc, #176]	; (801838c <_vfiprintf_r+0x250>)
 80182da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182de:	2206      	movs	r2, #6
 80182e0:	f7e7 ff7e 	bl	80001e0 <memchr>
 80182e4:	2800      	cmp	r0, #0
 80182e6:	d03f      	beq.n	8018368 <_vfiprintf_r+0x22c>
 80182e8:	4b29      	ldr	r3, [pc, #164]	; (8018390 <_vfiprintf_r+0x254>)
 80182ea:	bb1b      	cbnz	r3, 8018334 <_vfiprintf_r+0x1f8>
 80182ec:	9b03      	ldr	r3, [sp, #12]
 80182ee:	3307      	adds	r3, #7
 80182f0:	f023 0307 	bic.w	r3, r3, #7
 80182f4:	3308      	adds	r3, #8
 80182f6:	9303      	str	r3, [sp, #12]
 80182f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182fa:	443b      	add	r3, r7
 80182fc:	9309      	str	r3, [sp, #36]	; 0x24
 80182fe:	e767      	b.n	80181d0 <_vfiprintf_r+0x94>
 8018300:	fb0c 3202 	mla	r2, ip, r2, r3
 8018304:	460c      	mov	r4, r1
 8018306:	2001      	movs	r0, #1
 8018308:	e7a5      	b.n	8018256 <_vfiprintf_r+0x11a>
 801830a:	2300      	movs	r3, #0
 801830c:	3401      	adds	r4, #1
 801830e:	9305      	str	r3, [sp, #20]
 8018310:	4619      	mov	r1, r3
 8018312:	f04f 0c0a 	mov.w	ip, #10
 8018316:	4620      	mov	r0, r4
 8018318:	f810 2b01 	ldrb.w	r2, [r0], #1
 801831c:	3a30      	subs	r2, #48	; 0x30
 801831e:	2a09      	cmp	r2, #9
 8018320:	d903      	bls.n	801832a <_vfiprintf_r+0x1ee>
 8018322:	2b00      	cmp	r3, #0
 8018324:	d0c5      	beq.n	80182b2 <_vfiprintf_r+0x176>
 8018326:	9105      	str	r1, [sp, #20]
 8018328:	e7c3      	b.n	80182b2 <_vfiprintf_r+0x176>
 801832a:	fb0c 2101 	mla	r1, ip, r1, r2
 801832e:	4604      	mov	r4, r0
 8018330:	2301      	movs	r3, #1
 8018332:	e7f0      	b.n	8018316 <_vfiprintf_r+0x1da>
 8018334:	ab03      	add	r3, sp, #12
 8018336:	9300      	str	r3, [sp, #0]
 8018338:	462a      	mov	r2, r5
 801833a:	4b16      	ldr	r3, [pc, #88]	; (8018394 <_vfiprintf_r+0x258>)
 801833c:	a904      	add	r1, sp, #16
 801833e:	4630      	mov	r0, r6
 8018340:	f7fb fd90 	bl	8013e64 <_printf_float>
 8018344:	4607      	mov	r7, r0
 8018346:	1c78      	adds	r0, r7, #1
 8018348:	d1d6      	bne.n	80182f8 <_vfiprintf_r+0x1bc>
 801834a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801834c:	07d9      	lsls	r1, r3, #31
 801834e:	d405      	bmi.n	801835c <_vfiprintf_r+0x220>
 8018350:	89ab      	ldrh	r3, [r5, #12]
 8018352:	059a      	lsls	r2, r3, #22
 8018354:	d402      	bmi.n	801835c <_vfiprintf_r+0x220>
 8018356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018358:	f7fe ff24 	bl	80171a4 <__retarget_lock_release_recursive>
 801835c:	89ab      	ldrh	r3, [r5, #12]
 801835e:	065b      	lsls	r3, r3, #25
 8018360:	f53f af12 	bmi.w	8018188 <_vfiprintf_r+0x4c>
 8018364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018366:	e711      	b.n	801818c <_vfiprintf_r+0x50>
 8018368:	ab03      	add	r3, sp, #12
 801836a:	9300      	str	r3, [sp, #0]
 801836c:	462a      	mov	r2, r5
 801836e:	4b09      	ldr	r3, [pc, #36]	; (8018394 <_vfiprintf_r+0x258>)
 8018370:	a904      	add	r1, sp, #16
 8018372:	4630      	mov	r0, r6
 8018374:	f7fc f81a 	bl	80143ac <_printf_i>
 8018378:	e7e4      	b.n	8018344 <_vfiprintf_r+0x208>
 801837a:	bf00      	nop
 801837c:	0801df6c 	.word	0x0801df6c
 8018380:	0801df8c 	.word	0x0801df8c
 8018384:	0801df4c 	.word	0x0801df4c
 8018388:	0801e184 	.word	0x0801e184
 801838c:	0801e18e 	.word	0x0801e18e
 8018390:	08013e65 	.word	0x08013e65
 8018394:	08018117 	.word	0x08018117
 8018398:	0801e18a 	.word	0x0801e18a
 801839c:	00000000 	.word	0x00000000

080183a0 <nan>:
 80183a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80183a8 <nan+0x8>
 80183a4:	4770      	bx	lr
 80183a6:	bf00      	nop
 80183a8:	00000000 	.word	0x00000000
 80183ac:	7ff80000 	.word	0x7ff80000

080183b0 <_sbrk_r>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4d06      	ldr	r5, [pc, #24]	; (80183cc <_sbrk_r+0x1c>)
 80183b4:	2300      	movs	r3, #0
 80183b6:	4604      	mov	r4, r0
 80183b8:	4608      	mov	r0, r1
 80183ba:	602b      	str	r3, [r5, #0]
 80183bc:	f7ea f826 	bl	800240c <_sbrk>
 80183c0:	1c43      	adds	r3, r0, #1
 80183c2:	d102      	bne.n	80183ca <_sbrk_r+0x1a>
 80183c4:	682b      	ldr	r3, [r5, #0]
 80183c6:	b103      	cbz	r3, 80183ca <_sbrk_r+0x1a>
 80183c8:	6023      	str	r3, [r4, #0]
 80183ca:	bd38      	pop	{r3, r4, r5, pc}
 80183cc:	20007ab8 	.word	0x20007ab8

080183d0 <__sread>:
 80183d0:	b510      	push	{r4, lr}
 80183d2:	460c      	mov	r4, r1
 80183d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d8:	f000 f93a 	bl	8018650 <_read_r>
 80183dc:	2800      	cmp	r0, #0
 80183de:	bfab      	itete	ge
 80183e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80183e2:	89a3      	ldrhlt	r3, [r4, #12]
 80183e4:	181b      	addge	r3, r3, r0
 80183e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80183ea:	bfac      	ite	ge
 80183ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80183ee:	81a3      	strhlt	r3, [r4, #12]
 80183f0:	bd10      	pop	{r4, pc}

080183f2 <__swrite>:
 80183f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f6:	461f      	mov	r7, r3
 80183f8:	898b      	ldrh	r3, [r1, #12]
 80183fa:	05db      	lsls	r3, r3, #23
 80183fc:	4605      	mov	r5, r0
 80183fe:	460c      	mov	r4, r1
 8018400:	4616      	mov	r6, r2
 8018402:	d505      	bpl.n	8018410 <__swrite+0x1e>
 8018404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018408:	2302      	movs	r3, #2
 801840a:	2200      	movs	r2, #0
 801840c:	f000 f8b8 	bl	8018580 <_lseek_r>
 8018410:	89a3      	ldrh	r3, [r4, #12]
 8018412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801841a:	81a3      	strh	r3, [r4, #12]
 801841c:	4632      	mov	r2, r6
 801841e:	463b      	mov	r3, r7
 8018420:	4628      	mov	r0, r5
 8018422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018426:	f000 b837 	b.w	8018498 <_write_r>

0801842a <__sseek>:
 801842a:	b510      	push	{r4, lr}
 801842c:	460c      	mov	r4, r1
 801842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018432:	f000 f8a5 	bl	8018580 <_lseek_r>
 8018436:	1c43      	adds	r3, r0, #1
 8018438:	89a3      	ldrh	r3, [r4, #12]
 801843a:	bf15      	itete	ne
 801843c:	6560      	strne	r0, [r4, #84]	; 0x54
 801843e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018446:	81a3      	strheq	r3, [r4, #12]
 8018448:	bf18      	it	ne
 801844a:	81a3      	strhne	r3, [r4, #12]
 801844c:	bd10      	pop	{r4, pc}

0801844e <__sclose>:
 801844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018452:	f000 b851 	b.w	80184f8 <_close_r>

08018456 <strncmp>:
 8018456:	b510      	push	{r4, lr}
 8018458:	b17a      	cbz	r2, 801847a <strncmp+0x24>
 801845a:	4603      	mov	r3, r0
 801845c:	3901      	subs	r1, #1
 801845e:	1884      	adds	r4, r0, r2
 8018460:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018464:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018468:	4290      	cmp	r0, r2
 801846a:	d101      	bne.n	8018470 <strncmp+0x1a>
 801846c:	42a3      	cmp	r3, r4
 801846e:	d101      	bne.n	8018474 <strncmp+0x1e>
 8018470:	1a80      	subs	r0, r0, r2
 8018472:	bd10      	pop	{r4, pc}
 8018474:	2800      	cmp	r0, #0
 8018476:	d1f3      	bne.n	8018460 <strncmp+0xa>
 8018478:	e7fa      	b.n	8018470 <strncmp+0x1a>
 801847a:	4610      	mov	r0, r2
 801847c:	e7f9      	b.n	8018472 <strncmp+0x1c>

0801847e <__ascii_wctomb>:
 801847e:	b149      	cbz	r1, 8018494 <__ascii_wctomb+0x16>
 8018480:	2aff      	cmp	r2, #255	; 0xff
 8018482:	bf85      	ittet	hi
 8018484:	238a      	movhi	r3, #138	; 0x8a
 8018486:	6003      	strhi	r3, [r0, #0]
 8018488:	700a      	strbls	r2, [r1, #0]
 801848a:	f04f 30ff 	movhi.w	r0, #4294967295
 801848e:	bf98      	it	ls
 8018490:	2001      	movls	r0, #1
 8018492:	4770      	bx	lr
 8018494:	4608      	mov	r0, r1
 8018496:	4770      	bx	lr

08018498 <_write_r>:
 8018498:	b538      	push	{r3, r4, r5, lr}
 801849a:	4d07      	ldr	r5, [pc, #28]	; (80184b8 <_write_r+0x20>)
 801849c:	4604      	mov	r4, r0
 801849e:	4608      	mov	r0, r1
 80184a0:	4611      	mov	r1, r2
 80184a2:	2200      	movs	r2, #0
 80184a4:	602a      	str	r2, [r5, #0]
 80184a6:	461a      	mov	r2, r3
 80184a8:	f7e9 ff5f 	bl	800236a <_write>
 80184ac:	1c43      	adds	r3, r0, #1
 80184ae:	d102      	bne.n	80184b6 <_write_r+0x1e>
 80184b0:	682b      	ldr	r3, [r5, #0]
 80184b2:	b103      	cbz	r3, 80184b6 <_write_r+0x1e>
 80184b4:	6023      	str	r3, [r4, #0]
 80184b6:	bd38      	pop	{r3, r4, r5, pc}
 80184b8:	20007ab8 	.word	0x20007ab8

080184bc <__assert_func>:
 80184bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184be:	4614      	mov	r4, r2
 80184c0:	461a      	mov	r2, r3
 80184c2:	4b09      	ldr	r3, [pc, #36]	; (80184e8 <__assert_func+0x2c>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	4605      	mov	r5, r0
 80184c8:	68d8      	ldr	r0, [r3, #12]
 80184ca:	b14c      	cbz	r4, 80184e0 <__assert_func+0x24>
 80184cc:	4b07      	ldr	r3, [pc, #28]	; (80184ec <__assert_func+0x30>)
 80184ce:	9100      	str	r1, [sp, #0]
 80184d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184d4:	4906      	ldr	r1, [pc, #24]	; (80184f0 <__assert_func+0x34>)
 80184d6:	462b      	mov	r3, r5
 80184d8:	f000 f81e 	bl	8018518 <fiprintf>
 80184dc:	f000 f8ca 	bl	8018674 <abort>
 80184e0:	4b04      	ldr	r3, [pc, #16]	; (80184f4 <__assert_func+0x38>)
 80184e2:	461c      	mov	r4, r3
 80184e4:	e7f3      	b.n	80184ce <__assert_func+0x12>
 80184e6:	bf00      	nop
 80184e8:	20000230 	.word	0x20000230
 80184ec:	0801e195 	.word	0x0801e195
 80184f0:	0801e1a2 	.word	0x0801e1a2
 80184f4:	0801e1d0 	.word	0x0801e1d0

080184f8 <_close_r>:
 80184f8:	b538      	push	{r3, r4, r5, lr}
 80184fa:	4d06      	ldr	r5, [pc, #24]	; (8018514 <_close_r+0x1c>)
 80184fc:	2300      	movs	r3, #0
 80184fe:	4604      	mov	r4, r0
 8018500:	4608      	mov	r0, r1
 8018502:	602b      	str	r3, [r5, #0]
 8018504:	f7e9 ff4d 	bl	80023a2 <_close>
 8018508:	1c43      	adds	r3, r0, #1
 801850a:	d102      	bne.n	8018512 <_close_r+0x1a>
 801850c:	682b      	ldr	r3, [r5, #0]
 801850e:	b103      	cbz	r3, 8018512 <_close_r+0x1a>
 8018510:	6023      	str	r3, [r4, #0]
 8018512:	bd38      	pop	{r3, r4, r5, pc}
 8018514:	20007ab8 	.word	0x20007ab8

08018518 <fiprintf>:
 8018518:	b40e      	push	{r1, r2, r3}
 801851a:	b503      	push	{r0, r1, lr}
 801851c:	4601      	mov	r1, r0
 801851e:	ab03      	add	r3, sp, #12
 8018520:	4805      	ldr	r0, [pc, #20]	; (8018538 <fiprintf+0x20>)
 8018522:	f853 2b04 	ldr.w	r2, [r3], #4
 8018526:	6800      	ldr	r0, [r0, #0]
 8018528:	9301      	str	r3, [sp, #4]
 801852a:	f7ff fe07 	bl	801813c <_vfiprintf_r>
 801852e:	b002      	add	sp, #8
 8018530:	f85d eb04 	ldr.w	lr, [sp], #4
 8018534:	b003      	add	sp, #12
 8018536:	4770      	bx	lr
 8018538:	20000230 	.word	0x20000230

0801853c <_fstat_r>:
 801853c:	b538      	push	{r3, r4, r5, lr}
 801853e:	4d07      	ldr	r5, [pc, #28]	; (801855c <_fstat_r+0x20>)
 8018540:	2300      	movs	r3, #0
 8018542:	4604      	mov	r4, r0
 8018544:	4608      	mov	r0, r1
 8018546:	4611      	mov	r1, r2
 8018548:	602b      	str	r3, [r5, #0]
 801854a:	f7e9 ff36 	bl	80023ba <_fstat>
 801854e:	1c43      	adds	r3, r0, #1
 8018550:	d102      	bne.n	8018558 <_fstat_r+0x1c>
 8018552:	682b      	ldr	r3, [r5, #0]
 8018554:	b103      	cbz	r3, 8018558 <_fstat_r+0x1c>
 8018556:	6023      	str	r3, [r4, #0]
 8018558:	bd38      	pop	{r3, r4, r5, pc}
 801855a:	bf00      	nop
 801855c:	20007ab8 	.word	0x20007ab8

08018560 <_isatty_r>:
 8018560:	b538      	push	{r3, r4, r5, lr}
 8018562:	4d06      	ldr	r5, [pc, #24]	; (801857c <_isatty_r+0x1c>)
 8018564:	2300      	movs	r3, #0
 8018566:	4604      	mov	r4, r0
 8018568:	4608      	mov	r0, r1
 801856a:	602b      	str	r3, [r5, #0]
 801856c:	f7e9 ff35 	bl	80023da <_isatty>
 8018570:	1c43      	adds	r3, r0, #1
 8018572:	d102      	bne.n	801857a <_isatty_r+0x1a>
 8018574:	682b      	ldr	r3, [r5, #0]
 8018576:	b103      	cbz	r3, 801857a <_isatty_r+0x1a>
 8018578:	6023      	str	r3, [r4, #0]
 801857a:	bd38      	pop	{r3, r4, r5, pc}
 801857c:	20007ab8 	.word	0x20007ab8

08018580 <_lseek_r>:
 8018580:	b538      	push	{r3, r4, r5, lr}
 8018582:	4d07      	ldr	r5, [pc, #28]	; (80185a0 <_lseek_r+0x20>)
 8018584:	4604      	mov	r4, r0
 8018586:	4608      	mov	r0, r1
 8018588:	4611      	mov	r1, r2
 801858a:	2200      	movs	r2, #0
 801858c:	602a      	str	r2, [r5, #0]
 801858e:	461a      	mov	r2, r3
 8018590:	f7e9 ff2e 	bl	80023f0 <_lseek>
 8018594:	1c43      	adds	r3, r0, #1
 8018596:	d102      	bne.n	801859e <_lseek_r+0x1e>
 8018598:	682b      	ldr	r3, [r5, #0]
 801859a:	b103      	cbz	r3, 801859e <_lseek_r+0x1e>
 801859c:	6023      	str	r3, [r4, #0]
 801859e:	bd38      	pop	{r3, r4, r5, pc}
 80185a0:	20007ab8 	.word	0x20007ab8

080185a4 <memmove>:
 80185a4:	4288      	cmp	r0, r1
 80185a6:	b510      	push	{r4, lr}
 80185a8:	eb01 0402 	add.w	r4, r1, r2
 80185ac:	d902      	bls.n	80185b4 <memmove+0x10>
 80185ae:	4284      	cmp	r4, r0
 80185b0:	4623      	mov	r3, r4
 80185b2:	d807      	bhi.n	80185c4 <memmove+0x20>
 80185b4:	1e43      	subs	r3, r0, #1
 80185b6:	42a1      	cmp	r1, r4
 80185b8:	d008      	beq.n	80185cc <memmove+0x28>
 80185ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185c2:	e7f8      	b.n	80185b6 <memmove+0x12>
 80185c4:	4402      	add	r2, r0
 80185c6:	4601      	mov	r1, r0
 80185c8:	428a      	cmp	r2, r1
 80185ca:	d100      	bne.n	80185ce <memmove+0x2a>
 80185cc:	bd10      	pop	{r4, pc}
 80185ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185d6:	e7f7      	b.n	80185c8 <memmove+0x24>

080185d8 <__malloc_lock>:
 80185d8:	4801      	ldr	r0, [pc, #4]	; (80185e0 <__malloc_lock+0x8>)
 80185da:	f7fe bde2 	b.w	80171a2 <__retarget_lock_acquire_recursive>
 80185de:	bf00      	nop
 80185e0:	20007aaa 	.word	0x20007aaa

080185e4 <__malloc_unlock>:
 80185e4:	4801      	ldr	r0, [pc, #4]	; (80185ec <__malloc_unlock+0x8>)
 80185e6:	f7fe bddd 	b.w	80171a4 <__retarget_lock_release_recursive>
 80185ea:	bf00      	nop
 80185ec:	20007aaa 	.word	0x20007aaa

080185f0 <_realloc_r>:
 80185f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185f4:	4680      	mov	r8, r0
 80185f6:	4614      	mov	r4, r2
 80185f8:	460e      	mov	r6, r1
 80185fa:	b921      	cbnz	r1, 8018606 <_realloc_r+0x16>
 80185fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018600:	4611      	mov	r1, r2
 8018602:	f7ff bba1 	b.w	8017d48 <_malloc_r>
 8018606:	b92a      	cbnz	r2, 8018614 <_realloc_r+0x24>
 8018608:	f7ff fb32 	bl	8017c70 <_free_r>
 801860c:	4625      	mov	r5, r4
 801860e:	4628      	mov	r0, r5
 8018610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018614:	f000 f835 	bl	8018682 <_malloc_usable_size_r>
 8018618:	4284      	cmp	r4, r0
 801861a:	4607      	mov	r7, r0
 801861c:	d802      	bhi.n	8018624 <_realloc_r+0x34>
 801861e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018622:	d812      	bhi.n	801864a <_realloc_r+0x5a>
 8018624:	4621      	mov	r1, r4
 8018626:	4640      	mov	r0, r8
 8018628:	f7ff fb8e 	bl	8017d48 <_malloc_r>
 801862c:	4605      	mov	r5, r0
 801862e:	2800      	cmp	r0, #0
 8018630:	d0ed      	beq.n	801860e <_realloc_r+0x1e>
 8018632:	42bc      	cmp	r4, r7
 8018634:	4622      	mov	r2, r4
 8018636:	4631      	mov	r1, r6
 8018638:	bf28      	it	cs
 801863a:	463a      	movcs	r2, r7
 801863c:	f7fe fe32 	bl	80172a4 <memcpy>
 8018640:	4631      	mov	r1, r6
 8018642:	4640      	mov	r0, r8
 8018644:	f7ff fb14 	bl	8017c70 <_free_r>
 8018648:	e7e1      	b.n	801860e <_realloc_r+0x1e>
 801864a:	4635      	mov	r5, r6
 801864c:	e7df      	b.n	801860e <_realloc_r+0x1e>
	...

08018650 <_read_r>:
 8018650:	b538      	push	{r3, r4, r5, lr}
 8018652:	4d07      	ldr	r5, [pc, #28]	; (8018670 <_read_r+0x20>)
 8018654:	4604      	mov	r4, r0
 8018656:	4608      	mov	r0, r1
 8018658:	4611      	mov	r1, r2
 801865a:	2200      	movs	r2, #0
 801865c:	602a      	str	r2, [r5, #0]
 801865e:	461a      	mov	r2, r3
 8018660:	f7e9 fe66 	bl	8002330 <_read>
 8018664:	1c43      	adds	r3, r0, #1
 8018666:	d102      	bne.n	801866e <_read_r+0x1e>
 8018668:	682b      	ldr	r3, [r5, #0]
 801866a:	b103      	cbz	r3, 801866e <_read_r+0x1e>
 801866c:	6023      	str	r3, [r4, #0]
 801866e:	bd38      	pop	{r3, r4, r5, pc}
 8018670:	20007ab8 	.word	0x20007ab8

08018674 <abort>:
 8018674:	b508      	push	{r3, lr}
 8018676:	2006      	movs	r0, #6
 8018678:	f000 f834 	bl	80186e4 <raise>
 801867c:	2001      	movs	r0, #1
 801867e:	f7e9 fe4d 	bl	800231c <_exit>

08018682 <_malloc_usable_size_r>:
 8018682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018686:	1f18      	subs	r0, r3, #4
 8018688:	2b00      	cmp	r3, #0
 801868a:	bfbc      	itt	lt
 801868c:	580b      	ldrlt	r3, [r1, r0]
 801868e:	18c0      	addlt	r0, r0, r3
 8018690:	4770      	bx	lr

08018692 <_raise_r>:
 8018692:	291f      	cmp	r1, #31
 8018694:	b538      	push	{r3, r4, r5, lr}
 8018696:	4604      	mov	r4, r0
 8018698:	460d      	mov	r5, r1
 801869a:	d904      	bls.n	80186a6 <_raise_r+0x14>
 801869c:	2316      	movs	r3, #22
 801869e:	6003      	str	r3, [r0, #0]
 80186a0:	f04f 30ff 	mov.w	r0, #4294967295
 80186a4:	bd38      	pop	{r3, r4, r5, pc}
 80186a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80186a8:	b112      	cbz	r2, 80186b0 <_raise_r+0x1e>
 80186aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80186ae:	b94b      	cbnz	r3, 80186c4 <_raise_r+0x32>
 80186b0:	4620      	mov	r0, r4
 80186b2:	f000 f831 	bl	8018718 <_getpid_r>
 80186b6:	462a      	mov	r2, r5
 80186b8:	4601      	mov	r1, r0
 80186ba:	4620      	mov	r0, r4
 80186bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186c0:	f000 b818 	b.w	80186f4 <_kill_r>
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	d00a      	beq.n	80186de <_raise_r+0x4c>
 80186c8:	1c59      	adds	r1, r3, #1
 80186ca:	d103      	bne.n	80186d4 <_raise_r+0x42>
 80186cc:	2316      	movs	r3, #22
 80186ce:	6003      	str	r3, [r0, #0]
 80186d0:	2001      	movs	r0, #1
 80186d2:	e7e7      	b.n	80186a4 <_raise_r+0x12>
 80186d4:	2400      	movs	r4, #0
 80186d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80186da:	4628      	mov	r0, r5
 80186dc:	4798      	blx	r3
 80186de:	2000      	movs	r0, #0
 80186e0:	e7e0      	b.n	80186a4 <_raise_r+0x12>
	...

080186e4 <raise>:
 80186e4:	4b02      	ldr	r3, [pc, #8]	; (80186f0 <raise+0xc>)
 80186e6:	4601      	mov	r1, r0
 80186e8:	6818      	ldr	r0, [r3, #0]
 80186ea:	f7ff bfd2 	b.w	8018692 <_raise_r>
 80186ee:	bf00      	nop
 80186f0:	20000230 	.word	0x20000230

080186f4 <_kill_r>:
 80186f4:	b538      	push	{r3, r4, r5, lr}
 80186f6:	4d07      	ldr	r5, [pc, #28]	; (8018714 <_kill_r+0x20>)
 80186f8:	2300      	movs	r3, #0
 80186fa:	4604      	mov	r4, r0
 80186fc:	4608      	mov	r0, r1
 80186fe:	4611      	mov	r1, r2
 8018700:	602b      	str	r3, [r5, #0]
 8018702:	f7e9 fdfb 	bl	80022fc <_kill>
 8018706:	1c43      	adds	r3, r0, #1
 8018708:	d102      	bne.n	8018710 <_kill_r+0x1c>
 801870a:	682b      	ldr	r3, [r5, #0]
 801870c:	b103      	cbz	r3, 8018710 <_kill_r+0x1c>
 801870e:	6023      	str	r3, [r4, #0]
 8018710:	bd38      	pop	{r3, r4, r5, pc}
 8018712:	bf00      	nop
 8018714:	20007ab8 	.word	0x20007ab8

08018718 <_getpid_r>:
 8018718:	f7e9 bde8 	b.w	80022ec <_getpid>

0801871c <asin>:
 801871c:	b538      	push	{r3, r4, r5, lr}
 801871e:	ed2d 8b02 	vpush	{d8}
 8018722:	ec55 4b10 	vmov	r4, r5, d0
 8018726:	f000 f85b 	bl	80187e0 <__ieee754_asin>
 801872a:	4622      	mov	r2, r4
 801872c:	462b      	mov	r3, r5
 801872e:	4620      	mov	r0, r4
 8018730:	4629      	mov	r1, r5
 8018732:	eeb0 8a40 	vmov.f32	s16, s0
 8018736:	eef0 8a60 	vmov.f32	s17, s1
 801873a:	f7e8 f9f7 	bl	8000b2c <__aeabi_dcmpun>
 801873e:	b9a8      	cbnz	r0, 801876c <asin+0x50>
 8018740:	ec45 4b10 	vmov	d0, r4, r5
 8018744:	f000 fd7c 	bl	8019240 <fabs>
 8018748:	4b0c      	ldr	r3, [pc, #48]	; (801877c <asin+0x60>)
 801874a:	ec51 0b10 	vmov	r0, r1, d0
 801874e:	2200      	movs	r2, #0
 8018750:	f7e8 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 8018754:	b150      	cbz	r0, 801876c <asin+0x50>
 8018756:	f7fb faa3 	bl	8013ca0 <__errno>
 801875a:	ecbd 8b02 	vpop	{d8}
 801875e:	2321      	movs	r3, #33	; 0x21
 8018760:	6003      	str	r3, [r0, #0]
 8018762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018766:	4806      	ldr	r0, [pc, #24]	; (8018780 <asin+0x64>)
 8018768:	f7ff be1a 	b.w	80183a0 <nan>
 801876c:	eeb0 0a48 	vmov.f32	s0, s16
 8018770:	eef0 0a68 	vmov.f32	s1, s17
 8018774:	ecbd 8b02 	vpop	{d8}
 8018778:	bd38      	pop	{r3, r4, r5, pc}
 801877a:	bf00      	nop
 801877c:	3ff00000 	.word	0x3ff00000
 8018780:	0801e1d0 	.word	0x0801e1d0

08018784 <atan2>:
 8018784:	f000 ba40 	b.w	8018c08 <__ieee754_atan2>

08018788 <sqrt>:
 8018788:	b538      	push	{r3, r4, r5, lr}
 801878a:	ed2d 8b02 	vpush	{d8}
 801878e:	ec55 4b10 	vmov	r4, r5, d0
 8018792:	f000 fb03 	bl	8018d9c <__ieee754_sqrt>
 8018796:	4622      	mov	r2, r4
 8018798:	462b      	mov	r3, r5
 801879a:	4620      	mov	r0, r4
 801879c:	4629      	mov	r1, r5
 801879e:	eeb0 8a40 	vmov.f32	s16, s0
 80187a2:	eef0 8a60 	vmov.f32	s17, s1
 80187a6:	f7e8 f9c1 	bl	8000b2c <__aeabi_dcmpun>
 80187aa:	b990      	cbnz	r0, 80187d2 <sqrt+0x4a>
 80187ac:	2200      	movs	r2, #0
 80187ae:	2300      	movs	r3, #0
 80187b0:	4620      	mov	r0, r4
 80187b2:	4629      	mov	r1, r5
 80187b4:	f7e8 f992 	bl	8000adc <__aeabi_dcmplt>
 80187b8:	b158      	cbz	r0, 80187d2 <sqrt+0x4a>
 80187ba:	f7fb fa71 	bl	8013ca0 <__errno>
 80187be:	2321      	movs	r3, #33	; 0x21
 80187c0:	6003      	str	r3, [r0, #0]
 80187c2:	2200      	movs	r2, #0
 80187c4:	2300      	movs	r3, #0
 80187c6:	4610      	mov	r0, r2
 80187c8:	4619      	mov	r1, r3
 80187ca:	f7e8 f83f 	bl	800084c <__aeabi_ddiv>
 80187ce:	ec41 0b18 	vmov	d8, r0, r1
 80187d2:	eeb0 0a48 	vmov.f32	s0, s16
 80187d6:	eef0 0a68 	vmov.f32	s1, s17
 80187da:	ecbd 8b02 	vpop	{d8}
 80187de:	bd38      	pop	{r3, r4, r5, pc}

080187e0 <__ieee754_asin>:
 80187e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187e4:	ed2d 8b04 	vpush	{d8-d9}
 80187e8:	ec55 4b10 	vmov	r4, r5, d0
 80187ec:	4bcc      	ldr	r3, [pc, #816]	; (8018b20 <__ieee754_asin+0x340>)
 80187ee:	b083      	sub	sp, #12
 80187f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80187f4:	4598      	cmp	r8, r3
 80187f6:	9501      	str	r5, [sp, #4]
 80187f8:	dd35      	ble.n	8018866 <__ieee754_asin+0x86>
 80187fa:	ee10 3a10 	vmov	r3, s0
 80187fe:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8018802:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8018806:	ea58 0303 	orrs.w	r3, r8, r3
 801880a:	d117      	bne.n	801883c <__ieee754_asin+0x5c>
 801880c:	a3aa      	add	r3, pc, #680	; (adr r3, 8018ab8 <__ieee754_asin+0x2d8>)
 801880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018812:	ee10 0a10 	vmov	r0, s0
 8018816:	4629      	mov	r1, r5
 8018818:	f7e7 feee 	bl	80005f8 <__aeabi_dmul>
 801881c:	a3a8      	add	r3, pc, #672	; (adr r3, 8018ac0 <__ieee754_asin+0x2e0>)
 801881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018822:	4606      	mov	r6, r0
 8018824:	460f      	mov	r7, r1
 8018826:	4620      	mov	r0, r4
 8018828:	4629      	mov	r1, r5
 801882a:	f7e7 fee5 	bl	80005f8 <__aeabi_dmul>
 801882e:	4602      	mov	r2, r0
 8018830:	460b      	mov	r3, r1
 8018832:	4630      	mov	r0, r6
 8018834:	4639      	mov	r1, r7
 8018836:	f7e7 fd29 	bl	800028c <__adddf3>
 801883a:	e00b      	b.n	8018854 <__ieee754_asin+0x74>
 801883c:	ee10 2a10 	vmov	r2, s0
 8018840:	462b      	mov	r3, r5
 8018842:	ee10 0a10 	vmov	r0, s0
 8018846:	4629      	mov	r1, r5
 8018848:	f7e7 fd1e 	bl	8000288 <__aeabi_dsub>
 801884c:	4602      	mov	r2, r0
 801884e:	460b      	mov	r3, r1
 8018850:	f7e7 fffc 	bl	800084c <__aeabi_ddiv>
 8018854:	4604      	mov	r4, r0
 8018856:	460d      	mov	r5, r1
 8018858:	ec45 4b10 	vmov	d0, r4, r5
 801885c:	b003      	add	sp, #12
 801885e:	ecbd 8b04 	vpop	{d8-d9}
 8018862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018866:	4baf      	ldr	r3, [pc, #700]	; (8018b24 <__ieee754_asin+0x344>)
 8018868:	4598      	cmp	r8, r3
 801886a:	dc11      	bgt.n	8018890 <__ieee754_asin+0xb0>
 801886c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8018870:	f280 80ae 	bge.w	80189d0 <__ieee754_asin+0x1f0>
 8018874:	a394      	add	r3, pc, #592	; (adr r3, 8018ac8 <__ieee754_asin+0x2e8>)
 8018876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801887a:	ee10 0a10 	vmov	r0, s0
 801887e:	4629      	mov	r1, r5
 8018880:	f7e7 fd04 	bl	800028c <__adddf3>
 8018884:	4ba8      	ldr	r3, [pc, #672]	; (8018b28 <__ieee754_asin+0x348>)
 8018886:	2200      	movs	r2, #0
 8018888:	f7e8 f946 	bl	8000b18 <__aeabi_dcmpgt>
 801888c:	2800      	cmp	r0, #0
 801888e:	d1e3      	bne.n	8018858 <__ieee754_asin+0x78>
 8018890:	ec45 4b10 	vmov	d0, r4, r5
 8018894:	f000 fcd4 	bl	8019240 <fabs>
 8018898:	49a3      	ldr	r1, [pc, #652]	; (8018b28 <__ieee754_asin+0x348>)
 801889a:	ec53 2b10 	vmov	r2, r3, d0
 801889e:	2000      	movs	r0, #0
 80188a0:	f7e7 fcf2 	bl	8000288 <__aeabi_dsub>
 80188a4:	4ba1      	ldr	r3, [pc, #644]	; (8018b2c <__ieee754_asin+0x34c>)
 80188a6:	2200      	movs	r2, #0
 80188a8:	f7e7 fea6 	bl	80005f8 <__aeabi_dmul>
 80188ac:	a388      	add	r3, pc, #544	; (adr r3, 8018ad0 <__ieee754_asin+0x2f0>)
 80188ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b2:	4604      	mov	r4, r0
 80188b4:	460d      	mov	r5, r1
 80188b6:	f7e7 fe9f 	bl	80005f8 <__aeabi_dmul>
 80188ba:	a387      	add	r3, pc, #540	; (adr r3, 8018ad8 <__ieee754_asin+0x2f8>)
 80188bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188c0:	f7e7 fce4 	bl	800028c <__adddf3>
 80188c4:	4622      	mov	r2, r4
 80188c6:	462b      	mov	r3, r5
 80188c8:	f7e7 fe96 	bl	80005f8 <__aeabi_dmul>
 80188cc:	a384      	add	r3, pc, #528	; (adr r3, 8018ae0 <__ieee754_asin+0x300>)
 80188ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d2:	f7e7 fcd9 	bl	8000288 <__aeabi_dsub>
 80188d6:	4622      	mov	r2, r4
 80188d8:	462b      	mov	r3, r5
 80188da:	f7e7 fe8d 	bl	80005f8 <__aeabi_dmul>
 80188de:	a382      	add	r3, pc, #520	; (adr r3, 8018ae8 <__ieee754_asin+0x308>)
 80188e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188e4:	f7e7 fcd2 	bl	800028c <__adddf3>
 80188e8:	4622      	mov	r2, r4
 80188ea:	462b      	mov	r3, r5
 80188ec:	f7e7 fe84 	bl	80005f8 <__aeabi_dmul>
 80188f0:	a37f      	add	r3, pc, #508	; (adr r3, 8018af0 <__ieee754_asin+0x310>)
 80188f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f6:	f7e7 fcc7 	bl	8000288 <__aeabi_dsub>
 80188fa:	4622      	mov	r2, r4
 80188fc:	462b      	mov	r3, r5
 80188fe:	f7e7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8018902:	a37d      	add	r3, pc, #500	; (adr r3, 8018af8 <__ieee754_asin+0x318>)
 8018904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018908:	f7e7 fcc0 	bl	800028c <__adddf3>
 801890c:	4622      	mov	r2, r4
 801890e:	462b      	mov	r3, r5
 8018910:	f7e7 fe72 	bl	80005f8 <__aeabi_dmul>
 8018914:	a37a      	add	r3, pc, #488	; (adr r3, 8018b00 <__ieee754_asin+0x320>)
 8018916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801891a:	ec41 0b18 	vmov	d8, r0, r1
 801891e:	4620      	mov	r0, r4
 8018920:	4629      	mov	r1, r5
 8018922:	f7e7 fe69 	bl	80005f8 <__aeabi_dmul>
 8018926:	a378      	add	r3, pc, #480	; (adr r3, 8018b08 <__ieee754_asin+0x328>)
 8018928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801892c:	f7e7 fcac 	bl	8000288 <__aeabi_dsub>
 8018930:	4622      	mov	r2, r4
 8018932:	462b      	mov	r3, r5
 8018934:	f7e7 fe60 	bl	80005f8 <__aeabi_dmul>
 8018938:	a375      	add	r3, pc, #468	; (adr r3, 8018b10 <__ieee754_asin+0x330>)
 801893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801893e:	f7e7 fca5 	bl	800028c <__adddf3>
 8018942:	4622      	mov	r2, r4
 8018944:	462b      	mov	r3, r5
 8018946:	f7e7 fe57 	bl	80005f8 <__aeabi_dmul>
 801894a:	a373      	add	r3, pc, #460	; (adr r3, 8018b18 <__ieee754_asin+0x338>)
 801894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018950:	f7e7 fc9a 	bl	8000288 <__aeabi_dsub>
 8018954:	4622      	mov	r2, r4
 8018956:	462b      	mov	r3, r5
 8018958:	f7e7 fe4e 	bl	80005f8 <__aeabi_dmul>
 801895c:	4b72      	ldr	r3, [pc, #456]	; (8018b28 <__ieee754_asin+0x348>)
 801895e:	2200      	movs	r2, #0
 8018960:	f7e7 fc94 	bl	800028c <__adddf3>
 8018964:	ec45 4b10 	vmov	d0, r4, r5
 8018968:	4606      	mov	r6, r0
 801896a:	460f      	mov	r7, r1
 801896c:	f000 fa16 	bl	8018d9c <__ieee754_sqrt>
 8018970:	4b6f      	ldr	r3, [pc, #444]	; (8018b30 <__ieee754_asin+0x350>)
 8018972:	4598      	cmp	r8, r3
 8018974:	ec5b ab10 	vmov	sl, fp, d0
 8018978:	f340 80dc 	ble.w	8018b34 <__ieee754_asin+0x354>
 801897c:	4632      	mov	r2, r6
 801897e:	463b      	mov	r3, r7
 8018980:	ec51 0b18 	vmov	r0, r1, d8
 8018984:	f7e7 ff62 	bl	800084c <__aeabi_ddiv>
 8018988:	4652      	mov	r2, sl
 801898a:	465b      	mov	r3, fp
 801898c:	f7e7 fe34 	bl	80005f8 <__aeabi_dmul>
 8018990:	4652      	mov	r2, sl
 8018992:	465b      	mov	r3, fp
 8018994:	f7e7 fc7a 	bl	800028c <__adddf3>
 8018998:	4602      	mov	r2, r0
 801899a:	460b      	mov	r3, r1
 801899c:	f7e7 fc76 	bl	800028c <__adddf3>
 80189a0:	a347      	add	r3, pc, #284	; (adr r3, 8018ac0 <__ieee754_asin+0x2e0>)
 80189a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a6:	f7e7 fc6f 	bl	8000288 <__aeabi_dsub>
 80189aa:	4602      	mov	r2, r0
 80189ac:	460b      	mov	r3, r1
 80189ae:	a142      	add	r1, pc, #264	; (adr r1, 8018ab8 <__ieee754_asin+0x2d8>)
 80189b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80189b4:	f7e7 fc68 	bl	8000288 <__aeabi_dsub>
 80189b8:	9b01      	ldr	r3, [sp, #4]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	bfdc      	itt	le
 80189be:	4602      	movle	r2, r0
 80189c0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80189c4:	4604      	mov	r4, r0
 80189c6:	460d      	mov	r5, r1
 80189c8:	bfdc      	itt	le
 80189ca:	4614      	movle	r4, r2
 80189cc:	461d      	movle	r5, r3
 80189ce:	e743      	b.n	8018858 <__ieee754_asin+0x78>
 80189d0:	ee10 2a10 	vmov	r2, s0
 80189d4:	ee10 0a10 	vmov	r0, s0
 80189d8:	462b      	mov	r3, r5
 80189da:	4629      	mov	r1, r5
 80189dc:	f7e7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80189e0:	a33b      	add	r3, pc, #236	; (adr r3, 8018ad0 <__ieee754_asin+0x2f0>)
 80189e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e6:	4606      	mov	r6, r0
 80189e8:	460f      	mov	r7, r1
 80189ea:	f7e7 fe05 	bl	80005f8 <__aeabi_dmul>
 80189ee:	a33a      	add	r3, pc, #232	; (adr r3, 8018ad8 <__ieee754_asin+0x2f8>)
 80189f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f4:	f7e7 fc4a 	bl	800028c <__adddf3>
 80189f8:	4632      	mov	r2, r6
 80189fa:	463b      	mov	r3, r7
 80189fc:	f7e7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8018a00:	a337      	add	r3, pc, #220	; (adr r3, 8018ae0 <__ieee754_asin+0x300>)
 8018a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a06:	f7e7 fc3f 	bl	8000288 <__aeabi_dsub>
 8018a0a:	4632      	mov	r2, r6
 8018a0c:	463b      	mov	r3, r7
 8018a0e:	f7e7 fdf3 	bl	80005f8 <__aeabi_dmul>
 8018a12:	a335      	add	r3, pc, #212	; (adr r3, 8018ae8 <__ieee754_asin+0x308>)
 8018a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a18:	f7e7 fc38 	bl	800028c <__adddf3>
 8018a1c:	4632      	mov	r2, r6
 8018a1e:	463b      	mov	r3, r7
 8018a20:	f7e7 fdea 	bl	80005f8 <__aeabi_dmul>
 8018a24:	a332      	add	r3, pc, #200	; (adr r3, 8018af0 <__ieee754_asin+0x310>)
 8018a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a2a:	f7e7 fc2d 	bl	8000288 <__aeabi_dsub>
 8018a2e:	4632      	mov	r2, r6
 8018a30:	463b      	mov	r3, r7
 8018a32:	f7e7 fde1 	bl	80005f8 <__aeabi_dmul>
 8018a36:	a330      	add	r3, pc, #192	; (adr r3, 8018af8 <__ieee754_asin+0x318>)
 8018a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a3c:	f7e7 fc26 	bl	800028c <__adddf3>
 8018a40:	4632      	mov	r2, r6
 8018a42:	463b      	mov	r3, r7
 8018a44:	f7e7 fdd8 	bl	80005f8 <__aeabi_dmul>
 8018a48:	a32d      	add	r3, pc, #180	; (adr r3, 8018b00 <__ieee754_asin+0x320>)
 8018a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a4e:	4680      	mov	r8, r0
 8018a50:	4689      	mov	r9, r1
 8018a52:	4630      	mov	r0, r6
 8018a54:	4639      	mov	r1, r7
 8018a56:	f7e7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8018a5a:	a32b      	add	r3, pc, #172	; (adr r3, 8018b08 <__ieee754_asin+0x328>)
 8018a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a60:	f7e7 fc12 	bl	8000288 <__aeabi_dsub>
 8018a64:	4632      	mov	r2, r6
 8018a66:	463b      	mov	r3, r7
 8018a68:	f7e7 fdc6 	bl	80005f8 <__aeabi_dmul>
 8018a6c:	a328      	add	r3, pc, #160	; (adr r3, 8018b10 <__ieee754_asin+0x330>)
 8018a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a72:	f7e7 fc0b 	bl	800028c <__adddf3>
 8018a76:	4632      	mov	r2, r6
 8018a78:	463b      	mov	r3, r7
 8018a7a:	f7e7 fdbd 	bl	80005f8 <__aeabi_dmul>
 8018a7e:	a326      	add	r3, pc, #152	; (adr r3, 8018b18 <__ieee754_asin+0x338>)
 8018a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a84:	f7e7 fc00 	bl	8000288 <__aeabi_dsub>
 8018a88:	4632      	mov	r2, r6
 8018a8a:	463b      	mov	r3, r7
 8018a8c:	f7e7 fdb4 	bl	80005f8 <__aeabi_dmul>
 8018a90:	4b25      	ldr	r3, [pc, #148]	; (8018b28 <__ieee754_asin+0x348>)
 8018a92:	2200      	movs	r2, #0
 8018a94:	f7e7 fbfa 	bl	800028c <__adddf3>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	4640      	mov	r0, r8
 8018a9e:	4649      	mov	r1, r9
 8018aa0:	f7e7 fed4 	bl	800084c <__aeabi_ddiv>
 8018aa4:	4622      	mov	r2, r4
 8018aa6:	462b      	mov	r3, r5
 8018aa8:	f7e7 fda6 	bl	80005f8 <__aeabi_dmul>
 8018aac:	4602      	mov	r2, r0
 8018aae:	460b      	mov	r3, r1
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	4629      	mov	r1, r5
 8018ab4:	e6bf      	b.n	8018836 <__ieee754_asin+0x56>
 8018ab6:	bf00      	nop
 8018ab8:	54442d18 	.word	0x54442d18
 8018abc:	3ff921fb 	.word	0x3ff921fb
 8018ac0:	33145c07 	.word	0x33145c07
 8018ac4:	3c91a626 	.word	0x3c91a626
 8018ac8:	8800759c 	.word	0x8800759c
 8018acc:	7e37e43c 	.word	0x7e37e43c
 8018ad0:	0dfdf709 	.word	0x0dfdf709
 8018ad4:	3f023de1 	.word	0x3f023de1
 8018ad8:	7501b288 	.word	0x7501b288
 8018adc:	3f49efe0 	.word	0x3f49efe0
 8018ae0:	b5688f3b 	.word	0xb5688f3b
 8018ae4:	3fa48228 	.word	0x3fa48228
 8018ae8:	0e884455 	.word	0x0e884455
 8018aec:	3fc9c155 	.word	0x3fc9c155
 8018af0:	03eb6f7d 	.word	0x03eb6f7d
 8018af4:	3fd4d612 	.word	0x3fd4d612
 8018af8:	55555555 	.word	0x55555555
 8018afc:	3fc55555 	.word	0x3fc55555
 8018b00:	b12e9282 	.word	0xb12e9282
 8018b04:	3fb3b8c5 	.word	0x3fb3b8c5
 8018b08:	1b8d0159 	.word	0x1b8d0159
 8018b0c:	3fe6066c 	.word	0x3fe6066c
 8018b10:	9c598ac8 	.word	0x9c598ac8
 8018b14:	40002ae5 	.word	0x40002ae5
 8018b18:	1c8a2d4b 	.word	0x1c8a2d4b
 8018b1c:	40033a27 	.word	0x40033a27
 8018b20:	3fefffff 	.word	0x3fefffff
 8018b24:	3fdfffff 	.word	0x3fdfffff
 8018b28:	3ff00000 	.word	0x3ff00000
 8018b2c:	3fe00000 	.word	0x3fe00000
 8018b30:	3fef3332 	.word	0x3fef3332
 8018b34:	ee10 2a10 	vmov	r2, s0
 8018b38:	ee10 0a10 	vmov	r0, s0
 8018b3c:	465b      	mov	r3, fp
 8018b3e:	4659      	mov	r1, fp
 8018b40:	f7e7 fba4 	bl	800028c <__adddf3>
 8018b44:	4632      	mov	r2, r6
 8018b46:	463b      	mov	r3, r7
 8018b48:	ec41 0b19 	vmov	d9, r0, r1
 8018b4c:	ec51 0b18 	vmov	r0, r1, d8
 8018b50:	f7e7 fe7c 	bl	800084c <__aeabi_ddiv>
 8018b54:	4602      	mov	r2, r0
 8018b56:	460b      	mov	r3, r1
 8018b58:	ec51 0b19 	vmov	r0, r1, d9
 8018b5c:	f7e7 fd4c 	bl	80005f8 <__aeabi_dmul>
 8018b60:	f04f 0800 	mov.w	r8, #0
 8018b64:	4606      	mov	r6, r0
 8018b66:	460f      	mov	r7, r1
 8018b68:	4642      	mov	r2, r8
 8018b6a:	465b      	mov	r3, fp
 8018b6c:	4640      	mov	r0, r8
 8018b6e:	4659      	mov	r1, fp
 8018b70:	f7e7 fd42 	bl	80005f8 <__aeabi_dmul>
 8018b74:	4602      	mov	r2, r0
 8018b76:	460b      	mov	r3, r1
 8018b78:	4620      	mov	r0, r4
 8018b7a:	4629      	mov	r1, r5
 8018b7c:	f7e7 fb84 	bl	8000288 <__aeabi_dsub>
 8018b80:	4642      	mov	r2, r8
 8018b82:	4604      	mov	r4, r0
 8018b84:	460d      	mov	r5, r1
 8018b86:	465b      	mov	r3, fp
 8018b88:	4650      	mov	r0, sl
 8018b8a:	4659      	mov	r1, fp
 8018b8c:	f7e7 fb7e 	bl	800028c <__adddf3>
 8018b90:	4602      	mov	r2, r0
 8018b92:	460b      	mov	r3, r1
 8018b94:	4620      	mov	r0, r4
 8018b96:	4629      	mov	r1, r5
 8018b98:	f7e7 fe58 	bl	800084c <__aeabi_ddiv>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	f7e7 fb74 	bl	800028c <__adddf3>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	460b      	mov	r3, r1
 8018ba8:	a113      	add	r1, pc, #76	; (adr r1, 8018bf8 <__ieee754_asin+0x418>)
 8018baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bae:	f7e7 fb6b 	bl	8000288 <__aeabi_dsub>
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	460b      	mov	r3, r1
 8018bb6:	4630      	mov	r0, r6
 8018bb8:	4639      	mov	r1, r7
 8018bba:	f7e7 fb65 	bl	8000288 <__aeabi_dsub>
 8018bbe:	4642      	mov	r2, r8
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	460d      	mov	r5, r1
 8018bc4:	465b      	mov	r3, fp
 8018bc6:	4640      	mov	r0, r8
 8018bc8:	4659      	mov	r1, fp
 8018bca:	f7e7 fb5f 	bl	800028c <__adddf3>
 8018bce:	4602      	mov	r2, r0
 8018bd0:	460b      	mov	r3, r1
 8018bd2:	a10b      	add	r1, pc, #44	; (adr r1, 8018c00 <__ieee754_asin+0x420>)
 8018bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bd8:	f7e7 fb56 	bl	8000288 <__aeabi_dsub>
 8018bdc:	4602      	mov	r2, r0
 8018bde:	460b      	mov	r3, r1
 8018be0:	4620      	mov	r0, r4
 8018be2:	4629      	mov	r1, r5
 8018be4:	f7e7 fb50 	bl	8000288 <__aeabi_dsub>
 8018be8:	4602      	mov	r2, r0
 8018bea:	460b      	mov	r3, r1
 8018bec:	a104      	add	r1, pc, #16	; (adr r1, 8018c00 <__ieee754_asin+0x420>)
 8018bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bf2:	e6df      	b.n	80189b4 <__ieee754_asin+0x1d4>
 8018bf4:	f3af 8000 	nop.w
 8018bf8:	33145c07 	.word	0x33145c07
 8018bfc:	3c91a626 	.word	0x3c91a626
 8018c00:	54442d18 	.word	0x54442d18
 8018c04:	3fe921fb 	.word	0x3fe921fb

08018c08 <__ieee754_atan2>:
 8018c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c0c:	ec57 6b11 	vmov	r6, r7, d1
 8018c10:	4273      	negs	r3, r6
 8018c12:	f8df e184 	ldr.w	lr, [pc, #388]	; 8018d98 <__ieee754_atan2+0x190>
 8018c16:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018c1a:	4333      	orrs	r3, r6
 8018c1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018c20:	4573      	cmp	r3, lr
 8018c22:	ec51 0b10 	vmov	r0, r1, d0
 8018c26:	ee11 8a10 	vmov	r8, s2
 8018c2a:	d80a      	bhi.n	8018c42 <__ieee754_atan2+0x3a>
 8018c2c:	4244      	negs	r4, r0
 8018c2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018c32:	4304      	orrs	r4, r0
 8018c34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018c38:	4574      	cmp	r4, lr
 8018c3a:	ee10 9a10 	vmov	r9, s0
 8018c3e:	468c      	mov	ip, r1
 8018c40:	d907      	bls.n	8018c52 <__ieee754_atan2+0x4a>
 8018c42:	4632      	mov	r2, r6
 8018c44:	463b      	mov	r3, r7
 8018c46:	f7e7 fb21 	bl	800028c <__adddf3>
 8018c4a:	ec41 0b10 	vmov	d0, r0, r1
 8018c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8018c56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018c5a:	4334      	orrs	r4, r6
 8018c5c:	d103      	bne.n	8018c66 <__ieee754_atan2+0x5e>
 8018c5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c62:	f000 b94d 	b.w	8018f00 <atan>
 8018c66:	17bc      	asrs	r4, r7, #30
 8018c68:	f004 0402 	and.w	r4, r4, #2
 8018c6c:	ea53 0909 	orrs.w	r9, r3, r9
 8018c70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018c74:	d107      	bne.n	8018c86 <__ieee754_atan2+0x7e>
 8018c76:	2c02      	cmp	r4, #2
 8018c78:	d060      	beq.n	8018d3c <__ieee754_atan2+0x134>
 8018c7a:	2c03      	cmp	r4, #3
 8018c7c:	d1e5      	bne.n	8018c4a <__ieee754_atan2+0x42>
 8018c7e:	a142      	add	r1, pc, #264	; (adr r1, 8018d88 <__ieee754_atan2+0x180>)
 8018c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c84:	e7e1      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018c86:	ea52 0808 	orrs.w	r8, r2, r8
 8018c8a:	d106      	bne.n	8018c9a <__ieee754_atan2+0x92>
 8018c8c:	f1bc 0f00 	cmp.w	ip, #0
 8018c90:	da5f      	bge.n	8018d52 <__ieee754_atan2+0x14a>
 8018c92:	a13f      	add	r1, pc, #252	; (adr r1, 8018d90 <__ieee754_atan2+0x188>)
 8018c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c98:	e7d7      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018c9a:	4572      	cmp	r2, lr
 8018c9c:	d10f      	bne.n	8018cbe <__ieee754_atan2+0xb6>
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	f104 34ff 	add.w	r4, r4, #4294967295
 8018ca4:	d107      	bne.n	8018cb6 <__ieee754_atan2+0xae>
 8018ca6:	2c02      	cmp	r4, #2
 8018ca8:	d84c      	bhi.n	8018d44 <__ieee754_atan2+0x13c>
 8018caa:	4b35      	ldr	r3, [pc, #212]	; (8018d80 <__ieee754_atan2+0x178>)
 8018cac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018cb0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8018cb4:	e7c9      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018cb6:	2c02      	cmp	r4, #2
 8018cb8:	d848      	bhi.n	8018d4c <__ieee754_atan2+0x144>
 8018cba:	4b32      	ldr	r3, [pc, #200]	; (8018d84 <__ieee754_atan2+0x17c>)
 8018cbc:	e7f6      	b.n	8018cac <__ieee754_atan2+0xa4>
 8018cbe:	4573      	cmp	r3, lr
 8018cc0:	d0e4      	beq.n	8018c8c <__ieee754_atan2+0x84>
 8018cc2:	1a9b      	subs	r3, r3, r2
 8018cc4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018cc8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018ccc:	da1e      	bge.n	8018d0c <__ieee754_atan2+0x104>
 8018cce:	2f00      	cmp	r7, #0
 8018cd0:	da01      	bge.n	8018cd6 <__ieee754_atan2+0xce>
 8018cd2:	323c      	adds	r2, #60	; 0x3c
 8018cd4:	db1e      	blt.n	8018d14 <__ieee754_atan2+0x10c>
 8018cd6:	4632      	mov	r2, r6
 8018cd8:	463b      	mov	r3, r7
 8018cda:	f7e7 fdb7 	bl	800084c <__aeabi_ddiv>
 8018cde:	ec41 0b10 	vmov	d0, r0, r1
 8018ce2:	f000 faad 	bl	8019240 <fabs>
 8018ce6:	f000 f90b 	bl	8018f00 <atan>
 8018cea:	ec51 0b10 	vmov	r0, r1, d0
 8018cee:	2c01      	cmp	r4, #1
 8018cf0:	d013      	beq.n	8018d1a <__ieee754_atan2+0x112>
 8018cf2:	2c02      	cmp	r4, #2
 8018cf4:	d015      	beq.n	8018d22 <__ieee754_atan2+0x11a>
 8018cf6:	2c00      	cmp	r4, #0
 8018cf8:	d0a7      	beq.n	8018c4a <__ieee754_atan2+0x42>
 8018cfa:	a319      	add	r3, pc, #100	; (adr r3, 8018d60 <__ieee754_atan2+0x158>)
 8018cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d00:	f7e7 fac2 	bl	8000288 <__aeabi_dsub>
 8018d04:	a318      	add	r3, pc, #96	; (adr r3, 8018d68 <__ieee754_atan2+0x160>)
 8018d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0a:	e014      	b.n	8018d36 <__ieee754_atan2+0x12e>
 8018d0c:	a118      	add	r1, pc, #96	; (adr r1, 8018d70 <__ieee754_atan2+0x168>)
 8018d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d12:	e7ec      	b.n	8018cee <__ieee754_atan2+0xe6>
 8018d14:	2000      	movs	r0, #0
 8018d16:	2100      	movs	r1, #0
 8018d18:	e7e9      	b.n	8018cee <__ieee754_atan2+0xe6>
 8018d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d1e:	4619      	mov	r1, r3
 8018d20:	e793      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018d22:	a30f      	add	r3, pc, #60	; (adr r3, 8018d60 <__ieee754_atan2+0x158>)
 8018d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d28:	f7e7 faae 	bl	8000288 <__aeabi_dsub>
 8018d2c:	4602      	mov	r2, r0
 8018d2e:	460b      	mov	r3, r1
 8018d30:	a10d      	add	r1, pc, #52	; (adr r1, 8018d68 <__ieee754_atan2+0x160>)
 8018d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d36:	f7e7 faa7 	bl	8000288 <__aeabi_dsub>
 8018d3a:	e786      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018d3c:	a10a      	add	r1, pc, #40	; (adr r1, 8018d68 <__ieee754_atan2+0x160>)
 8018d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d42:	e782      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018d44:	a10c      	add	r1, pc, #48	; (adr r1, 8018d78 <__ieee754_atan2+0x170>)
 8018d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d4a:	e77e      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018d4c:	2000      	movs	r0, #0
 8018d4e:	2100      	movs	r1, #0
 8018d50:	e77b      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018d52:	a107      	add	r1, pc, #28	; (adr r1, 8018d70 <__ieee754_atan2+0x168>)
 8018d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d58:	e777      	b.n	8018c4a <__ieee754_atan2+0x42>
 8018d5a:	bf00      	nop
 8018d5c:	f3af 8000 	nop.w
 8018d60:	33145c07 	.word	0x33145c07
 8018d64:	3ca1a626 	.word	0x3ca1a626
 8018d68:	54442d18 	.word	0x54442d18
 8018d6c:	400921fb 	.word	0x400921fb
 8018d70:	54442d18 	.word	0x54442d18
 8018d74:	3ff921fb 	.word	0x3ff921fb
 8018d78:	54442d18 	.word	0x54442d18
 8018d7c:	3fe921fb 	.word	0x3fe921fb
 8018d80:	0801e1d8 	.word	0x0801e1d8
 8018d84:	0801e1f0 	.word	0x0801e1f0
 8018d88:	54442d18 	.word	0x54442d18
 8018d8c:	c00921fb 	.word	0xc00921fb
 8018d90:	54442d18 	.word	0x54442d18
 8018d94:	bff921fb 	.word	0xbff921fb
 8018d98:	7ff00000 	.word	0x7ff00000

08018d9c <__ieee754_sqrt>:
 8018d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da0:	ec55 4b10 	vmov	r4, r5, d0
 8018da4:	4e55      	ldr	r6, [pc, #340]	; (8018efc <__ieee754_sqrt+0x160>)
 8018da6:	43ae      	bics	r6, r5
 8018da8:	ee10 0a10 	vmov	r0, s0
 8018dac:	ee10 3a10 	vmov	r3, s0
 8018db0:	462a      	mov	r2, r5
 8018db2:	4629      	mov	r1, r5
 8018db4:	d110      	bne.n	8018dd8 <__ieee754_sqrt+0x3c>
 8018db6:	ee10 2a10 	vmov	r2, s0
 8018dba:	462b      	mov	r3, r5
 8018dbc:	f7e7 fc1c 	bl	80005f8 <__aeabi_dmul>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	4620      	mov	r0, r4
 8018dc6:	4629      	mov	r1, r5
 8018dc8:	f7e7 fa60 	bl	800028c <__adddf3>
 8018dcc:	4604      	mov	r4, r0
 8018dce:	460d      	mov	r5, r1
 8018dd0:	ec45 4b10 	vmov	d0, r4, r5
 8018dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd8:	2d00      	cmp	r5, #0
 8018dda:	dc10      	bgt.n	8018dfe <__ieee754_sqrt+0x62>
 8018ddc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018de0:	4330      	orrs	r0, r6
 8018de2:	d0f5      	beq.n	8018dd0 <__ieee754_sqrt+0x34>
 8018de4:	b15d      	cbz	r5, 8018dfe <__ieee754_sqrt+0x62>
 8018de6:	ee10 2a10 	vmov	r2, s0
 8018dea:	462b      	mov	r3, r5
 8018dec:	ee10 0a10 	vmov	r0, s0
 8018df0:	f7e7 fa4a 	bl	8000288 <__aeabi_dsub>
 8018df4:	4602      	mov	r2, r0
 8018df6:	460b      	mov	r3, r1
 8018df8:	f7e7 fd28 	bl	800084c <__aeabi_ddiv>
 8018dfc:	e7e6      	b.n	8018dcc <__ieee754_sqrt+0x30>
 8018dfe:	1512      	asrs	r2, r2, #20
 8018e00:	d074      	beq.n	8018eec <__ieee754_sqrt+0x150>
 8018e02:	07d4      	lsls	r4, r2, #31
 8018e04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018e08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018e10:	bf5e      	ittt	pl
 8018e12:	0fda      	lsrpl	r2, r3, #31
 8018e14:	005b      	lslpl	r3, r3, #1
 8018e16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018e1a:	2400      	movs	r4, #0
 8018e1c:	0fda      	lsrs	r2, r3, #31
 8018e1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018e22:	107f      	asrs	r7, r7, #1
 8018e24:	005b      	lsls	r3, r3, #1
 8018e26:	2516      	movs	r5, #22
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018e2e:	1886      	adds	r6, r0, r2
 8018e30:	428e      	cmp	r6, r1
 8018e32:	bfde      	ittt	le
 8018e34:	1b89      	suble	r1, r1, r6
 8018e36:	18b0      	addle	r0, r6, r2
 8018e38:	18a4      	addle	r4, r4, r2
 8018e3a:	0049      	lsls	r1, r1, #1
 8018e3c:	3d01      	subs	r5, #1
 8018e3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018e42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018e46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018e4a:	d1f0      	bne.n	8018e2e <__ieee754_sqrt+0x92>
 8018e4c:	462a      	mov	r2, r5
 8018e4e:	f04f 0e20 	mov.w	lr, #32
 8018e52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018e56:	4281      	cmp	r1, r0
 8018e58:	eb06 0c05 	add.w	ip, r6, r5
 8018e5c:	dc02      	bgt.n	8018e64 <__ieee754_sqrt+0xc8>
 8018e5e:	d113      	bne.n	8018e88 <__ieee754_sqrt+0xec>
 8018e60:	459c      	cmp	ip, r3
 8018e62:	d811      	bhi.n	8018e88 <__ieee754_sqrt+0xec>
 8018e64:	f1bc 0f00 	cmp.w	ip, #0
 8018e68:	eb0c 0506 	add.w	r5, ip, r6
 8018e6c:	da43      	bge.n	8018ef6 <__ieee754_sqrt+0x15a>
 8018e6e:	2d00      	cmp	r5, #0
 8018e70:	db41      	blt.n	8018ef6 <__ieee754_sqrt+0x15a>
 8018e72:	f100 0801 	add.w	r8, r0, #1
 8018e76:	1a09      	subs	r1, r1, r0
 8018e78:	459c      	cmp	ip, r3
 8018e7a:	bf88      	it	hi
 8018e7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018e80:	eba3 030c 	sub.w	r3, r3, ip
 8018e84:	4432      	add	r2, r6
 8018e86:	4640      	mov	r0, r8
 8018e88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018e8c:	f1be 0e01 	subs.w	lr, lr, #1
 8018e90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018e94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018e98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018e9c:	d1db      	bne.n	8018e56 <__ieee754_sqrt+0xba>
 8018e9e:	430b      	orrs	r3, r1
 8018ea0:	d006      	beq.n	8018eb0 <__ieee754_sqrt+0x114>
 8018ea2:	1c50      	adds	r0, r2, #1
 8018ea4:	bf13      	iteet	ne
 8018ea6:	3201      	addne	r2, #1
 8018ea8:	3401      	addeq	r4, #1
 8018eaa:	4672      	moveq	r2, lr
 8018eac:	f022 0201 	bicne.w	r2, r2, #1
 8018eb0:	1063      	asrs	r3, r4, #1
 8018eb2:	0852      	lsrs	r2, r2, #1
 8018eb4:	07e1      	lsls	r1, r4, #31
 8018eb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018eba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018ebe:	bf48      	it	mi
 8018ec0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018ec4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018ec8:	4614      	mov	r4, r2
 8018eca:	e781      	b.n	8018dd0 <__ieee754_sqrt+0x34>
 8018ecc:	0ad9      	lsrs	r1, r3, #11
 8018ece:	3815      	subs	r0, #21
 8018ed0:	055b      	lsls	r3, r3, #21
 8018ed2:	2900      	cmp	r1, #0
 8018ed4:	d0fa      	beq.n	8018ecc <__ieee754_sqrt+0x130>
 8018ed6:	02cd      	lsls	r5, r1, #11
 8018ed8:	d50a      	bpl.n	8018ef0 <__ieee754_sqrt+0x154>
 8018eda:	f1c2 0420 	rsb	r4, r2, #32
 8018ede:	fa23 f404 	lsr.w	r4, r3, r4
 8018ee2:	1e55      	subs	r5, r2, #1
 8018ee4:	4093      	lsls	r3, r2
 8018ee6:	4321      	orrs	r1, r4
 8018ee8:	1b42      	subs	r2, r0, r5
 8018eea:	e78a      	b.n	8018e02 <__ieee754_sqrt+0x66>
 8018eec:	4610      	mov	r0, r2
 8018eee:	e7f0      	b.n	8018ed2 <__ieee754_sqrt+0x136>
 8018ef0:	0049      	lsls	r1, r1, #1
 8018ef2:	3201      	adds	r2, #1
 8018ef4:	e7ef      	b.n	8018ed6 <__ieee754_sqrt+0x13a>
 8018ef6:	4680      	mov	r8, r0
 8018ef8:	e7bd      	b.n	8018e76 <__ieee754_sqrt+0xda>
 8018efa:	bf00      	nop
 8018efc:	7ff00000 	.word	0x7ff00000

08018f00 <atan>:
 8018f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f04:	ec55 4b10 	vmov	r4, r5, d0
 8018f08:	4bc3      	ldr	r3, [pc, #780]	; (8019218 <atan+0x318>)
 8018f0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018f0e:	429e      	cmp	r6, r3
 8018f10:	46ab      	mov	fp, r5
 8018f12:	dd18      	ble.n	8018f46 <atan+0x46>
 8018f14:	4bc1      	ldr	r3, [pc, #772]	; (801921c <atan+0x31c>)
 8018f16:	429e      	cmp	r6, r3
 8018f18:	dc01      	bgt.n	8018f1e <atan+0x1e>
 8018f1a:	d109      	bne.n	8018f30 <atan+0x30>
 8018f1c:	b144      	cbz	r4, 8018f30 <atan+0x30>
 8018f1e:	4622      	mov	r2, r4
 8018f20:	462b      	mov	r3, r5
 8018f22:	4620      	mov	r0, r4
 8018f24:	4629      	mov	r1, r5
 8018f26:	f7e7 f9b1 	bl	800028c <__adddf3>
 8018f2a:	4604      	mov	r4, r0
 8018f2c:	460d      	mov	r5, r1
 8018f2e:	e006      	b.n	8018f3e <atan+0x3e>
 8018f30:	f1bb 0f00 	cmp.w	fp, #0
 8018f34:	f300 8131 	bgt.w	801919a <atan+0x29a>
 8018f38:	a59b      	add	r5, pc, #620	; (adr r5, 80191a8 <atan+0x2a8>)
 8018f3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018f3e:	ec45 4b10 	vmov	d0, r4, r5
 8018f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f46:	4bb6      	ldr	r3, [pc, #728]	; (8019220 <atan+0x320>)
 8018f48:	429e      	cmp	r6, r3
 8018f4a:	dc14      	bgt.n	8018f76 <atan+0x76>
 8018f4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8018f50:	429e      	cmp	r6, r3
 8018f52:	dc0d      	bgt.n	8018f70 <atan+0x70>
 8018f54:	a396      	add	r3, pc, #600	; (adr r3, 80191b0 <atan+0x2b0>)
 8018f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5a:	ee10 0a10 	vmov	r0, s0
 8018f5e:	4629      	mov	r1, r5
 8018f60:	f7e7 f994 	bl	800028c <__adddf3>
 8018f64:	4baf      	ldr	r3, [pc, #700]	; (8019224 <atan+0x324>)
 8018f66:	2200      	movs	r2, #0
 8018f68:	f7e7 fdd6 	bl	8000b18 <__aeabi_dcmpgt>
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	d1e6      	bne.n	8018f3e <atan+0x3e>
 8018f70:	f04f 3aff 	mov.w	sl, #4294967295
 8018f74:	e02b      	b.n	8018fce <atan+0xce>
 8018f76:	f000 f963 	bl	8019240 <fabs>
 8018f7a:	4bab      	ldr	r3, [pc, #684]	; (8019228 <atan+0x328>)
 8018f7c:	429e      	cmp	r6, r3
 8018f7e:	ec55 4b10 	vmov	r4, r5, d0
 8018f82:	f300 80bf 	bgt.w	8019104 <atan+0x204>
 8018f86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8018f8a:	429e      	cmp	r6, r3
 8018f8c:	f300 80a0 	bgt.w	80190d0 <atan+0x1d0>
 8018f90:	ee10 2a10 	vmov	r2, s0
 8018f94:	ee10 0a10 	vmov	r0, s0
 8018f98:	462b      	mov	r3, r5
 8018f9a:	4629      	mov	r1, r5
 8018f9c:	f7e7 f976 	bl	800028c <__adddf3>
 8018fa0:	4ba0      	ldr	r3, [pc, #640]	; (8019224 <atan+0x324>)
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	f7e7 f970 	bl	8000288 <__aeabi_dsub>
 8018fa8:	2200      	movs	r2, #0
 8018faa:	4606      	mov	r6, r0
 8018fac:	460f      	mov	r7, r1
 8018fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018fb2:	4620      	mov	r0, r4
 8018fb4:	4629      	mov	r1, r5
 8018fb6:	f7e7 f969 	bl	800028c <__adddf3>
 8018fba:	4602      	mov	r2, r0
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	4639      	mov	r1, r7
 8018fc2:	f7e7 fc43 	bl	800084c <__aeabi_ddiv>
 8018fc6:	f04f 0a00 	mov.w	sl, #0
 8018fca:	4604      	mov	r4, r0
 8018fcc:	460d      	mov	r5, r1
 8018fce:	4622      	mov	r2, r4
 8018fd0:	462b      	mov	r3, r5
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	4629      	mov	r1, r5
 8018fd6:	f7e7 fb0f 	bl	80005f8 <__aeabi_dmul>
 8018fda:	4602      	mov	r2, r0
 8018fdc:	460b      	mov	r3, r1
 8018fde:	4680      	mov	r8, r0
 8018fe0:	4689      	mov	r9, r1
 8018fe2:	f7e7 fb09 	bl	80005f8 <__aeabi_dmul>
 8018fe6:	a374      	add	r3, pc, #464	; (adr r3, 80191b8 <atan+0x2b8>)
 8018fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fec:	4606      	mov	r6, r0
 8018fee:	460f      	mov	r7, r1
 8018ff0:	f7e7 fb02 	bl	80005f8 <__aeabi_dmul>
 8018ff4:	a372      	add	r3, pc, #456	; (adr r3, 80191c0 <atan+0x2c0>)
 8018ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ffa:	f7e7 f947 	bl	800028c <__adddf3>
 8018ffe:	4632      	mov	r2, r6
 8019000:	463b      	mov	r3, r7
 8019002:	f7e7 faf9 	bl	80005f8 <__aeabi_dmul>
 8019006:	a370      	add	r3, pc, #448	; (adr r3, 80191c8 <atan+0x2c8>)
 8019008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801900c:	f7e7 f93e 	bl	800028c <__adddf3>
 8019010:	4632      	mov	r2, r6
 8019012:	463b      	mov	r3, r7
 8019014:	f7e7 faf0 	bl	80005f8 <__aeabi_dmul>
 8019018:	a36d      	add	r3, pc, #436	; (adr r3, 80191d0 <atan+0x2d0>)
 801901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901e:	f7e7 f935 	bl	800028c <__adddf3>
 8019022:	4632      	mov	r2, r6
 8019024:	463b      	mov	r3, r7
 8019026:	f7e7 fae7 	bl	80005f8 <__aeabi_dmul>
 801902a:	a36b      	add	r3, pc, #428	; (adr r3, 80191d8 <atan+0x2d8>)
 801902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019030:	f7e7 f92c 	bl	800028c <__adddf3>
 8019034:	4632      	mov	r2, r6
 8019036:	463b      	mov	r3, r7
 8019038:	f7e7 fade 	bl	80005f8 <__aeabi_dmul>
 801903c:	a368      	add	r3, pc, #416	; (adr r3, 80191e0 <atan+0x2e0>)
 801903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019042:	f7e7 f923 	bl	800028c <__adddf3>
 8019046:	4642      	mov	r2, r8
 8019048:	464b      	mov	r3, r9
 801904a:	f7e7 fad5 	bl	80005f8 <__aeabi_dmul>
 801904e:	a366      	add	r3, pc, #408	; (adr r3, 80191e8 <atan+0x2e8>)
 8019050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019054:	4680      	mov	r8, r0
 8019056:	4689      	mov	r9, r1
 8019058:	4630      	mov	r0, r6
 801905a:	4639      	mov	r1, r7
 801905c:	f7e7 facc 	bl	80005f8 <__aeabi_dmul>
 8019060:	a363      	add	r3, pc, #396	; (adr r3, 80191f0 <atan+0x2f0>)
 8019062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019066:	f7e7 f90f 	bl	8000288 <__aeabi_dsub>
 801906a:	4632      	mov	r2, r6
 801906c:	463b      	mov	r3, r7
 801906e:	f7e7 fac3 	bl	80005f8 <__aeabi_dmul>
 8019072:	a361      	add	r3, pc, #388	; (adr r3, 80191f8 <atan+0x2f8>)
 8019074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019078:	f7e7 f906 	bl	8000288 <__aeabi_dsub>
 801907c:	4632      	mov	r2, r6
 801907e:	463b      	mov	r3, r7
 8019080:	f7e7 faba 	bl	80005f8 <__aeabi_dmul>
 8019084:	a35e      	add	r3, pc, #376	; (adr r3, 8019200 <atan+0x300>)
 8019086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801908a:	f7e7 f8fd 	bl	8000288 <__aeabi_dsub>
 801908e:	4632      	mov	r2, r6
 8019090:	463b      	mov	r3, r7
 8019092:	f7e7 fab1 	bl	80005f8 <__aeabi_dmul>
 8019096:	a35c      	add	r3, pc, #368	; (adr r3, 8019208 <atan+0x308>)
 8019098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909c:	f7e7 f8f4 	bl	8000288 <__aeabi_dsub>
 80190a0:	4632      	mov	r2, r6
 80190a2:	463b      	mov	r3, r7
 80190a4:	f7e7 faa8 	bl	80005f8 <__aeabi_dmul>
 80190a8:	4602      	mov	r2, r0
 80190aa:	460b      	mov	r3, r1
 80190ac:	4640      	mov	r0, r8
 80190ae:	4649      	mov	r1, r9
 80190b0:	f7e7 f8ec 	bl	800028c <__adddf3>
 80190b4:	4622      	mov	r2, r4
 80190b6:	462b      	mov	r3, r5
 80190b8:	f7e7 fa9e 	bl	80005f8 <__aeabi_dmul>
 80190bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80190c0:	4602      	mov	r2, r0
 80190c2:	460b      	mov	r3, r1
 80190c4:	d14b      	bne.n	801915e <atan+0x25e>
 80190c6:	4620      	mov	r0, r4
 80190c8:	4629      	mov	r1, r5
 80190ca:	f7e7 f8dd 	bl	8000288 <__aeabi_dsub>
 80190ce:	e72c      	b.n	8018f2a <atan+0x2a>
 80190d0:	ee10 0a10 	vmov	r0, s0
 80190d4:	4b53      	ldr	r3, [pc, #332]	; (8019224 <atan+0x324>)
 80190d6:	2200      	movs	r2, #0
 80190d8:	4629      	mov	r1, r5
 80190da:	f7e7 f8d5 	bl	8000288 <__aeabi_dsub>
 80190de:	4b51      	ldr	r3, [pc, #324]	; (8019224 <atan+0x324>)
 80190e0:	4606      	mov	r6, r0
 80190e2:	460f      	mov	r7, r1
 80190e4:	2200      	movs	r2, #0
 80190e6:	4620      	mov	r0, r4
 80190e8:	4629      	mov	r1, r5
 80190ea:	f7e7 f8cf 	bl	800028c <__adddf3>
 80190ee:	4602      	mov	r2, r0
 80190f0:	460b      	mov	r3, r1
 80190f2:	4630      	mov	r0, r6
 80190f4:	4639      	mov	r1, r7
 80190f6:	f7e7 fba9 	bl	800084c <__aeabi_ddiv>
 80190fa:	f04f 0a01 	mov.w	sl, #1
 80190fe:	4604      	mov	r4, r0
 8019100:	460d      	mov	r5, r1
 8019102:	e764      	b.n	8018fce <atan+0xce>
 8019104:	4b49      	ldr	r3, [pc, #292]	; (801922c <atan+0x32c>)
 8019106:	429e      	cmp	r6, r3
 8019108:	da1d      	bge.n	8019146 <atan+0x246>
 801910a:	ee10 0a10 	vmov	r0, s0
 801910e:	4b48      	ldr	r3, [pc, #288]	; (8019230 <atan+0x330>)
 8019110:	2200      	movs	r2, #0
 8019112:	4629      	mov	r1, r5
 8019114:	f7e7 f8b8 	bl	8000288 <__aeabi_dsub>
 8019118:	4b45      	ldr	r3, [pc, #276]	; (8019230 <atan+0x330>)
 801911a:	4606      	mov	r6, r0
 801911c:	460f      	mov	r7, r1
 801911e:	2200      	movs	r2, #0
 8019120:	4620      	mov	r0, r4
 8019122:	4629      	mov	r1, r5
 8019124:	f7e7 fa68 	bl	80005f8 <__aeabi_dmul>
 8019128:	4b3e      	ldr	r3, [pc, #248]	; (8019224 <atan+0x324>)
 801912a:	2200      	movs	r2, #0
 801912c:	f7e7 f8ae 	bl	800028c <__adddf3>
 8019130:	4602      	mov	r2, r0
 8019132:	460b      	mov	r3, r1
 8019134:	4630      	mov	r0, r6
 8019136:	4639      	mov	r1, r7
 8019138:	f7e7 fb88 	bl	800084c <__aeabi_ddiv>
 801913c:	f04f 0a02 	mov.w	sl, #2
 8019140:	4604      	mov	r4, r0
 8019142:	460d      	mov	r5, r1
 8019144:	e743      	b.n	8018fce <atan+0xce>
 8019146:	462b      	mov	r3, r5
 8019148:	ee10 2a10 	vmov	r2, s0
 801914c:	4939      	ldr	r1, [pc, #228]	; (8019234 <atan+0x334>)
 801914e:	2000      	movs	r0, #0
 8019150:	f7e7 fb7c 	bl	800084c <__aeabi_ddiv>
 8019154:	f04f 0a03 	mov.w	sl, #3
 8019158:	4604      	mov	r4, r0
 801915a:	460d      	mov	r5, r1
 801915c:	e737      	b.n	8018fce <atan+0xce>
 801915e:	4b36      	ldr	r3, [pc, #216]	; (8019238 <atan+0x338>)
 8019160:	4e36      	ldr	r6, [pc, #216]	; (801923c <atan+0x33c>)
 8019162:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8019166:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801916a:	e9da 2300 	ldrd	r2, r3, [sl]
 801916e:	f7e7 f88b 	bl	8000288 <__aeabi_dsub>
 8019172:	4622      	mov	r2, r4
 8019174:	462b      	mov	r3, r5
 8019176:	f7e7 f887 	bl	8000288 <__aeabi_dsub>
 801917a:	4602      	mov	r2, r0
 801917c:	460b      	mov	r3, r1
 801917e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019182:	f7e7 f881 	bl	8000288 <__aeabi_dsub>
 8019186:	f1bb 0f00 	cmp.w	fp, #0
 801918a:	4604      	mov	r4, r0
 801918c:	460d      	mov	r5, r1
 801918e:	f6bf aed6 	bge.w	8018f3e <atan+0x3e>
 8019192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019196:	461d      	mov	r5, r3
 8019198:	e6d1      	b.n	8018f3e <atan+0x3e>
 801919a:	a51d      	add	r5, pc, #116	; (adr r5, 8019210 <atan+0x310>)
 801919c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80191a0:	e6cd      	b.n	8018f3e <atan+0x3e>
 80191a2:	bf00      	nop
 80191a4:	f3af 8000 	nop.w
 80191a8:	54442d18 	.word	0x54442d18
 80191ac:	bff921fb 	.word	0xbff921fb
 80191b0:	8800759c 	.word	0x8800759c
 80191b4:	7e37e43c 	.word	0x7e37e43c
 80191b8:	e322da11 	.word	0xe322da11
 80191bc:	3f90ad3a 	.word	0x3f90ad3a
 80191c0:	24760deb 	.word	0x24760deb
 80191c4:	3fa97b4b 	.word	0x3fa97b4b
 80191c8:	a0d03d51 	.word	0xa0d03d51
 80191cc:	3fb10d66 	.word	0x3fb10d66
 80191d0:	c54c206e 	.word	0xc54c206e
 80191d4:	3fb745cd 	.word	0x3fb745cd
 80191d8:	920083ff 	.word	0x920083ff
 80191dc:	3fc24924 	.word	0x3fc24924
 80191e0:	5555550d 	.word	0x5555550d
 80191e4:	3fd55555 	.word	0x3fd55555
 80191e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80191ec:	bfa2b444 	.word	0xbfa2b444
 80191f0:	52defd9a 	.word	0x52defd9a
 80191f4:	3fadde2d 	.word	0x3fadde2d
 80191f8:	af749a6d 	.word	0xaf749a6d
 80191fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8019200:	fe231671 	.word	0xfe231671
 8019204:	3fbc71c6 	.word	0x3fbc71c6
 8019208:	9998ebc4 	.word	0x9998ebc4
 801920c:	3fc99999 	.word	0x3fc99999
 8019210:	54442d18 	.word	0x54442d18
 8019214:	3ff921fb 	.word	0x3ff921fb
 8019218:	440fffff 	.word	0x440fffff
 801921c:	7ff00000 	.word	0x7ff00000
 8019220:	3fdbffff 	.word	0x3fdbffff
 8019224:	3ff00000 	.word	0x3ff00000
 8019228:	3ff2ffff 	.word	0x3ff2ffff
 801922c:	40038000 	.word	0x40038000
 8019230:	3ff80000 	.word	0x3ff80000
 8019234:	bff00000 	.word	0xbff00000
 8019238:	0801e228 	.word	0x0801e228
 801923c:	0801e208 	.word	0x0801e208

08019240 <fabs>:
 8019240:	ec51 0b10 	vmov	r0, r1, d0
 8019244:	ee10 2a10 	vmov	r2, s0
 8019248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801924c:	ec43 2b10 	vmov	d0, r2, r3
 8019250:	4770      	bx	lr
	...

08019254 <_init>:
 8019254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019256:	bf00      	nop
 8019258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801925a:	bc08      	pop	{r3}
 801925c:	469e      	mov	lr, r3
 801925e:	4770      	bx	lr

08019260 <_fini>:
 8019260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019262:	bf00      	nop
 8019264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019266:	bc08      	pop	{r3}
 8019268:	469e      	mov	lr, r3
 801926a:	4770      	bx	lr
