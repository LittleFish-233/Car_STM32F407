
Car_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001924c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fc0  080193e0  080193e0  000293e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e3a0  0801e3a0  00030404  2**0
                  CONTENTS
  4 .ARM          00000008  0801e3a0  0801e3a0  0002e3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e3a8  0801e3a8  00030404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e3a8  0801e3a8  0002e3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e3ac  0801e3ac  0002e3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0801e3b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030404  2**0
                  CONTENTS
 10 .bss          000076bc  20000404  20000404  00030404  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20007ac0  20007ac0  00030404  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028ff5  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d13  00000000  00000000  00059429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a8  00000000  00000000  00060140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f40  00000000  00000000  000623e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032134  00000000  00000000  00064328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037def  00000000  00000000  0009645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee04b  00000000  00000000  000ce24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bc296  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2a4  00000000  00000000  001bc2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000404 	.word	0x20000404
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080193c4 	.word	0x080193c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000408 	.word	0x20000408
 80001cc:	080193c4 	.word	0x080193c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x98>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_ADC1_Init+0xa0>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC1_Init+0x98>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC1_Init+0x98>)
 80010fa:	f002 f897 	bl	800322c <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 8001104:	f000 fdd8 	bl	8001cb8 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_4;
 8001108:	2304      	movs	r3, #4
 800110a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001110:	2301      	movs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x98>)
 800111a:	f002 fa35 	bl	8003588 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 8001124:	f000 fdc8 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000420 	.word	0x20000420
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
    if(adcHandle->Instance==ADC1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_ADC_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d127      	bne.n	80011ae <HAL_ADC_MspInit+0x72>
    {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
        /* ADC1 clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_ADC_MspInit+0x80>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_ADC_MspInit+0x80>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA4         ------> ADC1_IN4
        */
        GPIO_InitStruct.Pin = BatteryLevel_Pin;
 8001196:	2310      	movs	r3, #16
 8001198:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(BatteryLevel_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_ADC_MspInit+0x84>)
 80011aa:	f003 f92b 	bl	8004404 <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
    }
}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40012000 	.word	0x40012000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_DMA_Init+0x78>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <MX_DMA_Init+0x78>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_DMA_Init+0x78>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_DMA_Init+0x78>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_DMA_Init+0x78>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_DMA_Init+0x78>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 14, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210e      	movs	r1, #14
 8001206:	200f      	movs	r0, #15
 8001208:	f002 fcb7 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800120c:	200f      	movs	r0, #15
 800120e:	f002 fcd0 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 14, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	210e      	movs	r1, #14
 8001216:	203b      	movs	r0, #59	; 0x3b
 8001218:	f002 fcaf 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800121c:	203b      	movs	r0, #59	; 0x3b
 800121e:	f002 fcc8 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 14, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	210e      	movs	r1, #14
 8001226:	2045      	movs	r0, #69	; 0x45
 8001228:	f002 fca7 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800122c:	2045      	movs	r0, #69	; 0x45
 800122e:	f002 fcc0 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <MX_GPIO_Init>:
              * Output
              * EVENT_OUT
              * EXTI
*/
void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <MX_GPIO_Init+0x1f0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a74      	ldr	r2, [pc, #464]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a6d      	ldr	r2, [pc, #436]	; (8001430 <MX_GPIO_Init+0x1f0>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a66      	ldr	r2, [pc, #408]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a58      	ldr	r2, [pc, #352]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a51      	ldr	r2, [pc, #324]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <MX_GPIO_Init+0x1f0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a43      	ldr	r2, [pc, #268]	; (8001430 <MX_GPIO_Init+0x1f0>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <MX_GPIO_Init+0x1f0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOF, Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001336:	2200      	movs	r2, #0
 8001338:	f240 41fc 	movw	r1, #1276	; 0x4fc
 800133c:	483d      	ldr	r0, [pc, #244]	; (8001434 <MX_GPIO_Init+0x1f4>)
 800133e:	f003 fa15 	bl	800476c <HAL_GPIO_WritePin>
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOG, Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 8001342:	2200      	movs	r2, #0
 8001344:	217f      	movs	r1, #127	; 0x7f
 8001346:	483c      	ldr	r0, [pc, #240]	; (8001438 <MX_GPIO_Init+0x1f8>)
 8001348:	f003 fa10 	bl	800476c <HAL_GPIO_WritePin>
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	483a      	ldr	r0, [pc, #232]	; (800143c <MX_GPIO_Init+0x1fc>)
 8001354:	f003 fa0a 	bl	800476c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = Key_Stop_Pin;
 8001358:	2308      	movs	r3, #8
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Key_Stop_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <MX_GPIO_Init+0x200>)
 800136e:	f003 f849 	bl	8004404 <HAL_GPIO_Init>

    /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                                                     PFPin PFPin PFPin */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001372:	f240 43fc 	movw	r3, #1276	; 0x4fc
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	482a      	ldr	r0, [pc, #168]	; (8001434 <MX_GPIO_Init+0x1f4>)
 800138c:	f003 f83a 	bl	8004404 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SIM_SD_Inser_Pin;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800139a:	2302      	movs	r3, #2
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_SD_Inser_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <MX_GPIO_Init+0x1f4>)
 80013a6:	f003 f82d 	bl	8004404 <HAL_GPIO_Init>

    /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                                                     PGPin PGPin PGPin */
    GPIO_InitStruct.Pin = Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 80013aa:	237f      	movs	r3, #127	; 0x7f
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <MX_GPIO_Init+0x1f8>)
 80013c2:	f003 f81f 	bl	8004404 <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin */
    GPIO_InitStruct.Pin = Infrared1_Pin|Infrared2_Pin;
 80013c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <MX_GPIO_Init+0x1fc>)
 80013dc:	f003 f812 	bl	8004404 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 80013e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <MX_GPIO_Init+0x1fc>)
 80013fa:	f003 f803 	bl	8004404 <HAL_GPIO_Init>

    /*Configure GPIO pins : PDPin PDPin */
    GPIO_InitStruct.Pin = Infrared3_Pin|Infrared4_Pin;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_GPIO_Init+0x204>)
 8001414:	f002 fff6 	bl	8004404 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2102      	movs	r1, #2
 800141c:	2009      	movs	r0, #9
 800141e:	f002 fbac 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001422:	2009      	movs	r0, #9
 8001424:	f002 fbc5 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40020400 	.word	0x40020400
 8001440:	40021000 	.word	0x40021000
 8001444:	40020c00 	.word	0x40020c00

08001448 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C1_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C1_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C1_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C1_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C1_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C1_Init+0x50>)
 8001486:	f003 f9a3 	bl	80047d0 <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001490:	f000 fc12 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000468 	.word	0x20000468
 800149c:	40005400 	.word	0x40005400
 80014a0:	00061a80 	.word	0x00061a80

080014a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
    if(i2cHandle->Instance==I2C1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_I2C_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12b      	bne.n	800151e <HAL_I2C_MspInit+0x7a>
    {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_I2C_MspInit+0x88>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_I2C_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6         ------> I2C1_SCL
        PB7         ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 80014e2:	23c0      	movs	r3, #192	; 0xc0
 80014e4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e6:	2312      	movs	r3, #18
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f2:	2304      	movs	r3, #4
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <HAL_I2C_MspInit+0x8c>)
 80014fe:	f002 ff81 	bl	8004404 <HAL_GPIO_Init>

        /* I2C1 clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_I2C_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_I2C_MspInit+0x88>)
 800150c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_I2C_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
    }
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40005400 	.word	0x40005400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400

08001534 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001538:	f001 fde2 	bl	8003100 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800153c:	f000 f858 	bl	80015f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001540:	f7ff fe7e 	bl	8001240 <MX_GPIO_Init>
	MX_DMA_Init();
 8001544:	f7ff fe3e 	bl	80011c4 <MX_DMA_Init>
	MX_TIM14_Init();
 8001548:	f001 fa4e 	bl	80029e8 <MX_TIM14_Init>
	MX_TIM1_Init();
 800154c:	f000 ffa8 	bl	80024a0 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001550:	f000 fffe 	bl	8002550 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001554:	f001 f894 	bl	8002680 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001558:	f001 f8e6 	bl	8002728 <MX_TIM5_Init>
	MX_ADC1_Init();
 800155c:	f7ff fd9c 	bl	8001098 <MX_ADC1_Init>
	MX_TIM6_Init();
 8001560:	f001 f936 	bl	80027d0 <MX_TIM6_Init>
	MX_USART1_UART_Init();
 8001564:	f001 fcca 	bl	8002efc <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8001568:	f001 f968 	bl	800283c <MX_TIM7_Init>
	MX_TIM13_Init();
 800156c:	f001 fa18 	bl	80029a0 <MX_TIM13_Init>
	MX_SPI1_Init();
 8001570:	f000 fcba 	bl	8001ee8 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001574:	f000 fcee 	bl	8001f54 <MX_SPI2_Init>
	MX_TIM8_Init();
 8001578:	f001 f996 	bl	80028a8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800157c:	f001 fce8 	bl	8002f50 <MX_USART2_UART_Init>
	MX_SDIO_SD_Init();
 8001580:	f000 fba0 	bl	8001cc4 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8001584:	f009 fca6 	bl	800aed4 <MX_FATFS_Init>
	MX_I2C1_Init();
 8001588:	f7ff ff5e 	bl	8001448 <MX_I2C1_Init>
	MX_TIM11_Init();
 800158c:	f001 f9e4 	bl	8002958 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	//初始化呼吸灯 指示运行
	HAL_TIM_Base_Start_IT(&htim14);
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <main+0xac>)
 8001592:	f006 fcf5 	bl	8007f80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <main+0xac>)
 800159a:	f006 fde9 	bl	8008170 <HAL_TIM_PWM_Start>
	//清空休眠计数
	Clean_Dormancy_Count();
 800159e:	f00f fafb 	bl	8010b98 <Clean_Dormancy_Count>
	//初始化文件系统
	Init_FATFS();
 80015a2:	f011 fca3 	bl	8012eec <Init_FATFS>
	//使能定时器6中断 定期更新速度
	HAL_TIM_Base_Start_IT(&htim6);
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <main+0xb0>)
 80015a8:	f006 fcea 	bl	8007f80 <HAL_TIM_Base_Start_IT>
	//初始化OLED
	Screen_Init();
 80015ac:	f012 fa00 	bl	80139b0 <Screen_Init>
	
	//初始化串口
	Init_USART();
 80015b0:	f012 fb60 	bl	8013c74 <Init_USART>
	
	//初始化小车控制系统
	InitCar();
 80015b4:	f011 fa0a 	bl	80129cc <InitCar>
	//初始化地图
	InitMap();
 80015b8:	f010 fb04 	bl	8011bc4 <InitMap>
	//初始化MPU
	InitMPU();
 80015bc:	f00f fa8e 	bl	8010adc <InitMPU>
	//定期更新偏航角
	HAL_TIM_Base_Start_IT(&htim11);
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <main+0xb4>)
 80015c2:	f006 fcdd 	bl	8007f80 <HAL_TIM_Base_Start_IT>
	
	//测试
	//SetMotorSpeed(Motor_3, 100);
	//SetCarSpeed(10, 0, 0);
	//清屏
	Screen_Clear();
 80015c6:	f012 fa0f 	bl	80139e8 <Screen_Clear>
	LED2_H();
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <main+0xb8>)
 80015d2:	f003 f8cb 	bl	800476c <HAL_GPIO_WritePin>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		OLED_Proc();
 80015d6:	f000 f875 	bl	80016c4 <OLED_Proc>
		SendData_Proc();
 80015da:	f000 f987 	bl	80018ec <SendData_Proc>
		OLED_Proc();
 80015de:	e7fa      	b.n	80015d6 <main+0xa2>
 80015e0:	200011c4 	.word	0x200011c4
 80015e4:	2000105c 	.word	0x2000105c
 80015e8:	20001134 	.word	0x20001134
 80015ec:	40021400 	.word	0x40021400

080015f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2230      	movs	r2, #48	; 0x30
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f012 fc3e 	bl	8013e80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
	
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <SystemClock_Config+0xcc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <SystemClock_Config+0xcc>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <SystemClock_Config+0xcc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <SystemClock_Config+0xd0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <SystemClock_Config+0xd0>)
 800163a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <SystemClock_Config+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
	
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001654:	2310      	movs	r3, #16
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001658:	2302      	movs	r3, #2
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001660:	2308      	movs	r3, #8
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001664:	23a8      	movs	r3, #168	; 0xa8
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800166c:	2307      	movs	r3, #7
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f883 	bl	8005780 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001680:	f000 fb1a 	bl	8001cb8 <Error_Handler>
	}
	
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001684:	230f      	movs	r3, #15
 8001686:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001694:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	61fb      	str	r3, [r7, #28]
	
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2105      	movs	r1, #5
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fae4 	bl	8005c70 <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80016ae:	f000 fb03 	bl	8001cb8 <Error_Handler>
	}
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	; 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000

080016c4 <OLED_Proc>:

/* USER CODE BEGIN 4 */

//显示屏
void OLED_Proc()
{
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af02      	add	r7, sp, #8
	if (uwTick - uwTick_OLED < 500)
 80016ca:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <OLED_Proc+0x1ec>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <OLED_Proc+0x1f0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d8:	f0c0 80e6 	bcc.w	80018a8 <OLED_Proc+0x1e4>
	{
		return;
	}
	uwTick_OLED = uwTick;
 80016dc:	4b74      	ldr	r3, [pc, #464]	; (80018b0 <OLED_Proc+0x1ec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a74      	ldr	r2, [pc, #464]	; (80018b4 <OLED_Proc+0x1f0>)
 80016e2:	6013      	str	r3, [r2, #0]
	
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Actual_Speeds[0], Motor_Actual_Speeds[1]);
 80016e4:	4b74      	ldr	r3, [pc, #464]	; (80018b8 <OLED_Proc+0x1f4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	4b71      	ldr	r3, [pc, #452]	; (80018b8 <OLED_Proc+0x1f4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	e9cd 2300 	strd	r2, r3, [sp]
 8001704:	4622      	mov	r2, r4
 8001706:	462b      	mov	r3, r5
 8001708:	496c      	ldr	r1, [pc, #432]	; (80018bc <OLED_Proc+0x1f8>)
 800170a:	486d      	ldr	r0, [pc, #436]	; (80018c0 <OLED_Proc+0x1fc>)
 800170c:	f013 face 	bl	8014cac <siprintf>
	Screen_ShowStringLine(0, String_Line, Font_Size);
 8001710:	2218      	movs	r2, #24
 8001712:	496b      	ldr	r1, [pc, #428]	; (80018c0 <OLED_Proc+0x1fc>)
 8001714:	2000      	movs	r0, #0
 8001716:	f012 f955 	bl	80139c4 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D: %5.1f", Motor_Actual_Speeds[2], Motor_Actual_Speeds[3]);
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <OLED_Proc+0x1f4>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff12 	bl	8000548 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <OLED_Proc+0x1f4>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff0b 	bl	8000548 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	e9cd 2300 	strd	r2, r3, [sp]
 800173a:	4622      	mov	r2, r4
 800173c:	462b      	mov	r3, r5
 800173e:	4961      	ldr	r1, [pc, #388]	; (80018c4 <OLED_Proc+0x200>)
 8001740:	485f      	ldr	r0, [pc, #380]	; (80018c0 <OLED_Proc+0x1fc>)
 8001742:	f013 fab3 	bl	8014cac <siprintf>
	Screen_ShowStringLine(1, String_Line, Font_Size);
 8001746:	2218      	movs	r2, #24
 8001748:	495d      	ldr	r1, [pc, #372]	; (80018c0 <OLED_Proc+0x1fc>)
 800174a:	2001      	movs	r0, #1
 800174c:	f012 f93a 	bl	80139c4 <Screen_ShowStringLine>
	
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Expected_Speeds[0], Motor_Expected_Speeds[1]);
 8001750:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <OLED_Proc+0x204>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fef7 	bl	8000548 <__aeabi_f2d>
 800175a:	4604      	mov	r4, r0
 800175c:	460d      	mov	r5, r1
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <OLED_Proc+0x204>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fef0 	bl	8000548 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	e9cd 2300 	strd	r2, r3, [sp]
 8001770:	4622      	mov	r2, r4
 8001772:	462b      	mov	r3, r5
 8001774:	4951      	ldr	r1, [pc, #324]	; (80018bc <OLED_Proc+0x1f8>)
 8001776:	4852      	ldr	r0, [pc, #328]	; (80018c0 <OLED_Proc+0x1fc>)
 8001778:	f013 fa98 	bl	8014cac <siprintf>
	Screen_ShowStringLine(3, String_Line, Font_Size);
 800177c:	2218      	movs	r2, #24
 800177e:	4950      	ldr	r1, [pc, #320]	; (80018c0 <OLED_Proc+0x1fc>)
 8001780:	2003      	movs	r0, #3
 8001782:	f012 f91f 	bl	80139c4 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Expected_Speeds[2], Motor_Expected_Speeds[3]);
 8001786:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <OLED_Proc+0x204>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fedc 	bl	8000548 <__aeabi_f2d>
 8001790:	4604      	mov	r4, r0
 8001792:	460d      	mov	r5, r1
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <OLED_Proc+0x204>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fed5 	bl	8000548 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9cd 2300 	strd	r2, r3, [sp]
 80017a6:	4622      	mov	r2, r4
 80017a8:	462b      	mov	r3, r5
 80017aa:	4948      	ldr	r1, [pc, #288]	; (80018cc <OLED_Proc+0x208>)
 80017ac:	4844      	ldr	r0, [pc, #272]	; (80018c0 <OLED_Proc+0x1fc>)
 80017ae:	f013 fa7d 	bl	8014cac <siprintf>
	Screen_ShowStringLine(4, String_Line, Font_Size);
 80017b2:	2218      	movs	r2, #24
 80017b4:	4942      	ldr	r1, [pc, #264]	; (80018c0 <OLED_Proc+0x1fc>)
 80017b6:	2004      	movs	r0, #4
 80017b8:	f012 f904 	bl	80139c4 <Screen_ShowStringLine>
	
	sprintf(String_Line, "Yaw:%5.1f", YawAngle);
 80017bc:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <OLED_Proc+0x20c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4942      	ldr	r1, [pc, #264]	; (80018d4 <OLED_Proc+0x210>)
 80017cc:	483c      	ldr	r0, [pc, #240]	; (80018c0 <OLED_Proc+0x1fc>)
 80017ce:	f013 fa6d 	bl	8014cac <siprintf>
	Screen_ShowStringLine(6, String_Line, Font_Size);
 80017d2:	2218      	movs	r2, #24
 80017d4:	493a      	ldr	r1, [pc, #232]	; (80018c0 <OLED_Proc+0x1fc>)
 80017d6:	2006      	movs	r0, #6
 80017d8:	f012 f8f4 	bl	80139c4 <Screen_ShowStringLine>
	
	UpdateInfraredData();
 80017dc:	f011 f85a 	bl	8012894 <UpdateInfraredData>
	sprintf(String_Line, "     %c %c %c %c", Infrared_Datas[Infrared_Right] ? '#' : ' ', Infrared_Datas[Infrared_Center_Right] ? '#' : ' ', Infrared_Datas[Infrared_Center_Left] ? '#' : ' ', Infrared_Datas[Infrared_Left] ? '#' : ' ');
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <OLED_Proc+0x214>)
 80017e2:	78db      	ldrb	r3, [r3, #3]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <OLED_Proc+0x128>
 80017e8:	2123      	movs	r1, #35	; 0x23
 80017ea:	e000      	b.n	80017ee <OLED_Proc+0x12a>
 80017ec:	2120      	movs	r1, #32
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <OLED_Proc+0x214>)
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <OLED_Proc+0x136>
 80017f6:	2023      	movs	r0, #35	; 0x23
 80017f8:	e000      	b.n	80017fc <OLED_Proc+0x138>
 80017fa:	2020      	movs	r0, #32
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <OLED_Proc+0x214>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <OLED_Proc+0x144>
 8001804:	2323      	movs	r3, #35	; 0x23
 8001806:	e000      	b.n	800180a <OLED_Proc+0x146>
 8001808:	2320      	movs	r3, #32
 800180a:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <OLED_Proc+0x214>)
 800180c:	7852      	ldrb	r2, [r2, #1]
 800180e:	2a00      	cmp	r2, #0
 8001810:	d001      	beq.n	8001816 <OLED_Proc+0x152>
 8001812:	2223      	movs	r2, #35	; 0x23
 8001814:	e000      	b.n	8001818 <OLED_Proc+0x154>
 8001816:	2220      	movs	r2, #32
 8001818:	9201      	str	r2, [sp, #4]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	460a      	mov	r2, r1
 8001820:	492e      	ldr	r1, [pc, #184]	; (80018dc <OLED_Proc+0x218>)
 8001822:	4827      	ldr	r0, [pc, #156]	; (80018c0 <OLED_Proc+0x1fc>)
 8001824:	f013 fa42 	bl	8014cac <siprintf>
	Screen_ShowStringLine(7, String_Line, Font_Size);
 8001828:	2218      	movs	r2, #24
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <OLED_Proc+0x1fc>)
 800182c:	2007      	movs	r0, #7
 800182e:	f012 f8c9 	bl	80139c4 <Screen_ShowStringLine>
	
	sprintf(String_Line, "CPU: %.2f C    MPU: %.2f C  ", GetInternalTemperature(), Get_MPU_Temperature());
 8001832:	f010 fda9 	bl	8012388 <GetInternalTemperature>
 8001836:	ee10 3a10 	vmov	r3, s0
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	f00f f980 	bl	8010b48 <Get_MPU_Temperature>
 8001848:	ee10 3a10 	vmov	r3, s0
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	e9cd 2300 	strd	r2, r3, [sp]
 800185a:	4622      	mov	r2, r4
 800185c:	462b      	mov	r3, r5
 800185e:	4920      	ldr	r1, [pc, #128]	; (80018e0 <OLED_Proc+0x21c>)
 8001860:	4817      	ldr	r0, [pc, #92]	; (80018c0 <OLED_Proc+0x1fc>)
 8001862:	f013 fa23 	bl	8014cac <siprintf>
	Screen_ShowStringLine(13, String_Line, Font_Size_Small);
 8001866:	2210      	movs	r2, #16
 8001868:	4915      	ldr	r1, [pc, #84]	; (80018c0 <OLED_Proc+0x1fc>)
 800186a:	200d      	movs	r0, #13
 800186c:	f012 f8aa 	bl	80139c4 <Screen_ShowStringLine>
	sprintf(String_Line, "%.2f V         %d s  ", GetBatteryLevel(), (int) uwTick / 1000);
 8001870:	f010 fd4e 	bl	8012310 <GetBatteryLevel>
 8001874:	ee10 3a10 	vmov	r3, s0
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	490b      	ldr	r1, [pc, #44]	; (80018b0 <OLED_Proc+0x1ec>)
 8001884:	6809      	ldr	r1, [r1, #0]
 8001886:	4817      	ldr	r0, [pc, #92]	; (80018e4 <OLED_Proc+0x220>)
 8001888:	fb80 4001 	smull	r4, r0, r0, r1
 800188c:	1180      	asrs	r0, r0, #6
 800188e:	17c9      	asrs	r1, r1, #31
 8001890:	1a41      	subs	r1, r0, r1
 8001892:	9100      	str	r1, [sp, #0]
 8001894:	4914      	ldr	r1, [pc, #80]	; (80018e8 <OLED_Proc+0x224>)
 8001896:	480a      	ldr	r0, [pc, #40]	; (80018c0 <OLED_Proc+0x1fc>)
 8001898:	f013 fa08 	bl	8014cac <siprintf>
	Screen_ShowStringLine(14, String_Line, Font_Size_Small);
 800189c:	2210      	movs	r2, #16
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <OLED_Proc+0x1fc>)
 80018a0:	200e      	movs	r0, #14
 80018a2:	f012 f88f 	bl	80139c4 <Screen_ShowStringLine>
 80018a6:	e000      	b.n	80018aa <OLED_Proc+0x1e6>
		return;
 80018a8:	bf00      	nop
	
}
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001294 	.word	0x20001294
 80018b4:	200004bc 	.word	0x200004bc
 80018b8:	20001c44 	.word	0x20001c44
 80018bc:	080193e0 	.word	0x080193e0
 80018c0:	200004c4 	.word	0x200004c4
 80018c4:	080193f4 	.word	0x080193f4
 80018c8:	20001c58 	.word	0x20001c58
 80018cc:	08019408 	.word	0x08019408
 80018d0:	20001304 	.word	0x20001304
 80018d4:	0801941c 	.word	0x0801941c
 80018d8:	20001c54 	.word	0x20001c54
 80018dc:	08019428 	.word	0x08019428
 80018e0:	0801943c 	.word	0x0801943c
 80018e4:	10624dd3 	.word	0x10624dd3
 80018e8:	0801945c 	.word	0x0801945c

080018ec <SendData_Proc>:

//向上位机发送当前小车数据
void SendData_Proc()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	if (uwTick - uwTick_SendData < 500)
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <SendData_Proc+0xa8>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <SendData_Proc+0xac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018fe:	d347      	bcc.n	8001990 <SendData_Proc+0xa4>
	{
		return;
	}
	uwTick_SendData = uwTick;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <SendData_Proc+0xa8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a24      	ldr	r2, [pc, #144]	; (8001998 <SendData_Proc+0xac>)
 8001906:	6013      	str	r3, [r2, #0]
	
//发送数据
	
	TX_String[0] = ((uint16_t) (int16_t) (Motor_Expected_Speeds[0] * 100));
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <SendData_Proc+0xb0>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80019a0 <SendData_Proc+0xb4>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191a:	ee17 3a90 	vmov	r3, s15
 800191e:	b21b      	sxth	r3, r3
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <SendData_Proc+0xb8>)
 8001924:	801a      	strh	r2, [r3, #0]
	TX_String[1] = ((uint16_t) (int16_t) (Motor_Expected_Speeds[1] * 100));
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <SendData_Proc+0xb0>)
 8001928:	edd3 7a01 	vldr	s15, [r3, #4]
 800192c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80019a0 <SendData_Proc+0xb4>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	b21b      	sxth	r3, r3
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <SendData_Proc+0xb8>)
 8001942:	805a      	strh	r2, [r3, #2]
	TX_String[2] = ((uint16_t) (int16_t) (Motor_Expected_Axis_Speeds[0] * 100));
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <SendData_Proc+0xbc>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019a0 <SendData_Proc+0xb4>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001956:	ee17 3a90 	vmov	r3, s15
 800195a:	b21b      	sxth	r3, r3
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <SendData_Proc+0xb8>)
 8001960:	809a      	strh	r2, [r3, #4]
	TX_String[3] = ((uint16_t) (int16_t) (Motor_Expected_Axis_Speeds[2] * 100));
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <SendData_Proc+0xbc>)
 8001964:	edd3 7a02 	vldr	s15, [r3, #8]
 8001968:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80019a0 <SendData_Proc+0xb4>
 800196c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001974:	ee17 3a90 	vmov	r3, s15
 8001978:	b21b      	sxth	r3, r3
 800197a:	b29a      	uxth	r2, r3
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <SendData_Proc+0xb8>)
 800197e:	80da      	strh	r2, [r3, #6]
	
	HAL_UART_Transmit(&huart1, (uint8_t*) TX_String, Motor_Number * 2, 0xFFFF);
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	2208      	movs	r2, #8
 8001986:	4907      	ldr	r1, [pc, #28]	; (80019a4 <SendData_Proc+0xb8>)
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <SendData_Proc+0xc0>)
 800198a:	f007 fd04 	bl	8009396 <HAL_UART_Transmit>
 800198e:	e000      	b.n	8001992 <SendData_Proc+0xa6>
		return;
 8001990:	bf00      	nop
}
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20001294 	.word	0x20001294
 8001998:	200004c0 	.word	0x200004c0
 800199c:	20001c58 	.word	0x20001c58
 80019a0:	42c80000 	.word	0x42c80000
 80019a4:	20000c94 	.word	0x20000c94
 80019a8:	20001c68 	.word	0x20001c68
 80019ac:	2000120c 	.word	0x2000120c

080019b0 <ProcessReceivedData>:

//接收数据
void ProcessReceivedData()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	short speed = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	80fb      	strh	r3, [r7, #6]
	Direction dir;
	uint8_t point = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	713b      	strb	r3, [r7, #4]
	if (RxData_Flag[UART_1] == RX_UnRead)
 80019be:	4b91      	ldr	r3, [pc, #580]	; (8001c04 <ProcessReceivedData+0x254>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	f040 8114 	bne.w	8001bf0 <ProcessReceivedData+0x240>
	{
		//清空标志位
		CleanRxData(UART_1);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f012 f9ef 	bl	8013dac <CleanRxData>
		//清空休眠计数
		Clean_Dormancy_Count();
 80019ce:	f00f f8e3 	bl	8010b98 <Clean_Dormancy_Count>
		
		switch (RxData[UART_1][0])
 80019d2:	4b8d      	ldr	r3, [pc, #564]	; (8001c08 <ProcessReceivedData+0x258>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3b41      	subs	r3, #65	; 0x41
 80019d8:	2b03      	cmp	r3, #3
 80019da:	f200 810b 	bhi.w	8001bf4 <ProcessReceivedData+0x244>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <ProcessReceivedData+0x34>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	08001b45 	.word	0x08001b45
 80019ec:	08001bc1 	.word	0x08001bc1
 80019f0:	08001bdf 	.word	0x08001bdf
		{
			case 'A':
				switch (RxData[UART_1][1])
 80019f4:	4b84      	ldr	r3, [pc, #528]	; (8001c08 <ProcessReceivedData+0x258>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	3b30      	subs	r3, #48	; 0x30
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	f200 80fc 	bhi.w	8001bf8 <ProcessReceivedData+0x248>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <ProcessReceivedData+0x58>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001b37 	.word	0x08001b37
 8001a0c:	08001a31 	.word	0x08001a31
 8001a10:	08001a4d 	.word	0x08001a4d
 8001a14:	08001a6f 	.word	0x08001a6f
 8001a18:	08001a8f 	.word	0x08001a8f
 8001a1c:	08001ab5 	.word	0x08001ab5
 8001a20:	08001ad5 	.word	0x08001ad5
 8001a24:	08001af7 	.word	0x08001af7
 8001a28:	08001b13 	.word	0x08001b13
 8001a2c:	08001b31 	.word	0x08001b31
				{
					case '1':	//上
						AddCarSpeed(Speed_Step * 2, 0, 0);
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <ProcessReceivedData+0x25c>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a3a:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001c10 <ProcessReceivedData+0x260>
 8001a3e:	eddf 0a74 	vldr	s1, [pc, #464]	; 8001c10 <ProcessReceivedData+0x260>
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	f011 f91f 	bl	8012c88 <AddCarSpeed>
						break;
 8001a4a:	e07a      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '2':	//右上
						AddCarSpeed(Speed_Step, 0, -Direction_Step);
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <ProcessReceivedData+0x25c>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b70      	ldr	r3, [pc, #448]	; (8001c14 <ProcessReceivedData+0x264>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eef1 7a67 	vneg.f32	s15, s15
 8001a5c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a60:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001c10 <ProcessReceivedData+0x260>
 8001a64:	eeb0 0a47 	vmov.f32	s0, s14
 8001a68:	f011 f90e 	bl	8012c88 <AddCarSpeed>
						break;
 8001a6c:	e069      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '3':	//右
						AddCarSpeed(0, 0, -Direction_Step * 2);
 8001a6e:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <ProcessReceivedData+0x264>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	eef1 7a67 	vneg.f32	s15, s15
 8001a78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a7c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a80:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001c10 <ProcessReceivedData+0x260>
 8001a84:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001c10 <ProcessReceivedData+0x260>
 8001a88:	f011 f8fe 	bl	8012c88 <AddCarSpeed>
						break;
 8001a8c:	e059      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '4':	//右下
						AddCarSpeed(-Speed_Step, 0, -Direction_Step);
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <ProcessReceivedData+0x25c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eeb1 7a67 	vneg.f32	s14, s15
 8001a98:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <ProcessReceivedData+0x264>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	eef1 7a67 	vneg.f32	s15, s15
 8001aa2:	eeb0 1a67 	vmov.f32	s2, s15
 8001aa6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001c10 <ProcessReceivedData+0x260>
 8001aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8001aae:	f011 f8eb 	bl	8012c88 <AddCarSpeed>
						
						break;
 8001ab2:	e046      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '5':	//下
						AddCarSpeed(-Speed_Step * 2, 0, 0);
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <ProcessReceivedData+0x25c>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eef1 7a67 	vneg.f32	s15, s15
 8001abe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ac2:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001c10 <ProcessReceivedData+0x260>
 8001ac6:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001c10 <ProcessReceivedData+0x260>
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	f011 f8db 	bl	8012c88 <AddCarSpeed>
						break;
 8001ad2:	e036      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '6':	//左下
						AddCarSpeed(-Speed_Step, 0, Direction_Step);
 8001ad4:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <ProcessReceivedData+0x25c>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	eef1 7a67 	vneg.f32	s15, s15
 8001ade:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <ProcessReceivedData+0x264>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	eeb0 1a47 	vmov.f32	s2, s14
 8001ae8:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001c10 <ProcessReceivedData+0x260>
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	f011 f8ca 	bl	8012c88 <AddCarSpeed>
						break;
 8001af4:	e025      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '7':	//左
						AddCarSpeed(0, 0, Direction_Step * 2);
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <ProcessReceivedData+0x264>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b00:	eeb0 1a67 	vmov.f32	s2, s15
 8001b04:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001c10 <ProcessReceivedData+0x260>
 8001b08:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001c10 <ProcessReceivedData+0x260>
 8001b0c:	f011 f8bc 	bl	8012c88 <AddCarSpeed>
						break;
 8001b10:	e017      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '8':	//左上
						AddCarSpeed(Speed_Step, 0, Direction_Step);
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <ProcessReceivedData+0x25c>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <ProcessReceivedData+0x264>)
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b22:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001c10 <ProcessReceivedData+0x260>
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	f011 f8ad 	bl	8012c88 <AddCarSpeed>
						break;
 8001b2e:	e008      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '9':	//停止
						Status_Control_Clear();
 8001b30:	f010 f8a0 	bl	8011c74 <Status_Control_Clear>
						break;
 8001b34:	e005      	b.n	8001b42 <ProcessReceivedData+0x192>
					case '0':	//开始
						Status_Control_Start(Command_Mode_OneTime, 15);
 8001b36:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f010 f8c2 	bl	8011cc4 <Status_Control_Start>
						break;
 8001b40:	bf00      	nop
				}
				break;
 8001b42:	e059      	b.n	8001bf8 <ProcessReceivedData+0x248>
			case 'B':

				for (uint8_t i = 0; i < Motor_Number; i++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	717b      	strb	r3, [r7, #5]
 8001b48:	e036      	b.n	8001bb8 <ProcessReceivedData+0x208>
				{
					speed = (RxData[UART_1][i * 3 + 2] - '0') * 10 + (RxData[UART_1][i * 3 + 3] - '0');
 8001b4a:	797a      	ldrb	r2, [r7, #5]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	3302      	adds	r3, #2
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <ProcessReceivedData+0x258>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	3b30      	subs	r3, #48	; 0x30
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	b299      	uxth	r1, r3
 8001b66:	797b      	ldrb	r3, [r7, #5]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <ProcessReceivedData+0x258>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	440b      	add	r3, r1
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b30      	subs	r3, #48	; 0x30
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	80fb      	strh	r3, [r7, #6]
					if (RxData[UART_1][i * 3 + 1] == '-')
 8001b80:	797a      	ldrb	r2, [r7, #5]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <ProcessReceivedData+0x258>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	2b2d      	cmp	r3, #45	; 0x2d
 8001b90:	d103      	bne.n	8001b9a <ProcessReceivedData+0x1ea>
					{
						speed = -speed;
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	425b      	negs	r3, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	80fb      	strh	r3, [r7, #6]
					}
					//设置速度
					//只有关闭巡线才能生效
					Set_Motor_ExpectedSpeed(i, speed);
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bac:	4618      	mov	r0, r3
 8001bae:	f010 ffa1 	bl	8012af4 <Set_Motor_ExpectedSpeed>
				for (uint8_t i = 0; i < Motor_Number; i++)
 8001bb2:	797b      	ldrb	r3, [r7, #5]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	717b      	strb	r3, [r7, #5]
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d9c5      	bls.n	8001b4a <ProcessReceivedData+0x19a>
				}
				
				break;
 8001bbe:	e01c      	b.n	8001bfa <ProcessReceivedData+0x24a>
			case 'C':
				//设置起点 和 朝向
				dir = RxData[UART_1][1] - '0';
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <ProcessReceivedData+0x258>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	3b30      	subs	r3, #48	; 0x30
 8001bc6:	70fb      	strb	r3, [r7, #3]
				point = RxData[UART_1][2] - '0';
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <ProcessReceivedData+0x258>)
 8001bca:	789b      	ldrb	r3, [r3, #2]
 8001bcc:	3b30      	subs	r3, #48	; 0x30
 8001bce:	713b      	strb	r3, [r7, #4]
				SetDefaultValue(dir, point);
 8001bd0:	793a      	ldrb	r2, [r7, #4]
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f010 f806 	bl	8011be8 <SetDefaultValue>
				
				break;
 8001bdc:	e00d      	b.n	8001bfa <ProcessReceivedData+0x24a>
			case 'D':
				//设置终点并开始寻路
				point = RxData[UART_1][1] - '0';
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <ProcessReceivedData+0x258>)
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	3b30      	subs	r3, #48	; 0x30
 8001be4:	713b      	strb	r3, [r7, #4]
				StartWayFindingAndRuning(point);
 8001be6:	793b      	ldrb	r3, [r7, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f010 f815 	bl	8011c18 <StartWayFindingAndRuning>
				break;
 8001bee:	e004      	b.n	8001bfa <ProcessReceivedData+0x24a>
			default:
				break;
		}
	}
 8001bf0:	bf00      	nop
 8001bf2:	e002      	b.n	8001bfa <ProcessReceivedData+0x24a>
				break;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <ProcessReceivedData+0x24a>
				break;
 8001bf8:	bf00      	nop
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20007aac 	.word	0x20007aac
 8001c08:	20007a54 	.word	0x20007a54
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	00000000 	.word	0x00000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_TIM_PeriodElapsedCallback>:

//定时器中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d104      	bne.n	8001c34 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//更新呼吸灯 PWM占空比
		Periodic_Update_BreathingLights();
 8001c2a:	f011 fa75 	bl	8013118 <Periodic_Update_BreathingLights>
		//接收上位机数据
		ProcessReceivedData();
 8001c2e:	f7ff febf 	bl	80019b0 <ProcessReceivedData>
	{
		//20ms
		//更新偏航角
		UpdateYawAngle();
	}
}
 8001c32:	e01d      	b.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM6)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d109      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x3a>
		Periodic_Status_Control();
 8001c3e:	f010 fb55 	bl	80122ec <Periodic_Status_Control>
		if (Is_Car_Runing() == 1)
 8001c42:	f010 ff01 	bl	8012a48 <Is_Car_Runing>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d111      	bne.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x58>
			Clean_Dormancy_Count();
 8001c4c:	f00e ffa4 	bl	8010b98 <Clean_Dormancy_Count>
}
 8001c50:	e00e      	b.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM7)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d102      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x4a>
		Periodic_Dormancy_Counter();
 8001c5c:	f00e ffee 	bl	8010c3c <Periodic_Dormancy_Counter>
}
 8001c60:	e006      	b.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM11)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x58>
		UpdateYawAngle();
 8001c6c:	f00e ff26 	bl	8010abc <UpdateYawAngle>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40002000 	.word	0x40002000
 8001c7c:	40001000 	.word	0x40001000
 8001c80:	40001400 	.word	0x40001400
 8001c84:	40014800 	.word	0x40014800

08001c88 <HAL_GPIO_EXTI_Callback>:

//外部中断 按键
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
//清空休眠计数
	Clean_Dormancy_Count();
 8001c92:	f00e ff81 	bl	8010b98 <Clean_Dormancy_Count>
	
	if (GPIO_Pin == Key_Stop_Pin)
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d107      	bne.n	8001cac <HAL_GPIO_EXTI_Callback+0x24>
	{
		//紧急制动按钮
		
		SetCarSpeed(0, 0, 0);
 8001c9c:	ed9f 1a05 	vldr	s2, [pc, #20]	; 8001cb4 <HAL_GPIO_EXTI_Callback+0x2c>
 8001ca0:	eddf 0a04 	vldr	s1, [pc, #16]	; 8001cb4 <HAL_GPIO_EXTI_Callback+0x2c>
 8001ca4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001cb4 <HAL_GPIO_EXTI_Callback+0x2c>
 8001ca8:	f011 f81e 	bl	8012ce8 <SetCarSpeed>
	}
	
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>
	...

08001cc4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <MX_SDIO_SD_Init+0x40>)
 8001ccc:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cec:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <MX_SDIO_SD_Init+0x3c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000ce4 	.word	0x20000ce4
 8001d04:	40012c00 	.word	0x40012c00

08001d08 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
    if(sdHandle->Instance==SDIO)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a68      	ldr	r2, [pc, #416]	; (8001ec8 <HAL_SD_MspInit+0x1c0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f040 80c9 	bne.w	8001ebe <HAL_SD_MspInit+0x1b6>
    {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
        /* SDIO clock enable */
        __HAL_RCC_SDIO_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	4b66      	ldr	r3, [pc, #408]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	4a65      	ldr	r2, [pc, #404]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3c:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a5e      	ldr	r2, [pc, #376]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b55      	ldr	r3, [pc, #340]	; (8001ecc <HAL_SD_MspInit+0x1c4>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
        PC10         ------> SDIO_D2
        PC11         ------> SDIO_D3
        PC12         ------> SDIO_CK
        PD2         ------> SDIO_CMD
        */
        GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d84:	617b      	str	r3, [r7, #20]
                                                    |GPIO_PIN_12;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d92:	230c      	movs	r3, #12
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	484c      	ldr	r0, [pc, #304]	; (8001ed0 <HAL_SD_MspInit+0x1c8>)
 8001d9e:	f002 fb31 	bl	8004404 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001da2:	2304      	movs	r3, #4
 8001da4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001db2:	230c      	movs	r3, #12
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4845      	ldr	r0, [pc, #276]	; (8001ed4 <HAL_SD_MspInit+0x1cc>)
 8001dbe:	f002 fb21 	bl	8004404 <HAL_GPIO_Init>

        /* SDIO DMA Init */
        /* SDIO_RX Init */
        hdma_sdio_rx.Instance = DMA2_Stream3;
 8001dc2:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dc4:	4a45      	ldr	r2, [pc, #276]	; (8001edc <HAL_SD_MspInit+0x1d4>)
 8001dc6:	601a      	str	r2, [r3, #0]
        hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dce:	605a      	str	r2, [r3, #4]
        hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
        hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
        hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de2:	611a      	str	r2, [r3, #16]
        hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dea:	615a      	str	r2, [r3, #20]
        hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df2:	619a      	str	r2, [r3, #24]
        hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001df6:	2220      	movs	r2, #32
 8001df8:	61da      	str	r2, [r3, #28]
        hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
        hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e02:	2204      	movs	r2, #4
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e08:	2203      	movs	r2, #3
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001e1c:	482e      	ldr	r0, [pc, #184]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e1e:	f001 fee3 	bl	8003be8 <HAL_DMA_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_SD_MspInit+0x124>
        {
            Error_Handler();
 8001e28:	f7ff ff46 	bl	8001cb8 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
 8001e32:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <HAL_SD_MspInit+0x1d0>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6393      	str	r3, [r2, #56]	; 0x38

        /* SDIO_TX Init */
        hdma_sdio_tx.Instance = DMA2_Stream6;
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <HAL_SD_MspInit+0x1dc>)
 8001e3c:	601a      	str	r2, [r3, #0]
        hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e44:	605a      	str	r2, [r3, #4]
        hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	609a      	str	r2, [r3, #8]
        hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
        hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	611a      	str	r2, [r3, #16]
        hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e60:	615a      	str	r2, [r3, #20]
        hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e68:	619a      	str	r2, [r3, #24]
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	61da      	str	r2, [r3, #28]
        hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
        hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e78:	2204      	movs	r2, #4
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e7e:	2203      	movs	r2, #3
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001e92:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001e94:	f001 fea8 	bl	8003be8 <HAL_DMA_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_SD_MspInit+0x19a>
        {
            Error_Handler();
 8001e9e:	f7ff ff0b 	bl	8001cb8 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_SD_MspInit+0x1d8>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6393      	str	r3, [r2, #56]	; 0x38

        /* SDIO interrupt Init */
        HAL_NVIC_SetPriority(SDIO_IRQn, 13, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	210d      	movs	r1, #13
 8001eb2:	2031      	movs	r0, #49	; 0x31
 8001eb4:	f001 fe61 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001eb8:	2031      	movs	r0, #49	; 0x31
 8001eba:	f001 fe7a 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SDIO_MspInit 1 */

    /* USER CODE END SDIO_MspInit 1 */
    }
}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	20000d68 	.word	0x20000d68
 8001edc:	40026458 	.word	0x40026458
 8001ee0:	20000dc8 	.word	0x20000dc8
 8001ee4:	400264a0 	.word	0x400264a0

08001ee8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001eee:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <MX_SPI1_Init+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f18:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f1c:	2238      	movs	r2, #56	; 0x38
 8001f1e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f34:	220a      	movs	r2, #10
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <MX_SPI1_Init+0x64>)
 8001f3a:	f005 fbec 	bl	8007716 <HAL_SPI_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8001f44:	f7ff feb8 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000e28 	.word	0x20000e28
 8001f50:	40013000 	.word	0x40013000

08001f54 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
    /* USER CODE END SPI2_Init 0 */

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    hspi2.Instance = SPI2;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <MX_SPI2_Init+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f64:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f84:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001fa0:	220a      	movs	r2, #10
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001fa6:	f005 fbb6 	bl	8007716 <HAL_SPI_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8001fb0:	f7ff fe82 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000e80 	.word	0x20000e80
 8001fbc:	40003800 	.word	0x40003800

08001fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
    if(spiHandle->Instance==SPI1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_SPI_MspInit+0x180>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12c      	bne.n	800203c <HAL_SPI_MspInit+0x7c>
    {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8001fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b54      	ldr	r3, [pc, #336]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
        /**SPI1 GPIO Configuration
        PB3         ------> SPI1_SCK
        PB4         ------> SPI1_MISO
        PB5         ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = W52QXX_SCK_Pin|W52QXX_MISO_Pin|W52QXX_MOSI_Pin;
 800201a:	2338      	movs	r3, #56	; 0x38
 800201c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800202a:	2305      	movs	r3, #5
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4844      	ldr	r0, [pc, #272]	; (8002148 <HAL_SPI_MspInit+0x188>)
 8002036:	f002 f9e5 	bl	8004404 <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
    }
}
 800203a:	e07c      	b.n	8002136 <HAL_SPI_MspInit+0x176>
    else if(spiHandle->Instance==SPI2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a42      	ldr	r2, [pc, #264]	; (800214c <HAL_SPI_MspInit+0x18c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d177      	bne.n	8002136 <HAL_SPI_MspInit+0x176>
        __HAL_RCC_SPI2_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_SPI_MspInit+0x184>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a36      	ldr	r2, [pc, #216]	; (8002144 <HAL_SPI_MspInit+0x184>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_SPI_MspInit+0x184>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = LCD_SDA_Pin;
 800209a:	2308      	movs	r3, #8
 800209c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020aa:	2305      	movs	r3, #5
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	4619      	mov	r1, r3
 80020b4:	4826      	ldr	r0, [pc, #152]	; (8002150 <HAL_SPI_MspInit+0x190>)
 80020b6:	f002 f9a5 	bl	8004404 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = LCD_SCL_Pin;
 80020ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020be:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020cc:	2305      	movs	r3, #5
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	481c      	ldr	r0, [pc, #112]	; (8002148 <HAL_SPI_MspInit+0x188>)
 80020d8:	f002 f994 	bl	8004404 <HAL_GPIO_Init>
        hdma_spi2_tx.Instance = DMA1_Stream4;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_SPI_MspInit+0x194>)
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_SPI_MspInit+0x198>)
 80020e0:	601a      	str	r2, [r3, #0]
        hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_SPI_MspInit+0x194>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
        hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_SPI_MspInit+0x194>)
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	609a      	str	r2, [r3, #8]
        hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_SPI_MspInit+0x194>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
        hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_SPI_MspInit+0x194>)
 80020f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fa:	611a      	str	r2, [r3, #16]
        hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_SPI_MspInit+0x194>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
        hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_SPI_MspInit+0x194>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
        hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_SPI_MspInit+0x194>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
        hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_SPI_MspInit+0x194>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
        hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_SPI_MspInit+0x194>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800211a:	480e      	ldr	r0, [pc, #56]	; (8002154 <HAL_SPI_MspInit+0x194>)
 800211c:	f001 fd64 	bl	8003be8 <HAL_DMA_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_SPI_MspInit+0x16a>
            Error_Handler();
 8002126:	f7ff fdc7 	bl	8001cb8 <Error_Handler>
        __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_SPI_MspInit+0x194>)
 800212e:	649a      	str	r2, [r3, #72]	; 0x48
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_SPI_MspInit+0x194>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002136:	bf00      	nop
 8002138:	3730      	adds	r7, #48	; 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40013000 	.word	0x40013000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020400 	.word	0x40020400
 800214c:	40003800 	.word	0x40003800
 8002150:	40020800 	.word	0x40020800
 8002154:	20000ed8 	.word	0x20000ed8
 8002158:	40026070 	.word	0x40026070

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
    * Initializes the Global MSP.
    */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_MspInit+0x4c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_MspInit+0x4c>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <NMI_Handler>:
/******************************************************************************/
/**
    * @brief This function handles Non maskable interrupt.
    */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
    * @brief This function handles Hard fault interrupt.
    */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
    * @brief This function handles Memory management fault.
    */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
    * @brief This function handles Pre-fetch fault, memory access fault.
    */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
    * @brief This function handles Undefined instruction or illegal state.
    */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
    * @brief This function handles System service call via SWI instruction.
    */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
    * @brief This function handles Debug monitor.
    */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
    * @brief This function handles Pendable request for system service.
    */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
    * @brief This function handles System tick timer.
    */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80021f8:	f000 ffd4 	bl	80031a4 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <EXTI3_IRQHandler>:

/**
    * @brief This function handles EXTI line3 interrupt.
    */
void EXTI3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(Key_Stop_Pin);
 8002204:	2008      	movs	r0, #8
 8002206:	f002 facb 	bl	80047a0 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <DMA1_Stream4_IRQHandler>:

/**
    * @brief This function handles DMA1 stream4 global interrupt.
    */
void DMA1_Stream4_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
    /* USER CODE END DMA1_Stream4_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA1_Stream4_IRQHandler+0x10>)
 8002216:	f001 fe7f 	bl	8003f18 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

    /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000ed8 	.word	0x20000ed8

08002224 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
    * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
    */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

    /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_TIM_IRQHandler(&htim1);
 8002228:	4803      	ldr	r0, [pc, #12]	; (8002238 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800222a:	f006 fa0d 	bl	8008648 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim11);
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002230:	f006 fa0a 	bl	8008648 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

    /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000f3c 	.word	0x20000f3c
 800223c:	20001134 	.word	0x20001134

08002240 <USART1_IRQHandler>:

/**
    * @brief This function handles USART1 global interrupt.
    */
void USART1_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <USART1_IRQHandler+0x10>)
 8002246:	f007 f969 	bl	800951c <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000120c 	.word	0x2000120c

08002254 <TIM8_UP_TIM13_IRQHandler>:

/**
    * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
    */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800225a:	f006 f9f5 	bl	8008648 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim13);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002260:	f006 f9f2 	bl	8008648 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200010ec 	.word	0x200010ec
 800226c:	2000117c 	.word	0x2000117c

08002270 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
    * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
    */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002276:	f006 f9e7 	bl	8008648 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim14);
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800227c:	f006 f9e4 	bl	8008648 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200010ec 	.word	0x200010ec
 8002288:	200011c4 	.word	0x200011c4

0800228c <SDIO_IRQHandler>:

/**
    * @brief This function handles SDIO global interrupt.
    */
void SDIO_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SDIO_IRQn 0 */

    /* USER CODE END SDIO_IRQn 0 */
    HAL_SD_IRQHandler(&hsd);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <SDIO_IRQHandler+0x10>)
 8002292:	f004 f985 	bl	80065a0 <HAL_SD_IRQHandler>
    /* USER CODE BEGIN SDIO_IRQn 1 */

    /* USER CODE END SDIO_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000ce4 	.word	0x20000ce4

080022a0 <TIM6_DAC_IRQHandler>:

/**
    * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
    */
void TIM6_DAC_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

    /* USER CODE END TIM6_DAC_IRQn 0 */
    HAL_TIM_IRQHandler(&htim6);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM6_DAC_IRQHandler+0x10>)
 80022a6:	f006 f9cf 	bl	8008648 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

    /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000105c 	.word	0x2000105c

080022b4 <TIM7_IRQHandler>:

/**
    * @brief This function handles TIM7 global interrupt.
    */
void TIM7_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <TIM7_IRQHandler+0x10>)
 80022ba:	f006 f9c5 	bl	8008648 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM7_IRQn 1 */

    /* USER CODE END TIM7_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200010a4 	.word	0x200010a4

080022c8 <DMA2_Stream3_IRQHandler>:

/**
    * @brief This function handles DMA2 stream3 global interrupt.
    */
void DMA2_Stream3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

    /* USER CODE END DMA2_Stream3_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA2_Stream3_IRQHandler+0x10>)
 80022ce:	f001 fe23 	bl	8003f18 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

    /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000d68 	.word	0x20000d68

080022dc <DMA2_Stream6_IRQHandler>:

/**
    * @brief This function handles DMA2 stream6 global interrupt.
    */
void DMA2_Stream6_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

    /* USER CODE END DMA2_Stream6_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA2_Stream6_IRQHandler+0x10>)
 80022e2:	f001 fe19 	bl	8003f18 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

    /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000dc8 	.word	0x20000dc8

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_kill>:

int _kill(int pid, int sig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800230a:	f011 fd7f 	bl	8013e0c <__errno>
 800230e:	4603      	mov	r3, r0
 8002310:	2216      	movs	r2, #22
 8002312:	601a      	str	r2, [r3, #0]
	return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_exit>:

void _exit (int status)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffe7 	bl	8002300 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002332:	e7fe      	b.n	8002332 <_exit+0x12>

08002334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e00a      	b.n	800235c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002346:	f3af 8000 	nop.w
 800234a:	4601      	mov	r1, r0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	b2ca      	uxtb	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf0      	blt.n	8002346 <_read+0x12>
	}

return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e009      	b.n	8002394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf1      	blt.n	8002380 <_write+0x12>
	}
	return len;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_close>:

int _close(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ce:	605a      	str	r2, [r3, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_isatty>:

int _isatty(int file)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
	return 1;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <_sbrk+0x5c>)
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <_sbrk+0x60>)
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <_sbrk+0x64>)
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <_sbrk+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	429a      	cmp	r2, r3
 800243e:	d207      	bcs.n	8002450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002440:	f011 fce4 	bl	8013e0c <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	220c      	movs	r2, #12
 8002448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e009      	b.n	8002464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <_sbrk+0x64>)
 8002460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20020000 	.word	0x20020000
 8002470:	00000800 	.word	0x00000800
 8002474:	20000f38 	.word	0x20000f38
 8002478:	20007ac0 	.word	0x20007ac0

0800247c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x20>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <SystemInit+0x20>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f011 fce6 	bl	8013e80 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024be:	4a23      	ldr	r2, [pc, #140]	; (800254c <MX_TIM1_Init+0xac>)
 80024c0:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <MX_TIM1_Init+0xa8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024e8:	2303      	movs	r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f0:	2301      	movs	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	4619      	mov	r1, r3
 8002512:	480d      	ldr	r0, [pc, #52]	; (8002548 <MX_TIM1_Init+0xa8>)
 8002514:	f005 ff64 	bl	80083e0 <HAL_TIM_Encoder_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM1_Init+0x82>
    {
        Error_Handler();
 800251e:	f7ff fbcb 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <MX_TIM1_Init+0xa8>)
 8002530:	f006 fe54 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM1_Init+0x9e>
    {
        Error_Handler();
 800253a:	f7ff fbbd 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	3730      	adds	r7, #48	; 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000f3c 	.word	0x20000f3c
 800254c:	40010000 	.word	0x40010000

08002550 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08e      	sub	sp, #56	; 0x38
 8002554:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	f107 0320 	add.w	r3, r7, #32
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	615a      	str	r2, [r3, #20]
 800257e:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002580:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <MX_TIM3_Init+0x128>)
 8002582:	4a3e      	ldr	r2, [pc, #248]	; (800267c <MX_TIM3_Init+0x12c>)
 8002584:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <MX_TIM3_Init+0x128>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <MX_TIM3_Init+0x128>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 16800-1;
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <MX_TIM3_Init+0x128>)
 8002594:	f244 129f 	movw	r2, #16799	; 0x419f
 8002598:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <MX_TIM3_Init+0x128>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <MX_TIM3_Init+0x128>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025a6:	4834      	ldr	r0, [pc, #208]	; (8002678 <MX_TIM3_Init+0x128>)
 80025a8:	f005 fc9a 	bl	8007ee0 <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM3_Init+0x66>
    {
        Error_Handler();
 80025b2:	f7ff fb81 	bl	8001cb8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c0:	4619      	mov	r1, r3
 80025c2:	482d      	ldr	r0, [pc, #180]	; (8002678 <MX_TIM3_Init+0x128>)
 80025c4:	f006 fa0a 	bl	80089dc <HAL_TIM_ConfigClockSource>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM3_Init+0x82>
    {
        Error_Handler();
 80025ce:	f7ff fb73 	bl	8001cb8 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025d2:	4829      	ldr	r0, [pc, #164]	; (8002678 <MX_TIM3_Init+0x128>)
 80025d4:	f005 fd73 	bl	80080be <HAL_TIM_PWM_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x92>
    {
        Error_Handler();
 80025de:	f7ff fb6b 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ea:	f107 0320 	add.w	r3, r7, #32
 80025ee:	4619      	mov	r1, r3
 80025f0:	4821      	ldr	r0, [pc, #132]	; (8002678 <MX_TIM3_Init+0x128>)
 80025f2:	f006 fdf3 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM3_Init+0xb0>
    {
        Error_Handler();
 80025fc:	f7ff fb5c 	bl	8001cb8 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002600:	2360      	movs	r3, #96	; 0x60
 8002602:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	4619      	mov	r1, r3
 8002616:	4818      	ldr	r0, [pc, #96]	; (8002678 <MX_TIM3_Init+0x128>)
 8002618:	f006 f91e 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM3_Init+0xd6>
    {
        Error_Handler();
 8002622:	f7ff fb49 	bl	8001cb8 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2204      	movs	r2, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4812      	ldr	r0, [pc, #72]	; (8002678 <MX_TIM3_Init+0x128>)
 800262e:	f006 f913 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM3_Init+0xec>
    {
        Error_Handler();
 8002638:	f7ff fb3e 	bl	8001cb8 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2208      	movs	r2, #8
 8002640:	4619      	mov	r1, r3
 8002642:	480d      	ldr	r0, [pc, #52]	; (8002678 <MX_TIM3_Init+0x128>)
 8002644:	f006 f908 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x102>
    {
        Error_Handler();
 800264e:	f7ff fb33 	bl	8001cb8 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	220c      	movs	r2, #12
 8002656:	4619      	mov	r1, r3
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <MX_TIM3_Init+0x128>)
 800265a:	f006 f8fd 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM3_Init+0x118>
    {
        Error_Handler();
 8002664:	f7ff fb28 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <MX_TIM3_Init+0x128>)
 800266a:	f000 fbc5 	bl	8002df8 <HAL_TIM_MspPostInit>

}
 800266e:	bf00      	nop
 8002670:	3738      	adds	r7, #56	; 0x38
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000f84 	.word	0x20000f84
 800267c:	40000400 	.word	0x40000400

08002680 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f011 fbf6 	bl	8013e80 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <MX_TIM4_Init+0xa0>)
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <MX_TIM4_Init+0xa4>)
 80026a0:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <MX_TIM4_Init+0xa0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <MX_TIM4_Init+0xa0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 65535;
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <MX_TIM4_Init+0xa0>)
 80026b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b4:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <MX_TIM4_Init+0xa0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <MX_TIM4_Init+0xa0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026c2:	2303      	movs	r3, #3
 80026c4:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026ca:	2301      	movs	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026da:	2301      	movs	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	4619      	mov	r1, r3
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <MX_TIM4_Init+0xa0>)
 80026ee:	f005 fe77 	bl	80083e0 <HAL_TIM_Encoder_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM4_Init+0x7c>
    {
        Error_Handler();
 80026f8:	f7ff fade 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fc:	2300      	movs	r3, #0
 80026fe:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	4619      	mov	r1, r3
 8002708:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_TIM4_Init+0xa0>)
 800270a:	f006 fd67 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM4_Init+0x98>
    {
        Error_Handler();
 8002714:	f7ff fad0 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}
 8002718:	bf00      	nop
 800271a:	3730      	adds	r7, #48	; 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000fcc 	.word	0x20000fcc
 8002724:	40000800 	.word	0x40000800

08002728 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f011 fba2 	bl	8013e80 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <MX_TIM5_Init+0xa0>)
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <MX_TIM5_Init+0xa4>)
 8002748:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 0;
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <MX_TIM5_Init+0xa0>)
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_TIM5_Init+0xa0>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 4294967295;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <MX_TIM5_Init+0xa0>)
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_TIM5_Init+0xa0>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_TIM5_Init+0xa0>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800276a:	2303      	movs	r3, #3
 800276c:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002772:	2301      	movs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002782:	2301      	movs	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <MX_TIM5_Init+0xa0>)
 8002796:	f005 fe23 	bl	80083e0 <HAL_TIM_Encoder_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0x7c>
    {
        Error_Handler();
 80027a0:	f7ff fa8a 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_TIM5_Init+0xa0>)
 80027b2:	f006 fd13 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM5_Init+0x98>
    {
        Error_Handler();
 80027bc:	f7ff fa7c 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	3730      	adds	r7, #48	; 0x30
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20001014 	.word	0x20001014
 80027cc:	40000c00 	.word	0x40000c00

080027d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM6_Init 0 */

    /* USER CODE END TIM6_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d6:	463b      	mov	r3, r7
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM6_Init 1 */

    /* USER CODE END TIM6_Init 1 */
    htim6.Instance = TIM6;
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <MX_TIM6_Init+0x64>)
 80027e0:	4a15      	ldr	r2, [pc, #84]	; (8002838 <MX_TIM6_Init+0x68>)
 80027e2:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 168-1;
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <MX_TIM6_Init+0x64>)
 80027e6:	22a7      	movs	r2, #167	; 0xa7
 80027e8:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <MX_TIM6_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 1000-1;
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <MX_TIM6_Init+0x64>)
 80027f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f6:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <MX_TIM6_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <MX_TIM6_Init+0x64>)
 8002800:	f005 fb6e 	bl	8007ee0 <HAL_TIM_Base_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM6_Init+0x3e>
    {
        Error_Handler();
 800280a:	f7ff fa55 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002816:	463b      	mov	r3, r7
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <MX_TIM6_Init+0x64>)
 800281c:	f006 fcde 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM6_Init+0x5a>
    {
        Error_Handler();
 8002826:	f7ff fa47 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM6_Init 2 */

    /* USER CODE END TIM6_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000105c 	.word	0x2000105c
 8002838:	40001000 	.word	0x40001000

0800283c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002842:	463b      	mov	r3, r7
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <MX_TIM7_Init+0x64>)
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <MX_TIM7_Init+0x68>)
 800284e:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 16800-1;
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <MX_TIM7_Init+0x64>)
 8002852:	f244 129f 	movw	r2, #16799	; 0x419f
 8002856:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_TIM7_Init+0x64>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 10000-1;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <MX_TIM7_Init+0x64>)
 8002860:	f242 720f 	movw	r2, #9999	; 0x270f
 8002864:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_TIM7_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <MX_TIM7_Init+0x64>)
 800286e:	f005 fb37 	bl	8007ee0 <HAL_TIM_Base_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 8002878:	f7ff fa1e 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_TIM7_Init+0x64>)
 800288a:	f006 fca7 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8002894:	f7ff fa10 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200010a4 	.word	0x200010a4
 80028a4:	40001400 	.word	0x40001400

080028a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	; 0x30
 80028ac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f011 fae2 	bl	8013e80 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance = TIM8;
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <MX_TIM8_Init+0xac>)
 80028c8:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = 0;
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = 65535;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028dc:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <MX_TIM8_Init+0xa8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028f0:	2303      	movs	r3, #3
 80028f2:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028f8:	2301      	movs	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002908:	2301      	movs	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4619      	mov	r1, r3
 800291a:	480d      	ldr	r0, [pc, #52]	; (8002950 <MX_TIM8_Init+0xa8>)
 800291c:	f005 fd60 	bl	80083e0 <HAL_TIM_Encoder_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM8_Init+0x82>
    {
        Error_Handler();
 8002926:	f7ff f9c7 	bl	8001cb8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4806      	ldr	r0, [pc, #24]	; (8002950 <MX_TIM8_Init+0xa8>)
 8002938:	f006 fc50 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM8_Init+0x9e>
    {
        Error_Handler();
 8002942:	f7ff f9b9 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200010ec 	.word	0x200010ec
 8002954:	40010400 	.word	0x40010400

08002958 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
    /* USER CODE END TIM11_Init 0 */

    /* USER CODE BEGIN TIM11_Init 1 */

    /* USER CODE END TIM11_Init 1 */
    htim11.Instance = TIM11;
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_TIM11_Init+0x40>)
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <MX_TIM11_Init+0x44>)
 8002960:	601a      	str	r2, [r3, #0]
    htim11.Init.Prescaler = 168-1;
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <MX_TIM11_Init+0x40>)
 8002964:	22a7      	movs	r2, #167	; 0xa7
 8002966:	605a      	str	r2, [r3, #4]
    htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_TIM11_Init+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
    htim11.Init.Period = 2000;
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <MX_TIM11_Init+0x40>)
 8002970:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002974:	60da      	str	r2, [r3, #12]
    htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_TIM11_Init+0x40>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_TIM11_Init+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_TIM11_Init+0x40>)
 8002984:	f005 faac 	bl	8007ee0 <HAL_TIM_Base_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM11_Init+0x3a>
    {
        Error_Handler();
 800298e:	f7ff f993 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM11_Init 2 */

    /* USER CODE END TIM11_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20001134 	.word	0x20001134
 800299c:	40014800 	.word	0x40014800

080029a0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    /* USER CODE END TIM13_Init 0 */

    /* USER CODE BEGIN TIM13_Init 1 */

    /* USER CODE END TIM13_Init 1 */
    htim13.Instance = TIM13;
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <MX_TIM13_Init+0x44>)
 80029a8:	601a      	str	r2, [r3, #0]
    htim13.Init.Prescaler = 16800-1;
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029ac:	f244 129f 	movw	r2, #16799	; 0x419f
 80029b0:	605a      	str	r2, [r3, #4]
    htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
    htim13.Init.Period = 5000-1;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80029be:	60da      	str	r2, [r3, #12]
    htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <MX_TIM13_Init+0x40>)
 80029ce:	f005 fa87 	bl	8007ee0 <HAL_TIM_Base_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM13_Init+0x3c>
    {
        Error_Handler();
 80029d8:	f7ff f96e 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM13_Init 2 */

    /* USER CODE END TIM13_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000117c 	.word	0x2000117c
 80029e4:	40001c00 	.word	0x40001c00

080029e8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM14_Init 0 */

    /* USER CODE END TIM14_Init 0 */

    TIM_OC_InitTypeDef sConfigOC = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM14_Init 1 */

    /* USER CODE END TIM14_Init 1 */
    htim14.Instance = TIM14;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <MX_TIM14_Init+0x98>)
 8002a04:	601a      	str	r2, [r3, #0]
    htim14.Init.Prescaler = 42-1;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a08:	2229      	movs	r2, #41	; 0x29
 8002a0a:	605a      	str	r2, [r3, #4]
    htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
    htim14.Init.Period = 1000-1;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a18:	60da      	str	r2, [r3, #12]
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a26:	4815      	ldr	r0, [pc, #84]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a28:	f005 fa5a 	bl	8007ee0 <HAL_TIM_Base_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM14_Init+0x4e>
    {
        Error_Handler();
 8002a32:	f7ff f941 	bl	8001cb8 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002a36:	4811      	ldr	r0, [pc, #68]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a38:	f005 fb41 	bl	80080be <HAL_TIM_PWM_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM14_Init+0x5e>
    {
        Error_Handler();
 8002a42:	f7ff f939 	bl	8001cb8 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a46:	2360      	movs	r3, #96	; 0x60
 8002a48:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 50;
 8002a4a:	2332      	movs	r3, #50	; 0x32
 8002a4c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4807      	ldr	r0, [pc, #28]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a5e:	f005 fefb 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM14_Init+0x84>
    {
        Error_Handler();
 8002a68:	f7ff f926 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM14_Init 2 */

    /* USER CODE END TIM14_Init 2 */
    HAL_TIM_MspPostInit(&htim14);
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <MX_TIM14_Init+0x94>)
 8002a6e:	f000 f9c3 	bl	8002df8 <HAL_TIM_MspPostInit>

}
 8002a72:	bf00      	nop
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200011c4 	.word	0x200011c4
 8002a80:	40002000 	.word	0x40002000

08002a84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b090      	sub	sp, #64	; 0x40
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
    if(tim_encoderHandle->Instance==TIM1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a71      	ldr	r2, [pc, #452]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d135      	bne.n	8002b12 <HAL_TIM_Encoder_MspInit+0x8e>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* TIM1 clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a68      	ldr	r2, [pc, #416]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        /**TIM1 GPIO Configuration
        PE9         ------> TIM1_CH1
        PE11         ------> TIM1_CH2
        */
        GPIO_InitStruct.Pin = Motor_1_Encoder_A_Pin|Motor_1_Encoder_B_Pin;
 8002ade:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af8:	4619      	mov	r1, r3
 8002afa:	485d      	ldr	r0, [pc, #372]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002afc:	f001 fc82 	bl	8004404 <HAL_GPIO_Init>

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 3, 0);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2103      	movs	r1, #3
 8002b04:	201a      	movs	r0, #26
 8002b06:	f001 f838 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b0a:	201a      	movs	r0, #26
 8002b0c:	f001 f851 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
    }
}
 8002b10:	e0a5      	b.n	8002c5e <HAL_TIM_Encoder_MspInit+0x1da>
    else if(tim_encoderHandle->Instance==TIM4)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d12d      	bne.n	8002b78 <HAL_TIM_Encoder_MspInit+0xf4>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	623b      	str	r3, [r7, #32]
 8002b20:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a51      	ldr	r2, [pc, #324]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4a4a      	ldr	r2, [pc, #296]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6313      	str	r3, [r2, #48]	; 0x30
 8002b48:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	69fb      	ldr	r3, [r7, #28]
        GPIO_InitStruct.Pin = Motor_4_Encoder_A_Pin|Motor_4_Encoder_B_Pin;
 8002b54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b66:	2302      	movs	r3, #2
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4841      	ldr	r0, [pc, #260]	; (8002c78 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002b72:	f001 fc47 	bl	8004404 <HAL_GPIO_Init>
}
 8002b76:	e072      	b.n	8002c5e <HAL_TIM_Encoder_MspInit+0x1da>
    else if(tim_encoderHandle->Instance==TIM5)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3f      	ldr	r2, [pc, #252]	; (8002c7c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12c      	bne.n	8002bdc <HAL_TIM_Encoder_MspInit+0x158>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
        GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	482a      	ldr	r0, [pc, #168]	; (8002c80 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002bd6:	f001 fc15 	bl	8004404 <HAL_GPIO_Init>
}
 8002bda:	e040      	b.n	8002c5e <HAL_TIM_Encoder_MspInit+0x1da>
    else if(tim_encoderHandle->Instance==TIM8)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_TIM_Encoder_MspInit+0x200>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d13b      	bne.n	8002c5e <HAL_TIM_Encoder_MspInit+0x1da>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = Motor_2_Encoder_A_Pin|Motor_2_Encoder_B_Pin;
 8002c1e:	23c0      	movs	r3, #192	; 0xc0
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c36:	4619      	mov	r1, r3
 8002c38:	4813      	ldr	r0, [pc, #76]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c3a:	f001 fbe3 	bl	8004404 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2102      	movs	r1, #2
 8002c42:	202c      	movs	r0, #44	; 0x2c
 8002c44:	f000 ff99 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002c48:	202c      	movs	r0, #44	; 0x2c
 8002c4a:	f000 ffb2 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2102      	movs	r1, #2
 8002c52:	202d      	movs	r0, #45	; 0x2d
 8002c54:	f000 ff91 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c58:	202d      	movs	r0, #45	; 0x2d
 8002c5a:	f000 ffaa 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3740      	adds	r7, #64	; 0x40
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40020000 	.word	0x40020000
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40020800 	.word	0x40020800

08002c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

    if(tim_baseHandle->Instance==TIM3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_TIM_Base_MspInit+0x150>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_Base_MspInit+0x30>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
        /* TIM3 clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }
}
 8002cba:	e08a      	b.n	8002dd2 <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM6)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a48      	ldr	r2, [pc, #288]	; (8002de4 <HAL_TIM_Base_MspInit+0x158>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d116      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x68>
        __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	4b45      	ldr	r3, [pc, #276]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a44      	ldr	r2, [pc, #272]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b42      	ldr	r3, [pc, #264]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	2036      	movs	r0, #54	; 0x36
 8002ce8:	f000 ff47 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cec:	2036      	movs	r0, #54	; 0x36
 8002cee:	f000 ff60 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002cf2:	e06e      	b.n	8002dd2 <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM7)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	; (8002de8 <HAL_TIM_Base_MspInit+0x15c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d116      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0xa0>
        __HAL_RCC_TIM7_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a36      	ldr	r2, [pc, #216]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d08:	f043 0320 	orr.w	r3, r3, #32
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
        HAL_NVIC_SetPriority(TIM7_IRQn, 15, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	210f      	movs	r1, #15
 8002d1e:	2037      	movs	r0, #55	; 0x37
 8002d20:	f000 ff2b 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d24:	2037      	movs	r0, #55	; 0x37
 8002d26:	f000 ff44 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002d2a:	e052      	b.n	8002dd2 <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM11)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	; (8002dec <HAL_TIM_Base_MspInit+0x160>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d116      	bne.n	8002d64 <HAL_TIM_Base_MspInit+0xd8>
        __HAL_RCC_TIM11_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 3, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2103      	movs	r1, #3
 8002d56:	201a      	movs	r0, #26
 8002d58:	f000 ff0f 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d5c:	201a      	movs	r0, #26
 8002d5e:	f000 ff28 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002d62:	e036      	b.n	8002dd2 <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM13)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_TIM_Base_MspInit+0x164>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d116      	bne.n	8002d9c <HAL_TIM_Base_MspInit+0x110>
        __HAL_RCC_TIM13_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	202c      	movs	r0, #44	; 0x2c
 8002d90:	f000 fef3 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	f000 ff0c 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002d9a:	e01a      	b.n	8002dd2 <HAL_TIM_Base_MspInit+0x146>
    else if(tim_baseHandle->Instance==TIM14)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <HAL_TIM_Base_MspInit+0x168>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d115      	bne.n	8002dd2 <HAL_TIM_Base_MspInit+0x146>
        __HAL_RCC_TIM14_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_TIM_Base_MspInit+0x154>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	202d      	movs	r0, #45	; 0x2d
 8002dc8:	f000 fed7 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002dcc:	202d      	movs	r0, #45	; 0x2d
 8002dce:	f000 fef0 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40001000 	.word	0x40001000
 8002de8:	40001400 	.word	0x40001400
 8002dec:	40014800 	.word	0x40014800
 8002df0:	40001c00 	.word	0x40001c00
 8002df4:	40002000 	.word	0x40002000

08002df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
    if(timHandle->Instance==TIM3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <HAL_TIM_MspPostInit+0xec>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d13c      	bne.n	8002e94 <HAL_TIM_MspPostInit+0x9c>
    {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
        PA6         ------> TIM3_CH1
        PA7         ------> TIM3_CH2
        PB0         ------> TIM3_CH3
        PB1         ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e62:	2302      	movs	r3, #2
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	481f      	ldr	r0, [pc, #124]	; (8002eec <HAL_TIM_MspPostInit+0xf4>)
 8002e6e:	f001 fac9 	bl	8004404 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = Motor_3_PWM_Pin|Motor_4_PWM_Pin;
 8002e72:	2303      	movs	r3, #3
 8002e74:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e82:	2302      	movs	r3, #2
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4818      	ldr	r0, [pc, #96]	; (8002ef0 <HAL_TIM_MspPostInit+0xf8>)
 8002e8e:	f001 fab9 	bl	8004404 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
    }

}
 8002e92:	e023      	b.n	8002edc <HAL_TIM_MspPostInit+0xe4>
    else if(timHandle->Instance==TIM14)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIM_MspPostInit+0xfc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d11e      	bne.n	8002edc <HAL_TIM_MspPostInit+0xe4>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_TIM_MspPostInit+0xf0>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = LED1_Pin;
 8002eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ebe:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002ecc:	2309      	movs	r3, #9
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <HAL_TIM_MspPostInit+0x100>)
 8002ed8:	f001 fa94 	bl	8004404 <HAL_GPIO_Init>
}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40002000 	.word	0x40002000
 8002ef8:	40021400 	.word	0x40021400

08002efc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <MX_USART1_UART_Init+0x50>)
 8002f04:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f0c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f22:	220c      	movs	r2, #12
 8002f24:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_USART1_UART_Init+0x4c>)
 8002f34:	f006 f9e2 	bl	80092fc <HAL_UART_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8002f3e:	f7fe febb 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000120c 	.word	0x2000120c
 8002f4c:	40011000 	.word	0x40011000

08002f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <MX_USART2_UART_Init+0x50>)
 8002f58:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f60:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f76:	220c      	movs	r2, #12
 8002f78:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_USART2_UART_Init+0x4c>)
 8002f88:	f006 f9b8 	bl	80092fc <HAL_UART_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8002f92:	f7fe fe91 	bl	8001cb8 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20001250 	.word	0x20001250
 8002fa0:	40004400 	.word	0x40004400

08002fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
    if(uartHandle->Instance==USART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_UART_MspInit+0xf8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d135      	bne.n	8003032 <HAL_UART_MspInit+0x8e>
    {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8002fd0:	f043 0310 	orr.w	r3, r3, #16
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a2d      	ldr	r2, [pc, #180]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
        /**USART1 GPIO Configuration
        PA9         ------> USART1_TX
        PA10         ------> USART1_RX
        */
        GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8002ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003002:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003010:	2307      	movs	r3, #7
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	4822      	ldr	r0, [pc, #136]	; (80030a4 <HAL_UART_MspInit+0x100>)
 800301c:	f001 f9f2 	bl	8004404 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2101      	movs	r1, #1
 8003024:	2025      	movs	r0, #37	; 0x25
 8003026:	f000 fda8 	bl	8003b7a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 800302a:	2025      	movs	r0, #37	; 0x25
 800302c:	f000 fdc1 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
    }
}
 8003030:	e030      	b.n	8003094 <HAL_UART_MspInit+0xf0>
    else if(uartHandle->Instance==USART2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <HAL_UART_MspInit+0x104>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d12b      	bne.n	8003094 <HAL_UART_MspInit+0xf0>
        __HAL_RCC_USART2_CLK_ENABLE();
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8003046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304a:	6413      	str	r3, [r2, #64]	; 0x40
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6313      	str	r3, [r2, #48]	; 0x30
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_UART_MspInit+0xfc>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003074:	230c      	movs	r3, #12
 8003076:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003080:	2303      	movs	r3, #3
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003084:	2307      	movs	r3, #7
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	4619      	mov	r1, r3
 800308e:	4805      	ldr	r0, [pc, #20]	; (80030a4 <HAL_UART_MspInit+0x100>)
 8003090:	f001 f9b8 	bl	8004404 <HAL_GPIO_Init>
}
 8003094:	bf00      	nop
 8003096:	3730      	adds	r7, #48	; 0x30
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40011000 	.word	0x40011000
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40004400 	.word	0x40004400

080030ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b0:	480d      	ldr	r0, [pc, #52]	; (80030e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030b2:	490e      	ldr	r1, [pc, #56]	; (80030ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030c8:	4c0b      	ldr	r4, [pc, #44]	; (80030f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030d6:	f7ff f9d1 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030da:	f010 fe9d 	bl	8013e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030de:	f7fe fa29 	bl	8001534 <main>
  bx  lr    
 80030e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 80030f0:	0801e3b0 	.word	0x0801e3b0
  ldr r2, =_sbss
 80030f4:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 80030f8:	20007ac0 	.word	0x20007ac0

080030fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC_IRQHandler>
	...

08003100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <HAL_Init+0x40>)
 800310a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800310e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_Init+0x40>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_Init+0x40>)
 8003116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800311a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_Init+0x40>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a07      	ldr	r2, [pc, #28]	; (8003140 <HAL_Init+0x40>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003128:	2003      	movs	r0, #3
 800312a:	f000 fd1b 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312e:	2000      	movs	r0, #0
 8003130:	f000 f808 	bl	8003144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003134:	f7ff f812 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00

08003144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_InitTick+0x54>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_InitTick+0x58>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315a:	fbb3 f3f1 	udiv	r3, r3, r1
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd33 	bl	8003bce <HAL_SYSTICK_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e00e      	b.n	8003190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d80a      	bhi.n	800318e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003178:	2200      	movs	r2, #0
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f000 fcfb 	bl	8003b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <HAL_InitTick+0x5c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	e000      	b.n	8003190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000008 	.word	0x20000008
 800319c:	20000010 	.word	0x20000010
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_IncTick+0x20>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_IncTick+0x24>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_IncTick+0x24>)
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000010 	.word	0x20000010
 80031c8:	20001294 	.word	0x20001294

080031cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return uwTick;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_GetTick+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20001294 	.word	0x20001294

080031e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff ffee 	bl	80031cc <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d005      	beq.n	800320a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_Delay+0x44>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800320a:	bf00      	nop
 800320c:	f7ff ffde 	bl	80031cc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d8f7      	bhi.n	800320c <HAL_Delay+0x28>
  {
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000010 	.word	0x20000010

0800322c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e033      	b.n	80032aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd ff76 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003272:	f023 0302 	bic.w	r3, r3, #2
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 faa4 	bl	80037cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
 800329a:	e001      	b.n	80032a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Start+0x1a>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0b2      	b.n	8003434 <HAL_ADC_Start+0x180>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d018      	beq.n	8003316 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032f4:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_ADC_Start+0x18c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_ADC_Start+0x190>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	0c9a      	lsrs	r2, r3, #18
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003308:	e002      	b.n	8003310 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3b01      	subs	r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f9      	bne.n	800330a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d17a      	bne.n	800341a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800334e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d106      	bne.n	8003372 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f023 0206 	bic.w	r2, r3, #6
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
 8003370:	e002      	b.n	8003378 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_ADC_Start+0x194>)
 8003382:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800338c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12a      	bne.n	80033f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2b      	ldr	r2, [pc, #172]	; (800344c <HAL_ADC_Start+0x198>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d015      	beq.n	80033d0 <HAL_ADC_Start+0x11c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a29      	ldr	r2, [pc, #164]	; (8003450 <HAL_ADC_Start+0x19c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d105      	bne.n	80033ba <HAL_ADC_Start+0x106>
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_ADC_Start+0x194>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_ADC_Start+0x1a0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d136      	bne.n	8003432 <HAL_ADC_Start+0x17e>
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_ADC_Start+0x194>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d130      	bne.n	8003432 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d129      	bne.n	8003432 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	e020      	b.n	8003432 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a15      	ldr	r2, [pc, #84]	; (800344c <HAL_ADC_Start+0x198>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d11b      	bne.n	8003432 <HAL_ADC_Start+0x17e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d114      	bne.n	8003432 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e00b      	b.n	8003432 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	20000008 	.word	0x20000008
 8003444:	431bde83 	.word	0x431bde83
 8003448:	40012300 	.word	0x40012300
 800344c:	40012000 	.word	0x40012000
 8003450:	40012100 	.word	0x40012100
 8003454:	40012200 	.word	0x40012200

08003458 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d113      	bne.n	800349e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003484:	d10b      	bne.n	800349e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e063      	b.n	8003566 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800349e:	f7ff fe95 	bl	80031cc <HAL_GetTick>
 80034a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034a4:	e021      	b.n	80034ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d01d      	beq.n	80034ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_ADC_PollForConversion+0x6c>
 80034b4:	f7ff fe8a 	bl	80031cc <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d212      	bcs.n	80034ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d00b      	beq.n	80034ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e03d      	b.n	8003566 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d1d6      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0212 	mvn.w	r2, #18
 8003500:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d123      	bne.n	8003564 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11f      	bne.n	8003564 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800353c:	2b00      	cmp	r3, #0
 800353e:	d111      	bne.n	8003564 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e105      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x228>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d925      	bls.n	8003600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68d9      	ldr	r1, [r3, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	3b1e      	subs	r3, #30
 80035ca:	2207      	movs	r2, #7
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43da      	mvns	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	400a      	ands	r2, r1
 80035d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4618      	mov	r0, r3
 80035ec:	4603      	mov	r3, r0
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4403      	add	r3, r0
 80035f2:	3b1e      	subs	r3, #30
 80035f4:	409a      	lsls	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	e022      	b.n	8003646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6919      	ldr	r1, [r3, #16]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	2207      	movs	r2, #7
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	400a      	ands	r2, r1
 8003622:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6919      	ldr	r1, [r3, #16]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	4603      	mov	r3, r0
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4403      	add	r3, r0
 800363c:	409a      	lsls	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d824      	bhi.n	8003698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	3b05      	subs	r3, #5
 8003660:	221f      	movs	r2, #31
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	400a      	ands	r2, r1
 800366e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	3b05      	subs	r3, #5
 800368a:	fa00 f203 	lsl.w	r2, r0, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	635a      	str	r2, [r3, #52]	; 0x34
 8003696:	e04c      	b.n	8003732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d824      	bhi.n	80036ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	3b23      	subs	r3, #35	; 0x23
 80036b2:	221f      	movs	r2, #31
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43da      	mvns	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	400a      	ands	r2, r1
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	3b23      	subs	r3, #35	; 0x23
 80036dc:	fa00 f203 	lsl.w	r2, r0, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
 80036e8:	e023      	b.n	8003732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	3b41      	subs	r3, #65	; 0x41
 80036fc:	221f      	movs	r2, #31
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4618      	mov	r0, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	3b41      	subs	r3, #65	; 0x41
 8003726:	fa00 f203 	lsl.w	r2, r0, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_ADC_ConfigChannel+0x234>)
 8003734:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <HAL_ADC_ConfigChannel+0x238>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d109      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x1cc>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b12      	cmp	r3, #18
 8003746:	d105      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_ADC_ConfigChannel+0x238>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d123      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x21e>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b10      	cmp	r3, #16
 8003764:	d003      	beq.n	800376e <HAL_ADC_ConfigChannel+0x1e6>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b11      	cmp	r3, #17
 800376c:	d11b      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d111      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_ADC_ConfigChannel+0x23c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_ADC_ConfigChannel+0x240>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	0c9a      	lsrs	r2, r3, #18
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003798:	e002      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3b01      	subs	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f9      	bne.n	800379a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40012300 	.word	0x40012300
 80037c0:	40012000 	.word	0x40012000
 80037c4:	20000008 	.word	0x20000008
 80037c8:	431bde83 	.word	0x431bde83

080037cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <ADC_Init+0x1f0>)
 80037d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <ADC_Init+0x1f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e00f      	b.n	80038ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0202 	bic.w	r2, r2, #2
 80038d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
 80038e4:	005a      	lsls	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	3b01      	subs	r3, #1
 8003924:	035a      	lsls	r2, r3, #13
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e007      	b.n	8003940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	3b01      	subs	r3, #1
 800395c:	051a      	lsls	r2, r3, #20
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003982:	025a      	lsls	r2, r3, #9
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	029a      	lsls	r2, r3, #10
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012300 	.word	0x40012300
 80039c0:	0f000001 	.word	0x0f000001

080039c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039f6:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	60d3      	str	r3, [r2, #12]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <__NVIC_GetPriorityGrouping+0x18>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 0307 	and.w	r3, r3, #7
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	db0b      	blt.n	8003a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	4907      	ldr	r1, [pc, #28]	; (8003a60 <__NVIC_EnableIRQ+0x38>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2001      	movs	r0, #1
 8003a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff8e 	bl	8003a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff29 	bl	80039c4 <__NVIC_SetPriorityGrouping>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8c:	f7ff ff3e 	bl	8003a0c <__NVIC_GetPriorityGrouping>
 8003b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff8e 	bl	8003ab8 <NVIC_EncodePriority>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff5d 	bl	8003a64 <__NVIC_SetPriority>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff31 	bl	8003a28 <__NVIC_EnableIRQ>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffa2 	bl	8003b20 <SysTick_Config>
 8003bdc:	4603      	mov	r3, r0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7ff faea 	bl	80031cc <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e099      	b.n	8003d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c24:	e00f      	b.n	8003c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c26:	f7ff fad1 	bl	80031cc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d908      	bls.n	8003c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e078      	b.n	8003d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e8      	bne.n	8003c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <HAL_DMA_Init+0x158>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d107      	bne.n	8003cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0307 	bic.w	r3, r3, #7
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d117      	bne.n	8003d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb0d 	bl	800430c <DMA_CheckFifoParam>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2240      	movs	r2, #64	; 0x40
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d06:	2301      	movs	r3, #1
 8003d08:	e016      	b.n	8003d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fac4 	bl	80042a0 <DMA_CalcBaseAndBitshift>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	223f      	movs	r2, #63	; 0x3f
 8003d22:	409a      	lsls	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	f010803f 	.word	0xf010803f

08003d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_DMA_Start_IT+0x26>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e040      	b.n	8003dec <HAL_DMA_Start_IT+0xa8>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d12f      	bne.n	8003dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa56 	bl	8004244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0216 	orr.w	r2, r2, #22
 8003db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e005      	b.n	8003dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
 8003de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e02:	f7ff f9e3 	bl	80031cc <HAL_GetTick>
 8003e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d008      	beq.n	8003e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e052      	b.n	8003ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0216 	bic.w	r2, r2, #22
 8003e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_DMA_Abort+0x62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0208 	bic.w	r2, r2, #8
 8003e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e76:	e013      	b.n	8003ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e78:	f7ff f9a8 	bl	80031cc <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d90c      	bls.n	8003ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e015      	b.n	8003ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e4      	bne.n	8003e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	223f      	movs	r2, #63	; 0x3f
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00c      	b.n	8003f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f24:	4b8e      	ldr	r3, [pc, #568]	; (8004160 <HAL_DMA_IRQHandler+0x248>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a8e      	ldr	r2, [pc, #568]	; (8004164 <HAL_DMA_IRQHandler+0x24c>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	2208      	movs	r2, #8
 8003f44:	409a      	lsls	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01a      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	2208      	movs	r2, #8
 8003f72:	409a      	lsls	r2, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d012      	beq.n	8003fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f043 0202 	orr.w	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2204      	movs	r2, #4
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d043      	beq.n	8004088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03c      	beq.n	8004088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	2210      	movs	r2, #16
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d018      	beq.n	800405a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d024      	beq.n	8004088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
 8004046:	e01f      	b.n	8004088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01b      	beq.n	8004088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
 8004058:	e016      	b.n	8004088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0208 	bic.w	r2, r2, #8
 8004076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2220      	movs	r2, #32
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 808f 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8087 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	2220      	movs	r2, #32
 80040b0:	409a      	lsls	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d136      	bne.n	8004130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0216 	bic.w	r2, r2, #22
 80040d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_DMA_IRQHandler+0x1da>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0208 	bic.w	r2, r2, #8
 8004100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	223f      	movs	r2, #63	; 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	d07e      	beq.n	8004224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
        }
        return;
 800412e:	e079      	b.n	8004224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01d      	beq.n	800417a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10d      	bne.n	8004168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	2b00      	cmp	r3, #0
 8004152:	d031      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e02c      	b.n	80041b8 <HAL_DMA_IRQHandler+0x2a0>
 800415e:	bf00      	nop
 8004160:	20000008 	.word	0x20000008
 8004164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d023      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e01e      	b.n	80041b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10f      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0210 	bic.w	r2, r2, #16
 8004196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d032      	beq.n	8004226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d022      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2205      	movs	r2, #5
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d307      	bcc.n	8004200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f2      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x2cc>
 80041fe:	e000      	b.n	8004202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
 8004222:	e000      	b.n	8004226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004224:	bf00      	nop
    }
  }
}
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d108      	bne.n	8004284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004282:	e007      	b.n	8004294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	60da      	str	r2, [r3, #12]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3b10      	subs	r3, #16
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <DMA_CalcBaseAndBitshift+0x64>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <DMA_CalcBaseAndBitshift+0x68>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d909      	bls.n	80042e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	659a      	str	r2, [r3, #88]	; 0x58
 80042e0:	e007      	b.n	80042f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	aaaaaaab 	.word	0xaaaaaaab
 8004308:	08019b5c 	.word	0x08019b5c

0800430c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11f      	bne.n	8004366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d856      	bhi.n	80043da <DMA_CheckFifoParam+0xce>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <DMA_CheckFifoParam+0x28>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004345 	.word	0x08004345
 8004338:	08004357 	.word	0x08004357
 800433c:	08004345 	.word	0x08004345
 8004340:	080043db 	.word	0x080043db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d046      	beq.n	80043de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e043      	b.n	80043de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435e:	d140      	bne.n	80043e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004364:	e03d      	b.n	80043e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d121      	bne.n	80043b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b03      	cmp	r3, #3
 8004374:	d837      	bhi.n	80043e6 <DMA_CheckFifoParam+0xda>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <DMA_CheckFifoParam+0x70>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004393 	.word	0x08004393
 8004384:	0800438d 	.word	0x0800438d
 8004388:	080043a5 	.word	0x080043a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e030      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d025      	beq.n	80043ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a2:	e022      	b.n	80043ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ac:	d11f      	bne.n	80043ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043b2:	e01c      	b.n	80043ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d903      	bls.n	80043c2 <DMA_CheckFifoParam+0xb6>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d003      	beq.n	80043c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043c0:	e018      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      break;
 80043c6:	e015      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      break;
 80043d8:	e00b      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043da:	bf00      	nop
 80043dc:	e00a      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
 80043e0:	e008      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e006      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043e6:	bf00      	nop
 80043e8:	e004      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043f2:	bf00      	nop
    }
  } 
  
  return status; 
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e16b      	b.n	80046f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004420:	2201      	movs	r2, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	f040 815a 	bne.w	80046f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d005      	beq.n	8004456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004452:	2b02      	cmp	r3, #2
 8004454:	d130      	bne.n	80044b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448c:	2201      	movs	r2, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 0201 	and.w	r2, r3, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d017      	beq.n	80044f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d123      	bne.n	8004548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80b4 	beq.w	80046f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	4b60      	ldr	r3, [pc, #384]	; (8004710 <HAL_GPIO_Init+0x30c>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4a5f      	ldr	r2, [pc, #380]	; (8004710 <HAL_GPIO_Init+0x30c>)
 8004594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004598:	6453      	str	r3, [r2, #68]	; 0x44
 800459a:	4b5d      	ldr	r3, [pc, #372]	; (8004710 <HAL_GPIO_Init+0x30c>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a6:	4a5b      	ldr	r2, [pc, #364]	; (8004714 <HAL_GPIO_Init+0x310>)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_GPIO_Init+0x314>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02b      	beq.n	800462a <HAL_GPIO_Init+0x226>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a51      	ldr	r2, [pc, #324]	; (800471c <HAL_GPIO_Init+0x318>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d025      	beq.n	8004626 <HAL_GPIO_Init+0x222>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a50      	ldr	r2, [pc, #320]	; (8004720 <HAL_GPIO_Init+0x31c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <HAL_GPIO_Init+0x21e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <HAL_GPIO_Init+0x320>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d019      	beq.n	800461e <HAL_GPIO_Init+0x21a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <HAL_GPIO_Init+0x324>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_GPIO_Init+0x216>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4d      	ldr	r2, [pc, #308]	; (800472c <HAL_GPIO_Init+0x328>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00d      	beq.n	8004616 <HAL_GPIO_Init+0x212>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4c      	ldr	r2, [pc, #304]	; (8004730 <HAL_GPIO_Init+0x32c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <HAL_GPIO_Init+0x20e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4b      	ldr	r2, [pc, #300]	; (8004734 <HAL_GPIO_Init+0x330>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_GPIO_Init+0x20a>
 800460a:	2307      	movs	r3, #7
 800460c:	e00e      	b.n	800462c <HAL_GPIO_Init+0x228>
 800460e:	2308      	movs	r3, #8
 8004610:	e00c      	b.n	800462c <HAL_GPIO_Init+0x228>
 8004612:	2306      	movs	r3, #6
 8004614:	e00a      	b.n	800462c <HAL_GPIO_Init+0x228>
 8004616:	2305      	movs	r3, #5
 8004618:	e008      	b.n	800462c <HAL_GPIO_Init+0x228>
 800461a:	2304      	movs	r3, #4
 800461c:	e006      	b.n	800462c <HAL_GPIO_Init+0x228>
 800461e:	2303      	movs	r3, #3
 8004620:	e004      	b.n	800462c <HAL_GPIO_Init+0x228>
 8004622:	2302      	movs	r3, #2
 8004624:	e002      	b.n	800462c <HAL_GPIO_Init+0x228>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_GPIO_Init+0x228>
 800462a:	2300      	movs	r3, #0
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	f002 0203 	and.w	r2, r2, #3
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	4093      	lsls	r3, r2
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800463c:	4935      	ldr	r1, [pc, #212]	; (8004714 <HAL_GPIO_Init+0x310>)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	3302      	adds	r3, #2
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_GPIO_Init+0x334>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800466e:	4a32      	ldr	r2, [pc, #200]	; (8004738 <HAL_GPIO_Init+0x334>)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004674:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_GPIO_Init+0x334>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	43db      	mvns	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004698:	4a27      	ldr	r2, [pc, #156]	; (8004738 <HAL_GPIO_Init+0x334>)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <HAL_GPIO_Init+0x334>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <HAL_GPIO_Init+0x334>)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_GPIO_Init+0x334>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046ec:	4a12      	ldr	r2, [pc, #72]	; (8004738 <HAL_GPIO_Init+0x334>)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	f67f ae90 	bls.w	8004420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800
 8004714:	40013800 	.word	0x40013800
 8004718:	40020000 	.word	0x40020000
 800471c:	40020400 	.word	0x40020400
 8004720:	40020800 	.word	0x40020800
 8004724:	40020c00 	.word	0x40020c00
 8004728:	40021000 	.word	0x40021000
 800472c:	40021400 	.word	0x40021400
 8004730:	40021800 	.word	0x40021800
 8004734:	40021c00 	.word	0x40021c00
 8004738:	40013c00 	.word	0x40013c00

0800473c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e001      	b.n	800475e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	807b      	strh	r3, [r7, #2]
 8004778:	4613      	mov	r3, r2
 800477a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800477c:	787b      	ldrb	r3, [r7, #1]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004782:	887a      	ldrh	r2, [r7, #2]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004788:	e003      	b.n	8004792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	041a      	lsls	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	619a      	str	r2, [r3, #24]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b6:	4a05      	ldr	r2, [pc, #20]	; (80047cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd fa62 	bl	8001c88 <HAL_GPIO_EXTI_Callback>
  }
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e12b      	b.n	8004a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fe54 	bl	80014a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	; 0x24
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004834:	f001 fc14 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8004838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4a81      	ldr	r2, [pc, #516]	; (8004a44 <HAL_I2C_Init+0x274>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d807      	bhi.n	8004854 <HAL_I2C_Init+0x84>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a80      	ldr	r2, [pc, #512]	; (8004a48 <HAL_I2C_Init+0x278>)
 8004848:	4293      	cmp	r3, r2
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e006      	b.n	8004862 <HAL_I2C_Init+0x92>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a7d      	ldr	r2, [pc, #500]	; (8004a4c <HAL_I2C_Init+0x27c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	bf94      	ite	ls
 800485c:	2301      	movls	r3, #1
 800485e:	2300      	movhi	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0e7      	b.n	8004a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a78      	ldr	r2, [pc, #480]	; (8004a50 <HAL_I2C_Init+0x280>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0c9b      	lsrs	r3, r3, #18
 8004874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a6a      	ldr	r2, [pc, #424]	; (8004a44 <HAL_I2C_Init+0x274>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d802      	bhi.n	80048a4 <HAL_I2C_Init+0xd4>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	3301      	adds	r3, #1
 80048a2:	e009      	b.n	80048b8 <HAL_I2C_Init+0xe8>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	4a69      	ldr	r2, [pc, #420]	; (8004a54 <HAL_I2C_Init+0x284>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	3301      	adds	r3, #1
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	495c      	ldr	r1, [pc, #368]	; (8004a44 <HAL_I2C_Init+0x274>)
 80048d4:	428b      	cmp	r3, r1
 80048d6:	d819      	bhi.n	800490c <HAL_I2C_Init+0x13c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1e59      	subs	r1, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e6:	1c59      	adds	r1, r3, #1
 80048e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048ec:	400b      	ands	r3, r1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_I2C_Init+0x138>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1e59      	subs	r1, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004906:	e051      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 8004908:	2304      	movs	r3, #4
 800490a:	e04f      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d111      	bne.n	8004938 <HAL_I2C_Init+0x168>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e58      	subs	r0, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e012      	b.n	800495e <HAL_I2C_Init+0x18e>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	0099      	lsls	r1, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	fbb0 f3f3 	udiv	r3, r0, r3
 800494e:	3301      	adds	r3, #1
 8004950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Init+0x196>
 8004962:	2301      	movs	r3, #1
 8004964:	e022      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10e      	bne.n	800498c <HAL_I2C_Init+0x1bc>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1e58      	subs	r0, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	440b      	add	r3, r1
 800497c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004980:	3301      	adds	r3, #1
 8004982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498a:	e00f      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1e58      	subs	r0, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	0099      	lsls	r1, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	6809      	ldr	r1, [r1, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6911      	ldr	r1, [r2, #16]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	4311      	orrs	r1, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	000186a0 	.word	0x000186a0
 8004a48:	001e847f 	.word	0x001e847f
 8004a4c:	003d08ff 	.word	0x003d08ff
 8004a50:	431bde83 	.word	0x431bde83
 8004a54:	10624dd3 	.word	0x10624dd3

08004a58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a72:	f7fe fbab 	bl	80031cc <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	f040 80d9 	bne.w	8004c38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2319      	movs	r3, #25
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	496d      	ldr	r1, [pc, #436]	; (8004c44 <HAL_I2C_Mem_Write+0x1ec>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fc7f 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0cc      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_I2C_Mem_Write+0x56>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0c5      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d007      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2221      	movs	r2, #33	; 0x21
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2240      	movs	r2, #64	; 0x40
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a4d      	ldr	r2, [pc, #308]	; (8004c48 <HAL_I2C_Mem_Write+0x1f0>)
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b16:	88f8      	ldrh	r0, [r7, #6]
 8004b18:	893a      	ldrh	r2, [r7, #8]
 8004b1a:	8979      	ldrh	r1, [r7, #10]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4603      	mov	r3, r0
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fab6 	bl	8005098 <I2C_RequestMemoryWrite>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d052      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e081      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fd00 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d107      	bne.n	8004b5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06b      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1aa      	bne.n	8004b36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fcec 	bl	80055c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d107      	bne.n	8004c08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e016      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	00100002 	.word	0x00100002
 8004c48:	ffff0000 	.word	0xffff0000

08004c4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	813b      	strh	r3, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c66:	f7fe fab1 	bl	80031cc <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	f040 8208 	bne.w	800508a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2319      	movs	r3, #25
 8004c80:	2201      	movs	r2, #1
 8004c82:	497b      	ldr	r1, [pc, #492]	; (8004e70 <HAL_I2C_Mem_Read+0x224>)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fb85 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
 8004c92:	e1fb      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2C_Mem_Read+0x56>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e1f4      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d007      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2222      	movs	r2, #34	; 0x22
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a5b      	ldr	r2, [pc, #364]	; (8004e74 <HAL_I2C_Mem_Read+0x228>)
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d0a:	88f8      	ldrh	r0, [r7, #6]
 8004d0c:	893a      	ldrh	r2, [r7, #8]
 8004d0e:	8979      	ldrh	r1, [r7, #10]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4603      	mov	r3, r0
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa52 	bl	80051c4 <I2C_RequestMemoryRead>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e1b0      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d113      	bne.n	8004d5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e184      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d11b      	bne.n	8004d9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e164      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d11b      	bne.n	8004dda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	e144      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004df0:	e138      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	f200 80f1 	bhi.w	8004fde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d123      	bne.n	8004e4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fc1b 	bl	8005644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e139      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e4a:	e10b      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d14e      	bne.n	8004ef2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4906      	ldr	r1, [pc, #24]	; (8004e78 <HAL_I2C_Mem_Read+0x22c>)
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fa98 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e10e      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
 8004e6e:	bf00      	nop
 8004e70:	00100002 	.word	0x00100002
 8004e74:	ffff0000 	.word	0xffff0000
 8004e78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef0:	e0b8      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4966      	ldr	r1, [pc, #408]	; (8005094 <HAL_I2C_Mem_Read+0x448>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fa49 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0bf      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2200      	movs	r2, #0
 8004f56:	494f      	ldr	r1, [pc, #316]	; (8005094 <HAL_I2C_Mem_Read+0x448>)
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fa1b 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e091      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fdc:	e042      	b.n	8005064 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fb2e 	bl	8005644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e04c      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d118      	bne.n	8005064 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f aec2 	bne.w	8004df2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00010004 	.word	0x00010004

08005098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	817b      	strh	r3, [r7, #10]
 80050aa:	460b      	mov	r3, r1
 80050ac:	813b      	strh	r3, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f960 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00d      	beq.n	80050f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e8:	d103      	bne.n	80050f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e05f      	b.n	80051b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f6:	897b      	ldrh	r3, [r7, #10]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	492d      	ldr	r1, [pc, #180]	; (80051c0 <I2C_RequestMemoryWrite+0x128>)
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f998 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e04c      	b.n	80051b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	6a39      	ldr	r1, [r7, #32]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fa02 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b04      	cmp	r3, #4
 8005148:	d107      	bne.n	800515a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e02b      	b.n	80051b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d105      	bne.n	8005170 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005164:	893b      	ldrh	r3, [r7, #8]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	611a      	str	r2, [r3, #16]
 800516e:	e021      	b.n	80051b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	b29b      	uxth	r3, r3
 8005176:	b2da      	uxtb	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	6a39      	ldr	r1, [r7, #32]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f9dc 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2b04      	cmp	r3, #4
 8005194:	d107      	bne.n	80051a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e005      	b.n	80051b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051aa:	893b      	ldrh	r3, [r7, #8]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	00010002 	.word	0x00010002

080051c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	4608      	mov	r0, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	461a      	mov	r2, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	817b      	strh	r3, [r7, #10]
 80051d6:	460b      	mov	r3, r1
 80051d8:	813b      	strh	r3, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2200      	movs	r2, #0
 8005206:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f8c2 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005224:	d103      	bne.n	800522e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e0aa      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005240:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	4952      	ldr	r1, [pc, #328]	; (8005390 <I2C_RequestMemoryRead+0x1cc>)
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f8fa 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e097      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6a39      	ldr	r1, [r7, #32]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f964 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	2b04      	cmp	r3, #4
 8005284:	d107      	bne.n	8005296 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005294:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e076      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d105      	bne.n	80052ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052a0:	893b      	ldrh	r3, [r7, #8]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	611a      	str	r2, [r3, #16]
 80052aa:	e021      	b.n	80052f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052ac:	893b      	ldrh	r3, [r7, #8]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	6a39      	ldr	r1, [r7, #32]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f93e 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d107      	bne.n	80052e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e050      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e6:	893b      	ldrh	r3, [r7, #8]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f2:	6a39      	ldr	r1, [r7, #32]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f923 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2b04      	cmp	r3, #4
 8005306:	d107      	bne.n	8005318 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e035      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	2200      	movs	r2, #0
 8005334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f82b 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d103      	bne.n	800535c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e013      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005360:	897b      	ldrh	r3, [r7, #10]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	6a3a      	ldr	r2, [r7, #32]
 8005374:	4906      	ldr	r1, [pc, #24]	; (8005390 <I2C_RequestMemoryRead+0x1cc>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f863 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	00010002 	.word	0x00010002

08005394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a4:	e025      	b.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d021      	beq.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fd ff0d 	bl	80031cc <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d116      	bne.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e023      	b.n	800543a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10d      	bne.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	e00c      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	429a      	cmp	r2, r3
 8005436:	d0b6      	beq.n	80053a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005450:	e051      	b.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d123      	bne.n	80054aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800547a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f043 0204 	orr.w	r2, r3, #4
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e046      	b.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d021      	beq.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fd fe8b 	bl	80031cc <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e020      	b.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10c      	bne.n	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	e00b      	b.n	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	43da      	mvns	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d18d      	bne.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554c:	e02d      	b.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f8ce 	bl	80056f0 <I2C_IsAcknowledgeFailed>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e02d      	b.n	80055ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d021      	beq.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fd fe31 	bl	80031cc <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d116      	bne.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e007      	b.n	80055ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d1ca      	bne.n	800554e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ce:	e02d      	b.n	800562c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f88d 	bl	80056f0 <I2C_IsAcknowledgeFailed>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e02d      	b.n	800563c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d021      	beq.n	800562c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7fd fdf0 	bl	80031cc <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d302      	bcc.n	80055fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d116      	bne.n	800562c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e007      	b.n	800563c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d1ca      	bne.n	80055d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005650:	e042      	b.n	80056d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b10      	cmp	r3, #16
 800565e:	d119      	bne.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0210 	mvn.w	r2, #16
 8005668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e029      	b.n	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005694:	f7fd fd9a 	bl	80031cc <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d116      	bne.n	80056d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e007      	b.n	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d1b5      	bne.n	8005652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d11b      	bne.n	8005740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a07      	ldr	r2, [pc, #28]	; (8005778 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800575a:	f043 0302 	orr.w	r3, r3, #2
 800575e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	4a05      	ldr	r2, [pc, #20]	; (800577c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800576c:	bf30      	wfi
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40007000 	.word	0x40007000
 800577c:	e000ed00 	.word	0xe000ed00

08005780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e267      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d075      	beq.n	800588a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800579e:	4b88      	ldr	r3, [pc, #544]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00c      	beq.n	80057c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057aa:	4b85      	ldr	r3, [pc, #532]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d112      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b6:	4b82      	ldr	r3, [pc, #520]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c2:	d10b      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	4b7e      	ldr	r3, [pc, #504]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05b      	beq.n	8005888 <HAL_RCC_OscConfig+0x108>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d157      	bne.n	8005888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e242      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e4:	d106      	bne.n	80057f4 <HAL_RCC_OscConfig+0x74>
 80057e6:	4b76      	ldr	r3, [pc, #472]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a75      	ldr	r2, [pc, #468]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x98>
 80057fe:	4b70      	ldr	r3, [pc, #448]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6f      	ldr	r2, [pc, #444]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b6d      	ldr	r3, [pc, #436]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6c      	ldr	r2, [pc, #432]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 8005818:	4b69      	ldr	r3, [pc, #420]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a68      	ldr	r2, [pc, #416]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b66      	ldr	r3, [pc, #408]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fd fcc8 	bl	80031cc <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd fcc4 	bl	80031cc <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e207      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b5b      	ldr	r3, [pc, #364]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xc0>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fd fcb4 	bl	80031cc <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd fcb0 	bl	80031cc <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1f3      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	4b51      	ldr	r3, [pc, #324]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0xe8>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005896:	4b4a      	ldr	r3, [pc, #296]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a2:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ae:	4b44      	ldr	r3, [pc, #272]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ba:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x152>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1c7      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4937      	ldr	r1, [pc, #220]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	e03a      	b.n	800595e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <HAL_RCC_OscConfig+0x244>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fd fc69 	bl	80031cc <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058fe:	f7fd fc65 	bl	80031cc <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e1a8      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591c:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4925      	ldr	r1, [pc, #148]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005932:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <HAL_RCC_OscConfig+0x244>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fd fc48 	bl	80031cc <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005940:	f7fd fc44 	bl	80031cc <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e187      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d036      	beq.n	80059d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_RCC_OscConfig+0x248>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fd fc28 	bl	80031cc <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005980:	f7fd fc24 	bl	80031cc <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e167      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x200>
 800599e:	e01b      	b.n	80059d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a0:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_OscConfig+0x248>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a6:	f7fd fc11 	bl	80031cc <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ac:	e00e      	b.n	80059cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fd fc0d 	bl	80031cc <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d907      	bls.n	80059cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e150      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
 80059c0:	40023800 	.word	0x40023800
 80059c4:	42470000 	.word	0x42470000
 80059c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	4b88      	ldr	r3, [pc, #544]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ea      	bne.n	80059ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8097 	beq.w	8005b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ea:	4b81      	ldr	r3, [pc, #516]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	4b7d      	ldr	r3, [pc, #500]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	4a7c      	ldr	r2, [pc, #496]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	; 0x40
 8005a06:	4b7a      	ldr	r3, [pc, #488]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a16:	4b77      	ldr	r3, [pc, #476]	; (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d118      	bne.n	8005a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a22:	4b74      	ldr	r3, [pc, #464]	; (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a73      	ldr	r2, [pc, #460]	; (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2e:	f7fd fbcd 	bl	80031cc <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a36:	f7fd fbc9 	bl	80031cc <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e10c      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCC_OscConfig+0x2ea>
 8005a5c:	4b64      	ldr	r3, [pc, #400]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	4a63      	ldr	r2, [pc, #396]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6713      	str	r3, [r2, #112]	; 0x70
 8005a68:	e01c      	b.n	8005aa4 <HAL_RCC_OscConfig+0x324>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x30c>
 8005a72:	4b5f      	ldr	r3, [pc, #380]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	4a5e      	ldr	r2, [pc, #376]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7e:	4b5c      	ldr	r3, [pc, #368]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	4a5b      	ldr	r2, [pc, #364]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8a:	e00b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x324>
 8005a8c:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	4a57      	ldr	r2, [pc, #348]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	; 0x70
 8005a98:	4b55      	ldr	r3, [pc, #340]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	4a54      	ldr	r2, [pc, #336]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	f023 0304 	bic.w	r3, r3, #4
 8005aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fd fb8e 	bl	80031cc <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab4:	f7fd fb8a 	bl	80031cc <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0cb      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aca:	4b49      	ldr	r3, [pc, #292]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0ee      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x334>
 8005ad6:	e014      	b.n	8005b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad8:	f7fd fb78 	bl	80031cc <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae0:	f7fd fb74 	bl	80031cc <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0b5      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af6:	4b3e      	ldr	r3, [pc, #248]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ee      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d105      	bne.n	8005b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b08:	4b39      	ldr	r3, [pc, #228]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	4a38      	ldr	r2, [pc, #224]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a1 	beq.w	8005c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b1e:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d05c      	beq.n	8005be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d141      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fd fb48 	bl	80031cc <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fd fb44 	bl	80031cc <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e087      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	491b      	ldr	r1, [pc, #108]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fd fb1d 	bl	80031cc <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fd fb19 	bl	80031cc <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e05c      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba8:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x416>
 8005bb4:	e054      	b.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fb06 	bl	80031cc <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fd fb02 	bl	80031cc <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e045      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x444>
 8005be2:	e03d      	b.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e038      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <HAL_RCC_OscConfig+0x4ec>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d028      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d121      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d11a      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	3b01      	subs	r3, #1
 8005c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0cc      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b68      	ldr	r3, [pc, #416]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90c      	bls.n	8005cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0b8      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a58      	ldr	r2, [pc, #352]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cdc:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	494d      	ldr	r1, [pc, #308]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d044      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d119      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d003      	beq.n	8005d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e06f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3e:	4b3b      	ldr	r3, [pc, #236]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e067      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d4e:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4934      	ldr	r1, [pc, #208]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d60:	f7fd fa34 	bl	80031cc <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d66:	e00a      	b.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fd fa30 	bl	80031cc <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e04f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 020c 	and.w	r2, r3, #12
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d1eb      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d20c      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e032      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4916      	ldr	r1, [pc, #88]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490e      	ldr	r1, [pc, #56]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005df6:	f000 f821 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490a      	ldr	r1, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd f994 	bl	8003144 <HAL_InitTick>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40023c00 	.word	0x40023c00
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	08019b44 	.word	0x08019b44
 8005e34:	20000008 	.word	0x20000008
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b094      	sub	sp, #80	; 0x50
 8005e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	647b      	str	r3, [r7, #68]	; 0x44
 8005e48:	2300      	movs	r3, #0
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e54:	4b79      	ldr	r3, [pc, #484]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d00d      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x40>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	f200 80e1 	bhi.w	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e6e:	e0db      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b73      	ldr	r3, [pc, #460]	; (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e74:	e0db      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e76:	4b73      	ldr	r3, [pc, #460]	; (8006044 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e7a:	e0d8      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e7c:	4b6f      	ldr	r3, [pc, #444]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e86:	4b6d      	ldr	r3, [pc, #436]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d063      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e92:	4b6a      	ldr	r3, [pc, #424]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	2200      	movs	r2, #0
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	0159      	lsls	r1, r3, #5
 8005ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec0:	0150      	lsls	r0, r2, #5
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	1a51      	subs	r1, r2, r1
 8005eca:	6139      	str	r1, [r7, #16]
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb63 0301 	sbc.w	r3, r3, r1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	018b      	lsls	r3, r1, #6
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eea:	4651      	mov	r1, sl
 8005eec:	018a      	lsls	r2, r1, #6
 8005eee:	4651      	mov	r1, sl
 8005ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	4690      	mov	r8, r2
 8005f10:	4699      	mov	r9, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	eb18 0303 	adds.w	r3, r8, r3
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	eb49 0303 	adc.w	r3, r9, r3
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f2e:	4629      	mov	r1, r5
 8005f30:	024b      	lsls	r3, r1, #9
 8005f32:	4621      	mov	r1, r4
 8005f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f38:	4621      	mov	r1, r4
 8005f3a:	024a      	lsls	r2, r1, #9
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f42:	2200      	movs	r2, #0
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4c:	f7fa feec 	bl	8000d28 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4613      	mov	r3, r2
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f58:	e058      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b38      	ldr	r3, [pc, #224]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	4611      	mov	r1, r2
 8005f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	f04f 0000 	mov.w	r0, #0
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f86:	0150      	lsls	r0, r2, #5
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f92:	4649      	mov	r1, r9
 8005f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fac:	ebb2 040a 	subs.w	r4, r2, sl
 8005fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb45 0303 	adc.w	r3, r5, r3
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	028b      	lsls	r3, r1, #10
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fec:	4621      	mov	r1, r4
 8005fee:	028a      	lsls	r2, r1, #10
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006000:	f7fa fe92 	bl	8000d28 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4613      	mov	r3, r2
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800601c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800601e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006026:	e002      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800602c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006030:	4618      	mov	r0, r3
 8006032:	3750      	adds	r7, #80	; 0x50
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200

08006048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <HAL_RCC_GetHCLKFreq+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000008 	.word	0x20000008

08006060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006064:	f7ff fff0 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0a9b      	lsrs	r3, r3, #10
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	; (8006084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	08019b54 	.word	0x08019b54

08006088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800608c:	f7ff ffdc 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	0b5b      	lsrs	r3, r3, #13
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4903      	ldr	r1, [pc, #12]	; (80060ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40023800 	.word	0x40023800
 80060ac:	08019b54 	.word	0x08019b54

080060b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e022      	b.n	8006108 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fb fe17 	bl	8001d08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2203      	movs	r2, #3
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f814 	bl	8006110 <HAL_SD_InitCard>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00a      	b.n	8006108 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006110:	b5b0      	push	{r4, r5, r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af04      	add	r7, sp, #16
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800612c:	2376      	movs	r3, #118	; 0x76
 800612e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681d      	ldr	r5, [r3, #0]
 8006134:	466c      	mov	r4, sp
 8006136:	f107 0314 	add.w	r3, r7, #20
 800613a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800613e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006148:	4628      	mov	r0, r5
 800614a:	f004 f94f 	bl	800a3ec <SDIO_Init>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e04f      	b.n	8006200 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006160:	4b29      	ldr	r3, [pc, #164]	; (8006208 <HAL_SD_InitCard+0xf8>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f004 f987 	bl	800a47e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <HAL_SD_InitCard+0xf8>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006176:	2002      	movs	r0, #2
 8006178:	f7fd f834 	bl	80031e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 f805 	bl	800718c <SD_PowerON>
 8006182:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e02e      	b.n	8006200 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 ff24 	bl	8006ff0 <SD_InitCard>
 80061a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e01b      	b.n	8006200 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061d0:	4618      	mov	r0, r3
 80061d2:	f004 f9e6 	bl	800a5a2 <SDMMC_CmdBlockLength>
 80061d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00f      	beq.n	80061fe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <HAL_SD_InitCard+0xfc>)
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3728      	adds	r7, #40	; 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	bdb0      	pop	{r4, r5, r7, pc}
 8006208:	422580a0 	.word	0x422580a0
 800620c:	004005ff 	.word	0x004005ff

08006210 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	; 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0c0      	b.n	80063ba <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	f040 80b9 	bne.w	80063b8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800624c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006256:	429a      	cmp	r2, r3
 8006258:	d907      	bls.n	800626a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e0a7      	b.n	80063ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2203      	movs	r2, #3
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	4a4c      	ldr	r2, [pc, #304]	; (80063c4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	4a4b      	ldr	r2, [pc, #300]	; (80063c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800629c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2200      	movs	r2, #0
 80062a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3380      	adds	r3, #128	; 0x80
 80062d4:	4619      	mov	r1, r3
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	025b      	lsls	r3, r3, #9
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	f7fd fd31 	bl	8003d44 <HAL_DMA_Start_IT>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d017      	beq.n	8006318 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a33      	ldr	r2, [pc, #204]	; (80063cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e050      	b.n	80063ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006318:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	2b01      	cmp	r3, #1
 8006324:	d002      	beq.n	800632c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	025b      	lsls	r3, r3, #9
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800632c:	f04f 33ff 	mov.w	r3, #4294967295
 8006330:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	025b      	lsls	r3, r3, #9
 8006336:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006338:	2390      	movs	r3, #144	; 0x90
 800633a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800633c:	2302      	movs	r3, #2
 800633e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006340:	2300      	movs	r3, #0
 8006342:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006344:	2301      	movs	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f107 0210 	add.w	r2, r7, #16
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f004 f8f9 	bl	800a54a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d90a      	bls.n	8006374 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2282      	movs	r2, #130	; 0x82
 8006362:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636a:	4618      	mov	r0, r3
 800636c:	f004 f95d 	bl	800a62a <SDMMC_CmdReadMultiBlock>
 8006370:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006372:	e009      	b.n	8006388 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2281      	movs	r2, #129	; 0x81
 8006378:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006380:	4618      	mov	r0, r3
 8006382:	f004 f930 	bl	800a5e6 <SDMMC_CmdReadSingleBlock>
 8006386:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d012      	beq.n	80063b4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	431a      	orrs	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e002      	b.n	80063ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3730      	adds	r7, #48	; 0x30
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	08006dff 	.word	0x08006dff
 80063c8:	08006e71 	.word	0x08006e71
 80063cc:	004005ff 	.word	0x004005ff
 80063d0:	4225858c 	.word	0x4225858c

080063d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0c5      	b.n	8006588 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	f040 80be 	bne.w	8006586 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641a:	429a      	cmp	r2, r3
 800641c:	d907      	bls.n	800642e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0ac      	b.n	8006588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2203      	movs	r2, #3
 8006432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800644c:	f043 0302 	orr.w	r3, r3, #2
 8006450:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	4a4e      	ldr	r2, [pc, #312]	; (8006590 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	4a4d      	ldr	r2, [pc, #308]	; (8006594 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006460:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	2200      	movs	r2, #0
 8006468:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646e:	2b01      	cmp	r3, #1
 8006470:	d002      	beq.n	8006478 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	025b      	lsls	r3, r3, #9
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d90a      	bls.n	8006494 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	22a0      	movs	r2, #160	; 0xa0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648a:	4618      	mov	r0, r3
 800648c:	f004 f911 	bl	800a6b2 <SDMMC_CmdWriteMultiBlock>
 8006490:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006492:	e009      	b.n	80064a8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2290      	movs	r2, #144	; 0x90
 8006498:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a0:	4618      	mov	r0, r3
 80064a2:	f004 f8e4 	bl	800a66e <SDMMC_CmdWriteSingleBlock>
 80064a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d012      	beq.n	80064d4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a39      	ldr	r2, [pc, #228]	; (8006598 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e059      	b.n	8006588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80064d4:	4b31      	ldr	r3, [pc, #196]	; (800659c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	2240      	movs	r2, #64	; 0x40
 80064e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3380      	adds	r3, #128	; 0x80
 800650a:	461a      	mov	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	025b      	lsls	r3, r3, #9
 8006510:	089b      	lsrs	r3, r3, #2
 8006512:	f7fd fc17 	bl	8003d44 <HAL_DMA_Start_IT>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01c      	beq.n	8006556 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800652a:	f023 0302 	bic.w	r3, r3, #2
 800652e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a18      	ldr	r2, [pc, #96]	; (8006598 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e018      	b.n	8006588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	025b      	lsls	r3, r3, #9
 8006560:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006562:	2390      	movs	r3, #144	; 0x90
 8006564:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800656a:	2300      	movs	r3, #0
 800656c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800656e:	2301      	movs	r3, #1
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f107 0210 	add.w	r2, r7, #16
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f003 ffe4 	bl	800a54a <SDIO_ConfigData>

      return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	3730      	adds	r7, #48	; 0x30
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	08006dd5 	.word	0x08006dd5
 8006594:	08006e71 	.word	0x08006e71
 8006598:	004005ff 	.word	0x004005ff
 800659c:	4225858c 	.word	0x4225858c

080065a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_SD_IRQHandler+0x2e>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 ffff 	bl	80075ca <SD_Read_IT>
 80065cc:	e165      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 808f 	beq.w	80066fc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80065f6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80065fa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d039      	beq.n	800668a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <HAL_SD_IRQHandler+0x8a>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f004 f862 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 8006634:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f92f 	bl	80068ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f240 523a 	movw	r2, #1338	; 0x53a
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <HAL_SD_IRQHandler+0xda>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f004 fcd6 	bl	800b02c <HAL_SD_RxCpltCallback>
 8006680:	e10b      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f004 fcc8 	bl	800b018 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006688:	e107      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8102 	beq.w	800689a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d011      	beq.n	80066c4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f004 f827 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 80066aa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8f4 	bl	80068ac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 80e5 	bne.w	800689a <HAL_SD_IRQHandler+0x2fa>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f040 80df 	bne.w	800689a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0208 	bic.w	r2, r2, #8
 80066ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f004 fc8f 	bl	800b018 <HAL_SD_TxCpltCallback>
}
 80066fa:	e0ce      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <HAL_SD_IRQHandler+0x17c>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 ffa9 	bl	800766c <SD_Write_IT>
 800671a:	e0be      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006722:	f240 233a 	movw	r3, #570	; 0x23a
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80b6 	beq.w	800689a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	f043 0202 	orr.w	r2, r3, #2
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	f043 0220 	orr.w	r2, r3, #32
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	f043 0210 	orr.w	r2, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	f043 0208 	orr.w	r2, r3, #8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f240 723a 	movw	r2, #1850	; 0x73a
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80067c8:	f023 0302 	bic.w	r3, r3, #2
 80067cc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f003 ff90 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f855 	bl	80068ac <HAL_SD_ErrorCallback>
}
 8006802:	e04a      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d045      	beq.n	800689a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_SD_IRQHandler+0x282>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d011      	beq.n	8006846 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <HAL_SD_IRQHandler+0x304>)
 8006828:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	4618      	mov	r0, r3
 8006830:	f7fd fb50 	bl	8003ed4 <HAL_DMA_Abort_IT>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d02f      	beq.n	800689a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fb68 	bl	8006f14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006844:	e029      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_SD_IRQHandler+0x2ba>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d011      	beq.n	800687e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <HAL_SD_IRQHandler+0x308>)
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	4618      	mov	r0, r3
 8006868:	f7fd fb34 	bl	8003ed4 <HAL_DMA_Abort_IT>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d013      	beq.n	800689a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fb83 	bl	8006f82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800687c:	e00d      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f004 fbb6 	bl	800b004 <HAL_SD_AbortCallback>
}
 8006898:	e7ff      	b.n	800689a <HAL_SD_IRQHandler+0x2fa>
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	08006f15 	.word	0x08006f15
 80068a8:	08006f83 	.word	0x08006f83

080068ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ce:	0f9b      	lsrs	r3, r3, #30
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068da:	0e9b      	lsrs	r3, r3, #26
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ec:	0e1b      	lsrs	r3, r3, #24
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0303 	and.w	r3, r3, #3
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fe:	0c1b      	lsrs	r3, r3, #16
 8006900:	b2da      	uxtb	r2, r3
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b2da      	uxtb	r2, r3
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	b2da      	uxtb	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006920:	0d1b      	lsrs	r3, r3, #20
 8006922:	b29a      	uxth	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	b2da      	uxtb	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693e:	0bdb      	lsrs	r3, r3, #15
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006950:	0b9b      	lsrs	r3, r3, #14
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	b2da      	uxtb	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006962:	0b5b      	lsrs	r3, r3, #13
 8006964:	b2db      	uxtb	r3, r3
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006974:	0b1b      	lsrs	r3, r3, #12
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	b2da      	uxtb	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2200      	movs	r2, #0
 8006986:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698c:	2b00      	cmp	r3, #0
 800698e:	d163      	bne.n	8006a58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006994:	009a      	lsls	r2, r3, #2
 8006996:	f640 73fc 	movw	r3, #4092	; 0xffc
 800699a:	4013      	ands	r3, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80069a0:	0f92      	lsrs	r2, r2, #30
 80069a2:	431a      	orrs	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ac:	0edb      	lsrs	r3, r3, #27
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069be:	0e1b      	lsrs	r3, r3, #24
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d0:	0d5b      	lsrs	r3, r3, #21
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e2:	0c9b      	lsrs	r3, r3, #18
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f4:	0bdb      	lsrs	r3, r3, #15
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	7e1b      	ldrb	r3, [r3, #24]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	3302      	adds	r3, #2
 8006a18:	2201      	movs	r2, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a22:	fb03 f202 	mul.w	r2, r3, r2
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	7a1b      	ldrb	r3, [r3, #8]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	2201      	movs	r2, #1
 8006a36:	409a      	lsls	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a44:	0a52      	lsrs	r2, r2, #9
 8006a46:	fb03 f202 	mul.w	r2, r3, r2
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60
 8006a56:	e031      	b.n	8006abc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d11d      	bne.n	8006a9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	431a      	orrs	r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	029a      	lsls	r2, r3, #10
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	661a      	str	r2, [r3, #96]	; 0x60
 8006a9a:	e00f      	b.n	8006abc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a58      	ldr	r2, [pc, #352]	; (8006c04 <HAL_SD_GetCardCSD+0x344>)
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e09d      	b.n	8006bf8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac0:	0b9b      	lsrs	r3, r3, #14
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	09db      	lsrs	r3, r3, #7
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	0fdb      	lsrs	r3, r3, #31
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	0f5b      	lsrs	r3, r3, #29
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b12:	0e9b      	lsrs	r3, r3, #26
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b24:	0d9b      	lsrs	r3, r3, #22
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b36:	0d5b      	lsrs	r3, r3, #21
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	0bdb      	lsrs	r3, r3, #15
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	0b9b      	lsrs	r3, r3, #14
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	0b5b      	lsrs	r3, r3, #13
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	0b1b      	lsrs	r3, r3, #12
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb6:	0a9b      	lsrs	r3, r3, #10
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	004005ff 	.word	0x004005ff

08006c08 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c60:	b5b0      	push	{r4, r5, r7, lr}
 8006c62:	b08e      	sub	sp, #56	; 0x38
 8006c64:	af04      	add	r7, sp, #16
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2203      	movs	r2, #3
 8006c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d02e      	beq.n	8006cde <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	d106      	bne.n	8006c96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
 8006c94:	e029      	b.n	8006cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c9c:	d10a      	bne.n	8006cb4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb2a 	bl	80072f8 <SD_WideBus_Enable>
 8006ca4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8006cb2:	e01a      	b.n	8006cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10a      	bne.n	8006cd0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fb67 	bl	800738e <SD_WideBus_Disable>
 8006cc0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8006cce:	e00c      	b.n	8006cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
 8006cdc:	e005      	b.n	8006cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d08:	e01f      	b.n	8006d4a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681d      	ldr	r5, [r3, #0]
 8006d30:	466c      	mov	r4, sp
 8006d32:	f107 0314 	add.w	r3, r7, #20
 8006d36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d44:	4628      	mov	r0, r5
 8006d46:	f003 fb51 	bl	800a3ec <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d52:	4618      	mov	r0, r3
 8006d54:	f003 fc25 	bl	800a5a2 <SDMMC_CmdBlockLength>
 8006d58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00c      	beq.n	8006d7a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0a      	ldr	r2, [pc, #40]	; (8006d90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3728      	adds	r7, #40	; 0x28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	004005ff 	.word	0x004005ff

08006d94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006da0:	f107 030c 	add.w	r3, r7, #12
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa7e 	bl	80072a8 <SD_SendStatus>
 8006dac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	0a5b      	lsrs	r3, r3, #9
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006dca:	693b      	ldr	r3, [r7, #16]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	2b82      	cmp	r3, #130	; 0x82
 8006e12:	d111      	bne.n	8006e38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f003 fc6d 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 8006e1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fd3a 	bl	80068ac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0208 	bic.w	r2, r2, #8
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f004 f8e3 	bl	800b02c <HAL_SD_RxCpltCallback>
#endif
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fd f9d4 	bl	800422c <HAL_DMA_GetError>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d03e      	beq.n	8006f08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d002      	beq.n	8006ea6 <SD_DMAError+0x36>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d12d      	bne.n	8006f02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <SD_DMAError+0xa0>)
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ebc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006eca:	6978      	ldr	r0, [r7, #20]
 8006ecc:	f7ff ff62 	bl	8006d94 <HAL_SD_GetCardState>
 8006ed0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b06      	cmp	r3, #6
 8006ed6:	d002      	beq.n	8006ede <SD_DMAError+0x6e>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d10a      	bne.n	8006ef4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f003 fc08 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006f02:	6978      	ldr	r0, [r7, #20]
 8006f04:	f7ff fcd2 	bl	80068ac <HAL_SD_ErrorCallback>
#endif
  }
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	004005ff 	.word	0x004005ff

08006f14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff ff31 	bl	8006d94 <HAL_SD_GetCardState>
 8006f32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b06      	cmp	r3, #6
 8006f46:	d002      	beq.n	8006f4e <SD_DMATxAbort+0x3a>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d10a      	bne.n	8006f64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f003 fbd0 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d103      	bne.n	8006f74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f004 f849 	bl	800b004 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006f72:	e002      	b.n	8006f7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fc99 	bl	80068ac <HAL_SD_ErrorCallback>
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff fefa 	bl	8006d94 <HAL_SD_GetCardState>
 8006fa0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b06      	cmp	r3, #6
 8006fb4:	d002      	beq.n	8006fbc <SD_DMARxAbort+0x3a>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d10a      	bne.n	8006fd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f003 fb99 	bl	800a6f8 <SDMMC_CmdStopTransfer>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f004 f812 	bl	800b004 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006fe0:	e002      	b.n	8006fe8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fc62 	bl	80068ac <HAL_SD_ErrorCallback>
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ff0:	b5b0      	push	{r4, r5, r7, lr}
 8006ff2:	b094      	sub	sp, #80	; 0x50
 8006ff4:	af04      	add	r7, sp, #16
 8006ff6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f003 fa4a 	bl	800a49a <SDIO_GetPowerState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800700c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007010:	e0b8      	b.n	8007184 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	2b03      	cmp	r3, #3
 8007018:	d02f      	beq.n	800707a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f003 fc74 	bl	800a90c <SDMMC_CmdSendCID>
 8007024:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <SD_InitCard+0x40>
    {
      return errorstate;
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702e:	e0a9      	b.n	8007184 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f003 fa74 	bl	800a524 <SDIO_GetResponse>
 800703c:	4602      	mov	r2, r0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2104      	movs	r1, #4
 8007048:	4618      	mov	r0, r3
 800704a:	f003 fa6b 	bl	800a524 <SDIO_GetResponse>
 800704e:	4602      	mov	r2, r0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2108      	movs	r1, #8
 800705a:	4618      	mov	r0, r3
 800705c:	f003 fa62 	bl	800a524 <SDIO_GetResponse>
 8007060:	4602      	mov	r2, r0
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	210c      	movs	r1, #12
 800706c:	4618      	mov	r0, r3
 800706e:	f003 fa59 	bl	800a524 <SDIO_GetResponse>
 8007072:	4602      	mov	r2, r0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	2b03      	cmp	r3, #3
 8007080:	d00d      	beq.n	800709e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f107 020e 	add.w	r2, r7, #14
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f003 fc7a 	bl	800a986 <SDMMC_CmdSetRelAdd>
 8007092:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <SD_InitCard+0xae>
    {
      return errorstate;
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	e072      	b.n	8007184 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d036      	beq.n	8007114 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80070a6:	89fb      	ldrh	r3, [r7, #14]
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b6:	041b      	lsls	r3, r3, #16
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f003 fc44 	bl	800a948 <SDMMC_CmdSendCSD>
 80070c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80070c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ca:	e05b      	b.n	8007184 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f003 fa26 	bl	800a524 <SDIO_GetResponse>
 80070d8:	4602      	mov	r2, r0
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2104      	movs	r1, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f003 fa1d 	bl	800a524 <SDIO_GetResponse>
 80070ea:	4602      	mov	r2, r0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2108      	movs	r1, #8
 80070f6:	4618      	mov	r0, r3
 80070f8:	f003 fa14 	bl	800a524 <SDIO_GetResponse>
 80070fc:	4602      	mov	r2, r0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	210c      	movs	r1, #12
 8007108:	4618      	mov	r0, r3
 800710a:	f003 fa0b 	bl	800a524 <SDIO_GetResponse>
 800710e:	4602      	mov	r2, r0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2104      	movs	r1, #4
 800711a:	4618      	mov	r0, r3
 800711c:	f003 fa02 	bl	800a524 <SDIO_GetResponse>
 8007120:	4603      	mov	r3, r0
 8007122:	0d1a      	lsrs	r2, r3, #20
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007128:	f107 0310 	add.w	r3, r7, #16
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fbc6 	bl	80068c0 <HAL_SD_GetCardCSD>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800713a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800713e:	e021      	b.n	8007184 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	2200      	movs	r2, #0
 800714c:	461c      	mov	r4, r3
 800714e:	4615      	mov	r5, r2
 8007150:	4622      	mov	r2, r4
 8007152:	462b      	mov	r3, r5
 8007154:	4608      	mov	r0, r1
 8007156:	f003 faf1 	bl	800a73c <SDMMC_CmdSelDesel>
 800715a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <SD_InitCard+0x176>
  {
    return errorstate;
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	e00e      	b.n	8007184 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681d      	ldr	r5, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	466c      	mov	r4, sp
 800716e:	f103 0210 	add.w	r2, r3, #16
 8007172:	ca07      	ldmia	r2, {r0, r1, r2}
 8007174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007178:	3304      	adds	r3, #4
 800717a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800717c:	4628      	mov	r0, r5
 800717e:	f003 f935 	bl	800a3ec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3740      	adds	r7, #64	; 0x40
 8007188:	46bd      	mov	sp, r7
 800718a:	bdb0      	pop	{r4, r5, r7, pc}

0800718c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f003 faec 	bl	800a782 <SDMMC_CmdGoIdleState>
 80071aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	e072      	b.n	800729c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f003 faff 	bl	800a7be <SDMMC_CmdOperCond>
 80071c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00d      	beq.n	80071e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f003 fad5 	bl	800a782 <SDMMC_CmdGoIdleState>
 80071d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	e05b      	b.n	800729c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d137      	bne.n	8007262 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2100      	movs	r1, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f003 faff 	bl	800a7fc <SDMMC_CmdAppCommand>
 80071fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d02d      	beq.n	8007262 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800720a:	e047      	b.n	800729c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f003 faf2 	bl	800a7fc <SDMMC_CmdAppCommand>
 8007218:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <SD_PowerON+0x98>
    {
      return errorstate;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	e03b      	b.n	800729c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	491e      	ldr	r1, [pc, #120]	; (80072a4 <SD_PowerON+0x118>)
 800722a:	4618      	mov	r0, r3
 800722c:	f003 fb08 	bl	800a840 <SDMMC_CmdAppOperCommand>
 8007230:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007238:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800723c:	e02e      	b.n	800729c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f003 f96d 	bl	800a524 <SDIO_GetResponse>
 800724a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	0fdb      	lsrs	r3, r3, #31
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <SD_PowerON+0xcc>
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <SD_PowerON+0xce>
 8007258:	2300      	movs	r3, #0
 800725a:	613b      	str	r3, [r7, #16]

    count++;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3301      	adds	r3, #1
 8007260:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007268:	4293      	cmp	r3, r2
 800726a:	d802      	bhi.n	8007272 <SD_PowerON+0xe6>
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0cc      	beq.n	800720c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007278:	4293      	cmp	r3, r2
 800727a:	d902      	bls.n	8007282 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800727c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007280:	e00c      	b.n	800729c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	645a      	str	r2, [r3, #68]	; 0x44
 8007292:	e002      	b.n	800729a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	c1100000 	.word	0xc1100000

080072a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072bc:	e018      	b.n	80072f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f003 fb7c 	bl	800a9c8 <SDMMC_CmdSendStatus>
 80072d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	e009      	b.n	80072f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f003 f91e 	bl	800a524 <SDIO_GetResponse>
 80072e8:	4602      	mov	r2, r0
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2100      	movs	r1, #0
 800730e:	4618      	mov	r0, r3
 8007310:	f003 f908 	bl	800a524 <SDIO_GetResponse>
 8007314:	4603      	mov	r3, r0
 8007316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800731e:	d102      	bne.n	8007326 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007324:	e02f      	b.n	8007386 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007326:	f107 030c 	add.w	r3, r7, #12
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f879 	bl	8007424 <SD_FindSCR>
 8007332:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	e023      	b.n	8007386 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01c      	beq.n	8007382 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f003 fa51 	bl	800a7fc <SDMMC_CmdAppCommand>
 800735a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e00f      	b.n	8007386 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2102      	movs	r1, #2
 800736c:	4618      	mov	r0, r3
 800736e:	f003 fa8a 	bl	800a886 <SDMMC_CmdBusWidth>
 8007372:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	e003      	b.n	8007386 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800737e:	2300      	movs	r3, #0
 8007380:	e001      	b.n	8007386 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007382:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f003 f8bd 	bl	800a524 <SDIO_GetResponse>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b4:	d102      	bne.n	80073bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073ba:	e02f      	b.n	800741c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073bc:	f107 030c 	add.w	r3, r7, #12
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f82e 	bl	8007424 <SD_FindSCR>
 80073c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	e023      	b.n	800741c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01c      	beq.n	8007418 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f003 fa06 	bl	800a7fc <SDMMC_CmdAppCommand>
 80073f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	e00f      	b.n	800741c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f003 fa3f 	bl	800a886 <SDMMC_CmdBusWidth>
 8007408:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	e003      	b.n	800741c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007414:	2300      	movs	r3, #0
 8007416:	e001      	b.n	800741c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007418:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b08f      	sub	sp, #60	; 0x3c
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800742e:	f7fb fecd 	bl	80031cc <HAL_GetTick>
 8007432:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2108      	movs	r1, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f003 f8a9 	bl	800a5a2 <SDMMC_CmdBlockLength>
 8007450:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	e0b2      	b.n	80075c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f003 f9c7 	bl	800a7fc <SDMMC_CmdAppCommand>
 800746e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	e0a3      	b.n	80075c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007480:	2308      	movs	r3, #8
 8007482:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007484:	2330      	movs	r3, #48	; 0x30
 8007486:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007488:	2302      	movs	r3, #2
 800748a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800748c:	2300      	movs	r3, #0
 800748e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007490:	2301      	movs	r3, #1
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f107 0210 	add.w	r2, r7, #16
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f003 f853 	bl	800a54a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f003 fa0e 	bl	800a8ca <SDMMC_CmdSendSCR>
 80074ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d02a      	beq.n	800750c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	e083      	b.n	80075c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00f      	beq.n	80074e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6819      	ldr	r1, [r3, #0]
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	f107 0208 	add.w	r2, r7, #8
 80074d4:	18d4      	adds	r4, r2, r3
 80074d6:	4608      	mov	r0, r1
 80074d8:	f002 ffb3 	bl	800a442 <SDIO_ReadFIFO>
 80074dc:	4603      	mov	r3, r0
 80074de:	6023      	str	r3, [r4, #0]
      index++;
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	3301      	adds	r3, #1
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
 80074e6:	e006      	b.n	80074f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d012      	beq.n	800751c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074f6:	f7fb fe69 	bl	80031cc <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d102      	bne.n	800750c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007506:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800750a:	e05a      	b.n	80075c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0cf      	beq.n	80074ba <SD_FindSCR+0x96>
 800751a:	e000      	b.n	800751e <SD_FindSCR+0xfa>
      break;
 800751c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2208      	movs	r2, #8
 8007532:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007534:	2308      	movs	r3, #8
 8007536:	e044      	b.n	80075c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2202      	movs	r2, #2
 800754c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800754e:	2302      	movs	r3, #2
 8007550:	e037      	b.n	80075c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2220      	movs	r2, #32
 8007566:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007568:	2320      	movs	r3, #32
 800756a:	e02a      	b.n	80075c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f240 523a 	movw	r2, #1338	; 0x53a
 8007574:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	061a      	lsls	r2, r3, #24
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007582:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800758c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	0e1b      	lsrs	r3, r3, #24
 8007592:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	601a      	str	r2, [r3, #0]
    scr++;
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	3304      	adds	r3, #4
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	061a      	lsls	r2, r3, #24
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	0e1b      	lsrs	r3, r3, #24
 80075ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	373c      	adds	r7, #60	; 0x3c
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd90      	pop	{r4, r7, pc}

080075ca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d03f      	beq.n	8007664 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e033      	b.n	8007652 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f002 ff27 	bl	800a442 <SDIO_ReadFIFO>
 80075f4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	3b01      	subs	r3, #1
 8007608:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	b2da      	uxtb	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3b01      	subs	r3, #1
 800761e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	0c1b      	lsrs	r3, r3, #16
 8007624:	b2da      	uxtb	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	701a      	strb	r2, [r3, #0]
      tmp++;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3b01      	subs	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	0e1b      	lsrs	r3, r3, #24
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	3301      	adds	r3, #1
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b07      	cmp	r3, #7
 8007656:	d9c8      	bls.n	80075ea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007664:	bf00      	nop
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d043      	beq.n	800770e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	e037      	b.n	80076fc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	3b01      	subs	r3, #1
 800769c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	021a      	lsls	r2, r3, #8
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	041a      	lsls	r2, r3, #16
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	061a      	lsls	r2, r3, #24
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f107 0208 	add.w	r2, r7, #8
 80076ee:	4611      	mov	r1, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f002 feb3 	bl	800a45c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3301      	adds	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b07      	cmp	r3, #7
 8007700:	d9c4      	bls.n	800768c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e07b      	b.n	8007820 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007738:	d009      	beq.n	800774e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	61da      	str	r2, [r3, #28]
 8007740:	e005      	b.n	800774e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7fa fc29 	bl	8001fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2202      	movs	r2, #2
 8007772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007784:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a0:	431a      	orrs	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077c8:	431a      	orrs	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d2:	ea42 0103 	orr.w	r1, r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	f003 0104 	and.w	r1, r3, #4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	f003 0210 	and.w	r2, r3, #16
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69da      	ldr	r2, [r3, #28]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800780e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_SPI_Transmit+0x22>
 8007846:	2302      	movs	r3, #2
 8007848:	e126      	b.n	8007a98 <HAL_SPI_Transmit+0x270>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007852:	f7fb fcbb 	bl	80031cc <HAL_GetTick>
 8007856:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	d002      	beq.n	800786e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007868:	2302      	movs	r3, #2
 800786a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800786c:	e10b      	b.n	8007a86 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_SPI_Transmit+0x52>
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800787e:	e102      	b.n	8007a86 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2203      	movs	r2, #3
 8007884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	88fa      	ldrh	r2, [r7, #6]
 800789e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c6:	d10f      	bne.n	80078e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d007      	beq.n	8007906 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800790e:	d14b      	bne.n	80079a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_SPI_Transmit+0xf6>
 8007918:	8afb      	ldrh	r3, [r7, #22]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d13e      	bne.n	800799c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	881a      	ldrh	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007942:	e02b      	b.n	800799c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d112      	bne.n	8007978 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	881a      	ldrh	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	1c9a      	adds	r2, r3, #2
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	86da      	strh	r2, [r3, #54]	; 0x36
 8007976:	e011      	b.n	800799c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007978:	f7fb fc28 	bl	80031cc <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d803      	bhi.n	8007990 <HAL_SPI_Transmit+0x168>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d102      	bne.n	8007996 <HAL_SPI_Transmit+0x16e>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	77fb      	strb	r3, [r7, #31]
          goto error;
 800799a:	e074      	b.n	8007a86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1ce      	bne.n	8007944 <HAL_SPI_Transmit+0x11c>
 80079a6:	e04c      	b.n	8007a42 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <HAL_SPI_Transmit+0x18e>
 80079b0:	8afb      	ldrh	r3, [r7, #22]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d140      	bne.n	8007a38 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	7812      	ldrb	r2, [r2, #0]
 80079c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079dc:	e02c      	b.n	8007a38 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d113      	bne.n	8007a14 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	7812      	ldrb	r2, [r2, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a12:	e011      	b.n	8007a38 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a14:	f7fb fbda 	bl	80031cc <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d803      	bhi.n	8007a2c <HAL_SPI_Transmit+0x204>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d102      	bne.n	8007a32 <HAL_SPI_Transmit+0x20a>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a36:	e026      	b.n	8007a86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1cd      	bne.n	80079de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 fa08 	bl	8007e5c <SPI_EndRxTxTransaction>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e000      	b.n	8007a86 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_SPI_Transmit_DMA+0x20>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e09b      	b.n	8007bf8 <HAL_SPI_Transmit_DMA+0x158>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d002      	beq.n	8007ada <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ad8:	e089      	b.n	8007bee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_SPI_Transmit_DMA+0x46>
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aea:	e080      	b.n	8007bee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2203      	movs	r2, #3
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	88fa      	ldrh	r2, [r7, #6]
 8007b0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b32:	d10f      	bne.n	8007b54 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b58:	4a29      	ldr	r2, [pc, #164]	; (8007c00 <HAL_SPI_Transmit_DMA+0x160>)
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b60:	4a28      	ldr	r2, [pc, #160]	; (8007c04 <HAL_SPI_Transmit_DMA+0x164>)
 8007b62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b68:	4a27      	ldr	r2, [pc, #156]	; (8007c08 <HAL_SPI_Transmit_DMA+0x168>)
 8007b6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b70:	2200      	movs	r2, #0
 8007b72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b8c:	f7fc f8da 	bl	8003d44 <HAL_DMA_Start_IT>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	f043 0210 	orr.w	r2, r3, #16
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007bae:	e01e      	b.n	8007bee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d007      	beq.n	8007bce <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bcc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0220 	orr.w	r2, r2, #32
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0202 	orr.w	r2, r2, #2
 8007bec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08007cf1 	.word	0x08007cf1
 8007c04:	08007c49 	.word	0x08007c49
 8007c08:	08007d0d 	.word	0x08007d0d

08007c0c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c56:	f7fb fab9 	bl	80031cc <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d03b      	beq.n	8007ce4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0220 	bic.w	r2, r2, #32
 8007c7a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0202 	bic.w	r2, r2, #2
 8007c8a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	2164      	movs	r1, #100	; 0x64
 8007c90:	6978      	ldr	r0, [r7, #20]
 8007c92:	f000 f8e3 	bl	8007e5c <SPI_EndRxTxTransaction>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	f043 0220 	orr.w	r2, r3, #32
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007cdc:	6978      	ldr	r0, [r7, #20]
 8007cde:	f7ff ffa9 	bl	8007c34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ce2:	e002      	b.n	8007cea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007ce4:	6978      	ldr	r0, [r7, #20]
 8007ce6:	f7ff ff91 	bl	8007c0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff ff8e 	bl	8007c20 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0203 	bic.w	r2, r2, #3
 8007d28:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	f043 0210 	orr.w	r2, r3, #16
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff ff78 	bl	8007c34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d5c:	f7fb fa36 	bl	80031cc <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4413      	add	r3, r2
 8007d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d6c:	f7fb fa2e 	bl	80031cc <HAL_GetTick>
 8007d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d72:	4b39      	ldr	r3, [pc, #228]	; (8007e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	015b      	lsls	r3, r3, #5
 8007d78:	0d1b      	lsrs	r3, r3, #20
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	fb02 f303 	mul.w	r3, r2, r3
 8007d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d82:	e054      	b.n	8007e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d050      	beq.n	8007e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d8c:	f7fb fa1e 	bl	80031cc <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d902      	bls.n	8007da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d13d      	bne.n	8007e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dba:	d111      	bne.n	8007de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc4:	d004      	beq.n	8007dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dce:	d107      	bne.n	8007de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de8:	d10f      	bne.n	8007e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e017      	b.n	8007e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4013      	ands	r3, r2
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	2300      	movne	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d19b      	bne.n	8007d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000008 	.word	0x20000008

08007e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e68:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <SPI_EndRxTxTransaction+0x7c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1b      	ldr	r2, [pc, #108]	; (8007edc <SPI_EndRxTxTransaction+0x80>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	0d5b      	lsrs	r3, r3, #21
 8007e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
 8007e7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e86:	d112      	bne.n	8007eae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2180      	movs	r1, #128	; 0x80
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff ff5a 	bl	8007d4c <SPI_WaitFlagStateUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d016      	beq.n	8007ecc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f043 0220 	orr.w	r2, r3, #32
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e00f      	b.n	8007ece <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d0f2      	beq.n	8007eae <SPI_EndRxTxTransaction+0x52>
 8007ec8:	e000      	b.n	8007ecc <SPI_EndRxTxTransaction+0x70>
        break;
 8007eca:	bf00      	nop
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000008 	.word	0x20000008
 8007edc:	165e9f81 	.word	0x165e9f81

08007ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e041      	b.n	8007f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fa fec0 	bl	8002c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f000 fe4c 	bl	8008bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d001      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e04e      	b.n	8008036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0201 	orr.w	r2, r2, #1
 8007fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a23      	ldr	r2, [pc, #140]	; (8008044 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d022      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc2:	d01d      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d018      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1e      	ldr	r2, [pc, #120]	; (800804c <HAL_TIM_Base_Start_IT+0xcc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d013      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1c      	ldr	r2, [pc, #112]	; (8008050 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00e      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1b      	ldr	r2, [pc, #108]	; (8008054 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d009      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a19      	ldr	r2, [pc, #100]	; (8008058 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d004      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x80>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a18      	ldr	r2, [pc, #96]	; (800805c <HAL_TIM_Base_Start_IT+0xdc>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d111      	bne.n	8008024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b06      	cmp	r3, #6
 8008010:	d010      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0201 	orr.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008022:	e007      	b.n	8008034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40010000 	.word	0x40010000
 8008048:	40000400 	.word	0x40000400
 800804c:	40000800 	.word	0x40000800
 8008050:	40000c00 	.word	0x40000c00
 8008054:	40010400 	.word	0x40010400
 8008058:	40014000 	.word	0x40014000
 800805c:	40001800 	.word	0x40001800

08008060 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0201 	bic.w	r2, r2, #1
 8008076:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a1a      	ldr	r2, [r3, #32]
 800807e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10f      	bne.n	80080a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	f240 4344 	movw	r3, #1092	; 0x444
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d107      	bne.n	80080a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e041      	b.n	8008154 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f839 	bl	800815c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f000 fd5d 	bl	8008bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <HAL_TIM_PWM_Start+0x24>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b01      	cmp	r3, #1
 800818a:	bf14      	ite	ne
 800818c:	2301      	movne	r3, #1
 800818e:	2300      	moveq	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	e022      	b.n	80081da <HAL_TIM_PWM_Start+0x6a>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b04      	cmp	r3, #4
 8008198:	d109      	bne.n	80081ae <HAL_TIM_PWM_Start+0x3e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	bf14      	ite	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	2300      	moveq	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	e015      	b.n	80081da <HAL_TIM_PWM_Start+0x6a>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d109      	bne.n	80081c8 <HAL_TIM_PWM_Start+0x58>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	bf14      	ite	ne
 80081c0:	2301      	movne	r3, #1
 80081c2:	2300      	moveq	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	e008      	b.n	80081da <HAL_TIM_PWM_Start+0x6a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e07c      	b.n	80082dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_PWM_Start+0x82>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081f0:	e013      	b.n	800821a <HAL_TIM_PWM_Start+0xaa>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_PWM_Start+0x92>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008200:	e00b      	b.n	800821a <HAL_TIM_PWM_Start+0xaa>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b08      	cmp	r3, #8
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Start+0xa2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008210:	e003      	b.n	800821a <HAL_TIM_PWM_Start+0xaa>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2202      	movs	r2, #2
 8008216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2201      	movs	r2, #1
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 ffb4 	bl	8009190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a2d      	ldr	r2, [pc, #180]	; (80082e4 <HAL_TIM_PWM_Start+0x174>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_TIM_PWM_Start+0xcc>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a2c      	ldr	r2, [pc, #176]	; (80082e8 <HAL_TIM_PWM_Start+0x178>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d101      	bne.n	8008240 <HAL_TIM_PWM_Start+0xd0>
 800823c:	2301      	movs	r3, #1
 800823e:	e000      	b.n	8008242 <HAL_TIM_PWM_Start+0xd2>
 8008240:	2300      	movs	r3, #0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a22      	ldr	r2, [pc, #136]	; (80082e4 <HAL_TIM_PWM_Start+0x174>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d022      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d01d      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1f      	ldr	r2, [pc, #124]	; (80082ec <HAL_TIM_PWM_Start+0x17c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d018      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <HAL_TIM_PWM_Start+0x180>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d013      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1c      	ldr	r2, [pc, #112]	; (80082f4 <HAL_TIM_PWM_Start+0x184>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d00e      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <HAL_TIM_PWM_Start+0x178>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <HAL_TIM_PWM_Start+0x188>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d004      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x136>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a16      	ldr	r2, [pc, #88]	; (80082fc <HAL_TIM_PWM_Start+0x18c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d111      	bne.n	80082ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b06      	cmp	r3, #6
 80082b6:	d010      	beq.n	80082da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c8:	e007      	b.n	80082da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40010000 	.word	0x40010000
 80082e8:	40010400 	.word	0x40010400
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800
 80082f4:	40000c00 	.word	0x40000c00
 80082f8:	40014000 	.word	0x40014000
 80082fc:	40001800 	.word	0x40001800

08008300 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2200      	movs	r2, #0
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 ff3c 	bl	8009190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a2e      	ldr	r2, [pc, #184]	; (80083d8 <HAL_TIM_PWM_Stop+0xd8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d004      	beq.n	800832c <HAL_TIM_PWM_Stop+0x2c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <HAL_TIM_PWM_Stop+0xdc>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d101      	bne.n	8008330 <HAL_TIM_PWM_Stop+0x30>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <HAL_TIM_PWM_Stop+0x32>
 8008330:	2300      	movs	r3, #0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d017      	beq.n	8008366 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6a1a      	ldr	r2, [r3, #32]
 800833c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008340:	4013      	ands	r3, r2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10f      	bne.n	8008366 <HAL_TIM_PWM_Stop+0x66>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6a1a      	ldr	r2, [r3, #32]
 800834c:	f240 4344 	movw	r3, #1092	; 0x444
 8008350:	4013      	ands	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d107      	bne.n	8008366 <HAL_TIM_PWM_Stop+0x66>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a1a      	ldr	r2, [r3, #32]
 800836c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10f      	bne.n	8008396 <HAL_TIM_PWM_Stop+0x96>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a1a      	ldr	r2, [r3, #32]
 800837c:	f240 4344 	movw	r3, #1092	; 0x444
 8008380:	4013      	ands	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d107      	bne.n	8008396 <HAL_TIM_PWM_Stop+0x96>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0201 	bic.w	r2, r2, #1
 8008394:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_PWM_Stop+0xa6>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a4:	e013      	b.n	80083ce <HAL_TIM_PWM_Stop+0xce>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Stop+0xb6>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083b4:	e00b      	b.n	80083ce <HAL_TIM_PWM_Stop+0xce>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_PWM_Stop+0xc6>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083c4:	e003      	b.n	80083ce <HAL_TIM_PWM_Stop+0xce>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40010000 	.word	0x40010000
 80083dc:	40010400 	.word	0x40010400

080083e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e097      	b.n	8008524 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7fa fb3b 	bl	8002a84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008424:	f023 0307 	bic.w	r3, r3, #7
 8008428:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f000 fbc1 	bl	8008bbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	4313      	orrs	r3, r2
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	4313      	orrs	r3, r2
 8008478:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008480:	f023 030c 	bic.w	r3, r3, #12
 8008484:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800848c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	4313      	orrs	r3, r2
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	011a      	lsls	r2, r3, #4
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	031b      	lsls	r3, r3, #12
 80084b0:	4313      	orrs	r3, r2
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80084be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	4313      	orrs	r3, r2
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800853c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008544:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800854c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008554:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d110      	bne.n	800857e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d102      	bne.n	8008568 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008562:	7b7b      	ldrb	r3, [r7, #13]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d001      	beq.n	800856c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e069      	b.n	8008640 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800857c:	e031      	b.n	80085e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b04      	cmp	r3, #4
 8008582:	d110      	bne.n	80085a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d102      	bne.n	8008590 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800858a:	7b3b      	ldrb	r3, [r7, #12]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d001      	beq.n	8008594 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e055      	b.n	8008640 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085a4:	e01d      	b.n	80085e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d108      	bne.n	80085be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d105      	bne.n	80085be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085b2:	7b7b      	ldrb	r3, [r7, #13]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d102      	bne.n	80085be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085b8:	7b3b      	ldrb	r3, [r7, #12]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d001      	beq.n	80085c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e03e      	b.n	8008640 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_TIM_Encoder_Start+0xc4>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d008      	beq.n	8008600 <HAL_TIM_Encoder_Start+0xd4>
 80085ee:	e00f      	b.n	8008610 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fdc9 	bl	8009190 <TIM_CCxChannelCmd>
      break;
 80085fe:	e016      	b.n	800862e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2201      	movs	r2, #1
 8008606:	2104      	movs	r1, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fdc1 	bl	8009190 <TIM_CCxChannelCmd>
      break;
 800860e:	e00e      	b.n	800862e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2201      	movs	r2, #1
 8008616:	2100      	movs	r1, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fdb9 	bl	8009190 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2201      	movs	r2, #1
 8008624:	2104      	movs	r1, #4
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fdb2 	bl	8009190 <TIM_CCxChannelCmd>
      break;
 800862c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f042 0201 	orr.w	r2, r2, #1
 800863c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b02      	cmp	r3, #2
 800865c:	d122      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b02      	cmp	r3, #2
 800866a:	d11b      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0202 	mvn.w	r2, #2
 8008674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa77 	bl	8008b7e <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa69 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa7a 	bl	8008b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d122      	bne.n	80086f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d11b      	bne.n	80086f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0204 	mvn.w	r2, #4
 80086c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa4d 	bl	8008b7e <HAL_TIM_IC_CaptureCallback>
 80086e4:	e005      	b.n	80086f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa3f 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa50 	bl	8008b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b08      	cmp	r3, #8
 8008704:	d122      	bne.n	800874c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f003 0308 	and.w	r3, r3, #8
 8008710:	2b08      	cmp	r3, #8
 8008712:	d11b      	bne.n	800874c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f06f 0208 	mvn.w	r2, #8
 800871c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2204      	movs	r2, #4
 8008722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa23 	bl	8008b7e <HAL_TIM_IC_CaptureCallback>
 8008738:	e005      	b.n	8008746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa15 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fa26 	bl	8008b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f003 0310 	and.w	r3, r3, #16
 8008756:	2b10      	cmp	r3, #16
 8008758:	d122      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 0310 	and.w	r3, r3, #16
 8008764:	2b10      	cmp	r3, #16
 8008766:	d11b      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f06f 0210 	mvn.w	r2, #16
 8008770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2208      	movs	r2, #8
 8008776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9f9 	bl	8008b7e <HAL_TIM_IC_CaptureCallback>
 800878c:	e005      	b.n	800879a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f9eb 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9fc 	bl	8008b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10e      	bne.n	80087cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d107      	bne.n	80087cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f06f 0201 	mvn.w	r2, #1
 80087c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7f9 fa26 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d6:	2b80      	cmp	r3, #128	; 0x80
 80087d8:	d10e      	bne.n	80087f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e4:	2b80      	cmp	r3, #128	; 0x80
 80087e6:	d107      	bne.n	80087f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fd78 	bl	80092e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d10e      	bne.n	8008824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008810:	2b40      	cmp	r3, #64	; 0x40
 8008812:	d107      	bne.n	8008824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800881c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9c1 	bl	8008ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b20      	cmp	r3, #32
 8008830:	d10e      	bne.n	8008850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f003 0320 	and.w	r3, r3, #32
 800883c:	2b20      	cmp	r3, #32
 800883e:	d107      	bne.n	8008850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0220 	mvn.w	r2, #32
 8008848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fd42 	bl	80092d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008872:	2302      	movs	r3, #2
 8008874:	e0ae      	b.n	80089d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b0c      	cmp	r3, #12
 8008882:	f200 809f 	bhi.w	80089c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088c1 	.word	0x080088c1
 8008890:	080089c5 	.word	0x080089c5
 8008894:	080089c5 	.word	0x080089c5
 8008898:	080089c5 	.word	0x080089c5
 800889c:	08008901 	.word	0x08008901
 80088a0:	080089c5 	.word	0x080089c5
 80088a4:	080089c5 	.word	0x080089c5
 80088a8:	080089c5 	.word	0x080089c5
 80088ac:	08008943 	.word	0x08008943
 80088b0:	080089c5 	.word	0x080089c5
 80088b4:	080089c5 	.word	0x080089c5
 80088b8:	080089c5 	.word	0x080089c5
 80088bc:	08008983 	.word	0x08008983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fa18 	bl	8008cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0208 	orr.w	r2, r2, #8
 80088da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0204 	bic.w	r2, r2, #4
 80088ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6999      	ldr	r1, [r3, #24]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	619a      	str	r2, [r3, #24]
      break;
 80088fe:	e064      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fa68 	bl	8008ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	619a      	str	r2, [r3, #24]
      break;
 8008940:	e043      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fabd 	bl	8008ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f042 0208 	orr.w	r2, r2, #8
 800895c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0204 	bic.w	r2, r2, #4
 800896c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69d9      	ldr	r1, [r3, #28]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	61da      	str	r2, [r3, #28]
      break;
 8008980:	e023      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fb11 	bl	8008fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	021a      	lsls	r2, r3, #8
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	61da      	str	r2, [r3, #28]
      break;
 80089c2:	e002      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	75fb      	strb	r3, [r7, #23]
      break;
 80089c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_TIM_ConfigClockSource+0x1c>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e0b4      	b.n	8008b62 <HAL_TIM_ConfigClockSource+0x186>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a30:	d03e      	beq.n	8008ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8008a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a36:	f200 8087 	bhi.w	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3e:	f000 8086 	beq.w	8008b4e <HAL_TIM_ConfigClockSource+0x172>
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d87f      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a48:	2b70      	cmp	r3, #112	; 0x70
 8008a4a:	d01a      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0xa6>
 8008a4c:	2b70      	cmp	r3, #112	; 0x70
 8008a4e:	d87b      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a50:	2b60      	cmp	r3, #96	; 0x60
 8008a52:	d050      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x11a>
 8008a54:	2b60      	cmp	r3, #96	; 0x60
 8008a56:	d877      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b50      	cmp	r3, #80	; 0x50
 8008a5a:	d03c      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8008a5c:	2b50      	cmp	r3, #80	; 0x50
 8008a5e:	d873      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b40      	cmp	r3, #64	; 0x40
 8008a62:	d058      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x13a>
 8008a64:	2b40      	cmp	r3, #64	; 0x40
 8008a66:	d86f      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b30      	cmp	r3, #48	; 0x30
 8008a6a:	d064      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a6c:	2b30      	cmp	r3, #48	; 0x30
 8008a6e:	d86b      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d060      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d867      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d05c      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d05a      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a80:	e062      	b.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6899      	ldr	r1, [r3, #8]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f000 fb5d 	bl	8009150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	609a      	str	r2, [r3, #8]
      break;
 8008aae:	e04f      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6899      	ldr	r1, [r3, #8]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f000 fb46 	bl	8009150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ad2:	609a      	str	r2, [r3, #8]
      break;
 8008ad4:	e03c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f000 faba 	bl	800905c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2150      	movs	r1, #80	; 0x50
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fb13 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008af4:	e02c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 fad9 	bl	80090ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2160      	movs	r1, #96	; 0x60
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fb03 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008b14:	e01c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 fa9a 	bl	800905c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2140      	movs	r1, #64	; 0x40
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 faf3 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008b34:	e00c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f000 faea 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008b46:	e003      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	e000      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a40      	ldr	r2, [pc, #256]	; (8008cd0 <TIM_Base_SetConfig+0x114>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d013      	beq.n	8008bfc <TIM_Base_SetConfig+0x40>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bda:	d00f      	beq.n	8008bfc <TIM_Base_SetConfig+0x40>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a3d      	ldr	r2, [pc, #244]	; (8008cd4 <TIM_Base_SetConfig+0x118>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d00b      	beq.n	8008bfc <TIM_Base_SetConfig+0x40>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a3c      	ldr	r2, [pc, #240]	; (8008cd8 <TIM_Base_SetConfig+0x11c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d007      	beq.n	8008bfc <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a3b      	ldr	r2, [pc, #236]	; (8008cdc <TIM_Base_SetConfig+0x120>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3a      	ldr	r2, [pc, #232]	; (8008ce0 <TIM_Base_SetConfig+0x124>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d108      	bne.n	8008c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a2f      	ldr	r2, [pc, #188]	; (8008cd0 <TIM_Base_SetConfig+0x114>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d02b      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c1c:	d027      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a2c      	ldr	r2, [pc, #176]	; (8008cd4 <TIM_Base_SetConfig+0x118>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d023      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2b      	ldr	r2, [pc, #172]	; (8008cd8 <TIM_Base_SetConfig+0x11c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01f      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2a      	ldr	r2, [pc, #168]	; (8008cdc <TIM_Base_SetConfig+0x120>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d01b      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a29      	ldr	r2, [pc, #164]	; (8008ce0 <TIM_Base_SetConfig+0x124>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d017      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a28      	ldr	r2, [pc, #160]	; (8008ce4 <TIM_Base_SetConfig+0x128>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a27      	ldr	r2, [pc, #156]	; (8008ce8 <TIM_Base_SetConfig+0x12c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00f      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a26      	ldr	r2, [pc, #152]	; (8008cec <TIM_Base_SetConfig+0x130>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00b      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a25      	ldr	r2, [pc, #148]	; (8008cf0 <TIM_Base_SetConfig+0x134>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d007      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a24      	ldr	r2, [pc, #144]	; (8008cf4 <TIM_Base_SetConfig+0x138>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d003      	beq.n	8008c6e <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a23      	ldr	r2, [pc, #140]	; (8008cf8 <TIM_Base_SetConfig+0x13c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d108      	bne.n	8008c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <TIM_Base_SetConfig+0x114>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_Base_SetConfig+0xf8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <TIM_Base_SetConfig+0x124>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d103      	bne.n	8008cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	615a      	str	r2, [r3, #20]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40000400 	.word	0x40000400
 8008cd8:	40000800 	.word	0x40000800
 8008cdc:	40000c00 	.word	0x40000c00
 8008ce0:	40010400 	.word	0x40010400
 8008ce4:	40014000 	.word	0x40014000
 8008ce8:	40014400 	.word	0x40014400
 8008cec:	40014800 	.word	0x40014800
 8008cf0:	40001800 	.word	0x40001800
 8008cf4:	40001c00 	.word	0x40001c00
 8008cf8:	40002000 	.word	0x40002000

08008cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f023 0201 	bic.w	r2, r3, #1
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f023 0302 	bic.w	r3, r3, #2
 8008d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a20      	ldr	r2, [pc, #128]	; (8008dd4 <TIM_OC1_SetConfig+0xd8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d003      	beq.n	8008d60 <TIM_OC1_SetConfig+0x64>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a1f      	ldr	r2, [pc, #124]	; (8008dd8 <TIM_OC1_SetConfig+0xdc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d10c      	bne.n	8008d7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0308 	bic.w	r3, r3, #8
 8008d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f023 0304 	bic.w	r3, r3, #4
 8008d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a15      	ldr	r2, [pc, #84]	; (8008dd4 <TIM_OC1_SetConfig+0xd8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d003      	beq.n	8008d8a <TIM_OC1_SetConfig+0x8e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a14      	ldr	r2, [pc, #80]	; (8008dd8 <TIM_OC1_SetConfig+0xdc>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d111      	bne.n	8008dae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	621a      	str	r2, [r3, #32]
}
 8008dc8:	bf00      	nop
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40010400 	.word	0x40010400

08008ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f023 0210 	bic.w	r2, r3, #16
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0320 	bic.w	r3, r3, #32
 8008e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a22      	ldr	r2, [pc, #136]	; (8008ec0 <TIM_OC2_SetConfig+0xe4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_OC2_SetConfig+0x68>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a21      	ldr	r2, [pc, #132]	; (8008ec4 <TIM_OC2_SetConfig+0xe8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d10d      	bne.n	8008e60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a17      	ldr	r2, [pc, #92]	; (8008ec0 <TIM_OC2_SetConfig+0xe4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d003      	beq.n	8008e70 <TIM_OC2_SetConfig+0x94>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a16      	ldr	r2, [pc, #88]	; (8008ec4 <TIM_OC2_SetConfig+0xe8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d113      	bne.n	8008e98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	621a      	str	r2, [r3, #32]
}
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40010000 	.word	0x40010000
 8008ec4:	40010400 	.word	0x40010400

08008ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a21      	ldr	r2, [pc, #132]	; (8008fa8 <TIM_OC3_SetConfig+0xe0>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d003      	beq.n	8008f2e <TIM_OC3_SetConfig+0x66>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a20      	ldr	r2, [pc, #128]	; (8008fac <TIM_OC3_SetConfig+0xe4>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d10d      	bne.n	8008f4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a16      	ldr	r2, [pc, #88]	; (8008fa8 <TIM_OC3_SetConfig+0xe0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d003      	beq.n	8008f5a <TIM_OC3_SetConfig+0x92>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a15      	ldr	r2, [pc, #84]	; (8008fac <TIM_OC3_SetConfig+0xe4>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d113      	bne.n	8008f82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	621a      	str	r2, [r3, #32]
}
 8008f9c:	bf00      	nop
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400

08008fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	031b      	lsls	r3, r3, #12
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a12      	ldr	r2, [pc, #72]	; (8009054 <TIM_OC4_SetConfig+0xa4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_OC4_SetConfig+0x68>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a11      	ldr	r2, [pc, #68]	; (8009058 <TIM_OC4_SetConfig+0xa8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d109      	bne.n	800902c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800901e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	019b      	lsls	r3, r3, #6
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40010000 	.word	0x40010000
 8009058:	40010400 	.word	0x40010400

0800905c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	f023 0201 	bic.w	r2, r3, #1
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f023 030a 	bic.w	r3, r3, #10
 8009098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	621a      	str	r2, [r3, #32]
}
 80090ae:	bf00      	nop
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b087      	sub	sp, #28
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	f023 0210 	bic.w	r2, r3, #16
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	031b      	lsls	r3, r3, #12
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	621a      	str	r2, [r3, #32]
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	f043 0307 	orr.w	r3, r3, #7
 800913c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	609a      	str	r2, [r3, #8]
}
 8009144:	bf00      	nop
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800916a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	021a      	lsls	r2, r3, #8
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	431a      	orrs	r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4313      	orrs	r3, r2
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	609a      	str	r2, [r3, #8]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2201      	movs	r2, #1
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a1a      	ldr	r2, [r3, #32]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	43db      	mvns	r3, r3
 80091b2:	401a      	ands	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 031f 	and.w	r3, r3, #31
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	fa01 f303 	lsl.w	r3, r1, r3
 80091c8:	431a      	orrs	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]
}
 80091ce:	bf00      	nop
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
	...

080091dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e05a      	b.n	80092aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d022      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009240:	d01d      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1d      	ldr	r2, [pc, #116]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d018      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1b      	ldr	r2, [pc, #108]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d013      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a1a      	ldr	r2, [pc, #104]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00e      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d009      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a17      	ldr	r2, [pc, #92]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d004      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d10c      	bne.n	8009298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	4313      	orrs	r3, r2
 800928e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800
 80092c4:	40000c00 	.word	0x40000c00
 80092c8:	40010400 	.word	0x40010400
 80092cc:	40014000 	.word	0x40014000
 80092d0:	40001800 	.word	0x40001800

080092d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e03f      	b.n	800938e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7f9 fe3e 	bl	8002fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2224      	movs	r2, #36	; 0x24
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800933e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fddf 	bl	8009f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695a      	ldr	r2, [r3, #20]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b08a      	sub	sp, #40	; 0x28
 800939a:	af02      	add	r7, sp, #8
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	603b      	str	r3, [r7, #0]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d17c      	bne.n	80094b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <HAL_UART_Transmit+0x2c>
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e075      	b.n	80094b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_UART_Transmit+0x3e>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e06e      	b.n	80094b2 <HAL_UART_Transmit+0x11c>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2221      	movs	r2, #33	; 0x21
 80093e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093ea:	f7f9 feef 	bl	80031cc <HAL_GetTick>
 80093ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	88fa      	ldrh	r2, [r7, #6]
 80093f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	88fa      	ldrh	r2, [r7, #6]
 80093fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009404:	d108      	bne.n	8009418 <HAL_UART_Transmit+0x82>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d104      	bne.n	8009418 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	e003      	b.n	8009420 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800941c:	2300      	movs	r3, #0
 800941e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009428:	e02a      	b.n	8009480 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2200      	movs	r2, #0
 8009432:	2180      	movs	r1, #128	; 0x80
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fb1f 	bl	8009a78 <UART_WaitOnFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e036      	b.n	80094b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	3302      	adds	r3, #2
 800945e:	61bb      	str	r3, [r7, #24]
 8009460:	e007      	b.n	8009472 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	781a      	ldrb	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1cf      	bne.n	800942a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2200      	movs	r2, #0
 8009492:	2140      	movs	r1, #64	; 0x40
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 faef 	bl	8009a78 <UART_WaitOnFlagUntilTimeout>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e006      	b.n	80094b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	e000      	b.n	80094b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80094b0:	2302      	movs	r3, #2
  }
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3720      	adds	r7, #32
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	4613      	mov	r3, r2
 80094c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d11d      	bne.n	8009510 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <HAL_UART_Receive_IT+0x26>
 80094da:	88fb      	ldrh	r3, [r7, #6]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e016      	b.n	8009512 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_UART_Receive_IT+0x38>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e00f      	b.n	8009512 <HAL_UART_Receive_IT+0x58>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	461a      	mov	r2, r3
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fb24 	bl	8009b54 <UART_Start_Receive_IT>
 800950c:	4603      	mov	r3, r0
 800950e:	e000      	b.n	8009512 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009510:	2302      	movs	r3, #2
  }
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b0ba      	sub	sp, #232	; 0xe8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009548:	2300      	movs	r3, #0
 800954a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800955a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10f      	bne.n	8009582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <HAL_UART_IRQHandler+0x66>
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc07 	bl	8009d8e <UART_Receive_IT>
      return;
 8009580:	e256      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80de 	beq.w	8009748 <HAL_UART_IRQHandler+0x22c>
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800959c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 80d1 	beq.w	8009748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <HAL_UART_IRQHandler+0xae>
 80095b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f043 0201 	orr.w	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <HAL_UART_IRQHandler+0xd2>
 80095d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <HAL_UART_IRQHandler+0xf6>
 80095fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	f043 0204 	orr.w	r2, r3, #4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009616:	f003 0308 	and.w	r3, r3, #8
 800961a:	2b00      	cmp	r3, #0
 800961c:	d011      	beq.n	8009642 <HAL_UART_IRQHandler+0x126>
 800961e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800962a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f043 0208 	orr.w	r2, r3, #8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 81ed 	beq.w	8009a26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800964c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <HAL_UART_IRQHandler+0x14e>
 8009658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fb92 	bl	8009d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009674:	2b40      	cmp	r3, #64	; 0x40
 8009676:	bf0c      	ite	eq
 8009678:	2301      	moveq	r3, #1
 800967a:	2300      	movne	r3, #0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b00      	cmp	r3, #0
 800968c:	d103      	bne.n	8009696 <HAL_UART_IRQHandler+0x17a>
 800968e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d04f      	beq.n	8009736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa9a 	bl	8009bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d141      	bne.n	800972e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3314      	adds	r3, #20
 80096b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3314      	adds	r3, #20
 80096d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1d9      	bne.n	80096aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d013      	beq.n	8009726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	4a7d      	ldr	r2, [pc, #500]	; (80098f8 <HAL_UART_IRQHandler+0x3dc>)
 8009704:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	4618      	mov	r0, r3
 800970c:	f7fa fbe2 	bl	8003ed4 <HAL_DMA_Abort_IT>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d016      	beq.n	8009744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009724:	e00e      	b.n	8009744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f990 	bl	8009a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	e00a      	b.n	8009744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f98c 	bl	8009a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e006      	b.n	8009744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f988 	bl	8009a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009742:	e170      	b.n	8009a26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009744:	bf00      	nop
    return;
 8009746:	e16e      	b.n	8009a26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974c:	2b01      	cmp	r3, #1
 800974e:	f040 814a 	bne.w	80099e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8143 	beq.w	80099e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 813c 	beq.w	80099e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	60bb      	str	r3, [r7, #8]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	60bb      	str	r3, [r7, #8]
 8009782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	f040 80b4 	bne.w	80098fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8140 	beq.w	8009a2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097b2:	429a      	cmp	r2, r3
 80097b4:	f080 8139 	bcs.w	8009a2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ca:	f000 8088 	beq.w	80098de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	330c      	adds	r3, #12
 80097f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1d9      	bne.n	80097ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3314      	adds	r3, #20
 8009820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800982a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800982c:	f023 0301 	bic.w	r3, r3, #1
 8009830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3314      	adds	r3, #20
 800983a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800983e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e1      	bne.n	800981a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3314      	adds	r3, #20
 800985c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800986c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3314      	adds	r3, #20
 8009876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800987a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800987c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e3      	bne.n	8009856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	330c      	adds	r3, #12
 80098a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ae:	f023 0310 	bic.w	r3, r3, #16
 80098b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	330c      	adds	r3, #12
 80098bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80098c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c8:	e841 2300 	strex	r3, r2, [r1]
 80098cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e3      	bne.n	800989c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fa fa8b 	bl	8003df4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8b6 	bl	8009a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098f4:	e099      	b.n	8009a2a <HAL_UART_IRQHandler+0x50e>
 80098f6:	bf00      	nop
 80098f8:	08009c97 	.word	0x08009c97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009904:	b29b      	uxth	r3, r3
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 808b 	beq.w	8009a2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8086 	beq.w	8009a2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	330c      	adds	r3, #12
 8009928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	330c      	adds	r3, #12
 8009942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009946:	647a      	str	r2, [r7, #68]	; 0x44
 8009948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800994c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e3      	bne.n	8009922 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3314      	adds	r3, #20
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	623b      	str	r3, [r7, #32]
   return(result);
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	f023 0301 	bic.w	r3, r3, #1
 8009970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3314      	adds	r3, #20
 800997a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800997e:	633a      	str	r2, [r7, #48]	; 0x30
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e3      	bne.n	800995a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2220      	movs	r2, #32
 8009996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	330c      	adds	r3, #12
 80099a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0310 	bic.w	r3, r3, #16
 80099b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	330c      	adds	r3, #12
 80099c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099c4:	61fa      	str	r2, [r7, #28]
 80099c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	69b9      	ldr	r1, [r7, #24]
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	617b      	str	r3, [r7, #20]
   return(result);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e3      	bne.n	80099a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f83e 	bl	8009a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099e4:	e023      	b.n	8009a2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <HAL_UART_IRQHandler+0x4ea>
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f95d 	bl	8009cbe <UART_Transmit_IT>
    return;
 8009a04:	e014      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00e      	beq.n	8009a30 <HAL_UART_IRQHandler+0x514>
 8009a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d008      	beq.n	8009a30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f99d 	bl	8009d5e <UART_EndTransmit_IT>
    return;
 8009a24:	e004      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
    return;
 8009a26:	bf00      	nop
 8009a28:	e002      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
      return;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
      return;
 8009a2e:	bf00      	nop
  }
}
 8009a30:	37e8      	adds	r7, #232	; 0xe8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop

08009a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b090      	sub	sp, #64	; 0x40
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a88:	e050      	b.n	8009b2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d04c      	beq.n	8009b2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d007      	beq.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a98:	f7f9 fb98 	bl	80031cc <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d241      	bcs.n	8009b2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	330c      	adds	r3, #12
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ac8:	637a      	str	r2, [r7, #52]	; 0x34
 8009aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e5      	bne.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3314      	adds	r3, #20
 8009ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	613b      	str	r3, [r7, #16]
   return(result);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f023 0301 	bic.w	r3, r3, #1
 8009af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3314      	adds	r3, #20
 8009afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009afc:	623a      	str	r2, [r7, #32]
 8009afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	69f9      	ldr	r1, [r7, #28]
 8009b02:	6a3a      	ldr	r2, [r7, #32]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e5      	bne.n	8009adc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e00f      	b.n	8009b4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4013      	ands	r3, r2
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2301      	moveq	r3, #1
 8009b3e:	2300      	movne	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	461a      	mov	r2, r3
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d09f      	beq.n	8009a8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3740      	adds	r7, #64	; 0x40
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	88fa      	ldrh	r2, [r7, #6]
 8009b6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	88fa      	ldrh	r2, [r7, #6]
 8009b72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2222      	movs	r2, #34	; 0x22
 8009b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ba0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	695a      	ldr	r2, [r3, #20]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f042 0201 	orr.w	r2, r2, #1
 8009bb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0220 	orr.w	r2, r2, #32
 8009bc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b095      	sub	sp, #84	; 0x54
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	330c      	adds	r3, #12
 8009bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e5      	bne.n	8009bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3314      	adds	r3, #20
 8009c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e5      	bne.n	8009c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d119      	bne.n	8009c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	330c      	adds	r3, #12
 8009c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	e853 3f00 	ldrex	r3, [r3]
 8009c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f023 0310 	bic.w	r3, r3, #16
 8009c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	330c      	adds	r3, #12
 8009c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c68:	61ba      	str	r2, [r7, #24]
 8009c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	6979      	ldr	r1, [r7, #20]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	613b      	str	r3, [r7, #16]
   return(result);
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e5      	bne.n	8009c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009c8a:	bf00      	nop
 8009c8c:	3754      	adds	r7, #84	; 0x54
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff fecb 	bl	8009a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b21      	cmp	r3, #33	; 0x21
 8009cd0:	d13e      	bne.n	8009d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cda:	d114      	bne.n	8009d06 <UART_Transmit_IT+0x48>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d110      	bne.n	8009d06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	1c9a      	adds	r2, r3, #2
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	621a      	str	r2, [r3, #32]
 8009d04:	e008      	b.n	8009d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	1c59      	adds	r1, r3, #1
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6211      	str	r1, [r2, #32]
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4619      	mov	r1, r3
 8009d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10f      	bne.n	8009d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e000      	b.n	8009d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d50:	2302      	movs	r3, #2
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fe5a 	bl	8009a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b08c      	sub	sp, #48	; 0x30
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b22      	cmp	r3, #34	; 0x22
 8009da0:	f040 80ab 	bne.w	8009efa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dac:	d117      	bne.n	8009dde <UART_Receive_IT+0x50>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d113      	bne.n	8009dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd6:	1c9a      	adds	r2, r3, #2
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	629a      	str	r2, [r3, #40]	; 0x28
 8009ddc:	e026      	b.n	8009e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df0:	d007      	beq.n	8009e02 <UART_Receive_IT+0x74>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <UART_Receive_IT+0x82>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	e008      	b.n	8009e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	3b01      	subs	r3, #1
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d15a      	bne.n	8009ef6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0220 	bic.w	r2, r2, #32
 8009e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695a      	ldr	r2, [r3, #20]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0201 	bic.w	r2, r2, #1
 8009e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d135      	bne.n	8009eec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	613b      	str	r3, [r7, #16]
   return(result);
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f023 0310 	bic.w	r3, r3, #16
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea6:	623a      	str	r2, [r7, #32]
 8009ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	69f9      	ldr	r1, [r7, #28]
 8009eac:	6a3a      	ldr	r2, [r7, #32]
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e5      	bne.n	8009e86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b10      	cmp	r3, #16
 8009ec6:	d10a      	bne.n	8009ede <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff fdbb 	bl	8009a60 <HAL_UARTEx_RxEventCallback>
 8009eea:	e002      	b.n	8009ef2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f009 fee1 	bl	8013cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e002      	b.n	8009efc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e000      	b.n	8009efc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009efa:	2302      	movs	r3, #2
  }
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3730      	adds	r7, #48	; 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f08:	b0c0      	sub	sp, #256	; 0x100
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f20:	68d9      	ldr	r1, [r3, #12]
 8009f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	ea40 0301 	orr.w	r3, r0, r1
 8009f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f32:	689a      	ldr	r2, [r3, #8]
 8009f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f5c:	f021 010c 	bic.w	r1, r1, #12
 8009f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f6a:	430b      	orrs	r3, r1
 8009f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7e:	6999      	ldr	r1, [r3, #24]
 8009f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	ea40 0301 	orr.w	r3, r0, r1
 8009f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b8f      	ldr	r3, [pc, #572]	; (800a1d0 <UART_SetConfig+0x2cc>)
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d005      	beq.n	8009fa4 <UART_SetConfig+0xa0>
 8009f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4b8d      	ldr	r3, [pc, #564]	; (800a1d4 <UART_SetConfig+0x2d0>)
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d104      	bne.n	8009fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fa4:	f7fc f870 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 8009fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009fac:	e003      	b.n	8009fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fae:	f7fc f857 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8009fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fc0:	f040 810c 	bne.w	800a1dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	1891      	adds	r1, r2, r2
 8009fdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fde:	415b      	adcs	r3, r3
 8009fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	eb12 0801 	adds.w	r8, r2, r1
 8009fec:	4629      	mov	r1, r5
 8009fee:	eb43 0901 	adc.w	r9, r3, r1
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	f04f 0300 	mov.w	r3, #0
 8009ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a006:	4690      	mov	r8, r2
 800a008:	4699      	mov	r9, r3
 800a00a:	4623      	mov	r3, r4
 800a00c:	eb18 0303 	adds.w	r3, r8, r3
 800a010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a014:	462b      	mov	r3, r5
 800a016:	eb49 0303 	adc.w	r3, r9, r3
 800a01a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a02a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a02e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a032:	460b      	mov	r3, r1
 800a034:	18db      	adds	r3, r3, r3
 800a036:	653b      	str	r3, [r7, #80]	; 0x50
 800a038:	4613      	mov	r3, r2
 800a03a:	eb42 0303 	adc.w	r3, r2, r3
 800a03e:	657b      	str	r3, [r7, #84]	; 0x54
 800a040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a048:	f7f6 fe6e 	bl	8000d28 <__aeabi_uldivmod>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4b61      	ldr	r3, [pc, #388]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a052:	fba3 2302 	umull	r2, r3, r3, r2
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	011c      	lsls	r4, r3, #4
 800a05a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a064:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a06c:	4642      	mov	r2, r8
 800a06e:	464b      	mov	r3, r9
 800a070:	1891      	adds	r1, r2, r2
 800a072:	64b9      	str	r1, [r7, #72]	; 0x48
 800a074:	415b      	adcs	r3, r3
 800a076:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a07c:	4641      	mov	r1, r8
 800a07e:	eb12 0a01 	adds.w	sl, r2, r1
 800a082:	4649      	mov	r1, r9
 800a084:	eb43 0b01 	adc.w	fp, r3, r1
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a09c:	4692      	mov	sl, r2
 800a09e:	469b      	mov	fp, r3
 800a0a0:	4643      	mov	r3, r8
 800a0a2:	eb1a 0303 	adds.w	r3, sl, r3
 800a0a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	eb4b 0303 	adc.w	r3, fp, r3
 800a0b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a0c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	18db      	adds	r3, r3, r3
 800a0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	eb42 0303 	adc.w	r3, r2, r3
 800a0d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0de:	f7f6 fe23 	bl	8000d28 <__aeabi_uldivmod>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4b3b      	ldr	r3, [pc, #236]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a0ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ee:	095b      	lsrs	r3, r3, #5
 800a0f0:	2264      	movs	r2, #100	; 0x64
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	1acb      	subs	r3, r1, r3
 800a0f8:	00db      	lsls	r3, r3, #3
 800a0fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a0fe:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a100:	fba3 2302 	umull	r2, r3, r3, r2
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a10c:	441c      	add	r4, r3
 800a10e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a112:	2200      	movs	r2, #0
 800a114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a11c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a120:	4642      	mov	r2, r8
 800a122:	464b      	mov	r3, r9
 800a124:	1891      	adds	r1, r2, r2
 800a126:	63b9      	str	r1, [r7, #56]	; 0x38
 800a128:	415b      	adcs	r3, r3
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a12c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a130:	4641      	mov	r1, r8
 800a132:	1851      	adds	r1, r2, r1
 800a134:	6339      	str	r1, [r7, #48]	; 0x30
 800a136:	4649      	mov	r1, r9
 800a138:	414b      	adcs	r3, r1
 800a13a:	637b      	str	r3, [r7, #52]	; 0x34
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a148:	4659      	mov	r1, fp
 800a14a:	00cb      	lsls	r3, r1, #3
 800a14c:	4651      	mov	r1, sl
 800a14e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a152:	4651      	mov	r1, sl
 800a154:	00ca      	lsls	r2, r1, #3
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	4642      	mov	r2, r8
 800a15e:	189b      	adds	r3, r3, r2
 800a160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a164:	464b      	mov	r3, r9
 800a166:	460a      	mov	r2, r1
 800a168:	eb42 0303 	adc.w	r3, r2, r3
 800a16c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a17c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a184:	460b      	mov	r3, r1
 800a186:	18db      	adds	r3, r3, r3
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
 800a18a:	4613      	mov	r3, r2
 800a18c:	eb42 0303 	adc.w	r3, r2, r3
 800a190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a19a:	f7f6 fdc5 	bl	8000d28 <__aeabi_uldivmod>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a1a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1a8:	095b      	lsrs	r3, r3, #5
 800a1aa:	2164      	movs	r1, #100	; 0x64
 800a1ac:	fb01 f303 	mul.w	r3, r1, r3
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	3332      	adds	r3, #50	; 0x32
 800a1b6:	4a08      	ldr	r2, [pc, #32]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1bc:	095b      	lsrs	r3, r3, #5
 800a1be:	f003 0207 	and.w	r2, r3, #7
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4422      	add	r2, r4
 800a1ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1cc:	e105      	b.n	800a3da <UART_SetConfig+0x4d6>
 800a1ce:	bf00      	nop
 800a1d0:	40011000 	.word	0x40011000
 800a1d4:	40011400 	.word	0x40011400
 800a1d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a1ee:	4642      	mov	r2, r8
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	1891      	adds	r1, r2, r2
 800a1f4:	6239      	str	r1, [r7, #32]
 800a1f6:	415b      	adcs	r3, r3
 800a1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1fe:	4641      	mov	r1, r8
 800a200:	1854      	adds	r4, r2, r1
 800a202:	4649      	mov	r1, r9
 800a204:	eb43 0501 	adc.w	r5, r3, r1
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	00eb      	lsls	r3, r5, #3
 800a212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a216:	00e2      	lsls	r2, r4, #3
 800a218:	4614      	mov	r4, r2
 800a21a:	461d      	mov	r5, r3
 800a21c:	4643      	mov	r3, r8
 800a21e:	18e3      	adds	r3, r4, r3
 800a220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a224:	464b      	mov	r3, r9
 800a226:	eb45 0303 	adc.w	r3, r5, r3
 800a22a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a23a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a24a:	4629      	mov	r1, r5
 800a24c:	008b      	lsls	r3, r1, #2
 800a24e:	4621      	mov	r1, r4
 800a250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a254:	4621      	mov	r1, r4
 800a256:	008a      	lsls	r2, r1, #2
 800a258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a25c:	f7f6 fd64 	bl	8000d28 <__aeabi_uldivmod>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4b60      	ldr	r3, [pc, #384]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a266:	fba3 2302 	umull	r2, r3, r3, r2
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	011c      	lsls	r4, r3, #4
 800a26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a272:	2200      	movs	r2, #0
 800a274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a278:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a27c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a280:	4642      	mov	r2, r8
 800a282:	464b      	mov	r3, r9
 800a284:	1891      	adds	r1, r2, r2
 800a286:	61b9      	str	r1, [r7, #24]
 800a288:	415b      	adcs	r3, r3
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a290:	4641      	mov	r1, r8
 800a292:	1851      	adds	r1, r2, r1
 800a294:	6139      	str	r1, [r7, #16]
 800a296:	4649      	mov	r1, r9
 800a298:	414b      	adcs	r3, r1
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	f04f 0200 	mov.w	r2, #0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2a8:	4659      	mov	r1, fp
 800a2aa:	00cb      	lsls	r3, r1, #3
 800a2ac:	4651      	mov	r1, sl
 800a2ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2b2:	4651      	mov	r1, sl
 800a2b4:	00ca      	lsls	r2, r1, #3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	4642      	mov	r2, r8
 800a2be:	189b      	adds	r3, r3, r2
 800a2c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	460a      	mov	r2, r1
 800a2c8:	eb42 0303 	adc.w	r3, r2, r3
 800a2cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	008b      	lsls	r3, r1, #2
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2f2:	4641      	mov	r1, r8
 800a2f4:	008a      	lsls	r2, r1, #2
 800a2f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a2fa:	f7f6 fd15 	bl	8000d28 <__aeabi_uldivmod>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a304:	fba3 1302 	umull	r1, r3, r3, r2
 800a308:	095b      	lsrs	r3, r3, #5
 800a30a:	2164      	movs	r1, #100	; 0x64
 800a30c:	fb01 f303 	mul.w	r3, r1, r3
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	3332      	adds	r3, #50	; 0x32
 800a316:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	095b      	lsrs	r3, r3, #5
 800a31e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a322:	441c      	add	r4, r3
 800a324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a328:	2200      	movs	r2, #0
 800a32a:	673b      	str	r3, [r7, #112]	; 0x70
 800a32c:	677a      	str	r2, [r7, #116]	; 0x74
 800a32e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a332:	4642      	mov	r2, r8
 800a334:	464b      	mov	r3, r9
 800a336:	1891      	adds	r1, r2, r2
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	415b      	adcs	r3, r3
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a342:	4641      	mov	r1, r8
 800a344:	1851      	adds	r1, r2, r1
 800a346:	6039      	str	r1, [r7, #0]
 800a348:	4649      	mov	r1, r9
 800a34a:	414b      	adcs	r3, r1
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	f04f 0200 	mov.w	r2, #0
 800a352:	f04f 0300 	mov.w	r3, #0
 800a356:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a35a:	4659      	mov	r1, fp
 800a35c:	00cb      	lsls	r3, r1, #3
 800a35e:	4651      	mov	r1, sl
 800a360:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a364:	4651      	mov	r1, sl
 800a366:	00ca      	lsls	r2, r1, #3
 800a368:	4610      	mov	r0, r2
 800a36a:	4619      	mov	r1, r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	4642      	mov	r2, r8
 800a370:	189b      	adds	r3, r3, r2
 800a372:	66bb      	str	r3, [r7, #104]	; 0x68
 800a374:	464b      	mov	r3, r9
 800a376:	460a      	mov	r2, r1
 800a378:	eb42 0303 	adc.w	r3, r2, r3
 800a37c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	663b      	str	r3, [r7, #96]	; 0x60
 800a388:	667a      	str	r2, [r7, #100]	; 0x64
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	f04f 0300 	mov.w	r3, #0
 800a392:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a396:	4649      	mov	r1, r9
 800a398:	008b      	lsls	r3, r1, #2
 800a39a:	4641      	mov	r1, r8
 800a39c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	008a      	lsls	r2, r1, #2
 800a3a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a3a8:	f7f6 fcbe 	bl	8000d28 <__aeabi_uldivmod>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a3b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b6:	095b      	lsrs	r3, r3, #5
 800a3b8:	2164      	movs	r1, #100	; 0x64
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	3332      	adds	r3, #50	; 0x32
 800a3c4:	4a08      	ldr	r2, [pc, #32]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4422      	add	r2, r4
 800a3d8:	609a      	str	r2, [r3, #8]
}
 800a3da:	bf00      	nop
 800a3dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3e6:	bf00      	nop
 800a3e8:	51eb851f 	.word	0x51eb851f

0800a3ec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	b480      	push	{r7}
 800a3f0:	b085      	sub	sp, #20
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	f107 001c 	add.w	r0, r7, #28
 800a3fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a402:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a404:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a406:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a40a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a40e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a412:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a416:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a426:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	b004      	add	sp, #16
 800a440:	4770      	bx	lr

0800a442 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a450:	4618      	mov	r0, r3
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2203      	movs	r2, #3
 800a48a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0303 	and.w	r3, r3, #3
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a4d4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a4da:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a4e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a4f0:	f023 030f 	bic.w	r3, r3, #15
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	b2db      	uxtb	r3, r3
}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3314      	adds	r3, #20
 800a532:	461a      	mov	r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	4413      	add	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
}  
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a570:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a576:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a57c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4313      	orrs	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a594:	2300      	movs	r3, #0

}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b088      	sub	sp, #32
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b4:	2340      	movs	r3, #64	; 0x40
 800a5b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c2:	f107 0308 	add.w	r3, r7, #8
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff74 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a5ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d2:	2110      	movs	r1, #16
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa19 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a5da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3720      	adds	r7, #32
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b088      	sub	sp, #32
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a5f4:	2311      	movs	r3, #17
 800a5f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a604:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a606:	f107 0308 	add.w	r3, r7, #8
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7ff ff52 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a612:	f241 3288 	movw	r2, #5000	; 0x1388
 800a616:	2111      	movs	r1, #17
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f9f7 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a61e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a620:	69fb      	ldr	r3, [r7, #28]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b088      	sub	sp, #32
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a638:	2312      	movs	r3, #18
 800a63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a63c:	2340      	movs	r3, #64	; 0x40
 800a63e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a648:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a64a:	f107 0308 	add.w	r3, r7, #8
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff ff30 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a656:	f241 3288 	movw	r2, #5000	; 0x1388
 800a65a:	2112      	movs	r1, #18
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f9d5 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a664:	69fb      	ldr	r3, [r7, #28]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3720      	adds	r7, #32
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b088      	sub	sp, #32
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a67c:	2318      	movs	r3, #24
 800a67e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a680:	2340      	movs	r3, #64	; 0x40
 800a682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a684:	2300      	movs	r3, #0
 800a686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a68c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a68e:	f107 0308 	add.w	r3, r7, #8
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff ff0e 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a69a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a69e:	2118      	movs	r1, #24
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f9b3 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a6a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6a8:	69fb      	ldr	r3, [r7, #28]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b088      	sub	sp, #32
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a6c0:	2319      	movs	r3, #25
 800a6c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6c4:	2340      	movs	r3, #64	; 0x40
 800a6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6d2:	f107 0308 	add.w	r3, r7, #8
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff feec 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a6de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e2:	2119      	movs	r1, #25
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f991 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b088      	sub	sp, #32
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a704:	230c      	movs	r3, #12
 800a706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a708:	2340      	movs	r3, #64	; 0x40
 800a70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a714:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a716:	f107 0308 	add.w	r3, r7, #8
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff feca 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a722:	4a05      	ldr	r2, [pc, #20]	; (800a738 <SDMMC_CmdStopTransfer+0x40>)
 800a724:	210c      	movs	r1, #12
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f970 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a72c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a72e:	69fb      	ldr	r3, [r7, #28]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3720      	adds	r7, #32
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	05f5e100 	.word	0x05f5e100

0800a73c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08a      	sub	sp, #40	; 0x28
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a74c:	2307      	movs	r3, #7
 800a74e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a750:	2340      	movs	r3, #64	; 0x40
 800a752:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a754:	2300      	movs	r3, #0
 800a756:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a75e:	f107 0310 	add.w	r3, r7, #16
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff fea6 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a76a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a76e:	2107      	movs	r1, #7
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f94b 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a776:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3728      	adds	r7, #40	; 0x28
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b088      	sub	sp, #32
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a792:	2300      	movs	r3, #0
 800a794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a79e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fe85 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fb65 	bl	800ae7c <SDMMC_GetCmdError>
 800a7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3720      	adds	r7, #32
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a7c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7d0:	2340      	movs	r3, #64	; 0x40
 800a7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fe66 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 faf8 	bl	800ade0 <SDMMC_GetCmdResp7>
 800a7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a80a:	2337      	movs	r3, #55	; 0x37
 800a80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a80e:	2340      	movs	r3, #64	; 0x40
 800a810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a812:	2300      	movs	r3, #0
 800a814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a81a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fe47 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a828:	f241 3288 	movw	r2, #5000	; 0x1388
 800a82c:	2137      	movs	r1, #55	; 0x37
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f8ec 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a836:	69fb      	ldr	r3, [r7, #28]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a856:	2329      	movs	r3, #41	; 0x29
 800a858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a866:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff fe21 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9ff 	bl	800ac78 <SDMMC_GetCmdResp3>
 800a87a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a87c:	69fb      	ldr	r3, [r7, #28]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b088      	sub	sp, #32
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a894:	2306      	movs	r3, #6
 800a896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8a6:	f107 0308 	add.w	r3, r7, #8
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7ff fe02 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b6:	2106      	movs	r1, #6
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f8a7 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a8be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3720      	adds	r7, #32
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b088      	sub	sp, #32
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a8d6:	2333      	movs	r3, #51	; 0x33
 800a8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8da:	2340      	movs	r3, #64	; 0x40
 800a8dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff fde1 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f8:	2133      	movs	r1, #51	; 0x33
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f886 	bl	800aa0c <SDMMC_GetCmdResp1>
 800a900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a902:	69fb      	ldr	r3, [r7, #28]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3720      	adds	r7, #32
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a918:	2302      	movs	r3, #2
 800a91a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a91c:	23c0      	movs	r3, #192	; 0xc0
 800a91e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a928:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a92a:	f107 0308 	add.w	r3, r7, #8
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff fdc0 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f956 	bl	800abe8 <SDMMC_GetCmdResp2>
 800a93c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93e:	69fb      	ldr	r3, [r7, #28]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3720      	adds	r7, #32
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a956:	2309      	movs	r3, #9
 800a958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a95a:	23c0      	movs	r3, #192	; 0xc0
 800a95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a95e:	2300      	movs	r3, #0
 800a960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a966:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff fda1 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f937 	bl	800abe8 <SDMMC_GetCmdResp2>
 800a97a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a97c:	69fb      	ldr	r3, [r7, #28]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3720      	adds	r7, #32
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b088      	sub	sp, #32
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a994:	2303      	movs	r3, #3
 800a996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a998:	2340      	movs	r3, #64	; 0x40
 800a99a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a99c:	2300      	movs	r3, #0
 800a99e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9a6:	f107 0308 	add.w	r3, r7, #8
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff fd82 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	2103      	movs	r1, #3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f99c 	bl	800acf4 <SDMMC_GetCmdResp6>
 800a9bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9be:	69fb      	ldr	r3, [r7, #28]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3720      	adds	r7, #32
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9d6:	230d      	movs	r3, #13
 800a9d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9da:	2340      	movs	r3, #64	; 0x40
 800a9dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9e8:	f107 0308 	add.w	r3, r7, #8
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7ff fd61 	bl	800a4b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f8:	210d      	movs	r1, #13
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f806 	bl	800aa0c <SDMMC_GetCmdResp1>
 800aa00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa02:	69fb      	ldr	r3, [r7, #28]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3720      	adds	r7, #32
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	460b      	mov	r3, r1
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aa1a:	4b70      	ldr	r3, [pc, #448]	; (800abdc <SDMMC_GetCmdResp1+0x1d0>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a70      	ldr	r2, [pc, #448]	; (800abe0 <SDMMC_GetCmdResp1+0x1d4>)
 800aa20:	fba2 2303 	umull	r2, r3, r2, r3
 800aa24:	0a5a      	lsrs	r2, r3, #9
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	fb02 f303 	mul.w	r3, r2, r3
 800aa2c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	1e5a      	subs	r2, r3, #1
 800aa32:	61fa      	str	r2, [r7, #28]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa3c:	e0c9      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa42:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0ef      	beq.n	800aa2e <SDMMC_GetCmdResp1+0x22>
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1ea      	bne.n	800aa2e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d004      	beq.n	800aa6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2204      	movs	r2, #4
 800aa68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	e0b1      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e0a6      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	22c5      	movs	r2, #197	; 0xc5
 800aa88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f7ff fd3d 	bl	800a50a <SDIO_GetCommandResponse>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d001      	beq.n	800aa9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e099      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff fd3f 	bl	800a524 <SDIO_GetResponse>
 800aaa6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4b4e      	ldr	r3, [pc, #312]	; (800abe4 <SDMMC_GetCmdResp1+0x1d8>)
 800aaac:	4013      	ands	r3, r2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	e08d      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da02      	bge.n	800aac2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aabc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aac0:	e087      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aacc:	2340      	movs	r3, #64	; 0x40
 800aace:	e080      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aada:	2380      	movs	r3, #128	; 0x80
 800aadc:	e079      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaec:	e071      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aaf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aafc:	e069      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab0c:	e061      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab1c:	e059      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab2c:	e051      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab3c:	e049      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab4c:	e041      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5c:	e039      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab6c:	e031      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab7c:	e029      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab8c:	e021      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab9c:	e019      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abac:	e011      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800abb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abbc:	e009      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f003 0308 	and.w	r3, r3, #8
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abc8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abcc:	e001      	b.n	800abd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20000008 	.word	0x20000008
 800abe0:	10624dd3 	.word	0x10624dd3
 800abe4:	fdffe008 	.word	0xfdffe008

0800abe8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abf0:	4b1f      	ldr	r3, [pc, #124]	; (800ac70 <SDMMC_GetCmdResp2+0x88>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a1f      	ldr	r2, [pc, #124]	; (800ac74 <SDMMC_GetCmdResp2+0x8c>)
 800abf6:	fba2 2303 	umull	r2, r3, r2, r3
 800abfa:	0a5b      	lsrs	r3, r3, #9
 800abfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
 800ac04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	1e5a      	subs	r2, r3, #1
 800ac0a:	60fa      	str	r2, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac14:	e026      	b.n	800ac64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0ef      	beq.n	800ac06 <SDMMC_GetCmdResp2+0x1e>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1ea      	bne.n	800ac06 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2204      	movs	r2, #4
 800ac40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac42:	2304      	movs	r3, #4
 800ac44:	e00e      	b.n	800ac64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e003      	b.n	800ac64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	22c5      	movs	r2, #197	; 0xc5
 800ac60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	20000008 	.word	0x20000008
 800ac74:	10624dd3 	.word	0x10624dd3

0800ac78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac80:	4b1a      	ldr	r3, [pc, #104]	; (800acec <SDMMC_GetCmdResp3+0x74>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a1a      	ldr	r2, [pc, #104]	; (800acf0 <SDMMC_GetCmdResp3+0x78>)
 800ac86:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8a:	0a5b      	lsrs	r3, r3, #9
 800ac8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac90:	fb02 f303 	mul.w	r3, r2, r3
 800ac94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	1e5a      	subs	r2, r3, #1
 800ac9a:	60fa      	str	r2, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aca4:	e01b      	b.n	800acde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0ef      	beq.n	800ac96 <SDMMC_GetCmdResp3+0x1e>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1ea      	bne.n	800ac96 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2204      	movs	r2, #4
 800acd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acd2:	2304      	movs	r3, #4
 800acd4:	e003      	b.n	800acde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	22c5      	movs	r2, #197	; 0xc5
 800acda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	20000008 	.word	0x20000008
 800acf0:	10624dd3 	.word	0x10624dd3

0800acf4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	460b      	mov	r3, r1
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad02:	4b35      	ldr	r3, [pc, #212]	; (800add8 <SDMMC_GetCmdResp6+0xe4>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a35      	ldr	r2, [pc, #212]	; (800addc <SDMMC_GetCmdResp6+0xe8>)
 800ad08:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0c:	0a5b      	lsrs	r3, r3, #9
 800ad0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad12:	fb02 f303 	mul.w	r3, r2, r3
 800ad16:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	1e5a      	subs	r2, r3, #1
 800ad1c:	61fa      	str	r2, [r7, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad26:	e052      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0ef      	beq.n	800ad18 <SDMMC_GetCmdResp6+0x24>
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1ea      	bne.n	800ad18 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad46:	f003 0304 	and.w	r3, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d004      	beq.n	800ad58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2204      	movs	r2, #4
 800ad52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad54:	2304      	movs	r3, #4
 800ad56:	e03a      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2201      	movs	r2, #1
 800ad68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e02f      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff fbcb 	bl	800a50a <SDIO_GetCommandResponse>
 800ad74:	4603      	mov	r3, r0
 800ad76:	461a      	mov	r2, r3
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d001      	beq.n	800ad82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e025      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	22c5      	movs	r2, #197	; 0xc5
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad88:	2100      	movs	r1, #0
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7ff fbca 	bl	800a524 <SDIO_GetResponse>
 800ad90:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d106      	bne.n	800adaa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	0c1b      	lsrs	r3, r3, #16
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e011      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adb8:	e009      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800adc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc8:	e001      	b.n	800adce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000008 	.word	0x20000008
 800addc:	10624dd3 	.word	0x10624dd3

0800ade0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ade8:	4b22      	ldr	r3, [pc, #136]	; (800ae74 <SDMMC_GetCmdResp7+0x94>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a22      	ldr	r2, [pc, #136]	; (800ae78 <SDMMC_GetCmdResp7+0x98>)
 800adee:	fba2 2303 	umull	r2, r3, r2, r3
 800adf2:	0a5b      	lsrs	r3, r3, #9
 800adf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
 800adfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1e5a      	subs	r2, r3, #1
 800ae02:	60fa      	str	r2, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae0c:	e02c      	b.n	800ae68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0ef      	beq.n	800adfe <SDMMC_GetCmdResp7+0x1e>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1ea      	bne.n	800adfe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d004      	beq.n	800ae3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2204      	movs	r2, #4
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae3a:	2304      	movs	r3, #4
 800ae3c:	e014      	b.n	800ae68 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d004      	beq.n	800ae54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e009      	b.n	800ae68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2240      	movs	r2, #64	; 0x40
 800ae64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae66:	2300      	movs	r3, #0
  
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	20000008 	.word	0x20000008
 800ae78:	10624dd3 	.word	0x10624dd3

0800ae7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae84:	4b11      	ldr	r3, [pc, #68]	; (800aecc <SDMMC_GetCmdError+0x50>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a11      	ldr	r2, [pc, #68]	; (800aed0 <SDMMC_GetCmdError+0x54>)
 800ae8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8e:	0a5b      	lsrs	r3, r3, #9
 800ae90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae94:	fb02 f303 	mul.w	r3, r2, r3
 800ae98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	1e5a      	subs	r2, r3, #1
 800ae9e:	60fa      	str	r2, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d102      	bne.n	800aeaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aea8:	e009      	b.n	800aebe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0f1      	beq.n	800ae9a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	22c5      	movs	r2, #197	; 0xc5
 800aeba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	20000008 	.word	0x20000008
 800aed0:	10624dd3 	.word	0x10624dd3

0800aed4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
    /*## FatFS: Link the SD driver ###########################*/
    retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aed8:	4908      	ldr	r1, [pc, #32]	; (800aefc <MX_FATFS_Init+0x28>)
 800aeda:	4809      	ldr	r0, [pc, #36]	; (800af00 <MX_FATFS_Init+0x2c>)
 800aedc:	f001 ffe0 	bl	800cea0 <FATFS_LinkDriver>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <MX_FATFS_Init+0x30>)
 800aee6:	701a      	strb	r2, [r3, #0]
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aee8:	4907      	ldr	r1, [pc, #28]	; (800af08 <MX_FATFS_Init+0x34>)
 800aeea:	4808      	ldr	r0, [pc, #32]	; (800af0c <MX_FATFS_Init+0x38>)
 800aeec:	f001 ffd8 	bl	800cea0 <FATFS_LinkDriver>
 800aef0:	4603      	mov	r3, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	4b06      	ldr	r3, [pc, #24]	; (800af10 <MX_FATFS_Init+0x3c>)
 800aef6:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    /* additional user code for init */
    /* USER CODE END Init */
}
 800aef8:	bf00      	nop
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	2000129c 	.word	0x2000129c
 800af00:	08019b64 	.word	0x08019b64
 800af04:	20001298 	.word	0x20001298
 800af08:	200012a4 	.word	0x200012a4
 800af0c:	20000014 	.word	0x20000014
 800af10:	200012a0 	.word	0x200012a0

0800af14 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af1e:	f000 f896 	bl	800b04e <BSP_SD_IsDetected>
 800af22:	4603      	mov	r3, r0
 800af24:	2b01      	cmp	r3, #1
 800af26:	d001      	beq.n	800af2c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e012      	b.n	800af52 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800af2c:	480b      	ldr	r0, [pc, #44]	; (800af5c <BSP_SD_Init+0x48>)
 800af2e:	f7fb f8bf 	bl	80060b0 <HAL_SD_Init>
 800af32:	4603      	mov	r3, r0
 800af34:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af36:	79fb      	ldrb	r3, [r7, #7]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d109      	bne.n	800af50 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800af3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af40:	4806      	ldr	r0, [pc, #24]	; (800af5c <BSP_SD_Init+0x48>)
 800af42:	f7fb fe8d 	bl	8006c60 <HAL_SD_ConfigWideBusOperation>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af50:	79fb      	ldrb	r3, [r7, #7]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20000ce4 	.word	0x20000ce4

0800af60 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	4806      	ldr	r0, [pc, #24]	; (800af90 <BSP_SD_ReadBlocks_DMA+0x30>)
 800af78:	f7fb f94a 	bl	8006210 <HAL_SD_ReadBlocks_DMA>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af86:	7dfb      	ldrb	r3, [r7, #23]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20000ce4 	.word	0x20000ce4

0800af94 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	68f9      	ldr	r1, [r7, #12]
 800afaa:	4806      	ldr	r0, [pc, #24]	; (800afc4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afac:	f7fb fa12 	bl	80063d4 <HAL_SD_WriteBlocks_DMA>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afba:	7dfb      	ldrb	r3, [r7, #23]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000ce4 	.word	0x20000ce4

0800afc8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afcc:	4805      	ldr	r0, [pc, #20]	; (800afe4 <BSP_SD_GetCardState+0x1c>)
 800afce:	f7fb fee1 	bl	8006d94 <HAL_SD_GetCardState>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	bf14      	ite	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	2300      	moveq	r3, #0
 800afdc:	b2db      	uxtb	r3, r3
}
 800afde:	4618      	mov	r0, r3
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000ce4 	.word	0x20000ce4

0800afe8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4803      	ldr	r0, [pc, #12]	; (800b000 <BSP_SD_GetCardInfo+0x18>)
 800aff4:	f7fb fe08 	bl	8006c08 <HAL_SD_GetCardInfo>
}
 800aff8:	bf00      	nop
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20000ce4 	.word	0x20000ce4

0800b004 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b00c:	f000 f818 	bl	800b040 <BSP_SD_AbortCallback>
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b020:	f000 f9a8 	bl	800b374 <BSP_SD_WriteCpltCallback>
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b034:	f000 f9aa 	bl	800b38c <BSP_SD_ReadCpltCallback>
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0

}
 800b044:	bf00      	nop
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b054:	2301      	movs	r3, #1
 800b056:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b058:	f000 f80c 	bl	800b074 <BSP_PlatformIsDetected>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b062:	2300      	movs	r3, #0
 800b064:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	b2db      	uxtb	r3, r3
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b07a:	2301      	movs	r3, #1
 800b07c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b07e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b082:	4806      	ldr	r0, [pc, #24]	; (800b09c <BSP_PlatformIsDetected+0x28>)
 800b084:	f7f9 fb5a 	bl	800473c <HAL_GPIO_ReadPin>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b08e:	2300      	movs	r3, #0
 800b090:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b092:	79fb      	ldrb	r3, [r7, #7]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	40021400 	.word	0x40021400

0800b0a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b0a8:	f7f8 f890 	bl	80031cc <HAL_GetTick>
 800b0ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b0ae:	e006      	b.n	800b0be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0b0:	f7ff ff8a 	bl	800afc8 <BSP_SD_GetCardState>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e009      	b.n	800b0d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b0be:	f7f8 f885 	bl	80031cc <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d8f0      	bhi.n	800b0b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b0ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <SD_CheckStatus+0x38>)
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0ec:	f7ff ff6c 	bl	800afc8 <BSP_SD_GetCardState>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d107      	bne.n	800b106 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0f6:	4b07      	ldr	r3, [pc, #28]	; (800b114 <SD_CheckStatus+0x38>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	b2da      	uxtb	r2, r3
 800b102:	4b04      	ldr	r3, [pc, #16]	; (800b114 <SD_CheckStatus+0x38>)
 800b104:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b106:	4b03      	ldr	r3, [pc, #12]	; (800b114 <SD_CheckStatus+0x38>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b2db      	uxtb	r3, r3
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000011 	.word	0x20000011

0800b118 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b122:	f7ff fef7 	bl	800af14 <BSP_SD_Init>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d107      	bne.n	800b13c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff ffd4 	bl	800b0dc <SD_CheckStatus>
 800b134:	4603      	mov	r3, r0
 800b136:	461a      	mov	r2, r3
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <SD_initialize+0x34>)
 800b13a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b13c:	4b03      	ldr	r3, [pc, #12]	; (800b14c <SD_initialize+0x34>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b2db      	uxtb	r3, r3
}
 800b142:	4618      	mov	r0, r3
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000011 	.word	0x20000011

0800b150 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff ffbd 	bl	800b0dc <SD_CheckStatus>
 800b162:	4603      	mov	r3, r0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b180:	f247 5030 	movw	r0, #30000	; 0x7530
 800b184:	f7ff ff8c 	bl	800b0a0 <SD_CheckStatusWithTimeout>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	da01      	bge.n	800b192 <SD_read+0x26>
  {
    return res;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	e03b      	b.n	800b20a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	68b8      	ldr	r0, [r7, #8]
 800b198:	f7ff fee2 	bl	800af60 <BSP_SD_ReadBlocks_DMA>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d132      	bne.n	800b208 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	; (800b214 <SD_read+0xa8>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b1a8:	f7f8 f810 	bl	80031cc <HAL_GetTick>
 800b1ac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1ae:	bf00      	nop
 800b1b0:	4b18      	ldr	r3, [pc, #96]	; (800b214 <SD_read+0xa8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d108      	bne.n	800b1ca <SD_read+0x5e>
 800b1b8:	f7f8 f808 	bl	80031cc <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d9f2      	bls.n	800b1b0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b1ca:	4b12      	ldr	r3, [pc, #72]	; (800b214 <SD_read+0xa8>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d102      	bne.n	800b1d8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	75fb      	strb	r3, [r7, #23]
 800b1d6:	e017      	b.n	800b208 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b1d8:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <SD_read+0xa8>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1de:	f7f7 fff5 	bl	80031cc <HAL_GetTick>
 800b1e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1e4:	e007      	b.n	800b1f6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1e6:	f7ff feef 	bl	800afc8 <BSP_SD_GetCardState>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <SD_read+0x8a>
          {
            res = RES_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b1f4:	e008      	b.n	800b208 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1f6:	f7f7 ffe9 	bl	80031cc <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	f247 522f 	movw	r2, #29999	; 0x752f
 800b204:	4293      	cmp	r3, r2
 800b206:	d9ee      	bls.n	800b1e6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200012ac 	.word	0x200012ac

0800b218 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	4603      	mov	r3, r0
 800b226:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b22c:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <SD_write+0xa8>)
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b232:	f247 5030 	movw	r0, #30000	; 0x7530
 800b236:	f7ff ff33 	bl	800b0a0 <SD_CheckStatusWithTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da01      	bge.n	800b244 <SD_write+0x2c>
  {
    return res;
 800b240:	7dfb      	ldrb	r3, [r7, #23]
 800b242:	e038      	b.n	800b2b6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	68b8      	ldr	r0, [r7, #8]
 800b24a:	f7ff fea3 	bl	800af94 <BSP_SD_WriteBlocks_DMA>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d12f      	bne.n	800b2b4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b254:	f7f7 ffba 	bl	80031cc <HAL_GetTick>
 800b258:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b25a:	bf00      	nop
 800b25c:	4b18      	ldr	r3, [pc, #96]	; (800b2c0 <SD_write+0xa8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d108      	bne.n	800b276 <SD_write+0x5e>
 800b264:	f7f7 ffb2 	bl	80031cc <HAL_GetTick>
 800b268:	4602      	mov	r2, r0
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	f247 522f 	movw	r2, #29999	; 0x752f
 800b272:	4293      	cmp	r3, r2
 800b274:	d9f2      	bls.n	800b25c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b276:	4b12      	ldr	r3, [pc, #72]	; (800b2c0 <SD_write+0xa8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	75fb      	strb	r3, [r7, #23]
 800b282:	e017      	b.n	800b2b4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b284:	4b0e      	ldr	r3, [pc, #56]	; (800b2c0 <SD_write+0xa8>)
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b28a:	f7f7 ff9f 	bl	80031cc <HAL_GetTick>
 800b28e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b290:	e007      	b.n	800b2a2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b292:	f7ff fe99 	bl	800afc8 <BSP_SD_GetCardState>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <SD_write+0x8a>
          {
            res = RES_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
            break;
 800b2a0:	e008      	b.n	800b2b4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2a2:	f7f7 ff93 	bl	80031cc <HAL_GetTick>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d9ee      	bls.n	800b292 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200012a8 	.word	0x200012a8

0800b2c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08c      	sub	sp, #48	; 0x30
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	603a      	str	r2, [r7, #0]
 800b2ce:	71fb      	strb	r3, [r7, #7]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2da:	4b25      	ldr	r3, [pc, #148]	; (800b370 <SD_ioctl+0xac>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <SD_ioctl+0x28>
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e03c      	b.n	800b366 <SD_ioctl+0xa2>

  switch (cmd)
 800b2ec:	79bb      	ldrb	r3, [r7, #6]
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d834      	bhi.n	800b35c <SD_ioctl+0x98>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <SD_ioctl+0x34>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b309 	.word	0x0800b309
 800b2fc:	0800b311 	.word	0x0800b311
 800b300:	0800b329 	.word	0x0800b329
 800b304:	0800b343 	.word	0x0800b343
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b30e:	e028      	b.n	800b362 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b310:	f107 030c 	add.w	r3, r7, #12
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff fe67 	bl	800afe8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b326:	e01c      	b.n	800b362 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b328:	f107 030c 	add.w	r3, r7, #12
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff fe5b 	bl	800afe8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	b29a      	uxth	r2, r3
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b340:	e00f      	b.n	800b362 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b342:	f107 030c 	add.w	r3, r7, #12
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fe4e 	bl	800afe8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	0a5a      	lsrs	r2, r3, #9
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b35a:	e002      	b.n	800b362 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b35c:	2304      	movs	r3, #4
 800b35e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b366:	4618      	mov	r0, r3
 800b368:	3730      	adds	r7, #48	; 0x30
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20000011 	.word	0x20000011

0800b374 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b374:	b480      	push	{r7}
 800b376:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b378:	4b03      	ldr	r3, [pc, #12]	; (800b388 <BSP_SD_WriteCpltCallback+0x14>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	bf00      	nop
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	200012a8 	.word	0x200012a8

0800b38c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b390:	4b03      	ldr	r3, [pc, #12]	; (800b3a0 <BSP_SD_ReadCpltCallback+0x14>)
 800b392:	2201      	movs	r2, #1
 800b394:	601a      	str	r2, [r3, #0]
}
 800b396:	bf00      	nop
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	200012ac 	.word	0x200012ac

0800b3a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b3ae:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <USER_initialize+0x24>)
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b3b4:	4b04      	ldr	r3, [pc, #16]	; (800b3c8 <USER_initialize+0x24>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	20000012 	.word	0x20000012

0800b3cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <USER_status+0x24>)
 800b3d8:	2201      	movs	r2, #1
 800b3da:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b3dc:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <USER_status+0x24>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	20000012 	.word	0x20000012

0800b3f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b404:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
 800b41e:	4603      	mov	r3, r0
 800b420:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b422:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	603a      	str	r2, [r7, #0]
 800b43a:	71fb      	strb	r3, [r7, #7]
 800b43c:	460b      	mov	r3, r1
 800b43e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
    return res;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
	...

0800b454 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	4a08      	ldr	r2, [pc, #32]	; (800b484 <disk_status+0x30>)
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	79fa      	ldrb	r2, [r7, #7]
 800b46c:	4905      	ldr	r1, [pc, #20]	; (800b484 <disk_status+0x30>)
 800b46e:	440a      	add	r2, r1
 800b470:	7b12      	ldrb	r2, [r2, #12]
 800b472:	4610      	mov	r0, r2
 800b474:	4798      	blx	r3
 800b476:	4603      	mov	r3, r0
 800b478:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	200012bc 	.word	0x200012bc

0800b488 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	4a0d      	ldr	r2, [pc, #52]	; (800b4d0 <disk_initialize+0x48>)
 800b49a:	5cd3      	ldrb	r3, [r2, r3]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d111      	bne.n	800b4c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b4a0:	79fb      	ldrb	r3, [r7, #7]
 800b4a2:	4a0b      	ldr	r2, [pc, #44]	; (800b4d0 <disk_initialize+0x48>)
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b4a8:	79fb      	ldrb	r3, [r7, #7]
 800b4aa:	4a09      	ldr	r2, [pc, #36]	; (800b4d0 <disk_initialize+0x48>)
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	79fa      	ldrb	r2, [r7, #7]
 800b4b6:	4906      	ldr	r1, [pc, #24]	; (800b4d0 <disk_initialize+0x48>)
 800b4b8:	440a      	add	r2, r1
 800b4ba:	7b12      	ldrb	r2, [r2, #12]
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4798      	blx	r3
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	200012bc 	.word	0x200012bc

0800b4d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b4d4:	b590      	push	{r4, r7, lr}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	607a      	str	r2, [r7, #4]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	4a0a      	ldr	r2, [pc, #40]	; (800b510 <disk_read+0x3c>)
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	689c      	ldr	r4, [r3, #8]
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4a07      	ldr	r2, [pc, #28]	; (800b510 <disk_read+0x3c>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	7b18      	ldrb	r0, [r3, #12]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	47a0      	blx	r4
 800b500:	4603      	mov	r3, r0
 800b502:	75fb      	strb	r3, [r7, #23]
  return res;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
}
 800b506:	4618      	mov	r0, r3
 800b508:	371c      	adds	r7, #28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd90      	pop	{r4, r7, pc}
 800b50e:	bf00      	nop
 800b510:	200012bc 	.word	0x200012bc

0800b514 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3301      	adds	r3, #1
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b524:	89fb      	ldrh	r3, [r7, #14]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	b21a      	sxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b21b      	sxth	r3, r3
 800b530:	4313      	orrs	r3, r2
 800b532:	b21b      	sxth	r3, r3
 800b534:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b536:	89fb      	ldrh	r3, [r7, #14]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3303      	adds	r3, #3
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	021b      	lsls	r3, r3, #8
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	3202      	adds	r2, #2
 800b55c:	7812      	ldrb	r2, [r2, #0]
 800b55e:	4313      	orrs	r3, r2
 800b560:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	021b      	lsls	r3, r3, #8
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	3201      	adds	r2, #1
 800b56a:	7812      	ldrb	r2, [r2, #0]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	7812      	ldrb	r2, [r2, #0]
 800b578:	4313      	orrs	r3, r2
 800b57a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b57c:	68fb      	ldr	r3, [r7, #12]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b58a:	b480      	push	{r7}
 800b58c:	b087      	sub	sp, #28
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00d      	beq.n	800b5c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	1c53      	adds	r3, r2, #1
 800b5a8:	613b      	str	r3, [r7, #16]
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	1c59      	adds	r1, r3, #1
 800b5ae:	6179      	str	r1, [r7, #20]
 800b5b0:	7812      	ldrb	r2, [r2, #0]
 800b5b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1f1      	bne.n	800b5a4 <mem_cpy+0x1a>
	}
}
 800b5c0:	bf00      	nop
 800b5c2:	371c      	adds	r7, #28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	617a      	str	r2, [r7, #20]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	b2d2      	uxtb	r2, r2
 800b5e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1f3      	bne.n	800b5dc <mem_set+0x10>
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	371c      	adds	r7, #28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b602:	b480      	push	{r7}
 800b604:	b089      	sub	sp, #36	; 0x24
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	60b9      	str	r1, [r7, #8]
 800b60c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	61fb      	str	r3, [r7, #28]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	61fa      	str	r2, [r7, #28]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	4619      	mov	r1, r3
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	61ba      	str	r2, [r7, #24]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	1acb      	subs	r3, r1, r3
 800b62e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3b01      	subs	r3, #1
 800b634:	607b      	str	r3, [r7, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <mem_cmp+0x40>
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d0eb      	beq.n	800b61a <mem_cmp+0x18>

	return r;
 800b642:	697b      	ldr	r3, [r7, #20]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3724      	adds	r7, #36	; 0x24
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b65a:	e002      	b.n	800b662 <chk_chr+0x12>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3301      	adds	r3, #1
 800b660:	607b      	str	r3, [r7, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d005      	beq.n	800b676 <chk_chr+0x26>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	4293      	cmp	r3, r2
 800b674:	d1f2      	bne.n	800b65c <chk_chr+0xc>
	return *str;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	781b      	ldrb	r3, [r3, #0]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d016      	beq.n	800b6cc <move_window+0x46>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d113      	bne.n	800b6cc <move_window+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7858      	ldrb	r0, [r3, #1]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	f7ff ff0f 	bl	800b4d4 <disk_read>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <move_window+0x40>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
	return res;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	3b02      	subs	r3, #2
 800b6e4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	3b02      	subs	r3, #2
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d301      	bcc.n	800b6f6 <clust2sect+0x20>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e008      	b.n	800b708 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	895b      	ldrh	r3, [r3, #10]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	fb03 f202 	mul.w	r2, r3, r2
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	4413      	add	r3, r2
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d904      	bls.n	800b734 <get_fat+0x20>
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d302      	bcc.n	800b73a <get_fat+0x26>
		val = 1;	/* Internal error */
 800b734:	2301      	movs	r3, #1
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	e08f      	b.n	800b85a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b73a:	f04f 33ff 	mov.w	r3, #4294967295
 800b73e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b03      	cmp	r3, #3
 800b746:	d062      	beq.n	800b80e <get_fat+0xfa>
 800b748:	2b03      	cmp	r3, #3
 800b74a:	dc7c      	bgt.n	800b846 <get_fat+0x132>
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d002      	beq.n	800b756 <get_fat+0x42>
 800b750:	2b02      	cmp	r3, #2
 800b752:	d042      	beq.n	800b7da <get_fat+0xc6>
 800b754:	e077      	b.n	800b846 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	085b      	lsrs	r3, r3, #1
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	69da      	ldr	r2, [r3, #28]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	0a5b      	lsrs	r3, r3, #9
 800b76c:	4413      	add	r3, r2
 800b76e:	4619      	mov	r1, r3
 800b770:	6938      	ldr	r0, [r7, #16]
 800b772:	f7ff ff88 	bl	800b686 <move_window>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d167      	bne.n	800b84c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	60fa      	str	r2, [r7, #12]
 800b782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	4413      	add	r3, r2
 800b78a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b78e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	69da      	ldr	r2, [r3, #28]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	0a5b      	lsrs	r3, r3, #9
 800b798:	4413      	add	r3, r2
 800b79a:	4619      	mov	r1, r3
 800b79c:	6938      	ldr	r0, [r7, #16]
 800b79e:	f7ff ff72 	bl	800b686 <move_window>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d153      	bne.n	800b850 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7b6:	021b      	lsls	r3, r3, #8
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <get_fat+0xbc>
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	091b      	lsrs	r3, r3, #4
 800b7ce:	e002      	b.n	800b7d6 <get_fat+0xc2>
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7d6:	617b      	str	r3, [r7, #20]
			break;
 800b7d8:	e03f      	b.n	800b85a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	69da      	ldr	r2, [r3, #28]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	0a1b      	lsrs	r3, r3, #8
 800b7e2:	4413      	add	r3, r2
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6938      	ldr	r0, [r7, #16]
 800b7e8:	f7ff ff4d 	bl	800b686 <move_window>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d130      	bne.n	800b854 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b800:	4413      	add	r3, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff fe86 	bl	800b514 <ld_word>
 800b808:	4603      	mov	r3, r0
 800b80a:	617b      	str	r3, [r7, #20]
			break;
 800b80c:	e025      	b.n	800b85a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	69da      	ldr	r2, [r3, #28]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	09db      	lsrs	r3, r3, #7
 800b816:	4413      	add	r3, r2
 800b818:	4619      	mov	r1, r3
 800b81a:	6938      	ldr	r0, [r7, #16]
 800b81c:	f7ff ff33 	bl	800b686 <move_window>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d118      	bne.n	800b858 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b834:	4413      	add	r3, r2
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff fe84 	bl	800b544 <ld_dword>
 800b83c:	4603      	mov	r3, r0
 800b83e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b842:	617b      	str	r3, [r7, #20]
			break;
 800b844:	e009      	b.n	800b85a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b846:	2301      	movs	r3, #1
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	e006      	b.n	800b85a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b84c:	bf00      	nop
 800b84e:	e004      	b.n	800b85a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b850:	bf00      	nop
 800b852:	e002      	b.n	800b85a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b854:	bf00      	nop
 800b856:	e000      	b.n	800b85a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b858:	bf00      	nop
		}
	}

	return val;
 800b85a:	697b      	ldr	r3, [r7, #20]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	3304      	adds	r3, #4
 800b87a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	0a5b      	lsrs	r3, r3, #9
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	8952      	ldrh	r2, [r2, #10]
 800b884:	fbb3 f3f2 	udiv	r3, r3, r2
 800b888:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	1d1a      	adds	r2, r3, #4
 800b88e:	613a      	str	r2, [r7, #16]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <clmt_clust+0x3a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	e010      	b.n	800b8c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d307      	bcc.n	800b8b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8b4:	e7e9      	b.n	800b88a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	4413      	add	r3, r2
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	371c      	adds	r7, #28
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e2:	d204      	bcs.n	800b8ee <dir_sdi+0x22>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	f003 031f 	and.w	r3, r3, #31
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e063      	b.n	800b9ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <dir_sdi+0x46>
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d902      	bls.n	800b912 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10c      	bne.n	800b932 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	095b      	lsrs	r3, r3, #5
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	8912      	ldrh	r2, [r2, #8]
 800b920:	4293      	cmp	r3, r2
 800b922:	d301      	bcc.n	800b928 <dir_sdi+0x5c>
 800b924:	2302      	movs	r3, #2
 800b926:	e048      	b.n	800b9ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	6a1a      	ldr	r2, [r3, #32]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	619a      	str	r2, [r3, #24]
 800b930:	e029      	b.n	800b986 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	895b      	ldrh	r3, [r3, #10]
 800b936:	025b      	lsls	r3, r3, #9
 800b938:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b93a:	e019      	b.n	800b970 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6979      	ldr	r1, [r7, #20]
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff fee7 	bl	800b714 <get_fat>
 800b946:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94e:	d101      	bne.n	800b954 <dir_sdi+0x88>
 800b950:	2301      	movs	r3, #1
 800b952:	e032      	b.n	800b9ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d904      	bls.n	800b964 <dir_sdi+0x98>
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	d301      	bcc.n	800b968 <dir_sdi+0x9c>
 800b964:	2302      	movs	r3, #2
 800b966:	e028      	b.n	800b9ba <dir_sdi+0xee>
			ofs -= csz;
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d2e1      	bcs.n	800b93c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b978:	6979      	ldr	r1, [r7, #20]
 800b97a:	6938      	ldr	r0, [r7, #16]
 800b97c:	f7ff feab 	bl	800b6d6 <clust2sect>
 800b980:	4602      	mov	r2, r0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <dir_sdi+0xcc>
 800b994:	2302      	movs	r3, #2
 800b996:	e010      	b.n	800b9ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699a      	ldr	r2, [r3, #24]
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	0a5b      	lsrs	r3, r3, #9
 800b9a0:	441a      	add	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	441a      	add	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b086      	sub	sp, #24
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	617b      	str	r3, [r7, #20]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	3320      	adds	r3, #32
 800b9d8:	613b      	str	r3, [r7, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <dir_next+0x28>
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9e8:	d301      	bcc.n	800b9ee <dir_next+0x2c>
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	e05a      	b.n	800baa4 <dir_next+0xe2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d148      	bne.n	800ba8a <dir_next+0xc8>
		dp->sect++;				/* Next sector */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <dir_next+0x5e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	095b      	lsrs	r3, r3, #5
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	8912      	ldrh	r2, [r2, #8]
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d339      	bcc.n	800ba8a <dir_next+0xc8>
				dp->sect = 0; return FR_NO_FILE;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	619a      	str	r2, [r3, #24]
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	e041      	b.n	800baa4 <dir_next+0xe2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	0a5b      	lsrs	r3, r3, #9
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	8952      	ldrh	r2, [r2, #10]
 800ba28:	3a01      	subs	r2, #1
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d12c      	bne.n	800ba8a <dir_next+0xc8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7ff fe6b 	bl	800b714 <get_fat>
 800ba3e:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d801      	bhi.n	800ba4a <dir_next+0x88>
 800ba46:	2302      	movs	r3, #2
 800ba48:	e02c      	b.n	800baa4 <dir_next+0xe2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba50:	d101      	bne.n	800ba56 <dir_next+0x94>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e026      	b.n	800baa4 <dir_next+0xe2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d30a      	bcc.n	800ba76 <dir_next+0xb4>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <dir_next+0xaa>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	619a      	str	r2, [r3, #24]
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	619a      	str	r2, [r3, #24]
 800ba72:	2304      	movs	r3, #4
 800ba74:	e016      	b.n	800baa4 <dir_next+0xe2>
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 800ba7c:	68f9      	ldr	r1, [r7, #12]
 800ba7e:	6978      	ldr	r0, [r7, #20]
 800ba80:	f7ff fe29 	bl	800b6d6 <clust2sect>
 800ba84:	4602      	mov	r2, r0
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9c:	441a      	add	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	331a      	adds	r3, #26
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fd2a 	bl	800b514 <ld_word>
 800bac0:	4603      	mov	r3, r0
 800bac2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d109      	bne.n	800bae0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	3314      	adds	r3, #20
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff fd1f 	bl	800b514 <ld_word>
 800bad6:	4603      	mov	r3, r0
 800bad8:	041b      	lsls	r3, r3, #16
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	4313      	orrs	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bae0:	68fb      	ldr	r3, [r7, #12]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800baec:	b590      	push	{r4, r7, lr}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	331a      	adds	r3, #26
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fd0a 	bl	800b514 <ld_word>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <cmp_lfn+0x1e>
 800bb06:	2300      	movs	r3, #0
 800bb08:	e059      	b.n	800bbbe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb12:	1e5a      	subs	r2, r3, #1
 800bb14:	4613      	mov	r3, r2
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	4413      	add	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb20:	2301      	movs	r3, #1
 800bb22:	81fb      	strh	r3, [r7, #14]
 800bb24:	2300      	movs	r3, #0
 800bb26:	613b      	str	r3, [r7, #16]
 800bb28:	e033      	b.n	800bb92 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb2a:	4a27      	ldr	r2, [pc, #156]	; (800bbc8 <cmp_lfn+0xdc>)
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	4413      	add	r3, r2
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	4413      	add	r3, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fceb 	bl	800b514 <ld_word>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bb42:	89fb      	ldrh	r3, [r7, #14]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d01a      	beq.n	800bb7e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2b3f      	cmp	r3, #63	; 0x3f
 800bb4c:	d812      	bhi.n	800bb74 <cmp_lfn+0x88>
 800bb4e:	89bb      	ldrh	r3, [r7, #12]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f001 f9f1 	bl	800cf38 <ff_wtoupper>
 800bb56:	4603      	mov	r3, r0
 800bb58:	461c      	mov	r4, r3
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	617a      	str	r2, [r7, #20]
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	4413      	add	r3, r2
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 f9e5 	bl	800cf38 <ff_wtoupper>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d001      	beq.n	800bb78 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bb74:	2300      	movs	r3, #0
 800bb76:	e022      	b.n	800bbbe <cmp_lfn+0xd2>
			}
			wc = uc;
 800bb78:	89bb      	ldrh	r3, [r7, #12]
 800bb7a:	81fb      	strh	r3, [r7, #14]
 800bb7c:	e006      	b.n	800bb8c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb7e:	89bb      	ldrh	r3, [r7, #12]
 800bb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d001      	beq.n	800bb8c <cmp_lfn+0xa0>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e018      	b.n	800bbbe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b0c      	cmp	r3, #12
 800bb96:	d9c8      	bls.n	800bb2a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00b      	beq.n	800bbbc <cmp_lfn+0xd0>
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d008      	beq.n	800bbbc <cmp_lfn+0xd0>
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <cmp_lfn+0xd0>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e000      	b.n	800bbbe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bbbc:	2301      	movs	r3, #1
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd90      	pop	{r4, r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	08019bf8 	.word	0x08019bf8

0800bbcc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bbd8:	230b      	movs	r3, #11
 800bbda:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	0852      	lsrs	r2, r2, #1
 800bbe2:	01db      	lsls	r3, r3, #7
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	1c59      	adds	r1, r3, #1
 800bbec:	6079      	str	r1, [r7, #4]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	60bb      	str	r3, [r7, #8]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1ed      	bne.n	800bbdc <sum_sfn+0x10>
	return sum;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b086      	sub	sp, #24
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7ff fe54 	bl	800b8cc <dir_sdi>
 800bc24:	4603      	mov	r3, r0
 800bc26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <dir_find+0x24>
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	e0a9      	b.n	800bd86 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc32:	23ff      	movs	r3, #255	; 0xff
 800bc34:	753b      	strb	r3, [r7, #20]
 800bc36:	7d3b      	ldrb	r3, [r7, #20]
 800bc38:	757b      	strb	r3, [r7, #21]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	4619      	mov	r1, r3
 800bc48:	6938      	ldr	r0, [r7, #16]
 800bc4a:	f7ff fd1c 	bl	800b686 <move_window>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 8090 	bne.w	800bd7a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc62:	7dbb      	ldrb	r3, [r7, #22]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d102      	bne.n	800bc6e <dir_find+0x60>
 800bc68:	2304      	movs	r3, #4
 800bc6a:	75fb      	strb	r3, [r7, #23]
 800bc6c:	e08a      	b.n	800bd84 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	330b      	adds	r3, #11
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc7a:	73fb      	strb	r3, [r7, #15]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7bfa      	ldrb	r2, [r7, #15]
 800bc80:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bc82:	7dbb      	ldrb	r3, [r7, #22]
 800bc84:	2be5      	cmp	r3, #229	; 0xe5
 800bc86:	d007      	beq.n	800bc98 <dir_find+0x8a>
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d009      	beq.n	800bca6 <dir_find+0x98>
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	2b0f      	cmp	r3, #15
 800bc96:	d006      	beq.n	800bca6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc98:	23ff      	movs	r3, #255	; 0xff
 800bc9a:	757b      	strb	r3, [r7, #21]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bca2:	62da      	str	r2, [r3, #44]	; 0x2c
 800bca4:	e05e      	b.n	800bd64 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b0f      	cmp	r3, #15
 800bcaa:	d136      	bne.n	800bd1a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bcb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d154      	bne.n	800bd64 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bcba:	7dbb      	ldrb	r3, [r7, #22]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00d      	beq.n	800bce0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	7b5b      	ldrb	r3, [r3, #13]
 800bcca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bccc:	7dbb      	ldrb	r3, [r7, #22]
 800bcce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd2:	75bb      	strb	r3, [r7, #22]
 800bcd4:	7dbb      	ldrb	r3, [r7, #22]
 800bcd6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691a      	ldr	r2, [r3, #16]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bce0:	7dba      	ldrb	r2, [r7, #22]
 800bce2:	7d7b      	ldrb	r3, [r7, #21]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d115      	bne.n	800bd14 <dir_find+0x106>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	330d      	adds	r3, #13
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	7d3a      	ldrb	r2, [r7, #20]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d10e      	bne.n	800bd14 <dir_find+0x106>
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7ff fef3 	bl	800baec <cmp_lfn>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d003      	beq.n	800bd14 <dir_find+0x106>
 800bd0c:	7d7b      	ldrb	r3, [r7, #21]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	e000      	b.n	800bd16 <dir_find+0x108>
 800bd14:	23ff      	movs	r3, #255	; 0xff
 800bd16:	757b      	strb	r3, [r7, #21]
 800bd18:	e024      	b.n	800bd64 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd1a:	7d7b      	ldrb	r3, [r7, #21]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d109      	bne.n	800bd34 <dir_find+0x126>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff ff51 	bl	800bbcc <sum_sfn>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	7d3b      	ldrb	r3, [r7, #20]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d024      	beq.n	800bd7e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd3a:	f003 0301 	and.w	r3, r3, #1
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <dir_find+0x14a>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	69d8      	ldr	r0, [r3, #28]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	3320      	adds	r3, #32
 800bd4a:	220b      	movs	r2, #11
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	f7ff fc58 	bl	800b602 <mem_cmp>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d014      	beq.n	800bd82 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd58:	23ff      	movs	r3, #255	; 0xff
 800bd5a:	757b      	strb	r3, [r7, #21]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd62:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd64:	2100      	movs	r1, #0
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7ff fe2b 	bl	800b9c2 <dir_next>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f43f af65 	beq.w	800bc42 <dir_find+0x34>
 800bd78:	e004      	b.n	800bd84 <dir_find+0x176>
		if (res != FR_OK) break;
 800bd7a:	bf00      	nop
 800bd7c:	e002      	b.n	800bd84 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd7e:	bf00      	nop
 800bd80:	e000      	b.n	800bd84 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd82:	bf00      	nop

	return res;
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	613b      	str	r3, [r7, #16]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	61ba      	str	r2, [r7, #24]
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	4413      	add	r3, r2
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bdbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc0:	2b1f      	cmp	r3, #31
 800bdc2:	d940      	bls.n	800be46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bdc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc6:	2b2f      	cmp	r3, #47	; 0x2f
 800bdc8:	d006      	beq.n	800bdd8 <create_name+0x48>
 800bdca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdcc:	2b5c      	cmp	r3, #92	; 0x5c
 800bdce:	d110      	bne.n	800bdf2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdd0:	e002      	b.n	800bdd8 <create_name+0x48>
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	61bb      	str	r3, [r7, #24]
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	4413      	add	r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b2f      	cmp	r3, #47	; 0x2f
 800bde2:	d0f6      	beq.n	800bdd2 <create_name+0x42>
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	4413      	add	r3, r2
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b5c      	cmp	r3, #92	; 0x5c
 800bdee:	d0f0      	beq.n	800bdd2 <create_name+0x42>
			break;
 800bdf0:	e02a      	b.n	800be48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b3f      	cmp	r3, #63	; 0x3f
 800bdf6:	d901      	bls.n	800bdfc <create_name+0x6c>
 800bdf8:	2306      	movs	r3, #6
 800bdfa:	e17d      	b.n	800c0f8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bdfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800be02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be04:	2101      	movs	r1, #1
 800be06:	4618      	mov	r0, r3
 800be08:	f001 f85a 	bl	800cec0 <ff_convert>
 800be0c:	4603      	mov	r3, r0
 800be0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800be10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <create_name+0x8a>
 800be16:	2306      	movs	r3, #6
 800be18:	e16e      	b.n	800c0f8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800be1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be1c:	2b7f      	cmp	r3, #127	; 0x7f
 800be1e:	d809      	bhi.n	800be34 <create_name+0xa4>
 800be20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be22:	4619      	mov	r1, r3
 800be24:	488d      	ldr	r0, [pc, #564]	; (800c05c <create_name+0x2cc>)
 800be26:	f7ff fc13 	bl	800b650 <chk_chr>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <create_name+0xa4>
 800be30:	2306      	movs	r3, #6
 800be32:	e161      	b.n	800c0f8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	617a      	str	r2, [r7, #20]
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800be44:	e7b4      	b.n	800bdb0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800be46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	441a      	add	r2, r3
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be54:	2b1f      	cmp	r3, #31
 800be56:	d801      	bhi.n	800be5c <create_name+0xcc>
 800be58:	2304      	movs	r3, #4
 800be5a:	e000      	b.n	800be5e <create_name+0xce>
 800be5c:	2300      	movs	r3, #0
 800be5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be62:	e011      	b.n	800be88 <create_name+0xf8>
		w = lfn[di - 1];
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be6a:	3b01      	subs	r3, #1
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800be76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be78:	2b20      	cmp	r3, #32
 800be7a:	d002      	beq.n	800be82 <create_name+0xf2>
 800be7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be7e:	2b2e      	cmp	r3, #46	; 0x2e
 800be80:	d106      	bne.n	800be90 <create_name+0x100>
		di--;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	3b01      	subs	r3, #1
 800be86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1ea      	bne.n	800be64 <create_name+0xd4>
 800be8e:	e000      	b.n	800be92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800be90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	2200      	movs	r2, #0
 800be9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <create_name+0x118>
 800bea4:	2306      	movs	r3, #6
 800bea6:	e127      	b.n	800c0f8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3320      	adds	r3, #32
 800beac:	220b      	movs	r2, #11
 800beae:	2120      	movs	r1, #32
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fb8b 	bl	800b5cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800beb6:	2300      	movs	r3, #0
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	e002      	b.n	800bec2 <create_name+0x132>
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	3301      	adds	r3, #1
 800bec0:	61bb      	str	r3, [r7, #24]
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	4413      	add	r3, r2
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	2b20      	cmp	r3, #32
 800bece:	d0f5      	beq.n	800bebc <create_name+0x12c>
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	2b2e      	cmp	r3, #46	; 0x2e
 800bedc:	d0ee      	beq.n	800bebc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <create_name+0x168>
 800bee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bee8:	f043 0303 	orr.w	r3, r3, #3
 800beec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bef0:	e002      	b.n	800bef8 <create_name+0x168>
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d009      	beq.n	800bf12 <create_name+0x182>
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf04:	3b01      	subs	r3, #1
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	881b      	ldrh	r3, [r3, #0]
 800bf0e:	2b2e      	cmp	r3, #46	; 0x2e
 800bf10:	d1ef      	bne.n	800bef2 <create_name+0x162>

	i = b = 0; ni = 8;
 800bf12:	2300      	movs	r3, #0
 800bf14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf18:	2300      	movs	r3, #0
 800bf1a:	623b      	str	r3, [r7, #32]
 800bf1c:	2308      	movs	r3, #8
 800bf1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	61ba      	str	r2, [r7, #24]
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bf30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 8090 	beq.w	800c058 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bf38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf3a:	2b20      	cmp	r3, #32
 800bf3c:	d006      	beq.n	800bf4c <create_name+0x1bc>
 800bf3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf40:	2b2e      	cmp	r3, #46	; 0x2e
 800bf42:	d10a      	bne.n	800bf5a <create_name+0x1ca>
 800bf44:	69ba      	ldr	r2, [r7, #24]
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d006      	beq.n	800bf5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bf4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf50:	f043 0303 	orr.w	r3, r3, #3
 800bf54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf58:	e07d      	b.n	800c056 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bf5a:	6a3a      	ldr	r2, [r7, #32]
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d203      	bcs.n	800bf6a <create_name+0x1da>
 800bf62:	69ba      	ldr	r2, [r7, #24]
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d123      	bne.n	800bfb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	2b0b      	cmp	r3, #11
 800bf6e:	d106      	bne.n	800bf7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bf70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf74:	f043 0303 	orr.w	r3, r3, #3
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf7c:	e075      	b.n	800c06a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d005      	beq.n	800bf92 <create_name+0x202>
 800bf86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8a:	f043 0303 	orr.w	r3, r3, #3
 800bf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bf92:	69ba      	ldr	r2, [r7, #24]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d866      	bhi.n	800c068 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	2308      	movs	r3, #8
 800bfa0:	623b      	str	r3, [r7, #32]
 800bfa2:	230b      	movs	r3, #11
 800bfa4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bfa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfb0:	e051      	b.n	800c056 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bfb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb4:	2b7f      	cmp	r3, #127	; 0x7f
 800bfb6:	d914      	bls.n	800bfe2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bfb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfba:	2100      	movs	r1, #0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 ff7f 	bl	800cec0 <ff_convert>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bfc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d004      	beq.n	800bfd6 <create_name+0x246>
 800bfcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfce:	3b80      	subs	r3, #128	; 0x80
 800bfd0:	4a23      	ldr	r2, [pc, #140]	; (800c060 <create_name+0x2d0>)
 800bfd2:	5cd3      	ldrb	r3, [r2, r3]
 800bfd4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfda:	f043 0302 	orr.w	r3, r3, #2
 800bfde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bfe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d007      	beq.n	800bff8 <create_name+0x268>
 800bfe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfea:	4619      	mov	r1, r3
 800bfec:	481d      	ldr	r0, [pc, #116]	; (800c064 <create_name+0x2d4>)
 800bfee:	f7ff fb2f 	bl	800b650 <chk_chr>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bff8:	235f      	movs	r3, #95	; 0x5f
 800bffa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c000:	f043 0303 	orr.w	r3, r3, #3
 800c004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c008:	e01b      	b.n	800c042 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c00a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c00c:	2b40      	cmp	r3, #64	; 0x40
 800c00e:	d909      	bls.n	800c024 <create_name+0x294>
 800c010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c012:	2b5a      	cmp	r3, #90	; 0x5a
 800c014:	d806      	bhi.n	800c024 <create_name+0x294>
					b |= 2;
 800c016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c01a:	f043 0302 	orr.w	r3, r3, #2
 800c01e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c022:	e00e      	b.n	800c042 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c026:	2b60      	cmp	r3, #96	; 0x60
 800c028:	d90b      	bls.n	800c042 <create_name+0x2b2>
 800c02a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c02c:	2b7a      	cmp	r3, #122	; 0x7a
 800c02e:	d808      	bhi.n	800c042 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c034:	f043 0301 	orr.w	r3, r3, #1
 800c038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c03e:	3b20      	subs	r3, #32
 800c040:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	623a      	str	r2, [r7, #32]
 800c048:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c04a:	b2d1      	uxtb	r1, r2
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	4413      	add	r3, r2
 800c050:	460a      	mov	r2, r1
 800c052:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 800c056:	e763      	b.n	800bf20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c058:	bf00      	nop
 800c05a:	e006      	b.n	800c06a <create_name+0x2da>
 800c05c:	08019474 	.word	0x08019474
 800c060:	08019b78 	.word	0x08019b78
 800c064:	08019480 	.word	0x08019480
			if (si > di) break;			/* No extension */
 800c068:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c070:	2be5      	cmp	r3, #229	; 0xe5
 800c072:	d103      	bne.n	800c07c <create_name+0x2ec>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2205      	movs	r2, #5
 800c078:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	2b08      	cmp	r3, #8
 800c080:	d104      	bne.n	800c08c <create_name+0x2fc>
 800c082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c08c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c090:	f003 030c 	and.w	r3, r3, #12
 800c094:	2b0c      	cmp	r3, #12
 800c096:	d005      	beq.n	800c0a4 <create_name+0x314>
 800c098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c09c:	f003 0303 	and.w	r3, r3, #3
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d105      	bne.n	800c0b0 <create_name+0x320>
 800c0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a8:	f043 0302 	orr.w	r3, r3, #2
 800c0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0b4:	f003 0302 	and.w	r3, r3, #2
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d117      	bne.n	800c0ec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c0bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0c0:	f003 0303 	and.w	r3, r3, #3
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d105      	bne.n	800c0d4 <create_name+0x344>
 800c0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0cc:	f043 0310 	orr.w	r3, r3, #16
 800c0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c0d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0d8:	f003 030c 	and.w	r3, r3, #12
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	d105      	bne.n	800c0ec <create_name+0x35c>
 800c0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e4:	f043 0308 	orr.w	r3, r3, #8
 800c0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c0f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 800c0f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3728      	adds	r7, #40	; 0x28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c114:	e002      	b.n	800c11c <follow_path+0x1c>
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	3301      	adds	r3, #1
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b2f      	cmp	r3, #47	; 0x2f
 800c122:	d0f8      	beq.n	800c116 <follow_path+0x16>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b5c      	cmp	r3, #92	; 0x5c
 800c12a:	d0f4      	beq.n	800c116 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2200      	movs	r2, #0
 800c130:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b1f      	cmp	r3, #31
 800c138:	d80a      	bhi.n	800c150 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2280      	movs	r2, #128	; 0x80
 800c13e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800c142:	2100      	movs	r1, #0
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fbc1 	bl	800b8cc <dir_sdi>
 800c14a:	4603      	mov	r3, r0
 800c14c:	75fb      	strb	r3, [r7, #23]
 800c14e:	e043      	b.n	800c1d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c150:	463b      	mov	r3, r7
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff fe1b 	bl	800bd90 <create_name>
 800c15a:	4603      	mov	r3, r0
 800c15c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d134      	bne.n	800c1ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff fd52 	bl	800bc0e <dir_find>
 800c16a:	4603      	mov	r3, r0
 800c16c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c174:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c176:	7dfb      	ldrb	r3, [r7, #23]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00a      	beq.n	800c192 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d127      	bne.n	800c1d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c182:	7afb      	ldrb	r3, [r7, #11]
 800c184:	f003 0304 	and.w	r3, r3, #4
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d122      	bne.n	800c1d2 <follow_path+0xd2>
 800c18c:	2305      	movs	r3, #5
 800c18e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c190:	e01f      	b.n	800c1d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	f003 0304 	and.w	r3, r3, #4
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d11c      	bne.n	800c1d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	799b      	ldrb	r3, [r3, #6]
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d102      	bne.n	800c1ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c1a8:	2305      	movs	r3, #5
 800c1aa:	75fb      	strb	r3, [r7, #23]
 800c1ac:	e014      	b.n	800c1d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1bc:	4413      	add	r3, r2
 800c1be:	4619      	mov	r1, r3
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f7ff fc73 	bl	800baac <ld_clust>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1cc:	e7c0      	b.n	800c150 <follow_path+0x50>
			if (res != FR_OK) break;
 800c1ce:	bf00      	nop
 800c1d0:	e002      	b.n	800c1d8 <follow_path+0xd8>
				break;
 800c1d2:	bf00      	nop
 800c1d4:	e000      	b.n	800c1d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1d6:	bf00      	nop
			}
		}
	}

	return res;
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b087      	sub	sp, #28
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d031      	beq.n	800c25c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	617b      	str	r3, [r7, #20]
 800c1fe:	e002      	b.n	800c206 <get_ldnumber+0x24>
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	3301      	adds	r3, #1
 800c204:	617b      	str	r3, [r7, #20]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2b1f      	cmp	r3, #31
 800c20c:	d903      	bls.n	800c216 <get_ldnumber+0x34>
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	2b3a      	cmp	r3, #58	; 0x3a
 800c214:	d1f4      	bne.n	800c200 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	2b3a      	cmp	r3, #58	; 0x3a
 800c21c:	d11c      	bne.n	800c258 <get_ldnumber+0x76>
			tp = *path;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	60fa      	str	r2, [r7, #12]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	3b30      	subs	r3, #48	; 0x30
 800c22e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b09      	cmp	r3, #9
 800c234:	d80e      	bhi.n	800c254 <get_ldnumber+0x72>
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d10a      	bne.n	800c254 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d807      	bhi.n	800c254 <get_ldnumber+0x72>
					vol = (int)i;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	3301      	adds	r3, #1
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	e002      	b.n	800c25e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c258:	2300      	movs	r3, #0
 800c25a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c25c:	693b      	ldr	r3, [r7, #16]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
	...

0800c26c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	70da      	strb	r2, [r3, #3]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f04f 32ff 	mov.w	r2, #4294967295
 800c282:	629a      	str	r2, [r3, #40]	; 0x28
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff f9fd 	bl	800b686 <move_window>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d001      	beq.n	800c296 <check_fs+0x2a>
 800c292:	2304      	movs	r3, #4
 800c294:	e038      	b.n	800c308 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	332c      	adds	r3, #44	; 0x2c
 800c29a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff f938 	bl	800b514 <ld_word>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d001      	beq.n	800c2b4 <check_fs+0x48>
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e029      	b.n	800c308 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2ba:	2be9      	cmp	r3, #233	; 0xe9
 800c2bc:	d009      	beq.n	800c2d2 <check_fs+0x66>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2c4:	2beb      	cmp	r3, #235	; 0xeb
 800c2c6:	d11e      	bne.n	800c306 <check_fs+0x9a>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c2ce:	2b90      	cmp	r3, #144	; 0x90
 800c2d0:	d119      	bne.n	800c306 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	332c      	adds	r3, #44	; 0x2c
 800c2d6:	3336      	adds	r3, #54	; 0x36
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff f933 	bl	800b544 <ld_dword>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c2e4:	4a0a      	ldr	r2, [pc, #40]	; (800c310 <check_fs+0xa4>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d101      	bne.n	800c2ee <check_fs+0x82>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e00c      	b.n	800c308 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	332c      	adds	r3, #44	; 0x2c
 800c2f2:	3352      	adds	r3, #82	; 0x52
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff f925 	bl	800b544 <ld_dword>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4a05      	ldr	r2, [pc, #20]	; (800c314 <check_fs+0xa8>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d101      	bne.n	800c306 <check_fs+0x9a>
 800c302:	2300      	movs	r3, #0
 800c304:	e000      	b.n	800c308 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c306:	2302      	movs	r3, #2
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	00544146 	.word	0x00544146
 800c314:	33544146 	.word	0x33544146

0800c318 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b096      	sub	sp, #88	; 0x58
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4613      	mov	r3, r2
 800c324:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f7ff ff58 	bl	800c1e2 <get_ldnumber>
 800c332:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c336:	2b00      	cmp	r3, #0
 800c338:	da01      	bge.n	800c33e <find_volume+0x26>
 800c33a:	230b      	movs	r3, #11
 800c33c:	e1ba      	b.n	800c6b4 <find_volume+0x39c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c33e:	4a9c      	ldr	r2, [pc, #624]	; (800c5b0 <find_volume+0x298>)
 800c340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c346:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <find_volume+0x3a>
 800c34e:	230c      	movs	r3, #12
 800c350:	e1b0      	b.n	800c6b4 <find_volume+0x39c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c356:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	f023 0301 	bic.w	r3, r3, #1
 800c35e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00f      	beq.n	800c388 <find_volume+0x70>
		stat = disk_status(fs->drv);
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	785b      	ldrb	r3, [r3, #1]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff f871 	bl	800b454 <disk_status>
 800c372:	4603      	mov	r3, r0
 800c374:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c378:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
 800c384:	2300      	movs	r3, #0
 800c386:	e195      	b.n	800c6b4 <find_volume+0x39c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	2200      	movs	r2, #0
 800c38c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c390:	b2da      	uxtb	r2, r3
 800c392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c394:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	785b      	ldrb	r3, [r3, #1]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff f874 	bl	800b488 <disk_initialize>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c3a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <find_volume+0x9e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c3b2:	2303      	movs	r3, #3
 800c3b4:	e17e      	b.n	800c6b4 <find_volume+0x39c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c3ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c3be:	f7ff ff55 	bl	800c26c <check_fs>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d149      	bne.n	800c464 <find_volume+0x14c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	643b      	str	r3, [r7, #64]	; 0x40
 800c3d4:	e01e      	b.n	800c414 <find_volume+0xfc>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3de:	011b      	lsls	r3, r3, #4
 800c3e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c3e4:	4413      	add	r3, r2
 800c3e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d006      	beq.n	800c400 <find_volume+0xe8>
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff f8a4 	bl	800b544 <ld_dword>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	e000      	b.n	800c402 <find_volume+0xea>
 800c400:	2200      	movs	r2, #0
 800c402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	3358      	adds	r3, #88	; 0x58
 800c408:	443b      	add	r3, r7
 800c40a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c410:	3301      	adds	r3, #1
 800c412:	643b      	str	r3, [r7, #64]	; 0x40
 800c414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c416:	2b03      	cmp	r3, #3
 800c418:	d9dd      	bls.n	800c3d6 <find_volume+0xbe>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c41a:	2300      	movs	r3, #0
 800c41c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c420:	2b00      	cmp	r3, #0
 800c422:	d002      	beq.n	800c42a <find_volume+0x112>
 800c424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c426:	3b01      	subs	r3, #1
 800c428:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	3358      	adds	r3, #88	; 0x58
 800c430:	443b      	add	r3, r7
 800c432:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c436:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d005      	beq.n	800c44a <find_volume+0x132>
 800c43e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c442:	f7ff ff13 	bl	800c26c <check_fs>
 800c446:	4603      	mov	r3, r0
 800c448:	e000      	b.n	800c44c <find_volume+0x134>
 800c44a:	2303      	movs	r3, #3
 800c44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c454:	2b01      	cmp	r3, #1
 800c456:	d905      	bls.n	800c464 <find_volume+0x14c>
 800c458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45a:	3301      	adds	r3, #1
 800c45c:	643b      	str	r3, [r7, #64]	; 0x40
 800c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c460:	2b03      	cmp	r3, #3
 800c462:	d9e2      	bls.n	800c42a <find_volume+0x112>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d101      	bne.n	800c470 <find_volume+0x158>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e121      	b.n	800c6b4 <find_volume+0x39c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c474:	2b01      	cmp	r3, #1
 800c476:	d901      	bls.n	800c47c <find_volume+0x164>
 800c478:	230d      	movs	r3, #13
 800c47a:	e11b      	b.n	800c6b4 <find_volume+0x39c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	332c      	adds	r3, #44	; 0x2c
 800c480:	330b      	adds	r3, #11
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff f846 	bl	800b514 <ld_word>
 800c488:	4603      	mov	r3, r0
 800c48a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c48e:	d001      	beq.n	800c494 <find_volume+0x17c>
 800c490:	230d      	movs	r3, #13
 800c492:	e10f      	b.n	800c6b4 <find_volume+0x39c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	332c      	adds	r3, #44	; 0x2c
 800c498:	3316      	adds	r3, #22
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7ff f83a 	bl	800b514 <ld_word>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <find_volume+0x1a0>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	332c      	adds	r3, #44	; 0x2c
 800c4ae:	3324      	adds	r3, #36	; 0x24
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff f847 	bl	800b544 <ld_dword>
 800c4b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4bc:	615a      	str	r2, [r3, #20]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ca:	789b      	ldrb	r3, [r3, #2]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d005      	beq.n	800c4dc <find_volume+0x1c4>
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	789b      	ldrb	r3, [r3, #2]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d001      	beq.n	800c4dc <find_volume+0x1c4>
 800c4d8:	230d      	movs	r3, #13
 800c4da:	e0eb      	b.n	800c6b4 <find_volume+0x39c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	789b      	ldrb	r3, [r3, #2]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e4:	fb02 f303 	mul.w	r3, r2, r3
 800c4e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	895b      	ldrh	r3, [r3, #10]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d008      	beq.n	800c510 <find_volume+0x1f8>
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	895b      	ldrh	r3, [r3, #10]
 800c502:	461a      	mov	r2, r3
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	895b      	ldrh	r3, [r3, #10]
 800c508:	3b01      	subs	r3, #1
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <find_volume+0x1fc>
 800c510:	230d      	movs	r3, #13
 800c512:	e0cf      	b.n	800c6b4 <find_volume+0x39c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c516:	332c      	adds	r3, #44	; 0x2c
 800c518:	3311      	adds	r3, #17
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fffa 	bl	800b514 <ld_word>
 800c520:	4603      	mov	r3, r0
 800c522:	461a      	mov	r2, r3
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	891b      	ldrh	r3, [r3, #8]
 800c52c:	f003 030f 	and.w	r3, r3, #15
 800c530:	b29b      	uxth	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <find_volume+0x222>
 800c536:	230d      	movs	r3, #13
 800c538:	e0bc      	b.n	800c6b4 <find_volume+0x39c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	332c      	adds	r3, #44	; 0x2c
 800c53e:	3313      	adds	r3, #19
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe ffe7 	bl	800b514 <ld_word>
 800c546:	4603      	mov	r3, r0
 800c548:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d106      	bne.n	800c55e <find_volume+0x246>
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	332c      	adds	r3, #44	; 0x2c
 800c554:	3320      	adds	r3, #32
 800c556:	4618      	mov	r0, r3
 800c558:	f7fe fff4 	bl	800b544 <ld_dword>
 800c55c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	332c      	adds	r3, #44	; 0x2c
 800c562:	330e      	adds	r3, #14
 800c564:	4618      	mov	r0, r3
 800c566:	f7fe ffd5 	bl	800b514 <ld_word>
 800c56a:	4603      	mov	r3, r0
 800c56c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c56e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <find_volume+0x260>
 800c574:	230d      	movs	r3, #13
 800c576:	e09d      	b.n	800c6b4 <find_volume+0x39c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c578:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57c:	4413      	add	r3, r2
 800c57e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c580:	8912      	ldrh	r2, [r2, #8]
 800c582:	0912      	lsrs	r2, r2, #4
 800c584:	b292      	uxth	r2, r2
 800c586:	4413      	add	r3, r2
 800c588:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	429a      	cmp	r2, r3
 800c590:	d201      	bcs.n	800c596 <find_volume+0x27e>
 800c592:	230d      	movs	r3, #13
 800c594:	e08e      	b.n	800c6b4 <find_volume+0x39c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c59e:	8952      	ldrh	r2, [r2, #10]
 800c5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d103      	bne.n	800c5b4 <find_volume+0x29c>
 800c5ac:	230d      	movs	r3, #13
 800c5ae:	e081      	b.n	800c6b4 <find_volume+0x39c>
 800c5b0:	200012b0 	.word	0x200012b0
		fmt = FS_FAT32;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d802      	bhi.n	800c5ca <find_volume+0x2b2>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d802      	bhi.n	800c5da <find_volume+0x2c2>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	1c9a      	adds	r2, r3, #2
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	611a      	str	r2, [r3, #16]
		fs->volbase = bsect;							/* Volume start sector */
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5e6:	619a      	str	r2, [r3, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c5e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ec:	441a      	add	r2, r3
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	61da      	str	r2, [r3, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800c5f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f6:	441a      	add	r2, r3
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	625a      	str	r2, [r3, #36]	; 0x24
		if (fmt == FS_FAT32) {
 800c5fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c600:	2b03      	cmp	r3, #3
 800c602:	d11e      	bne.n	800c642 <find_volume+0x32a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	332c      	adds	r3, #44	; 0x2c
 800c608:	332a      	adds	r3, #42	; 0x2a
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe ff82 	bl	800b514 <ld_word>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <find_volume+0x302>
 800c616:	230d      	movs	r3, #13
 800c618:	e04c      	b.n	800c6b4 <find_volume+0x39c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	891b      	ldrh	r3, [r3, #8]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <find_volume+0x30e>
 800c622:	230d      	movs	r3, #13
 800c624:	e046      	b.n	800c6b4 <find_volume+0x39c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	332c      	adds	r3, #44	; 0x2c
 800c62a:	332c      	adds	r3, #44	; 0x2c
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7fe ff89 	bl	800b544 <ld_dword>
 800c632:	4602      	mov	r2, r0
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	621a      	str	r2, [r3, #32]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	647b      	str	r3, [r7, #68]	; 0x44
 800c640:	e01f      	b.n	800c682 <find_volume+0x36a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	891b      	ldrh	r3, [r3, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <find_volume+0x336>
 800c64a:	230d      	movs	r3, #13
 800c64c:	e032      	b.n	800c6b4 <find_volume+0x39c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	69da      	ldr	r2, [r3, #28]
 800c652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c654:	441a      	add	r2, r3
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	621a      	str	r2, [r3, #32]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c65a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d103      	bne.n	800c66a <find_volume+0x352>
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	005b      	lsls	r3, r3, #1
 800c668:	e00a      	b.n	800c680 <find_volume+0x368>
 800c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66c:	691a      	ldr	r2, [r3, #16]
 800c66e:	4613      	mov	r3, r2
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	4413      	add	r3, r2
 800c674:	085a      	lsrs	r2, r3, #1
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c680:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	695a      	ldr	r2, [r3, #20]
 800c686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c688:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c68c:	0a5b      	lsrs	r3, r3, #9
 800c68e:	429a      	cmp	r2, r3
 800c690:	d201      	bcs.n	800c696 <find_volume+0x37e>
 800c692:	230d      	movs	r3, #13
 800c694:	e00e      	b.n	800c6b4 <find_volume+0x39c>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c698:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c69c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c69e:	4b07      	ldr	r3, [pc, #28]	; (800c6bc <find_volume+0x3a4>)
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <find_volume+0x3a4>)
 800c6a8:	801a      	strh	r2, [r3, #0]
 800c6aa:	4b04      	ldr	r3, [pc, #16]	; (800c6bc <find_volume+0x3a4>)
 800c6ac:	881a      	ldrh	r2, [r3, #0]
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b0:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3758      	adds	r7, #88	; 0x58
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	200012b8 	.word	0x200012b8

0800c6c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c6ca:	2309      	movs	r3, #9
 800c6cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d01c      	beq.n	800c70e <validate+0x4e>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d018      	beq.n	800c70e <validate+0x4e>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d013      	beq.n	800c70e <validate+0x4e>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	889a      	ldrh	r2, [r3, #4]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	88db      	ldrh	r3, [r3, #6]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d10c      	bne.n	800c70e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	785b      	ldrb	r3, [r3, #1]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe feaa 	bl	800b454 <disk_status>
 800c700:	4603      	mov	r3, r0
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <validate+0x4e>
			res = FR_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <validate+0x5a>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	e000      	b.n	800c71c <validate+0x5c>
 800c71a:	2300      	movs	r3, #0
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	6013      	str	r3, [r2, #0]
	return res;
 800c720:	7bfb      	ldrb	r3, [r7, #15]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
	...

0800c72c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c73e:	f107 0310 	add.w	r3, r7, #16
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff fd4d 	bl	800c1e2 <get_ldnumber>
 800c748:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da01      	bge.n	800c754 <f_mount+0x28>
 800c750:	230b      	movs	r3, #11
 800c752:	e028      	b.n	800c7a6 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c754:	4a16      	ldr	r2, [pc, #88]	; (800c7b0 <f_mount+0x84>)
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c75c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	490d      	ldr	r1, [pc, #52]	; (800c7b0 <f_mount+0x84>)
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <f_mount+0x60>
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d001      	beq.n	800c790 <f_mount+0x64>
 800c78c:	2300      	movs	r3, #0
 800c78e:	e00a      	b.n	800c7a6 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c790:	f107 010c 	add.w	r1, r7, #12
 800c794:	f107 0308 	add.w	r3, r7, #8
 800c798:	2200      	movs	r2, #0
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff fdbc 	bl	800c318 <find_volume>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	200012b0 	.word	0x200012b0

0800c7b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b0b4      	sub	sp, #208	; 0xd0
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <f_open+0x18>
 800c7c8:	2309      	movs	r3, #9
 800c7ca:	e074      	b.n	800c8b6 <f_open+0x102>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c7cc:	79fb      	ldrb	r3, [r7, #7]
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c7d4:	79fa      	ldrb	r2, [r7, #7]
 800c7d6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800c7da:	f107 0308 	add.w	r3, r7, #8
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7ff fd9a 	bl	800c318 <find_volume>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if (res == FR_OK) {
 800c7ea:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d158      	bne.n	800c8a4 <f_open+0xf0>
		dj.obj.fs = fs;
 800c7f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		INIT_NAMBUF(fs);
 800c7fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7fe:	f107 0214 	add.w	r2, r7, #20
 800c802:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c80a:	4611      	mov	r1, r2
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fc77 	bl	800c100 <follow_path>
 800c812:	4603      	mov	r3, r0
 800c814:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			if (!fp->obj.lockid) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 800c818:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d111      	bne.n	800c844 <f_open+0x90>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c820:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800c824:	b25b      	sxtb	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	da03      	bge.n	800c832 <f_open+0x7e>
				res = FR_INVALID_NAME;
 800c82a:	2306      	movs	r3, #6
 800c82c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800c830:	e008      	b.n	800c844 <f_open+0x90>
			} else {
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c832:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800c836:	f003 0310 	and.w	r3, r3, #16
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <f_open+0x90>
					res = FR_NO_FILE;
 800c83e:	2304      	movs	r3, #4
 800c840:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c844:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d12b      	bne.n	800c8a4 <f_open+0xf0>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c84c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c850:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c854:	4611      	mov	r1, r2
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff f928 	bl	800baac <ld_clust>
 800c85c:	4602      	mov	r2, r0
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c866:	331c      	adds	r3, #28
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe fe6b 	bl	800b544 <ld_dword>
 800c86e:	4602      	mov	r2, r0
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	621a      	str	r2, [r3, #32]
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c87a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c886:	88da      	ldrh	r2, [r3, #6]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	79fa      	ldrb	r2, [r7, #7]
 800c890:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	615a      	str	r2, [r3, #20]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c8a4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <f_open+0xfe>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c8b2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	37d0      	adds	r7, #208	; 0xd0
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b08e      	sub	sp, #56	; 0x38
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
 800c8ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f107 0214 	add.w	r2, r7, #20
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff feee 	bl	800c6c0 <validate>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c8ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d107      	bne.n	800c902 <f_read+0x44>
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	7c5b      	ldrb	r3, [r3, #17]
 800c8f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <f_read+0x4a>
 800c902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c906:	e0dd      	b.n	800cac4 <f_read+0x206>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	7c1b      	ldrb	r3, [r3, #16]
 800c90c:	f003 0301 	and.w	r3, r3, #1
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <f_read+0x5a>
 800c914:	2307      	movs	r3, #7
 800c916:	e0d5      	b.n	800cac4 <f_read+0x206>
	remain = fp->obj.objsize - fp->fptr;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	695b      	ldr	r3, [r3, #20]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	429a      	cmp	r2, r3
 800c92a:	f240 80c6 	bls.w	800caba <f_read+0x1fc>
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c932:	e0c2      	b.n	800caba <f_read+0x1fc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f040 808e 	bne.w	800ca5e <f_read+0x1a0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	0a5b      	lsrs	r3, r3, #9
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	8952      	ldrh	r2, [r2, #10]
 800c94c:	3a01      	subs	r2, #1
 800c94e:	4013      	ands	r3, r2
 800c950:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d12f      	bne.n	800c9b8 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	633b      	str	r3, [r7, #48]	; 0x30
 800c966:	e013      	b.n	800c990 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	4619      	mov	r1, r3
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7fe ff74 	bl	800b864 <clmt_clust>
 800c97c:	6338      	str	r0, [r7, #48]	; 0x30
 800c97e:	e007      	b.n	800c990 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	4619      	mov	r1, r3
 800c988:	4610      	mov	r0, r2
 800c98a:	f7fe fec3 	bl	800b714 <get_fat>
 800c98e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c992:	2b01      	cmp	r3, #1
 800c994:	d804      	bhi.n	800c9a0 <f_read+0xe2>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2202      	movs	r2, #2
 800c99a:	745a      	strb	r2, [r3, #17]
 800c99c:	2302      	movs	r3, #2
 800c99e:	e091      	b.n	800cac4 <f_read+0x206>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a6:	d104      	bne.n	800c9b2 <f_read+0xf4>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	745a      	strb	r2, [r3, #17]
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e088      	b.n	800cac4 <f_read+0x206>
				fp->clust = clst;				/* Update current cluster */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b6:	619a      	str	r2, [r3, #24]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	f7fe fe88 	bl	800b6d6 <clust2sect>
 800c9c6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d104      	bne.n	800c9d8 <f_read+0x11a>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2202      	movs	r2, #2
 800c9d2:	745a      	strb	r2, [r3, #17]
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e075      	b.n	800cac4 <f_read+0x206>
			sect += csect;
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	4413      	add	r3, r2
 800c9de:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	0a5b      	lsrs	r3, r3, #9
 800c9e4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d01f      	beq.n	800ca2c <f_read+0x16e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c9ec:	69fa      	ldr	r2, [r7, #28]
 800c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f0:	4413      	add	r3, r2
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	8952      	ldrh	r2, [r2, #10]
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d905      	bls.n	800ca06 <f_read+0x148>
					cc = fs->csize - csect;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	895b      	ldrh	r3, [r3, #10]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	7858      	ldrb	r0, [r3, #1]
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	69ba      	ldr	r2, [r7, #24]
 800ca0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca10:	f7fe fd60 	bl	800b4d4 <disk_read>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d004      	beq.n	800ca24 <f_read+0x166>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	745a      	strb	r2, [r3, #17]
 800ca20:	2301      	movs	r3, #1
 800ca22:	e04f      	b.n	800cac4 <f_read+0x206>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ca24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca26:	025b      	lsls	r3, r3, #9
 800ca28:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ca2a:	e032      	b.n	800ca92 <f_read+0x1d4>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	69ba      	ldr	r2, [r7, #24]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d010      	beq.n	800ca58 <f_read+0x19a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	7858      	ldrb	r0, [r3, #1]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ca40:	2301      	movs	r3, #1
 800ca42:	69ba      	ldr	r2, [r7, #24]
 800ca44:	f7fe fd46 	bl	800b4d4 <disk_read>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <f_read+0x19a>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	745a      	strb	r2, [r3, #17]
 800ca54:	2301      	movs	r3, #1
 800ca56:	e035      	b.n	800cac4 <f_read+0x206>
			}
#endif
			fp->sect = sect;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	69ba      	ldr	r2, [r7, #24]
 800ca5c:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca66:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d901      	bls.n	800ca78 <f_read+0x1ba>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca86:	4413      	add	r3, r2
 800ca88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca8e:	f7fe fd7c 	bl	800b58a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ca92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	4413      	add	r3, r2
 800ca98:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	695a      	ldr	r2, [r3, #20]
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	441a      	add	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	615a      	str	r2, [r3, #20]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	441a      	add	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f47f af39 	bne.w	800c934 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3738      	adds	r7, #56	; 0x38
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f107 0208 	add.w	r2, r7, #8
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff fdef 	bl	800c6c0 <validate>
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d102      	bne.n	800caf2 <f_close+0x26>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b090      	sub	sp, #64	; 0x40
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f107 0208 	add.w	r2, r7, #8
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7ff fdd6 	bl	800c6c0 <validate>
 800cb14:	4603      	mov	r3, r0
 800cb16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cb1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d103      	bne.n	800cb2a <f_lseek+0x2e>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7c5b      	ldrb	r3, [r3, #17]
 800cb26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cb2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <f_lseek+0x3c>
 800cb32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb36:	e163      	b.n	800ce00 <f_lseek+0x304>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 80b3 	beq.w	800cca8 <f_lseek+0x1ac>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb48:	d15a      	bne.n	800cc00 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	1d1a      	adds	r2, r3, #4
 800cb54:	627a      	str	r2, [r7, #36]	; 0x24
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	617b      	str	r3, [r7, #20]
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d03a      	beq.n	800cbe0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	3302      	adds	r3, #2
 800cb76:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	3301      	adds	r3, #1
 800cb80:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fe fdc4 	bl	800b714 <get_fat>
 800cb8c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d804      	bhi.n	800cb9e <f_lseek+0xa2>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2202      	movs	r2, #2
 800cb98:	745a      	strb	r2, [r3, #17]
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	e130      	b.n	800ce00 <f_lseek+0x304>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba4:	d104      	bne.n	800cbb0 <f_lseek+0xb4>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	745a      	strb	r2, [r3, #17]
 800cbac:	2301      	movs	r3, #1
 800cbae:	e127      	b.n	800ce00 <f_lseek+0x304>
					} while (cl == pcl + 1);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d0de      	beq.n	800cb78 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d809      	bhi.n	800cbd6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc4:	1d1a      	adds	r2, r3, #4
 800cbc6:	627a      	str	r2, [r7, #36]	; 0x24
 800cbc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	1d1a      	adds	r2, r3, #4
 800cbd0:	627a      	str	r2, [r7, #36]	; 0x24
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d3c4      	bcc.n	800cb6a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cbe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d803      	bhi.n	800cbf8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	e101      	b.n	800cdfc <f_lseek+0x300>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cbf8:	2311      	movs	r3, #17
 800cbfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cbfe:	e0fd      	b.n	800cdfc <f_lseek+0x300>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	683a      	ldr	r2, [r7, #0]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d902      	bls.n	800cc10 <f_lseek+0x114>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	615a      	str	r2, [r3, #20]
			if (ofs) {
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 80ef 	beq.w	800cdfc <f_lseek+0x300>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7fe fe1d 	bl	800b864 <clmt_clust>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	619a      	str	r2, [r3, #24]
				dsc = clust2sect(fs, fp->clust);
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	4619      	mov	r1, r3
 800cc38:	4610      	mov	r0, r2
 800cc3a:	f7fe fd4c 	bl	800b6d6 <clust2sect>
 800cc3e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d104      	bne.n	800cc50 <f_lseek+0x154>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2202      	movs	r2, #2
 800cc4a:	745a      	strb	r2, [r3, #17]
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e0d7      	b.n	800ce00 <f_lseek+0x304>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	3b01      	subs	r3, #1
 800cc54:	0a5b      	lsrs	r3, r3, #9
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	8952      	ldrh	r2, [r2, #10]
 800cc5a:	3a01      	subs	r2, #1
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	69ba      	ldr	r2, [r7, #24]
 800cc60:	4413      	add	r3, r2
 800cc62:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f000 80c5 	beq.w	800cdfc <f_lseek+0x300>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	69ba      	ldr	r2, [r7, #24]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	f000 80bf 	beq.w	800cdfc <f_lseek+0x300>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	7858      	ldrb	r0, [r3, #1]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc88:	2301      	movs	r3, #1
 800cc8a:	69ba      	ldr	r2, [r7, #24]
 800cc8c:	f7fe fc22 	bl	800b4d4 <disk_read>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d004      	beq.n	800cca0 <f_lseek+0x1a4>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	745a      	strb	r2, [r3, #17]
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e0af      	b.n	800ce00 <f_lseek+0x304>
#endif
					fp->sect = dsc;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	61da      	str	r2, [r3, #28]
 800cca6:	e0a9      	b.n	800cdfc <f_lseek+0x300>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d902      	bls.n	800ccb8 <f_lseek+0x1bc>
			ofs = fp->obj.objsize;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccc6:	615a      	str	r2, [r3, #20]
		if (ofs) {
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d077      	beq.n	800cdbe <f_lseek+0x2c2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	895b      	ldrh	r3, [r3, #10]
 800ccd2:	025b      	lsls	r3, r3, #9
 800ccd4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01b      	beq.n	800cd14 <f_lseek+0x218>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	1e5a      	subs	r2, r3, #1
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	fbb2 f2f3 	udiv	r2, r2, r3
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	1e59      	subs	r1, r3, #1
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d30f      	bcc.n	800cd14 <f_lseek+0x218>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	1e5a      	subs	r2, r3, #1
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	425b      	negs	r3, r3
 800ccfc:	401a      	ands	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd12:	e005      	b.n	800cd20 <f_lseek+0x224>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd1e:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d04b      	beq.n	800cdbe <f_lseek+0x2c2>
				while (ofs > bcs) {						/* Cluster following loop */
 800cd26:	e028      	b.n	800cd7a <f_lseek+0x27e>
					ofs -= bcs; fp->fptr += bcs;
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	695a      	ldr	r2, [r3, #20]
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	441a      	add	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	615a      	str	r2, [r3, #20]
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe fce7 	bl	800b714 <get_fat>
 800cd46:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4e:	d104      	bne.n	800cd5a <f_lseek+0x25e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	745a      	strb	r2, [r3, #17]
 800cd56:	2301      	movs	r3, #1
 800cd58:	e052      	b.n	800ce00 <f_lseek+0x304>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d904      	bls.n	800cd6a <f_lseek+0x26e>
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d304      	bcc.n	800cd74 <f_lseek+0x278>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	745a      	strb	r2, [r3, #17]
 800cd70:	2302      	movs	r3, #2
 800cd72:	e045      	b.n	800ce00 <f_lseek+0x304>
					fp->clust = clst;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd78:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d8d2      	bhi.n	800cd28 <f_lseek+0x22c>
				}
				fp->fptr += ofs;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	695a      	ldr	r2, [r3, #20]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	441a      	add	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d012      	beq.n	800cdbe <f_lseek+0x2c2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe fc9a 	bl	800b6d6 <clust2sect>
 800cda2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d104      	bne.n	800cdb4 <f_lseek+0x2b8>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2202      	movs	r2, #2
 800cdae:	745a      	strb	r2, [r3, #17]
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e025      	b.n	800ce00 <f_lseek+0x304>
					nsect += (DWORD)(ofs / SS(fs));
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	0a5b      	lsrs	r3, r3, #9
 800cdb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdba:	4413      	add	r3, r2
 800cdbc:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
			fp->obj.objsize = fp->fptr;
			fp->flag |= FA_MODIFIED;
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d018      	beq.n	800cdfc <f_lseek+0x300>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d013      	beq.n	800cdfc <f_lseek+0x300>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	7858      	ldrb	r0, [r3, #1]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cdde:	2301      	movs	r3, #1
 800cde0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cde2:	f7fe fb77 	bl	800b4d4 <disk_read>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d004      	beq.n	800cdf6 <f_lseek+0x2fa>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	745a      	strb	r2, [r3, #17]
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e004      	b.n	800ce00 <f_lseek+0x304>
#endif
			fp->sect = nsect;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdfa:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 800cdfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3740      	adds	r7, #64	; 0x40
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	4613      	mov	r3, r2
 800ce14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce16:	2301      	movs	r3, #1
 800ce18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce1e:	4b1f      	ldr	r3, [pc, #124]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce20:	7b9b      	ldrb	r3, [r3, #14]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d831      	bhi.n	800ce8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce28:	4b1c      	ldr	r3, [pc, #112]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce2a:	7b9b      	ldrb	r3, [r3, #14]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4b1a      	ldr	r3, [pc, #104]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce32:	2100      	movs	r1, #0
 800ce34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce36:	4b19      	ldr	r3, [pc, #100]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce38:	7b9b      	ldrb	r3, [r3, #14]
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	4a17      	ldr	r2, [pc, #92]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce46:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce48:	7b9b      	ldrb	r3, [r3, #14]
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	4b13      	ldr	r3, [pc, #76]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce50:	4413      	add	r3, r2
 800ce52:	79fa      	ldrb	r2, [r7, #7]
 800ce54:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800ce56:	4b11      	ldr	r3, [pc, #68]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce58:	7b9b      	ldrb	r3, [r3, #14]
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	b2d1      	uxtb	r1, r2
 800ce60:	4a0e      	ldr	r2, [pc, #56]	; (800ce9c <FATFS_LinkDriverEx+0x94>)
 800ce62:	7391      	strb	r1, [r2, #14]
 800ce64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce66:	7dbb      	ldrb	r3, [r7, #22]
 800ce68:	3330      	adds	r3, #48	; 0x30
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	3301      	adds	r3, #1
 800ce74:	223a      	movs	r2, #58	; 0x3a
 800ce76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	3302      	adds	r3, #2
 800ce7c:	222f      	movs	r2, #47	; 0x2f
 800ce7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	3303      	adds	r3, #3
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	371c      	adds	r7, #28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	200012bc 	.word	0x200012bc

0800cea0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ceaa:	2200      	movs	r2, #0
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff ffaa 	bl	800ce08 <FATFS_LinkDriverEx>
 800ceb4:	4603      	mov	r3, r0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cecc:	88fb      	ldrh	r3, [r7, #6]
 800cece:	2b7f      	cmp	r3, #127	; 0x7f
 800ced0:	d802      	bhi.n	800ced8 <ff_convert+0x18>
		c = chr;
 800ced2:	88fb      	ldrh	r3, [r7, #6]
 800ced4:	81fb      	strh	r3, [r7, #14]
 800ced6:	e025      	b.n	800cf24 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cede:	88fb      	ldrh	r3, [r7, #6]
 800cee0:	2bff      	cmp	r3, #255	; 0xff
 800cee2:	d805      	bhi.n	800cef0 <ff_convert+0x30>
 800cee4:	88fb      	ldrh	r3, [r7, #6]
 800cee6:	3b80      	subs	r3, #128	; 0x80
 800cee8:	4a12      	ldr	r2, [pc, #72]	; (800cf34 <ff_convert+0x74>)
 800ceea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceee:	e000      	b.n	800cef2 <ff_convert+0x32>
 800cef0:	2300      	movs	r3, #0
 800cef2:	81fb      	strh	r3, [r7, #14]
 800cef4:	e016      	b.n	800cf24 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cef6:	2300      	movs	r3, #0
 800cef8:	81fb      	strh	r3, [r7, #14]
 800cefa:	e009      	b.n	800cf10 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cefc:	89fb      	ldrh	r3, [r7, #14]
 800cefe:	4a0d      	ldr	r2, [pc, #52]	; (800cf34 <ff_convert+0x74>)
 800cf00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf04:	88fa      	ldrh	r2, [r7, #6]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d006      	beq.n	800cf18 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cf0a:	89fb      	ldrh	r3, [r7, #14]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	81fb      	strh	r3, [r7, #14]
 800cf10:	89fb      	ldrh	r3, [r7, #14]
 800cf12:	2b7f      	cmp	r3, #127	; 0x7f
 800cf14:	d9f2      	bls.n	800cefc <ff_convert+0x3c>
 800cf16:	e000      	b.n	800cf1a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cf18:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cf1a:	89fb      	ldrh	r3, [r7, #14]
 800cf1c:	3380      	adds	r3, #128	; 0x80
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cf24:	89fb      	ldrh	r3, [r7, #14]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	08019c08 	.word	0x08019c08

0800cf38 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	4603      	mov	r3, r0
 800cf40:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cf42:	88fb      	ldrh	r3, [r7, #6]
 800cf44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf48:	d201      	bcs.n	800cf4e <ff_wtoupper+0x16>
 800cf4a:	4b3e      	ldr	r3, [pc, #248]	; (800d044 <ff_wtoupper+0x10c>)
 800cf4c:	e000      	b.n	800cf50 <ff_wtoupper+0x18>
 800cf4e:	4b3e      	ldr	r3, [pc, #248]	; (800d048 <ff_wtoupper+0x110>)
 800cf50:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	1c9a      	adds	r2, r3, #2
 800cf56:	617a      	str	r2, [r7, #20]
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cf5c:	8a7b      	ldrh	r3, [r7, #18]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d068      	beq.n	800d034 <ff_wtoupper+0xfc>
 800cf62:	88fa      	ldrh	r2, [r7, #6]
 800cf64:	8a7b      	ldrh	r3, [r7, #18]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d364      	bcc.n	800d034 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	1c9a      	adds	r2, r3, #2
 800cf6e:	617a      	str	r2, [r7, #20]
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	823b      	strh	r3, [r7, #16]
 800cf74:	8a3b      	ldrh	r3, [r7, #16]
 800cf76:	0a1b      	lsrs	r3, r3, #8
 800cf78:	81fb      	strh	r3, [r7, #14]
 800cf7a:	8a3b      	ldrh	r3, [r7, #16]
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cf80:	88fa      	ldrh	r2, [r7, #6]
 800cf82:	8a79      	ldrh	r1, [r7, #18]
 800cf84:	8a3b      	ldrh	r3, [r7, #16]
 800cf86:	440b      	add	r3, r1
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	da49      	bge.n	800d020 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cf8c:	89fb      	ldrh	r3, [r7, #14]
 800cf8e:	2b08      	cmp	r3, #8
 800cf90:	d84f      	bhi.n	800d032 <ff_wtoupper+0xfa>
 800cf92:	a201      	add	r2, pc, #4	; (adr r2, 800cf98 <ff_wtoupper+0x60>)
 800cf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf98:	0800cfbd 	.word	0x0800cfbd
 800cf9c:	0800cfcf 	.word	0x0800cfcf
 800cfa0:	0800cfe5 	.word	0x0800cfe5
 800cfa4:	0800cfed 	.word	0x0800cfed
 800cfa8:	0800cff5 	.word	0x0800cff5
 800cfac:	0800cffd 	.word	0x0800cffd
 800cfb0:	0800d005 	.word	0x0800d005
 800cfb4:	0800d00d 	.word	0x0800d00d
 800cfb8:	0800d015 	.word	0x0800d015
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cfbc:	88fa      	ldrh	r2, [r7, #6]
 800cfbe:	8a7b      	ldrh	r3, [r7, #18]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	80fb      	strh	r3, [r7, #6]
 800cfcc:	e027      	b.n	800d01e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cfce:	88fa      	ldrh	r2, [r7, #6]
 800cfd0:	8a7b      	ldrh	r3, [r7, #18]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	88fa      	ldrh	r2, [r7, #6]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	80fb      	strh	r3, [r7, #6]
 800cfe2:	e01c      	b.n	800d01e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	3b10      	subs	r3, #16
 800cfe8:	80fb      	strh	r3, [r7, #6]
 800cfea:	e018      	b.n	800d01e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cfec:	88fb      	ldrh	r3, [r7, #6]
 800cfee:	3b20      	subs	r3, #32
 800cff0:	80fb      	strh	r3, [r7, #6]
 800cff2:	e014      	b.n	800d01e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cff4:	88fb      	ldrh	r3, [r7, #6]
 800cff6:	3b30      	subs	r3, #48	; 0x30
 800cff8:	80fb      	strh	r3, [r7, #6]
 800cffa:	e010      	b.n	800d01e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cffc:	88fb      	ldrh	r3, [r7, #6]
 800cffe:	3b1a      	subs	r3, #26
 800d000:	80fb      	strh	r3, [r7, #6]
 800d002:	e00c      	b.n	800d01e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d004:	88fb      	ldrh	r3, [r7, #6]
 800d006:	3308      	adds	r3, #8
 800d008:	80fb      	strh	r3, [r7, #6]
 800d00a:	e008      	b.n	800d01e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d00c:	88fb      	ldrh	r3, [r7, #6]
 800d00e:	3b50      	subs	r3, #80	; 0x50
 800d010:	80fb      	strh	r3, [r7, #6]
 800d012:	e004      	b.n	800d01e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d014:	88fb      	ldrh	r3, [r7, #6]
 800d016:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d01a:	80fb      	strh	r3, [r7, #6]
 800d01c:	bf00      	nop
			}
			break;
 800d01e:	e008      	b.n	800d032 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d020:	89fb      	ldrh	r3, [r7, #14]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d195      	bne.n	800cf52 <ff_wtoupper+0x1a>
 800d026:	8a3b      	ldrh	r3, [r7, #16]
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	4413      	add	r3, r2
 800d02e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d030:	e78f      	b.n	800cf52 <ff_wtoupper+0x1a>
			break;
 800d032:	bf00      	nop
	}

	return chr;
 800d034:	88fb      	ldrh	r3, [r7, #6]
}
 800d036:	4618      	mov	r0, r3
 800d038:	371c      	adds	r7, #28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	08019d08 	.word	0x08019d08
 800d048:	08019efc 	.word	0x08019efc

0800d04c <Get_ADCChannelValue>:
 */

#include "InternalADC.h"

uint16_t Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef ADC_ChanConf;

	ADC_ChanConf.Channel = channel;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	60bb      	str	r3, [r7, #8]
	ADC_ChanConf.Rank = 1;
 800d05a:	2301      	movs	r3, #1
 800d05c:	60fb      	str	r3, [r7, #12]
	ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800d05e:	2301      	movs	r3, #1
 800d060:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 800d062:	f107 0308 	add.w	r3, r7, #8
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7f6 fa8d 	bl	8003588 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(hadc);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7f6 f920 	bl	80032b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 10);   //等待转换完成，50为最大等待时间，单位为ms
 800d074:	210a      	movs	r1, #10
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7f6 f9ee 	bl	8003458 <HAL_ADC_PollForConversion>
	return (uint16_t) HAL_ADC_GetValue(hadc);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7f6 fa76 	bl	800356e <HAL_ADC_GetValue>
 800d082:	4603      	mov	r3, r0
 800d084:	b29b      	uxth	r3, r3
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800d09a:	4b29      	ldr	r3, [pc, #164]	; (800d140 <set_int_enable+0xb0>)
 800d09c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d01c      	beq.n	800d0de <set_int_enable+0x4e>
        if (enable)
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	73fb      	strb	r3, [r7, #15]
 800d0ae:	e001      	b.n	800d0b4 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800d0b4:	4b22      	ldr	r3, [pc, #136]	; (800d140 <set_int_enable+0xb0>)
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	7818      	ldrb	r0, [r3, #0]
 800d0ba:	4b21      	ldr	r3, [pc, #132]	; (800d140 <set_int_enable+0xb0>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	7c59      	ldrb	r1, [r3, #17]
 800d0c0:	f107 030f 	add.w	r3, r7, #15
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f003 fa03 	bl	80104d0 <dmp_i2c_write>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <set_int_enable+0x46>
            return -1;
 800d0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d4:	e030      	b.n	800d138 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800d0d6:	7bfa      	ldrb	r2, [r7, #15]
 800d0d8:	4b19      	ldr	r3, [pc, #100]	; (800d140 <set_int_enable+0xb0>)
 800d0da:	745a      	strb	r2, [r3, #17]
 800d0dc:	e02b      	b.n	800d136 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800d0de:	4b18      	ldr	r3, [pc, #96]	; (800d140 <set_int_enable+0xb0>)
 800d0e0:	7a9b      	ldrb	r3, [r3, #10]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d102      	bne.n	800d0ec <set_int_enable+0x5c>
            return -1;
 800d0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ea:	e025      	b.n	800d138 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <set_int_enable+0x6e>
 800d0f2:	4b13      	ldr	r3, [pc, #76]	; (800d140 <set_int_enable+0xb0>)
 800d0f4:	7c5b      	ldrb	r3, [r3, #17]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <set_int_enable+0x6e>
            return 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e01c      	b.n	800d138 <set_int_enable+0xa8>
        if (enable)
 800d0fe:	79fb      	ldrb	r3, [r7, #7]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 800d104:	2301      	movs	r3, #1
 800d106:	73fb      	strb	r3, [r7, #15]
 800d108:	e001      	b.n	800d10e <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800d10e:	4b0c      	ldr	r3, [pc, #48]	; (800d140 <set_int_enable+0xb0>)
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	7818      	ldrb	r0, [r3, #0]
 800d114:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <set_int_enable+0xb0>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	7c59      	ldrb	r1, [r3, #17]
 800d11a:	f107 030f 	add.w	r3, r7, #15
 800d11e:	2201      	movs	r2, #1
 800d120:	f003 f9d6 	bl	80104d0 <dmp_i2c_write>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <set_int_enable+0xa0>
            return -1;
 800d12a:	f04f 33ff 	mov.w	r3, #4294967295
 800d12e:	e003      	b.n	800d138 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800d130:	7bfa      	ldrb	r2, [r7, #15]
 800d132:	4b03      	ldr	r3, [pc, #12]	; (800d140 <set_int_enable+0xb0>)
 800d134:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	20000028 	.word	0x20000028

0800d144 <mpu_init>:
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
//int mpu_init(struct int_param_s *int_param)
int mpu_init(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* 复位设备 */
    /* Reset device. */
    data[0] = BIT_RESET;			//0x80
 800d14a:	2380      	movs	r3, #128	; 0x80
 800d14c:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800d14e:	4b82      	ldr	r3, [pc, #520]	; (800d358 <mpu_init+0x214>)
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	7818      	ldrb	r0, [r3, #0]
 800d154:	4b80      	ldr	r3, [pc, #512]	; (800d358 <mpu_init+0x214>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	7d59      	ldrb	r1, [r3, #21]
 800d15a:	463b      	mov	r3, r7
 800d15c:	2201      	movs	r2, #1
 800d15e:	f003 f9b7 	bl	80104d0 <dmp_i2c_write>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <mpu_init+0x2a>
        return -1;
 800d168:	f04f 33ff 	mov.w	r3, #4294967295
 800d16c:	e0ef      	b.n	800d34e <mpu_init+0x20a>
    delay_ms(100);
 800d16e:	2064      	movs	r0, #100	; 0x64
 800d170:	f003 f996 	bl	80104a0 <my_hal_delay>

    /* 唤醒设备 */
    /* Wake up chip. */
    data[0] = 0x00;						//0x00
 800d174:	2300      	movs	r3, #0
 800d176:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800d178:	4b77      	ldr	r3, [pc, #476]	; (800d358 <mpu_init+0x214>)
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	7818      	ldrb	r0, [r3, #0]
 800d17e:	4b76      	ldr	r3, [pc, #472]	; (800d358 <mpu_init+0x214>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	7d59      	ldrb	r1, [r3, #21]
 800d184:	463b      	mov	r3, r7
 800d186:	2201      	movs	r2, #1
 800d188:	f003 f9a2 	bl	80104d0 <dmp_i2c_write>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <mpu_init+0x54>
        return -1;
 800d192:	f04f 33ff 	mov.w	r3, #4294967295
 800d196:	e0da      	b.n	800d34e <mpu_init+0x20a>

//以下是mpu6050寄存器的初始化
#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 800d198:	4b6f      	ldr	r3, [pc, #444]	; (800d358 <mpu_init+0x214>)
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	7818      	ldrb	r0, [r3, #0]
 800d19e:	4b6e      	ldr	r3, [pc, #440]	; (800d358 <mpu_init+0x214>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	7e59      	ldrb	r1, [r3, #25]
 800d1a4:	463b      	mov	r3, r7
 800d1a6:	2206      	movs	r2, #6
 800d1a8:	f003 f9b4 	bl	8010514 <dmp_i2c_read>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <mpu_init+0x74>
        return -1;
 800d1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b6:	e0ca      	b.n	800d34e <mpu_init+0x20a>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800d1b8:	797b      	ldrb	r3, [r7, #5]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	b25b      	sxtb	r3, r3
 800d1be:	f003 0304 	and.w	r3, r3, #4
 800d1c2:	b25a      	sxtb	r2, r3
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	b25b      	sxtb	r3, r3
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	b25b      	sxtb	r3, r3
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 800d1d4:	787b      	ldrb	r3, [r7, #1]
 800d1d6:	b25b      	sxtb	r3, r3
 800d1d8:	f003 0301 	and.w	r3, r3, #1
 800d1dc:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	b25b      	sxtb	r3, r3
 800d1e2:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 800d1e4:	79fb      	ldrb	r3, [r7, #7]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d015      	beq.n	800d216 <mpu_init+0xd2>
        /* Congrats, these parts are better. */
        if (rev == 1)
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d103      	bne.n	800d1f8 <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 800d1f0:	4b59      	ldr	r3, [pc, #356]	; (800d358 <mpu_init+0x214>)
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	74da      	strb	r2, [r3, #19]
 800d1f6:	e038      	b.n	800d26a <mpu_init+0x126>
        else if (rev == 2)
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d103      	bne.n	800d206 <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 800d1fe:	4b56      	ldr	r3, [pc, #344]	; (800d358 <mpu_init+0x214>)
 800d200:	2200      	movs	r2, #0
 800d202:	74da      	strb	r2, [r3, #19]
 800d204:	e031      	b.n	800d26a <mpu_init+0x126>
        else {
            log_e("Unsupported software product rev %d.\n", rev);
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	4619      	mov	r1, r3
 800d20a:	4854      	ldr	r0, [pc, #336]	; (800d35c <mpu_init+0x218>)
 800d20c:	f007 fcba 	bl	8014b84 <iprintf>
            return -1;
 800d210:	f04f 33ff 	mov.w	r3, #4294967295
 800d214:	e09b      	b.n	800d34e <mpu_init+0x20a>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 800d216:	4b50      	ldr	r3, [pc, #320]	; (800d358 <mpu_init+0x214>)
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	7818      	ldrb	r0, [r3, #0]
 800d21c:	4b4e      	ldr	r3, [pc, #312]	; (800d358 <mpu_init+0x214>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	78d9      	ldrb	r1, [r3, #3]
 800d222:	463b      	mov	r3, r7
 800d224:	2201      	movs	r2, #1
 800d226:	f003 f975 	bl	8010514 <dmp_i2c_read>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <mpu_init+0xf2>
            return -1;
 800d230:	f04f 33ff 	mov.w	r3, #4294967295
 800d234:	e08b      	b.n	800d34e <mpu_init+0x20a>
        rev = data[0] & 0x0F;
 800d236:	783b      	ldrb	r3, [r7, #0]
 800d238:	f003 030f 	and.w	r3, r3, #15
 800d23c:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 800d23e:	79fb      	ldrb	r3, [r7, #7]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d105      	bne.n	800d250 <mpu_init+0x10c>
            log_e("Product ID read as 0 indicates device is either "
 800d244:	4846      	ldr	r0, [pc, #280]	; (800d360 <mpu_init+0x21c>)
 800d246:	f007 fd23 	bl	8014c90 <puts>
                "incompatible or an MPU3050.\n");
            return -1;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295
 800d24e:	e07e      	b.n	800d34e <mpu_init+0x20a>
        } else if (rev == 4) {
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	2b04      	cmp	r3, #4
 800d254:	d106      	bne.n	800d264 <mpu_init+0x120>
            log_i("Half sensitivity part found.\n");
 800d256:	4843      	ldr	r0, [pc, #268]	; (800d364 <mpu_init+0x220>)
 800d258:	f007 fd1a 	bl	8014c90 <puts>
            st.chip_cfg.accel_half = 1;
 800d25c:	4b3e      	ldr	r3, [pc, #248]	; (800d358 <mpu_init+0x214>)
 800d25e:	2201      	movs	r2, #1
 800d260:	74da      	strb	r2, [r3, #19]
 800d262:	e002      	b.n	800d26a <mpu_init+0x126>
        } else
            st.chip_cfg.accel_half = 0;
 800d264:	4b3c      	ldr	r3, [pc, #240]	; (800d358 <mpu_init+0x214>)
 800d266:	2200      	movs	r2, #0
 800d268:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800d26a:	4b3b      	ldr	r3, [pc, #236]	; (800d358 <mpu_init+0x214>)
 800d26c:	22ff      	movs	r2, #255	; 0xff
 800d26e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800d270:	4b39      	ldr	r3, [pc, #228]	; (800d358 <mpu_init+0x214>)
 800d272:	22ff      	movs	r2, #255	; 0xff
 800d274:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800d276:	4b38      	ldr	r3, [pc, #224]	; (800d358 <mpu_init+0x214>)
 800d278:	22ff      	movs	r2, #255	; 0xff
 800d27a:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800d27c:	4b36      	ldr	r3, [pc, #216]	; (800d358 <mpu_init+0x214>)
 800d27e:	22ff      	movs	r2, #255	; 0xff
 800d280:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800d282:	4b35      	ldr	r3, [pc, #212]	; (800d358 <mpu_init+0x214>)
 800d284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d288:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800d28a:	4b33      	ldr	r3, [pc, #204]	; (800d358 <mpu_init+0x214>)
 800d28c:	22ff      	movs	r2, #255	; 0xff
 800d28e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800d290:	4b31      	ldr	r3, [pc, #196]	; (800d358 <mpu_init+0x214>)
 800d292:	22ff      	movs	r2, #255	; 0xff
 800d294:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800d296:	4b30      	ldr	r3, [pc, #192]	; (800d358 <mpu_init+0x214>)
 800d298:	2201      	movs	r2, #1
 800d29a:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800d29c:	4b2e      	ldr	r3, [pc, #184]	; (800d358 <mpu_init+0x214>)
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 800d2a4:	4b2c      	ldr	r3, [pc, #176]	; (800d358 <mpu_init+0x214>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <mpu_init+0x214>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800d2b2:	4b29      	ldr	r3, [pc, #164]	; (800d358 <mpu_init+0x214>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800d2b8:	220c      	movs	r2, #12
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	482a      	ldr	r0, [pc, #168]	; (800d368 <mpu_init+0x224>)
 800d2be:	f006 fddf 	bl	8013e80 <memset>
    st.chip_cfg.dmp_on = 0;
 800d2c2:	4b25      	ldr	r3, [pc, #148]	; (800d358 <mpu_init+0x214>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 800d2ca:	4b23      	ldr	r3, [pc, #140]	; (800d358 <mpu_init+0x214>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800d2d2:	4b21      	ldr	r3, [pc, #132]	; (800d358 <mpu_init+0x214>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	84da      	strh	r2, [r3, #38]	; 0x26
		
		//配置陀螺仪满量程范围, FSR: ±2000°/s, LSB: 16.4 LSB/°/s
    if (mpu_set_gyro_fsr(2000))
 800d2d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d2dc:	f000 f9fa 	bl	800d6d4 <mpu_set_gyro_fsr>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <mpu_init+0x1a8>
        return -1;
 800d2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ea:	e030      	b.n	800d34e <mpu_init+0x20a>
		//配置加速度计满量程范围, FSR: ±2g,  LSB: 16384 LSB/g
    if (mpu_set_accel_fsr(2))
 800d2ec:	2002      	movs	r0, #2
 800d2ee:	f000 fa7f 	bl	800d7f0 <mpu_set_accel_fsr>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <mpu_init+0x1ba>
        return -1;
 800d2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2fc:	e027      	b.n	800d34e <mpu_init+0x20a>
		//配置数字低通滤波器, 42Hz
    if (mpu_set_lpf(42))
 800d2fe:	202a      	movs	r0, #42	; 0x2a
 800d300:	f000 fb1c 	bl	800d93c <mpu_set_lpf>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d002      	beq.n	800d310 <mpu_init+0x1cc>
        return -1;
 800d30a:	f04f 33ff 	mov.w	r3, #4294967295
 800d30e:	e01e      	b.n	800d34e <mpu_init+0x20a>
		//配置采样频率分频寄存器, 50Hz
    if (mpu_set_sample_rate(50))
 800d310:	2032      	movs	r0, #50	; 0x32
 800d312:	f000 fb7b 	bl	800da0c <mpu_set_sample_rate>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <mpu_init+0x1de>
        return -1;
 800d31c:	f04f 33ff 	mov.w	r3, #4294967295
 800d320:	e015      	b.n	800d34e <mpu_init+0x20a>
		//选择FIFO, 
    if (mpu_configure_fifo(0))
 800d322:	2000      	movs	r0, #0
 800d324:	f000 fc60 	bl	800dbe8 <mpu_configure_fifo>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <mpu_init+0x1f0>
        return -1;
 800d32e:	f04f 33ff 	mov.w	r3, #4294967295
 800d332:	e00c      	b.n	800d34e <mpu_init+0x20a>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800d334:	2000      	movs	r0, #0
 800d336:	f000 fdad 	bl	800de94 <mpu_set_bypass>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d002      	beq.n	800d346 <mpu_init+0x202>
        return -1;
 800d340:	f04f 33ff 	mov.w	r3, #4294967295
 800d344:	e003      	b.n	800d34e <mpu_init+0x20a>
#endif

    mpu_set_sensors(0);
 800d346:	2000      	movs	r0, #0
 800d348:	f000 fca0 	bl	800dc8c <mpu_set_sensors>
    return 0;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20000028 	.word	0x20000028
 800d35c:	08019498 	.word	0x08019498
 800d360:	080194c0 	.word	0x080194c0
 800d364:	0801950c 	.word	0x0801950c
 800d368:	2000003e 	.word	0x2000003e

0800d36c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	4603      	mov	r3, r0
 800d374:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	2b28      	cmp	r3, #40	; 0x28
 800d37a:	d902      	bls.n	800d382 <mpu_lp_accel_mode+0x16>
        return -1;
 800d37c:	f04f 33ff 	mov.w	r3, #4294967295
 800d380:	e06a      	b.n	800d458 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d11c      	bne.n	800d3c2 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 800d388:	2000      	movs	r0, #0
 800d38a:	f000 fe49 	bl	800e020 <mpu_set_int_latched>
        tmp[0] = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 800d392:	2307      	movs	r3, #7
 800d394:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800d396:	4b32      	ldr	r3, [pc, #200]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	7818      	ldrb	r0, [r3, #0]
 800d39c:	4b30      	ldr	r3, [pc, #192]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	7d59      	ldrb	r1, [r3, #21]
 800d3a2:	f107 030c 	add.w	r3, r7, #12
 800d3a6:	2202      	movs	r2, #2
 800d3a8:	f003 f892 	bl	80104d0 <dmp_i2c_write>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <mpu_lp_accel_mode+0x4c>
            return -1;
 800d3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b6:	e04f      	b.n	800d458 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 800d3b8:	4b29      	ldr	r3, [pc, #164]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	751a      	strb	r2, [r3, #20]
        return 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e04a      	b.n	800d458 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800d3c2:	2001      	movs	r0, #1
 800d3c4:	f000 fe2c 	bl	800e020 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800d3cc:	79fb      	ldrb	r3, [r7, #7]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d105      	bne.n	800d3de <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800d3d6:	2005      	movs	r0, #5
 800d3d8:	f000 fab0 	bl	800d93c <mpu_set_lpf>
 800d3dc:	e016      	b.n	800d40c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	2b05      	cmp	r3, #5
 800d3e2:	d805      	bhi.n	800d3f0 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800d3e8:	2005      	movs	r0, #5
 800d3ea:	f000 faa7 	bl	800d93c <mpu_set_lpf>
 800d3ee:	e00d      	b.n	800d40c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	2b14      	cmp	r3, #20
 800d3f4:	d805      	bhi.n	800d402 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800d3fa:	200a      	movs	r0, #10
 800d3fc:	f000 fa9e 	bl	800d93c <mpu_set_lpf>
 800d400:	e004      	b.n	800d40c <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 800d402:	2303      	movs	r3, #3
 800d404:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 800d406:	2014      	movs	r0, #20
 800d408:	f000 fa98 	bl	800d93c <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800d40c:	7b7b      	ldrb	r3, [r7, #13]
 800d40e:	019b      	lsls	r3, r3, #6
 800d410:	b25b      	sxtb	r3, r3
 800d412:	f043 0307 	orr.w	r3, r3, #7
 800d416:	b25b      	sxtb	r3, r3
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	7818      	ldrb	r0, [r3, #0]
 800d422:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	7d59      	ldrb	r1, [r3, #21]
 800d428:	f107 030c 	add.w	r3, r7, #12
 800d42c:	2202      	movs	r2, #2
 800d42e:	f003 f84f 	bl	80104d0 <dmp_i2c_write>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <mpu_lp_accel_mode+0xd2>
        return -1;
 800d438:	f04f 33ff 	mov.w	r3, #4294967295
 800d43c:	e00c      	b.n	800d458 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800d43e:	4b08      	ldr	r3, [pc, #32]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d440:	2208      	movs	r2, #8
 800d442:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800d444:	4b06      	ldr	r3, [pc, #24]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d446:	2200      	movs	r2, #0
 800d448:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800d44a:	4b05      	ldr	r3, [pc, #20]	; (800d460 <mpu_lp_accel_mode+0xf4>)
 800d44c:	2201      	movs	r2, #1
 800d44e:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800d450:	2000      	movs	r0, #0
 800d452:	f000 fbc9 	bl	800dbe8 <mpu_configure_fifo>

    return 0;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20000028 	.word	0x20000028

0800d464 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d46a:	4b7e      	ldr	r3, [pc, #504]	; (800d664 <mpu_reset_fifo+0x200>)
 800d46c:	7a9b      	ldrb	r3, [r3, #10]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d102      	bne.n	800d478 <mpu_reset_fifo+0x14>
        return -1;
 800d472:	f04f 33ff 	mov.w	r3, #4294967295
 800d476:	e0f1      	b.n	800d65c <mpu_reset_fifo+0x1f8>

    data = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800d47c:	4b79      	ldr	r3, [pc, #484]	; (800d664 <mpu_reset_fifo+0x200>)
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	7818      	ldrb	r0, [r3, #0]
 800d482:	4b78      	ldr	r3, [pc, #480]	; (800d664 <mpu_reset_fifo+0x200>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	7c59      	ldrb	r1, [r3, #17]
 800d488:	1dfb      	adds	r3, r7, #7
 800d48a:	2201      	movs	r2, #1
 800d48c:	f003 f820 	bl	80104d0 <dmp_i2c_write>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <mpu_reset_fifo+0x38>
        return -1;
 800d496:	f04f 33ff 	mov.w	r3, #4294967295
 800d49a:	e0df      	b.n	800d65c <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800d49c:	4b71      	ldr	r3, [pc, #452]	; (800d664 <mpu_reset_fifo+0x200>)
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	7818      	ldrb	r0, [r3, #0]
 800d4a2:	4b70      	ldr	r3, [pc, #448]	; (800d664 <mpu_reset_fifo+0x200>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	7959      	ldrb	r1, [r3, #5]
 800d4a8:	1dfb      	adds	r3, r7, #7
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f003 f810 	bl	80104d0 <dmp_i2c_write>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d002      	beq.n	800d4bc <mpu_reset_fifo+0x58>
        return -1;
 800d4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ba:	e0cf      	b.n	800d65c <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d4bc:	4b69      	ldr	r3, [pc, #420]	; (800d664 <mpu_reset_fifo+0x200>)
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	7818      	ldrb	r0, [r3, #0]
 800d4c2:	4b68      	ldr	r3, [pc, #416]	; (800d664 <mpu_reset_fifo+0x200>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	7919      	ldrb	r1, [r3, #4]
 800d4c8:	1dfb      	adds	r3, r7, #7
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f003 f800 	bl	80104d0 <dmp_i2c_write>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <mpu_reset_fifo+0x78>
        return -1;
 800d4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4da:	e0bf      	b.n	800d65c <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 800d4dc:	4b61      	ldr	r3, [pc, #388]	; (800d664 <mpu_reset_fifo+0x200>)
 800d4de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d05c      	beq.n	800d5a0 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800d4e6:	230c      	movs	r3, #12
 800d4e8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d4ea:	4b5e      	ldr	r3, [pc, #376]	; (800d664 <mpu_reset_fifo+0x200>)
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	7818      	ldrb	r0, [r3, #0]
 800d4f0:	4b5c      	ldr	r3, [pc, #368]	; (800d664 <mpu_reset_fifo+0x200>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	7919      	ldrb	r1, [r3, #4]
 800d4f6:	1dfb      	adds	r3, r7, #7
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f002 ffe9 	bl	80104d0 <dmp_i2c_write>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <mpu_reset_fifo+0xa6>
            return -1;
 800d504:	f04f 33ff 	mov.w	r3, #4294967295
 800d508:	e0a8      	b.n	800d65c <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800d50a:	2032      	movs	r0, #50	; 0x32
 800d50c:	f002 ffc8 	bl	80104a0 <my_hal_delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800d510:	23c0      	movs	r3, #192	; 0xc0
 800d512:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800d514:	4b53      	ldr	r3, [pc, #332]	; (800d664 <mpu_reset_fifo+0x200>)
 800d516:	7a9b      	ldrb	r3, [r3, #10]
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d004      	beq.n	800d52a <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	f043 0320 	orr.w	r3, r3, #32
 800d526:	b2db      	uxtb	r3, r3
 800d528:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d52a:	4b4e      	ldr	r3, [pc, #312]	; (800d664 <mpu_reset_fifo+0x200>)
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	7818      	ldrb	r0, [r3, #0]
 800d530:	4b4c      	ldr	r3, [pc, #304]	; (800d664 <mpu_reset_fifo+0x200>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	7919      	ldrb	r1, [r3, #4]
 800d536:	1dfb      	adds	r3, r7, #7
 800d538:	2201      	movs	r2, #1
 800d53a:	f002 ffc9 	bl	80104d0 <dmp_i2c_write>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <mpu_reset_fifo+0xe6>
            return -1;
 800d544:	f04f 33ff 	mov.w	r3, #4294967295
 800d548:	e088      	b.n	800d65c <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 800d54a:	4b46      	ldr	r3, [pc, #280]	; (800d664 <mpu_reset_fifo+0x200>)
 800d54c:	7c5b      	ldrb	r3, [r3, #17]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800d552:	2302      	movs	r3, #2
 800d554:	71fb      	strb	r3, [r7, #7]
 800d556:	e001      	b.n	800d55c <mpu_reset_fifo+0xf8>
        else
            data = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800d55c:	4b41      	ldr	r3, [pc, #260]	; (800d664 <mpu_reset_fifo+0x200>)
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	7818      	ldrb	r0, [r3, #0]
 800d562:	4b40      	ldr	r3, [pc, #256]	; (800d664 <mpu_reset_fifo+0x200>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	7c59      	ldrb	r1, [r3, #17]
 800d568:	1dfb      	adds	r3, r7, #7
 800d56a:	2201      	movs	r2, #1
 800d56c:	f002 ffb0 	bl	80104d0 <dmp_i2c_write>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <mpu_reset_fifo+0x118>
            return -1;
 800d576:	f04f 33ff 	mov.w	r3, #4294967295
 800d57a:	e06f      	b.n	800d65c <mpu_reset_fifo+0x1f8>
        data = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800d580:	4b38      	ldr	r3, [pc, #224]	; (800d664 <mpu_reset_fifo+0x200>)
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	7818      	ldrb	r0, [r3, #0]
 800d586:	4b37      	ldr	r3, [pc, #220]	; (800d664 <mpu_reset_fifo+0x200>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	7959      	ldrb	r1, [r3, #5]
 800d58c:	1dfb      	adds	r3, r7, #7
 800d58e:	2201      	movs	r2, #1
 800d590:	f002 ff9e 	bl	80104d0 <dmp_i2c_write>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d05f      	beq.n	800d65a <mpu_reset_fifo+0x1f6>
            return -1;
 800d59a:	f04f 33ff 	mov.w	r3, #4294967295
 800d59e:	e05d      	b.n	800d65c <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 800d5a0:	2304      	movs	r3, #4
 800d5a2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d5a4:	4b2f      	ldr	r3, [pc, #188]	; (800d664 <mpu_reset_fifo+0x200>)
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	7818      	ldrb	r0, [r3, #0]
 800d5aa:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <mpu_reset_fifo+0x200>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	7919      	ldrb	r1, [r3, #4]
 800d5b0:	1dfb      	adds	r3, r7, #7
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f002 ff8c 	bl	80104d0 <dmp_i2c_write>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d002      	beq.n	800d5c4 <mpu_reset_fifo+0x160>
            return -1;
 800d5be:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c2:	e04b      	b.n	800d65c <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800d5c4:	4b27      	ldr	r3, [pc, #156]	; (800d664 <mpu_reset_fifo+0x200>)
 800d5c6:	7c9b      	ldrb	r3, [r3, #18]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d105      	bne.n	800d5d8 <mpu_reset_fifo+0x174>
 800d5cc:	4b25      	ldr	r3, [pc, #148]	; (800d664 <mpu_reset_fifo+0x200>)
 800d5ce:	7a9b      	ldrb	r3, [r3, #10]
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 800d5d8:	2340      	movs	r3, #64	; 0x40
 800d5da:	71fb      	strb	r3, [r7, #7]
 800d5dc:	e001      	b.n	800d5e2 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800d5de:	2360      	movs	r3, #96	; 0x60
 800d5e0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800d5e2:	4b20      	ldr	r3, [pc, #128]	; (800d664 <mpu_reset_fifo+0x200>)
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	7818      	ldrb	r0, [r3, #0]
 800d5e8:	4b1e      	ldr	r3, [pc, #120]	; (800d664 <mpu_reset_fifo+0x200>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	7919      	ldrb	r1, [r3, #4]
 800d5ee:	1dfb      	adds	r3, r7, #7
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f002 ff6d 	bl	80104d0 <dmp_i2c_write>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <mpu_reset_fifo+0x19e>
            return -1;
 800d5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d600:	e02c      	b.n	800d65c <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800d602:	2032      	movs	r0, #50	; 0x32
 800d604:	f002 ff4c 	bl	80104a0 <my_hal_delay>
        if (st.chip_cfg.int_enable)
 800d608:	4b16      	ldr	r3, [pc, #88]	; (800d664 <mpu_reset_fifo+0x200>)
 800d60a:	7c5b      	ldrb	r3, [r3, #17]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 800d610:	2301      	movs	r3, #1
 800d612:	71fb      	strb	r3, [r7, #7]
 800d614:	e001      	b.n	800d61a <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <mpu_reset_fifo+0x200>)
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	7818      	ldrb	r0, [r3, #0]
 800d620:	4b10      	ldr	r3, [pc, #64]	; (800d664 <mpu_reset_fifo+0x200>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	7c59      	ldrb	r1, [r3, #17]
 800d626:	1dfb      	adds	r3, r7, #7
 800d628:	2201      	movs	r2, #1
 800d62a:	f002 ff51 	bl	80104d0 <dmp_i2c_write>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <mpu_reset_fifo+0x1d6>
            return -1;
 800d634:	f04f 33ff 	mov.w	r3, #4294967295
 800d638:	e010      	b.n	800d65c <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800d63a:	4b0a      	ldr	r3, [pc, #40]	; (800d664 <mpu_reset_fifo+0x200>)
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	7818      	ldrb	r0, [r3, #0]
 800d640:	4b08      	ldr	r3, [pc, #32]	; (800d664 <mpu_reset_fifo+0x200>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	7959      	ldrb	r1, [r3, #5]
 800d646:	4b08      	ldr	r3, [pc, #32]	; (800d668 <mpu_reset_fifo+0x204>)
 800d648:	2201      	movs	r2, #1
 800d64a:	f002 ff41 	bl	80104d0 <dmp_i2c_write>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <mpu_reset_fifo+0x1f6>
            return -1;
 800d654:	f04f 33ff 	mov.w	r3, #4294967295
 800d658:	e000      	b.n	800d65c <mpu_reset_fifo+0x1f8>
    }
    return 0;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20000028 	.word	0x20000028
 800d668:	20000038 	.word	0x20000038

0800d66c <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800d674:	4b16      	ldr	r3, [pc, #88]	; (800d6d0 <mpu_get_gyro_fsr+0x64>)
 800d676:	7a1b      	ldrb	r3, [r3, #8]
 800d678:	2b03      	cmp	r3, #3
 800d67a:	d81e      	bhi.n	800d6ba <mpu_get_gyro_fsr+0x4e>
 800d67c:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <mpu_get_gyro_fsr+0x18>)
 800d67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d682:	bf00      	nop
 800d684:	0800d695 	.word	0x0800d695
 800d688:	0800d69d 	.word	0x0800d69d
 800d68c:	0800d6a7 	.word	0x0800d6a7
 800d690:	0800d6b1 	.word	0x0800d6b1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	22fa      	movs	r2, #250	; 0xfa
 800d698:	801a      	strh	r2, [r3, #0]
        break;
 800d69a:	e012      	b.n	800d6c2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d6a2:	801a      	strh	r2, [r3, #0]
        break;
 800d6a4:	e00d      	b.n	800d6c2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6ac:	801a      	strh	r2, [r3, #0]
        break;
 800d6ae:	e008      	b.n	800d6c2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d6b6:	801a      	strh	r2, [r3, #0]
        break;
 800d6b8:	e003      	b.n	800d6c2 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	801a      	strh	r2, [r3, #0]
        break;
 800d6c0:	bf00      	nop
    }
    return 0;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	20000028 	.word	0x20000028

0800d6d4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d6de:	4b26      	ldr	r3, [pc, #152]	; (800d778 <mpu_set_gyro_fsr+0xa4>)
 800d6e0:	7a9b      	ldrb	r3, [r3, #10]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d102      	bne.n	800d6ec <mpu_set_gyro_fsr+0x18>
        return -1;
 800d6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ea:	e041      	b.n	800d770 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800d6ec:	88fb      	ldrh	r3, [r7, #6]
 800d6ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d6f2:	d017      	beq.n	800d724 <mpu_set_gyro_fsr+0x50>
 800d6f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d6f8:	dc17      	bgt.n	800d72a <mpu_set_gyro_fsr+0x56>
 800d6fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6fe:	d00e      	beq.n	800d71e <mpu_set_gyro_fsr+0x4a>
 800d700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d704:	dc11      	bgt.n	800d72a <mpu_set_gyro_fsr+0x56>
 800d706:	2bfa      	cmp	r3, #250	; 0xfa
 800d708:	d003      	beq.n	800d712 <mpu_set_gyro_fsr+0x3e>
 800d70a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d70e:	d003      	beq.n	800d718 <mpu_set_gyro_fsr+0x44>
 800d710:	e00b      	b.n	800d72a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 800d712:	2300      	movs	r3, #0
 800d714:	73fb      	strb	r3, [r7, #15]
        break;
 800d716:	e00b      	b.n	800d730 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800d718:	2308      	movs	r3, #8
 800d71a:	73fb      	strb	r3, [r7, #15]
        break;
 800d71c:	e008      	b.n	800d730 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800d71e:	2310      	movs	r3, #16
 800d720:	73fb      	strb	r3, [r7, #15]
        break;
 800d722:	e005      	b.n	800d730 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 800d724:	2318      	movs	r3, #24
 800d726:	73fb      	strb	r3, [r7, #15]
        break;
 800d728:	e002      	b.n	800d730 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800d72a:	f04f 33ff 	mov.w	r3, #4294967295
 800d72e:	e01f      	b.n	800d770 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800d730:	4b11      	ldr	r3, [pc, #68]	; (800d778 <mpu_set_gyro_fsr+0xa4>)
 800d732:	7a1a      	ldrb	r2, [r3, #8]
 800d734:	7bfb      	ldrb	r3, [r7, #15]
 800d736:	08db      	lsrs	r3, r3, #3
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d101      	bne.n	800d742 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	e016      	b.n	800d770 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800d742:	4b0d      	ldr	r3, [pc, #52]	; (800d778 <mpu_set_gyro_fsr+0xa4>)
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	7818      	ldrb	r0, [r3, #0]
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <mpu_set_gyro_fsr+0xa4>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	7999      	ldrb	r1, [r3, #6]
 800d74e:	f107 030f 	add.w	r3, r7, #15
 800d752:	2201      	movs	r2, #1
 800d754:	f002 febc 	bl	80104d0 <dmp_i2c_write>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <mpu_set_gyro_fsr+0x90>
        return -1;
 800d75e:	f04f 33ff 	mov.w	r3, #4294967295
 800d762:	e005      	b.n	800d770 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	08db      	lsrs	r3, r3, #3
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	4b03      	ldr	r3, [pc, #12]	; (800d778 <mpu_set_gyro_fsr+0xa4>)
 800d76c:	721a      	strb	r2, [r3, #8]
    return 0;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20000028 	.word	0x20000028

0800d77c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800d784:	4b19      	ldr	r3, [pc, #100]	; (800d7ec <mpu_get_accel_fsr+0x70>)
 800d786:	7a5b      	ldrb	r3, [r3, #9]
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d81b      	bhi.n	800d7c4 <mpu_get_accel_fsr+0x48>
 800d78c:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <mpu_get_accel_fsr+0x18>)
 800d78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d792:	bf00      	nop
 800d794:	0800d7a5 	.word	0x0800d7a5
 800d798:	0800d7ad 	.word	0x0800d7ad
 800d79c:	0800d7b5 	.word	0x0800d7b5
 800d7a0:	0800d7bd 	.word	0x0800d7bd
    case INV_FSR_2G:
        fsr[0] = 2;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	701a      	strb	r2, [r3, #0]
        break;
 800d7aa:	e00e      	b.n	800d7ca <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2204      	movs	r2, #4
 800d7b0:	701a      	strb	r2, [r3, #0]
        break;
 800d7b2:	e00a      	b.n	800d7ca <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2208      	movs	r2, #8
 800d7b8:	701a      	strb	r2, [r3, #0]
        break;
 800d7ba:	e006      	b.n	800d7ca <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2210      	movs	r2, #16
 800d7c0:	701a      	strb	r2, [r3, #0]
        break;
 800d7c2:	e002      	b.n	800d7ca <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800d7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c8:	e00a      	b.n	800d7e0 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800d7ca:	4b08      	ldr	r3, [pc, #32]	; (800d7ec <mpu_get_accel_fsr+0x70>)
 800d7cc:	7cdb      	ldrb	r3, [r3, #19]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d005      	beq.n	800d7de <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	005b      	lsls	r3, r3, #1
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	701a      	strb	r2, [r3, #0]
    return 0;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	20000028 	.word	0x20000028

0800d7f0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d7fa:	4b30      	ldr	r3, [pc, #192]	; (800d8bc <mpu_set_accel_fsr+0xcc>)
 800d7fc:	7a9b      	ldrb	r3, [r3, #10]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <mpu_set_accel_fsr+0x18>
        return -1;
 800d802:	f04f 33ff 	mov.w	r3, #4294967295
 800d806:	e054      	b.n	800d8b2 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	3b02      	subs	r3, #2
 800d80c:	2b0e      	cmp	r3, #14
 800d80e:	d82d      	bhi.n	800d86c <mpu_set_accel_fsr+0x7c>
 800d810:	a201      	add	r2, pc, #4	; (adr r2, 800d818 <mpu_set_accel_fsr+0x28>)
 800d812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d816:	bf00      	nop
 800d818:	0800d855 	.word	0x0800d855
 800d81c:	0800d86d 	.word	0x0800d86d
 800d820:	0800d85b 	.word	0x0800d85b
 800d824:	0800d86d 	.word	0x0800d86d
 800d828:	0800d86d 	.word	0x0800d86d
 800d82c:	0800d86d 	.word	0x0800d86d
 800d830:	0800d861 	.word	0x0800d861
 800d834:	0800d86d 	.word	0x0800d86d
 800d838:	0800d86d 	.word	0x0800d86d
 800d83c:	0800d86d 	.word	0x0800d86d
 800d840:	0800d86d 	.word	0x0800d86d
 800d844:	0800d86d 	.word	0x0800d86d
 800d848:	0800d86d 	.word	0x0800d86d
 800d84c:	0800d86d 	.word	0x0800d86d
 800d850:	0800d867 	.word	0x0800d867
    case 2:
        data = INV_FSR_2G << 3;
 800d854:	2300      	movs	r3, #0
 800d856:	73fb      	strb	r3, [r7, #15]
        break;
 800d858:	e00b      	b.n	800d872 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800d85a:	2308      	movs	r3, #8
 800d85c:	73fb      	strb	r3, [r7, #15]
        break;
 800d85e:	e008      	b.n	800d872 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 800d860:	2310      	movs	r3, #16
 800d862:	73fb      	strb	r3, [r7, #15]
        break;
 800d864:	e005      	b.n	800d872 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800d866:	2318      	movs	r3, #24
 800d868:	73fb      	strb	r3, [r7, #15]
        break;
 800d86a:	e002      	b.n	800d872 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 800d86c:	f04f 33ff 	mov.w	r3, #4294967295
 800d870:	e01f      	b.n	800d8b2 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800d872:	4b12      	ldr	r3, [pc, #72]	; (800d8bc <mpu_set_accel_fsr+0xcc>)
 800d874:	7a5a      	ldrb	r2, [r3, #9]
 800d876:	7bfb      	ldrb	r3, [r7, #15]
 800d878:	08db      	lsrs	r3, r3, #3
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d101      	bne.n	800d884 <mpu_set_accel_fsr+0x94>
        return 0;
 800d880:	2300      	movs	r3, #0
 800d882:	e016      	b.n	800d8b2 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800d884:	4b0d      	ldr	r3, [pc, #52]	; (800d8bc <mpu_set_accel_fsr+0xcc>)
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	7818      	ldrb	r0, [r3, #0]
 800d88a:	4b0c      	ldr	r3, [pc, #48]	; (800d8bc <mpu_set_accel_fsr+0xcc>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	79d9      	ldrb	r1, [r3, #7]
 800d890:	f107 030f 	add.w	r3, r7, #15
 800d894:	2201      	movs	r2, #1
 800d896:	f002 fe1b 	bl	80104d0 <dmp_i2c_write>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <mpu_set_accel_fsr+0xb6>
        return -1;
 800d8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a4:	e005      	b.n	800d8b2 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
 800d8a8:	08db      	lsrs	r3, r3, #3
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	4b03      	ldr	r3, [pc, #12]	; (800d8bc <mpu_set_accel_fsr+0xcc>)
 800d8ae:	725a      	strb	r2, [r3, #9]
    return 0;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20000028 	.word	0x20000028

0800d8c0 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 800d8c8:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <mpu_get_lpf+0x78>)
 800d8ca:	7adb      	ldrb	r3, [r3, #11]
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	2b05      	cmp	r3, #5
 800d8d0:	d826      	bhi.n	800d920 <mpu_get_lpf+0x60>
 800d8d2:	a201      	add	r2, pc, #4	; (adr r2, 800d8d8 <mpu_get_lpf+0x18>)
 800d8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d8:	0800d8f1 	.word	0x0800d8f1
 800d8dc:	0800d8f9 	.word	0x0800d8f9
 800d8e0:	0800d901 	.word	0x0800d901
 800d8e4:	0800d909 	.word	0x0800d909
 800d8e8:	0800d911 	.word	0x0800d911
 800d8ec:	0800d919 	.word	0x0800d919
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	22bc      	movs	r2, #188	; 0xbc
 800d8f4:	801a      	strh	r2, [r3, #0]
        break;
 800d8f6:	e017      	b.n	800d928 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2262      	movs	r2, #98	; 0x62
 800d8fc:	801a      	strh	r2, [r3, #0]
        break;
 800d8fe:	e013      	b.n	800d928 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	222a      	movs	r2, #42	; 0x2a
 800d904:	801a      	strh	r2, [r3, #0]
        break;
 800d906:	e00f      	b.n	800d928 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2214      	movs	r2, #20
 800d90c:	801a      	strh	r2, [r3, #0]
        break;
 800d90e:	e00b      	b.n	800d928 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	220a      	movs	r2, #10
 800d914:	801a      	strh	r2, [r3, #0]
        break;
 800d916:	e007      	b.n	800d928 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2205      	movs	r2, #5
 800d91c:	801a      	strh	r2, [r3, #0]
        break;
 800d91e:	e003      	b.n	800d928 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	801a      	strh	r2, [r3, #0]
        break;
 800d926:	bf00      	nop
    }
    return 0;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	20000028 	.word	0x20000028

0800d93c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800d946:	4b23      	ldr	r3, [pc, #140]	; (800d9d4 <mpu_set_lpf+0x98>)
 800d948:	7a9b      	ldrb	r3, [r3, #10]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <mpu_set_lpf+0x18>
        return -1;
 800d94e:	f04f 33ff 	mov.w	r3, #4294967295
 800d952:	e03b      	b.n	800d9cc <mpu_set_lpf+0x90>

    if (lpf >= 188)
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	2bbb      	cmp	r3, #187	; 0xbb
 800d958:	d902      	bls.n	800d960 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800d95a:	2301      	movs	r3, #1
 800d95c:	73fb      	strb	r3, [r7, #15]
 800d95e:	e019      	b.n	800d994 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 800d960:	88fb      	ldrh	r3, [r7, #6]
 800d962:	2b61      	cmp	r3, #97	; 0x61
 800d964:	d902      	bls.n	800d96c <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800d966:	2302      	movs	r3, #2
 800d968:	73fb      	strb	r3, [r7, #15]
 800d96a:	e013      	b.n	800d994 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 800d96c:	88fb      	ldrh	r3, [r7, #6]
 800d96e:	2b29      	cmp	r3, #41	; 0x29
 800d970:	d902      	bls.n	800d978 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800d972:	2303      	movs	r3, #3
 800d974:	73fb      	strb	r3, [r7, #15]
 800d976:	e00d      	b.n	800d994 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800d978:	88fb      	ldrh	r3, [r7, #6]
 800d97a:	2b13      	cmp	r3, #19
 800d97c:	d902      	bls.n	800d984 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 800d97e:	2304      	movs	r3, #4
 800d980:	73fb      	strb	r3, [r7, #15]
 800d982:	e007      	b.n	800d994 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800d984:	88fb      	ldrh	r3, [r7, #6]
 800d986:	2b09      	cmp	r3, #9
 800d988:	d902      	bls.n	800d990 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800d98a:	2305      	movs	r3, #5
 800d98c:	73fb      	strb	r3, [r7, #15]
 800d98e:	e001      	b.n	800d994 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 800d990:	2306      	movs	r3, #6
 800d992:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 800d994:	4b0f      	ldr	r3, [pc, #60]	; (800d9d4 <mpu_set_lpf+0x98>)
 800d996:	7ada      	ldrb	r2, [r3, #11]
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d101      	bne.n	800d9a2 <mpu_set_lpf+0x66>
        return 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e014      	b.n	800d9cc <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800d9a2:	4b0c      	ldr	r3, [pc, #48]	; (800d9d4 <mpu_set_lpf+0x98>)
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	7818      	ldrb	r0, [r3, #0]
 800d9a8:	4b0a      	ldr	r3, [pc, #40]	; (800d9d4 <mpu_set_lpf+0x98>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	7899      	ldrb	r1, [r3, #2]
 800d9ae:	f107 030f 	add.w	r3, r7, #15
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f002 fd8c 	bl	80104d0 <dmp_i2c_write>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d002      	beq.n	800d9c4 <mpu_set_lpf+0x88>
        return -1;
 800d9be:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c2:	e003      	b.n	800d9cc <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 800d9c4:	7bfa      	ldrb	r2, [r7, #15]
 800d9c6:	4b03      	ldr	r3, [pc, #12]	; (800d9d4 <mpu_set_lpf+0x98>)
 800d9c8:	72da      	strb	r2, [r3, #11]
    return 0;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	20000028 	.word	0x20000028

0800d9d8 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 800d9e0:	4b09      	ldr	r3, [pc, #36]	; (800da08 <mpu_get_sample_rate+0x30>)
 800d9e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d002      	beq.n	800d9f0 <mpu_get_sample_rate+0x18>
        return -1;
 800d9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ee:	e004      	b.n	800d9fa <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <mpu_get_sample_rate+0x30>)
 800d9f2:	89da      	ldrh	r2, [r3, #14]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	801a      	strh	r2, [r3, #0]
    return 0;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	370c      	adds	r7, #12
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	20000028 	.word	0x20000028

0800da0c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	4603      	mov	r3, r0
 800da14:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800da16:	4b2f      	ldr	r3, [pc, #188]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800da18:	7a9b      	ldrb	r3, [r3, #10]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d102      	bne.n	800da24 <mpu_set_sample_rate+0x18>
        return -1;
 800da1e:	f04f 33ff 	mov.w	r3, #4294967295
 800da22:	e053      	b.n	800dacc <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 800da24:	4b2b      	ldr	r3, [pc, #172]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800da26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <mpu_set_sample_rate+0x28>
        return -1;
 800da2e:	f04f 33ff 	mov.w	r3, #4294967295
 800da32:	e04b      	b.n	800dacc <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 800da34:	4b27      	ldr	r3, [pc, #156]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800da36:	7d1b      	ldrb	r3, [r3, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00f      	beq.n	800da5c <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 800da3c:	88fb      	ldrh	r3, [r7, #6]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d009      	beq.n	800da56 <mpu_set_sample_rate+0x4a>
 800da42:	88fb      	ldrh	r3, [r7, #6]
 800da44:	2b28      	cmp	r3, #40	; 0x28
 800da46:	d806      	bhi.n	800da56 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800da48:	88fb      	ldrh	r3, [r7, #6]
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff fc8d 	bl	800d36c <mpu_lp_accel_mode>
                return 0;
 800da52:	2300      	movs	r3, #0
 800da54:	e03a      	b.n	800dacc <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800da56:	2000      	movs	r0, #0
 800da58:	f7ff fc88 	bl	800d36c <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800da5c:	88fb      	ldrh	r3, [r7, #6]
 800da5e:	2b03      	cmp	r3, #3
 800da60:	d802      	bhi.n	800da68 <mpu_set_sample_rate+0x5c>
            rate = 4;
 800da62:	2304      	movs	r3, #4
 800da64:	80fb      	strh	r3, [r7, #6]
 800da66:	e006      	b.n	800da76 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 800da68:	88fb      	ldrh	r3, [r7, #6]
 800da6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da6e:	d902      	bls.n	800da76 <mpu_set_sample_rate+0x6a>
            rate = 1000;
 800da70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da74:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800da76:	88fb      	ldrh	r3, [r7, #6]
 800da78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da7c:	fb92 f3f3 	sdiv	r3, r2, r3
 800da80:	b2db      	uxtb	r3, r3
 800da82:	3b01      	subs	r3, #1
 800da84:	b2db      	uxtb	r3, r3
 800da86:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800da88:	4b12      	ldr	r3, [pc, #72]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	7818      	ldrb	r0, [r3, #0]
 800da8e:	4b11      	ldr	r3, [pc, #68]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	7859      	ldrb	r1, [r3, #1]
 800da94:	f107 030f 	add.w	r3, r7, #15
 800da98:	2201      	movs	r2, #1
 800da9a:	f002 fd19 	bl	80104d0 <dmp_i2c_write>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <mpu_set_sample_rate+0x9e>
            return -1;
 800daa4:	f04f 33ff 	mov.w	r3, #4294967295
 800daa8:	e010      	b.n	800dacc <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
 800daac:	3301      	adds	r3, #1
 800daae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dab2:	fb92 f3f3 	sdiv	r3, r2, r3
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	4b06      	ldr	r3, [pc, #24]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800daba:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800dabc:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <mpu_set_sample_rate+0xc8>)
 800dabe:	89db      	ldrh	r3, [r3, #14]
 800dac0:	085b      	lsrs	r3, r3, #1
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7ff ff39 	bl	800d93c <mpu_set_lpf>
        return 0;
 800daca:	2300      	movs	r3, #0
    }
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20000028 	.word	0x20000028

0800dad8 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800dae0:	4b14      	ldr	r3, [pc, #80]	; (800db34 <mpu_get_gyro_sens+0x5c>)
 800dae2:	7a1b      	ldrb	r3, [r3, #8]
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d81b      	bhi.n	800db20 <mpu_get_gyro_sens+0x48>
 800dae8:	a201      	add	r2, pc, #4	; (adr r2, 800daf0 <mpu_get_gyro_sens+0x18>)
 800daea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daee:	bf00      	nop
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db09 	.word	0x0800db09
 800daf8:	0800db11 	.word	0x0800db11
 800dafc:	0800db19 	.word	0x0800db19
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a0d      	ldr	r2, [pc, #52]	; (800db38 <mpu_get_gyro_sens+0x60>)
 800db04:	601a      	str	r2, [r3, #0]
        break;
 800db06:	e00e      	b.n	800db26 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a0c      	ldr	r2, [pc, #48]	; (800db3c <mpu_get_gyro_sens+0x64>)
 800db0c:	601a      	str	r2, [r3, #0]
        break;
 800db0e:	e00a      	b.n	800db26 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a0b      	ldr	r2, [pc, #44]	; (800db40 <mpu_get_gyro_sens+0x68>)
 800db14:	601a      	str	r2, [r3, #0]
        break;
 800db16:	e006      	b.n	800db26 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a0a      	ldr	r2, [pc, #40]	; (800db44 <mpu_get_gyro_sens+0x6c>)
 800db1c:	601a      	str	r2, [r3, #0]
        break;
 800db1e:	e002      	b.n	800db26 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 800db20:	f04f 33ff 	mov.w	r3, #4294967295
 800db24:	e000      	b.n	800db28 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	20000028 	.word	0x20000028
 800db38:	43030000 	.word	0x43030000
 800db3c:	42830000 	.word	0x42830000
 800db40:	42033333 	.word	0x42033333
 800db44:	41833333 	.word	0x41833333

0800db48 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800db50:	4b1b      	ldr	r3, [pc, #108]	; (800dbc0 <mpu_get_accel_sens+0x78>)
 800db52:	7a5b      	ldrb	r3, [r3, #9]
 800db54:	2b03      	cmp	r3, #3
 800db56:	d81f      	bhi.n	800db98 <mpu_get_accel_sens+0x50>
 800db58:	a201      	add	r2, pc, #4	; (adr r2, 800db60 <mpu_get_accel_sens+0x18>)
 800db5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5e:	bf00      	nop
 800db60:	0800db71 	.word	0x0800db71
 800db64:	0800db7b 	.word	0x0800db7b
 800db68:	0800db85 	.word	0x0800db85
 800db6c:	0800db8f 	.word	0x0800db8f
    case INV_FSR_2G:
        sens[0] = 16384;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800db76:	801a      	strh	r2, [r3, #0]
        break;
 800db78:	e011      	b.n	800db9e <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f641 729c 	movw	r2, #8092	; 0x1f9c
 800db80:	801a      	strh	r2, [r3, #0]
        break;
 800db82:	e00c      	b.n	800db9e <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800db8a:	801a      	strh	r2, [r3, #0]
        break;
 800db8c:	e007      	b.n	800db9e <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db94:	801a      	strh	r2, [r3, #0]
        break;
 800db96:	e002      	b.n	800db9e <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800db98:	f04f 33ff 	mov.w	r3, #4294967295
 800db9c:	e00a      	b.n	800dbb4 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 800db9e:	4b08      	ldr	r3, [pc, #32]	; (800dbc0 <mpu_get_accel_sens+0x78>)
 800dba0:	7cdb      	ldrb	r3, [r3, #19]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d005      	beq.n	800dbb2 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	085b      	lsrs	r3, r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	801a      	strh	r2, [r3, #0]
    return 0;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	20000028 	.word	0x20000028

0800dbc4 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 800dbcc:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <mpu_get_fifo_config+0x20>)
 800dbce:	7c1a      	ldrb	r2, [r3, #16]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	701a      	strb	r2, [r3, #0]
    return 0;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	20000028 	.word	0x20000028

0800dbe8 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	4603      	mov	r3, r0
 800dbf0:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	f023 0301 	bic.w	r3, r3, #1
 800dbfc:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800dbfe:	4b22      	ldr	r3, [pc, #136]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <mpu_configure_fifo+0x24>
        return 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	e038      	b.n	800dc7e <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800dc0c:	4b1e      	ldr	r3, [pc, #120]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc0e:	7a9b      	ldrb	r3, [r3, #10]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d102      	bne.n	800dc1a <mpu_configure_fifo+0x32>
            return -1;
 800dc14:	f04f 33ff 	mov.w	r3, #4294967295
 800dc18:	e031      	b.n	800dc7e <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800dc1a:	4b1b      	ldr	r3, [pc, #108]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc1c:	7c1b      	ldrb	r3, [r3, #16]
 800dc1e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800dc20:	4b19      	ldr	r3, [pc, #100]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc22:	7a9a      	ldrb	r2, [r3, #10]
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	4013      	ands	r3, r2
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	4b17      	ldr	r3, [pc, #92]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc2c:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800dc2e:	4b16      	ldr	r3, [pc, #88]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc30:	7c1b      	ldrb	r3, [r3, #16]
 800dc32:	79fa      	ldrb	r2, [r7, #7]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d003      	beq.n	800dc40 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800dc38:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	e001      	b.n	800dc44 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800dc44:	79fb      	ldrb	r3, [r7, #7]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d103      	bne.n	800dc52 <mpu_configure_fifo+0x6a>
 800dc4a:	4b0f      	ldr	r3, [pc, #60]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc4c:	7d1b      	ldrb	r3, [r3, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d003      	beq.n	800dc5a <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800dc52:	2001      	movs	r0, #1
 800dc54:	f7ff fa1c 	bl	800d090 <set_int_enable>
 800dc58:	e002      	b.n	800dc60 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	f7ff fa18 	bl	800d090 <set_int_enable>
        if (sensors) {
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00a      	beq.n	800dc7c <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800dc66:	f7ff fbfd 	bl	800d464 <mpu_reset_fifo>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d005      	beq.n	800dc7c <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 800dc70:	4a05      	ldr	r2, [pc, #20]	; (800dc88 <mpu_configure_fifo+0xa0>)
 800dc72:	7afb      	ldrb	r3, [r7, #11]
 800dc74:	7413      	strb	r3, [r2, #16]
                return -1;
 800dc76:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7a:	e000      	b.n	800dc7e <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20000028 	.word	0x20000028

0800dc8c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800dc96:	79fb      	ldrb	r3, [r7, #7]
 800dc98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800dca0:	2301      	movs	r3, #1
 800dca2:	73fb      	strb	r3, [r7, #15]
 800dca4:	e007      	b.n	800dcb6 <mpu_set_sensors+0x2a>
    else if (sensors)
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d002      	beq.n	800dcb2 <mpu_set_sensors+0x26>
        data = 0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	73fb      	strb	r3, [r7, #15]
 800dcb0:	e001      	b.n	800dcb6 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800dcb2:	2340      	movs	r3, #64	; 0x40
 800dcb4:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800dcb6:	4b37      	ldr	r3, [pc, #220]	; (800dd94 <mpu_set_sensors+0x108>)
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	7818      	ldrb	r0, [r3, #0]
 800dcbc:	4b35      	ldr	r3, [pc, #212]	; (800dd94 <mpu_set_sensors+0x108>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	7d59      	ldrb	r1, [r3, #21]
 800dcc2:	f107 030f 	add.w	r3, r7, #15
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f002 fc02 	bl	80104d0 <dmp_i2c_write>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d005      	beq.n	800dcde <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 800dcd2:	4b30      	ldr	r3, [pc, #192]	; (800dd94 <mpu_set_sensors+0x108>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	729a      	strb	r2, [r3, #10]
        return -1;
 800dcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcdc:	e056      	b.n	800dd8c <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	4b2b      	ldr	r3, [pc, #172]	; (800dd94 <mpu_set_sensors+0x108>)
 800dce8:	731a      	strb	r2, [r3, #12]

    data = 0;
 800dcea:	2300      	movs	r3, #0
 800dcec:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d104      	bne.n	800dd02 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	f043 0304 	orr.w	r3, r3, #4
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	f003 0320 	and.w	r3, r3, #32
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d104      	bne.n	800dd16 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800dd0c:	7bfb      	ldrb	r3, [r7, #15]
 800dd0e:	f043 0302 	orr.w	r3, r3, #2
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	f003 0310 	and.w	r3, r3, #16
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d104      	bne.n	800dd2a <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	f003 0308 	and.w	r3, r3, #8
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d104      	bne.n	800dd3e <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800dd3e:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <mpu_set_sensors+0x108>)
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	7818      	ldrb	r0, [r3, #0]
 800dd44:	4b13      	ldr	r3, [pc, #76]	; (800dd94 <mpu_set_sensors+0x108>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	7d99      	ldrb	r1, [r3, #22]
 800dd4a:	f107 030f 	add.w	r3, r7, #15
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f002 fbbe 	bl	80104d0 <dmp_i2c_write>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d005      	beq.n	800dd66 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 800dd5a:	4b0e      	ldr	r3, [pc, #56]	; (800dd94 <mpu_set_sensors+0x108>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	729a      	strb	r2, [r3, #10]
        return -1;
 800dd60:	f04f 33ff 	mov.w	r3, #4294967295
 800dd64:	e012      	b.n	800dd8c <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <mpu_set_sensors+0xec>
 800dd6c:	79fb      	ldrb	r3, [r7, #7]
 800dd6e:	2b08      	cmp	r3, #8
 800dd70:	d002      	beq.n	800dd78 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800dd72:	2000      	movs	r0, #0
 800dd74:	f000 f954 	bl	800e020 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 800dd78:	4a06      	ldr	r2, [pc, #24]	; (800dd94 <mpu_set_sensors+0x108>)
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800dd7e:	4b05      	ldr	r3, [pc, #20]	; (800dd94 <mpu_set_sensors+0x108>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800dd84:	2032      	movs	r0, #50	; 0x32
 800dd86:	f002 fb8b 	bl	80104a0 <my_hal_delay>
    return 0;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20000028 	.word	0x20000028

0800dd98 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 800dda6:	4b3a      	ldr	r3, [pc, #232]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800dda8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d102      	bne.n	800ddb6 <mpu_read_fifo_stream+0x1e>
        return -1;
 800ddb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb4:	e068      	b.n	800de88 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 800ddb6:	4b36      	ldr	r3, [pc, #216]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800ddb8:	7a9b      	ldrb	r3, [r3, #10]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d102      	bne.n	800ddc4 <mpu_read_fifo_stream+0x2c>
        return -1;
 800ddbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc2:	e061      	b.n	800de88 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800ddc4:	4b32      	ldr	r3, [pc, #200]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	7818      	ldrb	r0, [r3, #0]
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	7b19      	ldrb	r1, [r3, #12]
 800ddd0:	f107 0314 	add.w	r3, r7, #20
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	f002 fb9d 	bl	8010514 <dmp_i2c_read>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <mpu_read_fifo_stream+0x4e>
        return -1;
 800dde0:	f04f 33ff 	mov.w	r3, #4294967295
 800dde4:	e050      	b.n	800de88 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800dde6:	7d3b      	ldrb	r3, [r7, #20]
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	b21a      	sxth	r2, r3
 800ddec:	7d7b      	ldrb	r3, [r7, #21]
 800ddee:	b21b      	sxth	r3, r3
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	b21b      	sxth	r3, r3
 800ddf4:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 800ddf6:	8afa      	ldrh	r2, [r7, #22]
 800ddf8:	89fb      	ldrh	r3, [r7, #14]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d205      	bcs.n	800de0a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	701a      	strb	r2, [r3, #0]
        return -1;
 800de04:	f04f 33ff 	mov.w	r3, #4294967295
 800de08:	e03e      	b.n	800de88 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800de0a:	4b21      	ldr	r3, [pc, #132]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	885b      	ldrh	r3, [r3, #2]
 800de10:	085b      	lsrs	r3, r3, #1
 800de12:	b29b      	uxth	r3, r3
 800de14:	8afa      	ldrh	r2, [r7, #22]
 800de16:	429a      	cmp	r2, r3
 800de18:	d91a      	bls.n	800de50 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800de1a:	4b1d      	ldr	r3, [pc, #116]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	7818      	ldrb	r0, [r3, #0]
 800de20:	4b1b      	ldr	r3, [pc, #108]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	7cd9      	ldrb	r1, [r3, #19]
 800de26:	f107 0314 	add.w	r3, r7, #20
 800de2a:	2201      	movs	r2, #1
 800de2c:	f002 fb72 	bl	8010514 <dmp_i2c_read>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <mpu_read_fifo_stream+0xa4>
            return -1;
 800de36:	f04f 33ff 	mov.w	r3, #4294967295
 800de3a:	e025      	b.n	800de88 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 800de3c:	7d3b      	ldrb	r3, [r7, #20]
 800de3e:	f003 0310 	and.w	r3, r3, #16
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 800de46:	f7ff fb0d 	bl	800d464 <mpu_reset_fifo>
            return -2;
 800de4a:	f06f 0301 	mvn.w	r3, #1
 800de4e:	e01b      	b.n	800de88 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800de50:	4b0f      	ldr	r3, [pc, #60]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	7818      	ldrb	r0, [r3, #0]
 800de56:	4b0e      	ldr	r3, [pc, #56]	; (800de90 <mpu_read_fifo_stream+0xf8>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	7b59      	ldrb	r1, [r3, #13]
 800de5c:	89fb      	ldrh	r3, [r7, #14]
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	f002 fb57 	bl	8010514 <dmp_i2c_read>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d002      	beq.n	800de72 <mpu_read_fifo_stream+0xda>
        return -1;
 800de6c:	f04f 33ff 	mov.w	r3, #4294967295
 800de70:	e00a      	b.n	800de88 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 800de72:	8afa      	ldrh	r2, [r7, #22]
 800de74:	89fb      	ldrh	r3, [r7, #14]
 800de76:	fbb2 f3f3 	udiv	r3, r2, r3
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	3b01      	subs	r3, #1
 800de80:	b2da      	uxtb	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	701a      	strb	r2, [r3, #0]
    return 0;
 800de86:	2300      	movs	r3, #0
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	20000028 	.word	0x20000028

0800de94 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	4603      	mov	r3, r0
 800de9c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800de9e:	4b5f      	ldr	r3, [pc, #380]	; (800e01c <mpu_set_bypass+0x188>)
 800dea0:	7c9b      	ldrb	r3, [r3, #18]
 800dea2:	79fa      	ldrb	r2, [r7, #7]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d101      	bne.n	800deac <mpu_set_bypass+0x18>
        return 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	e0b2      	b.n	800e012 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d050      	beq.n	800df54 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800deb2:	4b5a      	ldr	r3, [pc, #360]	; (800e01c <mpu_set_bypass+0x188>)
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	7818      	ldrb	r0, [r3, #0]
 800deb8:	4b58      	ldr	r3, [pc, #352]	; (800e01c <mpu_set_bypass+0x188>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	7919      	ldrb	r1, [r3, #4]
 800debe:	f107 030f 	add.w	r3, r7, #15
 800dec2:	2201      	movs	r2, #1
 800dec4:	f002 fb26 	bl	8010514 <dmp_i2c_read>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d002      	beq.n	800ded4 <mpu_set_bypass+0x40>
            return -1;
 800dece:	f04f 33ff 	mov.w	r3, #4294967295
 800ded2:	e09e      	b.n	800e012 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 800ded4:	7bfb      	ldrb	r3, [r7, #15]
 800ded6:	f023 0320 	bic.w	r3, r3, #32
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800dede:	4b4f      	ldr	r3, [pc, #316]	; (800e01c <mpu_set_bypass+0x188>)
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	7818      	ldrb	r0, [r3, #0]
 800dee4:	4b4d      	ldr	r3, [pc, #308]	; (800e01c <mpu_set_bypass+0x188>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	7919      	ldrb	r1, [r3, #4]
 800deea:	f107 030f 	add.w	r3, r7, #15
 800deee:	2201      	movs	r2, #1
 800def0:	f002 faee 	bl	80104d0 <dmp_i2c_write>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d002      	beq.n	800df00 <mpu_set_bypass+0x6c>
            return -1;
 800defa:	f04f 33ff 	mov.w	r3, #4294967295
 800defe:	e088      	b.n	800e012 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800df00:	2003      	movs	r0, #3
 800df02:	f002 facd 	bl	80104a0 <my_hal_delay>
        tmp = BIT_BYPASS_EN;
 800df06:	2302      	movs	r3, #2
 800df08:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800df0a:	4b44      	ldr	r3, [pc, #272]	; (800e01c <mpu_set_bypass+0x188>)
 800df0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 800df14:	7bfb      	ldrb	r3, [r7, #15]
 800df16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800df1e:	4b3f      	ldr	r3, [pc, #252]	; (800e01c <mpu_set_bypass+0x188>)
 800df20:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800df28:	7bfb      	ldrb	r3, [r7, #15]
 800df2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800df32:	4b3a      	ldr	r3, [pc, #232]	; (800e01c <mpu_set_bypass+0x188>)
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	7818      	ldrb	r0, [r3, #0]
 800df38:	4b38      	ldr	r3, [pc, #224]	; (800e01c <mpu_set_bypass+0x188>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	7dd9      	ldrb	r1, [r3, #23]
 800df3e:	f107 030f 	add.w	r3, r7, #15
 800df42:	2201      	movs	r2, #1
 800df44:	f002 fac4 	bl	80104d0 <dmp_i2c_write>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d05d      	beq.n	800e00a <mpu_set_bypass+0x176>
            return -1;
 800df4e:	f04f 33ff 	mov.w	r3, #4294967295
 800df52:	e05e      	b.n	800e012 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800df54:	4b31      	ldr	r3, [pc, #196]	; (800e01c <mpu_set_bypass+0x188>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	7818      	ldrb	r0, [r3, #0]
 800df5a:	4b30      	ldr	r3, [pc, #192]	; (800e01c <mpu_set_bypass+0x188>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	7919      	ldrb	r1, [r3, #4]
 800df60:	f107 030f 	add.w	r3, r7, #15
 800df64:	2201      	movs	r2, #1
 800df66:	f002 fad5 	bl	8010514 <dmp_i2c_read>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <mpu_set_bypass+0xe2>
            return -1;
 800df70:	f04f 33ff 	mov.w	r3, #4294967295
 800df74:	e04d      	b.n	800e012 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800df76:	4b29      	ldr	r3, [pc, #164]	; (800e01c <mpu_set_bypass+0x188>)
 800df78:	7a9b      	ldrb	r3, [r3, #10]
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d005      	beq.n	800df8e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 800df82:	7bfb      	ldrb	r3, [r7, #15]
 800df84:	f043 0320 	orr.w	r3, r3, #32
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	73fb      	strb	r3, [r7, #15]
 800df8c:	e004      	b.n	800df98 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	f023 0320 	bic.w	r3, r3, #32
 800df94:	b2db      	uxtb	r3, r3
 800df96:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800df98:	4b20      	ldr	r3, [pc, #128]	; (800e01c <mpu_set_bypass+0x188>)
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	7818      	ldrb	r0, [r3, #0]
 800df9e:	4b1f      	ldr	r3, [pc, #124]	; (800e01c <mpu_set_bypass+0x188>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	7919      	ldrb	r1, [r3, #4]
 800dfa4:	f107 030f 	add.w	r3, r7, #15
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f002 fa91 	bl	80104d0 <dmp_i2c_write>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <mpu_set_bypass+0x126>
            return -1;
 800dfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb8:	e02b      	b.n	800e012 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800dfba:	2003      	movs	r0, #3
 800dfbc:	f002 fa70 	bl	80104a0 <my_hal_delay>
        if (st.chip_cfg.active_low_int)
 800dfc0:	4b16      	ldr	r3, [pc, #88]	; (800e01c <mpu_set_bypass+0x188>)
 800dfc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d002      	beq.n	800dfd0 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800dfca:	2380      	movs	r3, #128	; 0x80
 800dfcc:	73fb      	strb	r3, [r7, #15]
 800dfce:	e001      	b.n	800dfd4 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800dfd4:	4b11      	ldr	r3, [pc, #68]	; (800e01c <mpu_set_bypass+0x188>)
 800dfd6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d004      	beq.n	800dfe8 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800dfde:	7bfb      	ldrb	r3, [r7, #15]
 800dfe0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800dfe8:	4b0c      	ldr	r3, [pc, #48]	; (800e01c <mpu_set_bypass+0x188>)
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	7818      	ldrb	r0, [r3, #0]
 800dfee:	4b0b      	ldr	r3, [pc, #44]	; (800e01c <mpu_set_bypass+0x188>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	7dd9      	ldrb	r1, [r3, #23]
 800dff4:	f107 030f 	add.w	r3, r7, #15
 800dff8:	2201      	movs	r2, #1
 800dffa:	f002 fa69 	bl	80104d0 <dmp_i2c_write>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <mpu_set_bypass+0x176>
            return -1;
 800e004:	f04f 33ff 	mov.w	r3, #4294967295
 800e008:	e003      	b.n	800e012 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800e00a:	4a04      	ldr	r2, [pc, #16]	; (800e01c <mpu_set_bypass+0x188>)
 800e00c:	79fb      	ldrb	r3, [r7, #7]
 800e00e:	7493      	strb	r3, [r2, #18]
    return 0;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	20000028 	.word	0x20000028

0800e020 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	4603      	mov	r3, r0
 800e028:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800e02a:	4b1e      	ldr	r3, [pc, #120]	; (800e0a4 <mpu_set_int_latched+0x84>)
 800e02c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e030:	79fa      	ldrb	r2, [r7, #7]
 800e032:	429a      	cmp	r2, r3
 800e034:	d101      	bne.n	800e03a <mpu_set_int_latched+0x1a>
        return 0;
 800e036:	2300      	movs	r3, #0
 800e038:	e030      	b.n	800e09c <mpu_set_int_latched+0x7c>

    if (enable)
 800e03a:	79fb      	ldrb	r3, [r7, #7]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800e040:	2330      	movs	r3, #48	; 0x30
 800e042:	73fb      	strb	r3, [r7, #15]
 800e044:	e001      	b.n	800e04a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800e04a:	4b16      	ldr	r3, [pc, #88]	; (800e0a4 <mpu_set_int_latched+0x84>)
 800e04c:	7c9b      	ldrb	r3, [r3, #18]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d004      	beq.n	800e05c <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	f043 0302 	orr.w	r3, r3, #2
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800e05c:	4b11      	ldr	r3, [pc, #68]	; (800e0a4 <mpu_set_int_latched+0x84>)
 800e05e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 800e066:	7bfb      	ldrb	r3, [r7, #15]
 800e068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800e070:	4b0c      	ldr	r3, [pc, #48]	; (800e0a4 <mpu_set_int_latched+0x84>)
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	7818      	ldrb	r0, [r3, #0]
 800e076:	4b0b      	ldr	r3, [pc, #44]	; (800e0a4 <mpu_set_int_latched+0x84>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	7dd9      	ldrb	r1, [r3, #23]
 800e07c:	f107 030f 	add.w	r3, r7, #15
 800e080:	2201      	movs	r2, #1
 800e082:	f002 fa25 	bl	80104d0 <dmp_i2c_write>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <mpu_set_int_latched+0x72>
        return -1;
 800e08c:	f04f 33ff 	mov.w	r3, #4294967295
 800e090:	e004      	b.n	800e09c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 800e092:	4a04      	ldr	r2, [pc, #16]	; (800e0a4 <mpu_set_int_latched+0x84>)
 800e094:	79fb      	ldrb	r3, [r7, #7]
 800e096:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	20000028 	.word	0x20000028

0800e0a8 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b086      	sub	sp, #24
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 800e0b0:	4b41      	ldr	r3, [pc, #260]	; (800e1b8 <get_accel_prod_shift+0x110>)
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	7818      	ldrb	r0, [r3, #0]
 800e0b6:	f107 0310 	add.w	r3, r7, #16
 800e0ba:	2204      	movs	r2, #4
 800e0bc:	210d      	movs	r1, #13
 800e0be:	f002 fa29 	bl	8010514 <dmp_i2c_read>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <get_accel_prod_shift+0x24>
        return 0x07;
 800e0c8:	2307      	movs	r3, #7
 800e0ca:	e071      	b.n	800e1b0 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800e0cc:	7c3b      	ldrb	r3, [r7, #16]
 800e0ce:	10db      	asrs	r3, r3, #3
 800e0d0:	b25b      	sxtb	r3, r3
 800e0d2:	f003 031c 	and.w	r3, r3, #28
 800e0d6:	b25a      	sxtb	r2, r3
 800e0d8:	7cfb      	ldrb	r3, [r7, #19]
 800e0da:	111b      	asrs	r3, r3, #4
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	b25b      	sxtb	r3, r3
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	b25b      	sxtb	r3, r3
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800e0ec:	7c7b      	ldrb	r3, [r7, #17]
 800e0ee:	10db      	asrs	r3, r3, #3
 800e0f0:	b25b      	sxtb	r3, r3
 800e0f2:	f003 031c 	and.w	r3, r3, #28
 800e0f6:	b25a      	sxtb	r2, r3
 800e0f8:	7cfb      	ldrb	r3, [r7, #19]
 800e0fa:	109b      	asrs	r3, r3, #2
 800e0fc:	b25b      	sxtb	r3, r3
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	b25b      	sxtb	r3, r3
 800e104:	4313      	orrs	r3, r2
 800e106:	b25b      	sxtb	r3, r3
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800e10c:	7cbb      	ldrb	r3, [r7, #18]
 800e10e:	10db      	asrs	r3, r3, #3
 800e110:	b25b      	sxtb	r3, r3
 800e112:	f003 031c 	and.w	r3, r3, #28
 800e116:	b25a      	sxtb	r2, r3
 800e118:	7cfb      	ldrb	r3, [r7, #19]
 800e11a:	b25b      	sxtb	r3, r3
 800e11c:	f003 0303 	and.w	r3, r3, #3
 800e120:	b25b      	sxtb	r3, r3
 800e122:	4313      	orrs	r3, r2
 800e124:	b25b      	sxtb	r3, r3
 800e126:	b2db      	uxtb	r3, r3
 800e128:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 800e12a:	2300      	movs	r3, #0
 800e12c:	75fb      	strb	r3, [r7, #23]
 800e12e:	e03b      	b.n	800e1a8 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 800e130:	7dfb      	ldrb	r3, [r7, #23]
 800e132:	3318      	adds	r3, #24
 800e134:	443b      	add	r3, r7
 800e136:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d107      	bne.n	800e14e <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 800e13e:	7dfb      	ldrb	r3, [r7, #23]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	4413      	add	r3, r2
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
            continue;
 800e14c:	e029      	b.n	800e1a2 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	4413      	add	r3, r2
 800e156:	4a19      	ldr	r2, [pc, #100]	; (800e1bc <get_accel_prod_shift+0x114>)
 800e158:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 800e15a:	e00f      	b.n	800e17c <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 800e15c:	7dfb      	ldrb	r3, [r7, #23]
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	4413      	add	r3, r2
 800e164:	edd3 7a00 	vldr	s15, [r3]
 800e168:	7dfb      	ldrb	r3, [r7, #23]
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	4413      	add	r3, r2
 800e170:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800e1c0 <get_accel_prod_shift+0x118>
 800e174:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e178:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 800e17c:	7dfb      	ldrb	r3, [r7, #23]
 800e17e:	f103 0218 	add.w	r2, r3, #24
 800e182:	443a      	add	r2, r7
 800e184:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e188:	3a01      	subs	r2, #1
 800e18a:	b2d1      	uxtb	r1, r2
 800e18c:	f103 0218 	add.w	r2, r3, #24
 800e190:	443a      	add	r2, r7
 800e192:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800e196:	3318      	adds	r3, #24
 800e198:	443b      	add	r3, r7
 800e19a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1dc      	bne.n	800e15c <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	75fb      	strb	r3, [r7, #23]
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d9c0      	bls.n	800e130 <get_accel_prod_shift+0x88>
    }
    return 0;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3718      	adds	r7, #24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20000028 	.word	0x20000028
 800e1bc:	3eae147b 	.word	0x3eae147b
 800e1c0:	3f845a1d 	.word	0x3f845a1d

0800e1c4 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b08a      	sub	sp, #40	; 0x28
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800e1d2:	f107 030c 	add.w	r3, r7, #12
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7ff ff66 	bl	800e0a8 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 800e1dc:	2300      	movs	r3, #0
 800e1de:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e0:	e063      	b.n	800e2aa <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	440b      	add	r3, r1
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	bfb8      	it	lt
 800e1fc:	425b      	neglt	r3, r3
 800e1fe:	ee07 3a90 	vmov	s15, r3
 800e202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e206:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e2bc <accel_self_test+0xf8>
 800e20a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e20e:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	3328      	adds	r3, #40	; 0x28
 800e218:	443b      	add	r3, r7
 800e21a:	3b1c      	subs	r3, #28
 800e21c:	edd3 7a00 	vldr	s15, [r3]
 800e220:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e228:	d023      	beq.n	800e272 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	3328      	adds	r3, #40	; 0x28
 800e230:	443b      	add	r3, r7
 800e232:	3b1c      	subs	r3, #28
 800e234:	ed93 7a00 	vldr	s14, [r3]
 800e238:	edd7 6a07 	vldr	s13, [r7, #28]
 800e23c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e248:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 800e24c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e250:	eef0 7ae7 	vabs.f32	s15, s15
 800e254:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e2c0 <accel_self_test+0xfc>
 800e258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e260:	dd20      	ble.n	800e2a4 <accel_self_test+0xe0>
                result |= 1 << jj;
 800e262:	2201      	movs	r2, #1
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	fa02 f303 	lsl.w	r3, r2, r3
 800e26a:	6a3a      	ldr	r2, [r7, #32]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	623b      	str	r3, [r7, #32]
 800e270:	e018      	b.n	800e2a4 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 800e272:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e2c4 <accel_self_test+0x100>
 800e276:	edd7 7a07 	vldr	s15, [r7, #28]
 800e27a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e282:	d408      	bmi.n	800e296 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 800e284:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e2c8 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 800e288:	edd7 7a07 	vldr	s15, [r7, #28]
 800e28c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e294:	dd06      	ble.n	800e2a4 <accel_self_test+0xe0>
            result |= 1 << jj;
 800e296:	2201      	movs	r2, #1
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	fa02 f303 	lsl.w	r3, r2, r3
 800e29e:	6a3a      	ldr	r2, [r7, #32]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	dd98      	ble.n	800e1e2 <accel_self_test+0x1e>
    }

    return result;
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3728      	adds	r7, #40	; 0x28
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	47800000 	.word	0x47800000
 800e2c0:	3e0f5c29 	.word	0x3e0f5c29
 800e2c4:	3e99999a 	.word	0x3e99999a
 800e2c8:	3f733333 	.word	0x3f733333

0800e2cc <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800e2da:	4b55      	ldr	r3, [pc, #340]	; (800e430 <gyro_self_test+0x164>)
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	7818      	ldrb	r0, [r3, #0]
 800e2e0:	f107 0308 	add.w	r3, r7, #8
 800e2e4:	2203      	movs	r2, #3
 800e2e6:	210d      	movs	r1, #13
 800e2e8:	f002 f914 	bl	8010514 <dmp_i2c_read>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <gyro_self_test+0x2a>
        return 0x07;
 800e2f2:	2307      	movs	r3, #7
 800e2f4:	e097      	b.n	800e426 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 800e2f6:	7a3b      	ldrb	r3, [r7, #8]
 800e2f8:	f003 031f 	and.w	r3, r3, #31
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800e300:	7a7b      	ldrb	r3, [r7, #9]
 800e302:	f003 031f 	and.w	r3, r3, #31
 800e306:	b2db      	uxtb	r3, r3
 800e308:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 800e30a:	7abb      	ldrb	r3, [r7, #10]
 800e30c:	f003 031f 	and.w	r3, r3, #31
 800e310:	b2db      	uxtb	r3, r3
 800e312:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 800e314:	2300      	movs	r3, #0
 800e316:	61fb      	str	r3, [r7, #28]
 800e318:	e080      	b.n	800e41c <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4413      	add	r3, r2
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	440b      	add	r3, r1
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	bfb8      	it	lt
 800e334:	425b      	neglt	r3, r3
 800e336:	ee07 3a90 	vmov	s15, r3
 800e33a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e33e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e434 <gyro_self_test+0x168>
 800e342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e346:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 800e34a:	f107 0208 	add.w	r2, r7, #8
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	4413      	add	r3, r2
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d045      	beq.n	800e3e4 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 800e358:	eddf 7a37 	vldr	s15, [pc, #220]	; 800e438 <gyro_self_test+0x16c>
 800e35c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e360:	eddf 6a36 	vldr	s13, [pc, #216]	; 800e43c <gyro_self_test+0x170>
 800e364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e368:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800e36c:	e007      	b.n	800e37e <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 800e36e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e372:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e440 <gyro_self_test+0x174>
 800e376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e37a:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800e37e:	f107 0208 	add.w	r2, r7, #8
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	4413      	add	r3, r2
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	3b01      	subs	r3, #1
 800e38a:	b2d9      	uxtb	r1, r3
 800e38c:	f107 0208 	add.w	r2, r7, #8
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	4413      	add	r3, r2
 800e394:	460a      	mov	r2, r1
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	f107 0208 	add.w	r2, r7, #8
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	4413      	add	r3, r2
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1e3      	bne.n	800e36e <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800e3a6:	edd7 6a04 	vldr	s13, [r7, #16]
 800e3aa:	ed97 7a05 	vldr	s14, [r7, #20]
 800e3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3ba:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800e3be:	edd7 7a03 	vldr	s15, [r7, #12]
 800e3c2:	eef0 7ae7 	vabs.f32	s15, s15
 800e3c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e444 <gyro_self_test+0x178>
 800e3ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	dd20      	ble.n	800e416 <gyro_self_test+0x14a>
                result |= 1 << jj;
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	61bb      	str	r3, [r7, #24]
 800e3e2:	e018      	b.n	800e416 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 800e3e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e3e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f4:	d408      	bmi.n	800e408 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 800e3f6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e448 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 800e3fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e406:	dd06      	ble.n	800e416 <gyro_self_test+0x14a>
            result |= 1 << jj;
 800e408:	2201      	movs	r2, #1
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	fa02 f303 	lsl.w	r3, r2, r3
 800e410:	69ba      	ldr	r2, [r7, #24]
 800e412:	4313      	orrs	r3, r2
 800e414:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	3301      	adds	r3, #1
 800e41a:	61fb      	str	r3, [r7, #28]
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	f77f af7b 	ble.w	800e31a <gyro_self_test+0x4e>
    }
    return result;
 800e424:	69bb      	ldr	r3, [r7, #24]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20000028 	.word	0x20000028
 800e434:	47800000 	.word	0x47800000
 800e438:	00000083 	.word	0x00000083
 800e43c:	454cb000 	.word	0x454cb000
 800e440:	3f85e354 	.word	0x3f85e354
 800e444:	3e0f5c29 	.word	0x3e0f5c29
 800e448:	42d20000 	.word	0x42d20000

0800e44c <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 800e44c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e450:	b0b8      	sub	sp, #224	; 0xe0
 800e452:	af00      	add	r7, sp, #0
 800e454:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 800e458:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e45c:	4613      	mov	r3, r2
 800e45e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 800e462:	2301      	movs	r3, #1
 800e464:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800e46e:	4ba5      	ldr	r3, [pc, #660]	; (800e704 <get_st_biases+0x2b8>)
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	7818      	ldrb	r0, [r3, #0]
 800e474:	4ba3      	ldr	r3, [pc, #652]	; (800e704 <get_st_biases+0x2b8>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	7d59      	ldrb	r1, [r3, #21]
 800e47a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e47e:	2202      	movs	r2, #2
 800e480:	f002 f826 	bl	80104d0 <dmp_i2c_write>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <get_st_biases+0x44>
        return -1;
 800e48a:	f04f 33ff 	mov.w	r3, #4294967295
 800e48e:	e34b      	b.n	800eb28 <get_st_biases+0x6dc>
    delay_ms(200);
 800e490:	20c8      	movs	r0, #200	; 0xc8
 800e492:	f002 f805 	bl	80104a0 <my_hal_delay>
    data[0] = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800e49c:	4b99      	ldr	r3, [pc, #612]	; (800e704 <get_st_biases+0x2b8>)
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	7818      	ldrb	r0, [r3, #0]
 800e4a2:	4b98      	ldr	r3, [pc, #608]	; (800e704 <get_st_biases+0x2b8>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	7c59      	ldrb	r1, [r3, #17]
 800e4a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	f002 f80f 	bl	80104d0 <dmp_i2c_write>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <get_st_biases+0x72>
        return -1;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	e334      	b.n	800eb28 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800e4be:	4b91      	ldr	r3, [pc, #580]	; (800e704 <get_st_biases+0x2b8>)
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	7818      	ldrb	r0, [r3, #0]
 800e4c4:	4b8f      	ldr	r3, [pc, #572]	; (800e704 <get_st_biases+0x2b8>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	7959      	ldrb	r1, [r3, #5]
 800e4ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f001 fffe 	bl	80104d0 <dmp_i2c_write>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <get_st_biases+0x94>
        return -1;
 800e4da:	f04f 33ff 	mov.w	r3, #4294967295
 800e4de:	e323      	b.n	800eb28 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800e4e0:	4b88      	ldr	r3, [pc, #544]	; (800e704 <get_st_biases+0x2b8>)
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	7818      	ldrb	r0, [r3, #0]
 800e4e6:	4b87      	ldr	r3, [pc, #540]	; (800e704 <get_st_biases+0x2b8>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	7d59      	ldrb	r1, [r3, #21]
 800e4ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f001 ffed 	bl	80104d0 <dmp_i2c_write>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <get_st_biases+0xb6>
        return -1;
 800e4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e500:	e312      	b.n	800eb28 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800e502:	4b80      	ldr	r3, [pc, #512]	; (800e704 <get_st_biases+0x2b8>)
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	7818      	ldrb	r0, [r3, #0]
 800e508:	4b7e      	ldr	r3, [pc, #504]	; (800e704 <get_st_biases+0x2b8>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	7e99      	ldrb	r1, [r3, #26]
 800e50e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e512:	2201      	movs	r2, #1
 800e514:	f001 ffdc 	bl	80104d0 <dmp_i2c_write>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <get_st_biases+0xd8>
        return -1;
 800e51e:	f04f 33ff 	mov.w	r3, #4294967295
 800e522:	e301      	b.n	800eb28 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800e524:	4b77      	ldr	r3, [pc, #476]	; (800e704 <get_st_biases+0x2b8>)
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	7818      	ldrb	r0, [r3, #0]
 800e52a:	4b76      	ldr	r3, [pc, #472]	; (800e704 <get_st_biases+0x2b8>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	7919      	ldrb	r1, [r3, #4]
 800e530:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e534:	2201      	movs	r2, #1
 800e536:	f001 ffcb 	bl	80104d0 <dmp_i2c_write>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <get_st_biases+0xfa>
        return -1;
 800e540:	f04f 33ff 	mov.w	r3, #4294967295
 800e544:	e2f0      	b.n	800eb28 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800e546:	230c      	movs	r3, #12
 800e548:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800e54c:	4b6d      	ldr	r3, [pc, #436]	; (800e704 <get_st_biases+0x2b8>)
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	7818      	ldrb	r0, [r3, #0]
 800e552:	4b6c      	ldr	r3, [pc, #432]	; (800e704 <get_st_biases+0x2b8>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	7919      	ldrb	r1, [r3, #4]
 800e558:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e55c:	2201      	movs	r2, #1
 800e55e:	f001 ffb7 	bl	80104d0 <dmp_i2c_write>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <get_st_biases+0x122>
        return -1;
 800e568:	f04f 33ff 	mov.w	r3, #4294967295
 800e56c:	e2dc      	b.n	800eb28 <get_st_biases+0x6dc>
    delay_ms(15);
 800e56e:	200f      	movs	r0, #15
 800e570:	f001 ff96 	bl	80104a0 <my_hal_delay>
    data[0] = st.test->reg_lpf;
 800e574:	4b63      	ldr	r3, [pc, #396]	; (800e704 <get_st_biases+0x2b8>)
 800e576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e578:	7a5b      	ldrb	r3, [r3, #9]
 800e57a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800e57e:	4b61      	ldr	r3, [pc, #388]	; (800e704 <get_st_biases+0x2b8>)
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	7818      	ldrb	r0, [r3, #0]
 800e584:	4b5f      	ldr	r3, [pc, #380]	; (800e704 <get_st_biases+0x2b8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	7899      	ldrb	r1, [r3, #2]
 800e58a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e58e:	2201      	movs	r2, #1
 800e590:	f001 ff9e 	bl	80104d0 <dmp_i2c_write>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d002      	beq.n	800e5a0 <get_st_biases+0x154>
        return -1;
 800e59a:	f04f 33ff 	mov.w	r3, #4294967295
 800e59e:	e2c3      	b.n	800eb28 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 800e5a0:	4b58      	ldr	r3, [pc, #352]	; (800e704 <get_st_biases+0x2b8>)
 800e5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a4:	7a1b      	ldrb	r3, [r3, #8]
 800e5a6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800e5aa:	4b56      	ldr	r3, [pc, #344]	; (800e704 <get_st_biases+0x2b8>)
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	7818      	ldrb	r0, [r3, #0]
 800e5b0:	4b54      	ldr	r3, [pc, #336]	; (800e704 <get_st_biases+0x2b8>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	7859      	ldrb	r1, [r3, #1]
 800e5b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f001 ff88 	bl	80104d0 <dmp_i2c_write>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <get_st_biases+0x180>
        return -1;
 800e5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ca:	e2ad      	b.n	800eb28 <get_st_biases+0x6dc>
    if (hw_test)
 800e5cc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d008      	beq.n	800e5e6 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 800e5d4:	4b4b      	ldr	r3, [pc, #300]	; (800e704 <get_st_biases+0x2b8>)
 800e5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d8:	7a9b      	ldrb	r3, [r3, #10]
 800e5da:	f063 031f 	orn	r3, r3, #31
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800e5e4:	e004      	b.n	800e5f0 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 800e5e6:	4b47      	ldr	r3, [pc, #284]	; (800e704 <get_st_biases+0x2b8>)
 800e5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ea:	7a9b      	ldrb	r3, [r3, #10]
 800e5ec:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 800e5f0:	4b44      	ldr	r3, [pc, #272]	; (800e704 <get_st_biases+0x2b8>)
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	7818      	ldrb	r0, [r3, #0]
 800e5f6:	4b43      	ldr	r3, [pc, #268]	; (800e704 <get_st_biases+0x2b8>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	7999      	ldrb	r1, [r3, #6]
 800e5fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e600:	2201      	movs	r2, #1
 800e602:	f001 ff65 	bl	80104d0 <dmp_i2c_write>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <get_st_biases+0x1c6>
        return -1;
 800e60c:	f04f 33ff 	mov.w	r3, #4294967295
 800e610:	e28a      	b.n	800eb28 <get_st_biases+0x6dc>

    if (hw_test)
 800e612:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e616:	2b00      	cmp	r3, #0
 800e618:	d008      	beq.n	800e62c <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800e61a:	4b3a      	ldr	r3, [pc, #232]	; (800e704 <get_st_biases+0x2b8>)
 800e61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61e:	7adb      	ldrb	r3, [r3, #11]
 800e620:	f063 031f 	orn	r3, r3, #31
 800e624:	b2db      	uxtb	r3, r3
 800e626:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800e62a:	e002      	b.n	800e632 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 800e62c:	2318      	movs	r3, #24
 800e62e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800e632:	4b34      	ldr	r3, [pc, #208]	; (800e704 <get_st_biases+0x2b8>)
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	7818      	ldrb	r0, [r3, #0]
 800e638:	4b32      	ldr	r3, [pc, #200]	; (800e704 <get_st_biases+0x2b8>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	79d9      	ldrb	r1, [r3, #7]
 800e63e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e642:	2201      	movs	r2, #1
 800e644:	f001 ff44 	bl	80104d0 <dmp_i2c_write>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d002      	beq.n	800e654 <get_st_biases+0x208>
        return -1;
 800e64e:	f04f 33ff 	mov.w	r3, #4294967295
 800e652:	e269      	b.n	800eb28 <get_st_biases+0x6dc>
    if (hw_test)
 800e654:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <get_st_biases+0x216>
        delay_ms(200);
 800e65c:	20c8      	movs	r0, #200	; 0xc8
 800e65e:	f001 ff1f 	bl	80104a0 <my_hal_delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800e662:	2340      	movs	r3, #64	; 0x40
 800e664:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800e668:	4b26      	ldr	r3, [pc, #152]	; (800e704 <get_st_biases+0x2b8>)
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	7818      	ldrb	r0, [r3, #0]
 800e66e:	4b25      	ldr	r3, [pc, #148]	; (800e704 <get_st_biases+0x2b8>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	7919      	ldrb	r1, [r3, #4]
 800e674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e678:	2201      	movs	r2, #1
 800e67a:	f001 ff29 	bl	80104d0 <dmp_i2c_write>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <get_st_biases+0x23e>
        return -1;
 800e684:	f04f 33ff 	mov.w	r3, #4294967295
 800e688:	e24e      	b.n	800eb28 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800e68a:	2378      	movs	r3, #120	; 0x78
 800e68c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800e690:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <get_st_biases+0x2b8>)
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	7818      	ldrb	r0, [r3, #0]
 800e696:	4b1b      	ldr	r3, [pc, #108]	; (800e704 <get_st_biases+0x2b8>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	7959      	ldrb	r1, [r3, #5]
 800e69c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f001 ff15 	bl	80104d0 <dmp_i2c_write>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d002      	beq.n	800e6b2 <get_st_biases+0x266>
        return -1;
 800e6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b0:	e23a      	b.n	800eb28 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 800e6b2:	2332      	movs	r3, #50	; 0x32
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f001 fef3 	bl	80104a0 <my_hal_delay>
    data[0] = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800e6c0:	4b10      	ldr	r3, [pc, #64]	; (800e704 <get_st_biases+0x2b8>)
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	7818      	ldrb	r0, [r3, #0]
 800e6c6:	4b0f      	ldr	r3, [pc, #60]	; (800e704 <get_st_biases+0x2b8>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	7959      	ldrb	r1, [r3, #5]
 800e6cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f001 fefd 	bl	80104d0 <dmp_i2c_write>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <get_st_biases+0x296>
        return -1;
 800e6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e0:	e222      	b.n	800eb28 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 800e6e2:	4b08      	ldr	r3, [pc, #32]	; (800e704 <get_st_biases+0x2b8>)
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	7818      	ldrb	r0, [r3, #0]
 800e6e8:	4b06      	ldr	r3, [pc, #24]	; (800e704 <get_st_biases+0x2b8>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	7b19      	ldrb	r1, [r3, #12]
 800e6ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	f001 ff0e 	bl	8010514 <dmp_i2c_read>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d004      	beq.n	800e708 <get_st_biases+0x2bc>
        return -1;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	e211      	b.n	800eb28 <get_st_biases+0x6dc>
 800e704:	20000028 	.word	0x20000028

    fifo_count = (data[0] << 8) | data[1];
 800e708:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800e70c:	021b      	lsls	r3, r3, #8
 800e70e:	b21a      	sxth	r2, r3
 800e710:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800e714:	b21b      	sxth	r3, r3
 800e716:	4313      	orrs	r3, r2
 800e718:	b21b      	sxth	r3, r3
 800e71a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800e71e:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800e722:	4b1d      	ldr	r3, [pc, #116]	; (800e798 <get_st_biases+0x34c>)
 800e724:	fba3 2302 	umull	r2, r3, r3, r2
 800e728:	08db      	lsrs	r3, r3, #3
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 800e730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e734:	f103 0108 	add.w	r1, r3, #8
 800e738:	2300      	movs	r3, #0
 800e73a:	600b      	str	r3, [r1, #0]
 800e73c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e740:	1d1a      	adds	r2, r3, #4
 800e742:	680b      	ldr	r3, [r1, #0]
 800e744:	6013      	str	r3, [r2, #0]
 800e746:	6812      	ldr	r2, [r2, #0]
 800e748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e74c:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 800e74e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e752:	f103 0108 	add.w	r1, r3, #8
 800e756:	2300      	movs	r3, #0
 800e758:	600b      	str	r3, [r1, #0]
 800e75a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e75e:	1d1a      	adds	r2, r3, #4
 800e760:	680b      	ldr	r3, [r1, #0]
 800e762:	6013      	str	r3, [r2, #0]
 800e764:	6812      	ldr	r2, [r2, #0]
 800e766:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e76a:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800e76c:	2300      	movs	r3, #0
 800e76e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800e772:	e0a0      	b.n	800e8b6 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 800e774:	4b09      	ldr	r3, [pc, #36]	; (800e79c <get_st_biases+0x350>)
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	7818      	ldrb	r0, [r3, #0]
 800e77a:	4b08      	ldr	r3, [pc, #32]	; (800e79c <get_st_biases+0x350>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	7b59      	ldrb	r1, [r3, #13]
 800e780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e784:	220c      	movs	r2, #12
 800e786:	f001 fec5 	bl	8010514 <dmp_i2c_read>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d007      	beq.n	800e7a0 <get_st_biases+0x354>
            return -1;
 800e790:	f04f 33ff 	mov.w	r3, #4294967295
 800e794:	e1c8      	b.n	800eb28 <get_st_biases+0x6dc>
 800e796:	bf00      	nop
 800e798:	aaaaaaab 	.word	0xaaaaaaab
 800e79c:	20000028 	.word	0x20000028
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 800e7a0:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800e7a4:	021b      	lsls	r3, r3, #8
 800e7a6:	b21a      	sxth	r2, r3
 800e7a8:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800e7ac:	b21b      	sxth	r3, r3
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	b21b      	sxth	r3, r3
 800e7b2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800e7b6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800e7ba:	021b      	lsls	r3, r3, #8
 800e7bc:	b21a      	sxth	r2, r3
 800e7be:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800e7c2:	b21b      	sxth	r3, r3
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	b21b      	sxth	r3, r3
 800e7c8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800e7cc:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800e7d0:	021b      	lsls	r3, r3, #8
 800e7d2:	b21a      	sxth	r2, r3
 800e7d4:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800e7d8:	b21b      	sxth	r3, r3
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	b21b      	sxth	r3, r3
 800e7de:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 800e7e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800e7ec:	441a      	add	r2, r3
 800e7ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7f2:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 800e7f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	6819      	ldr	r1, [r3, #0]
 800e7fc:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800e800:	4618      	mov	r0, r3
 800e802:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e806:	1d1a      	adds	r2, r3, #4
 800e808:	180b      	adds	r3, r1, r0
 800e80a:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800e80c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e810:	3308      	adds	r3, #8
 800e812:	6819      	ldr	r1, [r3, #0]
 800e814:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 800e818:	4618      	mov	r0, r3
 800e81a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e81e:	f103 0208 	add.w	r2, r3, #8
 800e822:	180b      	adds	r3, r1, r0
 800e824:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800e826:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800e82a:	021b      	lsls	r3, r3, #8
 800e82c:	b21a      	sxth	r2, r3
 800e82e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800e832:	b21b      	sxth	r3, r3
 800e834:	4313      	orrs	r3, r2
 800e836:	b21b      	sxth	r3, r3
 800e838:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800e83c:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800e840:	021b      	lsls	r3, r3, #8
 800e842:	b21a      	sxth	r2, r3
 800e844:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800e848:	b21b      	sxth	r3, r3
 800e84a:	4313      	orrs	r3, r2
 800e84c:	b21b      	sxth	r3, r3
 800e84e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800e852:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800e856:	021b      	lsls	r3, r3, #8
 800e858:	b21a      	sxth	r2, r3
 800e85a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800e85e:	b21b      	sxth	r3, r3
 800e860:	4313      	orrs	r3, r2
 800e862:	b21b      	sxth	r3, r3
 800e864:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 800e868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 800e872:	441a      	add	r2, r3
 800e874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e878:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800e87a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e87e:	3304      	adds	r3, #4
 800e880:	6819      	ldr	r1, [r3, #0]
 800e882:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 800e886:	4618      	mov	r0, r3
 800e888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e88c:	1d1a      	adds	r2, r3, #4
 800e88e:	180b      	adds	r3, r1, r0
 800e890:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 800e892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e896:	3308      	adds	r3, #8
 800e898:	6819      	ldr	r1, [r3, #0]
 800e89a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8a4:	f103 0208 	add.w	r2, r3, #8
 800e8a8:	180b      	adds	r3, r1, r0
 800e8aa:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800e8ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800e8b6:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 800e8ba:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	f4ff af58 	bcc.w	800e774 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 800e8c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	17da      	asrs	r2, r3, #31
 800e8cc:	461c      	mov	r4, r3
 800e8ce:	4615      	mov	r5, r2
 800e8d0:	1423      	asrs	r3, r4, #16
 800e8d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e8d6:	0423      	lsls	r3, r4, #16
 800e8d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e8dc:	2283      	movs	r2, #131	; 0x83
 800e8de:	2300      	movs	r3, #0
 800e8e0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800e8e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e8e8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e8ec:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800e8f0:	f7f2 f9ca 	bl	8000c88 <__aeabi_ldivmod>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e900:	2200      	movs	r2, #0
 800e902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e90a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e90e:	f7f2 f9bb 	bl	8000c88 <__aeabi_ldivmod>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e91a:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800e91c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e920:	3304      	adds	r3, #4
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	17da      	asrs	r2, r3, #31
 800e926:	4698      	mov	r8, r3
 800e928:	4691      	mov	r9, r2
 800e92a:	ea4f 4328 	mov.w	r3, r8, asr #16
 800e92e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e932:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800e936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e93a:	2283      	movs	r2, #131	; 0x83
 800e93c:	2300      	movs	r3, #0
 800e93e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e946:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e94a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800e94e:	f7f2 f99b 	bl	8000c88 <__aeabi_ldivmod>
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	4610      	mov	r0, r2
 800e958:	4619      	mov	r1, r3
 800e95a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e95e:	2200      	movs	r2, #0
 800e960:	67bb      	str	r3, [r7, #120]	; 0x78
 800e962:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e964:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e968:	f7f2 f98e 	bl	8000c88 <__aeabi_ldivmod>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4610      	mov	r0, r2
 800e972:	4619      	mov	r1, r3
 800e974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e978:	1d1a      	adds	r2, r3, #4
 800e97a:	4603      	mov	r3, r0
 800e97c:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800e97e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e982:	3308      	adds	r3, #8
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	17da      	asrs	r2, r3, #31
 800e988:	469a      	mov	sl, r3
 800e98a:	4693      	mov	fp, r2
 800e98c:	ea4f 432a 	mov.w	r3, sl, asr #16
 800e990:	677b      	str	r3, [r7, #116]	; 0x74
 800e992:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800e996:	673b      	str	r3, [r7, #112]	; 0x70
 800e998:	2283      	movs	r2, #131	; 0x83
 800e99a:	2300      	movs	r3, #0
 800e99c:	66ba      	str	r2, [r7, #104]	; 0x68
 800e99e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e9a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e9a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800e9a8:	f7f2 f96e 	bl	8000c88 <__aeabi_ldivmod>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	663b      	str	r3, [r7, #96]	; 0x60
 800e9bc:	667a      	str	r2, [r7, #100]	; 0x64
 800e9be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e9c2:	f7f2 f961 	bl	8000c88 <__aeabi_ldivmod>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4610      	mov	r0, r2
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9d2:	f103 0208 	add.w	r2, r3, #8
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800e9da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	17da      	asrs	r2, r3, #31
 800e9e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9e4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e9e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	141b      	asrs	r3, r3, #16
 800e9ee:	657b      	str	r3, [r7, #84]	; 0x54
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	041b      	lsls	r3, r3, #16
 800e9f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e9f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	64ba      	str	r2, [r7, #72]	; 0x48
 800e9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ea04:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ea08:	f7f2 f93e 	bl	8000c88 <__aeabi_ldivmod>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4610      	mov	r0, r2
 800ea12:	4619      	mov	r1, r3
 800ea14:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800ea18:	2200      	movs	r2, #0
 800ea1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ea1c:	647a      	str	r2, [r7, #68]	; 0x44
 800ea1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ea22:	f7f2 f931 	bl	8000c88 <__aeabi_ldivmod>
 800ea26:	4602      	mov	r2, r0
 800ea28:	460b      	mov	r3, r1
 800ea2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea2e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 800ea30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea34:	3304      	adds	r3, #4
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	17da      	asrs	r2, r3, #31
 800ea3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ea42:	460b      	mov	r3, r1
 800ea44:	141b      	asrs	r3, r3, #16
 800ea46:	637b      	str	r3, [r7, #52]	; 0x34
 800ea48:	460b      	mov	r3, r1
 800ea4a:	041b      	lsls	r3, r3, #16
 800ea4c:	633b      	str	r3, [r7, #48]	; 0x30
 800ea4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea52:	2300      	movs	r3, #0
 800ea54:	62ba      	str	r2, [r7, #40]	; 0x28
 800ea56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ea5c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ea60:	f7f2 f912 	bl	8000c88 <__aeabi_ldivmod>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4610      	mov	r0, r2
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800ea70:	2200      	movs	r2, #0
 800ea72:	623b      	str	r3, [r7, #32]
 800ea74:	627a      	str	r2, [r7, #36]	; 0x24
 800ea76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea7a:	f7f2 f905 	bl	8000c88 <__aeabi_ldivmod>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	4610      	mov	r0, r2
 800ea84:	4619      	mov	r1, r3
 800ea86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 800ea90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea94:	3308      	adds	r3, #8
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	17da      	asrs	r2, r3, #31
 800ea9a:	61bb      	str	r3, [r7, #24]
 800ea9c:	61fa      	str	r2, [r7, #28]
 800ea9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	141b      	asrs	r3, r3, #16
 800eaa6:	617b      	str	r3, [r7, #20]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	041b      	lsls	r3, r3, #16
 800eaac:	613b      	str	r3, [r7, #16]
 800eaae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eab2:	2300      	movs	r3, #0
 800eab4:	60ba      	str	r2, [r7, #8]
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eabc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eac0:	f7f2 f8e2 	bl	8000c88 <__aeabi_ldivmod>
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	4610      	mov	r0, r2
 800eaca:	4619      	mov	r1, r3
 800eacc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800ead0:	2200      	movs	r2, #0
 800ead2:	603b      	str	r3, [r7, #0]
 800ead4:	607a      	str	r2, [r7, #4]
 800ead6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eada:	f7f2 f8d5 	bl	8000c88 <__aeabi_ldivmod>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	4610      	mov	r0, r2
 800eae4:	4619      	mov	r1, r3
 800eae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eaea:	3308      	adds	r3, #8
 800eaec:	4602      	mov	r2, r0
 800eaee:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 800eaf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	dd0a      	ble.n	800eb12 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 800eafc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb00:	3308      	adds	r3, #8
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb08:	3308      	adds	r3, #8
 800eb0a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800eb0e:	601a      	str	r2, [r3, #0]
 800eb10:	e009      	b.n	800eb26 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 800eb12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb16:	3308      	adds	r3, #8
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb1e:	3308      	adds	r3, #8
 800eb20:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800eb24:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	37e0      	adds	r7, #224	; 0xe0
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb32:	bf00      	nop

0800eb34 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08e      	sub	sp, #56	; 0x38
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 800eb3e:	2302      	movs	r3, #2
 800eb40:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 800eb44:	4b64      	ldr	r3, [pc, #400]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800eb46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d006      	beq.n	800eb5c <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 800eb4e:	2000      	movs	r0, #0
 800eb50:	f000 f9e6 	bl	800ef20 <mpu_set_dmp_state>
        dmp_was_on = 1;
 800eb54:	2301      	movs	r3, #1
 800eb56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb5a:	e002      	b.n	800eb62 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 800eb62:	f107 030c 	add.w	r3, r7, #12
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fe fd80 	bl	800d66c <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800eb6c:	f107 030f 	add.w	r3, r7, #15
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fe fe03 	bl	800d77c <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800eb76:	f107 0308 	add.w	r3, r7, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe fea0 	bl	800d8c0 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 800eb80:	f107 030a 	add.w	r3, r7, #10
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fe ff27 	bl	800d9d8 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800eb8a:	4b53      	ldr	r3, [pc, #332]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800eb8c:	7a9b      	ldrb	r3, [r3, #10]
 800eb8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 800eb92:	f107 030e 	add.w	r3, r7, #14
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff f814 	bl	800dbc4 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	637b      	str	r3, [r7, #52]	; 0x34
 800eba0:	e00a      	b.n	800ebb8 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 800eba2:	2200      	movs	r2, #0
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff fc50 	bl	800e44c <get_st_biases>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d008      	beq.n	800ebc4 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	dbef      	blt.n	800eba2 <mpu_run_self_test+0x6e>
 800ebc2:	e000      	b.n	800ebc6 <mpu_run_self_test+0x92>
            break;
 800ebc4:	bf00      	nop
    if (ii == tries) {
 800ebc6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d102      	bne.n	800ebd6 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800ebd4:	e045      	b.n	800ec62 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	637b      	str	r3, [r7, #52]	; 0x34
 800ebda:	e00d      	b.n	800ebf8 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 800ebdc:	f107 0110 	add.w	r1, r7, #16
 800ebe0:	f107 031c 	add.w	r3, r7, #28
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff fc30 	bl	800e44c <get_st_biases>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d008      	beq.n	800ec04 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 800ebf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	dbec      	blt.n	800ebdc <mpu_run_self_test+0xa8>
 800ec02:	e000      	b.n	800ec06 <mpu_run_self_test+0xd2>
            break;
 800ec04:	bf00      	nop
    if (ii == tries) {
 800ec06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ec0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d102      	bne.n	800ec16 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800ec14:	e025      	b.n	800ec62 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 800ec16:	f107 0310 	add.w	r3, r7, #16
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6838      	ldr	r0, [r7, #0]
 800ec1e:	f7ff fad1 	bl	800e1c4 <accel_self_test>
 800ec22:	4603      	mov	r3, r0
 800ec24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 800ec28:	f107 031c 	add.w	r3, r7, #28
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7ff fb4c 	bl	800e2cc <gyro_self_test>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		//MPU6050自测返回值为0x03, result = 0x00 | 0x01 | 0x02
    result = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 800ec3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d103      	bne.n	800ec4e <mpu_run_self_test+0x11a>
        result |= 0x01;
 800ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec48:	f043 0301 	orr.w	r3, r3, #1
 800ec4c:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 800ec4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d104      	bne.n	800ec60 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	f043 0302 	orr.w	r3, r3, #2
 800ec5c:	633b      	str	r3, [r7, #48]	; 0x30
 800ec5e:	e000      	b.n	800ec62 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 800ec60:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800ec62:	4b1d      	ldr	r3, [pc, #116]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec64:	22ff      	movs	r2, #255	; 0xff
 800ec66:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800ec68:	4b1b      	ldr	r3, [pc, #108]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec6a:	22ff      	movs	r2, #255	; 0xff
 800ec6c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800ec6e:	4b1a      	ldr	r3, [pc, #104]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec70:	22ff      	movs	r2, #255	; 0xff
 800ec72:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800ec74:	4b18      	ldr	r3, [pc, #96]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec7a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800ec7c:	4b16      	ldr	r3, [pc, #88]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec7e:	22ff      	movs	r2, #255	; 0xff
 800ec80:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800ec82:	4b15      	ldr	r3, [pc, #84]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec84:	22ff      	movs	r2, #255	; 0xff
 800ec86:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800ec88:	4b13      	ldr	r3, [pc, #76]	; (800ecd8 <mpu_run_self_test+0x1a4>)
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800ec8e:	89bb      	ldrh	r3, [r7, #12]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7fe fd1f 	bl	800d6d4 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800ec96:	7bfb      	ldrb	r3, [r7, #15]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe fda9 	bl	800d7f0 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800ec9e:	893b      	ldrh	r3, [r7, #8]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fe fe4b 	bl	800d93c <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800eca6:	897b      	ldrh	r3, [r7, #10]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe feaf 	bl	800da0c <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800ecae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe ffea 	bl	800dc8c <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800ecb8:	7bbb      	ldrb	r3, [r7, #14]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe ff94 	bl	800dbe8 <mpu_configure_fifo>

    if (dmp_was_on)
 800ecc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800ecc8:	2001      	movs	r0, #1
 800ecca:	f000 f929 	bl	800ef20 <mpu_set_dmp_state>

    return result;
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3738      	adds	r7, #56	; 0x38
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20000028 	.word	0x20000028

0800ecdc <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4603      	mov	r3, r0
 800ece4:	603a      	str	r2, [r7, #0]
 800ece6:	80fb      	strh	r3, [r7, #6]
 800ece8:	460b      	mov	r3, r1
 800ecea:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d102      	bne.n	800ecf8 <mpu_write_mem+0x1c>
        return -1;
 800ecf2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf6:	e03d      	b.n	800ed74 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 800ecf8:	4b20      	ldr	r3, [pc, #128]	; (800ed7c <mpu_write_mem+0xa0>)
 800ecfa:	7a9b      	ldrb	r3, [r3, #10]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d102      	bne.n	800ed06 <mpu_write_mem+0x2a>
        return -1;
 800ed00:	f04f 33ff 	mov.w	r3, #4294967295
 800ed04:	e036      	b.n	800ed74 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800ed06:	88fb      	ldrh	r3, [r7, #6]
 800ed08:	0a1b      	lsrs	r3, r3, #8
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800ed10:	88fb      	ldrh	r3, [r7, #6]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800ed16:	7b7b      	ldrb	r3, [r7, #13]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	88bb      	ldrh	r3, [r7, #4]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	4a17      	ldr	r2, [pc, #92]	; (800ed7c <mpu_write_mem+0xa0>)
 800ed20:	6852      	ldr	r2, [r2, #4]
 800ed22:	8952      	ldrh	r2, [r2, #10]
 800ed24:	4293      	cmp	r3, r2
 800ed26:	dd02      	ble.n	800ed2e <mpu_write_mem+0x52>
        return -1;
 800ed28:	f04f 33ff 	mov.w	r3, #4294967295
 800ed2c:	e022      	b.n	800ed74 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800ed2e:	4b13      	ldr	r3, [pc, #76]	; (800ed7c <mpu_write_mem+0xa0>)
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	7818      	ldrb	r0, [r3, #0]
 800ed34:	4b11      	ldr	r3, [pc, #68]	; (800ed7c <mpu_write_mem+0xa0>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	7ed9      	ldrb	r1, [r3, #27]
 800ed3a:	f107 030c 	add.w	r3, r7, #12
 800ed3e:	2202      	movs	r2, #2
 800ed40:	f001 fbc6 	bl	80104d0 <dmp_i2c_write>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <mpu_write_mem+0x74>
        return -1;
 800ed4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4e:	e011      	b.n	800ed74 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800ed50:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <mpu_write_mem+0xa0>)
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	7818      	ldrb	r0, [r3, #0]
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <mpu_write_mem+0xa0>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	7e19      	ldrb	r1, [r3, #24]
 800ed5c:	88bb      	ldrh	r3, [r7, #4]
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	f001 fbb5 	bl	80104d0 <dmp_i2c_write>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <mpu_write_mem+0x96>
        return -1;
 800ed6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed70:	e000      	b.n	800ed74 <mpu_write_mem+0x98>
    return 0;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	20000028 	.word	0x20000028

0800ed80 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	4603      	mov	r3, r0
 800ed88:	603a      	str	r2, [r7, #0]
 800ed8a:	80fb      	strh	r3, [r7, #6]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d102      	bne.n	800ed9c <mpu_read_mem+0x1c>
        return -1;
 800ed96:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9a:	e03d      	b.n	800ee18 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 800ed9c:	4b20      	ldr	r3, [pc, #128]	; (800ee20 <mpu_read_mem+0xa0>)
 800ed9e:	7a9b      	ldrb	r3, [r3, #10]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d102      	bne.n	800edaa <mpu_read_mem+0x2a>
        return -1;
 800eda4:	f04f 33ff 	mov.w	r3, #4294967295
 800eda8:	e036      	b.n	800ee18 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800edaa:	88fb      	ldrh	r3, [r7, #6]
 800edac:	0a1b      	lsrs	r3, r3, #8
 800edae:	b29b      	uxth	r3, r3
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800edb4:	88fb      	ldrh	r3, [r7, #6]
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800edba:	7b7b      	ldrb	r3, [r7, #13]
 800edbc:	461a      	mov	r2, r3
 800edbe:	88bb      	ldrh	r3, [r7, #4]
 800edc0:	4413      	add	r3, r2
 800edc2:	4a17      	ldr	r2, [pc, #92]	; (800ee20 <mpu_read_mem+0xa0>)
 800edc4:	6852      	ldr	r2, [r2, #4]
 800edc6:	8952      	ldrh	r2, [r2, #10]
 800edc8:	4293      	cmp	r3, r2
 800edca:	dd02      	ble.n	800edd2 <mpu_read_mem+0x52>
        return -1;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	e022      	b.n	800ee18 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800edd2:	4b13      	ldr	r3, [pc, #76]	; (800ee20 <mpu_read_mem+0xa0>)
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	7818      	ldrb	r0, [r3, #0]
 800edd8:	4b11      	ldr	r3, [pc, #68]	; (800ee20 <mpu_read_mem+0xa0>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	7ed9      	ldrb	r1, [r3, #27]
 800edde:	f107 030c 	add.w	r3, r7, #12
 800ede2:	2202      	movs	r2, #2
 800ede4:	f001 fb74 	bl	80104d0 <dmp_i2c_write>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <mpu_read_mem+0x74>
        return -1;
 800edee:	f04f 33ff 	mov.w	r3, #4294967295
 800edf2:	e011      	b.n	800ee18 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800edf4:	4b0a      	ldr	r3, [pc, #40]	; (800ee20 <mpu_read_mem+0xa0>)
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	7818      	ldrb	r0, [r3, #0]
 800edfa:	4b09      	ldr	r3, [pc, #36]	; (800ee20 <mpu_read_mem+0xa0>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	7e19      	ldrb	r1, [r3, #24]
 800ee00:	88bb      	ldrh	r3, [r7, #4]
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	f001 fb85 	bl	8010514 <dmp_i2c_read>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <mpu_read_mem+0x96>
        return -1;
 800ee10:	f04f 33ff 	mov.w	r3, #4294967295
 800ee14:	e000      	b.n	800ee18 <mpu_read_mem+0x98>
    return 0;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	20000028 	.word	0x20000028

0800ee24 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08a      	sub	sp, #40	; 0x28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60b9      	str	r1, [r7, #8]
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	461a      	mov	r2, r3
 800ee30:	4603      	mov	r3, r0
 800ee32:	81fb      	strh	r3, [r7, #14]
 800ee34:	460b      	mov	r3, r1
 800ee36:	81bb      	strh	r3, [r7, #12]
 800ee38:	4613      	mov	r3, r2
 800ee3a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800ee3c:	4b37      	ldr	r3, [pc, #220]	; (800ef1c <mpu_load_firmware+0xf8>)
 800ee3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d002      	beq.n	800ee4c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800ee46:	f04f 33ff 	mov.w	r3, #4294967295
 800ee4a:	e062      	b.n	800ef12 <mpu_load_firmware+0xee>

    if (!firmware)
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d102      	bne.n	800ee58 <mpu_load_firmware+0x34>
        return -1;
 800ee52:	f04f 33ff 	mov.w	r3, #4294967295
 800ee56:	e05c      	b.n	800ef12 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800ee58:	2300      	movs	r3, #0
 800ee5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee5c:	e034      	b.n	800eec8 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800ee5e:	89fa      	ldrh	r2, [r7, #14]
 800ee60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	2b10      	cmp	r3, #16
 800ee66:	bfa8      	it	ge
 800ee68:	2310      	movge	r3, #16
 800ee6a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800ee6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee6e:	68ba      	ldr	r2, [r7, #8]
 800ee70:	441a      	add	r2, r3
 800ee72:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ee74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7ff ff30 	bl	800ecdc <mpu_write_mem>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d002      	beq.n	800ee88 <mpu_load_firmware+0x64>
            return -1;
 800ee82:	f04f 33ff 	mov.w	r3, #4294967295
 800ee86:	e044      	b.n	800ef12 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 800ee88:	f107 0214 	add.w	r2, r7, #20
 800ee8c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ee8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff ff75 	bl	800ed80 <mpu_read_mem>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <mpu_load_firmware+0x7e>
            return -1;
 800ee9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eea0:	e037      	b.n	800ef12 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 800eea2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	4413      	add	r3, r2
 800eea8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eeaa:	f107 0114 	add.w	r1, r7, #20
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f004 ffd6 	bl	8013e60 <memcmp>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <mpu_load_firmware+0x9c>
            return -2;
 800eeba:	f06f 0301 	mvn.w	r3, #1
 800eebe:	e028      	b.n	800ef12 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800eec0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec4:	4413      	add	r3, r2
 800eec6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eec8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eeca:	89fb      	ldrh	r3, [r7, #14]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d3c6      	bcc.n	800ee5e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800eed0:	89bb      	ldrh	r3, [r7, #12]
 800eed2:	0a1b      	lsrs	r3, r3, #8
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800eeda:	89bb      	ldrh	r3, [r7, #12]
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800eee0:	4b0e      	ldr	r3, [pc, #56]	; (800ef1c <mpu_load_firmware+0xf8>)
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	7818      	ldrb	r0, [r3, #0]
 800eee6:	4b0d      	ldr	r3, [pc, #52]	; (800ef1c <mpu_load_firmware+0xf8>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	7f59      	ldrb	r1, [r3, #29]
 800eeec:	f107 0310 	add.w	r3, r7, #16
 800eef0:	2202      	movs	r2, #2
 800eef2:	f001 faed 	bl	80104d0 <dmp_i2c_write>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d002      	beq.n	800ef02 <mpu_load_firmware+0xde>
        return -1;
 800eefc:	f04f 33ff 	mov.w	r3, #4294967295
 800ef00:	e007      	b.n	800ef12 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 800ef02:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <mpu_load_firmware+0xf8>)
 800ef04:	2201      	movs	r2, #1
 800ef06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800ef0a:	4a04      	ldr	r2, [pc, #16]	; (800ef1c <mpu_load_firmware+0xf8>)
 800ef0c:	88fb      	ldrh	r3, [r7, #6]
 800ef0e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 800ef10:	2300      	movs	r3, #0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3728      	adds	r7, #40	; 0x28
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	20000028 	.word	0x20000028

0800ef20 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800ef2a:	4b26      	ldr	r3, [pc, #152]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef30:	79fa      	ldrb	r2, [r7, #7]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d101      	bne.n	800ef3a <mpu_set_dmp_state+0x1a>
        return 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	e040      	b.n	800efbc <mpu_set_dmp_state+0x9c>

    if (enable) {
 800ef3a:	79fb      	ldrb	r3, [r7, #7]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d027      	beq.n	800ef90 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 800ef40:	4b20      	ldr	r3, [pc, #128]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d102      	bne.n	800ef50 <mpu_set_dmp_state+0x30>
            return -1;
 800ef4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4e:	e035      	b.n	800efbc <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800ef50:	2000      	movs	r0, #0
 800ef52:	f7fe f89d 	bl	800d090 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800ef56:	2000      	movs	r0, #0
 800ef58:	f7fe ff9c 	bl	800de94 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800ef5c:	4b19      	ldr	r3, [pc, #100]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fe fd53 	bl	800da0c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800ef6a:	4b16      	ldr	r3, [pc, #88]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	7818      	ldrb	r0, [r3, #0]
 800ef70:	f107 030f 	add.w	r3, r7, #15
 800ef74:	2201      	movs	r2, #1
 800ef76:	2123      	movs	r1, #35	; 0x23
 800ef78:	f001 faaa 	bl	80104d0 <dmp_i2c_write>
        st.chip_cfg.dmp_on = 1;
 800ef7c:	4b11      	ldr	r3, [pc, #68]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800ef84:	2001      	movs	r0, #1
 800ef86:	f7fe f883 	bl	800d090 <set_int_enable>
        mpu_reset_fifo();
 800ef8a:	f7fe fa6b 	bl	800d464 <mpu_reset_fifo>
 800ef8e:	e014      	b.n	800efba <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800ef90:	2000      	movs	r0, #0
 800ef92:	f7fe f87d 	bl	800d090 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800ef96:	4b0b      	ldr	r3, [pc, #44]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef98:	7c1b      	ldrb	r3, [r3, #16]
 800ef9a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800ef9c:	4b09      	ldr	r3, [pc, #36]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	7818      	ldrb	r0, [r3, #0]
 800efa2:	f107 030f 	add.w	r3, r7, #15
 800efa6:	2201      	movs	r2, #1
 800efa8:	2123      	movs	r1, #35	; 0x23
 800efaa:	f001 fa91 	bl	80104d0 <dmp_i2c_write>
        st.chip_cfg.dmp_on = 0;
 800efae:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <mpu_set_dmp_state+0xa4>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 800efb6:	f7fe fa55 	bl	800d464 <mpu_reset_fifo>
    }
    return 0;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20000028 	.word	0x20000028

0800efc8 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800efcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800efd0:	23c8      	movs	r3, #200	; 0xc8
 800efd2:	4904      	ldr	r1, [pc, #16]	; (800efe4 <dmp_load_motion_driver_firmware+0x1c>)
 800efd4:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800efd8:	f7ff ff24 	bl	800ee24 <mpu_load_firmware>
 800efdc:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800efde:	4618      	mov	r0, r3
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	0801a00c 	.word	0x0801a00c

0800efe8 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b088      	sub	sp, #32
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800eff2:	4a6e      	ldr	r2, [pc, #440]	; (800f1ac <dmp_set_orientation+0x1c4>)
 800eff4:	f107 0314 	add.w	r3, r7, #20
 800eff8:	6812      	ldr	r2, [r2, #0]
 800effa:	4611      	mov	r1, r2
 800effc:	8019      	strh	r1, [r3, #0]
 800effe:	3302      	adds	r3, #2
 800f000:	0c12      	lsrs	r2, r2, #16
 800f002:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800f004:	4a6a      	ldr	r2, [pc, #424]	; (800f1b0 <dmp_set_orientation+0x1c8>)
 800f006:	f107 0310 	add.w	r3, r7, #16
 800f00a:	6812      	ldr	r2, [r2, #0]
 800f00c:	4611      	mov	r1, r2
 800f00e:	8019      	strh	r1, [r3, #0]
 800f010:	3302      	adds	r3, #2
 800f012:	0c12      	lsrs	r2, r2, #16
 800f014:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800f016:	4a67      	ldr	r2, [pc, #412]	; (800f1b4 <dmp_set_orientation+0x1cc>)
 800f018:	f107 030c 	add.w	r3, r7, #12
 800f01c:	6812      	ldr	r2, [r2, #0]
 800f01e:	4611      	mov	r1, r2
 800f020:	8019      	strh	r1, [r3, #0]
 800f022:	3302      	adds	r3, #2
 800f024:	0c12      	lsrs	r2, r2, #16
 800f026:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800f028:	4a63      	ldr	r2, [pc, #396]	; (800f1b8 <dmp_set_orientation+0x1d0>)
 800f02a:	f107 0308 	add.w	r3, r7, #8
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	4611      	mov	r1, r2
 800f032:	8019      	strh	r1, [r3, #0]
 800f034:	3302      	adds	r3, #2
 800f036:	0c12      	lsrs	r2, r2, #16
 800f038:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	f003 0303 	and.w	r3, r3, #3
 800f040:	3320      	adds	r3, #32
 800f042:	443b      	add	r3, r7
 800f044:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f048:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800f04a:	88fb      	ldrh	r3, [r7, #6]
 800f04c:	08db      	lsrs	r3, r3, #3
 800f04e:	b29b      	uxth	r3, r3
 800f050:	f003 0303 	and.w	r3, r3, #3
 800f054:	3320      	adds	r3, #32
 800f056:	443b      	add	r3, r7
 800f058:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f05c:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800f05e:	88fb      	ldrh	r3, [r7, #6]
 800f060:	099b      	lsrs	r3, r3, #6
 800f062:	b29b      	uxth	r3, r3
 800f064:	f003 0303 	and.w	r3, r3, #3
 800f068:	3320      	adds	r3, #32
 800f06a:	443b      	add	r3, r7
 800f06c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f070:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800f072:	88fb      	ldrh	r3, [r7, #6]
 800f074:	f003 0303 	and.w	r3, r3, #3
 800f078:	3320      	adds	r3, #32
 800f07a:	443b      	add	r3, r7
 800f07c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f080:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800f082:	88fb      	ldrh	r3, [r7, #6]
 800f084:	08db      	lsrs	r3, r3, #3
 800f086:	b29b      	uxth	r3, r3
 800f088:	f003 0303 	and.w	r3, r3, #3
 800f08c:	3320      	adds	r3, #32
 800f08e:	443b      	add	r3, r7
 800f090:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f094:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800f096:	88fb      	ldrh	r3, [r7, #6]
 800f098:	099b      	lsrs	r3, r3, #6
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	f003 0303 	and.w	r3, r3, #3
 800f0a0:	3320      	adds	r3, #32
 800f0a2:	443b      	add	r3, r7
 800f0a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f0a8:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800f0aa:	f107 031c 	add.w	r3, r7, #28
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	2103      	movs	r1, #3
 800f0b2:	f240 4026 	movw	r0, #1062	; 0x426
 800f0b6:	f7ff fe11 	bl	800ecdc <mpu_write_mem>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <dmp_set_orientation+0xde>
        return -1;
 800f0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c4:	e06e      	b.n	800f1a4 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800f0c6:	f107 0318 	add.w	r3, r7, #24
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	2103      	movs	r1, #3
 800f0ce:	f240 402a 	movw	r0, #1066	; 0x42a
 800f0d2:	f7ff fe03 	bl	800ecdc <mpu_write_mem>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <dmp_set_orientation+0xfa>
        return -1;
 800f0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e0:	e060      	b.n	800f1a4 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800f0e2:	f107 031c 	add.w	r3, r7, #28
 800f0e6:	f107 020c 	add.w	r2, r7, #12
 800f0ea:	6812      	ldr	r2, [r2, #0]
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	8019      	strh	r1, [r3, #0]
 800f0f0:	3302      	adds	r3, #2
 800f0f2:	0c12      	lsrs	r2, r2, #16
 800f0f4:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800f0f6:	f107 0318 	add.w	r3, r7, #24
 800f0fa:	f107 0208 	add.w	r2, r7, #8
 800f0fe:	6812      	ldr	r2, [r2, #0]
 800f100:	4611      	mov	r1, r2
 800f102:	8019      	strh	r1, [r3, #0]
 800f104:	3302      	adds	r3, #2
 800f106:	0c12      	lsrs	r2, r2, #16
 800f108:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800f10a:	88fb      	ldrh	r3, [r7, #6]
 800f10c:	f003 0304 	and.w	r3, r3, #4
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 800f114:	7f3b      	ldrb	r3, [r7, #28]
 800f116:	f043 0301 	orr.w	r3, r3, #1
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800f11e:	7e3b      	ldrb	r3, [r7, #24]
 800f120:	f043 0301 	orr.w	r3, r3, #1
 800f124:	b2db      	uxtb	r3, r3
 800f126:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 800f128:	88fb      	ldrh	r3, [r7, #6]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800f132:	7f7b      	ldrb	r3, [r7, #29]
 800f134:	f043 0301 	orr.w	r3, r3, #1
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800f13c:	7e7b      	ldrb	r3, [r7, #25]
 800f13e:	f043 0301 	orr.w	r3, r3, #1
 800f142:	b2db      	uxtb	r3, r3
 800f144:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800f146:	88fb      	ldrh	r3, [r7, #6]
 800f148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d009      	beq.n	800f164 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 800f150:	7fbb      	ldrb	r3, [r7, #30]
 800f152:	f043 0301 	orr.w	r3, r3, #1
 800f156:	b2db      	uxtb	r3, r3
 800f158:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800f15a:	7ebb      	ldrb	r3, [r7, #26]
 800f15c:	f043 0301 	orr.w	r3, r3, #1
 800f160:	b2db      	uxtb	r3, r3
 800f162:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800f164:	f107 031c 	add.w	r3, r7, #28
 800f168:	461a      	mov	r2, r3
 800f16a:	2103      	movs	r1, #3
 800f16c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800f170:	f7ff fdb4 	bl	800ecdc <mpu_write_mem>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <dmp_set_orientation+0x198>
        return -1;
 800f17a:	f04f 33ff 	mov.w	r3, #4294967295
 800f17e:	e011      	b.n	800f1a4 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800f180:	f107 0318 	add.w	r3, r7, #24
 800f184:	461a      	mov	r2, r3
 800f186:	2103      	movs	r1, #3
 800f188:	f240 4031 	movw	r0, #1073	; 0x431
 800f18c:	f7ff fda6 	bl	800ecdc <mpu_write_mem>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <dmp_set_orientation+0x1b4>
        return -1;
 800f196:	f04f 33ff 	mov.w	r3, #4294967295
 800f19a:	e003      	b.n	800f1a4 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800f19c:	4a07      	ldr	r2, [pc, #28]	; (800f1bc <dmp_set_orientation+0x1d4>)
 800f19e:	88fb      	ldrh	r3, [r7, #6]
 800f1a0:	8113      	strh	r3, [r2, #8]
    return 0;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3720      	adds	r7, #32
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	0801952c 	.word	0x0801952c
 800f1b0:	08019530 	.word	0x08019530
 800f1b4:	08019534 	.word	0x08019534
 800f1b8:	08019538 	.word	0x08019538
 800f1bc:	200012cc 	.word	0x200012cc

0800f1c0 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 800f1c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1c4:	b08c      	sub	sp, #48	; 0x30
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800f1ca:	4b80      	ldr	r3, [pc, #512]	; (800f3cc <dmp_set_gyro_bias+0x20c>)
 800f1cc:	891b      	ldrh	r3, [r3, #8]
 800f1ce:	f003 0303 	and.w	r3, r3, #3
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	69fa      	ldr	r2, [r7, #28]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 800f1dc:	4b7b      	ldr	r3, [pc, #492]	; (800f3cc <dmp_set_gyro_bias+0x20c>)
 800f1de:	891b      	ldrh	r3, [r3, #8]
 800f1e0:	f003 0304 	and.w	r3, r3, #4
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	425b      	negs	r3, r3
 800f1ec:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800f1ee:	4b77      	ldr	r3, [pc, #476]	; (800f3cc <dmp_set_gyro_bias+0x20c>)
 800f1f0:	891b      	ldrh	r3, [r3, #8]
 800f1f2:	08db      	lsrs	r3, r3, #3
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	f003 0303 	and.w	r3, r3, #3
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	69fa      	ldr	r2, [r7, #28]
 800f1fe:	4413      	add	r3, r2
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 800f204:	4b71      	ldr	r3, [pc, #452]	; (800f3cc <dmp_set_gyro_bias+0x20c>)
 800f206:	891b      	ldrh	r3, [r3, #8]
 800f208:	f003 0320 	and.w	r3, r3, #32
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	425b      	negs	r3, r3
 800f214:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800f216:	4b6d      	ldr	r3, [pc, #436]	; (800f3cc <dmp_set_gyro_bias+0x20c>)
 800f218:	891b      	ldrh	r3, [r3, #8]
 800f21a:	099b      	lsrs	r3, r3, #6
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	f003 0303 	and.w	r3, r3, #3
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	69fa      	ldr	r2, [r7, #28]
 800f226:	4413      	add	r3, r2
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 800f22c:	4b67      	ldr	r3, [pc, #412]	; (800f3cc <dmp_set_gyro_bias+0x20c>)
 800f22e:	891b      	ldrh	r3, [r3, #8]
 800f230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 800f238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23a:	425b      	negs	r3, r3
 800f23c:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	17da      	asrs	r2, r3, #31
 800f242:	613b      	str	r3, [r7, #16]
 800f244:	617a      	str	r2, [r7, #20]
 800f246:	4b62      	ldr	r3, [pc, #392]	; (800f3d0 <dmp_set_gyro_bias+0x210>)
 800f248:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f24c:	460a      	mov	r2, r1
 800f24e:	fb03 f202 	mul.w	r2, r3, r2
 800f252:	2300      	movs	r3, #0
 800f254:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f258:	4601      	mov	r1, r0
 800f25a:	fb01 f303 	mul.w	r3, r1, r3
 800f25e:	4413      	add	r3, r2
 800f260:	4a5b      	ldr	r2, [pc, #364]	; (800f3d0 <dmp_set_gyro_bias+0x210>)
 800f262:	6939      	ldr	r1, [r7, #16]
 800f264:	fba1 ab02 	umull	sl, fp, r1, r2
 800f268:	445b      	add	r3, fp
 800f26a:	469b      	mov	fp, r3
 800f26c:	f04f 0200 	mov.w	r2, #0
 800f270:	f04f 0300 	mov.w	r3, #0
 800f274:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800f278:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800f27c:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800f280:	4613      	mov	r3, r2
 800f282:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	17da      	asrs	r2, r3, #31
 800f288:	60bb      	str	r3, [r7, #8]
 800f28a:	60fa      	str	r2, [r7, #12]
 800f28c:	4b50      	ldr	r3, [pc, #320]	; (800f3d0 <dmp_set_gyro_bias+0x210>)
 800f28e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f292:	465a      	mov	r2, fp
 800f294:	fb03 f202 	mul.w	r2, r3, r2
 800f298:	2300      	movs	r3, #0
 800f29a:	4651      	mov	r1, sl
 800f29c:	fb01 f303 	mul.w	r3, r1, r3
 800f2a0:	4413      	add	r3, r2
 800f2a2:	4a4b      	ldr	r2, [pc, #300]	; (800f3d0 <dmp_set_gyro_bias+0x210>)
 800f2a4:	4651      	mov	r1, sl
 800f2a6:	fba1 8902 	umull	r8, r9, r1, r2
 800f2aa:	444b      	add	r3, r9
 800f2ac:	4699      	mov	r9, r3
 800f2ae:	f04f 0200 	mov.w	r2, #0
 800f2b2:	f04f 0300 	mov.w	r3, #0
 800f2b6:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800f2ba:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800f2be:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c8:	17da      	asrs	r2, r3, #31
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	607a      	str	r2, [r7, #4]
 800f2ce:	4b40      	ldr	r3, [pc, #256]	; (800f3d0 <dmp_set_gyro_bias+0x210>)
 800f2d0:	e9d7 8900 	ldrd	r8, r9, [r7]
 800f2d4:	464a      	mov	r2, r9
 800f2d6:	fb03 f202 	mul.w	r2, r3, r2
 800f2da:	2300      	movs	r3, #0
 800f2dc:	4641      	mov	r1, r8
 800f2de:	fb01 f303 	mul.w	r3, r1, r3
 800f2e2:	4413      	add	r3, r2
 800f2e4:	4a3a      	ldr	r2, [pc, #232]	; (800f3d0 <dmp_set_gyro_bias+0x210>)
 800f2e6:	4641      	mov	r1, r8
 800f2e8:	fba1 4502 	umull	r4, r5, r1, r2
 800f2ec:	442b      	add	r3, r5
 800f2ee:	461d      	mov	r5, r3
 800f2f0:	f04f 0200 	mov.w	r2, #0
 800f2f4:	f04f 0300 	mov.w	r3, #0
 800f2f8:	0fa2      	lsrs	r2, r4, #30
 800f2fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800f2fe:	17ab      	asrs	r3, r5, #30
 800f300:	4613      	mov	r3, r2
 800f302:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	161b      	asrs	r3, r3, #24
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	141b      	asrs	r3, r3, #16
 800f312:	b2db      	uxtb	r3, r3
 800f314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	121b      	asrs	r3, r3, #8
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	b2db      	uxtb	r3, r3
 800f326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800f32a:	f107 0320 	add.w	r3, r7, #32
 800f32e:	461a      	mov	r2, r3
 800f330:	2104      	movs	r1, #4
 800f332:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 800f336:	f7ff fcd1 	bl	800ecdc <mpu_write_mem>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d002      	beq.n	800f346 <dmp_set_gyro_bias+0x186>
        return -1;
 800f340:	f04f 33ff 	mov.w	r3, #4294967295
 800f344:	e03c      	b.n	800f3c0 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 800f346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f348:	161b      	asrs	r3, r3, #24
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	141b      	asrs	r3, r3, #16
 800f354:	b2db      	uxtb	r3, r3
 800f356:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	121b      	asrs	r3, r3, #8
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 800f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f366:	b2db      	uxtb	r3, r3
 800f368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 800f36c:	f107 0320 	add.w	r3, r7, #32
 800f370:	461a      	mov	r2, r3
 800f372:	2104      	movs	r1, #4
 800f374:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 800f378:	f7ff fcb0 	bl	800ecdc <mpu_write_mem>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <dmp_set_gyro_bias+0x1c8>
        return -1;
 800f382:	f04f 33ff 	mov.w	r3, #4294967295
 800f386:	e01b      	b.n	800f3c0 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	161b      	asrs	r3, r3, #24
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 800f392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f394:	141b      	asrs	r3, r3, #16
 800f396:	b2db      	uxtb	r3, r3
 800f398:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	121b      	asrs	r3, r3, #8
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 800f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800f3ae:	f107 0320 	add.w	r3, r7, #32
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	2104      	movs	r1, #4
 800f3b6:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 800f3ba:	f7ff fc8f 	bl	800ecdc <mpu_write_mem>
 800f3be:	4603      	mov	r3, r0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3730      	adds	r7, #48	; 0x30
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3ca:	bf00      	nop
 800f3cc:	200012cc 	.word	0x200012cc
 800f3d0:	02cae309 	.word	0x02cae309

0800f3d4 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 800f3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3d8:	b094      	sub	sp, #80	; 0x50
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800f3de:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fe fbb0 	bl	800db48 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 800f3e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	61bb      	str	r3, [r7, #24]
 800f3f0:	61fa      	str	r2, [r7, #28]
 800f3f2:	f04f 0200 	mov.w	r2, #0
 800f3f6:	f04f 0300 	mov.w	r3, #0
 800f3fa:	69f9      	ldr	r1, [r7, #28]
 800f3fc:	03cb      	lsls	r3, r1, #15
 800f3fe:	69b9      	ldr	r1, [r7, #24]
 800f400:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 800f404:	69b9      	ldr	r1, [r7, #24]
 800f406:	03ca      	lsls	r2, r1, #15
 800f408:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//    __no_operation();																																			//修改了

    accel_bias_body[0] = bias[dmp.orient & 3];
 800f40c:	4b71      	ldr	r3, [pc, #452]	; (800f5d4 <dmp_set_accel_bias+0x200>)
 800f40e:	891b      	ldrh	r3, [r3, #8]
 800f410:	f003 0303 	and.w	r3, r3, #3
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f418:	4413      	add	r3, r2
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 800f41e:	4b6d      	ldr	r3, [pc, #436]	; (800f5d4 <dmp_set_accel_bias+0x200>)
 800f420:	891b      	ldrh	r3, [r3, #8]
 800f422:	f003 0304 	and.w	r3, r3, #4
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800f42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42c:	425b      	negs	r3, r3
 800f42e:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800f430:	4b68      	ldr	r3, [pc, #416]	; (800f5d4 <dmp_set_accel_bias+0x200>)
 800f432:	891b      	ldrh	r3, [r3, #8]
 800f434:	08db      	lsrs	r3, r3, #3
 800f436:	b29b      	uxth	r3, r3
 800f438:	f003 0303 	and.w	r3, r3, #3
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f440:	4413      	add	r3, r2
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 800f446:	4b63      	ldr	r3, [pc, #396]	; (800f5d4 <dmp_set_accel_bias+0x200>)
 800f448:	891b      	ldrh	r3, [r3, #8]
 800f44a:	f003 0320 	and.w	r3, r3, #32
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d002      	beq.n	800f458 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 800f452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f454:	425b      	negs	r3, r3
 800f456:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800f458:	4b5e      	ldr	r3, [pc, #376]	; (800f5d4 <dmp_set_accel_bias+0x200>)
 800f45a:	891b      	ldrh	r3, [r3, #8]
 800f45c:	099b      	lsrs	r3, r3, #6
 800f45e:	b29b      	uxth	r3, r3
 800f460:	f003 0303 	and.w	r3, r3, #3
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f468:	4413      	add	r3, r2
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 800f46e:	4b59      	ldr	r3, [pc, #356]	; (800f5d4 <dmp_set_accel_bias+0x200>)
 800f470:	891b      	ldrh	r3, [r3, #8]
 800f472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f476:	2b00      	cmp	r3, #0
 800f478:	d002      	beq.n	800f480 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 800f47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f47c:	425b      	negs	r3, r3
 800f47e:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 800f480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f482:	17da      	asrs	r2, r3, #31
 800f484:	613b      	str	r3, [r7, #16]
 800f486:	617a      	str	r2, [r7, #20]
 800f488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f48a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f48e:	460a      	mov	r2, r1
 800f490:	fb02 f203 	mul.w	r2, r2, r3
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f49a:	4601      	mov	r1, r0
 800f49c:	fb01 f303 	mul.w	r3, r1, r3
 800f4a0:	4413      	add	r3, r2
 800f4a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a4:	6939      	ldr	r1, [r7, #16]
 800f4a6:	fba2 ab01 	umull	sl, fp, r2, r1
 800f4aa:	445b      	add	r3, fp
 800f4ac:	469b      	mov	fp, r3
 800f4ae:	f04f 0200 	mov.w	r2, #0
 800f4b2:	f04f 0300 	mov.w	r3, #0
 800f4b6:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800f4ba:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800f4be:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 800f4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c8:	17da      	asrs	r2, r3, #31
 800f4ca:	60bb      	str	r3, [r7, #8]
 800f4cc:	60fa      	str	r2, [r7, #12]
 800f4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f4d4:	465a      	mov	r2, fp
 800f4d6:	fb02 f203 	mul.w	r2, r2, r3
 800f4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4dc:	4651      	mov	r1, sl
 800f4de:	fb01 f303 	mul.w	r3, r1, r3
 800f4e2:	4413      	add	r3, r2
 800f4e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4e6:	4651      	mov	r1, sl
 800f4e8:	fba2 8901 	umull	r8, r9, r2, r1
 800f4ec:	444b      	add	r3, r9
 800f4ee:	4699      	mov	r9, r3
 800f4f0:	f04f 0200 	mov.w	r2, #0
 800f4f4:	f04f 0300 	mov.w	r3, #0
 800f4f8:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800f4fc:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800f500:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800f504:	4613      	mov	r3, r2
 800f506:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 800f508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f50a:	17da      	asrs	r2, r3, #31
 800f50c:	603b      	str	r3, [r7, #0]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f512:	e9d7 8900 	ldrd	r8, r9, [r7]
 800f516:	464a      	mov	r2, r9
 800f518:	fb02 f203 	mul.w	r2, r2, r3
 800f51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f51e:	4641      	mov	r1, r8
 800f520:	fb01 f303 	mul.w	r3, r1, r3
 800f524:	4413      	add	r3, r2
 800f526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f528:	4641      	mov	r1, r8
 800f52a:	fba2 4501 	umull	r4, r5, r2, r1
 800f52e:	442b      	add	r3, r5
 800f530:	461d      	mov	r5, r3
 800f532:	f04f 0200 	mov.w	r2, #0
 800f536:	f04f 0300 	mov.w	r3, #0
 800f53a:	0fa2      	lsrs	r2, r4, #30
 800f53c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800f540:	17ab      	asrs	r3, r5, #30
 800f542:	4613      	mov	r3, r2
 800f544:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 800f546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f548:	161b      	asrs	r3, r3, #24
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 800f550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f552:	141b      	asrs	r3, r3, #16
 800f554:	b2db      	uxtb	r3, r3
 800f556:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800f55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f55c:	121b      	asrs	r3, r3, #8
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 800f564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f566:	b2db      	uxtb	r3, r3
 800f568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 800f56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56e:	161b      	asrs	r3, r3, #24
 800f570:	b2db      	uxtb	r3, r3
 800f572:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800f576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f578:	141b      	asrs	r3, r3, #16
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 800f580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f582:	121b      	asrs	r3, r3, #8
 800f584:	b2db      	uxtb	r3, r3
 800f586:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800f58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 800f592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f594:	161b      	asrs	r3, r3, #24
 800f596:	b2db      	uxtb	r3, r3
 800f598:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 800f59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f59e:	141b      	asrs	r3, r3, #16
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800f5a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5a8:	121b      	asrs	r3, r3, #8
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 800f5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800f5b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5bc:	461a      	mov	r2, r3
 800f5be:	210c      	movs	r1, #12
 800f5c0:	f44f 7025 	mov.w	r0, #660	; 0x294
 800f5c4:	f7ff fb8a 	bl	800ecdc <mpu_write_mem>
 800f5c8:	4603      	mov	r3, r0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3750      	adds	r7, #80	; 0x50
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5d4:	200012cc 	.word	0x200012cc

0800f5d8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b088      	sub	sp, #32
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800f5e2:	4a1f      	ldr	r2, [pc, #124]	; (800f660 <dmp_set_fifo_rate+0x88>)
 800f5e4:	f107 0310 	add.w	r3, r7, #16
 800f5e8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800f5ee:	88fb      	ldrh	r3, [r7, #6]
 800f5f0:	2bc8      	cmp	r3, #200	; 0xc8
 800f5f2:	d902      	bls.n	800f5fa <dmp_set_fifo_rate+0x22>
        return -1;
 800f5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f8:	e02e      	b.n	800f658 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800f5fa:	88fb      	ldrh	r3, [r7, #6]
 800f5fc:	22c8      	movs	r2, #200	; 0xc8
 800f5fe:	fb92 f3f3 	sdiv	r3, r2, r3
 800f602:	b29b      	uxth	r3, r3
 800f604:	3b01      	subs	r3, #1
 800f606:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800f608:	8bfb      	ldrh	r3, [r7, #30]
 800f60a:	0a1b      	lsrs	r3, r3, #8
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800f612:	8bfb      	ldrh	r3, [r7, #30]
 800f614:	b2db      	uxtb	r3, r3
 800f616:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800f618:	f107 0308 	add.w	r3, r7, #8
 800f61c:	461a      	mov	r2, r3
 800f61e:	2102      	movs	r1, #2
 800f620:	f240 2016 	movw	r0, #534	; 0x216
 800f624:	f7ff fb5a 	bl	800ecdc <mpu_write_mem>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d002      	beq.n	800f634 <dmp_set_fifo_rate+0x5c>
        return -1;
 800f62e:	f04f 33ff 	mov.w	r3, #4294967295
 800f632:	e011      	b.n	800f658 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800f634:	f107 0310 	add.w	r3, r7, #16
 800f638:	461a      	mov	r2, r3
 800f63a:	210c      	movs	r1, #12
 800f63c:	f640 20c1 	movw	r0, #2753	; 0xac1
 800f640:	f7ff fb4c 	bl	800ecdc <mpu_write_mem>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d002      	beq.n	800f650 <dmp_set_fifo_rate+0x78>
        return -1;
 800f64a:	f04f 33ff 	mov.w	r3, #4294967295
 800f64e:	e003      	b.n	800f658 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800f650:	4a04      	ldr	r2, [pc, #16]	; (800f664 <dmp_set_fifo_rate+0x8c>)
 800f652:	88fb      	ldrh	r3, [r7, #6]
 800f654:	8193      	strh	r3, [r2, #12]
    return 0;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3720      	adds	r7, #32
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	0801953c 	.word	0x0801953c
 800f664:	200012cc 	.word	0x200012cc

0800f668 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	460a      	mov	r2, r1
 800f672:	71fb      	strb	r3, [r7, #7]
 800f674:	4613      	mov	r3, r2
 800f676:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800f678:	79fb      	ldrb	r3, [r7, #7]
 800f67a:	f003 0307 	and.w	r3, r3, #7
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d003      	beq.n	800f68a <dmp_set_tap_thresh+0x22>
 800f682:	88bb      	ldrh	r3, [r7, #4]
 800f684:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f688:	d902      	bls.n	800f690 <dmp_set_tap_thresh+0x28>
        return -1;
 800f68a:	f04f 33ff 	mov.w	r3, #4294967295
 800f68e:	e10b      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800f690:	88bb      	ldrh	r3, [r7, #4]
 800f692:	ee07 3a90 	vmov	s15, r3
 800f696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f69a:	eddf 6a85 	vldr	s13, [pc, #532]	; 800f8b0 <dmp_set_tap_thresh+0x248>
 800f69e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f6a2:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800f6a6:	f107 030b 	add.w	r3, r7, #11
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fe f866 	bl	800d77c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800f6b0:	7afb      	ldrb	r3, [r7, #11]
 800f6b2:	3b02      	subs	r3, #2
 800f6b4:	2b0e      	cmp	r3, #14
 800f6b6:	d87d      	bhi.n	800f7b4 <dmp_set_tap_thresh+0x14c>
 800f6b8:	a201      	add	r2, pc, #4	; (adr r2, 800f6c0 <dmp_set_tap_thresh+0x58>)
 800f6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6be:	bf00      	nop
 800f6c0:	0800f6fd 	.word	0x0800f6fd
 800f6c4:	0800f7b5 	.word	0x0800f7b5
 800f6c8:	0800f72b 	.word	0x0800f72b
 800f6cc:	0800f7b5 	.word	0x0800f7b5
 800f6d0:	0800f7b5 	.word	0x0800f7b5
 800f6d4:	0800f7b5 	.word	0x0800f7b5
 800f6d8:	0800f759 	.word	0x0800f759
 800f6dc:	0800f7b5 	.word	0x0800f7b5
 800f6e0:	0800f7b5 	.word	0x0800f7b5
 800f6e4:	0800f7b5 	.word	0x0800f7b5
 800f6e8:	0800f7b5 	.word	0x0800f7b5
 800f6ec:	0800f7b5 	.word	0x0800f7b5
 800f6f0:	0800f7b5 	.word	0x0800f7b5
 800f6f4:	0800f7b5 	.word	0x0800f7b5
 800f6f8:	0800f787 	.word	0x0800f787
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800f6fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800f700:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800f8b4 <dmp_set_tap_thresh+0x24c>
 800f704:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f70c:	ee17 3a90 	vmov	r3, s15
 800f710:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800f712:	edd7 7a04 	vldr	s15, [r7, #16]
 800f716:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800f8b8 <dmp_set_tap_thresh+0x250>
 800f71a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f71e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f722:	ee17 3a90 	vmov	r3, s15
 800f726:	82bb      	strh	r3, [r7, #20]
        break;
 800f728:	e047      	b.n	800f7ba <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800f72a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f72e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800f8bc <dmp_set_tap_thresh+0x254>
 800f732:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f73a:	ee17 3a90 	vmov	r3, s15
 800f73e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800f740:	edd7 7a04 	vldr	s15, [r7, #16]
 800f744:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800f8c0 <dmp_set_tap_thresh+0x258>
 800f748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f750:	ee17 3a90 	vmov	r3, s15
 800f754:	82bb      	strh	r3, [r7, #20]
        break;
 800f756:	e030      	b.n	800f7ba <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800f758:	edd7 7a04 	vldr	s15, [r7, #16]
 800f75c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f8c4 <dmp_set_tap_thresh+0x25c>
 800f760:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f768:	ee17 3a90 	vmov	r3, s15
 800f76c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800f76e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f772:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800f8c8 <dmp_set_tap_thresh+0x260>
 800f776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f77e:	ee17 3a90 	vmov	r3, s15
 800f782:	82bb      	strh	r3, [r7, #20]
        break;
 800f784:	e019      	b.n	800f7ba <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800f786:	edd7 7a04 	vldr	s15, [r7, #16]
 800f78a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800f8cc <dmp_set_tap_thresh+0x264>
 800f78e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f796:	ee17 3a90 	vmov	r3, s15
 800f79a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800f79c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f7a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f8d0 <dmp_set_tap_thresh+0x268>
 800f7a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7ac:	ee17 3a90 	vmov	r3, s15
 800f7b0:	82bb      	strh	r3, [r7, #20]
        break;
 800f7b2:	e002      	b.n	800f7ba <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 800f7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b8:	e076      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800f7ba:	8afb      	ldrh	r3, [r7, #22]
 800f7bc:	0a1b      	lsrs	r3, r3, #8
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800f7c4:	8afb      	ldrh	r3, [r7, #22]
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800f7ca:	8abb      	ldrh	r3, [r7, #20]
 800f7cc:	0a1b      	lsrs	r3, r3, #8
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800f7d4:	8abb      	ldrh	r3, [r7, #20]
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800f7da:	79fb      	ldrb	r3, [r7, #7]
 800f7dc:	f003 0301 	and.w	r3, r3, #1
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d01c      	beq.n	800f81e <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800f7e4:	f107 030c 	add.w	r3, r7, #12
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	2102      	movs	r1, #2
 800f7ec:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800f7f0:	f7ff fa74 	bl	800ecdc <mpu_write_mem>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d002      	beq.n	800f800 <dmp_set_tap_thresh+0x198>
            return -1;
 800f7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fe:	e053      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800f800:	f107 030c 	add.w	r3, r7, #12
 800f804:	3302      	adds	r3, #2
 800f806:	461a      	mov	r2, r3
 800f808:	2102      	movs	r1, #2
 800f80a:	f44f 7092 	mov.w	r0, #292	; 0x124
 800f80e:	f7ff fa65 	bl	800ecdc <mpu_write_mem>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d002      	beq.n	800f81e <dmp_set_tap_thresh+0x1b6>
            return -1;
 800f818:	f04f 33ff 	mov.w	r3, #4294967295
 800f81c:	e044      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800f81e:	79fb      	ldrb	r3, [r7, #7]
 800f820:	f003 0302 	and.w	r3, r3, #2
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01c      	beq.n	800f862 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800f828:	f107 030c 	add.w	r3, r7, #12
 800f82c:	461a      	mov	r2, r3
 800f82e:	2102      	movs	r1, #2
 800f830:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800f834:	f7ff fa52 	bl	800ecdc <mpu_write_mem>
 800f838:	4603      	mov	r3, r0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d002      	beq.n	800f844 <dmp_set_tap_thresh+0x1dc>
            return -1;
 800f83e:	f04f 33ff 	mov.w	r3, #4294967295
 800f842:	e031      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800f844:	f107 030c 	add.w	r3, r7, #12
 800f848:	3302      	adds	r3, #2
 800f84a:	461a      	mov	r2, r3
 800f84c:	2102      	movs	r1, #2
 800f84e:	f44f 7094 	mov.w	r0, #296	; 0x128
 800f852:	f7ff fa43 	bl	800ecdc <mpu_write_mem>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d002      	beq.n	800f862 <dmp_set_tap_thresh+0x1fa>
            return -1;
 800f85c:	f04f 33ff 	mov.w	r3, #4294967295
 800f860:	e022      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 800f862:	79fb      	ldrb	r3, [r7, #7]
 800f864:	f003 0304 	and.w	r3, r3, #4
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d01c      	beq.n	800f8a6 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800f86c:	f107 030c 	add.w	r3, r7, #12
 800f870:	461a      	mov	r2, r3
 800f872:	2102      	movs	r1, #2
 800f874:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800f878:	f7ff fa30 	bl	800ecdc <mpu_write_mem>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <dmp_set_tap_thresh+0x220>
            return -1;
 800f882:	f04f 33ff 	mov.w	r3, #4294967295
 800f886:	e00f      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800f888:	f107 030c 	add.w	r3, r7, #12
 800f88c:	3302      	adds	r3, #2
 800f88e:	461a      	mov	r2, r3
 800f890:	2102      	movs	r1, #2
 800f892:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f896:	f7ff fa21 	bl	800ecdc <mpu_write_mem>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <dmp_set_tap_thresh+0x23e>
            return -1;
 800f8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a4:	e000      	b.n	800f8a8 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800f8a6:	2300      	movs	r3, #0
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3718      	adds	r7, #24
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	43480000 	.word	0x43480000
 800f8b4:	46800000 	.word	0x46800000
 800f8b8:	46400000 	.word	0x46400000
 800f8bc:	46000000 	.word	0x46000000
 800f8c0:	45c00000 	.word	0x45c00000
 800f8c4:	45800000 	.word	0x45800000
 800f8c8:	45400000 	.word	0x45400000
 800f8cc:	45000000 	.word	0x45000000
 800f8d0:	44c00000 	.word	0x44c00000

0800f8d4 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	4603      	mov	r3, r0
 800f8dc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800f8e2:	79fb      	ldrb	r3, [r7, #7]
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d004      	beq.n	800f8f6 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800f8ec:	7bfb      	ldrb	r3, [r7, #15]
 800f8ee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	f003 0302 	and.w	r3, r3, #2
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d004      	beq.n	800f90a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800f900:	7bfb      	ldrb	r3, [r7, #15]
 800f902:	f043 030c 	orr.w	r3, r3, #12
 800f906:	b2db      	uxtb	r3, r3
 800f908:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800f90a:	79fb      	ldrb	r3, [r7, #7]
 800f90c:	f003 0304 	and.w	r3, r3, #4
 800f910:	2b00      	cmp	r3, #0
 800f912:	d004      	beq.n	800f91e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800f914:	7bfb      	ldrb	r3, [r7, #15]
 800f916:	f043 0303 	orr.w	r3, r3, #3
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800f91e:	f107 030f 	add.w	r3, r7, #15
 800f922:	461a      	mov	r2, r3
 800f924:	2101      	movs	r1, #1
 800f926:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800f92a:	f7ff f9d7 	bl	800ecdc <mpu_write_mem>
 800f92e:	4603      	mov	r3, r0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800f942:	79fb      	ldrb	r3, [r7, #7]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d102      	bne.n	800f94e <dmp_set_tap_count+0x16>
        min_taps = 1;
 800f948:	2301      	movs	r3, #1
 800f94a:	71fb      	strb	r3, [r7, #7]
 800f94c:	e004      	b.n	800f958 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800f94e:	79fb      	ldrb	r3, [r7, #7]
 800f950:	2b04      	cmp	r3, #4
 800f952:	d901      	bls.n	800f958 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800f954:	2304      	movs	r3, #4
 800f956:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	3b01      	subs	r3, #1
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800f960:	f107 030f 	add.w	r3, r7, #15
 800f964:	461a      	mov	r2, r3
 800f966:	2101      	movs	r1, #1
 800f968:	f240 104f 	movw	r0, #335	; 0x14f
 800f96c:	f7ff f9b6 	bl	800ecdc <mpu_write_mem>
 800f970:	4603      	mov	r3, r0
}
 800f972:	4618      	mov	r0, r3
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
	...

0800f97c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	4603      	mov	r3, r0
 800f984:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800f986:	88fb      	ldrh	r3, [r7, #6]
 800f988:	4a0c      	ldr	r2, [pc, #48]	; (800f9bc <dmp_set_tap_time+0x40>)
 800f98a:	fba2 2303 	umull	r2, r3, r2, r3
 800f98e:	089b      	lsrs	r3, r3, #2
 800f990:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800f992:	89fb      	ldrh	r3, [r7, #14]
 800f994:	0a1b      	lsrs	r3, r3, #8
 800f996:	b29b      	uxth	r3, r3
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800f99c:	89fb      	ldrh	r3, [r7, #14]
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800f9a2:	f107 030c 	add.w	r3, r7, #12
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	2102      	movs	r1, #2
 800f9aa:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800f9ae:	f7ff f995 	bl	800ecdc <mpu_write_mem>
 800f9b2:	4603      	mov	r3, r0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	cccccccd 	.word	0xcccccccd

0800f9c0 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800f9ca:	88fb      	ldrh	r3, [r7, #6]
 800f9cc:	4a0c      	ldr	r2, [pc, #48]	; (800fa00 <dmp_set_tap_time_multi+0x40>)
 800f9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800f9d2:	089b      	lsrs	r3, r3, #2
 800f9d4:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800f9d6:	89fb      	ldrh	r3, [r7, #14]
 800f9d8:	0a1b      	lsrs	r3, r3, #8
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800f9e0:	89fb      	ldrh	r3, [r7, #14]
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800f9e6:	f107 030c 	add.w	r3, r7, #12
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	2102      	movs	r1, #2
 800f9ee:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800f9f2:	f7ff f973 	bl	800ecdc <mpu_write_mem>
 800f9f6:	4603      	mov	r3, r0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	cccccccd 	.word	0xcccccccd

0800fa04 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	4a13      	ldr	r2, [pc, #76]	; (800fa60 <dmp_set_shake_reject_thresh+0x5c>)
 800fa14:	fb82 1203 	smull	r1, r2, r2, r3
 800fa18:	1192      	asrs	r2, r2, #6
 800fa1a:	17db      	asrs	r3, r3, #31
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	887a      	ldrh	r2, [r7, #2]
 800fa20:	fb02 f303 	mul.w	r3, r2, r3
 800fa24:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	161b      	asrs	r3, r3, #24
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	141b      	asrs	r3, r3, #16
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	121b      	asrs	r3, r3, #8
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800fa44:	f107 0308 	add.w	r3, r7, #8
 800fa48:	461a      	mov	r2, r3
 800fa4a:	2104      	movs	r1, #4
 800fa4c:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800fa50:	f7ff f944 	bl	800ecdc <mpu_write_mem>
 800fa54:	4603      	mov	r3, r0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	10624dd3 	.word	0x10624dd3

0800fa64 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800fa6e:	88fb      	ldrh	r3, [r7, #6]
 800fa70:	4a0c      	ldr	r2, [pc, #48]	; (800faa4 <dmp_set_shake_reject_time+0x40>)
 800fa72:	fba2 2303 	umull	r2, r3, r2, r3
 800fa76:	089b      	lsrs	r3, r3, #2
 800fa78:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800fa7a:	88fb      	ldrh	r3, [r7, #6]
 800fa7c:	0a1b      	lsrs	r3, r3, #8
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800fa84:	88fb      	ldrh	r3, [r7, #6]
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800fa8a:	f107 030c 	add.w	r3, r7, #12
 800fa8e:	461a      	mov	r2, r3
 800fa90:	2102      	movs	r1, #2
 800fa92:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800fa96:	f7ff f921 	bl	800ecdc <mpu_write_mem>
 800fa9a:	4603      	mov	r3, r0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	cccccccd 	.word	0xcccccccd

0800faa8 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800fab2:	88fb      	ldrh	r3, [r7, #6]
 800fab4:	4a0c      	ldr	r2, [pc, #48]	; (800fae8 <dmp_set_shake_reject_timeout+0x40>)
 800fab6:	fba2 2303 	umull	r2, r3, r2, r3
 800faba:	089b      	lsrs	r3, r3, #2
 800fabc:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800fabe:	88fb      	ldrh	r3, [r7, #6]
 800fac0:	0a1b      	lsrs	r3, r3, #8
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800fac8:	88fb      	ldrh	r3, [r7, #6]
 800faca:	b2db      	uxtb	r3, r3
 800facc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800face:	f107 030c 	add.w	r3, r7, #12
 800fad2:	461a      	mov	r2, r3
 800fad4:	2102      	movs	r1, #2
 800fad6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800fada:	f7ff f8ff 	bl	800ecdc <mpu_write_mem>
 800fade:	4603      	mov	r3, r0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	cccccccd 	.word	0xcccccccd

0800faec <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800faf6:	2302      	movs	r3, #2
 800faf8:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800fafa:	23ca      	movs	r3, #202	; 0xca
 800fafc:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800fafe:	23e3      	movs	r3, #227	; 0xe3
 800fb00:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800fb02:	2309      	movs	r3, #9
 800fb04:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800fb06:	f107 030c 	add.w	r3, r7, #12
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	2104      	movs	r1, #4
 800fb0e:	2068      	movs	r0, #104	; 0x68
 800fb10:	f7ff f8e4 	bl	800ecdc <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800fb14:	23a3      	movs	r3, #163	; 0xa3
 800fb16:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800fb18:	88fb      	ldrh	r3, [r7, #6]
 800fb1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800fb22:	23c0      	movs	r3, #192	; 0xc0
 800fb24:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800fb26:	23c8      	movs	r3, #200	; 0xc8
 800fb28:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800fb2a:	23c2      	movs	r3, #194	; 0xc2
 800fb2c:	73fb      	strb	r3, [r7, #15]
 800fb2e:	e005      	b.n	800fb3c <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800fb30:	23a3      	movs	r3, #163	; 0xa3
 800fb32:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800fb34:	23a3      	movs	r3, #163	; 0xa3
 800fb36:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800fb38:	23a3      	movs	r3, #163	; 0xa3
 800fb3a:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800fb3c:	88fb      	ldrh	r3, [r7, #6]
 800fb3e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d006      	beq.n	800fb54 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800fb46:	23c4      	movs	r3, #196	; 0xc4
 800fb48:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800fb4a:	23cc      	movs	r3, #204	; 0xcc
 800fb4c:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800fb4e:	23c6      	movs	r3, #198	; 0xc6
 800fb50:	74bb      	strb	r3, [r7, #18]
 800fb52:	e005      	b.n	800fb60 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800fb54:	23a3      	movs	r3, #163	; 0xa3
 800fb56:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800fb58:	23a3      	movs	r3, #163	; 0xa3
 800fb5a:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800fb5c:	23a3      	movs	r3, #163	; 0xa3
 800fb5e:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800fb60:	23a3      	movs	r3, #163	; 0xa3
 800fb62:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800fb64:	23a3      	movs	r3, #163	; 0xa3
 800fb66:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800fb68:	23a3      	movs	r3, #163	; 0xa3
 800fb6a:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 800fb6c:	f107 030c 	add.w	r3, r7, #12
 800fb70:	461a      	mov	r2, r3
 800fb72:	210a      	movs	r1, #10
 800fb74:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800fb78:	f7ff f8b0 	bl	800ecdc <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800fb7c:	88fb      	ldrh	r3, [r7, #6]
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800fb86:	2320      	movs	r3, #32
 800fb88:	733b      	strb	r3, [r7, #12]
 800fb8a:	e001      	b.n	800fb90 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800fb8c:	23d8      	movs	r3, #216	; 0xd8
 800fb8e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800fb90:	f107 030c 	add.w	r3, r7, #12
 800fb94:	461a      	mov	r2, r3
 800fb96:	2101      	movs	r1, #1
 800fb98:	f640 20b6 	movw	r0, #2742	; 0xab6
 800fb9c:	f7ff f89e 	bl	800ecdc <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800fba0:	88fb      	ldrh	r3, [r7, #6]
 800fba2:	f003 0320 	and.w	r3, r3, #32
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800fbaa:	2001      	movs	r0, #1
 800fbac:	f000 f8c6 	bl	800fd3c <dmp_enable_gyro_cal>
 800fbb0:	e002      	b.n	800fbb8 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	f000 f8c2 	bl	800fd3c <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800fbb8:	88fb      	ldrh	r3, [r7, #6]
 800fbba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d01d      	beq.n	800fbfe <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800fbc2:	88fb      	ldrh	r3, [r7, #6]
 800fbc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d008      	beq.n	800fbde <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800fbcc:	23b2      	movs	r3, #178	; 0xb2
 800fbce:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800fbd0:	238b      	movs	r3, #139	; 0x8b
 800fbd2:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800fbd4:	23b6      	movs	r3, #182	; 0xb6
 800fbd6:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800fbd8:	239b      	movs	r3, #155	; 0x9b
 800fbda:	73fb      	strb	r3, [r7, #15]
 800fbdc:	e007      	b.n	800fbee <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800fbde:	23b0      	movs	r3, #176	; 0xb0
 800fbe0:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800fbe2:	2380      	movs	r3, #128	; 0x80
 800fbe4:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800fbe6:	23b4      	movs	r3, #180	; 0xb4
 800fbe8:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800fbea:	2390      	movs	r3, #144	; 0x90
 800fbec:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800fbee:	f107 030c 	add.w	r3, r7, #12
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	2104      	movs	r1, #4
 800fbf6:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800fbfa:	f7ff f86f 	bl	800ecdc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800fbfe:	88fb      	ldrh	r3, [r7, #6]
 800fc00:	f003 0301 	and.w	r3, r3, #1
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d025      	beq.n	800fc54 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800fc08:	23f8      	movs	r3, #248	; 0xf8
 800fc0a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800fc0c:	f107 030c 	add.w	r3, r7, #12
 800fc10:	461a      	mov	r2, r3
 800fc12:	2101      	movs	r1, #1
 800fc14:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800fc18:	f7ff f860 	bl	800ecdc <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800fc1c:	21fa      	movs	r1, #250	; 0xfa
 800fc1e:	2007      	movs	r0, #7
 800fc20:	f7ff fd22 	bl	800f668 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800fc24:	2007      	movs	r0, #7
 800fc26:	f7ff fe55 	bl	800f8d4 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800fc2a:	2001      	movs	r0, #1
 800fc2c:	f7ff fe84 	bl	800f938 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800fc30:	2064      	movs	r0, #100	; 0x64
 800fc32:	f7ff fea3 	bl	800f97c <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800fc36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc3a:	f7ff fec1 	bl	800f9c0 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800fc3e:	21c8      	movs	r1, #200	; 0xc8
 800fc40:	483c      	ldr	r0, [pc, #240]	; (800fd34 <dmp_enable_feature+0x248>)
 800fc42:	f7ff fedf 	bl	800fa04 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800fc46:	2028      	movs	r0, #40	; 0x28
 800fc48:	f7ff ff0c 	bl	800fa64 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800fc4c:	200a      	movs	r0, #10
 800fc4e:	f7ff ff2b 	bl	800faa8 <dmp_set_shake_reject_timeout>
 800fc52:	e009      	b.n	800fc68 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800fc54:	23d8      	movs	r3, #216	; 0xd8
 800fc56:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800fc58:	f107 030c 	add.w	r3, r7, #12
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	2101      	movs	r1, #1
 800fc60:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800fc64:	f7ff f83a 	bl	800ecdc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800fc68:	88fb      	ldrh	r3, [r7, #6]
 800fc6a:	f003 0302 	and.w	r3, r3, #2
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d002      	beq.n	800fc78 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 800fc72:	23d9      	movs	r3, #217	; 0xd9
 800fc74:	733b      	strb	r3, [r7, #12]
 800fc76:	e001      	b.n	800fc7c <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800fc78:	23d8      	movs	r3, #216	; 0xd8
 800fc7a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800fc7c:	f107 030c 	add.w	r3, r7, #12
 800fc80:	461a      	mov	r2, r3
 800fc82:	2101      	movs	r1, #1
 800fc84:	f240 703d 	movw	r0, #1853	; 0x73d
 800fc88:	f7ff f828 	bl	800ecdc <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800fc8c:	88fb      	ldrh	r3, [r7, #6]
 800fc8e:	f003 0304 	and.w	r3, r3, #4
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800fc96:	2001      	movs	r0, #1
 800fc98:	f000 f880 	bl	800fd9c <dmp_enable_lp_quat>
 800fc9c:	e002      	b.n	800fca4 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800fc9e:	2000      	movs	r0, #0
 800fca0:	f000 f87c 	bl	800fd9c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800fca4:	88fb      	ldrh	r3, [r7, #6]
 800fca6:	f003 0310 	and.w	r3, r3, #16
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d003      	beq.n	800fcb6 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800fcae:	2001      	movs	r0, #1
 800fcb0:	f000 f89b 	bl	800fdea <dmp_enable_6x_lp_quat>
 800fcb4:	e002      	b.n	800fcbc <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	f000 f897 	bl	800fdea <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800fcbc:	88fb      	ldrh	r3, [r7, #6]
 800fcbe:	f043 0308 	orr.w	r3, r3, #8
 800fcc2:	b29a      	uxth	r2, r3
 800fcc4:	4b1c      	ldr	r3, [pc, #112]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fcc6:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800fcc8:	f7fd fbcc 	bl	800d464 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800fccc:	4b1a      	ldr	r3, [pc, #104]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fcce:	2200      	movs	r2, #0
 800fcd0:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800fcd2:	88fb      	ldrh	r3, [r7, #6]
 800fcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d005      	beq.n	800fce8 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800fcdc:	4b16      	ldr	r3, [pc, #88]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fcde:	7b9b      	ldrb	r3, [r3, #14]
 800fce0:	3306      	adds	r3, #6
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	4b14      	ldr	r3, [pc, #80]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fce6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800fce8:	88fb      	ldrh	r3, [r7, #6]
 800fcea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d005      	beq.n	800fcfe <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800fcf2:	4b11      	ldr	r3, [pc, #68]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fcf4:	7b9b      	ldrb	r3, [r3, #14]
 800fcf6:	3306      	adds	r3, #6
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fcfc:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800fcfe:	88fb      	ldrh	r3, [r7, #6]
 800fd00:	f003 0314 	and.w	r3, r3, #20
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d005      	beq.n	800fd14 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800fd08:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fd0a:	7b9b      	ldrb	r3, [r3, #14]
 800fd0c:	3310      	adds	r3, #16
 800fd0e:	b2da      	uxtb	r2, r3
 800fd10:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fd12:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800fd14:	88fb      	ldrh	r3, [r7, #6]
 800fd16:	f003 0303 	and.w	r3, r3, #3
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d005      	beq.n	800fd2a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800fd1e:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fd20:	7b9b      	ldrb	r3, [r3, #14]
 800fd22:	3304      	adds	r3, #4
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	4b04      	ldr	r3, [pc, #16]	; (800fd38 <dmp_enable_feature+0x24c>)
 800fd28:	739a      	strb	r2, [r3, #14]

    return 0;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	02cae309 	.word	0x02cae309
 800fd38:	200012cc 	.word	0x200012cc

0800fd3c <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00f      	beq.n	800fd6c <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800fd4c:	4a11      	ldr	r2, [pc, #68]	; (800fd94 <dmp_enable_gyro_cal+0x58>)
 800fd4e:	f107 0314 	add.w	r3, r7, #20
 800fd52:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd54:	c303      	stmia	r3!, {r0, r1}
 800fd56:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800fd58:	f107 0314 	add.w	r3, r7, #20
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	2109      	movs	r1, #9
 800fd60:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800fd64:	f7fe ffba 	bl	800ecdc <mpu_write_mem>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	e00e      	b.n	800fd8a <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800fd6c:	4a0a      	ldr	r2, [pc, #40]	; (800fd98 <dmp_enable_gyro_cal+0x5c>)
 800fd6e:	f107 0308 	add.w	r3, r7, #8
 800fd72:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd74:	c303      	stmia	r3!, {r0, r1}
 800fd76:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800fd78:	f107 0308 	add.w	r3, r7, #8
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	2109      	movs	r1, #9
 800fd80:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800fd84:	f7fe ffaa 	bl	800ecdc <mpu_write_mem>
 800fd88:	4603      	mov	r3, r0
    }
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3720      	adds	r7, #32
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	08019548 	.word	0x08019548
 800fd98:	08019554 	.word	0x08019554

0800fd9c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	4603      	mov	r3, r0
 800fda4:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d008      	beq.n	800fdbe <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800fdac:	23c0      	movs	r3, #192	; 0xc0
 800fdae:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800fdb0:	23c2      	movs	r3, #194	; 0xc2
 800fdb2:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800fdb4:	23c4      	movs	r3, #196	; 0xc4
 800fdb6:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800fdb8:	23c6      	movs	r3, #198	; 0xc6
 800fdba:	73fb      	strb	r3, [r7, #15]
 800fdbc:	e006      	b.n	800fdcc <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800fdbe:	f107 030c 	add.w	r3, r7, #12
 800fdc2:	2204      	movs	r2, #4
 800fdc4:	218b      	movs	r1, #139	; 0x8b
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f004 f85a 	bl	8013e80 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800fdcc:	f107 030c 	add.w	r3, r7, #12
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	2104      	movs	r1, #4
 800fdd4:	f640 2098 	movw	r0, #2712	; 0xa98
 800fdd8:	f7fe ff80 	bl	800ecdc <mpu_write_mem>

    return mpu_reset_fifo();
 800fddc:	f7fd fb42 	bl	800d464 <mpu_reset_fifo>
 800fde0:	4603      	mov	r3, r0
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b084      	sub	sp, #16
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800fdf4:	79fb      	ldrb	r3, [r7, #7]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d008      	beq.n	800fe0c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800fdfa:	2320      	movs	r3, #32
 800fdfc:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800fdfe:	2328      	movs	r3, #40	; 0x28
 800fe00:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800fe02:	2330      	movs	r3, #48	; 0x30
 800fe04:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800fe06:	2338      	movs	r3, #56	; 0x38
 800fe08:	73fb      	strb	r3, [r7, #15]
 800fe0a:	e006      	b.n	800fe1a <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800fe0c:	f107 030c 	add.w	r3, r7, #12
 800fe10:	2204      	movs	r2, #4
 800fe12:	21a3      	movs	r1, #163	; 0xa3
 800fe14:	4618      	mov	r0, r3
 800fe16:	f004 f833 	bl	8013e80 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800fe1a:	f107 030c 	add.w	r3, r7, #12
 800fe1e:	461a      	mov	r2, r3
 800fe20:	2104      	movs	r1, #4
 800fe22:	f640 209e 	movw	r0, #2718	; 0xa9e
 800fe26:	f7fe ff59 	bl	800ecdc <mpu_write_mem>

    return mpu_reset_fifo();
 800fe2a:	f7fd fb1b 	bl	800d464 <mpu_reset_fifo>
 800fe2e:	4603      	mov	r3, r0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3303      	adds	r3, #3
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fe4a:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	3303      	adds	r3, #3
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe56:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	f003 0301 	and.w	r3, r3, #1
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d012      	beq.n	800fe8c <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800fe66:	7bbb      	ldrb	r3, [r7, #14]
 800fe68:	08db      	lsrs	r3, r3, #3
 800fe6a:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800fe6c:	7bbb      	ldrb	r3, [r7, #14]
 800fe6e:	f003 0307 	and.w	r3, r3, #7
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	3301      	adds	r3, #1
 800fe76:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800fe78:	4b10      	ldr	r3, [pc, #64]	; (800febc <decode_gesture+0x84>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d005      	beq.n	800fe8c <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800fe80:	4b0e      	ldr	r3, [pc, #56]	; (800febc <decode_gesture+0x84>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	7b39      	ldrb	r1, [r7, #12]
 800fe86:	7b7a      	ldrb	r2, [r7, #13]
 800fe88:	4610      	mov	r0, r2
 800fe8a:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	f003 0308 	and.w	r3, r3, #8
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00a      	beq.n	800feb0 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800fe9a:	4b08      	ldr	r3, [pc, #32]	; (800febc <decode_gesture+0x84>)
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d006      	beq.n	800feb0 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800fea2:	4b06      	ldr	r3, [pc, #24]	; (800febc <decode_gesture+0x84>)
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	7bfa      	ldrb	r2, [r7, #15]
 800fea8:	0992      	lsrs	r2, r2, #6
 800feaa:	b2d2      	uxtb	r2, r2
 800feac:	4610      	mov	r0, r2
 800feae:	4798      	blx	r3
    }

    return 0;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	200012cc 	.word	0x200012cc

0800fec0 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b092      	sub	sp, #72	; 0x48
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800fed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fed6:	2200      	movs	r2, #0
 800fed8:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800feda:	4bae      	ldr	r3, [pc, #696]	; (8010194 <dmp_read_fifo+0x2d4>)
 800fedc:	7b9b      	ldrb	r3, [r3, #14]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	f107 0120 	add.w	r1, r7, #32
 800fee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fd ff56 	bl	800dd98 <mpu_read_fifo_stream>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d002      	beq.n	800fef8 <dmp_read_fifo+0x38>
        return -1;
 800fef2:	f04f 33ff 	mov.w	r3, #4294967295
 800fef6:	e148      	b.n	801018a <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800fef8:	4ba6      	ldr	r3, [pc, #664]	; (8010194 <dmp_read_fifo+0x2d4>)
 800fefa:	895b      	ldrh	r3, [r3, #10]
 800fefc:	f003 0314 	and.w	r3, r3, #20
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 808a 	beq.w	801001a <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800ff06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff0a:	061a      	lsls	r2, r3, #24
 800ff0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ff10:	041b      	lsls	r3, r3, #16
 800ff12:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800ff14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff18:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800ff1a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800ff1c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ff20:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff2a:	061a      	lsls	r2, r3, #24
 800ff2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ff30:	041b      	lsls	r3, r3, #16
 800ff32:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800ff34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff38:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff3a:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800ff3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff40:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800ff46:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800ff48:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff4e:	061a      	lsls	r2, r3, #24
 800ff50:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ff54:	041b      	lsls	r3, r3, #16
 800ff56:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800ff58:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ff5c:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff5e:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800ff60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff64:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800ff6a:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800ff6c:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff72:	061a      	lsls	r2, r3, #24
 800ff74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ff78:	041b      	lsls	r3, r3, #16
 800ff7a:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800ff7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ff80:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff82:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800ff84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff88:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800ff8e:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800ff90:	601a      	str	r2, [r3, #0]
        ii += 16;
 800ff92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ff96:	3310      	adds	r3, #16
 800ff98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	141b      	asrs	r3, r3, #16
 800ffa2:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	3304      	adds	r3, #4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	141b      	asrs	r3, r3, #16
 800ffac:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	3308      	adds	r3, #8
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	141b      	asrs	r3, r3, #16
 800ffb6:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	330c      	adds	r3, #12
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	141b      	asrs	r3, r3, #16
 800ffc0:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	693a      	ldr	r2, [r7, #16]
 800ffc6:	fb03 f202 	mul.w	r2, r3, r2
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	6979      	ldr	r1, [r7, #20]
 800ffce:	fb01 f303 	mul.w	r3, r1, r3
 800ffd2:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	69b9      	ldr	r1, [r7, #24]
 800ffd8:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800ffdc:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	69f9      	ldr	r1, [r7, #28]
 800ffe2:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800ffe6:	4413      	add	r3, r2
 800ffe8:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800ffea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fff0:	db03      	blt.n	800fffa <dmp_read_fifo+0x13a>
 800fff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff4:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 800fff8:	dd07      	ble.n	801000a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800fffa:	f7fd fa33 	bl	800d464 <mpu_reset_fifo>
            sensors[0] = 0;
 800fffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010000:	2200      	movs	r2, #0
 8010002:	801a      	strh	r2, [r3, #0]
            return -1;
 8010004:	f04f 33ff 	mov.w	r3, #4294967295
 8010008:	e0bf      	b.n	801018a <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 801000a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801000c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010014:	b21a      	sxth	r2, r3
 8010016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010018:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 801001a:	4b5e      	ldr	r3, [pc, #376]	; (8010194 <dmp_read_fifo+0x2d4>)
 801001c:	895b      	ldrh	r3, [r3, #10]
 801001e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010022:	2b00      	cmp	r3, #0
 8010024:	d04c      	beq.n	80100c0 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8010026:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801002a:	3348      	adds	r3, #72	; 0x48
 801002c:	443b      	add	r3, r7
 801002e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010032:	021b      	lsls	r3, r3, #8
 8010034:	b21a      	sxth	r2, r3
 8010036:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801003a:	3301      	adds	r3, #1
 801003c:	3348      	adds	r3, #72	; 0x48
 801003e:	443b      	add	r3, r7
 8010040:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010044:	b21b      	sxth	r3, r3
 8010046:	4313      	orrs	r3, r2
 8010048:	b21a      	sxth	r2, r3
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 801004e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010052:	3302      	adds	r3, #2
 8010054:	3348      	adds	r3, #72	; 0x48
 8010056:	443b      	add	r3, r7
 8010058:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801005c:	021b      	lsls	r3, r3, #8
 801005e:	b219      	sxth	r1, r3
 8010060:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010064:	3303      	adds	r3, #3
 8010066:	3348      	adds	r3, #72	; 0x48
 8010068:	443b      	add	r3, r7
 801006a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801006e:	b21a      	sxth	r2, r3
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3302      	adds	r3, #2
 8010074:	430a      	orrs	r2, r1
 8010076:	b212      	sxth	r2, r2
 8010078:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 801007a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801007e:	3304      	adds	r3, #4
 8010080:	3348      	adds	r3, #72	; 0x48
 8010082:	443b      	add	r3, r7
 8010084:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010088:	021b      	lsls	r3, r3, #8
 801008a:	b219      	sxth	r1, r3
 801008c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010090:	3305      	adds	r3, #5
 8010092:	3348      	adds	r3, #72	; 0x48
 8010094:	443b      	add	r3, r7
 8010096:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801009a:	b21a      	sxth	r2, r3
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	3304      	adds	r3, #4
 80100a0:	430a      	orrs	r2, r1
 80100a2:	b212      	sxth	r2, r2
 80100a4:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80100a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100aa:	3306      	adds	r3, #6
 80100ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 80100b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100b6:	f043 0308 	orr.w	r3, r3, #8
 80100ba:	b21a      	sxth	r2, r3
 80100bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100be:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80100c0:	4b34      	ldr	r3, [pc, #208]	; (8010194 <dmp_read_fifo+0x2d4>)
 80100c2:	895b      	ldrh	r3, [r3, #10]
 80100c4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d04c      	beq.n	8010166 <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80100cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100d0:	3348      	adds	r3, #72	; 0x48
 80100d2:	443b      	add	r3, r7
 80100d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80100d8:	021b      	lsls	r3, r3, #8
 80100da:	b21a      	sxth	r2, r3
 80100dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100e0:	3301      	adds	r3, #1
 80100e2:	3348      	adds	r3, #72	; 0x48
 80100e4:	443b      	add	r3, r7
 80100e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80100ea:	b21b      	sxth	r3, r3
 80100ec:	4313      	orrs	r3, r2
 80100ee:	b21a      	sxth	r2, r3
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80100f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100f8:	3302      	adds	r3, #2
 80100fa:	3348      	adds	r3, #72	; 0x48
 80100fc:	443b      	add	r3, r7
 80100fe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010102:	021b      	lsls	r3, r3, #8
 8010104:	b219      	sxth	r1, r3
 8010106:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801010a:	3303      	adds	r3, #3
 801010c:	3348      	adds	r3, #72	; 0x48
 801010e:	443b      	add	r3, r7
 8010110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010114:	b21a      	sxth	r2, r3
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	3302      	adds	r3, #2
 801011a:	430a      	orrs	r2, r1
 801011c:	b212      	sxth	r2, r2
 801011e:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8010120:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010124:	3304      	adds	r3, #4
 8010126:	3348      	adds	r3, #72	; 0x48
 8010128:	443b      	add	r3, r7
 801012a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801012e:	021b      	lsls	r3, r3, #8
 8010130:	b219      	sxth	r1, r3
 8010132:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010136:	3305      	adds	r3, #5
 8010138:	3348      	adds	r3, #72	; 0x48
 801013a:	443b      	add	r3, r7
 801013c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010140:	b21a      	sxth	r2, r3
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3304      	adds	r3, #4
 8010146:	430a      	orrs	r2, r1
 8010148:	b212      	sxth	r2, r2
 801014a:	801a      	strh	r2, [r3, #0]
        ii += 6;
 801014c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010150:	3306      	adds	r3, #6
 8010152:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8010156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010158:	f9b3 3000 	ldrsh.w	r3, [r3]
 801015c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8010160:	b21a      	sxth	r2, r3
 8010162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010164:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8010166:	4b0b      	ldr	r3, [pc, #44]	; (8010194 <dmp_read_fifo+0x2d4>)
 8010168:	895b      	ldrh	r3, [r3, #10]
 801016a:	f003 0303 	and.w	r3, r3, #3
 801016e:	2b00      	cmp	r3, #0
 8010170:	d007      	beq.n	8010182 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8010172:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010176:	f107 0220 	add.w	r2, r7, #32
 801017a:	4413      	add	r3, r2
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fe5b 	bl	800fe38 <decode_gesture>

    get_ms(timestamp);
 8010182:	6838      	ldr	r0, [r7, #0]
 8010184:	f000 f997 	bl	80104b6 <f4_get_tick_ms_cnt>
    return 0;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3748      	adds	r7, #72	; 0x48
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	200012cc 	.word	0x200012cc

08010198 <w_mpu_init>:
 * @brief  MPU_Read_Device_Addr()  		初始化mpu6050.
 * @note   														初始化mpu6050
 * @retval HAL status									mpu_ok/mpu_err
 */
mpu_state_t w_mpu_init(void)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
	static uint8_t device_id = 0x00u;

	//MPU原始数据清零
	for (int i = 0; i < sizeof(mpu_raw_msg); i++)
 801019e:	2300      	movs	r3, #0
 80101a0:	607b      	str	r3, [r7, #4]
 80101a2:	e007      	b.n	80101b4 <w_mpu_init+0x1c>
		((uint8_t*) &mpu_raw_msg)[i] = 0;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4a2b      	ldr	r2, [pc, #172]	; (8010254 <w_mpu_init+0xbc>)
 80101a8:	4413      	add	r3, r2
 80101aa:	2200      	movs	r2, #0
 80101ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(mpu_raw_msg); i++)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3301      	adds	r3, #1
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b0f      	cmp	r3, #15
 80101b8:	d9f4      	bls.n	80101a4 <w_mpu_init+0xc>

	//这里可以不用初始配置gpio端口, CUBEMX生成开头会有初始化I2C的gpio端口
//	MPU_I2C_GPIO_INIT;

	//检查ID
	device_id = w_mpu_read_device_address();
 80101ba:	f000 f855 	bl	8010268 <w_mpu_read_device_address>
 80101be:	4603      	mov	r3, r0
 80101c0:	461a      	mov	r2, r3
 80101c2:	4b25      	ldr	r3, [pc, #148]	; (8010258 <w_mpu_init+0xc0>)
 80101c4:	701a      	strb	r2, [r3, #0]
	printf("设备ID:       0x%x\r\n", device_id);
 80101c6:	4b24      	ldr	r3, [pc, #144]	; (8010258 <w_mpu_init+0xc0>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	461a      	mov	r2, r3
 80101cc:	4923      	ldr	r1, [pc, #140]	; (801025c <w_mpu_init+0xc4>)
 80101ce:	4824      	ldr	r0, [pc, #144]	; (8010260 <w_mpu_init+0xc8>)
 80101d0:	f004 fd6c 	bl	8014cac <siprintf>
 80101d4:	4822      	ldr	r0, [pc, #136]	; (8010260 <w_mpu_init+0xc8>)
 80101d6:	f003 fe01 	bl	8013ddc <printf_Base>
	printf("\r\n");
 80101da:	4922      	ldr	r1, [pc, #136]	; (8010264 <w_mpu_init+0xcc>)
 80101dc:	4820      	ldr	r0, [pc, #128]	; (8010260 <w_mpu_init+0xc8>)
 80101de:	f004 fd65 	bl	8014cac <siprintf>
 80101e2:	481f      	ldr	r0, [pc, #124]	; (8010260 <w_mpu_init+0xc8>)
 80101e4:	f003 fdfa 	bl	8013ddc <printf_Base>
	if (device_id == mpu_id_err)
 80101e8:	4b1b      	ldr	r3, [pc, #108]	; (8010258 <w_mpu_init+0xc0>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	2b03      	cmp	r3, #3
 80101ee:	d101      	bne.n	80101f4 <w_mpu_init+0x5c>
		return mpu_id_err;				//ID错误
 80101f0:	2303      	movs	r3, #3
 80101f2:	e02b      	b.n	801024c <w_mpu_init+0xb4>

	/* 注意：MPU6000 & MPU6050设备在'上电时'会进入'睡眠模式' */
	/* 注意：MPU6000 & MPU6050设备在'上电时'会进入'睡眠模式' */
	/* 注意：MPU6000 & MPU6050设备在'上电时'会进入'睡眠模式' */
	//复位MPU6050,	0x08
	w_mpu_write_byte(_MPU_PWR_MGMT_1, mpu_pwr_mgmt_1_reset);
 80101f4:	2180      	movs	r1, #128	; 0x80
 80101f6:	206b      	movs	r0, #107	; 0x6b
 80101f8:	f000 f8e6 	bl	80103c8 <w_mpu_write_byte>
	HAL_Delay(50);
 80101fc:	2032      	movs	r0, #50	; 0x32
 80101fe:	f7f2 fff1 	bl	80031e4 <HAL_Delay>

	//唤醒MPU6050,	0x00
	w_mpu_write_byte(_MPU_PWR_MGMT_1, mpu_pwr_mgmt_1_rouse);
 8010202:	2100      	movs	r1, #0
 8010204:	206b      	movs	r0, #107	; 0x6b
 8010206:	f000 f8df 	bl	80103c8 <w_mpu_write_byte>
//	HAL_Delay(50);

	//陀螺量程范围，±2000dps.		0x03
	w_mpu_set_gyro_fsr(mpu_gyro_fsr_2000s);
 801020a:	2003      	movs	r0, #3
 801020c:	f000 f8b0 	bl	8010370 <w_mpu_set_gyro_fsr>

	//加速度计程范围，±8g.			0x00
	w_mpu_set_acce_fsr(mpu_acce_fsr_2g);
 8010210:	2000      	movs	r0, #0
 8010212:	f000 f8c3 	bl	801039c <w_mpu_set_acce_fsr>

	//配置采样频率分频寄存器, 1k/4, 取样率为25Hz。
	w_mpu_set_sample_rate(0x07);
 8010216:	2007      	movs	r0, #7
 8010218:	f000 f880 	bl	801031c <w_mpu_set_sample_rate>

	//配置低通滤波，截止频率100Hz左右。
	w_mpu_set_dlpf(2);
 801021c:	2002      	movs	r0, #2
 801021e:	f000 f892 	bl	8010346 <w_mpu_set_dlpf>

	//中断信号为高电平, 直到有读取操作才消失, 直通辅助I2C。
	w_mpu_write_byte(_MPU_INT_BP_CFG_REG, 0x80);
 8010222:	2180      	movs	r1, #128	; 0x80
 8010224:	2037      	movs	r0, #55	; 0x37
 8010226:	f000 f8cf 	bl	80103c8 <w_mpu_write_byte>

	//使能 "数据就绪" 中断 (Data Ready interrupt) ,所有的传感器寄存器写操作完成时都会产生
	w_mpu_write_byte(_MPU_INT_ENABLE_REG, 0x00);
 801022a:	2100      	movs	r1, #0
 801022c:	2038      	movs	r0, #56	; 0x38
 801022e:	f000 f8cb 	bl	80103c8 <w_mpu_write_byte>

	//不使用辅助I2C.
	w_mpu_write_byte(_MPU_USER_CTRL, 0x00);
 8010232:	2100      	movs	r1, #0
 8010234:	206a      	movs	r0, #106	; 0x6a
 8010236:	f000 f8c7 	bl	80103c8 <w_mpu_write_byte>

	//设备的系统时钟 与 X轴陀螺仪参考.
	w_mpu_write_byte(_MPU_PWR_MGMT_1, mpu_pwr_mgmt_1_clksel_x);
 801023a:	2101      	movs	r1, #1
 801023c:	206b      	movs	r0, #107	; 0x6b
 801023e:	f000 f8c3 	bl	80103c8 <w_mpu_write_byte>

	//加速度与陀螺仪都工作
	w_mpu_write_byte(_MPU_PWR_MGMT_2, 0x00);
 8010242:	2100      	movs	r1, #0
 8010244:	206c      	movs	r0, #108	; 0x6c
 8010246:	f000 f8bf 	bl	80103c8 <w_mpu_write_byte>

	return mpu_ok;
 801024a:	2300      	movs	r3, #0

}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	200012dc 	.word	0x200012dc
 8010258:	200012f8 	.word	0x200012f8
 801025c:	08019578 	.word	0x08019578
 8010260:	20001308 	.word	0x20001308
 8010264:	08019590 	.word	0x08019590

08010268 <w_mpu_read_device_address>:
 * @brief  MPU_Read_Device_Addr()  		读取MPU的设备ID.
 * @note   														读取MPU的设备ID
 * @retval HAL status									id/mpu_err
 */
uint8_t w_mpu_read_device_address(void)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	af00      	add	r7, sp, #0
	static uint8_t id = 0x00u;			//存放读取到的数据（设备ID）

	//0x75
	id = w_mpu_read_byte(_MPU_DEVICE_ID);
 801026c:	2075      	movs	r0, #117	; 0x75
 801026e:	f000 f8d1 	bl	8010414 <w_mpu_read_byte>
 8010272:	4603      	mov	r3, r0
 8010274:	461a      	mov	r2, r3
 8010276:	4b06      	ldr	r3, [pc, #24]	; (8010290 <w_mpu_read_device_address+0x28>)
 8010278:	701a      	strb	r2, [r3, #0]
	if (id == mpu_err)
 801027a:	4b05      	ldr	r3, [pc, #20]	; (8010290 <w_mpu_read_device_address+0x28>)
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	2b01      	cmp	r3, #1
 8010280:	d101      	bne.n	8010286 <w_mpu_read_device_address+0x1e>
	{
//		printf("mpu6050_device_id:  0x%x\r\n(ID_ERROR)", id);
		return mpu_id_err;		//设备id错误
 8010282:	2303      	movs	r3, #3
 8010284:	e001      	b.n	801028a <w_mpu_read_device_address+0x22>
	}
	return id;							//返回设备ID
 8010286:	4b02      	ldr	r3, [pc, #8]	; (8010290 <w_mpu_read_device_address+0x28>)
 8010288:	781b      	ldrb	r3, [r3, #0]
}
 801028a:	4618      	mov	r0, r3
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	200012f9 	.word	0x200012f9
 8010294:	00000000 	.word	0x00000000

08010298 <w_mpu_read_temperature>:
 * @brief  w_mpu_read_raw_temperature()  		读取MPU温度.
 * @param  *mpu_raw_msg_buff       Note
 * @retval HAL status							mpu_ok/mpu_err
 */
float w_mpu_read_temperature(void)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	af00      	add	r7, sp, #0
	static uint8_t msg_temp[2];					//缓冲区
	static short mpu_temperature_biff;	//温度缓冲区

	//读取内置温度传感器数据
	if (w_mpu_read_byte_len(_MPU_TEMP_OUT_H_REG, msg_temp, sizeof(msg_temp)) == mpu_err)
 801029c:	2202      	movs	r2, #2
 801029e:	491c      	ldr	r1, [pc, #112]	; (8010310 <w_mpu_read_temperature+0x78>)
 80102a0:	2041      	movs	r0, #65	; 0x41
 80102a2:	f000 f8d9 	bl	8010458 <w_mpu_read_byte_len>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d102      	bne.n	80102b2 <w_mpu_read_temperature+0x1a>
		return mpu_err;
 80102ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80102b0:	e025      	b.n	80102fe <w_mpu_read_temperature+0x66>

	mpu_temperature_biff = ((uint16_t) msg_temp[0] << 8) | msg_temp[1];		//MPU温度值
 80102b2:	4b17      	ldr	r3, [pc, #92]	; (8010310 <w_mpu_read_temperature+0x78>)
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	021b      	lsls	r3, r3, #8
 80102b8:	b21a      	sxth	r2, r3
 80102ba:	4b15      	ldr	r3, [pc, #84]	; (8010310 <w_mpu_read_temperature+0x78>)
 80102bc:	785b      	ldrb	r3, [r3, #1]
 80102be:	b21b      	sxth	r3, r3
 80102c0:	4313      	orrs	r3, r2
 80102c2:	b21a      	sxth	r2, r3
 80102c4:	4b13      	ldr	r3, [pc, #76]	; (8010314 <w_mpu_read_temperature+0x7c>)
 80102c6:	801a      	strh	r2, [r3, #0]

	return (36.53f + ((double) mpu_temperature_biff) / 340.0f);	//计算后的真实温度值
 80102c8:	4b12      	ldr	r3, [pc, #72]	; (8010314 <w_mpu_read_temperature+0x7c>)
 80102ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7f0 f928 	bl	8000524 <__aeabi_i2d>
 80102d4:	f04f 0200 	mov.w	r2, #0
 80102d8:	4b0f      	ldr	r3, [pc, #60]	; (8010318 <w_mpu_read_temperature+0x80>)
 80102da:	f7f0 fab7 	bl	800084c <__aeabi_ddiv>
 80102de:	4602      	mov	r2, r0
 80102e0:	460b      	mov	r3, r1
 80102e2:	4610      	mov	r0, r2
 80102e4:	4619      	mov	r1, r3
 80102e6:	a308      	add	r3, pc, #32	; (adr r3, 8010308 <w_mpu_read_temperature+0x70>)
 80102e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ec:	f7ef ffce 	bl	800028c <__adddf3>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4610      	mov	r0, r2
 80102f6:	4619      	mov	r1, r3
 80102f8:	f7f0 fc76 	bl	8000be8 <__aeabi_d2f>
 80102fc:	4603      	mov	r3, r0

}
 80102fe:	ee07 3a90 	vmov	s15, r3
 8010302:	eeb0 0a67 	vmov.f32	s0, s15
 8010306:	bd80      	pop	{r7, pc}
 8010308:	00000000 	.word	0x00000000
 801030c:	404243d7 	.word	0x404243d7
 8010310:	200012fc 	.word	0x200012fc
 8010314:	200012fe 	.word	0x200012fe
 8010318:	40754000 	.word	0x40754000

0801031c <w_mpu_set_sample_rate>:
 * @brief  mpu_set_sample_rate()  					配置采样频率分频寄存器.
 * @retval HAL status							mpu_ok/mpu_err
 */
//设置MPU6050的采样率
mpu_state_t w_mpu_set_sample_rate(uint16_t rate)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	4603      	mov	r3, r0
 8010324:	80fb      	strh	r3, [r7, #6]
	// 0x19, 设置数字低通滤波器
	if (w_mpu_write_byte(_MPU_SAMPLE_RATE_DIVIDER_REG, rate) == mpu_ok)
 8010326:	88fb      	ldrh	r3, [r7, #6]
 8010328:	b2db      	uxtb	r3, r3
 801032a:	4619      	mov	r1, r3
 801032c:	2019      	movs	r0, #25
 801032e:	f000 f84b 	bl	80103c8 <w_mpu_write_byte>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d101      	bne.n	801033c <w_mpu_set_sample_rate+0x20>
		return mpu_ok;					//配置成功
 8010338:	2300      	movs	r3, #0
 801033a:	e000      	b.n	801033e <w_mpu_set_sample_rate+0x22>
	else
		return mpu_err;					//配置失败
 801033c:	2301      	movs	r3, #1

}
 801033e:	4618      	mov	r0, r3
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <w_mpu_set_dlpf>:
 * @brief  mpu_set_dlpf()  					配置数字低通滤波器.
 * @retval HAL status							mpu_ok/mpu_err
 */

mpu_state_t w_mpu_set_dlpf(uint16_t dlpf)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b082      	sub	sp, #8
 801034a:	af00      	add	r7, sp, #0
 801034c:	4603      	mov	r3, r0
 801034e:	80fb      	strh	r3, [r7, #6]
	// 0x1A,  截止频率100Hz左右。
	if (w_mpu_write_byte(_MPU_CONFIG_REG, dlpf) == mpu_ok)
 8010350:	88fb      	ldrh	r3, [r7, #6]
 8010352:	b2db      	uxtb	r3, r3
 8010354:	4619      	mov	r1, r3
 8010356:	201a      	movs	r0, #26
 8010358:	f000 f836 	bl	80103c8 <w_mpu_write_byte>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d101      	bne.n	8010366 <w_mpu_set_dlpf+0x20>
		return mpu_ok;					//配置成功
 8010362:	2300      	movs	r3, #0
 8010364:	e000      	b.n	8010368 <w_mpu_set_dlpf+0x22>
	else
		return mpu_err;					//配置失败
 8010366:	2301      	movs	r3, #1

}
 8010368:	4618      	mov	r0, r3
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <w_mpu_set_gyro_fsr>:
 * @brief  w_mpu_set_gyro_fsr()  		配置陀螺仪满量程范围.
 * @param  fsr       							配置量程范围在mpu_fsr_e中
 * @retval HAL status							mpu_ok/mpu_err
 */
mpu_state_t w_mpu_set_gyro_fsr(mpu_fsr_t gyro_fsr)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	4603      	mov	r3, r0
 8010378:	71fb      	strb	r3, [r7, #7]
	//0x1B
	if (w_mpu_write_byte(_MPU_GYRO_CONFIG_REG, gyro_fsr << 3) == mpu_ok)
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	00db      	lsls	r3, r3, #3
 801037e:	b2db      	uxtb	r3, r3
 8010380:	4619      	mov	r1, r3
 8010382:	201b      	movs	r0, #27
 8010384:	f000 f820 	bl	80103c8 <w_mpu_write_byte>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d101      	bne.n	8010392 <w_mpu_set_gyro_fsr+0x22>
		return mpu_ok;					//配置成功
 801038e:	2300      	movs	r3, #0
 8010390:	e000      	b.n	8010394 <w_mpu_set_gyro_fsr+0x24>
	else
		return mpu_err;					//配置失败
 8010392:	2301      	movs	r3, #1

}
 8010394:	4618      	mov	r0, r3
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <w_mpu_set_acce_fsr>:
 * @brief  mpu_read_raw_data()  		配置加速度计满量程范围.
 * @param  fsr       							配置量程范围在mpu_fsr_e中
 * @retval HAL status							mpu_ok/mpu_err
 */
mpu_state_t w_mpu_set_acce_fsr(mpu_fsr_t acce_fsr)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	71fb      	strb	r3, [r7, #7]
	//0x1C
	if (w_mpu_write_byte(_MPU_ACCE_CONFIG_REG, acce_fsr << 3) == mpu_ok)
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	4619      	mov	r1, r3
 80103ae:	201c      	movs	r0, #28
 80103b0:	f000 f80a 	bl	80103c8 <w_mpu_write_byte>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d101      	bne.n	80103be <w_mpu_set_acce_fsr+0x22>
		return mpu_ok;					//配置成功
 80103ba:	2300      	movs	r3, #0
 80103bc:	e000      	b.n	80103c0 <w_mpu_set_acce_fsr+0x24>
	else
		return mpu_err;					//配置失败
 80103be:	2301      	movs	r3, #1

}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <w_mpu_write_byte>:
 * @param  w_data    						需要写入的数据.
 * @note   											传入需要写的寄存器地址, 后面是往这个寄存器写入的一个字节的数据.
 * @retval HAL status						mpu_ok/hal_error
 */
mpu_state_t w_mpu_write_byte(uint8_t reg_addr, uint8_t w_data)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af04      	add	r7, sp, #16
 80103ce:	4603      	mov	r3, r0
 80103d0:	460a      	mov	r2, r1
 80103d2:	71fb      	strb	r3, [r7, #7]
 80103d4:	4613      	mov	r3, r2
 80103d6:	71bb      	strb	r3, [r7, #6]
	uint8_t w_data_byte = w_data;			//放入要写入的数据
 80103d8:	79bb      	ldrb	r3, [r7, #6]
 80103da:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(&MPU_I2C_HANDLE, _MPU_WRITE, reg_addr, I2C_MEMADD_SIZE_8BIT, &w_data_byte, 1, 0xfff) == HAL_OK)
 80103dc:	79fb      	ldrb	r3, [r7, #7]
 80103de:	b29a      	uxth	r2, r3
 80103e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80103e4:	9302      	str	r3, [sp, #8]
 80103e6:	2301      	movs	r3, #1
 80103e8:	9301      	str	r3, [sp, #4]
 80103ea:	f107 030f 	add.w	r3, r7, #15
 80103ee:	9300      	str	r3, [sp, #0]
 80103f0:	2301      	movs	r3, #1
 80103f2:	21d0      	movs	r1, #208	; 0xd0
 80103f4:	4806      	ldr	r0, [pc, #24]	; (8010410 <w_mpu_write_byte+0x48>)
 80103f6:	f7f4 fb2f 	bl	8004a58 <HAL_I2C_Mem_Write>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d101      	bne.n	8010404 <w_mpu_write_byte+0x3c>
		return mpu_ok;					//写入成功
 8010400:	2300      	movs	r3, #0
 8010402:	e000      	b.n	8010406 <w_mpu_write_byte+0x3e>
	else
		return mpu_err;					//写入失败
 8010404:	2301      	movs	r3, #1

}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	20000468 	.word	0x20000468

08010414 <w_mpu_read_byte>:
 * @param  reg_addr       				读取的寄存器地址.
 * @note   											传入需要读取的寄存器地址
 * @retval HAL status						r_data_byte/mpu_busy
 */
uint8_t w_mpu_read_byte(uint8_t reg_addr)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b086      	sub	sp, #24
 8010418:	af04      	add	r7, sp, #16
 801041a:	4603      	mov	r3, r0
 801041c:	71fb      	strb	r3, [r7, #7]
	static uint8_t r_data_byte = 0x00u;	//存放读取一个Byte的数据
	if (HAL_I2C_Mem_Read(&MPU_I2C_HANDLE, _MPU_READ, reg_addr, I2C_MEMADD_SIZE_8BIT, &r_data_byte, 1, 0xfff) == HAL_OK)
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	b29a      	uxth	r2, r3
 8010422:	f640 73ff 	movw	r3, #4095	; 0xfff
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	2301      	movs	r3, #1
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	4b08      	ldr	r3, [pc, #32]	; (8010450 <w_mpu_read_byte+0x3c>)
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	2301      	movs	r3, #1
 8010432:	21d1      	movs	r1, #209	; 0xd1
 8010434:	4807      	ldr	r0, [pc, #28]	; (8010454 <w_mpu_read_byte+0x40>)
 8010436:	f7f4 fc09 	bl	8004c4c <HAL_I2C_Mem_Read>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d102      	bne.n	8010446 <w_mpu_read_byte+0x32>
//	HAL_Delay(50);
		return r_data_byte;			//返回读取的数据
 8010440:	4b03      	ldr	r3, [pc, #12]	; (8010450 <w_mpu_read_byte+0x3c>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	e000      	b.n	8010448 <w_mpu_read_byte+0x34>
	else
////		return mpu_busy;				//iic忙碌（0x02/0x2）
		return mpu_err;
 8010446:	2301      	movs	r3, #1

}
 8010448:	4618      	mov	r0, r3
 801044a:	3708      	adds	r7, #8
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}
 8010450:	20001300 	.word	0x20001300
 8010454:	20000468 	.word	0x20000468

08010458 <w_mpu_read_byte_len>:
 * @param  len    								数据缓冲区的长度.
 * @note   											传入需要读取的寄存器地址, 后面是读取到的数据放入这个数组buff中, 确定这组数据的长度
 * @retval HAL status						mpu_ok/hal_error
 */
mpu_state_t w_mpu_read_byte_len(uint8_t reg_addr, uint8_t *r_data_buf, uint8_t len)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b086      	sub	sp, #24
 801045c:	af04      	add	r7, sp, #16
 801045e:	4603      	mov	r3, r0
 8010460:	6039      	str	r1, [r7, #0]
 8010462:	71fb      	strb	r3, [r7, #7]
 8010464:	4613      	mov	r3, r2
 8010466:	71bb      	strb	r3, [r7, #6]

	if (HAL_I2C_Mem_Read(&MPU_I2C_HANDLE, _MPU_READ, reg_addr, I2C_MEMADD_SIZE_8BIT, r_data_buf, len, 0xfff) == HAL_OK)
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	b29a      	uxth	r2, r3
 801046c:	79bb      	ldrb	r3, [r7, #6]
 801046e:	b29b      	uxth	r3, r3
 8010470:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010474:	9102      	str	r1, [sp, #8]
 8010476:	9301      	str	r3, [sp, #4]
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	2301      	movs	r3, #1
 801047e:	21d1      	movs	r1, #209	; 0xd1
 8010480:	4806      	ldr	r0, [pc, #24]	; (801049c <w_mpu_read_byte_len+0x44>)
 8010482:	f7f4 fbe3 	bl	8004c4c <HAL_I2C_Mem_Read>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <w_mpu_read_byte_len+0x38>
//		HAL_Delay(50);
		return mpu_ok;					//读取完成
 801048c:	2300      	movs	r3, #0
 801048e:	e000      	b.n	8010492 <w_mpu_read_byte_len+0x3a>
	else
//		return mpu_busy;				//iic忙碌
		return mpu_err;
 8010490:	2301      	movs	r3, #1

}
 8010492:	4618      	mov	r0, r3
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	20000468 	.word	0x20000468

080104a0 <my_hal_delay>:
//#define		HW_S_HW_MPU_ADDR			_MPU_READ
/**
 * @brief  my_hal_delay()  			ms级别延时, 为DMP库delay_ms
 */
void my_hal_delay(unsigned long ms)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7f2 fe9b 	bl	80031e4 <HAL_Delay>
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <f4_get_tick_ms_cnt>:

/**
 * @brief  get_tick_ms_cnt()  			ms级别时间戳, 为DMP库get_ms
 */
void f4_get_tick_ms_cnt(unsigned long *cnt)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b082      	sub	sp, #8
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
	*cnt = HAL_GetTick();
 80104be:	f7f2 fe85 	bl	80031cc <HAL_GetTick>
 80104c2:	4602      	mov	r2, r0
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	601a      	str	r2, [r3, #0]
}
 80104c8:	bf00      	nop
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <dmp_i2c_write>:

/**
 * @brief  dmp_i2c_write()  			IIC连续写, 为DMP库i2c的写
 */
uint8_t dmp_i2c_write(unsigned char slave_addr, unsigned char reg_addr, unsigned char len, unsigned char *w_data)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b086      	sub	sp, #24
 80104d4:	af04      	add	r7, sp, #16
 80104d6:	603b      	str	r3, [r7, #0]
 80104d8:	4603      	mov	r3, r0
 80104da:	71fb      	strb	r3, [r7, #7]
 80104dc:	460b      	mov	r3, r1
 80104de:	71bb      	strb	r3, [r7, #6]
 80104e0:	4613      	mov	r3, r2
 80104e2:	717b      	strb	r3, [r7, #5]
	//超时时间看实际更改, 问题不大
	return HAL_I2C_Mem_Write(&MPU_I2C_HANDLE, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, w_data, len, 500);
 80104e4:	79fb      	ldrb	r3, [r7, #7]
 80104e6:	b299      	uxth	r1, r3
 80104e8:	79bb      	ldrb	r3, [r7, #6]
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	797b      	ldrb	r3, [r7, #5]
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80104f4:	9002      	str	r0, [sp, #8]
 80104f6:	9301      	str	r3, [sp, #4]
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	2301      	movs	r3, #1
 80104fe:	4804      	ldr	r0, [pc, #16]	; (8010510 <dmp_i2c_write+0x40>)
 8010500:	f7f4 faaa 	bl	8004a58 <HAL_I2C_Mem_Write>
 8010504:	4603      	mov	r3, r0
}
 8010506:	4618      	mov	r0, r3
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20000468 	.word	0x20000468

08010514 <dmp_i2c_read>:

/**
 * @brief  dmp_i2c_write()  			IIC连续读, 为DMP库i2c的读
 */
uint8_t dmp_i2c_read(unsigned char slave_addr, unsigned char reg_addr, unsigned char len, unsigned char *r_data)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b086      	sub	sp, #24
 8010518:	af04      	add	r7, sp, #16
 801051a:	603b      	str	r3, [r7, #0]
 801051c:	4603      	mov	r3, r0
 801051e:	71fb      	strb	r3, [r7, #7]
 8010520:	460b      	mov	r3, r1
 8010522:	71bb      	strb	r3, [r7, #6]
 8010524:	4613      	mov	r3, r2
 8010526:	717b      	strb	r3, [r7, #5]
	//超时时间看实际更改, 问题不大
	return HAL_I2C_Mem_Read(&MPU_I2C_HANDLE, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, r_data, len, 1000);
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	b299      	uxth	r1, r3
 801052c:	79bb      	ldrb	r3, [r7, #6]
 801052e:	b29a      	uxth	r2, r3
 8010530:	797b      	ldrb	r3, [r7, #5]
 8010532:	b29b      	uxth	r3, r3
 8010534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010538:	9002      	str	r0, [sp, #8]
 801053a:	9301      	str	r3, [sp, #4]
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	2301      	movs	r3, #1
 8010542:	4804      	ldr	r0, [pc, #16]	; (8010554 <dmp_i2c_read+0x40>)
 8010544:	f7f4 fb82 	bl	8004c4c <HAL_I2C_Mem_Read>
 8010548:	4603      	mov	r3, r0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	20000468 	.word	0x20000468

08010558 <inv_row_2_scale>:
//陀螺仪方向设置, 绝对位置
static signed char gyro_orientation[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };

//方向转换
static unsigned short inv_row_2_scale(const signed char *row)
{
 8010558:	b480      	push	{r7}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f993 3000 	ldrsb.w	r3, [r3]
 8010566:	2b00      	cmp	r3, #0
 8010568:	dd02      	ble.n	8010570 <inv_row_2_scale+0x18>
		b = 0;
 801056a:	2300      	movs	r3, #0
 801056c:	81fb      	strh	r3, [r7, #14]
 801056e:	e02d      	b.n	80105cc <inv_row_2_scale+0x74>
	else if (row[0] < 0)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f993 3000 	ldrsb.w	r3, [r3]
 8010576:	2b00      	cmp	r3, #0
 8010578:	da02      	bge.n	8010580 <inv_row_2_scale+0x28>
		b = 4;
 801057a:	2304      	movs	r3, #4
 801057c:	81fb      	strh	r3, [r7, #14]
 801057e:	e025      	b.n	80105cc <inv_row_2_scale+0x74>
	else if (row[1] > 0)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	3301      	adds	r3, #1
 8010584:	f993 3000 	ldrsb.w	r3, [r3]
 8010588:	2b00      	cmp	r3, #0
 801058a:	dd02      	ble.n	8010592 <inv_row_2_scale+0x3a>
		b = 1;
 801058c:	2301      	movs	r3, #1
 801058e:	81fb      	strh	r3, [r7, #14]
 8010590:	e01c      	b.n	80105cc <inv_row_2_scale+0x74>
	else if (row[1] < 0)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	3301      	adds	r3, #1
 8010596:	f993 3000 	ldrsb.w	r3, [r3]
 801059a:	2b00      	cmp	r3, #0
 801059c:	da02      	bge.n	80105a4 <inv_row_2_scale+0x4c>
		b = 5;
 801059e:	2305      	movs	r3, #5
 80105a0:	81fb      	strh	r3, [r7, #14]
 80105a2:	e013      	b.n	80105cc <inv_row_2_scale+0x74>
	else if (row[2] > 0)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3302      	adds	r3, #2
 80105a8:	f993 3000 	ldrsb.w	r3, [r3]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	dd02      	ble.n	80105b6 <inv_row_2_scale+0x5e>
		b = 2;
 80105b0:	2302      	movs	r3, #2
 80105b2:	81fb      	strh	r3, [r7, #14]
 80105b4:	e00a      	b.n	80105cc <inv_row_2_scale+0x74>
	else if (row[2] < 0)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3302      	adds	r3, #2
 80105ba:	f993 3000 	ldrsb.w	r3, [r3]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	da02      	bge.n	80105c8 <inv_row_2_scale+0x70>
		b = 6;
 80105c2:	2306      	movs	r3, #6
 80105c4:	81fb      	strh	r3, [r7, #14]
 80105c6:	e001      	b.n	80105cc <inv_row_2_scale+0x74>
	else
		b = 7;      // error
 80105c8:	2307      	movs	r3, #7
 80105ca:	81fb      	strh	r3, [r7, #14]
	return b;
 80105cc:	89fb      	ldrh	r3, [r7, #14]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3714      	adds	r7, #20
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <inv_orientation_matrix_to_scalar>:

//陀螺仪方向控制
static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 80105da:	b580      	push	{r7, lr}
 80105dc:	b084      	sub	sp, #16
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
	 {1, 0, 0,
	 0, 1, 0,
	 0, 0, 1};

	 */
	scalar = inv_row_2_scale(mtx);
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f7ff ffb8 	bl	8010558 <inv_row_2_scale>
 80105e8:	4603      	mov	r3, r0
 80105ea:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 3) << 3;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	3303      	adds	r3, #3
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7ff ffb1 	bl	8010558 <inv_row_2_scale>
 80105f6:	4603      	mov	r3, r0
 80105f8:	00db      	lsls	r3, r3, #3
 80105fa:	b21a      	sxth	r2, r3
 80105fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010600:	4313      	orrs	r3, r2
 8010602:	b21b      	sxth	r3, r3
 8010604:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 6) << 6;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	3306      	adds	r3, #6
 801060a:	4618      	mov	r0, r3
 801060c:	f7ff ffa4 	bl	8010558 <inv_row_2_scale>
 8010610:	4603      	mov	r3, r0
 8010612:	019b      	lsls	r3, r3, #6
 8010614:	b21a      	sxth	r2, r3
 8010616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801061a:	4313      	orrs	r3, r2
 801061c:	b21b      	sxth	r3, r3
 801061e:	81fb      	strh	r3, [r7, #14]

	return scalar;
 8010620:	89fb      	ldrh	r3, [r7, #14]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <run_self_test>:

//MPU6050传感器自测
static void run_self_test(void)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08a      	sub	sp, #40	; 0x28
 8010630:	af00      	add	r7, sp, #0
	int result;
	long gyro[3], accel[3];

	result = mpu_run_self_test(gyro, accel);
 8010632:	f107 020c 	add.w	r2, r7, #12
 8010636:	f107 0318 	add.w	r3, r7, #24
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f7fe fa79 	bl	800eb34 <mpu_run_self_test>
 8010642:	6278      	str	r0, [r7, #36]	; 0x24
	if (result == 0x03)
 8010644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010646:	2b03      	cmp	r3, #3
 8010648:	d152      	bne.n	80106f0 <run_self_test+0xc4>
		/* Test passed. We can trust the gyro data here, so let's push it down
		 * to the DMP.
		 */
		float sens;
		unsigned short accel_sens;
		mpu_get_gyro_sens(&sens);
 801064a:	f107 0308 	add.w	r3, r7, #8
 801064e:	4618      	mov	r0, r3
 8010650:	f7fd fa42 	bl	800dad8 <mpu_get_gyro_sens>
		gyro[0] = (long) (gyro[0] * sens);
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	ee07 3a90 	vmov	s15, r3
 801065a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801065e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801066a:	ee17 3a90 	vmov	r3, s15
 801066e:	61bb      	str	r3, [r7, #24]
		gyro[1] = (long) (gyro[1] * sens);
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	ee07 3a90 	vmov	s15, r3
 8010676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801067a:	edd7 7a02 	vldr	s15, [r7, #8]
 801067e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010686:	ee17 3a90 	vmov	r3, s15
 801068a:	61fb      	str	r3, [r7, #28]
		gyro[2] = (long) (gyro[2] * sens);
 801068c:	6a3b      	ldr	r3, [r7, #32]
 801068e:	ee07 3a90 	vmov	s15, r3
 8010692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010696:	edd7 7a02 	vldr	s15, [r7, #8]
 801069a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801069e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106a2:	ee17 3a90 	vmov	r3, s15
 80106a6:	623b      	str	r3, [r7, #32]
		dmp_set_gyro_bias(gyro);
 80106a8:	f107 0318 	add.w	r3, r7, #24
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7fe fd87 	bl	800f1c0 <dmp_set_gyro_bias>
		mpu_get_accel_sens(&accel_sens);
 80106b2:	1dbb      	adds	r3, r7, #6
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fd fa47 	bl	800db48 <mpu_get_accel_sens>
		accel[0] *= accel_sens;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	88fa      	ldrh	r2, [r7, #6]
 80106be:	fb02 f303 	mul.w	r3, r2, r3
 80106c2:	60fb      	str	r3, [r7, #12]
		accel[1] *= accel_sens;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	88fa      	ldrh	r2, [r7, #6]
 80106c8:	fb02 f303 	mul.w	r3, r2, r3
 80106cc:	613b      	str	r3, [r7, #16]
		accel[2] *= accel_sens;
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	88fa      	ldrh	r2, [r7, #6]
 80106d2:	fb02 f303 	mul.w	r3, r2, r3
 80106d6:	617b      	str	r3, [r7, #20]
		dmp_set_accel_bias(accel);
 80106d8:	f107 030c 	add.w	r3, r7, #12
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fe fe79 	bl	800f3d4 <dmp_set_accel_bias>
		printf("自测完成 ......\r\n");
 80106e2:	4905      	ldr	r1, [pc, #20]	; (80106f8 <run_self_test+0xcc>)
 80106e4:	4805      	ldr	r0, [pc, #20]	; (80106fc <run_self_test+0xd0>)
 80106e6:	f004 fae1 	bl	8014cac <siprintf>
 80106ea:	4804      	ldr	r0, [pc, #16]	; (80106fc <run_self_test+0xd0>)
 80106ec:	f003 fb76 	bl	8013ddc <printf_Base>
	}
}
 80106f0:	bf00      	nop
 80106f2:	3728      	adds	r7, #40	; 0x28
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	08019594 	.word	0x08019594
 80106fc:	20001308 	.word	0x20001308

08010700 <dmp_init>:

//DMP初始化
void dmp_init(void)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
	uint8_t temp[1] = { 0 };
 8010706:	2300      	movs	r3, #0
 8010708:	713b      	strb	r3, [r7, #4]
	dmp_i2c_read(HW_S_HW_MPU_ADDR, _MPU_DEVICE_ID, I2C_MEMADD_SIZE_8BIT, temp);
 801070a:	1d3b      	adds	r3, r7, #4
 801070c:	2201      	movs	r2, #1
 801070e:	2175      	movs	r1, #117	; 0x75
 8010710:	20d1      	movs	r0, #209	; 0xd1
 8010712:	f7ff feff 	bl	8010514 <dmp_i2c_read>
	//	 temp[0] = w_mpu_read_device_address();
	printf("mpu设置传感器完成 ......\r\n");
 8010716:	494a      	ldr	r1, [pc, #296]	; (8010840 <dmp_init+0x140>)
 8010718:	484a      	ldr	r0, [pc, #296]	; (8010844 <dmp_init+0x144>)
 801071a:	f004 fac7 	bl	8014cac <siprintf>
 801071e:	4849      	ldr	r0, [pc, #292]	; (8010844 <dmp_init+0x144>)
 8010720:	f003 fb5c 	bl	8013ddc <printf_Base>
	printf("设备ID:       0x%x\r\n", temp[0]);
 8010724:	793b      	ldrb	r3, [r7, #4]
 8010726:	461a      	mov	r2, r3
 8010728:	4947      	ldr	r1, [pc, #284]	; (8010848 <dmp_init+0x148>)
 801072a:	4846      	ldr	r0, [pc, #280]	; (8010844 <dmp_init+0x144>)
 801072c:	f004 fabe 	bl	8014cac <siprintf>
 8010730:	4844      	ldr	r0, [pc, #272]	; (8010844 <dmp_init+0x144>)
 8010732:	f003 fb53 	bl	8013ddc <printf_Base>
	printf("\r\n");
 8010736:	4945      	ldr	r1, [pc, #276]	; (801084c <dmp_init+0x14c>)
 8010738:	4842      	ldr	r0, [pc, #264]	; (8010844 <dmp_init+0x144>)
 801073a:	f004 fab7 	bl	8014cac <siprintf>
 801073e:	4841      	ldr	r0, [pc, #260]	; (8010844 <dmp_init+0x144>)
 8010740:	f003 fb4c 	bl	8013ddc <printf_Base>

	//检查ID, 不对系统复位
//	if (temp[0] != 0x68)
//		NVIC_SystemReset();

	if (!mpu_init())
 8010744:	f7fc fcfe 	bl	800d144 <mpu_init>
 8010748:	4603      	mov	r3, r0
 801074a:	2b00      	cmp	r3, #0
 801074c:	d174      	bne.n	8010838 <dmp_init+0x138>
	{
		//重启内部寄存器到默认,
		if (!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 801074e:	2078      	movs	r0, #120	; 0x78
 8010750:	f7fd fa9c 	bl	800dc8c <mpu_set_sensors>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <dmp_init+0x68>
			printf("mpu设置传感器完成 ......\r\n");
 801075a:	4939      	ldr	r1, [pc, #228]	; (8010840 <dmp_init+0x140>)
 801075c:	4839      	ldr	r0, [pc, #228]	; (8010844 <dmp_init+0x144>)
 801075e:	f004 faa5 	bl	8014cac <siprintf>
 8010762:	4838      	ldr	r0, [pc, #224]	; (8010844 <dmp_init+0x144>)
 8010764:	f003 fb3a 	bl	8013ddc <printf_Base>

		//配置FIFO
		if (!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 8010768:	2078      	movs	r0, #120	; 0x78
 801076a:	f7fd fa3d 	bl	800dbe8 <mpu_configure_fifo>
 801076e:	4603      	mov	r3, r0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d106      	bne.n	8010782 <dmp_init+0x82>
			printf("mpu配置FIFO完成 ......\r\n");
 8010774:	4936      	ldr	r1, [pc, #216]	; (8010850 <dmp_init+0x150>)
 8010776:	4833      	ldr	r0, [pc, #204]	; (8010844 <dmp_init+0x144>)
 8010778:	f004 fa98 	bl	8014cac <siprintf>
 801077c:	4831      	ldr	r0, [pc, #196]	; (8010844 <dmp_init+0x144>)
 801077e:	f003 fb2d 	bl	8013ddc <printf_Base>

		//配置采样频率分频寄存器
		if (!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 8010782:	2064      	movs	r0, #100	; 0x64
 8010784:	f7fd f942 	bl	800da0c <mpu_set_sample_rate>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d106      	bne.n	801079c <dmp_init+0x9c>
			printf("mpu设定的采样率完成 ......\r\n");
 801078e:	4931      	ldr	r1, [pc, #196]	; (8010854 <dmp_init+0x154>)
 8010790:	482c      	ldr	r0, [pc, #176]	; (8010844 <dmp_init+0x144>)
 8010792:	f004 fa8b 	bl	8014cac <siprintf>
 8010796:	482b      	ldr	r0, [pc, #172]	; (8010844 <dmp_init+0x144>)
 8010798:	f003 fb20 	bl	8013ddc <printf_Base>

		//DMP加载动作驱动程序固件完成
		if (!dmp_load_motion_driver_firmware())
 801079c:	f7fe fc14 	bl	800efc8 <dmp_load_motion_driver_firmware>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <dmp_init+0xb4>
			printf("DMP加载动作驱动程序固件完成 ......\r\n");
 80107a6:	492c      	ldr	r1, [pc, #176]	; (8010858 <dmp_init+0x158>)
 80107a8:	4826      	ldr	r0, [pc, #152]	; (8010844 <dmp_init+0x144>)
 80107aa:	f004 fa7f 	bl	8014cac <siprintf>
 80107ae:	4825      	ldr	r0, [pc, #148]	; (8010844 <dmp_init+0x144>)
 80107b0:	f003 fb14 	bl	8013ddc <printf_Base>

		//DMP设置陀螺仪方向完成
		if (!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
 80107b4:	4829      	ldr	r0, [pc, #164]	; (801085c <dmp_init+0x15c>)
 80107b6:	f7ff ff10 	bl	80105da <inv_orientation_matrix_to_scalar>
 80107ba:	4603      	mov	r3, r0
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fe fc13 	bl	800efe8 <dmp_set_orientation>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d106      	bne.n	80107d6 <dmp_init+0xd6>
			printf("DMP设置陀螺仪方向完成 ......\r\n");
 80107c8:	4925      	ldr	r1, [pc, #148]	; (8010860 <dmp_init+0x160>)
 80107ca:	481e      	ldr	r0, [pc, #120]	; (8010844 <dmp_init+0x144>)
 80107cc:	f004 fa6e 	bl	8014cac <siprintf>
 80107d0:	481c      	ldr	r0, [pc, #112]	; (8010844 <dmp_init+0x144>)
 80107d2:	f003 fb03 	bl	8013ddc <printf_Base>

		//DMP使功能完整
		if (!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 80107d6:	f240 1073 	movw	r0, #371	; 0x173
 80107da:	f7ff f987 	bl	800faec <dmp_enable_feature>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d106      	bne.n	80107f2 <dmp_init+0xf2>
		DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
		DMP_FEATURE_GYRO_CAL))
			printf("DMP使功能完整 ......\r\n");
 80107e4:	491f      	ldr	r1, [pc, #124]	; (8010864 <dmp_init+0x164>)
 80107e6:	4817      	ldr	r0, [pc, #92]	; (8010844 <dmp_init+0x144>)
 80107e8:	f004 fa60 	bl	8014cac <siprintf>
 80107ec:	4815      	ldr	r0, [pc, #84]	; (8010844 <dmp_init+0x144>)
 80107ee:	f003 faf5 	bl	8013ddc <printf_Base>

		//DMP设定FIFO速率完成
		if (!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 80107f2:	2064      	movs	r0, #100	; 0x64
 80107f4:	f7fe fef0 	bl	800f5d8 <dmp_set_fifo_rate>
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d106      	bne.n	801080c <dmp_init+0x10c>
			printf("DMP设定FIFO速率完成 ......\r\n");
 80107fe:	491a      	ldr	r1, [pc, #104]	; (8010868 <dmp_init+0x168>)
 8010800:	4810      	ldr	r0, [pc, #64]	; (8010844 <dmp_init+0x144>)
 8010802:	f004 fa53 	bl	8014cac <siprintf>
 8010806:	480f      	ldr	r0, [pc, #60]	; (8010844 <dmp_init+0x144>)
 8010808:	f003 fae8 	bl	8013ddc <printf_Base>

		//自测自身数据,测试通过. 我们可以相信陀螺仪的数据，把它放下来到DMP
		run_self_test();
 801080c:	f7ff ff0e 	bl	801062c <run_self_test>

		//mpu设置DMP状态完成
		if (!mpu_set_dmp_state(1))
 8010810:	2001      	movs	r0, #1
 8010812:	f7fe fb85 	bl	800ef20 <mpu_set_dmp_state>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d106      	bne.n	801082a <dmp_init+0x12a>
			printf("mpu设置DMP状态完成 ......\r\n");
 801081c:	4913      	ldr	r1, [pc, #76]	; (801086c <dmp_init+0x16c>)
 801081e:	4809      	ldr	r0, [pc, #36]	; (8010844 <dmp_init+0x144>)
 8010820:	f004 fa44 	bl	8014cac <siprintf>
 8010824:	4807      	ldr	r0, [pc, #28]	; (8010844 <dmp_init+0x144>)
 8010826:	f003 fad9 	bl	8013ddc <printf_Base>

		printf("\r\n");
 801082a:	4908      	ldr	r1, [pc, #32]	; (801084c <dmp_init+0x14c>)
 801082c:	4805      	ldr	r0, [pc, #20]	; (8010844 <dmp_init+0x144>)
 801082e:	f004 fa3d 	bl	8014cac <siprintf>
 8010832:	4804      	ldr	r0, [pc, #16]	; (8010844 <dmp_init+0x144>)
 8010834:	f003 fad2 	bl	8013ddc <printf_Base>
//		my_hal_delay(200);
//		printf(" ################### ...... MPU配置完成, DMP功能完成 ...... ################### \r\n");
//		my_hal_delay(200);
//		printf("\r\n\r\n\r\n");
	}
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	080195ac 	.word	0x080195ac
 8010844:	20001308 	.word	0x20001308
 8010848:	08019578 	.word	0x08019578
 801084c:	08019590 	.word	0x08019590
 8010850:	080195d0 	.word	0x080195d0
 8010854:	080195f0 	.word	0x080195f0
 8010858:	08019618 	.word	0x08019618
 801085c:	20000054 	.word	0x20000054
 8010860:	0801964c 	.word	0x0801964c
 8010864:	08019674 	.word	0x08019674
 8010868:	08019690 	.word	0x08019690
 801086c:	080196b4 	.word	0x080196b4

08010870 <read_dmp>:
 * @param  *pose_msg       	传入姿态的地址
 * @note   									参考野火、原子、平衡之家等开源资料
 * @retval HAL status				0/1/2
 */
uint8_t read_dmp(pose_msg_t *pose_msg)
{
 8010870:	b5b0      	push	{r4, r5, r7, lr}
 8010872:	b094      	sub	sp, #80	; 0x50
 8010874:	af02      	add	r7, sp, #8
 8010876:	6078      	str	r0, [r7, #4]
	uint8_t more;
	long quat[4];				//四元数
	int16_t gyro[3], accel[3], sensors;
	unsigned long sensor_timestamp;				//传感器时间戳

	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 8010878:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801087c:	647b      	str	r3, [r7, #68]	; 0x44
 801087e:	f04f 0300 	mov.w	r3, #0
 8010882:	643b      	str	r3, [r7, #64]	; 0x40
 8010884:	f04f 0300 	mov.w	r3, #0
 8010888:	63fb      	str	r3, [r7, #60]	; 0x3c
 801088a:	f04f 0300 	mov.w	r3, #0
 801088e:	63bb      	str	r3, [r7, #56]	; 0x38

	//读取FIFO中的数据
	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 8010890:	f107 040c 	add.w	r4, r7, #12
 8010894:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010898:	f107 0114 	add.w	r1, r7, #20
 801089c:	f107 001c 	add.w	r0, r7, #28
 80108a0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	f107 0312 	add.w	r3, r7, #18
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	4623      	mov	r3, r4
 80108ae:	f7ff fb07 	bl	800fec0 <dmp_read_fifo>
//		return 1;

	if (sensors & INV_WXYZ_QUAT)
 80108b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 80f0 	beq.w	8010aa2 <read_dmp+0x232>
	{
		q0 = quat[0] / q30;
 80108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c4:	ee07 3a90 	vmov	s15, r3
 80108c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80108cc:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8010ab8 <read_dmp+0x248>
 80108d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80108d4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q1 = quat[1] / q30;
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	ee07 3a90 	vmov	s15, r3
 80108de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80108e2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8010ab8 <read_dmp+0x248>
 80108e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80108ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q2 = quat[2] / q30;
 80108ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f0:	ee07 3a90 	vmov	s15, r3
 80108f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80108f8:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010ab8 <read_dmp+0x248>
 80108fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010900:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q3 = quat[3] / q30;
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	ee07 3a90 	vmov	s15, r3
 801090a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801090e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8010ab8 <read_dmp+0x248>
 8010912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010916:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		pose_msg->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3f;																	//四元数解算, 俯仰角(Pitch)-->绕着X轴旋转
 801091a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801091e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8010922:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010926:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801092a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801092e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010932:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010936:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801093a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801093e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010942:	ee17 0a90 	vmov	r0, s15
 8010946:	f7ef fdff 	bl	8000548 <__aeabi_f2d>
 801094a:	4602      	mov	r2, r0
 801094c:	460b      	mov	r3, r1
 801094e:	ec43 2b10 	vmov	d0, r2, r3
 8010952:	f007 ff9b 	bl	801888c <asin>
 8010956:	ec51 0b10 	vmov	r0, r1, d0
 801095a:	a355      	add	r3, pc, #340	; (adr r3, 8010ab0 <read_dmp+0x240>)
 801095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010960:	f7ef fe4a 	bl	80005f8 <__aeabi_dmul>
 8010964:	4602      	mov	r2, r0
 8010966:	460b      	mov	r3, r1
 8010968:	4610      	mov	r0, r2
 801096a:	4619      	mov	r1, r3
 801096c:	f7f0 f93c 	bl	8000be8 <__aeabi_d2f>
 8010970:	4602      	mov	r2, r0
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	601a      	str	r2, [r3, #0]
		pose_msg->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3f;	//四元数解算, 翻滚角(Roll)-->绕着Y轴旋转
 8010976:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801097a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801097e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010986:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801098a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801098e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010996:	ee77 7a27 	vadd.f32	s15, s14, s15
 801099a:	ee17 0a90 	vmov	r0, s15
 801099e:	f7ef fdd3 	bl	8000548 <__aeabi_f2d>
 80109a2:	4604      	mov	r4, r0
 80109a4:	460d      	mov	r5, r1
 80109a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80109aa:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80109ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80109b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80109b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80109be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80109c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80109c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80109ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109d6:	ee17 0a90 	vmov	r0, s15
 80109da:	f7ef fdb5 	bl	8000548 <__aeabi_f2d>
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	ec43 2b11 	vmov	d1, r2, r3
 80109e6:	ec45 4b10 	vmov	d0, r4, r5
 80109ea:	f007 ff83 	bl	80188f4 <atan2>
 80109ee:	ec51 0b10 	vmov	r0, r1, d0
 80109f2:	a32f      	add	r3, pc, #188	; (adr r3, 8010ab0 <read_dmp+0x240>)
 80109f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f8:	f7ef fdfe 	bl	80005f8 <__aeabi_dmul>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	4610      	mov	r0, r2
 8010a02:	4619      	mov	r1, r3
 8010a04:	f7f0 f8f0 	bl	8000be8 <__aeabi_d2f>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	605a      	str	r2, [r3, #4]
		pose_msg->yaw = atan2(2 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3f;								//四元数解算, 偏航角(Yaw)-->绕着Z轴旋转
 8010a0e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010a12:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a1a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8010a1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010a2e:	ee17 0a90 	vmov	r0, s15
 8010a32:	f7ef fd89 	bl	8000548 <__aeabi_f2d>
 8010a36:	4604      	mov	r4, r0
 8010a38:	460d      	mov	r5, r1
 8010a3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010a3e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010a42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010a46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010a52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010a5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a66:	ee17 0a90 	vmov	r0, s15
 8010a6a:	f7ef fd6d 	bl	8000548 <__aeabi_f2d>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	460b      	mov	r3, r1
 8010a72:	ec43 2b11 	vmov	d1, r2, r3
 8010a76:	ec45 4b10 	vmov	d0, r4, r5
 8010a7a:	f007 ff3b 	bl	80188f4 <atan2>
 8010a7e:	ec51 0b10 	vmov	r0, r1, d0
 8010a82:	a30b      	add	r3, pc, #44	; (adr r3, 8010ab0 <read_dmp+0x240>)
 8010a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a88:	f7ef fdb6 	bl	80005f8 <__aeabi_dmul>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4610      	mov	r0, r2
 8010a92:	4619      	mov	r1, r3
 8010a94:	f7f0 f8a8 	bl	8000be8 <__aeabi_d2f>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	609a      	str	r2, [r3, #8]

		return 0;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	e000      	b.n	8010aa4 <read_dmp+0x234>
	}
	else
		return 2;
 8010aa2:	2302      	movs	r3, #2

}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3748      	adds	r7, #72	; 0x48
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8010aac:	f3af 8000 	nop.w
 8010ab0:	60000000 	.word	0x60000000
 8010ab4:	404ca666 	.word	0x404ca666
 8010ab8:	4e800000 	.word	0x4e800000

08010abc <UpdateYawAngle>:
#include "BasicInfor/debug.h"

float YawAngle;

void UpdateYawAngle()
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	af00      	add	r7, sp, #0
	read_dmp(&mpu_pose_msg);
 8010ac0:	4804      	ldr	r0, [pc, #16]	; (8010ad4 <UpdateYawAngle+0x18>)
 8010ac2:	f7ff fed5 	bl	8010870 <read_dmp>
	YawAngle = mpu_pose_msg.yaw;
 8010ac6:	4b03      	ldr	r3, [pc, #12]	; (8010ad4 <UpdateYawAngle+0x18>)
 8010ac8:	689b      	ldr	r3, [r3, #8]
 8010aca:	4a03      	ldr	r2, [pc, #12]	; (8010ad8 <UpdateYawAngle+0x1c>)
 8010acc:	6013      	str	r3, [r2, #0]
}
 8010ace:	bf00      	nop
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	200012ec 	.word	0x200012ec
 8010ad8:	20001304 	.word	0x20001304

08010adc <InitMPU>:

void InitMPU()
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	af00      	add	r7, sp, #0
	if (w_mpu_init() != mpu_ok)
 8010ae0:	f7ff fb5a 	bl	8010198 <w_mpu_init>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d012      	beq.n	8010b10 <InitMPU+0x34>
	{
		printfX("初始化 MPU6050 失败\n");
 8010aea:	4912      	ldr	r1, [pc, #72]	; (8010b34 <InitMPU+0x58>)
 8010aec:	4812      	ldr	r0, [pc, #72]	; (8010b38 <InitMPU+0x5c>)
 8010aee:	f004 f8dd 	bl	8014cac <siprintf>
 8010af2:	4811      	ldr	r0, [pc, #68]	; (8010b38 <InitMPU+0x5c>)
 8010af4:	f003 f972 	bl	8013ddc <printf_Base>
		printfX("0x%x (ID_ERROR)\r\n", w_mpu_init());
 8010af8:	f7ff fb4e 	bl	8010198 <w_mpu_init>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	490e      	ldr	r1, [pc, #56]	; (8010b3c <InitMPU+0x60>)
 8010b02:	480d      	ldr	r0, [pc, #52]	; (8010b38 <InitMPU+0x5c>)
 8010b04:	f004 f8d2 	bl	8014cac <siprintf>
 8010b08:	480b      	ldr	r0, [pc, #44]	; (8010b38 <InitMPU+0x5c>)
 8010b0a:	f003 f967 	bl	8013ddc <printf_Base>
		dmp_init();

		printfX("初始化 DSP 成功\n");
	}

}
 8010b0e:	e00f      	b.n	8010b30 <InitMPU+0x54>
		printfX("开始初始化 DSP\n");
 8010b10:	490b      	ldr	r1, [pc, #44]	; (8010b40 <InitMPU+0x64>)
 8010b12:	4809      	ldr	r0, [pc, #36]	; (8010b38 <InitMPU+0x5c>)
 8010b14:	f004 f8ca 	bl	8014cac <siprintf>
 8010b18:	4807      	ldr	r0, [pc, #28]	; (8010b38 <InitMPU+0x5c>)
 8010b1a:	f003 f95f 	bl	8013ddc <printf_Base>
		dmp_init();
 8010b1e:	f7ff fdef 	bl	8010700 <dmp_init>
		printfX("初始化 DSP 成功\n");
 8010b22:	4908      	ldr	r1, [pc, #32]	; (8010b44 <InitMPU+0x68>)
 8010b24:	4804      	ldr	r0, [pc, #16]	; (8010b38 <InitMPU+0x5c>)
 8010b26:	f004 f8c1 	bl	8014cac <siprintf>
 8010b2a:	4803      	ldr	r0, [pc, #12]	; (8010b38 <InitMPU+0x5c>)
 8010b2c:	f003 f956 	bl	8013ddc <printf_Base>
}
 8010b30:	bf00      	nop
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	080196d8 	.word	0x080196d8
 8010b38:	20001308 	.word	0x20001308
 8010b3c:	080196f4 	.word	0x080196f4
 8010b40:	08019708 	.word	0x08019708
 8010b44:	08019720 	.word	0x08019720

08010b48 <Get_MPU_Temperature>:

float Get_MPU_Temperature()
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	af00      	add	r7, sp, #0
	return w_mpu_read_temperature();
 8010b4c:	f7ff fba4 	bl	8010298 <w_mpu_read_temperature>
 8010b50:	eef0 7a40 	vmov.f32	s15, s0
}
 8010b54:	eeb0 0a67 	vmov.f32	s0, s15
 8010b58:	bd80      	pop	{r7, pc}
	...

08010b5c <delay_us>:
 */

#include "delay.h"

void delay_us(uint32_t us)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 1000000 * us);
 8010b64:	f7f5 fa70 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	4a0a      	ldr	r2, [pc, #40]	; (8010b94 <delay_us+0x38>)
 8010b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b70:	0c9a      	lsrs	r2, r3, #18
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	fb02 f303 	mul.w	r3, r2, r3
 8010b78:	60fb      	str	r3, [r7, #12]
	while (delay--)
 8010b7a:	e000      	b.n	8010b7e <delay_us+0x22>
		__NOP();
 8010b7c:	bf00      	nop
	while (delay--)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	1e5a      	subs	r2, r3, #1
 8010b82:	60fa      	str	r2, [r7, #12]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1f9      	bne.n	8010b7c <delay_us+0x20>
}
 8010b88:	bf00      	nop
 8010b8a:	bf00      	nop
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	431bde83 	.word	0x431bde83

08010b98 <Clean_Dormancy_Count>:

//休眠计数 -1 进入预休眠模式
int16_t Dormancy_Count = -1;

void Clean_Dormancy_Count()
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	af00      	add	r7, sp, #0
	if (Dormancy_Count == -1)
 8010b9c:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <Clean_Dormancy_Count+0x20>)
 8010b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba6:	d102      	bne.n	8010bae <Clean_Dormancy_Count+0x16>
	{
		//已经进入预休眠状态 重新启动定时器
		HAL_TIM_Base_Start_IT(&htim7);
 8010ba8:	4804      	ldr	r0, [pc, #16]	; (8010bbc <Clean_Dormancy_Count+0x24>)
 8010baa:	f7f7 f9e9 	bl	8007f80 <HAL_TIM_Base_Start_IT>
	}
	Dormancy_Count = 0;
 8010bae:	4b02      	ldr	r3, [pc, #8]	; (8010bb8 <Clean_Dormancy_Count+0x20>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	801a      	strh	r2, [r3, #0]
}
 8010bb4:	bf00      	nop
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	2000005e 	.word	0x2000005e
 8010bbc:	200010a4 	.word	0x200010a4

08010bc0 <PreHibernate>:

void PreHibernate()
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
	Screen_Clear();
 8010bc6:	f002 ff0f 	bl	80139e8 <Screen_Clear>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 8010bca:	2301      	movs	r3, #1
 8010bcc:	607b      	str	r3, [r7, #4]
 8010bce:	e021      	b.n	8010c14 <PreHibernate+0x54>
	{
		Screen_ShowPicture_Num(1, (var % 70) + 1);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4a14      	ldr	r2, [pc, #80]	; (8010c24 <PreHibernate+0x64>)
 8010bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8010bd8:	441a      	add	r2, r3
 8010bda:	1191      	asrs	r1, r2, #6
 8010bdc:	17da      	asrs	r2, r3, #31
 8010bde:	1a8a      	subs	r2, r1, r2
 8010be0:	2146      	movs	r1, #70	; 0x46
 8010be2:	fb01 f202 	mul.w	r2, r1, r2
 8010be6:	1a9a      	subs	r2, r3, r2
 8010be8:	b2d3      	uxtb	r3, r2
 8010bea:	3301      	adds	r3, #1
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	4619      	mov	r1, r3
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	f002 ff01 	bl	80139f8 <Screen_ShowPicture_Num>
		HAL_Delay(40);
 8010bf6:	2028      	movs	r0, #40	; 0x28
 8010bf8:	f7f2 faf4 	bl	80031e4 <HAL_Delay>
		//HAL_Delay(1000);
		//判断是否中途退出预休眠模式
		if (Dormancy_Count != -1)
 8010bfc:	4b0a      	ldr	r3, [pc, #40]	; (8010c28 <PreHibernate+0x68>)
 8010bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d002      	beq.n	8010c0e <PreHibernate+0x4e>
		{
			Screen_Clear();
 8010c08:	f002 feee 	bl	80139e8 <Screen_Clear>
			return;
 8010c0c:	e006      	b.n	8010c1c <PreHibernate+0x5c>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	3301      	adds	r3, #1
 8010c12:	607b      	str	r3, [r7, #4]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f5b3 7f0e 	cmp.w	r3, #568	; 0x238
 8010c1a:	dbd9      	blt.n	8010bd0 <PreHibernate+0x10>
		}

	}
	//Screen_Clear();
}
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	ea0ea0eb 	.word	0xea0ea0eb
 8010c28:	2000005e 	.word	0x2000005e

08010c2c <Hibernate>:

void Hibernate()
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
	Screen_Close();
 8010c30:	f002 ff08 	bl	8013a44 <Screen_Close>
	HAL_PWR_EnterSTANDBYMode();
 8010c34:	f7f4 fd8c 	bl	8005750 <HAL_PWR_EnterSTANDBYMode>
}
 8010c38:	bf00      	nop
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <Periodic_Dormancy_Counter>:

void Periodic_Dormancy_Counter()
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	af00      	add	r7, sp, #0
	Dormancy_Count++;
 8010c40:	4b10      	ldr	r3, [pc, #64]	; (8010c84 <Periodic_Dormancy_Counter+0x48>)
 8010c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	3301      	adds	r3, #1
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	b21a      	sxth	r2, r3
 8010c4e:	4b0d      	ldr	r3, [pc, #52]	; (8010c84 <Periodic_Dormancy_Counter+0x48>)
 8010c50:	801a      	strh	r2, [r3, #0]

	if (Dormancy_Count > Dormancy_Count_Max)
 8010c52:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <Periodic_Dormancy_Counter+0x48>)
 8010c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c58:	2b3c      	cmp	r3, #60	; 0x3c
 8010c5a:	dd12      	ble.n	8010c82 <Periodic_Dormancy_Counter+0x46>
	{
		//停止定时器
		HAL_TIM_Base_Stop_IT(&htim7);
 8010c5c:	480a      	ldr	r0, [pc, #40]	; (8010c88 <Periodic_Dormancy_Counter+0x4c>)
 8010c5e:	f7f7 f9ff 	bl	8008060 <HAL_TIM_Base_Stop_IT>
		Dormancy_Count = -1;
 8010c62:	4b08      	ldr	r3, [pc, #32]	; (8010c84 <Periodic_Dormancy_Counter+0x48>)
 8010c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c68:	801a      	strh	r2, [r3, #0]
		//进入预休眠模式
		PreHibernate();
 8010c6a:	f7ff ffa9 	bl	8010bc0 <PreHibernate>
		if (Dormancy_Count != -1)
 8010c6e:	4b05      	ldr	r3, [pc, #20]	; (8010c84 <Periodic_Dormancy_Counter+0x48>)
 8010c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c78:	d102      	bne.n	8010c80 <Periodic_Dormancy_Counter+0x44>
		{
			return;
		}
		//执行完成任务 进入休眠模式
		Hibernate();
 8010c7a:	f7ff ffd7 	bl	8010c2c <Hibernate>
 8010c7e:	e000      	b.n	8010c82 <Periodic_Dormancy_Counter+0x46>
			return;
 8010c80:	bf00      	nop
	}
}
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	2000005e 	.word	0x2000005e
 8010c88:	200010a4 	.word	0x200010a4

08010c8c <CalculateDistance>:
//起点
uint8_t StartPoint = 1;

//计算两坐标距离
uint16_t CalculateDistance(MapNodePosition *A, MapNodePosition *B)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
	uint16_t x = abs(A->X - B->X);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	bfb8      	it	lt
 8010ca6:	425b      	neglt	r3, r3
 8010ca8:	81fb      	strh	r3, [r7, #14]
	uint16_t y = abs(A->X - B->X);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	881b      	ldrh	r3, [r3, #0]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	bfb8      	it	lt
 8010cba:	425b      	neglt	r3, r3
 8010cbc:	81bb      	strh	r3, [r7, #12]

	return sqrt(x * x + y * y);
 8010cbe:	89fb      	ldrh	r3, [r7, #14]
 8010cc0:	89fa      	ldrh	r2, [r7, #14]
 8010cc2:	fb03 f202 	mul.w	r2, r3, r2
 8010cc6:	89bb      	ldrh	r3, [r7, #12]
 8010cc8:	89b9      	ldrh	r1, [r7, #12]
 8010cca:	fb01 f303 	mul.w	r3, r1, r3
 8010cce:	4413      	add	r3, r2
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ef fc27 	bl	8000524 <__aeabi_i2d>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	460b      	mov	r3, r1
 8010cda:	ec43 2b10 	vmov	d0, r2, r3
 8010cde:	f007 fe0b 	bl	80188f8 <sqrt>
 8010ce2:	ec53 2b10 	vmov	r2, r3, d0
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	4619      	mov	r1, r3
 8010cea:	f7ef ff5d 	bl	8000ba8 <__aeabi_d2uiz>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	b29b      	uxth	r3, r3
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
	...

08010cfc <CalculateFGH>:

//计算 F G H
void CalculateFGH(MapNode *node, Direction direction, MapNode *EndPoint)
{
 8010cfc:	b590      	push	{r4, r7, lr}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	460b      	mov	r3, r1
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	72fb      	strb	r3, [r7, #11]

	if (node->ParentNode == 0)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	7c9b      	ldrb	r3, [r3, #18]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d111      	bne.n	8010d36 <CalculateFGH+0x3a>
	{
		node->H = CalculateDistance(&node->Position, &EndPoint->Position);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f103 020e 	add.w	r2, r3, #14
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	330e      	adds	r3, #14
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4610      	mov	r0, r2
 8010d20:	f7ff ffb4 	bl	8010c8c <CalculateDistance>
 8010d24:	4603      	mov	r3, r0
 8010d26:	461a      	mov	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	831a      	strh	r2, [r3, #24]
		node->F = node->H;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	8b1a      	ldrh	r2, [r3, #24]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	829a      	strh	r2, [r3, #20]
		return;
 8010d34:	e030      	b.n	8010d98 <CalculateFGH+0x9c>
	}

	node->H = CalculateDistance(&node->Position, &EndPoint->Position);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f103 020e 	add.w	r2, r3, #14
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	330e      	adds	r3, #14
 8010d40:	4619      	mov	r1, r3
 8010d42:	4610      	mov	r0, r2
 8010d44:	f7ff ffa2 	bl	8010c8c <CalculateDistance>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	831a      	strh	r2, [r3, #24]
	node->G = MapList[node->ParentNode].G + MapList[node->ParentNode].ChildNodeDistances[direction];
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	7c9b      	ldrb	r3, [r3, #18]
 8010d54:	4619      	mov	r1, r3
 8010d56:	4a12      	ldr	r2, [pc, #72]	; (8010da0 <CalculateFGH+0xa4>)
 8010d58:	231a      	movs	r3, #26
 8010d5a:	fb01 f303 	mul.w	r3, r1, r3
 8010d5e:	4413      	add	r3, r2
 8010d60:	3316      	adds	r3, #22
 8010d62:	8819      	ldrh	r1, [r3, #0]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	7c9b      	ldrb	r3, [r3, #18]
 8010d68:	461a      	mov	r2, r3
 8010d6a:	7af8      	ldrb	r0, [r7, #11]
 8010d6c:	4c0c      	ldr	r4, [pc, #48]	; (8010da0 <CalculateFGH+0xa4>)
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	4413      	add	r3, r2
 8010d78:	4403      	add	r3, r0
 8010d7a:	005b      	lsls	r3, r3, #1
 8010d7c:	4423      	add	r3, r4
 8010d7e:	88db      	ldrh	r3, [r3, #6]
 8010d80:	440b      	add	r3, r1
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	82da      	strh	r2, [r3, #22]
	node->F = node->H + node->G;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	8b1a      	ldrh	r2, [r3, #24]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	8adb      	ldrh	r3, [r3, #22]
 8010d90:	4413      	add	r3, r2
 8010d92:	b29a      	uxth	r2, r3
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	829a      	strh	r2, [r3, #20]

	//累计父节点距离
}
 8010d98:	3714      	adds	r7, #20
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd90      	pop	{r4, r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	20001ad8 	.word	0x20001ad8

08010da4 <ClearCache>:

//清空缓存
void ClearCache()
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NodeNumber; i++)
 8010daa:	2300      	movs	r3, #0
 8010dac:	607b      	str	r3, [r7, #4]
 8010dae:	e018      	b.n	8010de2 <ClearCache+0x3e>
	{
		CloseList[i] = OpenList[i] = NULL;
 8010db0:	4a11      	ldr	r2, [pc, #68]	; (8010df8 <ClearCache+0x54>)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2100      	movs	r1, #0
 8010db6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8010dba:	4a0f      	ldr	r2, [pc, #60]	; (8010df8 <ClearCache+0x54>)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010dc2:	490e      	ldr	r1, [pc, #56]	; (8010dfc <ClearCache+0x58>)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		MapList[i].ParentNode = 0;
 8010dca:	4a0d      	ldr	r2, [pc, #52]	; (8010e00 <ClearCache+0x5c>)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	211a      	movs	r1, #26
 8010dd0:	fb01 f303 	mul.w	r3, r1, r3
 8010dd4:	4413      	add	r3, r2
 8010dd6:	3312      	adds	r3, #18
 8010dd8:	2200      	movs	r2, #0
 8010dda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NodeNumber; i++)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	3301      	adds	r3, #1
 8010de0:	607b      	str	r3, [r7, #4]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2b09      	cmp	r3, #9
 8010de6:	dde3      	ble.n	8010db0 <ClearCache+0xc>
	}
}
 8010de8:	bf00      	nop
 8010dea:	bf00      	nop
 8010dec:	370c      	adds	r7, #12
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	20001bdc 	.word	0x20001bdc
 8010dfc:	20001c04 	.word	0x20001c04
 8010e00:	20001ad8 	.word	0x20001ad8

08010e04 <WayFinding>:

//查找路径 返回终点
MapNode* WayFinding(uint8_t end)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08e      	sub	sp, #56	; 0x38
 8010e08:	af02      	add	r7, sp, #8
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	71fb      	strb	r3, [r7, #7]

	MapNode *StartingNode = &MapList[StartPoint];
 8010e0e:	4b79      	ldr	r3, [pc, #484]	; (8010ff4 <WayFinding+0x1f0>)
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	461a      	mov	r2, r3
 8010e14:	231a      	movs	r3, #26
 8010e16:	fb02 f303 	mul.w	r3, r2, r3
 8010e1a:	4a77      	ldr	r2, [pc, #476]	; (8010ff8 <WayFinding+0x1f4>)
 8010e1c:	4413      	add	r3, r2
 8010e1e:	613b      	str	r3, [r7, #16]
	MapNode *EndNode = &MapList[end];
 8010e20:	79fb      	ldrb	r3, [r7, #7]
 8010e22:	221a      	movs	r2, #26
 8010e24:	fb02 f303 	mul.w	r3, r2, r3
 8010e28:	4a73      	ldr	r2, [pc, #460]	; (8010ff8 <WayFinding+0x1f4>)
 8010e2a:	4413      	add	r3, r2
 8010e2c:	60fb      	str	r3, [r7, #12]

	printfX("起点：%d\n终点：%d\n初始朝向：%d\n", StartingNode->Index, EndNode->Index, CurrentDirection);
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	461a      	mov	r2, r3
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	4b70      	ldr	r3, [pc, #448]	; (8010ffc <WayFinding+0x1f8>)
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	9300      	str	r3, [sp, #0]
 8010e40:	460b      	mov	r3, r1
 8010e42:	496f      	ldr	r1, [pc, #444]	; (8011000 <WayFinding+0x1fc>)
 8010e44:	486f      	ldr	r0, [pc, #444]	; (8011004 <WayFinding+0x200>)
 8010e46:	f003 ff31 	bl	8014cac <siprintf>
 8010e4a:	486e      	ldr	r0, [pc, #440]	; (8011004 <WayFinding+0x200>)
 8010e4c:	f002 ffc6 	bl	8013ddc <printf_Base>

	ClearCache();
 8010e50:	f7ff ffa8 	bl	8010da4 <ClearCache>
	// 把起点加入 open list
	OpenList[StartingNode->Index] = StartingNode;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	4619      	mov	r1, r3
 8010e5a:	4a6b      	ldr	r2, [pc, #428]	; (8011008 <WayFinding+0x204>)
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	CalculateFGH(StartingNode, Direction_None, EndNode);
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	2104      	movs	r1, #4
 8010e66:	6938      	ldr	r0, [r7, #16]
 8010e68:	f7ff ff48 	bl	8010cfc <CalculateFGH>

	for (int k = 1; k < NodeNumber; k++)
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e70:	e0b4      	b.n	8010fdc <WayFinding+0x1d8>
	{
		int f_min = 99999;
 8010e72:	4b66      	ldr	r3, [pc, #408]	; (801100c <WayFinding+0x208>)
 8010e74:	62bb      	str	r3, [r7, #40]	; 0x28
		MapNode *currentNode = NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	627b      	str	r3, [r7, #36]	; 0x24

		// 遍历 open list ，查找 F 值最小的节点，把它作为当前要处理的节点
		for (int i = 1; i < NodeNumber; i++)
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	623b      	str	r3, [r7, #32]
 8010e7e:	e01e      	b.n	8010ebe <WayFinding+0xba>
		{
			if (OpenList[i] == NULL)
 8010e80:	4a61      	ldr	r2, [pc, #388]	; (8011008 <WayFinding+0x204>)
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d014      	beq.n	8010eb6 <WayFinding+0xb2>
			{
				continue;
			}
			if (OpenList[i]->F < f_min)
 8010e8c:	4a5e      	ldr	r2, [pc, #376]	; (8011008 <WayFinding+0x204>)
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e94:	8a9b      	ldrh	r3, [r3, #20]
 8010e96:	461a      	mov	r2, r3
 8010e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	dd0c      	ble.n	8010eb8 <WayFinding+0xb4>
			{
				f_min = OpenList[i]->F;
 8010e9e:	4a5a      	ldr	r2, [pc, #360]	; (8011008 <WayFinding+0x204>)
 8010ea0:	6a3b      	ldr	r3, [r7, #32]
 8010ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ea6:	8a9b      	ldrh	r3, [r3, #20]
 8010ea8:	62bb      	str	r3, [r7, #40]	; 0x28
				currentNode = OpenList[i];
 8010eaa:	4a57      	ldr	r2, [pc, #348]	; (8011008 <WayFinding+0x204>)
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8010eb4:	e000      	b.n	8010eb8 <WayFinding+0xb4>
				continue;
 8010eb6:	bf00      	nop
		for (int i = 1; i < NodeNumber; i++)
 8010eb8:	6a3b      	ldr	r3, [r7, #32]
 8010eba:	3301      	adds	r3, #1
 8010ebc:	623b      	str	r3, [r7, #32]
 8010ebe:	6a3b      	ldr	r3, [r7, #32]
 8010ec0:	2b09      	cmp	r3, #9
 8010ec2:	dddd      	ble.n	8010e80 <WayFinding+0x7c>
			}
		}

		//把这个节点移到 close list 。
		OpenList[currentNode->Index] = NULL;
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4b4f      	ldr	r3, [pc, #316]	; (8011008 <WayFinding+0x204>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CloseList[currentNode->Index] = currentNode;
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	4a4d      	ldr	r2, [pc, #308]	; (8011010 <WayFinding+0x20c>)
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		//对当前方格的 8 个相邻方格的每一个方格？
		for (int i = 0; i < DirectionNumber; i++)
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	61fb      	str	r3, [r7, #28]
 8010ee4:	e06c      	b.n	8010fc0 <WayFinding+0x1bc>
		{
			MapNode *childNode = &MapList[currentNode->ChildNodes[i]];
 8010ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	4413      	add	r3, r2
 8010eec:	3301      	adds	r3, #1
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	231a      	movs	r3, #26
 8010ef4:	fb02 f303 	mul.w	r3, r2, r3
 8010ef8:	4a3f      	ldr	r2, [pc, #252]	; (8010ff8 <WayFinding+0x1f4>)
 8010efa:	4413      	add	r3, r2
 8010efc:	60bb      	str	r3, [r7, #8]

			if (childNode == NULL)
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d057      	beq.n	8010fb4 <WayFinding+0x1b0>
			{
				continue;
			}

			//如果它是不可抵达的或者它在 close list 中，忽略它
			if (CloseList[childNode->Index] != NULL)
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	4b41      	ldr	r3, [pc, #260]	; (8011010 <WayFinding+0x20c>)
 8010f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d151      	bne.n	8010fb8 <WayFinding+0x1b4>
			{
				continue;
			}

			if (OpenList[childNode->Index] == NULL)
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	4b3b      	ldr	r3, [pc, #236]	; (8011008 <WayFinding+0x204>)
 8010f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d116      	bne.n	8010f52 <WayFinding+0x14e>
			{
				//如果它不在 open list 中，把它加入 open list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值

				OpenList[childNode->Index] = childNode;
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4a37      	ldr	r2, [pc, #220]	; (8011008 <WayFinding+0x204>)
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				childNode->ParentNode = currentNode->Index;
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	781a      	ldrb	r2, [r3, #0]
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	749a      	strb	r2, [r3, #18]
				childNode->Direction = (Direction) i;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	74da      	strb	r2, [r3, #19]
				CalculateFGH(childNode, (Direction) i, EndNode);
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	68b8      	ldr	r0, [r7, #8]
 8010f4c:	f7ff fed6 	bl	8010cfc <CalculateFGH>
 8010f50:	e033      	b.n	8010fba <WayFinding+0x1b6>
			}
			else
			{
				//如果它已经在 open list 中，检查这条路径 ( 即经由当前方格到达它那里 ) 是否更好，用 G 值作参考

				uint8_t flag = 1;
 8010f52:	2301      	movs	r3, #1
 8010f54:	76fb      	strb	r3, [r7, #27]
				for (int m = 1; m < NodeNumber; m++)
 8010f56:	2301      	movs	r3, #1
 8010f58:	617b      	str	r3, [r7, #20]
 8010f5a:	e015      	b.n	8010f88 <WayFinding+0x184>
				{
					if (OpenList[m] == NULL)
 8010f5c:	4a2a      	ldr	r2, [pc, #168]	; (8011008 <WayFinding+0x204>)
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00b      	beq.n	8010f80 <WayFinding+0x17c>
					{
						continue;
					}
					if (OpenList[m]->G < childNode->G)
 8010f68:	4a27      	ldr	r2, [pc, #156]	; (8011008 <WayFinding+0x204>)
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f70:	8ada      	ldrh	r2, [r3, #22]
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	8adb      	ldrh	r3, [r3, #22]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d203      	bcs.n	8010f82 <WayFinding+0x17e>
					{
						flag = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	76fb      	strb	r3, [r7, #27]
						break;
 8010f7e:	e006      	b.n	8010f8e <WayFinding+0x18a>
						continue;
 8010f80:	bf00      	nop
				for (int m = 1; m < NodeNumber; m++)
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	3301      	adds	r3, #1
 8010f86:	617b      	str	r3, [r7, #20]
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2b09      	cmp	r3, #9
 8010f8c:	dde6      	ble.n	8010f5c <WayFinding+0x158>
					}
				}

				if (flag == 1)
 8010f8e:	7efb      	ldrb	r3, [r7, #27]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d112      	bne.n	8010fba <WayFinding+0x1b6>
				{
					childNode->ParentNode = currentNode->Index;
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	781a      	ldrb	r2, [r3, #0]
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	749a      	strb	r2, [r3, #18]
					childNode->Direction = (Direction) i;
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	74da      	strb	r2, [r3, #19]
					CalculateFGH(childNode, (Direction) i, EndNode);
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	4619      	mov	r1, r3
 8010fac:	68b8      	ldr	r0, [r7, #8]
 8010fae:	f7ff fea5 	bl	8010cfc <CalculateFGH>
 8010fb2:	e002      	b.n	8010fba <WayFinding+0x1b6>
				continue;
 8010fb4:	bf00      	nop
 8010fb6:	e000      	b.n	8010fba <WayFinding+0x1b6>
				continue;
 8010fb8:	bf00      	nop
		for (int i = 0; i < DirectionNumber; i++)
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	61fb      	str	r3, [r7, #28]
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	2b03      	cmp	r3, #3
 8010fc4:	dd8f      	ble.n	8010ee6 <WayFinding+0xe2>
				}
			}
		}

		//停止，当你
		if (OpenList[EndNode->Index] != NULL)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	4b0e      	ldr	r3, [pc, #56]	; (8011008 <WayFinding+0x204>)
 8010fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d107      	bne.n	8010fe6 <WayFinding+0x1e2>
	for (int k = 1; k < NodeNumber; k++)
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	3301      	adds	r3, #1
 8010fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	2b09      	cmp	r3, #9
 8010fe0:	f77f af47 	ble.w	8010e72 <WayFinding+0x6e>
 8010fe4:	e000      	b.n	8010fe8 <WayFinding+0x1e4>
		{
			// 把终点加入到了 open list 中，此时路径已经找到了，或者
			break;
 8010fe6:	bf00      	nop

		//    查找终点失败，并且 open list 是空的，此时没有路径。
		// 前提条件 一定存在路径
	}

	return EndNode;
 8010fe8:	68fb      	ldr	r3, [r7, #12]

}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3730      	adds	r7, #48	; 0x30
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	200000a8 	.word	0x200000a8
 8010ff8:	20001ad8 	.word	0x20001ad8
 8010ffc:	20001c2c 	.word	0x20001c2c
 8011000:	08019738 	.word	0x08019738
 8011004:	20001308 	.word	0x20001308
 8011008:	20001bdc 	.word	0x20001bdc
 801100c:	0001869f 	.word	0x0001869f
 8011010:	20001c04 	.word	0x20001c04

08011014 <GetDirectionDeviation>:

//获取当前朝向 向何处转弯 才能调整为目标朝向
Direction GetDirectionDeviation(Direction current, Direction object)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	4603      	mov	r3, r0
 801101c:	460a      	mov	r2, r1
 801101e:	71fb      	strb	r3, [r7, #7]
 8011020:	4613      	mov	r3, r2
 8011022:	71bb      	strb	r3, [r7, #6]
	if (current == object)
 8011024:	79fa      	ldrb	r2, [r7, #7]
 8011026:	79bb      	ldrb	r3, [r7, #6]
 8011028:	429a      	cmp	r2, r3
 801102a:	d101      	bne.n	8011030 <GetDirectionDeviation+0x1c>
	{
		return 0;
 801102c:	2300      	movs	r3, #0
 801102e:	e02a      	b.n	8011086 <GetDirectionDeviation+0x72>
	}
	if ((current + 1) % DirectionNumber == object)
 8011030:	79fb      	ldrb	r3, [r7, #7]
 8011032:	3301      	adds	r3, #1
 8011034:	425a      	negs	r2, r3
 8011036:	f003 0303 	and.w	r3, r3, #3
 801103a:	f002 0203 	and.w	r2, r2, #3
 801103e:	bf58      	it	pl
 8011040:	4253      	negpl	r3, r2
 8011042:	79ba      	ldrb	r2, [r7, #6]
 8011044:	4293      	cmp	r3, r2
 8011046:	d101      	bne.n	801104c <GetDirectionDeviation+0x38>
	{
		return 1;
 8011048:	2301      	movs	r3, #1
 801104a:	e01c      	b.n	8011086 <GetDirectionDeviation+0x72>
	}
	if ((current + 2) % DirectionNumber == object)
 801104c:	79fb      	ldrb	r3, [r7, #7]
 801104e:	3302      	adds	r3, #2
 8011050:	425a      	negs	r2, r3
 8011052:	f003 0303 	and.w	r3, r3, #3
 8011056:	f002 0203 	and.w	r2, r2, #3
 801105a:	bf58      	it	pl
 801105c:	4253      	negpl	r3, r2
 801105e:	79ba      	ldrb	r2, [r7, #6]
 8011060:	4293      	cmp	r3, r2
 8011062:	d101      	bne.n	8011068 <GetDirectionDeviation+0x54>
	{
		return 2;
 8011064:	2302      	movs	r3, #2
 8011066:	e00e      	b.n	8011086 <GetDirectionDeviation+0x72>
	}

	if ((current + 3) % DirectionNumber == object)
 8011068:	79fb      	ldrb	r3, [r7, #7]
 801106a:	3303      	adds	r3, #3
 801106c:	425a      	negs	r2, r3
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	f002 0203 	and.w	r2, r2, #3
 8011076:	bf58      	it	pl
 8011078:	4253      	negpl	r3, r2
 801107a:	79ba      	ldrb	r2, [r7, #6]
 801107c:	4293      	cmp	r3, r2
 801107e:	d101      	bne.n	8011084 <GetDirectionDeviation+0x70>
	{
		return 3;
 8011080:	2303      	movs	r3, #3
 8011082:	e000      	b.n	8011086 <GetDirectionDeviation+0x72>
	}
	return 4;
 8011084:	2304      	movs	r3, #4

}
 8011086:	4618      	mov	r0, r3
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr
	...

08011094 <RoadToCommand>:

//从路线生成指令
//layer：递归层数 初始值0
//node：终点
uint8_t RoadToCommand(MapNode *node, uint8_t layer)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	460b      	mov	r3, r1
 801109e:	70fb      	strb	r3, [r7, #3]
	if (node->ParentNode == 0)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	7c9b      	ldrb	r3, [r3, #18]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10b      	bne.n	80110c0 <RoadToCommand+0x2c>
	{
		//父节点为空即为起点
		printfX("%d", node->Index);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	461a      	mov	r2, r3
 80110ae:	497d      	ldr	r1, [pc, #500]	; (80112a4 <RoadToCommand+0x210>)
 80110b0:	487d      	ldr	r0, [pc, #500]	; (80112a8 <RoadToCommand+0x214>)
 80110b2:	f003 fdfb 	bl	8014cac <siprintf>
 80110b6:	487c      	ldr	r0, [pc, #496]	; (80112a8 <RoadToCommand+0x214>)
 80110b8:	f002 fe90 	bl	8013ddc <printf_Base>
		return 0;
 80110bc:	2300      	movs	r3, #0
 80110be:	e0ed      	b.n	801129c <RoadToCommand+0x208>
	}
	else
	{
		uint8_t reLayer = RoadToCommand(&MapList[node->ParentNode], layer + 1);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	7c9b      	ldrb	r3, [r3, #18]
 80110c4:	461a      	mov	r2, r3
 80110c6:	231a      	movs	r3, #26
 80110c8:	fb02 f303 	mul.w	r3, r2, r3
 80110cc:	4a77      	ldr	r2, [pc, #476]	; (80112ac <RoadToCommand+0x218>)
 80110ce:	441a      	add	r2, r3
 80110d0:	78fb      	ldrb	r3, [r7, #3]
 80110d2:	3301      	adds	r3, #1
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	4619      	mov	r1, r3
 80110d8:	4610      	mov	r0, r2
 80110da:	f7ff ffdb 	bl	8011094 <RoadToCommand>
 80110de:	4603      	mov	r3, r0
 80110e0:	73fb      	strb	r3, [r7, #15]

		//需要考虑上一端点朝向偏差
		Direction dir = GetDirectionDeviation(CurrentDirection, node->Direction);
 80110e2:	4b73      	ldr	r3, [pc, #460]	; (80112b0 <RoadToCommand+0x21c>)
 80110e4:	781a      	ldrb	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	7cdb      	ldrb	r3, [r3, #19]
 80110ea:	4619      	mov	r1, r3
 80110ec:	4610      	mov	r0, r2
 80110ee:	f7ff ff91 	bl	8011014 <GetDirectionDeviation>
 80110f2:	4603      	mov	r3, r0
 80110f4:	73bb      	strb	r3, [r7, #14]
		CurrentDirection = node->Direction;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	7cda      	ldrb	r2, [r3, #19]
 80110fa:	4b6d      	ldr	r3, [pc, #436]	; (80112b0 <RoadToCommand+0x21c>)
 80110fc:	701a      	strb	r2, [r3, #0]

		printfX(" -- ");
 80110fe:	496d      	ldr	r1, [pc, #436]	; (80112b4 <RoadToCommand+0x220>)
 8011100:	4869      	ldr	r0, [pc, #420]	; (80112a8 <RoadToCommand+0x214>)
 8011102:	f003 fdd3 	bl	8014cac <siprintf>
 8011106:	4868      	ldr	r0, [pc, #416]	; (80112a8 <RoadToCommand+0x214>)
 8011108:	f002 fe68 	bl	8013ddc <printf_Base>
		switch (dir)
 801110c:	7bbb      	ldrb	r3, [r7, #14]
 801110e:	2b03      	cmp	r3, #3
 8011110:	f200 80a0 	bhi.w	8011254 <RoadToCommand+0x1c0>
 8011114:	a201      	add	r2, pc, #4	; (adr r2, 801111c <RoadToCommand+0x88>)
 8011116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801111a:	bf00      	nop
 801111c:	080111c1 	.word	0x080111c1
 8011120:	08011177 	.word	0x08011177
 8011124:	0801120b 	.word	0x0801120b
 8011128:	0801112d 	.word	0x0801112d
		{
			case Direction_Left:
				printfX("左");
 801112c:	4962      	ldr	r1, [pc, #392]	; (80112b8 <RoadToCommand+0x224>)
 801112e:	485e      	ldr	r0, [pc, #376]	; (80112a8 <RoadToCommand+0x214>)
 8011130:	f003 fdbc 	bl	8014cac <siprintf>
 8011134:	485c      	ldr	r0, [pc, #368]	; (80112a8 <RoadToCommand+0x214>)
 8011136:	f002 fe51 	bl	8013ddc <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 801113a:	7bfa      	ldrb	r2, [r7, #15]
 801113c:	495f      	ldr	r1, [pc, #380]	; (80112bc <RoadToCommand+0x228>)
 801113e:	4613      	mov	r3, r2
 8011140:	005b      	lsls	r3, r3, #1
 8011142:	4413      	add	r3, r2
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	440b      	add	r3, r1
 8011148:	3304      	adds	r3, #4
 801114a:	2264      	movs	r2, #100	; 0x64
 801114c:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 801114e:	7bfa      	ldrb	r2, [r7, #15]
 8011150:	495a      	ldr	r1, [pc, #360]	; (80112bc <RoadToCommand+0x228>)
 8011152:	4613      	mov	r3, r2
 8011154:	005b      	lsls	r3, r3, #1
 8011156:	4413      	add	r3, r2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	440b      	add	r3, r1
 801115c:	3308      	adds	r3, #8
 801115e:	2200      	movs	r2, #0
 8011160:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Left;
 8011162:	7bfa      	ldrb	r2, [r7, #15]
 8011164:	4955      	ldr	r1, [pc, #340]	; (80112bc <RoadToCommand+0x228>)
 8011166:	4613      	mov	r3, r2
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	4413      	add	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	440b      	add	r3, r1
 8011170:	2201      	movs	r2, #1
 8011172:	701a      	strb	r2, [r3, #0]
				break;
 8011174:	e06f      	b.n	8011256 <RoadToCommand+0x1c2>
			case Direction_Right:
				printfX("右");
 8011176:	4952      	ldr	r1, [pc, #328]	; (80112c0 <RoadToCommand+0x22c>)
 8011178:	484b      	ldr	r0, [pc, #300]	; (80112a8 <RoadToCommand+0x214>)
 801117a:	f003 fd97 	bl	8014cac <siprintf>
 801117e:	484a      	ldr	r0, [pc, #296]	; (80112a8 <RoadToCommand+0x214>)
 8011180:	f002 fe2c 	bl	8013ddc <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 8011184:	7bfa      	ldrb	r2, [r7, #15]
 8011186:	494d      	ldr	r1, [pc, #308]	; (80112bc <RoadToCommand+0x228>)
 8011188:	4613      	mov	r3, r2
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	4413      	add	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	440b      	add	r3, r1
 8011192:	3304      	adds	r3, #4
 8011194:	2264      	movs	r2, #100	; 0x64
 8011196:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 8011198:	7bfa      	ldrb	r2, [r7, #15]
 801119a:	4948      	ldr	r1, [pc, #288]	; (80112bc <RoadToCommand+0x228>)
 801119c:	4613      	mov	r3, r2
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	4413      	add	r3, r2
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	440b      	add	r3, r1
 80111a6:	3308      	adds	r3, #8
 80111a8:	2200      	movs	r2, #0
 80111aa:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Right;
 80111ac:	7bfa      	ldrb	r2, [r7, #15]
 80111ae:	4943      	ldr	r1, [pc, #268]	; (80112bc <RoadToCommand+0x228>)
 80111b0:	4613      	mov	r3, r2
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	4413      	add	r3, r2
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	440b      	add	r3, r1
 80111ba:	2202      	movs	r2, #2
 80111bc:	701a      	strb	r2, [r3, #0]
				break;
 80111be:	e04a      	b.n	8011256 <RoadToCommand+0x1c2>
			case Direction_Top:
				printfX("上");
 80111c0:	4940      	ldr	r1, [pc, #256]	; (80112c4 <RoadToCommand+0x230>)
 80111c2:	4839      	ldr	r0, [pc, #228]	; (80112a8 <RoadToCommand+0x214>)
 80111c4:	f003 fd72 	bl	8014cac <siprintf>
 80111c8:	4837      	ldr	r0, [pc, #220]	; (80112a8 <RoadToCommand+0x214>)
 80111ca:	f002 fe07 	bl	8013ddc <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 80111ce:	7bfa      	ldrb	r2, [r7, #15]
 80111d0:	493a      	ldr	r1, [pc, #232]	; (80112bc <RoadToCommand+0x228>)
 80111d2:	4613      	mov	r3, r2
 80111d4:	005b      	lsls	r3, r3, #1
 80111d6:	4413      	add	r3, r2
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	440b      	add	r3, r1
 80111dc:	3304      	adds	r3, #4
 80111de:	2264      	movs	r2, #100	; 0x64
 80111e0:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 80111e2:	7bfa      	ldrb	r2, [r7, #15]
 80111e4:	4935      	ldr	r1, [pc, #212]	; (80112bc <RoadToCommand+0x228>)
 80111e6:	4613      	mov	r3, r2
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	4413      	add	r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	440b      	add	r3, r1
 80111f0:	3308      	adds	r3, #8
 80111f2:	2200      	movs	r2, #0
 80111f4:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Forward;
 80111f6:	7bfa      	ldrb	r2, [r7, #15]
 80111f8:	4930      	ldr	r1, [pc, #192]	; (80112bc <RoadToCommand+0x228>)
 80111fa:	4613      	mov	r3, r2
 80111fc:	005b      	lsls	r3, r3, #1
 80111fe:	4413      	add	r3, r2
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	440b      	add	r3, r1
 8011204:	2200      	movs	r2, #0
 8011206:	701a      	strb	r2, [r3, #0]
				break;
 8011208:	e025      	b.n	8011256 <RoadToCommand+0x1c2>
			case Direction_Bottom:		//无法后退 即调头
				printfX("下");
 801120a:	492f      	ldr	r1, [pc, #188]	; (80112c8 <RoadToCommand+0x234>)
 801120c:	4826      	ldr	r0, [pc, #152]	; (80112a8 <RoadToCommand+0x214>)
 801120e:	f003 fd4d 	bl	8014cac <siprintf>
 8011212:	4825      	ldr	r0, [pc, #148]	; (80112a8 <RoadToCommand+0x214>)
 8011214:	f002 fde2 	bl	8013ddc <printf_Base>
				Commands[reLayer].Duration = Command_Rotation_Duration;
 8011218:	7bfa      	ldrb	r2, [r7, #15]
 801121a:	4928      	ldr	r1, [pc, #160]	; (80112bc <RoadToCommand+0x228>)
 801121c:	4613      	mov	r3, r2
 801121e:	005b      	lsls	r3, r3, #1
 8011220:	4413      	add	r3, r2
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	440b      	add	r3, r1
 8011226:	3304      	adds	r3, #4
 8011228:	22c8      	movs	r2, #200	; 0xc8
 801122a:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 801122c:	7bfa      	ldrb	r2, [r7, #15]
 801122e:	4923      	ldr	r1, [pc, #140]	; (80112bc <RoadToCommand+0x228>)
 8011230:	4613      	mov	r3, r2
 8011232:	005b      	lsls	r3, r3, #1
 8011234:	4413      	add	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	440b      	add	r3, r1
 801123a:	3308      	adds	r3, #8
 801123c:	2200      	movs	r2, #0
 801123e:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Rotation;
 8011240:	7bfa      	ldrb	r2, [r7, #15]
 8011242:	491e      	ldr	r1, [pc, #120]	; (80112bc <RoadToCommand+0x228>)
 8011244:	4613      	mov	r3, r2
 8011246:	005b      	lsls	r3, r3, #1
 8011248:	4413      	add	r3, r2
 801124a:	009b      	lsls	r3, r3, #2
 801124c:	440b      	add	r3, r1
 801124e:	2204      	movs	r2, #4
 8011250:	701a      	strb	r2, [r3, #0]
				break;
 8011252:	e000      	b.n	8011256 <RoadToCommand+0x1c2>
			default:
				break;
 8011254:	bf00      	nop
		}
		printfX(" --> ");
 8011256:	491d      	ldr	r1, [pc, #116]	; (80112cc <RoadToCommand+0x238>)
 8011258:	4813      	ldr	r0, [pc, #76]	; (80112a8 <RoadToCommand+0x214>)
 801125a:	f003 fd27 	bl	8014cac <siprintf>
 801125e:	4812      	ldr	r0, [pc, #72]	; (80112a8 <RoadToCommand+0x214>)
 8011260:	f002 fdbc 	bl	8013ddc <printf_Base>
		printfX("%d", node->Index);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	461a      	mov	r2, r3
 801126a:	490e      	ldr	r1, [pc, #56]	; (80112a4 <RoadToCommand+0x210>)
 801126c:	480e      	ldr	r0, [pc, #56]	; (80112a8 <RoadToCommand+0x214>)
 801126e:	f003 fd1d 	bl	8014cac <siprintf>
 8011272:	480d      	ldr	r0, [pc, #52]	; (80112a8 <RoadToCommand+0x214>)
 8011274:	f002 fdb2 	bl	8013ddc <printf_Base>

		//判断是否结束
		if (layer == 0)
 8011278:	78fb      	ldrb	r3, [r7, #3]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d10b      	bne.n	8011296 <RoadToCommand+0x202>
		{
			Command_Number = reLayer + 1;
 801127e:	7bfb      	ldrb	r3, [r7, #15]
 8011280:	3301      	adds	r3, #1
 8011282:	b2da      	uxtb	r2, r3
 8011284:	4b12      	ldr	r3, [pc, #72]	; (80112d0 <RoadToCommand+0x23c>)
 8011286:	701a      	strb	r2, [r3, #0]
			printfX("\n");
 8011288:	4912      	ldr	r1, [pc, #72]	; (80112d4 <RoadToCommand+0x240>)
 801128a:	4807      	ldr	r0, [pc, #28]	; (80112a8 <RoadToCommand+0x214>)
 801128c:	f003 fd0e 	bl	8014cac <siprintf>
 8011290:	4805      	ldr	r0, [pc, #20]	; (80112a8 <RoadToCommand+0x214>)
 8011292:	f002 fda3 	bl	8013ddc <printf_Base>
		}
		return reLayer + 1;
 8011296:	7bfb      	ldrb	r3, [r7, #15]
 8011298:	3301      	adds	r3, #1
 801129a:	b2db      	uxtb	r3, r3
	}

}
 801129c:	4618      	mov	r0, r3
 801129e:	3710      	adds	r7, #16
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	08019764 	.word	0x08019764
 80112a8:	20001308 	.word	0x20001308
 80112ac:	20001ad8 	.word	0x20001ad8
 80112b0:	20001c2c 	.word	0x20001c2c
 80112b4:	08019768 	.word	0x08019768
 80112b8:	08019770 	.word	0x08019770
 80112bc:	200000ac 	.word	0x200000ac
 80112c0:	08019774 	.word	0x08019774
 80112c4:	08019778 	.word	0x08019778
 80112c8:	0801977c 	.word	0x0801977c
 80112cc:	08019780 	.word	0x08019780
 80112d0:	200000a9 	.word	0x200000a9
 80112d4:	08019788 	.word	0x08019788

080112d8 <GenerateMap>:

//画出地图
void GenerateMap()
{
 80112d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112dc:	b09b      	sub	sp, #108	; 0x6c
 80112de:	af00      	add	r7, sp, #0
 80112e0:	466b      	mov	r3, sp
 80112e2:	461e      	mov	r6, r3
	const int length = 20;
 80112e4:	2314      	movs	r3, #20
 80112e6:	63bb      	str	r3, [r7, #56]	; 0x38
	//0 空地 -1 路 1 2 3 ....节点
	int map[length][length];
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	3b01      	subs	r3, #1
 80112ec:	637b      	str	r3, [r7, #52]	; 0x34
 80112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f0:	2200      	movs	r2, #0
 80112f2:	461c      	mov	r4, r3
 80112f4:	4615      	mov	r5, r2
 80112f6:	f04f 0200 	mov.w	r2, #0
 80112fa:	f04f 0300 	mov.w	r3, #0
 80112fe:	016b      	lsls	r3, r5, #5
 8011300:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8011304:	0162      	lsls	r2, r4, #5
 8011306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011308:	009c      	lsls	r4, r3, #2
 801130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130c:	3b01      	subs	r3, #1
 801130e:	633b      	str	r3, [r7, #48]	; 0x30
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	2200      	movs	r2, #0
 8011314:	469a      	mov	sl, r3
 8011316:	4693      	mov	fp, r2
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	2200      	movs	r2, #0
 801131c:	613b      	str	r3, [r7, #16]
 801131e:	617a      	str	r2, [r7, #20]
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	fb03 f20b 	mul.w	r2, r3, fp
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	fb0a f303 	mul.w	r3, sl, r3
 801132c:	4413      	add	r3, r2
 801132e:	693a      	ldr	r2, [r7, #16]
 8011330:	fbaa 8902 	umull	r8, r9, sl, r2
 8011334:	444b      	add	r3, r9
 8011336:	4699      	mov	r9, r3
 8011338:	f04f 0200 	mov.w	r2, #0
 801133c:	f04f 0300 	mov.w	r3, #0
 8011340:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8011344:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8011348:	ea4f 1248 	mov.w	r2, r8, lsl #5
 801134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134e:	2200      	movs	r2, #0
 8011350:	60bb      	str	r3, [r7, #8]
 8011352:	60fa      	str	r2, [r7, #12]
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	2200      	movs	r2, #0
 8011358:	603b      	str	r3, [r7, #0]
 801135a:	607a      	str	r2, [r7, #4]
 801135c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011360:	464b      	mov	r3, r9
 8011362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011366:	4652      	mov	r2, sl
 8011368:	fb02 f203 	mul.w	r2, r2, r3
 801136c:	465b      	mov	r3, fp
 801136e:	4645      	mov	r5, r8
 8011370:	fb05 f303 	mul.w	r3, r5, r3
 8011374:	4413      	add	r3, r2
 8011376:	4642      	mov	r2, r8
 8011378:	4655      	mov	r5, sl
 801137a:	fba2 0105 	umull	r0, r1, r2, r5
 801137e:	440b      	add	r3, r1
 8011380:	4619      	mov	r1, r3
 8011382:	f04f 0200 	mov.w	r2, #0
 8011386:	f04f 0300 	mov.w	r3, #0
 801138a:	014b      	lsls	r3, r1, #5
 801138c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8011390:	0142      	lsls	r2, r0, #5
 8011392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011396:	fb02 f303 	mul.w	r3, r2, r3
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	3307      	adds	r3, #7
 801139e:	08db      	lsrs	r3, r3, #3
 80113a0:	00db      	lsls	r3, r3, #3
 80113a2:	ebad 0d03 	sub.w	sp, sp, r3
 80113a6:	466b      	mov	r3, sp
 80113a8:	3303      	adds	r3, #3
 80113aa:	089b      	lsrs	r3, r3, #2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < length; i++)
 80113b0:	2300      	movs	r3, #0
 80113b2:	653b      	str	r3, [r7, #80]	; 0x50
 80113b4:	e016      	b.n	80113e4 <GenerateMap+0x10c>
	{
		for (int j = 0; j < length; j++)
 80113b6:	2300      	movs	r3, #0
 80113b8:	657b      	str	r3, [r7, #84]	; 0x54
 80113ba:	e00c      	b.n	80113d6 <GenerateMap+0xfe>
		{
			map[i][j] = 0;
 80113bc:	08a2      	lsrs	r2, r4, #2
 80113be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113c2:	fb02 f101 	mul.w	r1, r2, r1
 80113c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80113c8:	440a      	add	r2, r1
 80113ca:	2100      	movs	r1, #0
 80113cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < length; j++)
 80113d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113d2:	3301      	adds	r3, #1
 80113d4:	657b      	str	r3, [r7, #84]	; 0x54
 80113d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80113d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113da:	429a      	cmp	r2, r3
 80113dc:	dbee      	blt.n	80113bc <GenerateMap+0xe4>
	for (int i = 0; i < length; i++)
 80113de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e0:	3301      	adds	r3, #1
 80113e2:	653b      	str	r3, [r7, #80]	; 0x50
 80113e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e8:	429a      	cmp	r2, r3
 80113ea:	dbe4      	blt.n	80113b6 <GenerateMap+0xde>
		}
	}
	int x = 0;
 80113ec:	2300      	movs	r3, #0
 80113ee:	65bb      	str	r3, [r7, #88]	; 0x58
	int y = length - 1;
 80113f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f2:	3b01      	subs	r3, #1
 80113f4:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 0; i < NodeRelationshipNumber; i++)
 80113f6:	2300      	movs	r3, #0
 80113f8:	663b      	str	r3, [r7, #96]	; 0x60
 80113fa:	e34e      	b.n	8011a9a <GenerateMap+0x7c2>
	{
		//查找节点是否存在
		if (MapList[NodeList[i].NodeA].Index == 0)
 80113fc:	4990      	ldr	r1, [pc, #576]	; (8011640 <GenerateMap+0x368>)
 80113fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011400:	4613      	mov	r3, r2
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	4413      	add	r3, r2
 8011406:	005b      	lsls	r3, r3, #1
 8011408:	440b      	add	r3, r1
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	4619      	mov	r1, r3
 801140e:	4a8d      	ldr	r2, [pc, #564]	; (8011644 <GenerateMap+0x36c>)
 8011410:	231a      	movs	r3, #26
 8011412:	fb01 f303 	mul.w	r3, r1, r3
 8011416:	4413      	add	r3, r2
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d15b      	bne.n	80114d6 <GenerateMap+0x1fe>
		{
			if (i == 0)
 801141e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011420:	2b00      	cmp	r3, #0
 8011422:	d150      	bne.n	80114c6 <GenerateMap+0x1ee>
			{
				MapList[NodeList[i].NodeA].Index = NodeList[i].NodeA;
 8011424:	4986      	ldr	r1, [pc, #536]	; (8011640 <GenerateMap+0x368>)
 8011426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011428:	4613      	mov	r3, r2
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	4413      	add	r3, r2
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	440b      	add	r3, r1
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	4618      	mov	r0, r3
 8011436:	4982      	ldr	r1, [pc, #520]	; (8011640 <GenerateMap+0x368>)
 8011438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801143a:	4613      	mov	r3, r2
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	4413      	add	r3, r2
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	440b      	add	r3, r1
 8011444:	7819      	ldrb	r1, [r3, #0]
 8011446:	4a7f      	ldr	r2, [pc, #508]	; (8011644 <GenerateMap+0x36c>)
 8011448:	231a      	movs	r3, #26
 801144a:	fb00 f303 	mul.w	r3, r0, r3
 801144e:	4413      	add	r3, r2
 8011450:	460a      	mov	r2, r1
 8011452:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].Position.X = x;
 8011454:	497a      	ldr	r1, [pc, #488]	; (8011640 <GenerateMap+0x368>)
 8011456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011458:	4613      	mov	r3, r2
 801145a:	005b      	lsls	r3, r3, #1
 801145c:	4413      	add	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	440b      	add	r3, r1
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	4618      	mov	r0, r3
 8011466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011468:	b299      	uxth	r1, r3
 801146a:	4a76      	ldr	r2, [pc, #472]	; (8011644 <GenerateMap+0x36c>)
 801146c:	231a      	movs	r3, #26
 801146e:	fb00 f303 	mul.w	r3, r0, r3
 8011472:	4413      	add	r3, r2
 8011474:	330e      	adds	r3, #14
 8011476:	460a      	mov	r2, r1
 8011478:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeA].Position.Y = y;
 801147a:	4971      	ldr	r1, [pc, #452]	; (8011640 <GenerateMap+0x368>)
 801147c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801147e:	4613      	mov	r3, r2
 8011480:	005b      	lsls	r3, r3, #1
 8011482:	4413      	add	r3, r2
 8011484:	005b      	lsls	r3, r3, #1
 8011486:	440b      	add	r3, r1
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	4618      	mov	r0, r3
 801148c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801148e:	b299      	uxth	r1, r3
 8011490:	4a6c      	ldr	r2, [pc, #432]	; (8011644 <GenerateMap+0x36c>)
 8011492:	231a      	movs	r3, #26
 8011494:	fb00 f303 	mul.w	r3, r0, r3
 8011498:	4413      	add	r3, r2
 801149a:	3310      	adds	r3, #16
 801149c:	460a      	mov	r2, r1
 801149e:	801a      	strh	r2, [r3, #0]
				//画第一个节点
				map[x][y] = NodeList[i].NodeA;
 80114a0:	4967      	ldr	r1, [pc, #412]	; (8011640 <GenerateMap+0x368>)
 80114a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114a4:	4613      	mov	r3, r2
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	4413      	add	r3, r2
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	440b      	add	r3, r1
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	08a2      	lsrs	r2, r4, #2
 80114b2:	4618      	mov	r0, r3
 80114b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80114b8:	fb02 f101 	mul.w	r1, r2, r1
 80114bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114be:	440a      	add	r2, r1
 80114c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80114c4:	e029      	b.n	801151a <GenerateMap+0x242>
			}
			else
			{
				//报错 节点必须存在
				printfX("初始化地图错误，首节点必须存在\n");
 80114c6:	4960      	ldr	r1, [pc, #384]	; (8011648 <GenerateMap+0x370>)
 80114c8:	4860      	ldr	r0, [pc, #384]	; (801164c <GenerateMap+0x374>)
 80114ca:	f003 fbef 	bl	8014cac <siprintf>
 80114ce:	485f      	ldr	r0, [pc, #380]	; (801164c <GenerateMap+0x374>)
 80114d0:	f002 fc84 	bl	8013ddc <printf_Base>
 80114d4:	e021      	b.n	801151a <GenerateMap+0x242>
			}
		}
		else
		{
			//修改当前坐标
			x = MapList[NodeList[i].NodeA].Position.X;
 80114d6:	495a      	ldr	r1, [pc, #360]	; (8011640 <GenerateMap+0x368>)
 80114d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114da:	4613      	mov	r3, r2
 80114dc:	005b      	lsls	r3, r3, #1
 80114de:	4413      	add	r3, r2
 80114e0:	005b      	lsls	r3, r3, #1
 80114e2:	440b      	add	r3, r1
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	4619      	mov	r1, r3
 80114e8:	4a56      	ldr	r2, [pc, #344]	; (8011644 <GenerateMap+0x36c>)
 80114ea:	231a      	movs	r3, #26
 80114ec:	fb01 f303 	mul.w	r3, r1, r3
 80114f0:	4413      	add	r3, r2
 80114f2:	330e      	adds	r3, #14
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	65bb      	str	r3, [r7, #88]	; 0x58
			y = MapList[NodeList[i].NodeA].Position.Y;
 80114f8:	4951      	ldr	r1, [pc, #324]	; (8011640 <GenerateMap+0x368>)
 80114fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114fc:	4613      	mov	r3, r2
 80114fe:	005b      	lsls	r3, r3, #1
 8011500:	4413      	add	r3, r2
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	440b      	add	r3, r1
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	4619      	mov	r1, r3
 801150a:	4a4e      	ldr	r2, [pc, #312]	; (8011644 <GenerateMap+0x36c>)
 801150c:	231a      	movs	r3, #26
 801150e:	fb01 f303 	mul.w	r3, r1, r3
 8011512:	4413      	add	r3, r2
 8011514:	3310      	adds	r3, #16
 8011516:	881b      	ldrh	r3, [r3, #0]
 8011518:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		//计算路径
		int x_s = x;
 801151a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801151c:	667b      	str	r3, [r7, #100]	; 0x64
		int y_s = y;
 801151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011520:	64fb      	str	r3, [r7, #76]	; 0x4c
		switch (NodeList[i].Direction)
 8011522:	4947      	ldr	r1, [pc, #284]	; (8011640 <GenerateMap+0x368>)
 8011524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011526:	4613      	mov	r3, r2
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	4413      	add	r3, r2
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	440b      	add	r3, r1
 8011530:	3302      	adds	r3, #2
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b03      	cmp	r3, #3
 8011536:	f200 81f5 	bhi.w	8011924 <GenerateMap+0x64c>
 801153a:	a201      	add	r2, pc, #4	; (adr r2, 8011540 <GenerateMap+0x268>)
 801153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011540:	0801173f 	.word	0x0801173f
 8011544:	08011651 	.word	0x08011651
 8011548:	0801182d 	.word	0x0801182d
 801154c:	08011551 	.word	0x08011551
		{
			case Direction_Left:
				x_s -= NodeList[i].Distance + 1;
 8011550:	493b      	ldr	r1, [pc, #236]	; (8011640 <GenerateMap+0x368>)
 8011552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011554:	4613      	mov	r3, r2
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	4413      	add	r3, r2
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	440b      	add	r3, r1
 801155e:	3304      	adds	r3, #4
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	3301      	adds	r3, #1
 8011564:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	667b      	str	r3, [r7, #100]	; 0x64
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Left] = NodeList[i].NodeB;  //将另一端节点加入方向索引
 801156a:	4935      	ldr	r1, [pc, #212]	; (8011640 <GenerateMap+0x368>)
 801156c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801156e:	4613      	mov	r3, r2
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	4413      	add	r3, r2
 8011574:	005b      	lsls	r3, r3, #1
 8011576:	440b      	add	r3, r1
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	4618      	mov	r0, r3
 801157c:	4930      	ldr	r1, [pc, #192]	; (8011640 <GenerateMap+0x368>)
 801157e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011580:	4613      	mov	r3, r2
 8011582:	005b      	lsls	r3, r3, #1
 8011584:	4413      	add	r3, r2
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	440b      	add	r3, r1
 801158a:	3301      	adds	r3, #1
 801158c:	7819      	ldrb	r1, [r3, #0]
 801158e:	4a2d      	ldr	r2, [pc, #180]	; (8011644 <GenerateMap+0x36c>)
 8011590:	231a      	movs	r3, #26
 8011592:	fb00 f303 	mul.w	r3, r0, r3
 8011596:	4413      	add	r3, r2
 8011598:	3304      	adds	r3, #4
 801159a:	460a      	mov	r2, r1
 801159c:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Left] = NodeList[i].Distance;
 801159e:	4928      	ldr	r1, [pc, #160]	; (8011640 <GenerateMap+0x368>)
 80115a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115a2:	4613      	mov	r3, r2
 80115a4:	005b      	lsls	r3, r3, #1
 80115a6:	4413      	add	r3, r2
 80115a8:	005b      	lsls	r3, r3, #1
 80115aa:	440b      	add	r3, r1
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	4618      	mov	r0, r3
 80115b0:	4923      	ldr	r1, [pc, #140]	; (8011640 <GenerateMap+0x368>)
 80115b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115b4:	4613      	mov	r3, r2
 80115b6:	005b      	lsls	r3, r3, #1
 80115b8:	4413      	add	r3, r2
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	440b      	add	r3, r1
 80115be:	3304      	adds	r3, #4
 80115c0:	8819      	ldrh	r1, [r3, #0]
 80115c2:	4a20      	ldr	r2, [pc, #128]	; (8011644 <GenerateMap+0x36c>)
 80115c4:	231a      	movs	r3, #26
 80115c6:	fb00 f303 	mul.w	r3, r0, r3
 80115ca:	4413      	add	r3, r2
 80115cc:	330c      	adds	r3, #12
 80115ce:	460a      	mov	r2, r1
 80115d0:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Right] = NodeList[i].NodeA;  //反向索引
 80115d2:	491b      	ldr	r1, [pc, #108]	; (8011640 <GenerateMap+0x368>)
 80115d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115d6:	4613      	mov	r3, r2
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	4413      	add	r3, r2
 80115dc:	005b      	lsls	r3, r3, #1
 80115de:	440b      	add	r3, r1
 80115e0:	3301      	adds	r3, #1
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	4618      	mov	r0, r3
 80115e6:	4916      	ldr	r1, [pc, #88]	; (8011640 <GenerateMap+0x368>)
 80115e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115ea:	4613      	mov	r3, r2
 80115ec:	005b      	lsls	r3, r3, #1
 80115ee:	4413      	add	r3, r2
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	440b      	add	r3, r1
 80115f4:	7819      	ldrb	r1, [r3, #0]
 80115f6:	4a13      	ldr	r2, [pc, #76]	; (8011644 <GenerateMap+0x36c>)
 80115f8:	231a      	movs	r3, #26
 80115fa:	fb00 f303 	mul.w	r3, r0, r3
 80115fe:	4413      	add	r3, r2
 8011600:	3302      	adds	r3, #2
 8011602:	460a      	mov	r2, r1
 8011604:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Right] = NodeList[i].Distance;
 8011606:	490e      	ldr	r1, [pc, #56]	; (8011640 <GenerateMap+0x368>)
 8011608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801160a:	4613      	mov	r3, r2
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	4413      	add	r3, r2
 8011610:	005b      	lsls	r3, r3, #1
 8011612:	440b      	add	r3, r1
 8011614:	3301      	adds	r3, #1
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	4618      	mov	r0, r3
 801161a:	4909      	ldr	r1, [pc, #36]	; (8011640 <GenerateMap+0x368>)
 801161c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801161e:	4613      	mov	r3, r2
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	4413      	add	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	440b      	add	r3, r1
 8011628:	3304      	adds	r3, #4
 801162a:	8819      	ldrh	r1, [r3, #0]
 801162c:	4a05      	ldr	r2, [pc, #20]	; (8011644 <GenerateMap+0x36c>)
 801162e:	231a      	movs	r3, #26
 8011630:	fb00 f303 	mul.w	r3, r0, r3
 8011634:	4413      	add	r3, r2
 8011636:	3308      	adds	r3, #8
 8011638:	460a      	mov	r2, r1
 801163a:	801a      	strh	r2, [r3, #0]
				break;
 801163c:	e173      	b.n	8011926 <GenerateMap+0x64e>
 801163e:	bf00      	nop
 8011640:	20000060 	.word	0x20000060
 8011644:	20001ad8 	.word	0x20001ad8
 8011648:	0801978c 	.word	0x0801978c
 801164c:	20001308 	.word	0x20001308
			case Direction_Right:
				x_s += NodeList[i].Distance + 1;
 8011650:	49b2      	ldr	r1, [pc, #712]	; (801191c <GenerateMap+0x644>)
 8011652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011654:	4613      	mov	r3, r2
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	4413      	add	r3, r2
 801165a:	005b      	lsls	r3, r3, #1
 801165c:	440b      	add	r3, r1
 801165e:	3304      	adds	r3, #4
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	3301      	adds	r3, #1
 8011664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011666:	4413      	add	r3, r2
 8011668:	667b      	str	r3, [r7, #100]	; 0x64
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Right] = NodeList[i].NodeB;
 801166a:	49ac      	ldr	r1, [pc, #688]	; (801191c <GenerateMap+0x644>)
 801166c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801166e:	4613      	mov	r3, r2
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	4413      	add	r3, r2
 8011674:	005b      	lsls	r3, r3, #1
 8011676:	440b      	add	r3, r1
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	4618      	mov	r0, r3
 801167c:	49a7      	ldr	r1, [pc, #668]	; (801191c <GenerateMap+0x644>)
 801167e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011680:	4613      	mov	r3, r2
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	4413      	add	r3, r2
 8011686:	005b      	lsls	r3, r3, #1
 8011688:	440b      	add	r3, r1
 801168a:	3301      	adds	r3, #1
 801168c:	7819      	ldrb	r1, [r3, #0]
 801168e:	4aa4      	ldr	r2, [pc, #656]	; (8011920 <GenerateMap+0x648>)
 8011690:	231a      	movs	r3, #26
 8011692:	fb00 f303 	mul.w	r3, r0, r3
 8011696:	4413      	add	r3, r2
 8011698:	3302      	adds	r3, #2
 801169a:	460a      	mov	r2, r1
 801169c:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Right] = NodeList[i].Distance;
 801169e:	499f      	ldr	r1, [pc, #636]	; (801191c <GenerateMap+0x644>)
 80116a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116a2:	4613      	mov	r3, r2
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	4413      	add	r3, r2
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	440b      	add	r3, r1
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	4618      	mov	r0, r3
 80116b0:	499a      	ldr	r1, [pc, #616]	; (801191c <GenerateMap+0x644>)
 80116b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116b4:	4613      	mov	r3, r2
 80116b6:	005b      	lsls	r3, r3, #1
 80116b8:	4413      	add	r3, r2
 80116ba:	005b      	lsls	r3, r3, #1
 80116bc:	440b      	add	r3, r1
 80116be:	3304      	adds	r3, #4
 80116c0:	8819      	ldrh	r1, [r3, #0]
 80116c2:	4a97      	ldr	r2, [pc, #604]	; (8011920 <GenerateMap+0x648>)
 80116c4:	231a      	movs	r3, #26
 80116c6:	fb00 f303 	mul.w	r3, r0, r3
 80116ca:	4413      	add	r3, r2
 80116cc:	3308      	adds	r3, #8
 80116ce:	460a      	mov	r2, r1
 80116d0:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Left] = NodeList[i].NodeA;  //反向索引
 80116d2:	4992      	ldr	r1, [pc, #584]	; (801191c <GenerateMap+0x644>)
 80116d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116d6:	4613      	mov	r3, r2
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	4413      	add	r3, r2
 80116dc:	005b      	lsls	r3, r3, #1
 80116de:	440b      	add	r3, r1
 80116e0:	3301      	adds	r3, #1
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	4618      	mov	r0, r3
 80116e6:	498d      	ldr	r1, [pc, #564]	; (801191c <GenerateMap+0x644>)
 80116e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116ea:	4613      	mov	r3, r2
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	4413      	add	r3, r2
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	440b      	add	r3, r1
 80116f4:	7819      	ldrb	r1, [r3, #0]
 80116f6:	4a8a      	ldr	r2, [pc, #552]	; (8011920 <GenerateMap+0x648>)
 80116f8:	231a      	movs	r3, #26
 80116fa:	fb00 f303 	mul.w	r3, r0, r3
 80116fe:	4413      	add	r3, r2
 8011700:	3304      	adds	r3, #4
 8011702:	460a      	mov	r2, r1
 8011704:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Left] = NodeList[i].Distance;
 8011706:	4985      	ldr	r1, [pc, #532]	; (801191c <GenerateMap+0x644>)
 8011708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801170a:	4613      	mov	r3, r2
 801170c:	005b      	lsls	r3, r3, #1
 801170e:	4413      	add	r3, r2
 8011710:	005b      	lsls	r3, r3, #1
 8011712:	440b      	add	r3, r1
 8011714:	3301      	adds	r3, #1
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	4618      	mov	r0, r3
 801171a:	4980      	ldr	r1, [pc, #512]	; (801191c <GenerateMap+0x644>)
 801171c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801171e:	4613      	mov	r3, r2
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	4413      	add	r3, r2
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	440b      	add	r3, r1
 8011728:	3304      	adds	r3, #4
 801172a:	8819      	ldrh	r1, [r3, #0]
 801172c:	4a7c      	ldr	r2, [pc, #496]	; (8011920 <GenerateMap+0x648>)
 801172e:	231a      	movs	r3, #26
 8011730:	fb00 f303 	mul.w	r3, r0, r3
 8011734:	4413      	add	r3, r2
 8011736:	330c      	adds	r3, #12
 8011738:	460a      	mov	r2, r1
 801173a:	801a      	strh	r2, [r3, #0]
				break;
 801173c:	e0f3      	b.n	8011926 <GenerateMap+0x64e>
			case Direction_Top:
				y_s -= NodeList[i].Distance + 1;
 801173e:	4977      	ldr	r1, [pc, #476]	; (801191c <GenerateMap+0x644>)
 8011740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011742:	4613      	mov	r3, r2
 8011744:	005b      	lsls	r3, r3, #1
 8011746:	4413      	add	r3, r2
 8011748:	005b      	lsls	r3, r3, #1
 801174a:	440b      	add	r3, r1
 801174c:	3304      	adds	r3, #4
 801174e:	881b      	ldrh	r3, [r3, #0]
 8011750:	3301      	adds	r3, #1
 8011752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011754:	1ad3      	subs	r3, r2, r3
 8011756:	64fb      	str	r3, [r7, #76]	; 0x4c
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Top] = NodeList[i].NodeB;
 8011758:	4970      	ldr	r1, [pc, #448]	; (801191c <GenerateMap+0x644>)
 801175a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	440b      	add	r3, r1
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	4618      	mov	r0, r3
 801176a:	496c      	ldr	r1, [pc, #432]	; (801191c <GenerateMap+0x644>)
 801176c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801176e:	4613      	mov	r3, r2
 8011770:	005b      	lsls	r3, r3, #1
 8011772:	4413      	add	r3, r2
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	440b      	add	r3, r1
 8011778:	3301      	adds	r3, #1
 801177a:	7819      	ldrb	r1, [r3, #0]
 801177c:	4a68      	ldr	r2, [pc, #416]	; (8011920 <GenerateMap+0x648>)
 801177e:	231a      	movs	r3, #26
 8011780:	fb00 f303 	mul.w	r3, r0, r3
 8011784:	4413      	add	r3, r2
 8011786:	3301      	adds	r3, #1
 8011788:	460a      	mov	r2, r1
 801178a:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Top] = NodeList[i].Distance;
 801178c:	4963      	ldr	r1, [pc, #396]	; (801191c <GenerateMap+0x644>)
 801178e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011790:	4613      	mov	r3, r2
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	4413      	add	r3, r2
 8011796:	005b      	lsls	r3, r3, #1
 8011798:	440b      	add	r3, r1
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	4618      	mov	r0, r3
 801179e:	495f      	ldr	r1, [pc, #380]	; (801191c <GenerateMap+0x644>)
 80117a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117a2:	4613      	mov	r3, r2
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	4413      	add	r3, r2
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	440b      	add	r3, r1
 80117ac:	3304      	adds	r3, #4
 80117ae:	8819      	ldrh	r1, [r3, #0]
 80117b0:	4a5b      	ldr	r2, [pc, #364]	; (8011920 <GenerateMap+0x648>)
 80117b2:	231a      	movs	r3, #26
 80117b4:	fb00 f303 	mul.w	r3, r0, r3
 80117b8:	4413      	add	r3, r2
 80117ba:	3306      	adds	r3, #6
 80117bc:	460a      	mov	r2, r1
 80117be:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Bottom] = NodeList[i].NodeA;  //反向索引
 80117c0:	4956      	ldr	r1, [pc, #344]	; (801191c <GenerateMap+0x644>)
 80117c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117c4:	4613      	mov	r3, r2
 80117c6:	005b      	lsls	r3, r3, #1
 80117c8:	4413      	add	r3, r2
 80117ca:	005b      	lsls	r3, r3, #1
 80117cc:	440b      	add	r3, r1
 80117ce:	3301      	adds	r3, #1
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	4618      	mov	r0, r3
 80117d4:	4951      	ldr	r1, [pc, #324]	; (801191c <GenerateMap+0x644>)
 80117d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117d8:	4613      	mov	r3, r2
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	4413      	add	r3, r2
 80117de:	005b      	lsls	r3, r3, #1
 80117e0:	440b      	add	r3, r1
 80117e2:	7819      	ldrb	r1, [r3, #0]
 80117e4:	4a4e      	ldr	r2, [pc, #312]	; (8011920 <GenerateMap+0x648>)
 80117e6:	231a      	movs	r3, #26
 80117e8:	fb00 f303 	mul.w	r3, r0, r3
 80117ec:	4413      	add	r3, r2
 80117ee:	3303      	adds	r3, #3
 80117f0:	460a      	mov	r2, r1
 80117f2:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Bottom] = NodeList[i].Distance;
 80117f4:	4949      	ldr	r1, [pc, #292]	; (801191c <GenerateMap+0x644>)
 80117f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117f8:	4613      	mov	r3, r2
 80117fa:	005b      	lsls	r3, r3, #1
 80117fc:	4413      	add	r3, r2
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	440b      	add	r3, r1
 8011802:	3301      	adds	r3, #1
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	4618      	mov	r0, r3
 8011808:	4944      	ldr	r1, [pc, #272]	; (801191c <GenerateMap+0x644>)
 801180a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801180c:	4613      	mov	r3, r2
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	4413      	add	r3, r2
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	440b      	add	r3, r1
 8011816:	3304      	adds	r3, #4
 8011818:	8819      	ldrh	r1, [r3, #0]
 801181a:	4a41      	ldr	r2, [pc, #260]	; (8011920 <GenerateMap+0x648>)
 801181c:	231a      	movs	r3, #26
 801181e:	fb00 f303 	mul.w	r3, r0, r3
 8011822:	4413      	add	r3, r2
 8011824:	330a      	adds	r3, #10
 8011826:	460a      	mov	r2, r1
 8011828:	801a      	strh	r2, [r3, #0]
				break;
 801182a:	e07c      	b.n	8011926 <GenerateMap+0x64e>
			case Direction_Bottom:
				y_s += NodeList[i].Distance + 1;
 801182c:	493b      	ldr	r1, [pc, #236]	; (801191c <GenerateMap+0x644>)
 801182e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011830:	4613      	mov	r3, r2
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	4413      	add	r3, r2
 8011836:	005b      	lsls	r3, r3, #1
 8011838:	440b      	add	r3, r1
 801183a:	3304      	adds	r3, #4
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	3301      	adds	r3, #1
 8011840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011842:	4413      	add	r3, r2
 8011844:	64fb      	str	r3, [r7, #76]	; 0x4c
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Bottom] = NodeList[i].NodeB;
 8011846:	4935      	ldr	r1, [pc, #212]	; (801191c <GenerateMap+0x644>)
 8011848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801184a:	4613      	mov	r3, r2
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	4413      	add	r3, r2
 8011850:	005b      	lsls	r3, r3, #1
 8011852:	440b      	add	r3, r1
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	4618      	mov	r0, r3
 8011858:	4930      	ldr	r1, [pc, #192]	; (801191c <GenerateMap+0x644>)
 801185a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801185c:	4613      	mov	r3, r2
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	4413      	add	r3, r2
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	440b      	add	r3, r1
 8011866:	3301      	adds	r3, #1
 8011868:	7819      	ldrb	r1, [r3, #0]
 801186a:	4a2d      	ldr	r2, [pc, #180]	; (8011920 <GenerateMap+0x648>)
 801186c:	231a      	movs	r3, #26
 801186e:	fb00 f303 	mul.w	r3, r0, r3
 8011872:	4413      	add	r3, r2
 8011874:	3303      	adds	r3, #3
 8011876:	460a      	mov	r2, r1
 8011878:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Bottom] = NodeList[i].Distance;
 801187a:	4928      	ldr	r1, [pc, #160]	; (801191c <GenerateMap+0x644>)
 801187c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801187e:	4613      	mov	r3, r2
 8011880:	005b      	lsls	r3, r3, #1
 8011882:	4413      	add	r3, r2
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	440b      	add	r3, r1
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	4618      	mov	r0, r3
 801188c:	4923      	ldr	r1, [pc, #140]	; (801191c <GenerateMap+0x644>)
 801188e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011890:	4613      	mov	r3, r2
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	4413      	add	r3, r2
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	440b      	add	r3, r1
 801189a:	3304      	adds	r3, #4
 801189c:	8819      	ldrh	r1, [r3, #0]
 801189e:	4a20      	ldr	r2, [pc, #128]	; (8011920 <GenerateMap+0x648>)
 80118a0:	231a      	movs	r3, #26
 80118a2:	fb00 f303 	mul.w	r3, r0, r3
 80118a6:	4413      	add	r3, r2
 80118a8:	330a      	adds	r3, #10
 80118aa:	460a      	mov	r2, r1
 80118ac:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Top] = NodeList[i].NodeA;  //反向索引
 80118ae:	491b      	ldr	r1, [pc, #108]	; (801191c <GenerateMap+0x644>)
 80118b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118b2:	4613      	mov	r3, r2
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4413      	add	r3, r2
 80118b8:	005b      	lsls	r3, r3, #1
 80118ba:	440b      	add	r3, r1
 80118bc:	3301      	adds	r3, #1
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	4618      	mov	r0, r3
 80118c2:	4916      	ldr	r1, [pc, #88]	; (801191c <GenerateMap+0x644>)
 80118c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118c6:	4613      	mov	r3, r2
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	440b      	add	r3, r1
 80118d0:	7819      	ldrb	r1, [r3, #0]
 80118d2:	4a13      	ldr	r2, [pc, #76]	; (8011920 <GenerateMap+0x648>)
 80118d4:	231a      	movs	r3, #26
 80118d6:	fb00 f303 	mul.w	r3, r0, r3
 80118da:	4413      	add	r3, r2
 80118dc:	3301      	adds	r3, #1
 80118de:	460a      	mov	r2, r1
 80118e0:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Top] = NodeList[i].Distance;
 80118e2:	490e      	ldr	r1, [pc, #56]	; (801191c <GenerateMap+0x644>)
 80118e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118e6:	4613      	mov	r3, r2
 80118e8:	005b      	lsls	r3, r3, #1
 80118ea:	4413      	add	r3, r2
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	440b      	add	r3, r1
 80118f0:	3301      	adds	r3, #1
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	4618      	mov	r0, r3
 80118f6:	4909      	ldr	r1, [pc, #36]	; (801191c <GenerateMap+0x644>)
 80118f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118fa:	4613      	mov	r3, r2
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	4413      	add	r3, r2
 8011900:	005b      	lsls	r3, r3, #1
 8011902:	440b      	add	r3, r1
 8011904:	3304      	adds	r3, #4
 8011906:	8819      	ldrh	r1, [r3, #0]
 8011908:	4a05      	ldr	r2, [pc, #20]	; (8011920 <GenerateMap+0x648>)
 801190a:	231a      	movs	r3, #26
 801190c:	fb00 f303 	mul.w	r3, r0, r3
 8011910:	4413      	add	r3, r2
 8011912:	3306      	adds	r3, #6
 8011914:	460a      	mov	r2, r1
 8011916:	801a      	strh	r2, [r3, #0]
				break;
 8011918:	e005      	b.n	8011926 <GenerateMap+0x64e>
 801191a:	bf00      	nop
 801191c:	20000060 	.word	0x20000060
 8011920:	20001ad8 	.word	0x20001ad8
			default:
				break;
 8011924:	bf00      	nop

		}

		//比较起止大小
		int x_max = x_s > x ? x_s : x;
 8011926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801192a:	4293      	cmp	r3, r2
 801192c:	bfb8      	it	lt
 801192e:	4613      	movlt	r3, r2
 8011930:	62bb      	str	r3, [r7, #40]	; 0x28
		int x_min = x_s < x ? x_s : x;
 8011932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011936:	4293      	cmp	r3, r2
 8011938:	bfa8      	it	ge
 801193a:	4613      	movge	r3, r2
 801193c:	627b      	str	r3, [r7, #36]	; 0x24
		int y_max = y_s > y ? y_s : y;
 801193e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011942:	4293      	cmp	r3, r2
 8011944:	bfb8      	it	lt
 8011946:	4613      	movlt	r3, r2
 8011948:	623b      	str	r3, [r7, #32]
		int y_min = y_s < y ? y_s : y;
 801194a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801194c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801194e:	4293      	cmp	r3, r2
 8011950:	bfa8      	it	ge
 8011952:	4613      	movge	r3, r2
 8011954:	61fb      	str	r3, [r7, #28]
		//画路径
		if (x == x_s)
 8011956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801195a:	429a      	cmp	r2, r3
 801195c:	d115      	bne.n	801198a <GenerateMap+0x6b2>
		{
			for (int y_k = y_min + 1; y_k < y_max; y_k++)
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	3301      	adds	r3, #1
 8011962:	64bb      	str	r3, [r7, #72]	; 0x48
 8011964:	e00d      	b.n	8011982 <GenerateMap+0x6aa>
			{
				map[x_s][y_k] = -1;
 8011966:	08a2      	lsrs	r2, r4, #2
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801196c:	fb02 f101 	mul.w	r1, r2, r1
 8011970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011972:	440a      	add	r2, r1
 8011974:	f04f 31ff 	mov.w	r1, #4294967295
 8011978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int y_k = y_min + 1; y_k < y_max; y_k++)
 801197c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801197e:	3301      	adds	r3, #1
 8011980:	64bb      	str	r3, [r7, #72]	; 0x48
 8011982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011984:	6a3b      	ldr	r3, [r7, #32]
 8011986:	429a      	cmp	r2, r3
 8011988:	dbed      	blt.n	8011966 <GenerateMap+0x68e>
			}
		}
		if (y == y_s)
 801198a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801198c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801198e:	429a      	cmp	r2, r3
 8011990:	d115      	bne.n	80119be <GenerateMap+0x6e6>
		{
			for (int x_k = x_min + 1; x_k < x_max; x_k++)
 8011992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011994:	3301      	adds	r3, #1
 8011996:	647b      	str	r3, [r7, #68]	; 0x44
 8011998:	e00d      	b.n	80119b6 <GenerateMap+0x6de>
			{
				map[x_k][y_s] = -1;
 801199a:	08a2      	lsrs	r2, r4, #2
 801199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119a0:	fb02 f101 	mul.w	r1, r2, r1
 80119a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119a6:	440a      	add	r2, r1
 80119a8:	f04f 31ff 	mov.w	r1, #4294967295
 80119ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int x_k = x_min + 1; x_k < x_max; x_k++)
 80119b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119b2:	3301      	adds	r3, #1
 80119b4:	647b      	str	r3, [r7, #68]	; 0x44
 80119b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ba:	429a      	cmp	r2, r3
 80119bc:	dbed      	blt.n	801199a <GenerateMap+0x6c2>
			}
		}

		//画节点B
		x = x_s;
 80119be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119c0:	65bb      	str	r3, [r7, #88]	; 0x58
		y = y_s;
 80119c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119c4:	65fb      	str	r3, [r7, #92]	; 0x5c
		map[x][y] = NodeList[i].NodeB;
 80119c6:	4977      	ldr	r1, [pc, #476]	; (8011ba4 <GenerateMap+0x8cc>)
 80119c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119ca:	4613      	mov	r3, r2
 80119cc:	005b      	lsls	r3, r3, #1
 80119ce:	4413      	add	r3, r2
 80119d0:	005b      	lsls	r3, r3, #1
 80119d2:	440b      	add	r3, r1
 80119d4:	3301      	adds	r3, #1
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	08a2      	lsrs	r2, r4, #2
 80119da:	4618      	mov	r0, r3
 80119dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80119e0:	fb02 f101 	mul.w	r1, r2, r1
 80119e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80119e6:	440a      	add	r2, r1
 80119e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

		//将节点添加到列表中
		if (MapList[NodeList[i].NodeB].Index == 0)
 80119ec:	496d      	ldr	r1, [pc, #436]	; (8011ba4 <GenerateMap+0x8cc>)
 80119ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119f0:	4613      	mov	r3, r2
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	4413      	add	r3, r2
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	440b      	add	r3, r1
 80119fa:	3301      	adds	r3, #1
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	4619      	mov	r1, r3
 8011a00:	4a69      	ldr	r2, [pc, #420]	; (8011ba8 <GenerateMap+0x8d0>)
 8011a02:	231a      	movs	r3, #26
 8011a04:	fb01 f303 	mul.w	r3, r1, r3
 8011a08:	4413      	add	r3, r2
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d141      	bne.n	8011a94 <GenerateMap+0x7bc>
		{
			MapList[NodeList[i].NodeB].Index = NodeList[i].NodeB;
 8011a10:	4964      	ldr	r1, [pc, #400]	; (8011ba4 <GenerateMap+0x8cc>)
 8011a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a14:	4613      	mov	r3, r2
 8011a16:	005b      	lsls	r3, r3, #1
 8011a18:	4413      	add	r3, r2
 8011a1a:	005b      	lsls	r3, r3, #1
 8011a1c:	440b      	add	r3, r1
 8011a1e:	3301      	adds	r3, #1
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	4618      	mov	r0, r3
 8011a24:	495f      	ldr	r1, [pc, #380]	; (8011ba4 <GenerateMap+0x8cc>)
 8011a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a28:	4613      	mov	r3, r2
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	4413      	add	r3, r2
 8011a2e:	005b      	lsls	r3, r3, #1
 8011a30:	440b      	add	r3, r1
 8011a32:	3301      	adds	r3, #1
 8011a34:	7819      	ldrb	r1, [r3, #0]
 8011a36:	4a5c      	ldr	r2, [pc, #368]	; (8011ba8 <GenerateMap+0x8d0>)
 8011a38:	231a      	movs	r3, #26
 8011a3a:	fb00 f303 	mul.w	r3, r0, r3
 8011a3e:	4413      	add	r3, r2
 8011a40:	460a      	mov	r2, r1
 8011a42:	701a      	strb	r2, [r3, #0]
			MapList[NodeList[i].NodeB].Position.X = x;
 8011a44:	4957      	ldr	r1, [pc, #348]	; (8011ba4 <GenerateMap+0x8cc>)
 8011a46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a48:	4613      	mov	r3, r2
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	4413      	add	r3, r2
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	440b      	add	r3, r1
 8011a52:	3301      	adds	r3, #1
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	4618      	mov	r0, r3
 8011a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a5a:	b299      	uxth	r1, r3
 8011a5c:	4a52      	ldr	r2, [pc, #328]	; (8011ba8 <GenerateMap+0x8d0>)
 8011a5e:	231a      	movs	r3, #26
 8011a60:	fb00 f303 	mul.w	r3, r0, r3
 8011a64:	4413      	add	r3, r2
 8011a66:	330e      	adds	r3, #14
 8011a68:	460a      	mov	r2, r1
 8011a6a:	801a      	strh	r2, [r3, #0]
			MapList[NodeList[i].NodeB].Position.Y = y;
 8011a6c:	494d      	ldr	r1, [pc, #308]	; (8011ba4 <GenerateMap+0x8cc>)
 8011a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a70:	4613      	mov	r3, r2
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	4413      	add	r3, r2
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	440b      	add	r3, r1
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a82:	b299      	uxth	r1, r3
 8011a84:	4a48      	ldr	r2, [pc, #288]	; (8011ba8 <GenerateMap+0x8d0>)
 8011a86:	231a      	movs	r3, #26
 8011a88:	fb00 f303 	mul.w	r3, r0, r3
 8011a8c:	4413      	add	r3, r2
 8011a8e:	3310      	adds	r3, #16
 8011a90:	460a      	mov	r2, r1
 8011a92:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NodeRelationshipNumber; i++)
 8011a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a96:	3301      	adds	r3, #1
 8011a98:	663b      	str	r3, [r7, #96]	; 0x60
 8011a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a9c:	2b0b      	cmp	r3, #11
 8011a9e:	f77f acad 	ble.w	80113fc <GenerateMap+0x124>
		}
	}

	//将画好的地图显示在屏幕上
	for (int j = 0; j < length; j++)
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8011aa6:	e073      	b.n	8011b90 <GenerateMap+0x8b8>
	{
		for (int i = 0; i < length; i++)
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011aac:	e062      	b.n	8011b74 <GenerateMap+0x89c>
		{
			if (map[i][j] == -1)
 8011aae:	08a2      	lsrs	r2, r4, #2
 8011ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ab4:	fb02 f101 	mul.w	r1, r2, r1
 8011ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011aba:	440a      	add	r2, r1
 8011abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac4:	d12f      	bne.n	8011b26 <GenerateMap+0x84e>
			{
				if ((i - 1 < 0 || map[i - 1][j] == 0) && (i + 1 > length - 1 || map[i + 1][j] == 0))
 8011ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	dd0b      	ble.n	8011ae4 <GenerateMap+0x80c>
 8011acc:	08a2      	lsrs	r2, r4, #2
 8011ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad0:	1e59      	subs	r1, r3, #1
 8011ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad4:	fb02 f101 	mul.w	r1, r2, r1
 8011ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ada:	440a      	add	r2, r1
 8011adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d118      	bne.n	8011b16 <GenerateMap+0x83e>
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011aea:	429a      	cmp	r2, r3
 8011aec:	da0b      	bge.n	8011b06 <GenerateMap+0x82e>
 8011aee:	08a2      	lsrs	r2, r4, #2
 8011af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af2:	1c59      	adds	r1, r3, #1
 8011af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af6:	fb02 f101 	mul.w	r1, r2, r1
 8011afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011afc:	440a      	add	r2, r1
 8011afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d107      	bne.n	8011b16 <GenerateMap+0x83e>
				{
					printfX("|  ");
 8011b06:	4929      	ldr	r1, [pc, #164]	; (8011bac <GenerateMap+0x8d4>)
 8011b08:	4829      	ldr	r0, [pc, #164]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b0a:	f003 f8cf 	bl	8014cac <siprintf>
 8011b0e:	4828      	ldr	r0, [pc, #160]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b10:	f002 f964 	bl	8013ddc <printf_Base>
 8011b14:	e02b      	b.n	8011b6e <GenerateMap+0x896>
				}
				else
				{
					printfX("--");
 8011b16:	4927      	ldr	r1, [pc, #156]	; (8011bb4 <GenerateMap+0x8dc>)
 8011b18:	4825      	ldr	r0, [pc, #148]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b1a:	f003 f8c7 	bl	8014cac <siprintf>
 8011b1e:	4824      	ldr	r0, [pc, #144]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b20:	f002 f95c 	bl	8013ddc <printf_Base>
 8011b24:	e023      	b.n	8011b6e <GenerateMap+0x896>
				}

			}
			else if (map[i][j] > 0)
 8011b26:	08a2      	lsrs	r2, r4, #2
 8011b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b2c:	fb02 f101 	mul.w	r1, r2, r1
 8011b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b32:	440a      	add	r2, r1
 8011b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	dd11      	ble.n	8011b60 <GenerateMap+0x888>
			{
				printfX("%d ", map[i][j]);
 8011b3c:	08a2      	lsrs	r2, r4, #2
 8011b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b42:	fb02 f101 	mul.w	r1, r2, r1
 8011b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b48:	440a      	add	r2, r1
 8011b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	4919      	ldr	r1, [pc, #100]	; (8011bb8 <GenerateMap+0x8e0>)
 8011b52:	4817      	ldr	r0, [pc, #92]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b54:	f003 f8aa 	bl	8014cac <siprintf>
 8011b58:	4815      	ldr	r0, [pc, #84]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b5a:	f002 f93f 	bl	8013ddc <printf_Base>
 8011b5e:	e006      	b.n	8011b6e <GenerateMap+0x896>
			}
			else
			{
				printfX("   ");
 8011b60:	4916      	ldr	r1, [pc, #88]	; (8011bbc <GenerateMap+0x8e4>)
 8011b62:	4813      	ldr	r0, [pc, #76]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b64:	f003 f8a2 	bl	8014cac <siprintf>
 8011b68:	4811      	ldr	r0, [pc, #68]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b6a:	f002 f937 	bl	8013ddc <printf_Base>
		for (int i = 0; i < length; i++)
 8011b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b70:	3301      	adds	r3, #1
 8011b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	db98      	blt.n	8011aae <GenerateMap+0x7d6>
			}

		}
		printfX("\n");
 8011b7c:	4910      	ldr	r1, [pc, #64]	; (8011bc0 <GenerateMap+0x8e8>)
 8011b7e:	480c      	ldr	r0, [pc, #48]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b80:	f003 f894 	bl	8014cac <siprintf>
 8011b84:	480a      	ldr	r0, [pc, #40]	; (8011bb0 <GenerateMap+0x8d8>)
 8011b86:	f002 f929 	bl	8013ddc <printf_Base>
	for (int j = 0; j < length; j++)
 8011b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8011b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b94:	429a      	cmp	r2, r3
 8011b96:	db87      	blt.n	8011aa8 <GenerateMap+0x7d0>
 8011b98:	46b5      	mov	sp, r6
	}
}
 8011b9a:	bf00      	nop
 8011b9c:	376c      	adds	r7, #108	; 0x6c
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba4:	20000060 	.word	0x20000060
 8011ba8:	20001ad8 	.word	0x20001ad8
 8011bac:	080197bc 	.word	0x080197bc
 8011bb0:	20001308 	.word	0x20001308
 8011bb4:	080197c0 	.word	0x080197c0
 8011bb8:	080197c4 	.word	0x080197c4
 8011bbc:	080197c8 	.word	0x080197c8
 8011bc0:	08019788 	.word	0x08019788

08011bc4 <InitMap>:

//初始化地图
void InitMap()
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	af00      	add	r7, sp, #0
	printfX("初始化地图\n");
 8011bc8:	4905      	ldr	r1, [pc, #20]	; (8011be0 <InitMap+0x1c>)
 8011bca:	4806      	ldr	r0, [pc, #24]	; (8011be4 <InitMap+0x20>)
 8011bcc:	f003 f86e 	bl	8014cac <siprintf>
 8011bd0:	4804      	ldr	r0, [pc, #16]	; (8011be4 <InitMap+0x20>)
 8011bd2:	f002 f903 	bl	8013ddc <printf_Base>
	GenerateMap();
 8011bd6:	f7ff fb7f 	bl	80112d8 <GenerateMap>
}
 8011bda:	bf00      	nop
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	080197cc 	.word	0x080197cc
 8011be4:	20001308 	.word	0x20001308

08011be8 <SetDefaultValue>:

//设置缺省值
void SetDefaultValue(Direction currentDirection, uint8_t stratPoint)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	4603      	mov	r3, r0
 8011bf0:	460a      	mov	r2, r1
 8011bf2:	71fb      	strb	r3, [r7, #7]
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	71bb      	strb	r3, [r7, #6]
	CurrentDirection = currentDirection;
 8011bf8:	4a05      	ldr	r2, [pc, #20]	; (8011c10 <SetDefaultValue+0x28>)
 8011bfa:	79fb      	ldrb	r3, [r7, #7]
 8011bfc:	7013      	strb	r3, [r2, #0]
	StartPoint = stratPoint;
 8011bfe:	4a05      	ldr	r2, [pc, #20]	; (8011c14 <SetDefaultValue+0x2c>)
 8011c00:	79bb      	ldrb	r3, [r7, #6]
 8011c02:	7013      	strb	r3, [r2, #0]
}
 8011c04:	bf00      	nop
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr
 8011c10:	20001c2c 	.word	0x20001c2c
 8011c14:	200000a8 	.word	0x200000a8

08011c18 <StartWayFindingAndRuning>:

//开始寻路并向终点运动
void StartWayFindingAndRuning(uint8_t end)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	4603      	mov	r3, r0
 8011c20:	71fb      	strb	r3, [r7, #7]
	//查找终点
	MapNode *EndNode = WayFinding(end);
 8011c22:	79fb      	ldrb	r3, [r7, #7]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7ff f8ed 	bl	8010e04 <WayFinding>
 8011c2a:	60f8      	str	r0, [r7, #12]
	uint8_t layer = RoadToCommand(EndNode, 0);
 8011c2c:	2100      	movs	r1, #0
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f7ff fa30 	bl	8011094 <RoadToCommand>
 8011c34:	4603      	mov	r3, r0
 8011c36:	72fb      	strb	r3, [r7, #11]

	if (layer == 0)
 8011c38:	7afb      	ldrb	r3, [r7, #11]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d107      	bne.n	8011c4e <StartWayFindingAndRuning+0x36>
	{
		printfX("起点与终点重合\n\r");
 8011c3e:	490a      	ldr	r1, [pc, #40]	; (8011c68 <StartWayFindingAndRuning+0x50>)
 8011c40:	480a      	ldr	r0, [pc, #40]	; (8011c6c <StartWayFindingAndRuning+0x54>)
 8011c42:	f003 f833 	bl	8014cac <siprintf>
 8011c46:	4809      	ldr	r0, [pc, #36]	; (8011c6c <StartWayFindingAndRuning+0x54>)
 8011c48:	f002 f8c8 	bl	8013ddc <printf_Base>
		return;
 8011c4c:	e009      	b.n	8011c62 <StartWayFindingAndRuning+0x4a>
	}

	//清空状态
	Status_Control_Clear();
 8011c4e:	f000 f811 	bl	8011c74 <Status_Control_Clear>
	//开始运动
	Status_Control_Start(Command_Mode_OneTime, RuningSpeed);
 8011c52:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8011c56:	2001      	movs	r0, #1
 8011c58:	f000 f834 	bl	8011cc4 <Status_Control_Start>
	
	//更改当前位置 假定到达
	StartPoint = end;
 8011c5c:	4a04      	ldr	r2, [pc, #16]	; (8011c70 <StartWayFindingAndRuning+0x58>)
 8011c5e:	79fb      	ldrb	r3, [r7, #7]
 8011c60:	7013      	strb	r3, [r2, #0]
}
 8011c62:	3710      	adds	r7, #16
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	080197e0 	.word	0x080197e0
 8011c6c:	20001308 	.word	0x20001308
 8011c70:	200000a8 	.word	0x200000a8

08011c74 <Status_Control_Clear>:

//上一个偏航角
float Yaw_Last;

void Status_Control_Clear()
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	af00      	add	r7, sp, #0
	SetCarSpeed(0, 0, 0);
 8011c78:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8011cac <Status_Control_Clear+0x38>
 8011c7c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8011cac <Status_Control_Clear+0x38>
 8011c80:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011cac <Status_Control_Clear+0x38>
 8011c84:	f001 f830 	bl	8012ce8 <SetCarSpeed>
	StatusControl_RuningFlag = 0;
 8011c88:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <Status_Control_Clear+0x3c>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	701a      	strb	r2, [r3, #0]
	Command_Duration_Flag = 0;
 8011c8e:	4b09      	ldr	r3, [pc, #36]	; (8011cb4 <Status_Control_Clear+0x40>)
 8011c90:	2200      	movs	r2, #0
 8011c92:	701a      	strb	r2, [r3, #0]
	Command_Index = -1;
 8011c94:	4b08      	ldr	r3, [pc, #32]	; (8011cb8 <Status_Control_Clear+0x44>)
 8011c96:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9a:	601a      	str	r2, [r3, #0]
	Last_RunCommand_Time = 0;
 8011c9c:	4b07      	ldr	r3, [pc, #28]	; (8011cbc <Status_Control_Clear+0x48>)
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	601a      	str	r2, [r3, #0]
	AbnormaldState = DriveState_Normal;
 8011ca2:	4b07      	ldr	r3, [pc, #28]	; (8011cc0 <Status_Control_Clear+0x4c>)
 8011ca4:	2203      	movs	r2, #3
 8011ca6:	701a      	strb	r2, [r3, #0]
}
 8011ca8:	bf00      	nop
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	00000000 	.word	0x00000000
 8011cb0:	20001c34 	.word	0x20001c34
 8011cb4:	20001c35 	.word	0x20001c35
 8011cb8:	2000019c 	.word	0x2000019c
 8011cbc:	20001c30 	.word	0x20001c30
 8011cc0:	20001c3d 	.word	0x20001c3d

08011cc4 <Status_Control_Start>:

void Status_Control_Start(Command_Mode mode, float default_Speed)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	ed87 0a00 	vstr	s0, [r7]
 8011cd0:	71fb      	strb	r3, [r7, #7]
	StatusControl_RuningFlag = 1;
 8011cd2:	4b0c      	ldr	r3, [pc, #48]	; (8011d04 <Status_Control_Start+0x40>)
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	701a      	strb	r2, [r3, #0]
	Default_Speed = default_Speed == 0 ? Motor_Expected_Axis_Speeds[Axis_X] : default_Speed;
 8011cd8:	edd7 7a00 	vldr	s15, [r7]
 8011cdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	d102      	bne.n	8011cec <Status_Control_Start+0x28>
 8011ce6:	4b08      	ldr	r3, [pc, #32]	; (8011d08 <Status_Control_Start+0x44>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	e000      	b.n	8011cee <Status_Control_Start+0x2a>
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	4a07      	ldr	r2, [pc, #28]	; (8011d0c <Status_Control_Start+0x48>)
 8011cf0:	6013      	str	r3, [r2, #0]
	Mode = mode;
 8011cf2:	4a07      	ldr	r2, [pc, #28]	; (8011d10 <Status_Control_Start+0x4c>)
 8011cf4:	79fb      	ldrb	r3, [r7, #7]
 8011cf6:	7013      	strb	r3, [r2, #0]
}
 8011cf8:	bf00      	nop
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	20001c34 	.word	0x20001c34
 8011d08:	20001c68 	.word	0x20001c68
 8011d0c:	20001c38 	.word	0x20001c38
 8011d10:	20001c3e 	.word	0x20001c3e
 8011d14:	00000000 	.word	0x00000000

08011d18 <CorrectCarDirection>:

//根据外设修正小车方向
void CorrectCarDirection(DriveState state)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b086      	sub	sp, #24
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	4603      	mov	r3, r0
 8011d20:	71fb      	strb	r3, [r7, #7]
	//判断是否停止
	if (Motor_Expected_Axis_Speeds[Axis_X] == 0 && Motor_Expected_Axis_Speeds[Axis_Z] == 0)
 8011d22:	4b4b      	ldr	r3, [pc, #300]	; (8011e50 <CorrectCarDirection+0x138>)
 8011d24:	edd3 7a00 	vldr	s15, [r3]
 8011d28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d30:	d107      	bne.n	8011d42 <CorrectCarDirection+0x2a>
 8011d32:	4b47      	ldr	r3, [pc, #284]	; (8011e50 <CorrectCarDirection+0x138>)
 8011d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8011d38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d40:	d07e      	beq.n	8011e40 <CorrectCarDirection+0x128>
	{
		return;
	}

	//return;
	float k = StepLength + 0.005 * fabs(Motor_Expected_Axis_Speeds[Axis_X]);
 8011d42:	4b43      	ldr	r3, [pc, #268]	; (8011e50 <CorrectCarDirection+0x138>)
 8011d44:	edd3 7a00 	vldr	s15, [r3]
 8011d48:	eef0 7ae7 	vabs.f32	s15, s15
 8011d4c:	ee17 0a90 	vmov	r0, s15
 8011d50:	f7ee fbfa 	bl	8000548 <__aeabi_f2d>
 8011d54:	a33c      	add	r3, pc, #240	; (adr r3, 8011e48 <CorrectCarDirection+0x130>)
 8011d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5a:	f7ee fc4d 	bl	80005f8 <__aeabi_dmul>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	460b      	mov	r3, r1
 8011d62:	4610      	mov	r0, r2
 8011d64:	4619      	mov	r1, r3
 8011d66:	f04f 0200 	mov.w	r2, #0
 8011d6a:	4b3a      	ldr	r3, [pc, #232]	; (8011e54 <CorrectCarDirection+0x13c>)
 8011d6c:	f7ee fa8e 	bl	800028c <__adddf3>
 8011d70:	4602      	mov	r2, r0
 8011d72:	460b      	mov	r3, r1
 8011d74:	4610      	mov	r0, r2
 8011d76:	4619      	mov	r1, r3
 8011d78:	f7ee ff36 	bl	8000be8 <__aeabi_d2f>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	613b      	str	r3, [r7, #16]

	//向另一方向转弯时清空转弯角
	float x = 0.0;
 8011d80:	f04f 0300 	mov.w	r3, #0
 8011d84:	60fb      	str	r3, [r7, #12]
	float y = 0.0;
 8011d86:	f04f 0300 	mov.w	r3, #0
 8011d8a:	60bb      	str	r3, [r7, #8]
	float z = 0.0;
 8011d8c:	f04f 0300 	mov.w	r3, #0
 8011d90:	617b      	str	r3, [r7, #20]

	switch (state)
 8011d92:	79fb      	ldrb	r3, [r7, #7]
 8011d94:	3b01      	subs	r3, #1
 8011d96:	2b04      	cmp	r3, #4
 8011d98:	d82a      	bhi.n	8011df0 <CorrectCarDirection+0xd8>
 8011d9a:	a201      	add	r2, pc, #4	; (adr r2, 8011da0 <CorrectCarDirection+0x88>)
 8011d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011da0:	08011db5 	.word	0x08011db5
 8011da4:	08011dc3 	.word	0x08011dc3
 8011da8:	08011de9 	.word	0x08011de9
 8011dac:	08011dc9 	.word	0x08011dc9
 8011db0:	08011ddb 	.word	0x08011ddb
	{
		case DriveState_Left:
			z = -k;
 8011db4:	edd7 7a04 	vldr	s15, [r7, #16]
 8011db8:	eef1 7a67 	vneg.f32	s15, s15
 8011dbc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8011dc0:	e017      	b.n	8011df2 <CorrectCarDirection+0xda>
		case DriveState_Right:
			z = k;
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	617b      	str	r3, [r7, #20]
			break;
 8011dc6:	e014      	b.n	8011df2 <CorrectCarDirection+0xda>
		case DriveState_Sharp_Left:
			z = -k * 2;
 8011dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8011dcc:	eef1 7a67 	vneg.f32	s15, s15
 8011dd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011dd4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8011dd8:	e00b      	b.n	8011df2 <CorrectCarDirection+0xda>
		case DriveState_Sharp_Right:
			z = k * 2;
 8011dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8011dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011de2:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8011de6:	e004      	b.n	8011df2 <CorrectCarDirection+0xda>
		case DriveState_Normal:
			Motor_Expected_Axis_Speeds[Axis_Z] = 0;
 8011de8:	4b19      	ldr	r3, [pc, #100]	; (8011e50 <CorrectCarDirection+0x138>)
 8011dea:	f04f 0200 	mov.w	r2, #0
 8011dee:	609a      	str	r2, [r3, #8]
		default:
			break;
 8011df0:	bf00      	nop
	}

	if (Motor_Expected_Axis_Speeds[Axis_X] < 0)
 8011df2:	4b17      	ldr	r3, [pc, #92]	; (8011e50 <CorrectCarDirection+0x138>)
 8011df4:	edd3 7a00 	vldr	s15, [r3]
 8011df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e00:	d505      	bpl.n	8011e0e <CorrectCarDirection+0xf6>
	{
		z = -z;
 8011e02:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e06:	eef1 7a67 	vneg.f32	s15, s15
 8011e0a:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (Motor_Expected_Axis_Speeds[Axis_Z] * z < 0)
 8011e0e:	4b10      	ldr	r3, [pc, #64]	; (8011e50 <CorrectCarDirection+0x138>)
 8011e10:	ed93 7a02 	vldr	s14, [r3, #8]
 8011e14:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e24:	d503      	bpl.n	8011e2e <CorrectCarDirection+0x116>
	{
		Motor_Expected_Axis_Speeds[Axis_Z] = 0;
 8011e26:	4b0a      	ldr	r3, [pc, #40]	; (8011e50 <CorrectCarDirection+0x138>)
 8011e28:	f04f 0200 	mov.w	r2, #0
 8011e2c:	609a      	str	r2, [r3, #8]
	}

	AddCarSpeed(x, y, z);
 8011e2e:	ed97 1a05 	vldr	s2, [r7, #20]
 8011e32:	edd7 0a02 	vldr	s1, [r7, #8]
 8011e36:	ed97 0a03 	vldr	s0, [r7, #12]
 8011e3a:	f000 ff25 	bl	8012c88 <AddCarSpeed>
 8011e3e:	e000      	b.n	8011e42 <CorrectCarDirection+0x12a>
		return;
 8011e40:	bf00      	nop
}
 8011e42:	3718      	adds	r7, #24
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	47ae147b 	.word	0x47ae147b
 8011e4c:	3f747ae1 	.word	0x3f747ae1
 8011e50:	20001c68 	.word	0x20001c68
 8011e54:	3fd00000 	.word	0x3fd00000

08011e58 <CalculateAnglesDiff>:

float CalculateAnglesDiff(float last, float current)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b087      	sub	sp, #28
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8011e62:	edc7 0a00 	vstr	s1, [r7]
	float max = -180;
 8011e66:	4b23      	ldr	r3, [pc, #140]	; (8011ef4 <CalculateAnglesDiff+0x9c>)
 8011e68:	617b      	str	r3, [r7, #20]
	float min = 180;
 8011e6a:	4b23      	ldr	r3, [pc, #140]	; (8011ef8 <CalculateAnglesDiff+0xa0>)
 8011e6c:	613b      	str	r3, [r7, #16]

	if (last > current)
 8011e6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011e72:	edd7 7a00 	vldr	s15, [r7]
 8011e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e7e:	dd04      	ble.n	8011e8a <CalculateAnglesDiff+0x32>
	{
		max = last;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	617b      	str	r3, [r7, #20]
		min = current;
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	613b      	str	r3, [r7, #16]
 8011e88:	e003      	b.n	8011e92 <CalculateAnglesDiff+0x3a>
	}
	else
	{
		max = current;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	617b      	str	r3, [r7, #20]
		min = last;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	613b      	str	r3, [r7, #16]
	}

	float re1 = 180 - max + min + 180;
 8011e92:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8011efc <CalculateAnglesDiff+0xa4>
 8011e96:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ea6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8011efc <CalculateAnglesDiff+0xa4>
 8011eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011eae:	edc7 7a03 	vstr	s15, [r7, #12]
	float re2 = fabs(Yaw_Last - YawAngle);
 8011eb2:	4b13      	ldr	r3, [pc, #76]	; (8011f00 <CalculateAnglesDiff+0xa8>)
 8011eb4:	ed93 7a00 	vldr	s14, [r3]
 8011eb8:	4b12      	ldr	r3, [pc, #72]	; (8011f04 <CalculateAnglesDiff+0xac>)
 8011eba:	edd3 7a00 	vldr	s15, [r3]
 8011ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ec2:	eef0 7ae7 	vabs.f32	s15, s15
 8011ec6:	edc7 7a02 	vstr	s15, [r7, #8]

	return re1 > re2 ? re2 : re1;
 8011eca:	ed97 7a03 	vldr	s14, [r7, #12]
 8011ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8011ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	dd01      	ble.n	8011ee0 <CalculateAnglesDiff+0x88>
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	e000      	b.n	8011ee2 <CalculateAnglesDiff+0x8a>
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	ee07 3a90 	vmov	s15, r3

}
 8011ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8011eea:	371c      	adds	r7, #28
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr
 8011ef4:	c3340000 	.word	0xc3340000
 8011ef8:	43340000 	.word	0x43340000
 8011efc:	43340000 	.word	0x43340000
 8011f00:	20001c40 	.word	0x20001c40
 8011f04:	20001304 	.word	0x20001304

08011f08 <UpdateCommand>:

void UpdateCommand()
{
 8011f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011f0c:	b082      	sub	sp, #8
 8011f0e:	af00      	add	r7, sp, #0
	//判断是否正在运行
	if (StatusControl_RuningFlag == 0)
 8011f10:	4bb6      	ldr	r3, [pc, #728]	; (80121ec <UpdateCommand+0x2e4>)
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 81b3 	beq.w	8012280 <UpdateCommand+0x378>
	{
		return;
	}

	//判断是否在上个指令的持续时间
	if (Command_Index >= 0 && Commands[Command_Index].RunCommand_Time > 0 && uwTick - Last_RunCommand_Time < Commands[Command_Index].Duration)
 8011f1a:	4bb5      	ldr	r3, [pc, #724]	; (80121f0 <UpdateCommand+0x2e8>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	db20      	blt.n	8011f64 <UpdateCommand+0x5c>
 8011f22:	4bb3      	ldr	r3, [pc, #716]	; (80121f0 <UpdateCommand+0x2e8>)
 8011f24:	681a      	ldr	r2, [r3, #0]
 8011f26:	49b3      	ldr	r1, [pc, #716]	; (80121f4 <UpdateCommand+0x2ec>)
 8011f28:	4613      	mov	r3, r2
 8011f2a:	005b      	lsls	r3, r3, #1
 8011f2c:	4413      	add	r3, r2
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	440b      	add	r3, r1
 8011f32:	3308      	adds	r3, #8
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d014      	beq.n	8011f64 <UpdateCommand+0x5c>
 8011f3a:	4baf      	ldr	r3, [pc, #700]	; (80121f8 <UpdateCommand+0x2f0>)
 8011f3c:	681a      	ldr	r2, [r3, #0]
 8011f3e:	4baf      	ldr	r3, [pc, #700]	; (80121fc <UpdateCommand+0x2f4>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	1ad1      	subs	r1, r2, r3
 8011f44:	4baa      	ldr	r3, [pc, #680]	; (80121f0 <UpdateCommand+0x2e8>)
 8011f46:	681a      	ldr	r2, [r3, #0]
 8011f48:	48aa      	ldr	r0, [pc, #680]	; (80121f4 <UpdateCommand+0x2ec>)
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	4413      	add	r3, r2
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	4403      	add	r3, r0
 8011f54:	3304      	adds	r3, #4
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4299      	cmp	r1, r3
 8011f5a:	d203      	bcs.n	8011f64 <UpdateCommand+0x5c>
	{
		Command_Duration_Flag = 1;
 8011f5c:	4ba8      	ldr	r3, [pc, #672]	; (8012200 <UpdateCommand+0x2f8>)
 8011f5e:	2201      	movs	r2, #1
 8011f60:	701a      	strb	r2, [r3, #0]
		return;
 8011f62:	e192      	b.n	801228a <UpdateCommand+0x382>
	}

	//是否第一次结束指令持续作用
	if (Command_Duration_Flag == 1)
 8011f64:	4ba6      	ldr	r3, [pc, #664]	; (8012200 <UpdateCommand+0x2f8>)
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d16b      	bne.n	8012044 <UpdateCommand+0x13c>
	{
		//是否结束上一指令
		uint8_t flag = 0;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	71fb      	strb	r3, [r7, #7]
		switch (Commands[Command_Index].Type)
 8011f70:	4b9f      	ldr	r3, [pc, #636]	; (80121f0 <UpdateCommand+0x2e8>)
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	499f      	ldr	r1, [pc, #636]	; (80121f4 <UpdateCommand+0x2ec>)
 8011f76:	4613      	mov	r3, r2
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	440b      	add	r3, r1
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	2b02      	cmp	r3, #2
 8011f84:	dc02      	bgt.n	8011f8c <UpdateCommand+0x84>
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	dc03      	bgt.n	8011f92 <UpdateCommand+0x8a>
 8011f8a:	e038      	b.n	8011ffe <UpdateCommand+0xf6>
 8011f8c:	2b04      	cmp	r3, #4
 8011f8e:	d01b      	beq.n	8011fc8 <UpdateCommand+0xc0>
 8011f90:	e035      	b.n	8011ffe <UpdateCommand+0xf6>
		{
			case Command_Left:
			case Command_Right:
				if (CalculateAnglesDiff(Yaw_Last, YawAngle) > 85)
 8011f92:	4b9c      	ldr	r3, [pc, #624]	; (8012204 <UpdateCommand+0x2fc>)
 8011f94:	edd3 7a00 	vldr	s15, [r3]
 8011f98:	4b9b      	ldr	r3, [pc, #620]	; (8012208 <UpdateCommand+0x300>)
 8011f9a:	ed93 7a00 	vldr	s14, [r3]
 8011f9e:	eef0 0a47 	vmov.f32	s1, s14
 8011fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8011fa6:	f7ff ff57 	bl	8011e58 <CalculateAnglesDiff>
 8011faa:	eef0 7a40 	vmov.f32	s15, s0
 8011fae:	ed9f 7a97 	vldr	s14, [pc, #604]	; 801220c <UpdateCommand+0x304>
 8011fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fba:	dd02      	ble.n	8011fc2 <UpdateCommand+0xba>
				{
					flag = 1;
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					flag = 0;
				}
				break;
 8011fc0:	e027      	b.n	8012012 <UpdateCommand+0x10a>
					flag = 0;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	71fb      	strb	r3, [r7, #7]
				break;
 8011fc6:	e024      	b.n	8012012 <UpdateCommand+0x10a>
			case Command_Rotation:
				if (CalculateAnglesDiff(Yaw_Last, YawAngle) > 170)
 8011fc8:	4b8e      	ldr	r3, [pc, #568]	; (8012204 <UpdateCommand+0x2fc>)
 8011fca:	edd3 7a00 	vldr	s15, [r3]
 8011fce:	4b8e      	ldr	r3, [pc, #568]	; (8012208 <UpdateCommand+0x300>)
 8011fd0:	ed93 7a00 	vldr	s14, [r3]
 8011fd4:	eef0 0a47 	vmov.f32	s1, s14
 8011fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8011fdc:	f7ff ff3c 	bl	8011e58 <CalculateAnglesDiff>
 8011fe0:	eef0 7a40 	vmov.f32	s15, s0
 8011fe4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012210 <UpdateCommand+0x308>
 8011fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff0:	dd02      	ble.n	8011ff8 <UpdateCommand+0xf0>
				{
					flag = 1;
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					flag = 0;
				}
				break;
 8011ff6:	e00c      	b.n	8012012 <UpdateCommand+0x10a>
					flag = 0;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	71fb      	strb	r3, [r7, #7]
				break;
 8011ffc:	e009      	b.n	8012012 <UpdateCommand+0x10a>
			default:
				if (RealState == DriveState_Normal)
 8011ffe:	4b85      	ldr	r3, [pc, #532]	; (8012214 <UpdateCommand+0x30c>)
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	2b03      	cmp	r3, #3
 8012004:	d102      	bne.n	801200c <UpdateCommand+0x104>
				{
					flag = 1;
 8012006:	2301      	movs	r3, #1
 8012008:	71fb      	strb	r3, [r7, #7]
				else
				{

					flag = 0;
				}
				break;
 801200a:	e001      	b.n	8012010 <UpdateCommand+0x108>
					flag = 0;
 801200c:	2300      	movs	r3, #0
 801200e:	71fb      	strb	r3, [r7, #7]
				break;
 8012010:	bf00      	nop
		}
		if (flag == 1)
 8012012:	79fb      	ldrb	r3, [r7, #7]
 8012014:	2b01      	cmp	r3, #1
 8012016:	d111      	bne.n	801203c <UpdateCommand+0x134>
		{
			SetCarSpeed(Default_Speed, 0, 0);
 8012018:	4b7f      	ldr	r3, [pc, #508]	; (8012218 <UpdateCommand+0x310>)
 801201a:	edd3 7a00 	vldr	s15, [r3]
 801201e:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 801221c <UpdateCommand+0x314>
 8012022:	eddf 0a7e 	vldr	s1, [pc, #504]	; 801221c <UpdateCommand+0x314>
 8012026:	eeb0 0a67 	vmov.f32	s0, s15
 801202a:	f000 fe5d 	bl	8012ce8 <SetCarSpeed>
			Command_Duration_Flag = 0;
 801202e:	4b74      	ldr	r3, [pc, #464]	; (8012200 <UpdateCommand+0x2f8>)
 8012030:	2200      	movs	r2, #0
 8012032:	701a      	strb	r2, [r3, #0]

			AbnormaldState = DriveState_Normal;
 8012034:	4b7a      	ldr	r3, [pc, #488]	; (8012220 <UpdateCommand+0x318>)
 8012036:	2203      	movs	r2, #3
 8012038:	701a      	strb	r2, [r3, #0]
 801203a:	e003      	b.n	8012044 <UpdateCommand+0x13c>

		}
		else
		{
			Command_Duration_Flag = 1;
 801203c:	4b70      	ldr	r3, [pc, #448]	; (8012200 <UpdateCommand+0x2f8>)
 801203e:	2201      	movs	r2, #1
 8012040:	701a      	strb	r2, [r3, #0]
			//放弃这一回合
			return;
 8012042:	e122      	b.n	801228a <UpdateCommand+0x382>
		}

	}

	//判断是否在冷却时间
	if (uwTick - Last_RunCommand_Time < Command_CooldownTime * (100.0 - Motor_Expected_Axis_Speeds[Axis_X]) + (Command_Index >= 0 ? Commands[Command_Index].Duration : 0))
 8012044:	4b6c      	ldr	r3, [pc, #432]	; (80121f8 <UpdateCommand+0x2f0>)
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	4b6c      	ldr	r3, [pc, #432]	; (80121fc <UpdateCommand+0x2f4>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	4618      	mov	r0, r3
 8012050:	f7ee fa58 	bl	8000504 <__aeabi_ui2d>
 8012054:	4604      	mov	r4, r0
 8012056:	460d      	mov	r5, r1
 8012058:	4b72      	ldr	r3, [pc, #456]	; (8012224 <UpdateCommand+0x31c>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4618      	mov	r0, r3
 801205e:	f7ee fa73 	bl	8000548 <__aeabi_f2d>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	f04f 0000 	mov.w	r0, #0
 801206a:	496f      	ldr	r1, [pc, #444]	; (8012228 <UpdateCommand+0x320>)
 801206c:	f7ee f90c 	bl	8000288 <__aeabi_dsub>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4610      	mov	r0, r2
 8012076:	4619      	mov	r1, r3
 8012078:	f04f 0200 	mov.w	r2, #0
 801207c:	4b6b      	ldr	r3, [pc, #428]	; (801222c <UpdateCommand+0x324>)
 801207e:	f7ee fabb 	bl	80005f8 <__aeabi_dmul>
 8012082:	4602      	mov	r2, r0
 8012084:	460b      	mov	r3, r1
 8012086:	4690      	mov	r8, r2
 8012088:	4699      	mov	r9, r3
 801208a:	4b59      	ldr	r3, [pc, #356]	; (80121f0 <UpdateCommand+0x2e8>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	db0d      	blt.n	80120ae <UpdateCommand+0x1a6>
 8012092:	4b57      	ldr	r3, [pc, #348]	; (80121f0 <UpdateCommand+0x2e8>)
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	4957      	ldr	r1, [pc, #348]	; (80121f4 <UpdateCommand+0x2ec>)
 8012098:	4613      	mov	r3, r2
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	4413      	add	r3, r2
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	440b      	add	r3, r1
 80120a2:	3304      	adds	r3, #4
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7ee fa2c 	bl	8000504 <__aeabi_ui2d>
 80120ac:	e003      	b.n	80120b6 <UpdateCommand+0x1ae>
 80120ae:	f04f 0000 	mov.w	r0, #0
 80120b2:	f04f 0100 	mov.w	r1, #0
 80120b6:	4642      	mov	r2, r8
 80120b8:	464b      	mov	r3, r9
 80120ba:	f7ee f8e7 	bl	800028c <__adddf3>
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4620      	mov	r0, r4
 80120c4:	4629      	mov	r1, r5
 80120c6:	f7ee fd09 	bl	8000adc <__aeabi_dcmplt>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f040 80d9 	bne.w	8012284 <UpdateCommand+0x37c>
	{
		return;
	}

	//判断是否到达下一指令触发条件
	if (DriveState_Intersection != RealState && DriveState_Turn_Left != RealState && DriveState_Turn_Right != RealState)
 80120d2:	4b50      	ldr	r3, [pc, #320]	; (8012214 <UpdateCommand+0x30c>)
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d01f      	beq.n	801211a <UpdateCommand+0x212>
 80120da:	4b4e      	ldr	r3, [pc, #312]	; (8012214 <UpdateCommand+0x30c>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	2b07      	cmp	r3, #7
 80120e0:	d01b      	beq.n	801211a <UpdateCommand+0x212>
 80120e2:	4b4c      	ldr	r3, [pc, #304]	; (8012214 <UpdateCommand+0x30c>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	2b08      	cmp	r3, #8
 80120e8:	d017      	beq.n	801211a <UpdateCommand+0x212>
	{
		if (Motor_Expected_Axis_Speeds[Axis_X] == 0 && Motor_Expected_Axis_Speeds[Axis_Z] == 0 && Command_Index == -1)
 80120ea:	4b4e      	ldr	r3, [pc, #312]	; (8012224 <UpdateCommand+0x31c>)
 80120ec:	edd3 7a00 	vldr	s15, [r3]
 80120f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80120f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f8:	f040 80c6 	bne.w	8012288 <UpdateCommand+0x380>
 80120fc:	4b49      	ldr	r3, [pc, #292]	; (8012224 <UpdateCommand+0x31c>)
 80120fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8012102:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210a:	f040 80bd 	bne.w	8012288 <UpdateCommand+0x380>
 801210e:	4b38      	ldr	r3, [pc, #224]	; (80121f0 <UpdateCommand+0x2e8>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012116:	f040 80b7 	bne.w	8012288 <UpdateCommand+0x380>
			return;
		}

	}

	int index = Command_Index + 1;
 801211a:	4b35      	ldr	r3, [pc, #212]	; (80121f0 <UpdateCommand+0x2e8>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	3301      	adds	r3, #1
 8012120:	603b      	str	r3, [r7, #0]
	if (index > Command_Number - 1)
 8012122:	4b43      	ldr	r3, [pc, #268]	; (8012230 <UpdateCommand+0x328>)
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	461a      	mov	r2, r3
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	4293      	cmp	r3, r2
 801212c:	db08      	blt.n	8012140 <UpdateCommand+0x238>
	{
		//是否为循环模式
		if (Mode == Command_Mode_OneTime)
 801212e:	4b41      	ldr	r3, [pc, #260]	; (8012234 <UpdateCommand+0x32c>)
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d102      	bne.n	801213c <UpdateCommand+0x234>
		{
			Status_Control_Clear();
 8012136:	f7ff fd9d 	bl	8011c74 <Status_Control_Clear>

			return;
 801213a:	e0a6      	b.n	801228a <UpdateCommand+0x382>
		}
		else
		{
			index = 0;
 801213c:	2300      	movs	r3, #0
 801213e:	603b      	str	r3, [r7, #0]
		}
	}

	Command_Index = index;
 8012140:	4a2b      	ldr	r2, [pc, #172]	; (80121f0 <UpdateCommand+0x2e8>)
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	6013      	str	r3, [r2, #0]

	//执行触发后操作
	switch (Commands[Command_Index].Type)
 8012146:	4b2a      	ldr	r3, [pc, #168]	; (80121f0 <UpdateCommand+0x2e8>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	492a      	ldr	r1, [pc, #168]	; (80121f4 <UpdateCommand+0x2ec>)
 801214c:	4613      	mov	r3, r2
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	4413      	add	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	440b      	add	r3, r1
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	2b04      	cmp	r3, #4
 801215a:	d87c      	bhi.n	8012256 <UpdateCommand+0x34e>
 801215c:	a201      	add	r2, pc, #4	; (adr r2, 8012164 <UpdateCommand+0x25c>)
 801215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012162:	bf00      	nop
 8012164:	08012179 	.word	0x08012179
 8012168:	08012191 	.word	0x08012191
 801216c:	080121bd 	.word	0x080121bd
 8012170:	08012257 	.word	0x08012257
 8012174:	08012239 	.word	0x08012239
	{
		case Command_Forward:
			SetCarSpeed(Default_Speed, 0, 0);
 8012178:	4b27      	ldr	r3, [pc, #156]	; (8012218 <UpdateCommand+0x310>)
 801217a:	edd3 7a00 	vldr	s15, [r3]
 801217e:	ed9f 1a27 	vldr	s2, [pc, #156]	; 801221c <UpdateCommand+0x314>
 8012182:	eddf 0a26 	vldr	s1, [pc, #152]	; 801221c <UpdateCommand+0x314>
 8012186:	eeb0 0a67 	vmov.f32	s0, s15
 801218a:	f000 fdad 	bl	8012ce8 <SetCarSpeed>
			break;
 801218e:	e062      	b.n	8012256 <UpdateCommand+0x34e>
		case Command_Left:
			SetCarSpeed(Default_Speed * 0.5, 0, Default_Speed);
 8012190:	4b21      	ldr	r3, [pc, #132]	; (8012218 <UpdateCommand+0x310>)
 8012192:	edd3 7a00 	vldr	s15, [r3]
 8012196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801219a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801219e:	4b1e      	ldr	r3, [pc, #120]	; (8012218 <UpdateCommand+0x310>)
 80121a0:	ed93 7a00 	vldr	s14, [r3]
 80121a4:	eeb0 1a47 	vmov.f32	s2, s14
 80121a8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801221c <UpdateCommand+0x314>
 80121ac:	eeb0 0a67 	vmov.f32	s0, s15
 80121b0:	f000 fd9a 	bl	8012ce8 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Right;
 80121b4:	4b1a      	ldr	r3, [pc, #104]	; (8012220 <UpdateCommand+0x318>)
 80121b6:	2205      	movs	r2, #5
 80121b8:	701a      	strb	r2, [r3, #0]
			break;
 80121ba:	e04c      	b.n	8012256 <UpdateCommand+0x34e>
		case Command_Right:
			SetCarSpeed(Default_Speed * 0.5, 0, -Default_Speed);
 80121bc:	4b16      	ldr	r3, [pc, #88]	; (8012218 <UpdateCommand+0x310>)
 80121be:	edd3 7a00 	vldr	s15, [r3]
 80121c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80121c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80121ca:	4b13      	ldr	r3, [pc, #76]	; (8012218 <UpdateCommand+0x310>)
 80121cc:	edd3 7a00 	vldr	s15, [r3]
 80121d0:	eef1 7a67 	vneg.f32	s15, s15
 80121d4:	eeb0 1a67 	vmov.f32	s2, s15
 80121d8:	eddf 0a10 	vldr	s1, [pc, #64]	; 801221c <UpdateCommand+0x314>
 80121dc:	eeb0 0a47 	vmov.f32	s0, s14
 80121e0:	f000 fd82 	bl	8012ce8 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Left;
 80121e4:	4b0e      	ldr	r3, [pc, #56]	; (8012220 <UpdateCommand+0x318>)
 80121e6:	2204      	movs	r2, #4
 80121e8:	701a      	strb	r2, [r3, #0]
			break;
 80121ea:	e034      	b.n	8012256 <UpdateCommand+0x34e>
 80121ec:	20001c34 	.word	0x20001c34
 80121f0:	2000019c 	.word	0x2000019c
 80121f4:	200000ac 	.word	0x200000ac
 80121f8:	20001294 	.word	0x20001294
 80121fc:	20001c30 	.word	0x20001c30
 8012200:	20001c35 	.word	0x20001c35
 8012204:	20001c40 	.word	0x20001c40
 8012208:	20001304 	.word	0x20001304
 801220c:	42aa0000 	.word	0x42aa0000
 8012210:	432a0000 	.word	0x432a0000
 8012214:	20001c3c 	.word	0x20001c3c
 8012218:	20001c38 	.word	0x20001c38
 801221c:	00000000 	.word	0x00000000
 8012220:	20001c3d 	.word	0x20001c3d
 8012224:	20001c68 	.word	0x20001c68
 8012228:	40590000 	.word	0x40590000
 801222c:	40260000 	.word	0x40260000
 8012230:	200000a9 	.word	0x200000a9
 8012234:	20001c3e 	.word	0x20001c3e
		case Command_Rotation:
			SetCarSpeed(0, 0, Default_Speed);
 8012238:	4b16      	ldr	r3, [pc, #88]	; (8012294 <UpdateCommand+0x38c>)
 801223a:	edd3 7a00 	vldr	s15, [r3]
 801223e:	eeb0 1a67 	vmov.f32	s2, s15
 8012242:	eddf 0a15 	vldr	s1, [pc, #84]	; 8012298 <UpdateCommand+0x390>
 8012246:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8012298 <UpdateCommand+0x390>
 801224a:	f000 fd4d 	bl	8012ce8 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Right;
 801224e:	4b13      	ldr	r3, [pc, #76]	; (801229c <UpdateCommand+0x394>)
 8012250:	2205      	movs	r2, #5
 8012252:	701a      	strb	r2, [r3, #0]
			break;
 8012254:	bf00      	nop

			break;
	}

	//记录偏航角
	Yaw_Last = YawAngle;
 8012256:	4b12      	ldr	r3, [pc, #72]	; (80122a0 <UpdateCommand+0x398>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	4a12      	ldr	r2, [pc, #72]	; (80122a4 <UpdateCommand+0x39c>)
 801225c:	6013      	str	r3, [r2, #0]

	//更新执行时间
	Commands[Command_Index].RunCommand_Time = Last_RunCommand_Time = uwTick;
 801225e:	4b12      	ldr	r3, [pc, #72]	; (80122a8 <UpdateCommand+0x3a0>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	4a12      	ldr	r2, [pc, #72]	; (80122ac <UpdateCommand+0x3a4>)
 8012264:	6013      	str	r3, [r2, #0]
 8012266:	4b12      	ldr	r3, [pc, #72]	; (80122b0 <UpdateCommand+0x3a8>)
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	4b10      	ldr	r3, [pc, #64]	; (80122ac <UpdateCommand+0x3a4>)
 801226c:	6819      	ldr	r1, [r3, #0]
 801226e:	4811      	ldr	r0, [pc, #68]	; (80122b4 <UpdateCommand+0x3ac>)
 8012270:	4613      	mov	r3, r2
 8012272:	005b      	lsls	r3, r3, #1
 8012274:	4413      	add	r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	4403      	add	r3, r0
 801227a:	3308      	adds	r3, #8
 801227c:	6019      	str	r1, [r3, #0]
 801227e:	e004      	b.n	801228a <UpdateCommand+0x382>
		return;
 8012280:	bf00      	nop
 8012282:	e002      	b.n	801228a <UpdateCommand+0x382>
		return;
 8012284:	bf00      	nop
 8012286:	e000      	b.n	801228a <UpdateCommand+0x382>
			return;
 8012288:	bf00      	nop
}
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012292:	bf00      	nop
 8012294:	20001c38 	.word	0x20001c38
 8012298:	00000000 	.word	0x00000000
 801229c:	20001c3d 	.word	0x20001c3d
 80122a0:	20001304 	.word	0x20001304
 80122a4:	20001c40 	.word	0x20001c40
 80122a8:	20001294 	.word	0x20001294
 80122ac:	20001c30 	.word	0x20001c30
 80122b0:	2000019c 	.word	0x2000019c
 80122b4:	200000ac 	.word	0x200000ac

080122b8 <ApplyCommand>:

void ApplyCommand()
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
	DriveState state = RealState;
 80122be:	4b09      	ldr	r3, [pc, #36]	; (80122e4 <ApplyCommand+0x2c>)
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	71fb      	strb	r3, [r7, #7]
	//if (RealState != DriveState_Left && RealState != DriveState_Right && RealState != DriveState_Sharp_Left && RealState != DriveState_Sharp_Right && RealState != DriveState_Normal)
	if (AbnormaldState != DriveState_Normal)
 80122c4:	4b08      	ldr	r3, [pc, #32]	; (80122e8 <ApplyCommand+0x30>)
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d001      	beq.n	80122d0 <ApplyCommand+0x18>
	{
		state = DriveState_Derailment;
 80122cc:	2306      	movs	r3, #6
 80122ce:	71fb      	strb	r3, [r7, #7]
	}

	//修正实际偏差
	CorrectCarDirection(state);
 80122d0:	79fb      	ldrb	r3, [r7, #7]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff fd20 	bl	8011d18 <CorrectCarDirection>
	//将理论值应用到小车
	Periodic_UpdateAndSet_Car_ExpectedSpeed();
 80122d8:	f000 fb80 	bl	80129dc <Periodic_UpdateAndSet_Car_ExpectedSpeed>
}
 80122dc:	bf00      	nop
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	20001c3c 	.word	0x20001c3c
 80122e8:	20001c3d 	.word	0x20001c3d

080122ec <Periodic_Status_Control>:

//周期性调用 控制小车运行
void Periodic_Status_Control()
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	af00      	add	r7, sp, #0
	//获取当前红外状态
	RealState = GetDriveState();
 80122f0:	f000 fb00 	bl	80128f4 <GetDriveState>
 80122f4:	4603      	mov	r3, r0
 80122f6:	461a      	mov	r2, r3
 80122f8:	4b03      	ldr	r3, [pc, #12]	; (8012308 <Periodic_Status_Control+0x1c>)
 80122fa:	701a      	strb	r2, [r3, #0]
	//根据辅助传感器更新异常状态指令
	UpdateCommand();
 80122fc:	f7ff fe04 	bl	8011f08 <UpdateCommand>
	//应用指令到实际运行
	ApplyCommand();
 8012300:	f7ff ffda 	bl	80122b8 <ApplyCommand>
}
 8012304:	bf00      	nop
 8012306:	bd80      	pop	{r7, pc}
 8012308:	20001c3c 	.word	0x20001c3c
 801230c:	00000000 	.word	0x00000000

08012310 <GetBatteryLevel>:
uint8_t ID[4];          //设备ID缓存数组
uint32_t i;

//获取电量
float GetBatteryLevel()
{
 8012310:	b580      	push	{r7, lr}
 8012312:	af00      	add	r7, sp, #0
	return Get_ADCChannelValue(&hadc1, ADC_CHANNEL_4) * 3.3 * 11 / 4096;
 8012314:	2104      	movs	r1, #4
 8012316:	4818      	ldr	r0, [pc, #96]	; (8012378 <GetBatteryLevel+0x68>)
 8012318:	f7fa fe98 	bl	800d04c <Get_ADCChannelValue>
 801231c:	4603      	mov	r3, r0
 801231e:	4618      	mov	r0, r3
 8012320:	f7ee f900 	bl	8000524 <__aeabi_i2d>
 8012324:	a312      	add	r3, pc, #72	; (adr r3, 8012370 <GetBatteryLevel+0x60>)
 8012326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232a:	f7ee f965 	bl	80005f8 <__aeabi_dmul>
 801232e:	4602      	mov	r2, r0
 8012330:	460b      	mov	r3, r1
 8012332:	4610      	mov	r0, r2
 8012334:	4619      	mov	r1, r3
 8012336:	f04f 0200 	mov.w	r2, #0
 801233a:	4b10      	ldr	r3, [pc, #64]	; (801237c <GetBatteryLevel+0x6c>)
 801233c:	f7ee f95c 	bl	80005f8 <__aeabi_dmul>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4610      	mov	r0, r2
 8012346:	4619      	mov	r1, r3
 8012348:	f04f 0200 	mov.w	r2, #0
 801234c:	4b0c      	ldr	r3, [pc, #48]	; (8012380 <GetBatteryLevel+0x70>)
 801234e:	f7ee fa7d 	bl	800084c <__aeabi_ddiv>
 8012352:	4602      	mov	r2, r0
 8012354:	460b      	mov	r3, r1
 8012356:	4610      	mov	r0, r2
 8012358:	4619      	mov	r1, r3
 801235a:	f7ee fc45 	bl	8000be8 <__aeabi_d2f>
 801235e:	4603      	mov	r3, r0
 8012360:	ee07 3a90 	vmov	s15, r3
}
 8012364:	eeb0 0a67 	vmov.f32	s0, s15
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	f3af 8000 	nop.w
 8012370:	66666666 	.word	0x66666666
 8012374:	400a6666 	.word	0x400a6666
 8012378:	20000420 	.word	0x20000420
 801237c:	40260000 	.word	0x40260000
 8012380:	40b00000 	.word	0x40b00000
 8012384:	00000000 	.word	0x00000000

08012388 <GetInternalTemperature>:

//获取内部温度
float GetInternalTemperature()
{
 8012388:	b580      	push	{r7, lr}
 801238a:	af00      	add	r7, sp, #0
	return ((Get_ADCChannelValue(&hadc1, ADC_CHANNEL_TEMPSENSOR) * 3.3 / 4096) - 0.76) / 0.0025 + 25;
 801238c:	2110      	movs	r1, #16
 801238e:	4824      	ldr	r0, [pc, #144]	; (8012420 <GetInternalTemperature+0x98>)
 8012390:	f7fa fe5c 	bl	800d04c <Get_ADCChannelValue>
 8012394:	4603      	mov	r3, r0
 8012396:	4618      	mov	r0, r3
 8012398:	f7ee f8c4 	bl	8000524 <__aeabi_i2d>
 801239c:	a31a      	add	r3, pc, #104	; (adr r3, 8012408 <GetInternalTemperature+0x80>)
 801239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a2:	f7ee f929 	bl	80005f8 <__aeabi_dmul>
 80123a6:	4602      	mov	r2, r0
 80123a8:	460b      	mov	r3, r1
 80123aa:	4610      	mov	r0, r2
 80123ac:	4619      	mov	r1, r3
 80123ae:	f04f 0200 	mov.w	r2, #0
 80123b2:	4b1c      	ldr	r3, [pc, #112]	; (8012424 <GetInternalTemperature+0x9c>)
 80123b4:	f7ee fa4a 	bl	800084c <__aeabi_ddiv>
 80123b8:	4602      	mov	r2, r0
 80123ba:	460b      	mov	r3, r1
 80123bc:	4610      	mov	r0, r2
 80123be:	4619      	mov	r1, r3
 80123c0:	a313      	add	r3, pc, #76	; (adr r3, 8012410 <GetInternalTemperature+0x88>)
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	f7ed ff5f 	bl	8000288 <__aeabi_dsub>
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	4610      	mov	r0, r2
 80123d0:	4619      	mov	r1, r3
 80123d2:	a311      	add	r3, pc, #68	; (adr r3, 8012418 <GetInternalTemperature+0x90>)
 80123d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d8:	f7ee fa38 	bl	800084c <__aeabi_ddiv>
 80123dc:	4602      	mov	r2, r0
 80123de:	460b      	mov	r3, r1
 80123e0:	4610      	mov	r0, r2
 80123e2:	4619      	mov	r1, r3
 80123e4:	f04f 0200 	mov.w	r2, #0
 80123e8:	4b0f      	ldr	r3, [pc, #60]	; (8012428 <GetInternalTemperature+0xa0>)
 80123ea:	f7ed ff4f 	bl	800028c <__adddf3>
 80123ee:	4602      	mov	r2, r0
 80123f0:	460b      	mov	r3, r1
 80123f2:	4610      	mov	r0, r2
 80123f4:	4619      	mov	r1, r3
 80123f6:	f7ee fbf7 	bl	8000be8 <__aeabi_d2f>
 80123fa:	4603      	mov	r3, r0
 80123fc:	ee07 3a90 	vmov	s15, r3
}
 8012400:	eeb0 0a67 	vmov.f32	s0, s15
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	66666666 	.word	0x66666666
 801240c:	400a6666 	.word	0x400a6666
 8012410:	851eb852 	.word	0x851eb852
 8012414:	3fe851eb 	.word	0x3fe851eb
 8012418:	47ae147b 	.word	0x47ae147b
 801241c:	3f647ae1 	.word	0x3f647ae1
 8012420:	20000420 	.word	0x20000420
 8012424:	40b00000 	.word	0x40b00000
 8012428:	40390000 	.word	0x40390000

0801242c <EnableAllMotorEncoders>:

TIM_HandleTypeDef *Motor_Encoders[4] = { &htim1, &htim8, &htim5, &htim4 };

//开启全部编码器
void EnableAllMotorEncoders()
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
	for (int var = 0; var < Motor_Number; ++var)
 8012432:	2300      	movs	r3, #0
 8012434:	607b      	str	r3, [r7, #4]
 8012436:	e00a      	b.n	801244e <EnableAllMotorEncoders+0x22>
	{
		HAL_TIM_Encoder_Start(Motor_Encoders[var], TIM_CHANNEL_ALL);
 8012438:	4a09      	ldr	r2, [pc, #36]	; (8012460 <EnableAllMotorEncoders+0x34>)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012440:	213c      	movs	r1, #60	; 0x3c
 8012442:	4618      	mov	r0, r3
 8012444:	f7f6 f872 	bl	800852c <HAL_TIM_Encoder_Start>
	for (int var = 0; var < Motor_Number; ++var)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	3301      	adds	r3, #1
 801244c:	607b      	str	r3, [r7, #4]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b03      	cmp	r3, #3
 8012452:	ddf1      	ble.n	8012438 <EnableAllMotorEncoders+0xc>
	}
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	200001b0 	.word	0x200001b0

08012464 <UpdateAllMotorSpeed>:

//

void UpdateAllMotorSpeed()
{
 8012464:	b5b0      	push	{r4, r5, r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
	short speed_count;
	float speed_duty;

	for (int var = 0; var < Motor_Number; ++var)
 801246a:	2300      	movs	r3, #0
 801246c:	60fb      	str	r3, [r7, #12]
 801246e:	e03a      	b.n	80124e6 <UpdateAllMotorSpeed+0x82>
	{
		speed_count = (short) __HAL_TIM_GET_COUNTER(Motor_Encoders[var]);
 8012470:	4a21      	ldr	r2, [pc, #132]	; (80124f8 <UpdateAllMotorSpeed+0x94>)
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801247c:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_COUNTER(Motor_Encoders[var], 0);
 801247e:	4a1e      	ldr	r2, [pc, #120]	; (80124f8 <UpdateAllMotorSpeed+0x94>)
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2200      	movs	r2, #0
 801248a:	625a      	str	r2, [r3, #36]	; 0x24

		//计算速度
		speed_duty = speed_count * 100.0 / Motor_Encoder_Max_Counts[var];
 801248c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012490:	4618      	mov	r0, r3
 8012492:	f7ee f847 	bl	8000524 <__aeabi_i2d>
 8012496:	f04f 0200 	mov.w	r2, #0
 801249a:	4b18      	ldr	r3, [pc, #96]	; (80124fc <UpdateAllMotorSpeed+0x98>)
 801249c:	f7ee f8ac 	bl	80005f8 <__aeabi_dmul>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	4614      	mov	r4, r2
 80124a6:	461d      	mov	r5, r3
 80124a8:	4a15      	ldr	r2, [pc, #84]	; (8012500 <UpdateAllMotorSpeed+0x9c>)
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	4413      	add	r3, r2
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7ee f848 	bl	8000548 <__aeabi_f2d>
 80124b8:	4602      	mov	r2, r0
 80124ba:	460b      	mov	r3, r1
 80124bc:	4620      	mov	r0, r4
 80124be:	4629      	mov	r1, r5
 80124c0:	f7ee f9c4 	bl	800084c <__aeabi_ddiv>
 80124c4:	4602      	mov	r2, r0
 80124c6:	460b      	mov	r3, r1
 80124c8:	4610      	mov	r0, r2
 80124ca:	4619      	mov	r1, r3
 80124cc:	f7ee fb8c 	bl	8000be8 <__aeabi_d2f>
 80124d0:	4603      	mov	r3, r0
 80124d2:	607b      	str	r3, [r7, #4]
		Motor_Actual_Speeds[var] = speed_duty;
 80124d4:	4a0b      	ldr	r2, [pc, #44]	; (8012504 <UpdateAllMotorSpeed+0xa0>)
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	4413      	add	r3, r2
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	601a      	str	r2, [r3, #0]
	for (int var = 0; var < Motor_Number; ++var)
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	3301      	adds	r3, #1
 80124e4:	60fb      	str	r3, [r7, #12]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b03      	cmp	r3, #3
 80124ea:	ddc1      	ble.n	8012470 <UpdateAllMotorSpeed+0xc>
	}

}
 80124ec:	bf00      	nop
 80124ee:	bf00      	nop
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bdb0      	pop	{r4, r5, r7, pc}
 80124f6:	bf00      	nop
 80124f8:	200001b0 	.word	0x200001b0
 80124fc:	40590000 	.word	0x40590000
 8012500:	200001a0 	.word	0x200001a0
 8012504:	20001c44 	.word	0x20001c44

08012508 <Set_TB6612_State>:
//电机状态缓存
Motor_State Motor_States[] = { Motor_Stop, Motor_Stop, Motor_Stop, Motor_Stop };

//设置驱动板状态
void Set_TB6612_State()
{
 8012508:	b580      	push	{r7, lr}
 801250a:	af00      	add	r7, sp, #0
	if (Motor_States[0] != Motor_Stop || Motor_States[1] != Motor_Stop)
 801250c:	4b14      	ldr	r3, [pc, #80]	; (8012560 <Set_TB6612_State+0x58>)
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	2b02      	cmp	r3, #2
 8012512:	d103      	bne.n	801251c <Set_TB6612_State+0x14>
 8012514:	4b12      	ldr	r3, [pc, #72]	; (8012560 <Set_TB6612_State+0x58>)
 8012516:	785b      	ldrb	r3, [r3, #1]
 8012518:	2b02      	cmp	r3, #2
 801251a:	d005      	beq.n	8012528 <Set_TB6612_State+0x20>
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_SET);
 801251c:	2201      	movs	r2, #1
 801251e:	2104      	movs	r1, #4
 8012520:	4810      	ldr	r0, [pc, #64]	; (8012564 <Set_TB6612_State+0x5c>)
 8012522:	f7f2 f923 	bl	800476c <HAL_GPIO_WritePin>
 8012526:	e004      	b.n	8012532 <Set_TB6612_State+0x2a>
	}
	else
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_RESET);
 8012528:	2200      	movs	r2, #0
 801252a:	2104      	movs	r1, #4
 801252c:	480d      	ldr	r0, [pc, #52]	; (8012564 <Set_TB6612_State+0x5c>)
 801252e:	f7f2 f91d 	bl	800476c <HAL_GPIO_WritePin>
	}

	if (Motor_States[2] != Motor_Stop || Motor_States[3] != Motor_Stop)
 8012532:	4b0b      	ldr	r3, [pc, #44]	; (8012560 <Set_TB6612_State+0x58>)
 8012534:	789b      	ldrb	r3, [r3, #2]
 8012536:	2b02      	cmp	r3, #2
 8012538:	d103      	bne.n	8012542 <Set_TB6612_State+0x3a>
 801253a:	4b09      	ldr	r3, [pc, #36]	; (8012560 <Set_TB6612_State+0x58>)
 801253c:	78db      	ldrb	r3, [r3, #3]
 801253e:	2b02      	cmp	r3, #2
 8012540:	d005      	beq.n	801254e <Set_TB6612_State+0x46>
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_SET);
 8012542:	2201      	movs	r2, #1
 8012544:	2108      	movs	r1, #8
 8012546:	4807      	ldr	r0, [pc, #28]	; (8012564 <Set_TB6612_State+0x5c>)
 8012548:	f7f2 f910 	bl	800476c <HAL_GPIO_WritePin>
 801254c:	e005      	b.n	801255a <Set_TB6612_State+0x52>
	}
	else
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_RESET);
 801254e:	2200      	movs	r2, #0
 8012550:	2108      	movs	r1, #8
 8012552:	4804      	ldr	r0, [pc, #16]	; (8012564 <Set_TB6612_State+0x5c>)
 8012554:	f7f2 f90a 	bl	800476c <HAL_GPIO_WritePin>
	}
}
 8012558:	bf00      	nop
 801255a:	bf00      	nop
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	20000200 	.word	0x20000200
 8012564:	40021800 	.word	0x40021800

08012568 <SetMotorState>:

//设置单个电机状态
void SetMotorState(Motor_Name motor, Motor_State state)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	4603      	mov	r3, r0
 8012570:	460a      	mov	r2, r1
 8012572:	71fb      	strb	r3, [r7, #7]
 8012574:	4613      	mov	r3, r2
 8012576:	71bb      	strb	r3, [r7, #6]
	//缓存
	Motor_States[motor] = state;
 8012578:	79fb      	ldrb	r3, [r7, #7]
 801257a:	493e      	ldr	r1, [pc, #248]	; (8012674 <SetMotorState+0x10c>)
 801257c:	79ba      	ldrb	r2, [r7, #6]
 801257e:	54ca      	strb	r2, [r1, r3]

	switch (state)
 8012580:	79bb      	ldrb	r3, [r7, #6]
 8012582:	2b02      	cmp	r3, #2
 8012584:	d04c      	beq.n	8012620 <SetMotorState+0xb8>
 8012586:	2b02      	cmp	r3, #2
 8012588:	dc6d      	bgt.n	8012666 <SetMotorState+0xfe>
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <SetMotorState+0x2c>
 801258e:	2b01      	cmp	r3, #1
 8012590:	d023      	beq.n	80125da <SetMotorState+0x72>
 8012592:	e068      	b.n	8012666 <SetMotorState+0xfe>
	{
		case Motor_Forward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8012594:	79fb      	ldrb	r3, [r7, #7]
 8012596:	4a38      	ldr	r2, [pc, #224]	; (8012678 <SetMotorState+0x110>)
 8012598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801259c:	4619      	mov	r1, r3
 801259e:	4837      	ldr	r0, [pc, #220]	; (801267c <SetMotorState+0x114>)
 80125a0:	f7f5 fde6 	bl	8008170 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_SET);
 80125a4:	79fb      	ldrb	r3, [r7, #7]
 80125a6:	4a36      	ldr	r2, [pc, #216]	; (8012680 <SetMotorState+0x118>)
 80125a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80125ac:	79fb      	ldrb	r3, [r7, #7]
 80125ae:	4a35      	ldr	r2, [pc, #212]	; (8012684 <SetMotorState+0x11c>)
 80125b0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80125b4:	2201      	movs	r2, #1
 80125b6:	4619      	mov	r1, r3
 80125b8:	f7f2 f8d8 	bl	800476c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	4a30      	ldr	r2, [pc, #192]	; (8012680 <SetMotorState+0x118>)
 80125c0:	00db      	lsls	r3, r3, #3
 80125c2:	4413      	add	r3, r2
 80125c4:	6858      	ldr	r0, [r3, #4]
 80125c6:	79fb      	ldrb	r3, [r7, #7]
 80125c8:	4a2e      	ldr	r2, [pc, #184]	; (8012684 <SetMotorState+0x11c>)
 80125ca:	009b      	lsls	r3, r3, #2
 80125cc:	4413      	add	r3, r2
 80125ce:	885b      	ldrh	r3, [r3, #2]
 80125d0:	2200      	movs	r2, #0
 80125d2:	4619      	mov	r1, r3
 80125d4:	f7f2 f8ca 	bl	800476c <HAL_GPIO_WritePin>
			break;
 80125d8:	e045      	b.n	8012666 <SetMotorState+0xfe>
		case Motor_Backward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 80125da:	79fb      	ldrb	r3, [r7, #7]
 80125dc:	4a26      	ldr	r2, [pc, #152]	; (8012678 <SetMotorState+0x110>)
 80125de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125e2:	4619      	mov	r1, r3
 80125e4:	4825      	ldr	r0, [pc, #148]	; (801267c <SetMotorState+0x114>)
 80125e6:	f7f5 fdc3 	bl	8008170 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 80125ea:	79fb      	ldrb	r3, [r7, #7]
 80125ec:	4a24      	ldr	r2, [pc, #144]	; (8012680 <SetMotorState+0x118>)
 80125ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	4a23      	ldr	r2, [pc, #140]	; (8012684 <SetMotorState+0x11c>)
 80125f6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80125fa:	2200      	movs	r2, #0
 80125fc:	4619      	mov	r1, r3
 80125fe:	f7f2 f8b5 	bl	800476c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_SET);
 8012602:	79fb      	ldrb	r3, [r7, #7]
 8012604:	4a1e      	ldr	r2, [pc, #120]	; (8012680 <SetMotorState+0x118>)
 8012606:	00db      	lsls	r3, r3, #3
 8012608:	4413      	add	r3, r2
 801260a:	6858      	ldr	r0, [r3, #4]
 801260c:	79fb      	ldrb	r3, [r7, #7]
 801260e:	4a1d      	ldr	r2, [pc, #116]	; (8012684 <SetMotorState+0x11c>)
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	4413      	add	r3, r2
 8012614:	885b      	ldrh	r3, [r3, #2]
 8012616:	2201      	movs	r2, #1
 8012618:	4619      	mov	r1, r3
 801261a:	f7f2 f8a7 	bl	800476c <HAL_GPIO_WritePin>
			break;
 801261e:	e022      	b.n	8012666 <SetMotorState+0xfe>
		case Motor_Stop:
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8012620:	79fb      	ldrb	r3, [r7, #7]
 8012622:	4a15      	ldr	r2, [pc, #84]	; (8012678 <SetMotorState+0x110>)
 8012624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012628:	4619      	mov	r1, r3
 801262a:	4814      	ldr	r0, [pc, #80]	; (801267c <SetMotorState+0x114>)
 801262c:	f7f5 fe68 	bl	8008300 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8012630:	79fb      	ldrb	r3, [r7, #7]
 8012632:	4a13      	ldr	r2, [pc, #76]	; (8012680 <SetMotorState+0x118>)
 8012634:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012638:	79fb      	ldrb	r3, [r7, #7]
 801263a:	4a12      	ldr	r2, [pc, #72]	; (8012684 <SetMotorState+0x11c>)
 801263c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8012640:	2200      	movs	r2, #0
 8012642:	4619      	mov	r1, r3
 8012644:	f7f2 f892 	bl	800476c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 8012648:	79fb      	ldrb	r3, [r7, #7]
 801264a:	4a0d      	ldr	r2, [pc, #52]	; (8012680 <SetMotorState+0x118>)
 801264c:	00db      	lsls	r3, r3, #3
 801264e:	4413      	add	r3, r2
 8012650:	6858      	ldr	r0, [r3, #4]
 8012652:	79fb      	ldrb	r3, [r7, #7]
 8012654:	4a0b      	ldr	r2, [pc, #44]	; (8012684 <SetMotorState+0x11c>)
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	885b      	ldrh	r3, [r3, #2]
 801265c:	2200      	movs	r2, #0
 801265e:	4619      	mov	r1, r3
 8012660:	f7f2 f884 	bl	800476c <HAL_GPIO_WritePin>
			break;
 8012664:	bf00      	nop
	}

	//设置驱动板状态
	Set_TB6612_State();
 8012666:	f7ff ff4f 	bl	8012508 <Set_TB6612_State>
}
 801266a:	bf00      	nop
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	20000200 	.word	0x20000200
 8012678:	200001f0 	.word	0x200001f0
 801267c:	20000f84 	.word	0x20000f84
 8012680:	200001c0 	.word	0x200001c0
 8012684:	200001e0 	.word	0x200001e0

08012688 <SetMotorSpeed>:

//设置单个电机速度
//速度取值 -100 ~ 100 对应占空比 0% - 100%
void SetMotorSpeed(Motor_Name motor, float speed)
{
 8012688:	b590      	push	{r4, r7, lr}
 801268a:	b085      	sub	sp, #20
 801268c:	af00      	add	r7, sp, #0
 801268e:	4603      	mov	r3, r0
 8012690:	ed87 0a00 	vstr	s0, [r7]
 8012694:	71fb      	strb	r3, [r7, #7]
	uint8_t state = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	73fb      	strb	r3, [r7, #15]
	//设置状态
	if (speed == 0)
 801269a:	edd7 7a00 	vldr	s15, [r7]
 801269e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80126a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a6:	d102      	bne.n	80126ae <SetMotorSpeed+0x26>
	{
		state = Motor_Stop;
 80126a8:	2302      	movs	r3, #2
 80126aa:	73fb      	strb	r3, [r7, #15]
 80126ac:	e00b      	b.n	80126c6 <SetMotorSpeed+0x3e>
	}
	else if (speed > 0)
 80126ae:	edd7 7a00 	vldr	s15, [r7]
 80126b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ba:	dd02      	ble.n	80126c2 <SetMotorSpeed+0x3a>
	{
		state = Motor_Forward;
 80126bc:	2300      	movs	r3, #0
 80126be:	73fb      	strb	r3, [r7, #15]
 80126c0:	e001      	b.n	80126c6 <SetMotorSpeed+0x3e>
	}
	else
	{
		state = Motor_Backward;
 80126c2:	2301      	movs	r3, #1
 80126c4:	73fb      	strb	r3, [r7, #15]
	}

	//检查电机状态
	if (Motor_States[motor] != state)
 80126c6:	79fb      	ldrb	r3, [r7, #7]
 80126c8:	4a6d      	ldr	r2, [pc, #436]	; (8012880 <SetMotorSpeed+0x1f8>)
 80126ca:	5cd3      	ldrb	r3, [r2, r3]
 80126cc:	7bfa      	ldrb	r2, [r7, #15]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d005      	beq.n	80126de <SetMotorSpeed+0x56>
	{
		SetMotorState(motor, state);
 80126d2:	7bfa      	ldrb	r2, [r7, #15]
 80126d4:	79fb      	ldrb	r3, [r7, #7]
 80126d6:	4611      	mov	r1, r2
 80126d8:	4618      	mov	r0, r3
 80126da:	f7ff ff45 	bl	8012568 <SetMotorState>
	}

	//修正速度
	if (speed < 0)
 80126de:	edd7 7a00 	vldr	s15, [r7]
 80126e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ea:	d505      	bpl.n	80126f8 <SetMotorSpeed+0x70>
	{
		speed = -speed;
 80126ec:	edd7 7a00 	vldr	s15, [r7]
 80126f0:	eef1 7a67 	vneg.f32	s15, s15
 80126f4:	edc7 7a00 	vstr	s15, [r7]
	}

	//设置PWM
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 80126f8:	79fb      	ldrb	r3, [r7, #7]
 80126fa:	4a62      	ldr	r2, [pc, #392]	; (8012884 <SetMotorSpeed+0x1fc>)
 80126fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d128      	bne.n	8012756 <SetMotorSpeed+0xce>
 8012704:	edd7 7a00 	vldr	s15, [r7]
 8012708:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8012888 <SetMotorSpeed+0x200>
 801270c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	dd03      	ble.n	801271e <SetMotorSpeed+0x96>
 8012716:	f04f 0000 	mov.w	r0, #0
 801271a:	495c      	ldr	r1, [pc, #368]	; (801288c <SetMotorSpeed+0x204>)
 801271c:	e002      	b.n	8012724 <SetMotorSpeed+0x9c>
 801271e:	6838      	ldr	r0, [r7, #0]
 8012720:	f7ed ff12 	bl	8000548 <__aeabi_f2d>
 8012724:	a352      	add	r3, pc, #328	; (adr r3, 8012870 <SetMotorSpeed+0x1e8>)
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	f7ed ff65 	bl	80005f8 <__aeabi_dmul>
 801272e:	4602      	mov	r2, r0
 8012730:	460b      	mov	r3, r1
 8012732:	4610      	mov	r0, r2
 8012734:	4619      	mov	r1, r3
 8012736:	a350      	add	r3, pc, #320	; (adr r3, 8012878 <SetMotorSpeed+0x1f0>)
 8012738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273c:	f7ed ff5c 	bl	80005f8 <__aeabi_dmul>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	4952      	ldr	r1, [pc, #328]	; (8012890 <SetMotorSpeed+0x208>)
 8012746:	680c      	ldr	r4, [r1, #0]
 8012748:	4610      	mov	r0, r2
 801274a:	4619      	mov	r1, r3
 801274c:	f7ee fa2c 	bl	8000ba8 <__aeabi_d2uiz>
 8012750:	4603      	mov	r3, r0
 8012752:	6363      	str	r3, [r4, #52]	; 0x34
}
 8012754:	e085      	b.n	8012862 <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 8012756:	79fb      	ldrb	r3, [r7, #7]
 8012758:	4a4a      	ldr	r2, [pc, #296]	; (8012884 <SetMotorSpeed+0x1fc>)
 801275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801275e:	2b04      	cmp	r3, #4
 8012760:	d128      	bne.n	80127b4 <SetMotorSpeed+0x12c>
 8012762:	edd7 7a00 	vldr	s15, [r7]
 8012766:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012888 <SetMotorSpeed+0x200>
 801276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012772:	dd03      	ble.n	801277c <SetMotorSpeed+0xf4>
 8012774:	f04f 0000 	mov.w	r0, #0
 8012778:	4944      	ldr	r1, [pc, #272]	; (801288c <SetMotorSpeed+0x204>)
 801277a:	e002      	b.n	8012782 <SetMotorSpeed+0xfa>
 801277c:	6838      	ldr	r0, [r7, #0]
 801277e:	f7ed fee3 	bl	8000548 <__aeabi_f2d>
 8012782:	a33b      	add	r3, pc, #236	; (adr r3, 8012870 <SetMotorSpeed+0x1e8>)
 8012784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012788:	f7ed ff36 	bl	80005f8 <__aeabi_dmul>
 801278c:	4602      	mov	r2, r0
 801278e:	460b      	mov	r3, r1
 8012790:	4610      	mov	r0, r2
 8012792:	4619      	mov	r1, r3
 8012794:	a338      	add	r3, pc, #224	; (adr r3, 8012878 <SetMotorSpeed+0x1f0>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	f7ed ff2d 	bl	80005f8 <__aeabi_dmul>
 801279e:	4602      	mov	r2, r0
 80127a0:	460b      	mov	r3, r1
 80127a2:	493b      	ldr	r1, [pc, #236]	; (8012890 <SetMotorSpeed+0x208>)
 80127a4:	680c      	ldr	r4, [r1, #0]
 80127a6:	4610      	mov	r0, r2
 80127a8:	4619      	mov	r1, r3
 80127aa:	f7ee f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 80127ae:	4603      	mov	r3, r0
 80127b0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80127b2:	e056      	b.n	8012862 <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 80127b4:	79fb      	ldrb	r3, [r7, #7]
 80127b6:	4a33      	ldr	r2, [pc, #204]	; (8012884 <SetMotorSpeed+0x1fc>)
 80127b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127bc:	2b08      	cmp	r3, #8
 80127be:	d128      	bne.n	8012812 <SetMotorSpeed+0x18a>
 80127c0:	edd7 7a00 	vldr	s15, [r7]
 80127c4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012888 <SetMotorSpeed+0x200>
 80127c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d0:	dd03      	ble.n	80127da <SetMotorSpeed+0x152>
 80127d2:	f04f 0000 	mov.w	r0, #0
 80127d6:	492d      	ldr	r1, [pc, #180]	; (801288c <SetMotorSpeed+0x204>)
 80127d8:	e002      	b.n	80127e0 <SetMotorSpeed+0x158>
 80127da:	6838      	ldr	r0, [r7, #0]
 80127dc:	f7ed feb4 	bl	8000548 <__aeabi_f2d>
 80127e0:	a323      	add	r3, pc, #140	; (adr r3, 8012870 <SetMotorSpeed+0x1e8>)
 80127e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e6:	f7ed ff07 	bl	80005f8 <__aeabi_dmul>
 80127ea:	4602      	mov	r2, r0
 80127ec:	460b      	mov	r3, r1
 80127ee:	4610      	mov	r0, r2
 80127f0:	4619      	mov	r1, r3
 80127f2:	a321      	add	r3, pc, #132	; (adr r3, 8012878 <SetMotorSpeed+0x1f0>)
 80127f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f8:	f7ed fefe 	bl	80005f8 <__aeabi_dmul>
 80127fc:	4602      	mov	r2, r0
 80127fe:	460b      	mov	r3, r1
 8012800:	4923      	ldr	r1, [pc, #140]	; (8012890 <SetMotorSpeed+0x208>)
 8012802:	680c      	ldr	r4, [r1, #0]
 8012804:	4610      	mov	r0, r2
 8012806:	4619      	mov	r1, r3
 8012808:	f7ee f9ce 	bl	8000ba8 <__aeabi_d2uiz>
 801280c:	4603      	mov	r3, r0
 801280e:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8012810:	e027      	b.n	8012862 <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 8012812:	edd7 7a00 	vldr	s15, [r7]
 8012816:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012888 <SetMotorSpeed+0x200>
 801281a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012822:	dd03      	ble.n	801282c <SetMotorSpeed+0x1a4>
 8012824:	f04f 0000 	mov.w	r0, #0
 8012828:	4918      	ldr	r1, [pc, #96]	; (801288c <SetMotorSpeed+0x204>)
 801282a:	e002      	b.n	8012832 <SetMotorSpeed+0x1aa>
 801282c:	6838      	ldr	r0, [r7, #0]
 801282e:	f7ed fe8b 	bl	8000548 <__aeabi_f2d>
 8012832:	a30f      	add	r3, pc, #60	; (adr r3, 8012870 <SetMotorSpeed+0x1e8>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	f7ed fede 	bl	80005f8 <__aeabi_dmul>
 801283c:	4602      	mov	r2, r0
 801283e:	460b      	mov	r3, r1
 8012840:	4610      	mov	r0, r2
 8012842:	4619      	mov	r1, r3
 8012844:	a30c      	add	r3, pc, #48	; (adr r3, 8012878 <SetMotorSpeed+0x1f0>)
 8012846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284a:	f7ed fed5 	bl	80005f8 <__aeabi_dmul>
 801284e:	4602      	mov	r2, r0
 8012850:	460b      	mov	r3, r1
 8012852:	490f      	ldr	r1, [pc, #60]	; (8012890 <SetMotorSpeed+0x208>)
 8012854:	680c      	ldr	r4, [r1, #0]
 8012856:	4610      	mov	r0, r2
 8012858:	4619      	mov	r1, r3
 801285a:	f7ee f9a5 	bl	8000ba8 <__aeabi_d2uiz>
 801285e:	4603      	mov	r3, r0
 8012860:	6423      	str	r3, [r4, #64]	; 0x40
}
 8012862:	bf00      	nop
 8012864:	3714      	adds	r7, #20
 8012866:	46bd      	mov	sp, r7
 8012868:	bd90      	pop	{r4, r7, pc}
 801286a:	bf00      	nop
 801286c:	f3af 8000 	nop.w
 8012870:	47ae147b 	.word	0x47ae147b
 8012874:	3f847ae1 	.word	0x3f847ae1
 8012878:	00000000 	.word	0x00000000
 801287c:	40d067c0 	.word	0x40d067c0
 8012880:	20000200 	.word	0x20000200
 8012884:	200001f0 	.word	0x200001f0
 8012888:	42c80000 	.word	0x42c80000
 801288c:	40590000 	.word	0x40590000
 8012890:	20000f84 	.word	0x20000f84

08012894 <UpdateInfraredData>:
GPIO_TypeDef *Infrared_GPIO_Ports[Infrared_Number] = { Infrared1_GPIO_Port, Infrared2_GPIO_Port, Infrared3_GPIO_Port, Infrared4_GPIO_Port };
uint16_t Infrared_Pins[Infrared_Number] = { Infrared1_Pin, Infrared2_Pin, Infrared3_Pin, Infrared4_Pin };

//获取红外数据
void UpdateInfraredData()
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
	for (int var = 0; var < Infrared_Number; ++var)
 801289a:	2300      	movs	r3, #0
 801289c:	607b      	str	r3, [r7, #4]
 801289e:	e01a      	b.n	80128d6 <UpdateInfraredData+0x42>
	{
		Infrared_Datas[var] = HAL_GPIO_ReadPin(Infrared_GPIO_Ports[var], Infrared_Pins[var]) == GPIO_PIN_RESET;
 80128a0:	4a11      	ldr	r2, [pc, #68]	; (80128e8 <UpdateInfraredData+0x54>)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80128a8:	4910      	ldr	r1, [pc, #64]	; (80128ec <UpdateInfraredData+0x58>)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80128b0:	4619      	mov	r1, r3
 80128b2:	4610      	mov	r0, r2
 80128b4:	f7f1 ff42 	bl	800473c <HAL_GPIO_ReadPin>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	bf0c      	ite	eq
 80128be:	2301      	moveq	r3, #1
 80128c0:	2300      	movne	r3, #0
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	4619      	mov	r1, r3
 80128c6:	4a0a      	ldr	r2, [pc, #40]	; (80128f0 <UpdateInfraredData+0x5c>)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4413      	add	r3, r2
 80128cc:	460a      	mov	r2, r1
 80128ce:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < Infrared_Number; ++var)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3301      	adds	r3, #1
 80128d4:	607b      	str	r3, [r7, #4]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2b03      	cmp	r3, #3
 80128da:	dde1      	ble.n	80128a0 <UpdateInfraredData+0xc>
	}
}
 80128dc:	bf00      	nop
 80128de:	bf00      	nop
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	20000204 	.word	0x20000204
 80128ec:	20000214 	.word	0x20000214
 80128f0:	20001c54 	.word	0x20001c54

080128f4 <GetDriveState>:

//获取当前行驶状态
DriveState GetDriveState()
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
	UpdateInfraredData();
 80128f8:	f7ff ffcc 	bl	8012894 <UpdateInfraredData>

	//判断
	if (Infrared_Datas[Infrared_Left] && Infrared_Datas[Infrared_Right] && Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Center_Right])
 80128fc:	4b32      	ldr	r3, [pc, #200]	; (80129c8 <GetDriveState+0xd4>)
 80128fe:	785b      	ldrb	r3, [r3, #1]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d00d      	beq.n	8012920 <GetDriveState+0x2c>
 8012904:	4b30      	ldr	r3, [pc, #192]	; (80129c8 <GetDriveState+0xd4>)
 8012906:	78db      	ldrb	r3, [r3, #3]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d009      	beq.n	8012920 <GetDriveState+0x2c>
 801290c:	4b2e      	ldr	r3, [pc, #184]	; (80129c8 <GetDriveState+0xd4>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d005      	beq.n	8012920 <GetDriveState+0x2c>
 8012914:	4b2c      	ldr	r3, [pc, #176]	; (80129c8 <GetDriveState+0xd4>)
 8012916:	789b      	ldrb	r3, [r3, #2]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d001      	beq.n	8012920 <GetDriveState+0x2c>
	{
		return DriveState_Intersection;
 801291c:	2300      	movs	r3, #0
 801291e:	e050      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Right])
 8012920:	4b29      	ldr	r3, [pc, #164]	; (80129c8 <GetDriveState+0xd4>)
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d009      	beq.n	801293c <GetDriveState+0x48>
 8012928:	4b27      	ldr	r3, [pc, #156]	; (80129c8 <GetDriveState+0xd4>)
 801292a:	789b      	ldrb	r3, [r3, #2]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d005      	beq.n	801293c <GetDriveState+0x48>
 8012930:	4b25      	ldr	r3, [pc, #148]	; (80129c8 <GetDriveState+0xd4>)
 8012932:	78db      	ldrb	r3, [r3, #3]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d001      	beq.n	801293c <GetDriveState+0x48>
	{
		return DriveState_Turn_Right;
 8012938:	2308      	movs	r3, #8
 801293a:	e042      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Left])
 801293c:	4b22      	ldr	r3, [pc, #136]	; (80129c8 <GetDriveState+0xd4>)
 801293e:	789b      	ldrb	r3, [r3, #2]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d009      	beq.n	8012958 <GetDriveState+0x64>
 8012944:	4b20      	ldr	r3, [pc, #128]	; (80129c8 <GetDriveState+0xd4>)
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d005      	beq.n	8012958 <GetDriveState+0x64>
 801294c:	4b1e      	ldr	r3, [pc, #120]	; (80129c8 <GetDriveState+0xd4>)
 801294e:	785b      	ldrb	r3, [r3, #1]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d001      	beq.n	8012958 <GetDriveState+0x64>
	{
		return DriveState_Turn_Left;
 8012954:	2307      	movs	r3, #7
 8012956:	e034      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Right])
 8012958:	4b1b      	ldr	r3, [pc, #108]	; (80129c8 <GetDriveState+0xd4>)
 801295a:	78db      	ldrb	r3, [r3, #3]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <GetDriveState+0x70>
	{
		return DriveState_Sharp_Left;
 8012960:	2304      	movs	r3, #4
 8012962:	e02e      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Left])
 8012964:	4b18      	ldr	r3, [pc, #96]	; (80129c8 <GetDriveState+0xd4>)
 8012966:	785b      	ldrb	r3, [r3, #1]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d001      	beq.n	8012970 <GetDriveState+0x7c>
	{
		return DriveState_Sharp_Right;
 801296c:	2305      	movs	r3, #5
 801296e:	e028      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] == 0 && Infrared_Datas[Infrared_Center_Right] == 0 && Infrared_Datas[Infrared_Left] == 0 && Infrared_Datas[Infrared_Right] == 0)
 8012970:	4b15      	ldr	r3, [pc, #84]	; (80129c8 <GetDriveState+0xd4>)
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d10d      	bne.n	8012994 <GetDriveState+0xa0>
 8012978:	4b13      	ldr	r3, [pc, #76]	; (80129c8 <GetDriveState+0xd4>)
 801297a:	789b      	ldrb	r3, [r3, #2]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d109      	bne.n	8012994 <GetDriveState+0xa0>
 8012980:	4b11      	ldr	r3, [pc, #68]	; (80129c8 <GetDriveState+0xd4>)
 8012982:	785b      	ldrb	r3, [r3, #1]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d105      	bne.n	8012994 <GetDriveState+0xa0>
 8012988:	4b0f      	ldr	r3, [pc, #60]	; (80129c8 <GetDriveState+0xd4>)
 801298a:	78db      	ldrb	r3, [r3, #3]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d101      	bne.n	8012994 <GetDriveState+0xa0>
	{
		return DriveState_Derailment;
 8012990:	2306      	movs	r3, #6
 8012992:	e016      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] == 0)
 8012994:	4b0c      	ldr	r3, [pc, #48]	; (80129c8 <GetDriveState+0xd4>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d101      	bne.n	80129a0 <GetDriveState+0xac>
	{
		return DriveState_Left;
 801299c:	2301      	movs	r3, #1
 801299e:	e010      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] == 0)
 80129a0:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <GetDriveState+0xd4>)
 80129a2:	789b      	ldrb	r3, [r3, #2]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <GetDriveState+0xb8>
	{
		return DriveState_Right;
 80129a8:	2302      	movs	r3, #2
 80129aa:	e00a      	b.n	80129c2 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Center_Left])
 80129ac:	4b06      	ldr	r3, [pc, #24]	; (80129c8 <GetDriveState+0xd4>)
 80129ae:	789b      	ldrb	r3, [r3, #2]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d005      	beq.n	80129c0 <GetDriveState+0xcc>
 80129b4:	4b04      	ldr	r3, [pc, #16]	; (80129c8 <GetDriveState+0xd4>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d001      	beq.n	80129c0 <GetDriveState+0xcc>
	{
		return DriveState_Normal;
 80129bc:	2303      	movs	r3, #3
 80129be:	e000      	b.n	80129c2 <GetDriveState+0xce>
	}
	else
	{
		return DriveState_Undefined;
 80129c0:	2309      	movs	r3, #9
	}
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	20001c54 	.word	0x20001c54

080129cc <InitCar>:
float Abnormal_Axis_Speed[3];

Abnormal_Mode StateAbnormal_Mode;

void InitCar()
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
	//初始化PID
	InitMotorPID();
 80129d0:	f000 f9a4 	bl	8012d1c <InitMotorPID>
	//使能小车速度监控
	EnableAllMotorEncoders();
 80129d4:	f7ff fd2a 	bl	801242c <EnableAllMotorEncoders>
}
 80129d8:	bf00      	nop
 80129da:	bd80      	pop	{r7, pc}

080129dc <Periodic_UpdateAndSet_Car_ExpectedSpeed>:
	Abnormal_Axis_Speed[2] = z;
}

//周期更新设置值并应用
void Periodic_UpdateAndSet_Car_ExpectedSpeed()
{
 80129dc:	b590      	push	{r4, r7, lr}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
	//CorrectCarDirection();
	//更新实际速度
	Periodic_Update_Car_ActualSpeed();
 80129e2:	f000 f857 	bl	8012a94 <Periodic_Update_Car_ActualSpeed>
	//级联更新计算PID
	for (int motor = 0; motor < Motor_Number; ++motor)
 80129e6:	2300      	movs	r3, #0
 80129e8:	607b      	str	r3, [r7, #4]
 80129ea:	e020      	b.n	8012a2e <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x52>
	{
		SetMotorSpeed(motor, UpdateMotorSpeedPID(motor, Motor_Expected_Speeds[motor], Motor_Actual_Speeds[motor]));
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	b2dc      	uxtb	r4, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	b2da      	uxtb	r2, r3
 80129f4:	4912      	ldr	r1, [pc, #72]	; (8012a40 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x64>)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	009b      	lsls	r3, r3, #2
 80129fa:	440b      	add	r3, r1
 80129fc:	edd3 7a00 	vldr	s15, [r3]
 8012a00:	4910      	ldr	r1, [pc, #64]	; (8012a44 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x68>)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	440b      	add	r3, r1
 8012a08:	ed93 7a00 	vldr	s14, [r3]
 8012a0c:	eef0 0a47 	vmov.f32	s1, s14
 8012a10:	eeb0 0a67 	vmov.f32	s0, s15
 8012a14:	4610      	mov	r0, r2
 8012a16:	f000 fa45 	bl	8012ea4 <UpdateMotorSpeedPID>
 8012a1a:	eef0 7a40 	vmov.f32	s15, s0
 8012a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8012a22:	4620      	mov	r0, r4
 8012a24:	f7ff fe30 	bl	8012688 <SetMotorSpeed>
	for (int motor = 0; motor < Motor_Number; ++motor)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	607b      	str	r3, [r7, #4]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2b03      	cmp	r3, #3
 8012a32:	dddb      	ble.n	80129ec <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x10>
	}
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd90      	pop	{r4, r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	20001c58 	.word	0x20001c58
 8012a44:	20001c44 	.word	0x20001c44

08012a48 <Is_Car_Runing>:

//判断是否停止
uint8_t Is_Car_Runing()
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < Motor_Number; ++var)
 8012a52:	2300      	movs	r3, #0
 8012a54:	603b      	str	r3, [r7, #0]
 8012a56:	e010      	b.n	8012a7a <Is_Car_Runing+0x32>
	{
		if (Motor_Expected_Speeds[var] != 0)
 8012a58:	4a0d      	ldr	r2, [pc, #52]	; (8012a90 <Is_Car_Runing+0x48>)
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	4413      	add	r3, r2
 8012a60:	edd3 7a00 	vldr	s15, [r3]
 8012a64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6c:	d002      	beq.n	8012a74 <Is_Car_Runing+0x2c>
		{
			flag = 1;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	71fb      	strb	r3, [r7, #7]
			break;
 8012a72:	e005      	b.n	8012a80 <Is_Car_Runing+0x38>
	for (int var = 0; var < Motor_Number; ++var)
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	3301      	adds	r3, #1
 8012a78:	603b      	str	r3, [r7, #0]
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	2b03      	cmp	r3, #3
 8012a7e:	ddeb      	ble.n	8012a58 <Is_Car_Runing+0x10>
		}
	}
	return flag;
 8012a80:	79fb      	ldrb	r3, [r7, #7]
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	370c      	adds	r7, #12
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	20001c58 	.word	0x20001c58

08012a94 <Periodic_Update_Car_ActualSpeed>:

//周期更新实际值
void Periodic_Update_Car_ActualSpeed()
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
	UpdateAllMotorSpeed();
 8012a9a:	f7ff fce3 	bl	8012464 <UpdateAllMotorSpeed>

	//根据电机状态 修正已停止电机的速度
	for (int motor = 0; motor < Motor_Number; ++motor)
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	607b      	str	r3, [r7, #4]
 8012aa2:	e01a      	b.n	8012ada <Periodic_Update_Car_ActualSpeed+0x46>
	{
		if (Motor_States[motor] == Motor_Stop && Motor_Actual_Speeds[motor] != 0)
 8012aa4:	4a11      	ldr	r2, [pc, #68]	; (8012aec <Periodic_Update_Car_ActualSpeed+0x58>)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b02      	cmp	r3, #2
 8012aae:	d111      	bne.n	8012ad4 <Periodic_Update_Car_ActualSpeed+0x40>
 8012ab0:	4a0f      	ldr	r2, [pc, #60]	; (8012af0 <Periodic_Update_Car_ActualSpeed+0x5c>)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	edd3 7a00 	vldr	s15, [r3]
 8012abc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac4:	d006      	beq.n	8012ad4 <Periodic_Update_Car_ActualSpeed+0x40>
		{
			Motor_Actual_Speeds[motor] = 0;
 8012ac6:	4a0a      	ldr	r2, [pc, #40]	; (8012af0 <Periodic_Update_Car_ActualSpeed+0x5c>)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	4413      	add	r3, r2
 8012ace:	f04f 0200 	mov.w	r2, #0
 8012ad2:	601a      	str	r2, [r3, #0]
	for (int motor = 0; motor < Motor_Number; ++motor)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	607b      	str	r3, [r7, #4]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b03      	cmp	r3, #3
 8012ade:	dde1      	ble.n	8012aa4 <Periodic_Update_Car_ActualSpeed+0x10>
		}
	}
}
 8012ae0:	bf00      	nop
 8012ae2:	bf00      	nop
 8012ae4:	3708      	adds	r7, #8
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	20000200 	.word	0x20000200
 8012af0:	20001c44 	.word	0x20001c44

08012af4 <Set_Motor_ExpectedSpeed>:

//跳过计算 直接设置某个轮子速度
//只有关闭巡线才能生效
void Set_Motor_ExpectedSpeed(Motor_Name motor, float speed)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	4603      	mov	r3, r0
 8012afc:	ed87 0a00 	vstr	s0, [r7]
 8012b00:	71fb      	strb	r3, [r7, #7]
	Motor_Expected_Speeds[motor] = speed;
 8012b02:	79fb      	ldrb	r3, [r7, #7]
 8012b04:	4a05      	ldr	r2, [pc, #20]	; (8012b1c <Set_Motor_ExpectedSpeed+0x28>)
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	4413      	add	r3, r2
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	601a      	str	r2, [r3, #0]
}
 8012b0e:	bf00      	nop
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	20001c58 	.word	0x20001c58

08012b20 <Transform_AxisSpeed>:

//计算速度并保存
void Transform_AxisSpeed()
{
 8012b20:	b480      	push	{r7}
 8012b22:	b083      	sub	sp, #12
 8012b24:	af00      	add	r7, sp, #0
	Motor_Expected_Speeds[2] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 8012b26:	4b50      	ldr	r3, [pc, #320]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b28:	ed93 7a00 	vldr	s14, [r3]
 8012b2c:	4b4e      	ldr	r3, [pc, #312]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b36:	4b4d      	ldr	r3, [pc, #308]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012b38:	edc3 7a02 	vstr	s15, [r3, #8]
	Motor_Expected_Speeds[0] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 8012b3c:	4b4a      	ldr	r3, [pc, #296]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b3e:	ed93 7a00 	vldr	s14, [r3]
 8012b42:	4b49      	ldr	r3, [pc, #292]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b4c:	4b47      	ldr	r3, [pc, #284]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012b4e:	edc3 7a00 	vstr	s15, [r3]
	Motor_Expected_Speeds[1] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 8012b52:	4b45      	ldr	r3, [pc, #276]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b54:	ed93 7a00 	vldr	s14, [r3]
 8012b58:	4b43      	ldr	r3, [pc, #268]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b62:	4b42      	ldr	r3, [pc, #264]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012b64:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Speeds[3] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 8012b68:	4b3f      	ldr	r3, [pc, #252]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b6a:	ed93 7a00 	vldr	s14, [r3]
 8012b6e:	4b3e      	ldr	r3, [pc, #248]	; (8012c68 <Transform_AxisSpeed+0x148>)
 8012b70:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b78:	4b3c      	ldr	r3, [pc, #240]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012b7a:	edc3 7a03 	vstr	s15, [r3, #12]

	//输出饱和
	for (int var = 0; var < Motor_Number; ++var)
 8012b7e:	2300      	movs	r3, #0
 8012b80:	607b      	str	r3, [r7, #4]
 8012b82:	e067      	b.n	8012c54 <Transform_AxisSpeed+0x134>
	{
		if (Motor_Expected_Speeds[var] < 0)
 8012b84:	4a39      	ldr	r2, [pc, #228]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	4413      	add	r3, r2
 8012b8c:	edd3 7a00 	vldr	s15, [r3]
 8012b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	d527      	bpl.n	8012bea <Transform_AxisSpeed+0xca>
		{
			if (Motor_Expected_Speeds[var] < -Motor_Expected_Speed_Max)
 8012b9a:	4a34      	ldr	r2, [pc, #208]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	009b      	lsls	r3, r3, #2
 8012ba0:	4413      	add	r3, r2
 8012ba2:	edd3 7a00 	vldr	s15, [r3]
 8012ba6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012c70 <Transform_AxisSpeed+0x150>
 8012baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb2:	d506      	bpl.n	8012bc2 <Transform_AxisSpeed+0xa2>
			{
				Motor_Expected_Speeds[var] = -Motor_Expected_Speed_Max;
 8012bb4:	4a2d      	ldr	r2, [pc, #180]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	4413      	add	r3, r2
 8012bbc:	4a2d      	ldr	r2, [pc, #180]	; (8012c74 <Transform_AxisSpeed+0x154>)
 8012bbe:	601a      	str	r2, [r3, #0]
 8012bc0:	e045      	b.n	8012c4e <Transform_AxisSpeed+0x12e>
			}
			else if (Motor_Expected_Speeds[var] > -Motor_Expected_Speed_Min)
 8012bc2:	4a2a      	ldr	r2, [pc, #168]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	009b      	lsls	r3, r3, #2
 8012bc8:	4413      	add	r3, r2
 8012bca:	edd3 7a00 	vldr	s15, [r3]
 8012bce:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8012bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bda:	dd38      	ble.n	8012c4e <Transform_AxisSpeed+0x12e>
			{
				Motor_Expected_Speeds[var] = -Motor_Expected_Speed_Min;
 8012bdc:	4a23      	ldr	r2, [pc, #140]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	4413      	add	r3, r2
 8012be4:	4a24      	ldr	r2, [pc, #144]	; (8012c78 <Transform_AxisSpeed+0x158>)
 8012be6:	601a      	str	r2, [r3, #0]
 8012be8:	e031      	b.n	8012c4e <Transform_AxisSpeed+0x12e>
			}
		}
		else if (Motor_Expected_Speeds[var] > 0)
 8012bea:	4a20      	ldr	r2, [pc, #128]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4413      	add	r3, r2
 8012bf2:	edd3 7a00 	vldr	s15, [r3]
 8012bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	dd26      	ble.n	8012c4e <Transform_AxisSpeed+0x12e>
		{
			if (Motor_Expected_Speeds[var] > Motor_Expected_Speed_Max)
 8012c00:	4a1a      	ldr	r2, [pc, #104]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	edd3 7a00 	vldr	s15, [r3]
 8012c0c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8012c7c <Transform_AxisSpeed+0x15c>
 8012c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c18:	dd06      	ble.n	8012c28 <Transform_AxisSpeed+0x108>
			{
				Motor_Expected_Speeds[var] = Motor_Expected_Speed_Max;
 8012c1a:	4a14      	ldr	r2, [pc, #80]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	009b      	lsls	r3, r3, #2
 8012c20:	4413      	add	r3, r2
 8012c22:	4a17      	ldr	r2, [pc, #92]	; (8012c80 <Transform_AxisSpeed+0x160>)
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	e012      	b.n	8012c4e <Transform_AxisSpeed+0x12e>
			}
			else if (Motor_Expected_Speeds[var] < Motor_Expected_Speed_Min)
 8012c28:	4a10      	ldr	r2, [pc, #64]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	009b      	lsls	r3, r3, #2
 8012c2e:	4413      	add	r3, r2
 8012c30:	edd3 7a00 	vldr	s15, [r3]
 8012c34:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8012c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	d505      	bpl.n	8012c4e <Transform_AxisSpeed+0x12e>
			{
				Motor_Expected_Speeds[var] = Motor_Expected_Speed_Min;
 8012c42:	4a0a      	ldr	r2, [pc, #40]	; (8012c6c <Transform_AxisSpeed+0x14c>)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	4413      	add	r3, r2
 8012c4a:	4a0e      	ldr	r2, [pc, #56]	; (8012c84 <Transform_AxisSpeed+0x164>)
 8012c4c:	601a      	str	r2, [r3, #0]
	for (int var = 0; var < Motor_Number; ++var)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	3301      	adds	r3, #1
 8012c52:	607b      	str	r3, [r7, #4]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2b03      	cmp	r3, #3
 8012c58:	dd94      	ble.n	8012b84 <Transform_AxisSpeed+0x64>
			}
		}
	}
}
 8012c5a:	bf00      	nop
 8012c5c:	bf00      	nop
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr
 8012c68:	20001c68 	.word	0x20001c68
 8012c6c:	20001c58 	.word	0x20001c58
 8012c70:	c2a00000 	.word	0xc2a00000
 8012c74:	c2a00000 	.word	0xc2a00000
 8012c78:	c0a00000 	.word	0xc0a00000
 8012c7c:	42a00000 	.word	0x42a00000
 8012c80:	42a00000 	.word	0x42a00000
 8012c84:	40a00000 	.word	0x40a00000

08012c88 <AddCarSpeed>:

//在当前速度的基础上添加 速度
void AddCarSpeed(float vx, float vy, float vz)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8012c92:	edc7 0a02 	vstr	s1, [r7, #8]
 8012c96:	ed87 1a01 	vstr	s2, [r7, #4]
	Motor_Expected_Axis_Speeds[Axis_X] += vx;
 8012c9a:	4b12      	ldr	r3, [pc, #72]	; (8012ce4 <AddCarSpeed+0x5c>)
 8012c9c:	ed93 7a00 	vldr	s14, [r3]
 8012ca0:	edd7 7a03 	vldr	s15, [r7, #12]
 8012ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ca8:	4b0e      	ldr	r3, [pc, #56]	; (8012ce4 <AddCarSpeed+0x5c>)
 8012caa:	edc3 7a00 	vstr	s15, [r3]
	Motor_Expected_Axis_Speeds[Axis_Y] += vy;
 8012cae:	4b0d      	ldr	r3, [pc, #52]	; (8012ce4 <AddCarSpeed+0x5c>)
 8012cb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8012cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8012cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cbc:	4b09      	ldr	r3, [pc, #36]	; (8012ce4 <AddCarSpeed+0x5c>)
 8012cbe:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Axis_Speeds[Axis_Z] += vz;
 8012cc2:	4b08      	ldr	r3, [pc, #32]	; (8012ce4 <AddCarSpeed+0x5c>)
 8012cc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8012cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8012ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cd0:	4b04      	ldr	r3, [pc, #16]	; (8012ce4 <AddCarSpeed+0x5c>)
 8012cd2:	edc3 7a02 	vstr	s15, [r3, #8]

	Transform_AxisSpeed();
 8012cd6:	f7ff ff23 	bl	8012b20 <Transform_AxisSpeed>
}
 8012cda:	bf00      	nop
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20001c68 	.word	0x20001c68

08012ce8 <SetCarSpeed>:

//设置速度
void SetCarSpeed(float vx, float vy, float vz)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	ed87 0a03 	vstr	s0, [r7, #12]
 8012cf2:	edc7 0a02 	vstr	s1, [r7, #8]
 8012cf6:	ed87 1a01 	vstr	s2, [r7, #4]
	Motor_Expected_Axis_Speeds[0] = vx;
 8012cfa:	4a07      	ldr	r2, [pc, #28]	; (8012d18 <SetCarSpeed+0x30>)
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	6013      	str	r3, [r2, #0]
	Motor_Expected_Axis_Speeds[1] = vy;
 8012d00:	4a05      	ldr	r2, [pc, #20]	; (8012d18 <SetCarSpeed+0x30>)
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	6053      	str	r3, [r2, #4]
	Motor_Expected_Axis_Speeds[2] = vz;
 8012d06:	4a04      	ldr	r2, [pc, #16]	; (8012d18 <SetCarSpeed+0x30>)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6093      	str	r3, [r2, #8]

	Transform_AxisSpeed();
 8012d0c:	f7ff ff08 	bl	8012b20 <Transform_AxisSpeed>
}
 8012d10:	bf00      	nop
 8012d12:	3710      	adds	r7, #16
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	20001c68 	.word	0x20001c68

08012d1c <InitMotorPID>:

struct _pid Motor_PID[4];

//初始化PID
void InitMotorPID()
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < Motor_Number; i++)
 8012d22:	2300      	movs	r3, #0
 8012d24:	71fb      	strb	r3, [r7, #7]
 8012d26:	e041      	b.n	8012dac <InitMotorPID+0x90>
	{
		Motor_PID[i].SetSpeed = 0.0;
 8012d28:	79fb      	ldrb	r3, [r7, #7]
 8012d2a:	4a25      	ldr	r2, [pc, #148]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d2c:	015b      	lsls	r3, r3, #5
 8012d2e:	4413      	add	r3, r2
 8012d30:	f04f 0200 	mov.w	r2, #0
 8012d34:	601a      	str	r2, [r3, #0]
		Motor_PID[i].ActualSpeed = 0.0;
 8012d36:	79fb      	ldrb	r3, [r7, #7]
 8012d38:	4a21      	ldr	r2, [pc, #132]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d3a:	015b      	lsls	r3, r3, #5
 8012d3c:	4413      	add	r3, r2
 8012d3e:	3304      	adds	r3, #4
 8012d40:	f04f 0200 	mov.w	r2, #0
 8012d44:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err = 0.0;
 8012d46:	79fb      	ldrb	r3, [r7, #7]
 8012d48:	4a1d      	ldr	r2, [pc, #116]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d4a:	015b      	lsls	r3, r3, #5
 8012d4c:	4413      	add	r3, r2
 8012d4e:	3308      	adds	r3, #8
 8012d50:	f04f 0200 	mov.w	r2, #0
 8012d54:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err_next = 0.0;
 8012d56:	79fb      	ldrb	r3, [r7, #7]
 8012d58:	4a19      	ldr	r2, [pc, #100]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d5a:	015b      	lsls	r3, r3, #5
 8012d5c:	4413      	add	r3, r2
 8012d5e:	330c      	adds	r3, #12
 8012d60:	f04f 0200 	mov.w	r2, #0
 8012d64:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err_last = 0.0;
 8012d66:	79fb      	ldrb	r3, [r7, #7]
 8012d68:	4a15      	ldr	r2, [pc, #84]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d6a:	015b      	lsls	r3, r3, #5
 8012d6c:	4413      	add	r3, r2
 8012d6e:	3310      	adds	r3, #16
 8012d70:	f04f 0200 	mov.w	r2, #0
 8012d74:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Kp = 2;
 8012d76:	79fb      	ldrb	r3, [r7, #7]
 8012d78:	4a11      	ldr	r2, [pc, #68]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d7a:	015b      	lsls	r3, r3, #5
 8012d7c:	4413      	add	r3, r2
 8012d7e:	3314      	adds	r3, #20
 8012d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012d84:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Ki = 4;
 8012d86:	79fb      	ldrb	r3, [r7, #7]
 8012d88:	4a0d      	ldr	r2, [pc, #52]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d8a:	015b      	lsls	r3, r3, #5
 8012d8c:	4413      	add	r3, r2
 8012d8e:	3318      	adds	r3, #24
 8012d90:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8012d94:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Kd = 2;
 8012d96:	79fb      	ldrb	r3, [r7, #7]
 8012d98:	4a09      	ldr	r2, [pc, #36]	; (8012dc0 <InitMotorPID+0xa4>)
 8012d9a:	015b      	lsls	r3, r3, #5
 8012d9c:	4413      	add	r3, r2
 8012d9e:	331c      	adds	r3, #28
 8012da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012da4:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < Motor_Number; i++)
 8012da6:	79fb      	ldrb	r3, [r7, #7]
 8012da8:	3301      	adds	r3, #1
 8012daa:	71fb      	strb	r3, [r7, #7]
 8012dac:	79fb      	ldrb	r3, [r7, #7]
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	d9ba      	bls.n	8012d28 <InitMotorPID+0xc>
	}
}
 8012db2:	bf00      	nop
 8012db4:	bf00      	nop
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	20001c74 	.word	0x20001c74

08012dc4 <PID_realize>:

float PID_realize(struct _pid *pid, float speed, float actualSpeed)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b087      	sub	sp, #28
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8012dd0:	edc7 0a01 	vstr	s1, [r7, #4]
	float incrementSpeed;
	//设置当前值
	pid->SetSpeed = speed;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	68ba      	ldr	r2, [r7, #8]
 8012dd8:	601a      	str	r2, [r3, #0]
	pid->ActualSpeed = actualSpeed;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	605a      	str	r2, [r3, #4]
	//特殊处理 0 速度
	if (speed == 0)
 8012de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8012de4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dec:	d102      	bne.n	8012df4 <PID_realize+0x30>
	{
		return 0;
 8012dee:	f04f 0300 	mov.w	r3, #0
 8012df2:	e04d      	b.n	8012e90 <PID_realize+0xcc>
	}

	pid->err = pid->SetSpeed - pid->ActualSpeed;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	ed93 7a00 	vldr	s14, [r3]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8012e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	edc3 7a02 	vstr	s15, [r3, #8]
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	edd3 6a02 	vldr	s13, [r3, #8]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8012e1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	edd3 6a06 	vldr	s13, [r3, #24]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	edd3 6a07 	vldr	s13, [r3, #28]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	ed93 6a02 	vldr	s12, [r3, #8]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	edd3 7a03 	vldr	s15, [r3, #12]
 8012e4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012e4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	edd3 7a04 	vldr	s15, [r3, #16]
 8012e58:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e64:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->ActualSpeed += incrementSpeed;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8012e6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->err_last = pid->err_next;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	68da      	ldr	r2, [r3, #12]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	611a      	str	r2, [r3, #16]
	pid->err_next = pid->err;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	689a      	ldr	r2, [r3, #8]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	60da      	str	r2, [r3, #12]
	return pid->ActualSpeed;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	685b      	ldr	r3, [r3, #4]
}
 8012e90:	ee07 3a90 	vmov	s15, r3
 8012e94:	eeb0 0a67 	vmov.f32	s0, s15
 8012e98:	371c      	adds	r7, #28
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
	...

08012ea4 <UpdateMotorSpeedPID>:
	return current;
}

//依照PID算法更新电机速度
float UpdateMotorSpeedPID(Motor_Name motor, float speed, float actualSpeed)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b086      	sub	sp, #24
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8012eb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8012eb4:	73fb      	strb	r3, [r7, #15]
	//下一轮应用值
	float ac = 0;
 8012eb6:	f04f 0300 	mov.w	r3, #0
 8012eba:	617b      	str	r3, [r7, #20]
	ac = PID_realize(&Motor_PID[motor], speed, actualSpeed);
 8012ebc:	7bfb      	ldrb	r3, [r7, #15]
 8012ebe:	015b      	lsls	r3, r3, #5
 8012ec0:	4a09      	ldr	r2, [pc, #36]	; (8012ee8 <UpdateMotorSpeedPID+0x44>)
 8012ec2:	4413      	add	r3, r2
 8012ec4:	edd7 0a01 	vldr	s1, [r7, #4]
 8012ec8:	ed97 0a02 	vldr	s0, [r7, #8]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7ff ff79 	bl	8012dc4 <PID_realize>
 8012ed2:	ed87 0a05 	vstr	s0, [r7, #20]
	//判断是否在上下限内
	//ac = LimitSpeed(ac, speed);

	return ac;
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	ee07 3a90 	vmov	s15, r3
}
 8012edc:	eeb0 0a67 	vmov.f32	s0, s15
 8012ee0:	3718      	adds	r7, #24
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	20001c74 	.word	0x20001c74

08012eec <Init_FATFS>:
FATFS fs; /* FatFs文件系统对象 */
FIL file; /* 文件对象 */
FRESULT f_res; /* 文件操作结果 */

void Init_FATFS()
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	af00      	add	r7, sp, #0
	FATFS_LinkDriver(&SD_Driver, SDPath);
 8012ef0:	4909      	ldr	r1, [pc, #36]	; (8012f18 <Init_FATFS+0x2c>)
 8012ef2:	480a      	ldr	r0, [pc, #40]	; (8012f1c <Init_FATFS+0x30>)
 8012ef4:	f7f9 ffd4 	bl	800cea0 <FATFS_LinkDriver>

	//在SD卡挂载文件系统，文件系统挂载时会对SD卡初始化
	f_res = f_mount(&fs, (TCHAR const*) SDPath, 1);
 8012ef8:	2201      	movs	r2, #1
 8012efa:	4907      	ldr	r1, [pc, #28]	; (8012f18 <Init_FATFS+0x2c>)
 8012efc:	4808      	ldr	r0, [pc, #32]	; (8012f20 <Init_FATFS+0x34>)
 8012efe:	f7f9 fc15 	bl	800c72c <f_mount>
 8012f02:	4603      	mov	r3, r0
 8012f04:	461a      	mov	r2, r3
 8012f06:	4b07      	ldr	r3, [pc, #28]	; (8012f24 <Init_FATFS+0x38>)
 8012f08:	701a      	strb	r2, [r3, #0]
	printf_fatfs_error(f_res);
 8012f0a:	4b06      	ldr	r3, [pc, #24]	; (8012f24 <Init_FATFS+0x38>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f000 f80a 	bl	8012f28 <printf_fatfs_error>
}
 8012f14:	bf00      	nop
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	2000129c 	.word	0x2000129c
 8012f1c:	08019b64 	.word	0x08019b64
 8012f20:	20001cf4 	.word	0x20001cf4
 8012f24:	20002144 	.word	0x20002144

08012f28 <printf_fatfs_error>:
 * @brief  打印输出信息
 * @param  无
 * @retval 无
 */
void printf_fatfs_error(FRESULT fresult)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	71fb      	strb	r3, [r7, #7]
	switch (fresult)
 8012f32:	79fb      	ldrb	r3, [r7, #7]
 8012f34:	2b13      	cmp	r3, #19
 8012f36:	f200 80c3 	bhi.w	80130c0 <printf_fatfs_error+0x198>
 8012f3a:	a201      	add	r2, pc, #4	; (adr r2, 8012f40 <printf_fatfs_error+0x18>)
 8012f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f40:	08012f91 	.word	0x08012f91
 8012f44:	08012fa1 	.word	0x08012fa1
 8012f48:	08012fb1 	.word	0x08012fb1
 8012f4c:	08012fc1 	.word	0x08012fc1
 8012f50:	08012fd1 	.word	0x08012fd1
 8012f54:	08012fe1 	.word	0x08012fe1
 8012f58:	08012ff1 	.word	0x08012ff1
 8012f5c:	08013001 	.word	0x08013001
 8012f60:	08013001 	.word	0x08013001
 8012f64:	08013011 	.word	0x08013011
 8012f68:	08013021 	.word	0x08013021
 8012f6c:	08013031 	.word	0x08013031
 8012f70:	08013041 	.word	0x08013041
 8012f74:	08013051 	.word	0x08013051
 8012f78:	08013061 	.word	0x08013061
 8012f7c:	08013071 	.word	0x08013071
 8012f80:	08013081 	.word	0x08013081
 8012f84:	08013091 	.word	0x08013091
 8012f88:	080130a1 	.word	0x080130a1
 8012f8c:	080130b1 	.word	0x080130b1
	{
		case FR_OK:
			printfX("》操作成功。\r\n");
 8012f90:	494d      	ldr	r1, [pc, #308]	; (80130c8 <printf_fatfs_error+0x1a0>)
 8012f92:	484e      	ldr	r0, [pc, #312]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012f94:	f001 fe8a 	bl	8014cac <siprintf>
 8012f98:	484c      	ldr	r0, [pc, #304]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012f9a:	f000 ff1f 	bl	8013ddc <printf_Base>
			break;
 8012f9e:	e08f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_DISK_ERR:
			printfX("！！硬件输入输出驱动出错。\r\n");
 8012fa0:	494b      	ldr	r1, [pc, #300]	; (80130d0 <printf_fatfs_error+0x1a8>)
 8012fa2:	484a      	ldr	r0, [pc, #296]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fa4:	f001 fe82 	bl	8014cac <siprintf>
 8012fa8:	4848      	ldr	r0, [pc, #288]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012faa:	f000 ff17 	bl	8013ddc <printf_Base>
			break;
 8012fae:	e087      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_INT_ERR:
			printfX("！！断言错误。\r\n");
 8012fb0:	4948      	ldr	r1, [pc, #288]	; (80130d4 <printf_fatfs_error+0x1ac>)
 8012fb2:	4846      	ldr	r0, [pc, #280]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fb4:	f001 fe7a 	bl	8014cac <siprintf>
 8012fb8:	4844      	ldr	r0, [pc, #272]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fba:	f000 ff0f 	bl	8013ddc <printf_Base>
			break;
 8012fbe:	e07f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_NOT_READY:
			printfX("！！物理设备无法工作。\r\n");
 8012fc0:	4945      	ldr	r1, [pc, #276]	; (80130d8 <printf_fatfs_error+0x1b0>)
 8012fc2:	4842      	ldr	r0, [pc, #264]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fc4:	f001 fe72 	bl	8014cac <siprintf>
 8012fc8:	4840      	ldr	r0, [pc, #256]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fca:	f000 ff07 	bl	8013ddc <printf_Base>
			break;
 8012fce:	e077      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_NO_FILE:
			printfX("！！无法找到文件。\r\n");
 8012fd0:	4942      	ldr	r1, [pc, #264]	; (80130dc <printf_fatfs_error+0x1b4>)
 8012fd2:	483e      	ldr	r0, [pc, #248]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fd4:	f001 fe6a 	bl	8014cac <siprintf>
 8012fd8:	483c      	ldr	r0, [pc, #240]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fda:	f000 feff 	bl	8013ddc <printf_Base>
			break;
 8012fde:	e06f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_NO_PATH:
			printfX("！！无法找到路径。\r\n");
 8012fe0:	493f      	ldr	r1, [pc, #252]	; (80130e0 <printf_fatfs_error+0x1b8>)
 8012fe2:	483a      	ldr	r0, [pc, #232]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fe4:	f001 fe62 	bl	8014cac <siprintf>
 8012fe8:	4838      	ldr	r0, [pc, #224]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012fea:	f000 fef7 	bl	8013ddc <printf_Base>
			break;
 8012fee:	e067      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_INVALID_NAME:
			printfX("！！无效的路径名。\r\n");
 8012ff0:	493c      	ldr	r1, [pc, #240]	; (80130e4 <printf_fatfs_error+0x1bc>)
 8012ff2:	4836      	ldr	r0, [pc, #216]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012ff4:	f001 fe5a 	bl	8014cac <siprintf>
 8012ff8:	4834      	ldr	r0, [pc, #208]	; (80130cc <printf_fatfs_error+0x1a4>)
 8012ffa:	f000 feef 	bl	8013ddc <printf_Base>
			break;
 8012ffe:	e05f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_DENIED:
		case FR_EXIST:
			printfX("！！拒绝访问。\r\n");
 8013000:	4939      	ldr	r1, [pc, #228]	; (80130e8 <printf_fatfs_error+0x1c0>)
 8013002:	4832      	ldr	r0, [pc, #200]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013004:	f001 fe52 	bl	8014cac <siprintf>
 8013008:	4830      	ldr	r0, [pc, #192]	; (80130cc <printf_fatfs_error+0x1a4>)
 801300a:	f000 fee7 	bl	8013ddc <printf_Base>
			break;
 801300e:	e057      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_INVALID_OBJECT:
			printfX("！！无效的文件或路径。\r\n");
 8013010:	4936      	ldr	r1, [pc, #216]	; (80130ec <printf_fatfs_error+0x1c4>)
 8013012:	482e      	ldr	r0, [pc, #184]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013014:	f001 fe4a 	bl	8014cac <siprintf>
 8013018:	482c      	ldr	r0, [pc, #176]	; (80130cc <printf_fatfs_error+0x1a4>)
 801301a:	f000 fedf 	bl	8013ddc <printf_Base>
			break;
 801301e:	e04f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_WRITE_PROTECTED:
			printfX("！！逻辑设备写保护。\r\n");
 8013020:	4933      	ldr	r1, [pc, #204]	; (80130f0 <printf_fatfs_error+0x1c8>)
 8013022:	482a      	ldr	r0, [pc, #168]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013024:	f001 fe42 	bl	8014cac <siprintf>
 8013028:	4828      	ldr	r0, [pc, #160]	; (80130cc <printf_fatfs_error+0x1a4>)
 801302a:	f000 fed7 	bl	8013ddc <printf_Base>
			break;
 801302e:	e047      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_INVALID_DRIVE:
			printfX("！！无效的逻辑设备。\r\n");
 8013030:	4930      	ldr	r1, [pc, #192]	; (80130f4 <printf_fatfs_error+0x1cc>)
 8013032:	4826      	ldr	r0, [pc, #152]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013034:	f001 fe3a 	bl	8014cac <siprintf>
 8013038:	4824      	ldr	r0, [pc, #144]	; (80130cc <printf_fatfs_error+0x1a4>)
 801303a:	f000 fecf 	bl	8013ddc <printf_Base>
			break;
 801303e:	e03f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_NOT_ENABLED:
			printfX("！！无效的工作区。\r\n");
 8013040:	492d      	ldr	r1, [pc, #180]	; (80130f8 <printf_fatfs_error+0x1d0>)
 8013042:	4822      	ldr	r0, [pc, #136]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013044:	f001 fe32 	bl	8014cac <siprintf>
 8013048:	4820      	ldr	r0, [pc, #128]	; (80130cc <printf_fatfs_error+0x1a4>)
 801304a:	f000 fec7 	bl	8013ddc <printf_Base>
			break;
 801304e:	e037      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_NO_FILESYSTEM:
			printfX("！！无效的文件系统。\r\n");
 8013050:	492a      	ldr	r1, [pc, #168]	; (80130fc <printf_fatfs_error+0x1d4>)
 8013052:	481e      	ldr	r0, [pc, #120]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013054:	f001 fe2a 	bl	8014cac <siprintf>
 8013058:	481c      	ldr	r0, [pc, #112]	; (80130cc <printf_fatfs_error+0x1a4>)
 801305a:	f000 febf 	bl	8013ddc <printf_Base>
			break;
 801305e:	e02f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_MKFS_ABORTED:
			printfX("！！因函数参数问题导致f_mkfs函数操作失败。\r\n");
 8013060:	4927      	ldr	r1, [pc, #156]	; (8013100 <printf_fatfs_error+0x1d8>)
 8013062:	481a      	ldr	r0, [pc, #104]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013064:	f001 fe22 	bl	8014cac <siprintf>
 8013068:	4818      	ldr	r0, [pc, #96]	; (80130cc <printf_fatfs_error+0x1a4>)
 801306a:	f000 feb7 	bl	8013ddc <printf_Base>
			break;
 801306e:	e027      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_TIMEOUT:
			printfX("！！操作超时。\r\n");
 8013070:	4924      	ldr	r1, [pc, #144]	; (8013104 <printf_fatfs_error+0x1dc>)
 8013072:	4816      	ldr	r0, [pc, #88]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013074:	f001 fe1a 	bl	8014cac <siprintf>
 8013078:	4814      	ldr	r0, [pc, #80]	; (80130cc <printf_fatfs_error+0x1a4>)
 801307a:	f000 feaf 	bl	8013ddc <printf_Base>
			break;
 801307e:	e01f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_LOCKED:
			printfX("！！文件被保护。\r\n");
 8013080:	4921      	ldr	r1, [pc, #132]	; (8013108 <printf_fatfs_error+0x1e0>)
 8013082:	4812      	ldr	r0, [pc, #72]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013084:	f001 fe12 	bl	8014cac <siprintf>
 8013088:	4810      	ldr	r0, [pc, #64]	; (80130cc <printf_fatfs_error+0x1a4>)
 801308a:	f000 fea7 	bl	8013ddc <printf_Base>
			break;
 801308e:	e017      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_NOT_ENOUGH_CORE:
			printfX("！！长文件名支持获取堆空间失败。\r\n");
 8013090:	491e      	ldr	r1, [pc, #120]	; (801310c <printf_fatfs_error+0x1e4>)
 8013092:	480e      	ldr	r0, [pc, #56]	; (80130cc <printf_fatfs_error+0x1a4>)
 8013094:	f001 fe0a 	bl	8014cac <siprintf>
 8013098:	480c      	ldr	r0, [pc, #48]	; (80130cc <printf_fatfs_error+0x1a4>)
 801309a:	f000 fe9f 	bl	8013ddc <printf_Base>
			break;
 801309e:	e00f      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_TOO_MANY_OPEN_FILES:
			printfX("！！打开太多文件。\r\n");
 80130a0:	491b      	ldr	r1, [pc, #108]	; (8013110 <printf_fatfs_error+0x1e8>)
 80130a2:	480a      	ldr	r0, [pc, #40]	; (80130cc <printf_fatfs_error+0x1a4>)
 80130a4:	f001 fe02 	bl	8014cac <siprintf>
 80130a8:	4808      	ldr	r0, [pc, #32]	; (80130cc <printf_fatfs_error+0x1a4>)
 80130aa:	f000 fe97 	bl	8013ddc <printf_Base>
			break;
 80130ae:	e007      	b.n	80130c0 <printf_fatfs_error+0x198>
		case FR_INVALID_PARAMETER:
			printfX("！！参数无效。\r\n");
 80130b0:	4918      	ldr	r1, [pc, #96]	; (8013114 <printf_fatfs_error+0x1ec>)
 80130b2:	4806      	ldr	r0, [pc, #24]	; (80130cc <printf_fatfs_error+0x1a4>)
 80130b4:	f001 fdfa 	bl	8014cac <siprintf>
 80130b8:	4804      	ldr	r0, [pc, #16]	; (80130cc <printf_fatfs_error+0x1a4>)
 80130ba:	f000 fe8f 	bl	8013ddc <printf_Base>
			break;
 80130be:	bf00      	nop
	}
}
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	080197f8 	.word	0x080197f8
 80130cc:	20001308 	.word	0x20001308
 80130d0:	08019810 	.word	0x08019810
 80130d4:	0801983c 	.word	0x0801983c
 80130d8:	08019854 	.word	0x08019854
 80130dc:	08019878 	.word	0x08019878
 80130e0:	08019898 	.word	0x08019898
 80130e4:	080198b8 	.word	0x080198b8
 80130e8:	080198d8 	.word	0x080198d8
 80130ec:	080198f0 	.word	0x080198f0
 80130f0:	08019914 	.word	0x08019914
 80130f4:	08019938 	.word	0x08019938
 80130f8:	0801995c 	.word	0x0801995c
 80130fc:	0801997c 	.word	0x0801997c
 8013100:	080199a0 	.word	0x080199a0
 8013104:	080199e0 	.word	0x080199e0
 8013108:	080199f8 	.word	0x080199f8
 801310c:	08019a14 	.word	0x08019a14
 8013110:	08019a48 	.word	0x08019a48
 8013114:	08019a68 	.word	0x08019a68

08013118 <Periodic_Update_BreathingLights>:
uint8_t LED1_DirInc;
uint16_t LED1_Pulsewidth;

//周期调用 更新呼吸灯
void Periodic_Update_BreathingLights()
{
 8013118:	b480      	push	{r7}
 801311a:	af00      	add	r7, sp, #0
	if (LED1_DirInc == 0) //脉宽递增
 801311c:	4b15      	ldr	r3, [pc, #84]	; (8013174 <Periodic_Update_BreathingLights+0x5c>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10f      	bne.n	8013144 <Periodic_Update_BreathingLights+0x2c>
	{
		LED1_Pulsewidth++;
 8013124:	4b14      	ldr	r3, [pc, #80]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 8013126:	881b      	ldrh	r3, [r3, #0]
 8013128:	3301      	adds	r3, #1
 801312a:	b29a      	uxth	r2, r3
 801312c:	4b12      	ldr	r3, [pc, #72]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 801312e:	801a      	strh	r2, [r3, #0]
		if (LED1_Pulsewidth >= 999)
 8013130:	4b11      	ldr	r3, [pc, #68]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 8013132:	881b      	ldrh	r3, [r3, #0]
 8013134:	f240 32e6 	movw	r2, #998	; 0x3e6
 8013138:	4293      	cmp	r3, r2
 801313a:	d910      	bls.n	801315e <Periodic_Update_BreathingLights+0x46>
		{
			LED1_DirInc = 1; //脉宽递减
 801313c:	4b0d      	ldr	r3, [pc, #52]	; (8013174 <Periodic_Update_BreathingLights+0x5c>)
 801313e:	2201      	movs	r2, #1
 8013140:	701a      	strb	r2, [r3, #0]
 8013142:	e00c      	b.n	801315e <Periodic_Update_BreathingLights+0x46>
		}
	}
	else
	{
		LED1_Pulsewidth--;
 8013144:	4b0c      	ldr	r3, [pc, #48]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	3b01      	subs	r3, #1
 801314a:	b29a      	uxth	r2, r3
 801314c:	4b0a      	ldr	r3, [pc, #40]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 801314e:	801a      	strh	r2, [r3, #0]
		if (LED1_Pulsewidth <= 1)
 8013150:	4b09      	ldr	r3, [pc, #36]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	2b01      	cmp	r3, #1
 8013156:	d802      	bhi.n	801315e <Periodic_Update_BreathingLights+0x46>
		{
			LED1_DirInc = 0; //脉宽递增
 8013158:	4b06      	ldr	r3, [pc, #24]	; (8013174 <Periodic_Update_BreathingLights+0x5c>)
 801315a:	2200      	movs	r2, #0
 801315c:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, LED1_Pulsewidth); //设置CCR的
 801315e:	4b06      	ldr	r3, [pc, #24]	; (8013178 <Periodic_Update_BreathingLights+0x60>)
 8013160:	881a      	ldrh	r2, [r3, #0]
 8013162:	4b06      	ldr	r3, [pc, #24]	; (801317c <Periodic_Update_BreathingLights+0x64>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	635a      	str	r2, [r3, #52]	; 0x34
}
 8013168:	bf00      	nop
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop
 8013174:	20002145 	.word	0x20002145
 8013178:	20002146 	.word	0x20002146
 801317c:	200011c4 	.word	0x200011c4

08013180 <SPI_WriteByte>:
 * @param    TxData 要发送的数据
 * @param    size   发送数据的字节大小
 * @return  0:写入成功,其他:写入失败
 */
uint8_t SPI_WriteByte(uint8_t *TxData, uint16_t size)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	460b      	mov	r3, r1
 801318a:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
 801318c:	887a      	ldrh	r2, [r7, #2]
 801318e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013192:	6879      	ldr	r1, [r7, #4]
 8013194:	4803      	ldr	r0, [pc, #12]	; (80131a4 <SPI_WriteByte+0x24>)
 8013196:	f7f4 fb47 	bl	8007828 <HAL_SPI_Transmit>
 801319a:	4603      	mov	r3, r0
	//return HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);

}
 801319c:	4618      	mov	r0, r3
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	20000e80 	.word	0x20000e80

080131a8 <SPI_WriteByte_DMA>:
void SPI_WriteByte_DMA(uint8_t *TxData, uint16_t size)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	460b      	mov	r3, r1
 80131b2:	807b      	strh	r3, [r7, #2]
	//return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
	HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);
 80131b4:	887b      	ldrh	r3, [r7, #2]
 80131b6:	461a      	mov	r2, r3
 80131b8:	6879      	ldr	r1, [r7, #4]
 80131ba:	4803      	ldr	r0, [pc, #12]	; (80131c8 <SPI_WriteByte_DMA+0x20>)
 80131bc:	f7f4 fc70 	bl	8007aa0 <HAL_SPI_Transmit_DMA>

}
 80131c0:	bf00      	nop
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	20000e80 	.word	0x20000e80

080131cc <LCD_Write_Cmd>:
 * @brief   写命令到LCD
 * @param   cmd —— 需要发送的命令
 * @return  none
 */
static void LCD_Write_Cmd(uint8_t cmd)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	4603      	mov	r3, r0
 80131d4:	71fb      	strb	r3, [r7, #7]
	LCD_WR_RS(0);
 80131d6:	2200      	movs	r2, #0
 80131d8:	2140      	movs	r1, #64	; 0x40
 80131da:	4806      	ldr	r0, [pc, #24]	; (80131f4 <LCD_Write_Cmd+0x28>)
 80131dc:	f7f1 fac6 	bl	800476c <HAL_GPIO_WritePin>
	SPI_WriteByte(&cmd, 1);
 80131e0:	1dfb      	adds	r3, r7, #7
 80131e2:	2101      	movs	r1, #1
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7ff ffcb 	bl	8013180 <SPI_WriteByte>
}
 80131ea:	bf00      	nop
 80131ec:	3708      	adds	r7, #8
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	40021800 	.word	0x40021800

080131f8 <LCD_Write_Data>:
 * @brief   写数据到LCD
 * @param   dat —— 需要发送的数据
 * @return  none
 */
static void LCD_Write_Data(uint8_t dat)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	71fb      	strb	r3, [r7, #7]
	LCD_WR_RS(1);
 8013202:	2201      	movs	r2, #1
 8013204:	2140      	movs	r1, #64	; 0x40
 8013206:	4806      	ldr	r0, [pc, #24]	; (8013220 <LCD_Write_Data+0x28>)
 8013208:	f7f1 fab0 	bl	800476c <HAL_GPIO_WritePin>
	SPI_WriteByte(&dat, 1);
 801320c:	1dfb      	adds	r3, r7, #7
 801320e:	2101      	movs	r1, #1
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff ffb5 	bl	8013180 <SPI_WriteByte>
}
 8013216:	bf00      	nop
 8013218:	3708      	adds	r7, #8
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	40021800 	.word	0x40021800

08013224 <LCD_Write_2Bytes>:
 * @brief  写16位的数据（两个字节）到LCD
 * @param   dat —— 需要发送的16bit数据
 * @return  none
 */
void LCD_Write_2Bytes(const uint16_t dat)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	4603      	mov	r3, r0
 801322c:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2] = { 0 };
 801322e:	2300      	movs	r3, #0
 8013230:	81bb      	strh	r3, [r7, #12]

	data[0] = dat >> 8;
 8013232:	88fb      	ldrh	r3, [r7, #6]
 8013234:	0a1b      	lsrs	r3, r3, #8
 8013236:	b29b      	uxth	r3, r3
 8013238:	b2db      	uxtb	r3, r3
 801323a:	733b      	strb	r3, [r7, #12]
	LCD_Write_Data(data[0]);
 801323c:	7b3b      	ldrb	r3, [r7, #12]
 801323e:	4618      	mov	r0, r3
 8013240:	f7ff ffda 	bl	80131f8 <LCD_Write_Data>
	data[1] = dat;
 8013244:	88fb      	ldrh	r3, [r7, #6]
 8013246:	b2db      	uxtb	r3, r3
 8013248:	737b      	strb	r3, [r7, #13]
	LCD_Write_Data(data[1]);
 801324a:	7b7b      	ldrb	r3, [r7, #13]
 801324c:	4618      	mov	r0, r3
 801324e:	f7ff ffd3 	bl	80131f8 <LCD_Write_Data>

	//SPI_WriteByte((uint8_t*) data, 2);
}
 8013252:	bf00      	nop
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <LCD_Address_Set>:
 * @param   x1,y1   —— 起点坐标
 * @param   x2,y2   —— 终点坐标
 * @return  none
 */
void LCD_Address_Set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801325a:	b590      	push	{r4, r7, lr}
 801325c:	b083      	sub	sp, #12
 801325e:	af00      	add	r7, sp, #0
 8013260:	4604      	mov	r4, r0
 8013262:	4608      	mov	r0, r1
 8013264:	4611      	mov	r1, r2
 8013266:	461a      	mov	r2, r3
 8013268:	4623      	mov	r3, r4
 801326a:	80fb      	strh	r3, [r7, #6]
 801326c:	4603      	mov	r3, r0
 801326e:	80bb      	strh	r3, [r7, #4]
 8013270:	460b      	mov	r3, r1
 8013272:	807b      	strh	r3, [r7, #2]
 8013274:	4613      	mov	r3, r2
 8013276:	803b      	strh	r3, [r7, #0]
	/* 指定X方向操作区域 */
	LCD_Write_Cmd(0x2a);
 8013278:	202a      	movs	r0, #42	; 0x2a
 801327a:	f7ff ffa7 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(x1 >> 8);
 801327e:	88fb      	ldrh	r3, [r7, #6]
 8013280:	0a1b      	lsrs	r3, r3, #8
 8013282:	b29b      	uxth	r3, r3
 8013284:	b2db      	uxtb	r3, r3
 8013286:	4618      	mov	r0, r3
 8013288:	f7ff ffb6 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(x1);
 801328c:	88fb      	ldrh	r3, [r7, #6]
 801328e:	b2db      	uxtb	r3, r3
 8013290:	4618      	mov	r0, r3
 8013292:	f7ff ffb1 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(x2 >> 8);
 8013296:	887b      	ldrh	r3, [r7, #2]
 8013298:	0a1b      	lsrs	r3, r3, #8
 801329a:	b29b      	uxth	r3, r3
 801329c:	b2db      	uxtb	r3, r3
 801329e:	4618      	mov	r0, r3
 80132a0:	f7ff ffaa 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(x2);
 80132a4:	887b      	ldrh	r3, [r7, #2]
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7ff ffa5 	bl	80131f8 <LCD_Write_Data>

	/* 指定Y方向操作区域 */
	LCD_Write_Cmd(0x2b);
 80132ae:	202b      	movs	r0, #43	; 0x2b
 80132b0:	f7ff ff8c 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(y1 >> 8);
 80132b4:	88bb      	ldrh	r3, [r7, #4]
 80132b6:	0a1b      	lsrs	r3, r3, #8
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff ff9b 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(y1);
 80132c2:	88bb      	ldrh	r3, [r7, #4]
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff ff96 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(y2 >> 8);
 80132cc:	883b      	ldrh	r3, [r7, #0]
 80132ce:	0a1b      	lsrs	r3, r3, #8
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7ff ff8f 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(y2);
 80132da:	883b      	ldrh	r3, [r7, #0]
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	4618      	mov	r0, r3
 80132e0:	f7ff ff8a 	bl	80131f8 <LCD_Write_Data>

	/* 发送该命令，LCD开始等待接收显存数据 */
	LCD_Write_Cmd(0x2C);
 80132e4:	202c      	movs	r0, #44	; 0x2c
 80132e6:	f7ff ff71 	bl	80131cc <LCD_Write_Cmd>
}
 80132ea:	bf00      	nop
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd90      	pop	{r4, r7, pc}
	...

080132f4 <LCD_Clear>:
 * @brief   以一种颜色清空LCD屏
 * @param   color —— 清屏颜色(16bit)
 * @return  none
 */
void LCD_Clear(uint16_t color)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b084      	sub	sp, #16
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	4603      	mov	r3, r0
 80132fc:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	uint8_t data[2] = { 0 };  //color是16bit的，每个像素点需要两个字节的显存
 80132fe:	2300      	movs	r3, #0
 8013300:	813b      	strh	r3, [r7, #8]

	/* 将16bit的color值分开为两个单独的字节 */
	data[0] = color >> 8;
 8013302:	88fb      	ldrh	r3, [r7, #6]
 8013304:	0a1b      	lsrs	r3, r3, #8
 8013306:	b29b      	uxth	r3, r3
 8013308:	b2db      	uxtb	r3, r3
 801330a:	723b      	strb	r3, [r7, #8]
	data[1] = color;
 801330c:	88fb      	ldrh	r3, [r7, #6]
 801330e:	b2db      	uxtb	r3, r3
 8013310:	727b      	strb	r3, [r7, #9]

	/* 显存的值需要逐字节写入 */
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 8013312:	2300      	movs	r3, #0
 8013314:	81bb      	strh	r3, [r7, #12]
 8013316:	e00d      	b.n	8013334 <LCD_Clear+0x40>
	{
		lcd_buf[j * 2] = data[0];
 8013318:	89bb      	ldrh	r3, [r7, #12]
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	7a39      	ldrb	r1, [r7, #8]
 801331e:	4a16      	ldr	r2, [pc, #88]	; (8013378 <LCD_Clear+0x84>)
 8013320:	54d1      	strb	r1, [r2, r3]
		lcd_buf[j * 2 + 1] = data[1];
 8013322:	89bb      	ldrh	r3, [r7, #12]
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	3301      	adds	r3, #1
 8013328:	7a79      	ldrb	r1, [r7, #9]
 801332a:	4a13      	ldr	r2, [pc, #76]	; (8013378 <LCD_Clear+0x84>)
 801332c:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 801332e:	89bb      	ldrh	r3, [r7, #12]
 8013330:	3301      	adds	r3, #1
 8013332:	81bb      	strh	r3, [r7, #12]
 8013334:	89bb      	ldrh	r3, [r7, #12]
 8013336:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801333a:	d3ed      	bcc.n	8013318 <LCD_Clear+0x24>
	}
	/* 指定显存操作地址为全屏幕 */
	LCD_Address_Set(0, 0, LCD_Width - 1, LCD_Height - 1);
 801333c:	23ef      	movs	r3, #239	; 0xef
 801333e:	22ef      	movs	r2, #239	; 0xef
 8013340:	2100      	movs	r1, #0
 8013342:	2000      	movs	r0, #0
 8013344:	f7ff ff89 	bl	801325a <LCD_Address_Set>
	/* 指定接下来的数据为数据 */
	LCD_WR_RS(1);
 8013348:	2201      	movs	r2, #1
 801334a:	2140      	movs	r1, #64	; 0x40
 801334c:	480b      	ldr	r0, [pc, #44]	; (801337c <LCD_Clear+0x88>)
 801334e:	f7f1 fa0d 	bl	800476c <HAL_GPIO_WritePin>
	/* 将显存缓冲区的数据全部写入缓冲区 */
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 8013352:	2300      	movs	r3, #0
 8013354:	81fb      	strh	r3, [r7, #14]
 8013356:	e007      	b.n	8013368 <LCD_Clear+0x74>
	{
		SPI_WriteByte(lcd_buf, (uint16_t) LCD_Buf_Size);
 8013358:	f44f 6190 	mov.w	r1, #1152	; 0x480
 801335c:	4806      	ldr	r0, [pc, #24]	; (8013378 <LCD_Clear+0x84>)
 801335e:	f7ff ff0f 	bl	8013180 <SPI_WriteByte>
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 8013362:	89fb      	ldrh	r3, [r7, #14]
 8013364:	3301      	adds	r3, #1
 8013366:	81fb      	strh	r3, [r7, #14]
 8013368:	89fb      	ldrh	r3, [r7, #14]
 801336a:	2b63      	cmp	r3, #99	; 0x63
 801336c:	d9f4      	bls.n	8013358 <LCD_Clear+0x64>
	}
}
 801336e:	bf00      	nop
 8013370:	bf00      	nop
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	20002148 	.word	0x20002148
 801337c:	40021800 	.word	0x40021800

08013380 <LCD_Init>:
 * @brief   LCD初始化
 * @param   none
 * @return  none
 */
void LCD_Init(void)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	af00      	add	r7, sp, #0
	/* 初始化和LCD通信的引脚 */
	/* 复位LCD */
	LCD_PWR(0);
 8013384:	2200      	movs	r2, #0
 8013386:	2110      	movs	r1, #16
 8013388:	486a      	ldr	r0, [pc, #424]	; (8013534 <LCD_Init+0x1b4>)
 801338a:	f7f1 f9ef 	bl	800476c <HAL_GPIO_WritePin>
	LCD_RST(0);
 801338e:	2200      	movs	r2, #0
 8013390:	2120      	movs	r1, #32
 8013392:	4868      	ldr	r0, [pc, #416]	; (8013534 <LCD_Init+0x1b4>)
 8013394:	f7f1 f9ea 	bl	800476c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8013398:	2064      	movs	r0, #100	; 0x64
 801339a:	f7ef ff23 	bl	80031e4 <HAL_Delay>
	LCD_RST(1);
 801339e:	2201      	movs	r2, #1
 80133a0:	2120      	movs	r1, #32
 80133a2:	4864      	ldr	r0, [pc, #400]	; (8013534 <LCD_Init+0x1b4>)
 80133a4:	f7f1 f9e2 	bl	800476c <HAL_GPIO_WritePin>

	HAL_Delay(120);
 80133a8:	2078      	movs	r0, #120	; 0x78
 80133aa:	f7ef ff1b 	bl	80031e4 <HAL_Delay>

	/* 关闭睡眠模式 */
	LCD_Write_Cmd(0x11);
 80133ae:	2011      	movs	r0, #17
 80133b0:	f7ff ff0c 	bl	80131cc <LCD_Write_Cmd>
	HAL_Delay(120);
 80133b4:	2078      	movs	r0, #120	; 0x78
 80133b6:	f7ef ff15 	bl	80031e4 <HAL_Delay>

	/* 开始设置显存扫描模式，数据格式等 */
	LCD_Write_Cmd(0x36);
 80133ba:	2036      	movs	r0, #54	; 0x36
 80133bc:	f7ff ff06 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 80133c0:	2000      	movs	r0, #0
 80133c2:	f7ff ff19 	bl	80131f8 <LCD_Write_Data>
	/* RGB 5-6-5-bit格式  */
	LCD_Write_Cmd(0x3A);
 80133c6:	203a      	movs	r0, #58	; 0x3a
 80133c8:	f7ff ff00 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x65);
 80133cc:	2065      	movs	r0, #101	; 0x65
 80133ce:	f7ff ff13 	bl	80131f8 <LCD_Write_Data>
	/* porch 设置 */
	LCD_Write_Cmd(0xB2);
 80133d2:	20b2      	movs	r0, #178	; 0xb2
 80133d4:	f7ff fefa 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x0C);
 80133d8:	200c      	movs	r0, #12
 80133da:	f7ff ff0d 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 80133de:	200c      	movs	r0, #12
 80133e0:	f7ff ff0a 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 80133e4:	2000      	movs	r0, #0
 80133e6:	f7ff ff07 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 80133ea:	2033      	movs	r0, #51	; 0x33
 80133ec:	f7ff ff04 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 80133f0:	2033      	movs	r0, #51	; 0x33
 80133f2:	f7ff ff01 	bl	80131f8 <LCD_Write_Data>
	/* VGH设置 */
	LCD_Write_Cmd(0xB7);
 80133f6:	20b7      	movs	r0, #183	; 0xb7
 80133f8:	f7ff fee8 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x72);
 80133fc:	2072      	movs	r0, #114	; 0x72
 80133fe:	f7ff fefb 	bl	80131f8 <LCD_Write_Data>
	/* VCOM 设置 */
	LCD_Write_Cmd(0xBB);
 8013402:	20bb      	movs	r0, #187	; 0xbb
 8013404:	f7ff fee2 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x3D);
 8013408:	203d      	movs	r0, #61	; 0x3d
 801340a:	f7ff fef5 	bl	80131f8 <LCD_Write_Data>
	/* LCM 设置 */
	LCD_Write_Cmd(0xC0);
 801340e:	20c0      	movs	r0, #192	; 0xc0
 8013410:	f7ff fedc 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x2C);
 8013414:	202c      	movs	r0, #44	; 0x2c
 8013416:	f7ff feef 	bl	80131f8 <LCD_Write_Data>
	/* VDV and VRH 设置 */
	LCD_Write_Cmd(0xC2);
 801341a:	20c2      	movs	r0, #194	; 0xc2
 801341c:	f7ff fed6 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 8013420:	2001      	movs	r0, #1
 8013422:	f7ff fee9 	bl	80131f8 <LCD_Write_Data>
	/* VRH 设置 */
	LCD_Write_Cmd(0xC3);
 8013426:	20c3      	movs	r0, #195	; 0xc3
 8013428:	f7ff fed0 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x19);
 801342c:	2019      	movs	r0, #25
 801342e:	f7ff fee3 	bl	80131f8 <LCD_Write_Data>
	/* VDV 设置 */
	LCD_Write_Cmd(0xC4);
 8013432:	20c4      	movs	r0, #196	; 0xc4
 8013434:	f7ff feca 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 8013438:	2020      	movs	r0, #32
 801343a:	f7ff fedd 	bl	80131f8 <LCD_Write_Data>
	/* 普通模式下显存速率设置 60Mhz */
	LCD_Write_Cmd(0xC6);
 801343e:	20c6      	movs	r0, #198	; 0xc6
 8013440:	f7ff fec4 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 8013444:	200f      	movs	r0, #15
 8013446:	f7ff fed7 	bl	80131f8 <LCD_Write_Data>
	/* 电源控制 */
	LCD_Write_Cmd(0xD0);
 801344a:	20d0      	movs	r0, #208	; 0xd0
 801344c:	f7ff febe 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0xA4);
 8013450:	20a4      	movs	r0, #164	; 0xa4
 8013452:	f7ff fed1 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0xA1);
 8013456:	20a1      	movs	r0, #161	; 0xa1
 8013458:	f7ff fece 	bl	80131f8 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE0);
 801345c:	20e0      	movs	r0, #224	; 0xe0
 801345e:	f7ff feb5 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 8013462:	20d0      	movs	r0, #208	; 0xd0
 8013464:	f7ff fec8 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 8013468:	2004      	movs	r0, #4
 801346a:	f7ff fec5 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 801346e:	200d      	movs	r0, #13
 8013470:	f7ff fec2 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 8013474:	2011      	movs	r0, #17
 8013476:	f7ff febf 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 801347a:	2013      	movs	r0, #19
 801347c:	f7ff febc 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x2B);
 8013480:	202b      	movs	r0, #43	; 0x2b
 8013482:	f7ff feb9 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8013486:	203f      	movs	r0, #63	; 0x3f
 8013488:	f7ff feb6 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x54);
 801348c:	2054      	movs	r0, #84	; 0x54
 801348e:	f7ff feb3 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x4C);
 8013492:	204c      	movs	r0, #76	; 0x4c
 8013494:	f7ff feb0 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x18);
 8013498:	2018      	movs	r0, #24
 801349a:	f7ff fead 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 801349e:	200d      	movs	r0, #13
 80134a0:	f7ff feaa 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 80134a4:	200b      	movs	r0, #11
 80134a6:	f7ff fea7 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 80134aa:	201f      	movs	r0, #31
 80134ac:	f7ff fea4 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 80134b0:	2023      	movs	r0, #35	; 0x23
 80134b2:	f7ff fea1 	bl	80131f8 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE1);
 80134b6:	20e1      	movs	r0, #225	; 0xe1
 80134b8:	f7ff fe88 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 80134bc:	20d0      	movs	r0, #208	; 0xd0
 80134be:	f7ff fe9b 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 80134c2:	2004      	movs	r0, #4
 80134c4:	f7ff fe98 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 80134c8:	200c      	movs	r0, #12
 80134ca:	f7ff fe95 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 80134ce:	2011      	movs	r0, #17
 80134d0:	f7ff fe92 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 80134d4:	2013      	movs	r0, #19
 80134d6:	f7ff fe8f 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 80134da:	202c      	movs	r0, #44	; 0x2c
 80134dc:	f7ff fe8c 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 80134e0:	203f      	movs	r0, #63	; 0x3f
 80134e2:	f7ff fe89 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x44);
 80134e6:	2044      	movs	r0, #68	; 0x44
 80134e8:	f7ff fe86 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x51);
 80134ec:	2051      	movs	r0, #81	; 0x51
 80134ee:	f7ff fe83 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x2F);
 80134f2:	202f      	movs	r0, #47	; 0x2f
 80134f4:	f7ff fe80 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 80134f8:	201f      	movs	r0, #31
 80134fa:	f7ff fe7d 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 80134fe:	201f      	movs	r0, #31
 8013500:	f7ff fe7a 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x20);
 8013504:	2020      	movs	r0, #32
 8013506:	f7ff fe77 	bl	80131f8 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 801350a:	2023      	movs	r0, #35	; 0x23
 801350c:	f7ff fe74 	bl	80131f8 <LCD_Write_Data>
	/* 显示开 */
	LCD_Write_Cmd(0x21);
 8013510:	2021      	movs	r0, #33	; 0x21
 8013512:	f7ff fe5b 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Cmd(0x29);
 8013516:	2029      	movs	r0, #41	; 0x29
 8013518:	f7ff fe58 	bl	80131cc <LCD_Write_Cmd>

	/* 清屏为白色 */
	LCD_Clear(WHITE);
 801351c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013520:	f7ff fee8 	bl	80132f4 <LCD_Clear>

	/*打开显示*/
	LCD_PWR(1);
 8013524:	2201      	movs	r2, #1
 8013526:	2110      	movs	r1, #16
 8013528:	4802      	ldr	r0, [pc, #8]	; (8013534 <LCD_Init+0x1b4>)
 801352a:	f7f1 f91f 	bl	800476c <HAL_GPIO_WritePin>
}
 801352e:	bf00      	nop
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	40021800 	.word	0x40021800

08013538 <LCD_ShowChar>:
 * @param   size	字体大小(支持16/24/32号字体)
 * @return  none
 * @note		需要font.h字库文件的支持
 */
void LCD_ShowChar(uint16_t x, uint16_t y, char ch, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 8013538:	b590      	push	{r4, r7, lr}
 801353a:	b087      	sub	sp, #28
 801353c:	af00      	add	r7, sp, #0
 801353e:	4604      	mov	r4, r0
 8013540:	4608      	mov	r0, r1
 8013542:	4611      	mov	r1, r2
 8013544:	461a      	mov	r2, r3
 8013546:	4623      	mov	r3, r4
 8013548:	80fb      	strh	r3, [r7, #6]
 801354a:	4603      	mov	r3, r0
 801354c:	80bb      	strh	r3, [r7, #4]
 801354e:	460b      	mov	r3, r1
 8013550:	70fb      	strb	r3, [r7, #3]
 8013552:	4613      	mov	r3, r2
 8013554:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0, j = 0;
 8013556:	2300      	movs	r3, #0
 8013558:	617b      	str	r3, [r7, #20]
 801355a:	2300      	movs	r3, #0
 801355c:	613b      	str	r3, [r7, #16]
	uint8_t temp = 0;
 801355e:	2300      	movs	r3, #0
 8013560:	73fb      	strb	r3, [r7, #15]
	uint8_t size = 0;
 8013562:	2300      	movs	r3, #0
 8013564:	737b      	strb	r3, [r7, #13]
	uint8_t t = 0;
 8013566:	2300      	movs	r3, #0
 8013568:	73bb      	strb	r3, [r7, #14]

	/* 检测显示是否会越界 */
	if ((x > (LCD_Width - font_size / 2)) || (y > (LCD_Height - font_size)))
 801356a:	88fa      	ldrh	r2, [r7, #6]
 801356c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013570:	085b      	lsrs	r3, r3, #1
 8013572:	b2db      	uxtb	r3, r3
 8013574:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8013578:	429a      	cmp	r2, r3
 801357a:	f300 8110 	bgt.w	801379e <LCD_ShowChar+0x266>
 801357e:	88ba      	ldrh	r2, [r7, #4]
 8013580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013584:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8013588:	429a      	cmp	r2, r3
 801358a:	f300 8108 	bgt.w	801379e <LCD_ShowChar+0x266>
		return;

	/* 根据字符大小设置显存操作区域 */
	LCD_Address_Set(x, y, x + font_size / 2 - 1, y + font_size - 1);
 801358e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013592:	085b      	lsrs	r3, r3, #1
 8013594:	b2db      	uxtb	r3, r3
 8013596:	b29a      	uxth	r2, r3
 8013598:	88fb      	ldrh	r3, [r7, #6]
 801359a:	4413      	add	r3, r2
 801359c:	b29b      	uxth	r3, r3
 801359e:	3b01      	subs	r3, #1
 80135a0:	b29c      	uxth	r4, r3
 80135a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	88bb      	ldrh	r3, [r7, #4]
 80135aa:	4413      	add	r3, r2
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	3b01      	subs	r3, #1
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	88b9      	ldrh	r1, [r7, #4]
 80135b4:	88f8      	ldrh	r0, [r7, #6]
 80135b6:	4622      	mov	r2, r4
 80135b8:	f7ff fe4f 	bl	801325a <LCD_Address_Set>

	/* 计算字符在字库中的偏移值*/
	uint8_t charIndex = ch - ' ';
 80135bc:	78fb      	ldrb	r3, [r7, #3]
 80135be:	3b20      	subs	r3, #32
 80135c0:	733b      	strb	r3, [r7, #12]

	/* 显示16号/32号字体 */
	if ((font_size == 16) || (font_size == 32))
 80135c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135c6:	2b10      	cmp	r3, #16
 80135c8:	d003      	beq.n	80135d2 <LCD_ShowChar+0x9a>
 80135ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135ce:	2b20      	cmp	r3, #32
 80135d0:	d158      	bne.n	8013684 <LCD_ShowChar+0x14c>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 80135d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135d6:	08db      	lsrs	r3, r3, #3
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	461a      	mov	r2, r3
 80135dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135e0:	f003 0307 	and.w	r3, r3, #7
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	bf14      	ite	ne
 80135ea:	2301      	movne	r3, #1
 80135ec:	2300      	moveq	r3, #0
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	4413      	add	r3, r2
 80135f2:	b2da      	uxtb	r2, r3
 80135f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135f8:	085b      	lsrs	r3, r3, #1
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	fb12 f303 	smulbb	r3, r2, r3
 8013600:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 8013602:	2300      	movs	r3, #0
 8013604:	617b      	str	r3, [r7, #20]
 8013606:	e038      	b.n	801367a <LCD_ShowChar+0x142>
		{
			if (font_size == 16)
 8013608:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801360c:	2b10      	cmp	r3, #16
 801360e:	d108      	bne.n	8013622 <LCD_ShowChar+0xea>
				temp = F16X8[charIndex][i];	//调用1608字体
 8013610:	7b3b      	ldrb	r3, [r7, #12]
 8013612:	4a67      	ldr	r2, [pc, #412]	; (80137b0 <LCD_ShowChar+0x278>)
 8013614:	011b      	lsls	r3, r3, #4
 8013616:	441a      	add	r2, r3
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	4413      	add	r3, r2
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	73fb      	strb	r3, [r7, #15]
 8013620:	e00f      	b.n	8013642 <LCD_ShowChar+0x10a>
			else if (font_size == 32)
 8013622:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013626:	2b20      	cmp	r3, #32
 8013628:	f040 80bb 	bne.w	80137a2 <LCD_ShowChar+0x26a>
				temp = F32X16[charIndex][i];	//调用3216字体
 801362c:	7b3a      	ldrb	r2, [r7, #12]
 801362e:	4961      	ldr	r1, [pc, #388]	; (80137b4 <LCD_ShowChar+0x27c>)
 8013630:	4613      	mov	r3, r2
 8013632:	011b      	lsls	r3, r3, #4
 8013634:	1a9b      	subs	r3, r3, r2
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	18ca      	adds	r2, r1, r3
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	4413      	add	r3, r2
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	73fb      	strb	r3, [r7, #15]
			else
				return;			//没有的字库

			for (j = 0; j < 8; j++)
 8013642:	2300      	movs	r3, #0
 8013644:	613b      	str	r3, [r7, #16]
 8013646:	e012      	b.n	801366e <LCD_ShowChar+0x136>
			{
				if (temp & 0x80)
 8013648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801364c:	2b00      	cmp	r3, #0
 801364e:	da04      	bge.n	801365a <LCD_ShowChar+0x122>
					LCD_Write_2Bytes(font_color);
 8013650:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff fde6 	bl	8013224 <LCD_Write_2Bytes>
 8013658:	e003      	b.n	8013662 <LCD_ShowChar+0x12a>
				else
					LCD_Write_2Bytes(back_color);
 801365a:	883b      	ldrh	r3, [r7, #0]
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff fde1 	bl	8013224 <LCD_Write_2Bytes>

				temp <<= 1;
 8013662:	7bfb      	ldrb	r3, [r7, #15]
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	3301      	adds	r3, #1
 801366c:	613b      	str	r3, [r7, #16]
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	2b07      	cmp	r3, #7
 8013672:	d9e9      	bls.n	8013648 <LCD_ShowChar+0x110>
		for (i = 0; i < size; i++)
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	3301      	adds	r3, #1
 8013678:	617b      	str	r3, [r7, #20]
 801367a:	7b7b      	ldrb	r3, [r7, #13]
 801367c:	697a      	ldr	r2, [r7, #20]
 801367e:	429a      	cmp	r2, r3
 8013680:	d3c2      	bcc.n	8013608 <LCD_ShowChar+0xd0>
	if ((font_size == 16) || (font_size == 32))
 8013682:	e091      	b.n	80137a8 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 显示12号字体 */
	else if (font_size == 12)
 8013684:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013688:	2b0c      	cmp	r3, #12
 801368a:	d146      	bne.n	801371a <LCD_ShowChar+0x1e2>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 801368c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013690:	08db      	lsrs	r3, r3, #3
 8013692:	b2db      	uxtb	r3, r3
 8013694:	461a      	mov	r2, r3
 8013696:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801369a:	f003 0307 	and.w	r3, r3, #7
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	bf14      	ite	ne
 80136a4:	2301      	movne	r3, #1
 80136a6:	2300      	moveq	r3, #0
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	4413      	add	r3, r2
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80136b2:	085b      	lsrs	r3, r3, #1
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	fb12 f303 	smulbb	r3, r2, r3
 80136ba:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 80136bc:	2300      	movs	r3, #0
 80136be:	617b      	str	r3, [r7, #20]
 80136c0:	e026      	b.n	8013710 <LCD_ShowChar+0x1d8>
		{
			temp = F12X6[charIndex][i];
 80136c2:	7b3a      	ldrb	r2, [r7, #12]
 80136c4:	493c      	ldr	r1, [pc, #240]	; (80137b8 <LCD_ShowChar+0x280>)
 80136c6:	4613      	mov	r3, r2
 80136c8:	005b      	lsls	r3, r3, #1
 80136ca:	4413      	add	r3, r2
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	18ca      	adds	r2, r1, r3
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	4413      	add	r3, r2
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	73fb      	strb	r3, [r7, #15]

			for (j = 0; j < 6; j++)
 80136d8:	2300      	movs	r3, #0
 80136da:	613b      	str	r3, [r7, #16]
 80136dc:	e012      	b.n	8013704 <LCD_ShowChar+0x1cc>
			{
				if (temp & 0x80)
 80136de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	da04      	bge.n	80136f0 <LCD_ShowChar+0x1b8>
					LCD_Write_2Bytes(font_color);
 80136e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7ff fd9b 	bl	8013224 <LCD_Write_2Bytes>
 80136ee:	e003      	b.n	80136f8 <LCD_ShowChar+0x1c0>
				else
					LCD_Write_2Bytes(back_color);
 80136f0:	883b      	ldrh	r3, [r7, #0]
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ff fd96 	bl	8013224 <LCD_Write_2Bytes>

				temp <<= 1;
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 6; j++)
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	3301      	adds	r3, #1
 8013702:	613b      	str	r3, [r7, #16]
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	2b05      	cmp	r3, #5
 8013708:	d9e9      	bls.n	80136de <LCD_ShowChar+0x1a6>
		for (i = 0; i < size; i++)
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	3301      	adds	r3, #1
 801370e:	617b      	str	r3, [r7, #20]
 8013710:	7b7b      	ldrb	r3, [r7, #13]
 8013712:	697a      	ldr	r2, [r7, #20]
 8013714:	429a      	cmp	r2, r3
 8013716:	d3d4      	bcc.n	80136c2 <LCD_ShowChar+0x18a>
 8013718:	e046      	b.n	80137a8 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 显示24号字体 */
	else if (font_size == 24)
 801371a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801371e:	2b18      	cmp	r3, #24
 8013720:	d141      	bne.n	80137a6 <LCD_ShowChar+0x26e>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size * 16) / 8;
 8013722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 801372a:	2300      	movs	r3, #0
 801372c:	617b      	str	r3, [r7, #20]
 801372e:	e031      	b.n	8013794 <LCD_ShowChar+0x25c>
		{
			temp = F24X12[charIndex][i];
 8013730:	7b3a      	ldrb	r2, [r7, #12]
 8013732:	4922      	ldr	r1, [pc, #136]	; (80137bc <LCD_ShowChar+0x284>)
 8013734:	4613      	mov	r3, r2
 8013736:	005b      	lsls	r3, r3, #1
 8013738:	4413      	add	r3, r2
 801373a:	011b      	lsls	r3, r3, #4
 801373c:	18ca      	adds	r2, r1, r3
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	4413      	add	r3, r2
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	73fb      	strb	r3, [r7, #15]
			if (i % 2 == 0)
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	f003 0301 	and.w	r3, r3, #1
 801374c:	2b00      	cmp	r3, #0
 801374e:	d102      	bne.n	8013756 <LCD_ShowChar+0x21e>
				t = 8;
 8013750:	2308      	movs	r3, #8
 8013752:	73bb      	strb	r3, [r7, #14]
 8013754:	e001      	b.n	801375a <LCD_ShowChar+0x222>
			else
				t = 4;
 8013756:	2304      	movs	r3, #4
 8013758:	73bb      	strb	r3, [r7, #14]
			for (j = 0; j < t; j++)
 801375a:	2300      	movs	r3, #0
 801375c:	613b      	str	r3, [r7, #16]
 801375e:	e012      	b.n	8013786 <LCD_ShowChar+0x24e>
			{
				if (temp & 0x80)
 8013760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013764:	2b00      	cmp	r3, #0
 8013766:	da04      	bge.n	8013772 <LCD_ShowChar+0x23a>
					LCD_Write_2Bytes(font_color);
 8013768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801376a:	4618      	mov	r0, r3
 801376c:	f7ff fd5a 	bl	8013224 <LCD_Write_2Bytes>
 8013770:	e003      	b.n	801377a <LCD_ShowChar+0x242>
				else
					LCD_Write_2Bytes(back_color);
 8013772:	883b      	ldrh	r3, [r7, #0]
 8013774:	4618      	mov	r0, r3
 8013776:	f7ff fd55 	bl	8013224 <LCD_Write_2Bytes>

				temp <<= 1;
 801377a:	7bfb      	ldrb	r3, [r7, #15]
 801377c:	005b      	lsls	r3, r3, #1
 801377e:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < t; j++)
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	3301      	adds	r3, #1
 8013784:	613b      	str	r3, [r7, #16]
 8013786:	7bbb      	ldrb	r3, [r7, #14]
 8013788:	693a      	ldr	r2, [r7, #16]
 801378a:	429a      	cmp	r2, r3
 801378c:	d3e8      	bcc.n	8013760 <LCD_ShowChar+0x228>
		for (i = 0; i < size; i++)
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	3301      	adds	r3, #1
 8013792:	617b      	str	r3, [r7, #20]
 8013794:	7b7b      	ldrb	r3, [r7, #13]
 8013796:	697a      	ldr	r2, [r7, #20]
 8013798:	429a      	cmp	r2, r3
 801379a:	d3c9      	bcc.n	8013730 <LCD_ShowChar+0x1f8>
 801379c:	e004      	b.n	80137a8 <LCD_ShowChar+0x270>
		return;
 801379e:	bf00      	nop
 80137a0:	e002      	b.n	80137a8 <LCD_ShowChar+0x270>
				return;			//没有的字库
 80137a2:	bf00      	nop
 80137a4:	e000      	b.n	80137a8 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 其余字体 */
	else
		return;
 80137a6:	bf00      	nop
}
 80137a8:	371c      	adds	r7, #28
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd90      	pop	{r4, r7, pc}
 80137ae:	bf00      	nop
 80137b0:	0801b078 	.word	0x0801b078
 80137b4:	0801c838 	.word	0x0801c838
 80137b8:	0801ac04 	.word	0x0801ac04
 80137bc:	0801b668 	.word	0x0801b668

080137c0 <LCD_ShowCharStr>:
 * @return  none
 * @note		1. 需要font.h字库文件的支持
 * 					2. 超过指定width不显示超过的字符
 */
void LCD_ShowCharStr(uint16_t x, uint16_t y, uint8_t max_width, char *str, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 80137c0:	b590      	push	{r4, r7, lr}
 80137c2:	b087      	sub	sp, #28
 80137c4:	af02      	add	r7, sp, #8
 80137c6:	607b      	str	r3, [r7, #4]
 80137c8:	4603      	mov	r3, r0
 80137ca:	81fb      	strh	r3, [r7, #14]
 80137cc:	460b      	mov	r3, r1
 80137ce:	81bb      	strh	r3, [r7, #12]
 80137d0:	4613      	mov	r3, r2
 80137d2:	72fb      	strb	r3, [r7, #11]

	max_width += x;
 80137d4:	89fb      	ldrh	r3, [r7, #14]
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	7afb      	ldrb	r3, [r7, #11]
 80137da:	4413      	add	r3, r2
 80137dc:	72fb      	strb	r3, [r7, #11]

	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 80137de:	e01c      	b.n	801381a <LCD_ShowCharStr+0x5a>
	{
		if (x >= max_width)
 80137e0:	7afb      	ldrb	r3, [r7, #11]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	89fa      	ldrh	r2, [r7, #14]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d220      	bcs.n	801382c <LCD_ShowCharStr+0x6c>
		{
			//x方向越界，结束
			break;
		}

		LCD_ShowChar(x, y, *str, back_color, font_color, font_size);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	781a      	ldrb	r2, [r3, #0]
 80137ee:	8c3c      	ldrh	r4, [r7, #32]
 80137f0:	89b9      	ldrh	r1, [r7, #12]
 80137f2:	89f8      	ldrh	r0, [r7, #14]
 80137f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137fc:	9300      	str	r3, [sp, #0]
 80137fe:	4623      	mov	r3, r4
 8013800:	f7ff fe9a 	bl	8013538 <LCD_ShowChar>
		x += font_size / 2;
 8013804:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013808:	085b      	lsrs	r3, r3, #1
 801380a:	b2db      	uxtb	r3, r3
 801380c:	b29a      	uxth	r2, r3
 801380e:	89fb      	ldrh	r3, [r7, #14]
 8013810:	4413      	add	r3, r2
 8013812:	81fb      	strh	r3, [r7, #14]
		str++;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	3301      	adds	r3, #1
 8013818:	607b      	str	r3, [r7, #4]
	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	2b7e      	cmp	r3, #126	; 0x7e
 8013820:	d805      	bhi.n	801382e <LCD_ShowCharStr+0x6e>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	2b1f      	cmp	r3, #31
 8013828:	d8da      	bhi.n	80137e0 <LCD_ShowCharStr+0x20>
	}
}
 801382a:	e000      	b.n	801382e <LCD_ShowCharStr+0x6e>
			break;
 801382c:	bf00      	nop
}
 801382e:	bf00      	nop
 8013830:	3714      	adds	r7, #20
 8013832:	46bd      	mov	sp, r7
 8013834:	bd90      	pop	{r4, r7, pc}
	...

08013838 <LCD_Show_Image>:
 * @param   p —— 图片缓存数据起始地址
 * @note		Image2Lcd取模方式：C语言数据/水平扫描/16位真彩色(RGB565)/高位在前		其他的不要选
 * @return  none
 */
void LCD_Show_Image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint8_t *p)
{
 8013838:	b590      	push	{r4, r7, lr}
 801383a:	b087      	sub	sp, #28
 801383c:	af00      	add	r7, sp, #0
 801383e:	4604      	mov	r4, r0
 8013840:	4608      	mov	r0, r1
 8013842:	4611      	mov	r1, r2
 8013844:	461a      	mov	r2, r3
 8013846:	4623      	mov	r3, r4
 8013848:	80fb      	strh	r3, [r7, #6]
 801384a:	4603      	mov	r3, r0
 801384c:	80bb      	strh	r3, [r7, #4]
 801384e:	460b      	mov	r3, r1
 8013850:	807b      	strh	r3, [r7, #2]
 8013852:	4613      	mov	r3, r2
 8013854:	803b      	strh	r3, [r7, #0]
	uint32_t img_size = width * height * 2;		//图片所占字节数
 8013856:	887b      	ldrh	r3, [r7, #2]
 8013858:	883a      	ldrh	r2, [r7, #0]
 801385a:	fb02 f303 	mul.w	r3, r2, r3
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	60fb      	str	r3, [r7, #12]
	uint32_t remain_size = img_size;									//图片每次发送后剩余的字节数
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	74fb      	strb	r3, [r7, #19]
	uint8_t flag = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	74bb      	strb	r3, [r7, #18]

	/* 错误检测 */
	if (x + width > LCD_Width || y + height > LCD_Height)
 801386e:	88fa      	ldrh	r2, [r7, #6]
 8013870:	887b      	ldrh	r3, [r7, #2]
 8013872:	4413      	add	r3, r2
 8013874:	2bf0      	cmp	r3, #240	; 0xf0
 8013876:	dc53      	bgt.n	8013920 <LCD_Show_Image+0xe8>
 8013878:	88ba      	ldrh	r2, [r7, #4]
 801387a:	883b      	ldrh	r3, [r7, #0]
 801387c:	4413      	add	r3, r2
 801387e:	2bf0      	cmp	r3, #240	; 0xf0
 8013880:	dc4e      	bgt.n	8013920 <LCD_Show_Image+0xe8>
	{
		return;
	}

	LCD_Address_Set(x, y, x + width - 1, y + height - 1);
 8013882:	88fa      	ldrh	r2, [r7, #6]
 8013884:	887b      	ldrh	r3, [r7, #2]
 8013886:	4413      	add	r3, r2
 8013888:	b29b      	uxth	r3, r3
 801388a:	3b01      	subs	r3, #1
 801388c:	b29c      	uxth	r4, r3
 801388e:	88ba      	ldrh	r2, [r7, #4]
 8013890:	883b      	ldrh	r3, [r7, #0]
 8013892:	4413      	add	r3, r2
 8013894:	b29b      	uxth	r3, r3
 8013896:	3b01      	subs	r3, #1
 8013898:	b29b      	uxth	r3, r3
 801389a:	88b9      	ldrh	r1, [r7, #4]
 801389c:	88f8      	ldrh	r0, [r7, #6]
 801389e:	4622      	mov	r2, r4
 80138a0:	f7ff fcdb 	bl	801325a <LCD_Address_Set>

	LCD_WR_RS(1);
 80138a4:	2201      	movs	r2, #1
 80138a6:	2140      	movs	r1, #64	; 0x40
 80138a8:	481f      	ldr	r0, [pc, #124]	; (8013928 <LCD_Show_Image+0xf0>)
 80138aa:	f7f0 ff5f 	bl	800476c <HAL_GPIO_WritePin>

	/* SPI每次最大发送2^16 = 65536个数据,图片最大大小为240*240*2 = 115200，会超过此大小，所以设计循环发送算法 */
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 80138ae:	2300      	movs	r3, #0
 80138b0:	74fb      	strb	r3, [r7, #19]
 80138b2:	e02f      	b.n	8013914 <LCD_Show_Image+0xdc>
	{
		if (flag != 0)
 80138b4:	7cbb      	ldrb	r3, [r7, #18]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d002      	beq.n	80138c0 <LCD_Show_Image+0x88>
		{
			//非首次进入 等待传输完成
			delay_us(SPI_DMA_Delay_us);
 80138ba:	20b4      	movs	r0, #180	; 0xb4
 80138bc:	f7fd f94e 	bl	8010b5c <delay_us>
		}
		if (remain_size / SPI_DMA_Max_Length >= 1)
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138c6:	d30f      	bcc.n	80138e8 <LCD_Show_Image+0xb0>
		{
			SPI_WriteByte_DMA((uint8_t*) p, SPI_DMA_Max_Length - 1);
 80138c8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80138cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138ce:	f7ff fc6b 	bl	80131a8 <SPI_WriteByte_DMA>
			p += SPI_DMA_Max_Length - 1;
 80138d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80138d8:	337f      	adds	r3, #127	; 0x7f
 80138da:	62bb      	str	r3, [r7, #40]	; 0x28
			remain_size -= SPI_DMA_Max_Length - 1;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80138e2:	3b7f      	subs	r3, #127	; 0x7f
 80138e4:	617b      	str	r3, [r7, #20]
 80138e6:	e010      	b.n	801390a <LCD_Show_Image+0xd2>

		}
		else
		{
			SPI_WriteByte_DMA((uint8_t*) p, remain_size % (SPI_DMA_Max_Length - 1));
 80138e8:	697a      	ldr	r2, [r7, #20]
 80138ea:	4b10      	ldr	r3, [pc, #64]	; (801392c <LCD_Show_Image+0xf4>)
 80138ec:	fba3 1302 	umull	r1, r3, r3, r2
 80138f0:	1ad1      	subs	r1, r2, r3
 80138f2:	0849      	lsrs	r1, r1, #1
 80138f4:	440b      	add	r3, r1
 80138f6:	0b99      	lsrs	r1, r3, #14
 80138f8:	460b      	mov	r3, r1
 80138fa:	03db      	lsls	r3, r3, #15
 80138fc:	1a5b      	subs	r3, r3, r1
 80138fe:	1ad1      	subs	r1, r2, r3
 8013900:	b28b      	uxth	r3, r1
 8013902:	4619      	mov	r1, r3
 8013904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013906:	f7ff fc4f 	bl	80131a8 <SPI_WriteByte_DMA>
		}

		flag = 1;
 801390a:	2301      	movs	r3, #1
 801390c:	74bb      	strb	r3, [r7, #18]
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 801390e:	7cfb      	ldrb	r3, [r7, #19]
 8013910:	3301      	adds	r3, #1
 8013912:	74fb      	strb	r3, [r7, #19]
 8013914:	7cfa      	ldrb	r2, [r7, #19]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	0bdb      	lsrs	r3, r3, #15
 801391a:	429a      	cmp	r2, r3
 801391c:	d9ca      	bls.n	80138b4 <LCD_Show_Image+0x7c>
 801391e:	e000      	b.n	8013922 <LCD_Show_Image+0xea>
		return;
 8013920:	bf00      	nop
	}
}
 8013922:	371c      	adds	r7, #28
 8013924:	46bd      	mov	sp, r7
 8013926:	bd90      	pop	{r4, r7, pc}
 8013928:	40021800 	.word	0x40021800
 801392c:	00020005 	.word	0x00020005

08013930 <LCD_ShowStringLineX>:
uint16_t LCD_FontColor = WHITE;
uint16_t LCD_BackgroundColor = BLACK;

//显示一行字符串
void LCD_ShowStringLineX(uint8_t line, char *chr, uint8_t size)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af04      	add	r7, sp, #16
 8013936:	4603      	mov	r3, r0
 8013938:	6039      	str	r1, [r7, #0]
 801393a:	71fb      	strb	r3, [r7, #7]
 801393c:	4613      	mov	r3, r2
 801393e:	71bb      	strb	r3, [r7, #6]
	LCD_ShowCharStr(0, line * size, LCD_Width, chr, LCD_BackgroundColor, LCD_FontColor, size);
 8013940:	79fb      	ldrb	r3, [r7, #7]
 8013942:	b29a      	uxth	r2, r3
 8013944:	79bb      	ldrb	r3, [r7, #6]
 8013946:	b29b      	uxth	r3, r3
 8013948:	fb12 f303 	smulbb	r3, r2, r3
 801394c:	b298      	uxth	r0, r3
 801394e:	4b09      	ldr	r3, [pc, #36]	; (8013974 <LCD_ShowStringLineX+0x44>)
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	4a09      	ldr	r2, [pc, #36]	; (8013978 <LCD_ShowStringLineX+0x48>)
 8013954:	8812      	ldrh	r2, [r2, #0]
 8013956:	79b9      	ldrb	r1, [r7, #6]
 8013958:	9102      	str	r1, [sp, #8]
 801395a:	9201      	str	r2, [sp, #4]
 801395c:	9300      	str	r3, [sp, #0]
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	22f0      	movs	r2, #240	; 0xf0
 8013962:	4601      	mov	r1, r0
 8013964:	2000      	movs	r0, #0
 8013966:	f7ff ff2b 	bl	80137c0 <LCD_ShowCharStr>
}
 801396a:	bf00      	nop
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	200025c8 	.word	0x200025c8
 8013978:	2000021c 	.word	0x2000021c

0801397c <LCD_Close>:
//	HAL_Delay(2000);
//	LCD_Clear(BLACK);
}

void LCD_Close()
{
 801397c:	b580      	push	{r7, lr}
 801397e:	af00      	add	r7, sp, #0

	LCD_Write_Cmd(0x53);
 8013980:	2053      	movs	r0, #83	; 0x53
 8013982:	f7ff fc23 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Cmd(0x28);
 8013986:	2028      	movs	r0, #40	; 0x28
 8013988:	f7ff fc20 	bl	80131cc <LCD_Write_Cmd>
	LCD_Write_Cmd(0x10);
 801398c:	2010      	movs	r0, #16
 801398e:	f7ff fc1d 	bl	80131cc <LCD_Write_Cmd>
	LCD_PWR(0);
 8013992:	2200      	movs	r2, #0
 8013994:	2110      	movs	r1, #16
 8013996:	4805      	ldr	r0, [pc, #20]	; (80139ac <LCD_Close+0x30>)
 8013998:	f7f0 fee8 	bl	800476c <HAL_GPIO_WritePin>
	LCD_RST(0);
 801399c:	2200      	movs	r2, #0
 801399e:	2120      	movs	r1, #32
 80139a0:	4802      	ldr	r0, [pc, #8]	; (80139ac <LCD_Close+0x30>)
 80139a2:	f7f0 fee3 	bl	800476c <HAL_GPIO_WritePin>
}
 80139a6:	bf00      	nop
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	40021800 	.word	0x40021800

080139b0 <Screen_Init>:
#define ImageBufferLength 115208
uint8_t ImageBuffer[ImageBufferLength];
char ImageNameString[40];

void Screen_Init()
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	af00      	add	r7, sp, #0
#if defined USE_OLED
	OLED_InitX(PuppySauce);
#else
	LCD_Init();
 80139b4:	f7ff fce4 	bl	8013380 <LCD_Init>
#if defined SCREEN_USE_FATFS

	Screen_ShowPicture_Num(0, 0);
 80139b8:	2100      	movs	r1, #0
 80139ba:	2000      	movs	r0, #0
 80139bc:	f000 f81c 	bl	80139f8 <Screen_ShowPicture_Num>
	//HAL_Delay(2000);
#endif
	//Screen_Clear();
#endif
}
 80139c0:	bf00      	nop
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <Screen_ShowStringLine>:
	LCD_Show_Image(x0, y0, length, width, BMP);
#endif
}

void Screen_ShowStringLine(uint8_t line, char *chr, uint8_t size)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	4603      	mov	r3, r0
 80139cc:	6039      	str	r1, [r7, #0]
 80139ce:	71fb      	strb	r3, [r7, #7]
 80139d0:	4613      	mov	r3, r2
 80139d2:	71bb      	strb	r3, [r7, #6]
#if defined USE_OLED
	OLED_ShowStringLine(line, chr);
#else
	LCD_ShowStringLineX(line, chr, size);
 80139d4:	79ba      	ldrb	r2, [r7, #6]
 80139d6:	79fb      	ldrb	r3, [r7, #7]
 80139d8:	6839      	ldr	r1, [r7, #0]
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff ffa8 	bl	8013930 <LCD_ShowStringLineX>
#endif
}
 80139e0:	bf00      	nop
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <Screen_Clear>:

void Screen_Clear()
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	af00      	add	r7, sp, #0
#if defined USE_OLED
	OLED_Clear();
#else
	LCD_Clear(BLACK);
 80139ec:	2000      	movs	r0, #0
 80139ee:	f7ff fc81 	bl	80132f4 <LCD_Clear>
#endif
}
 80139f2:	bf00      	nop
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <Screen_ShowPicture_Num>:

void Screen_ShowPicture_Num(uint8_t a, uint8_t b)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b082      	sub	sp, #8
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	4603      	mov	r3, r0
 8013a00:	460a      	mov	r2, r1
 8013a02:	71fb      	strb	r3, [r7, #7]
 8013a04:	4613      	mov	r3, r2
 8013a06:	71bb      	strb	r3, [r7, #6]
			break;
		default:
			break;
	}
#else
	switch (a)
 8013a08:	79fb      	ldrb	r3, [r7, #7]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d002      	beq.n	8013a14 <Screen_ShowPicture_Num+0x1c>
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d004      	beq.n	8013a1c <Screen_ShowPicture_Num+0x24>
		case 1:
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
			Screen_ShowFileImage(ImageNameString);
			break;
		default:
			break;
 8013a12:	e00d      	b.n	8013a30 <Screen_ShowPicture_Num+0x38>
			Screen_ShowFileImage("Images/PuppySauce.bmp");
 8013a14:	4808      	ldr	r0, [pc, #32]	; (8013a38 <Screen_ShowPicture_Num+0x40>)
 8013a16:	f000 f81b 	bl	8013a50 <Screen_ShowFileImage>
			break;
 8013a1a:	e009      	b.n	8013a30 <Screen_ShowPicture_Num+0x38>
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
 8013a1c:	79bb      	ldrb	r3, [r7, #6]
 8013a1e:	461a      	mov	r2, r3
 8013a20:	4906      	ldr	r1, [pc, #24]	; (8013a3c <Screen_ShowPicture_Num+0x44>)
 8013a22:	4807      	ldr	r0, [pc, #28]	; (8013a40 <Screen_ShowPicture_Num+0x48>)
 8013a24:	f001 f942 	bl	8014cac <siprintf>
			Screen_ShowFileImage(ImageNameString);
 8013a28:	4805      	ldr	r0, [pc, #20]	; (8013a40 <Screen_ShowPicture_Num+0x48>)
 8013a2a:	f000 f811 	bl	8013a50 <Screen_ShowFileImage>
			break;
 8013a2e:	bf00      	nop
	}
#endif
}
 8013a30:	bf00      	nop
 8013a32:	3708      	adds	r7, #8
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}
 8013a38:	08019a80 	.word	0x08019a80
 8013a3c:	08019a98 	.word	0x08019a98
 8013a40:	200025cc 	.word	0x200025cc

08013a44 <Screen_Close>:

void Screen_Close()
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	af00      	add	r7, sp, #0
#if defined USE_OLED

#else
	LCD_Close();
 8013a48:	f7ff ff98 	bl	801397c <LCD_Close>
#endif
}
 8013a4c:	bf00      	nop
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <Screen_ShowFileImage>:
#define  readRowNum 15
BYTE pColorData[960 * readRowNum]; /* 一行真彩色数据缓存 240 * 2 = 480 */
uint8_t ImageTransform_Buffer[480 * readRowNum];

void Screen_ShowFileImage(const char *fileName)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b09c      	sub	sp, #112	; 0x70
 8013a54:	af02      	add	r7, sp, #8
 8013a56:	6078      	str	r0, [r7, #4]

	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	WORD fileType;
	unsigned int read_num;
	f_res = f_open(&file, fileName, FA_OPEN_EXISTING | FA_READ);
 8013a58:	2201      	movs	r2, #1
 8013a5a:	6879      	ldr	r1, [r7, #4]
 8013a5c:	487c      	ldr	r0, [pc, #496]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013a5e:	f7f8 fea9 	bl	800c7b4 <f_open>
 8013a62:	4603      	mov	r3, r0
 8013a64:	461a      	mov	r2, r3
 8013a66:	4b7b      	ldr	r3, [pc, #492]	; (8013c54 <Screen_ShowFileImage+0x204>)
 8013a68:	701a      	strb	r2, [r3, #0]
	/*-------------------------------------------------------------------------------------------------------*/
	if (f_res == FR_OK)
 8013a6a:	4b7a      	ldr	r3, [pc, #488]	; (8013c54 <Screen_ShowFileImage+0x204>)
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d124      	bne.n	8013abc <Screen_ShowFileImage+0x6c>
	{
		//printfX("打开文件成功\r\n");

		/* 读取文件头信息  两个字节*/
		f_read(&file, &fileType, sizeof(WORD), &read_num);
 8013a72:	f107 0308 	add.w	r3, r7, #8
 8013a76:	f107 010e 	add.w	r1, r7, #14
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	4874      	ldr	r0, [pc, #464]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013a7e:	f7f8 ff1e 	bl	800c8be <f_read>

		/* 判断是不是bmp文件 "BM"*/
		if (fileType != 0x4d42)
 8013a82:	89fb      	ldrh	r3, [r7, #14]
 8013a84:	f644 5242 	movw	r2, #19778	; 0x4d42
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d006      	beq.n	8013a9a <Screen_ShowFileImage+0x4a>
		{
			printfX("这不是一个 .bmp 文件!\r\n");
 8013a8c:	4972      	ldr	r1, [pc, #456]	; (8013c58 <Screen_ShowFileImage+0x208>)
 8013a8e:	4873      	ldr	r0, [pc, #460]	; (8013c5c <Screen_ShowFileImage+0x20c>)
 8013a90:	f001 f90c 	bl	8014cac <siprintf>
 8013a94:	4871      	ldr	r0, [pc, #452]	; (8013c5c <Screen_ShowFileImage+0x20c>)
 8013a96:	f000 f9a1 	bl	8013ddc <printf_Base>
		{
			//printfX("这是一个 .bmp 文件\r\n");
		}

		/* 读取BMP文件头信息*/
		f_read(&file, &bitHead, sizeof(tagBITMAPFILEHEADER), &read_num);
 8013a9a:	f107 0308 	add.w	r3, r7, #8
 8013a9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013aa2:	220c      	movs	r2, #12
 8013aa4:	486a      	ldr	r0, [pc, #424]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013aa6:	f7f8 ff0a 	bl	800c8be <f_read>
		//showBmpHead(&bitHead);

		/* 读取位图信息头信息 */
		f_read(&file, &bitInfoHead, sizeof(BITMAPINFOHEADER), &read_num);
 8013aaa:	f107 0308 	add.w	r3, r7, #8
 8013aae:	f107 0110 	add.w	r1, r7, #16
 8013ab2:	2228      	movs	r2, #40	; 0x28
 8013ab4:	4866      	ldr	r0, [pc, #408]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013ab6:	f7f8 ff02 	bl	800c8be <f_read>
 8013aba:	e009      	b.n	8013ad0 <Screen_ShowFileImage+0x80>
		//showBmpInforHead(&bitInfoHead);
	}
	else
	{
		printfX("打开文件失败!错误代码：f_res = %d \r\n", f_res);
 8013abc:	4b65      	ldr	r3, [pc, #404]	; (8013c54 <Screen_ShowFileImage+0x204>)
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	4967      	ldr	r1, [pc, #412]	; (8013c60 <Screen_ShowFileImage+0x210>)
 8013ac4:	4865      	ldr	r0, [pc, #404]	; (8013c5c <Screen_ShowFileImage+0x20c>)
 8013ac6:	f001 f8f1 	bl	8014cac <siprintf>
 8013aca:	4864      	ldr	r0, [pc, #400]	; (8013c5c <Screen_ShowFileImage+0x20c>)
 8013acc:	f000 f986 	bl	8013ddc <printf_Base>
	}
	/*-------------------------------------------------------------------------------------------------------*/
	width = 240;
 8013ad0:	23f0      	movs	r3, #240	; 0xf0
 8013ad2:	65bb      	str	r3, [r7, #88]	; 0x58
	height = 240;
 8013ad4:	23f0      	movs	r3, #240	; 0xf0
 8013ad6:	657b      	str	r3, [r7, #84]	; 0x54
	uint16_t temp = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int row, m;
	/* 计算位图的实际宽度并确保它为32的倍数	*/
	l_width = WIDTHBYTES(width * bitInfoHead.biBitCount);
 8013ade:	8bfb      	ldrh	r3, [r7, #30]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ae4:	fb02 f303 	mul.w	r3, r2, r3
 8013ae8:	331f      	adds	r3, #31
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	da00      	bge.n	8013af0 <Screen_ShowFileImage+0xa0>
 8013aee:	331f      	adds	r3, #31
 8013af0:	115b      	asrs	r3, r3, #5
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (l_width > 720)
 8013af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013af8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8013afc:	dd07      	ble.n	8013b0e <Screen_ShowFileImage+0xbe>
	{
		printfX("\n 本图片太大(%d)，无法在液晶屏上显示 (<=240)\n", l_width);
 8013afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b00:	4958      	ldr	r1, [pc, #352]	; (8013c64 <Screen_ShowFileImage+0x214>)
 8013b02:	4856      	ldr	r0, [pc, #344]	; (8013c5c <Screen_ShowFileImage+0x20c>)
 8013b04:	f001 f8d2 	bl	8014cac <siprintf>
 8013b08:	4854      	ldr	r0, [pc, #336]	; (8013c5c <Screen_ShowFileImage+0x20c>)
 8013b0a:	f000 f967 	bl	8013ddc <printf_Base>
	}

	for (i = 0; i < height / readRowNum; i++)
 8013b0e:	2300      	movs	r3, #0
 8013b10:	667b      	str	r3, [r7, #100]	; 0x64
 8013b12:	e08a      	b.n	8013c2a <Screen_ShowFileImage+0x1da>
	{
		/*从文件的后面读起，BMP文件的原始图像方向为右下角到左上角*/
		f_lseek(&file, bitHead.bfOffBits + (height - (i + 1) * readRowNum) * l_width);
 8013b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b18:	3301      	adds	r3, #1
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	011b      	lsls	r3, r3, #4
 8013b1e:	1ac9      	subs	r1, r1, r3
 8013b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b22:	440b      	add	r3, r1
 8013b24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013b26:	fb01 f303 	mul.w	r3, r1, r3
 8013b2a:	4413      	add	r3, r2
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4848      	ldr	r0, [pc, #288]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013b30:	f7f8 ffe4 	bl	800cafc <f_lseek>
		/* 读取一行bmp的数据到数组pColorData里面 */
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 8013b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b36:	4613      	mov	r3, r2
 8013b38:	011b      	lsls	r3, r3, #4
 8013b3a:	1a9b      	subs	r3, r3, r2
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	f107 0308 	add.w	r3, r7, #8
 8013b42:	4949      	ldr	r1, [pc, #292]	; (8013c68 <Screen_ShowFileImage+0x218>)
 8013b44:	4842      	ldr	r0, [pc, #264]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013b46:	f7f8 feba 	bl	800c8be <f_read>

		for (m = 0; m < readRowNum; m++)
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013b4e:	e056      	b.n	8013bfe <Screen_ShowFileImage+0x1ae>
		{
			for (j = 0; j < width; j++) 											   //一行有效信息
 8013b50:	2300      	movs	r3, #0
 8013b52:	663b      	str	r3, [r7, #96]	; 0x60
 8013b54:	e04c      	b.n	8013bf0 <Screen_ShowFileImage+0x1a0>
			{
				k = j * 3 + m * width * 3;																	 //一行中第K个像素的起点
 8013b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013b5a:	fb03 f202 	mul.w	r2, r3, r2
 8013b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b60:	441a      	add	r2, r3
 8013b62:	4613      	mov	r3, r2
 8013b64:	005b      	lsls	r3, r3, #1
 8013b66:	4413      	add	r3, r2
 8013b68:	64bb      	str	r3, [r7, #72]	; 0x48
				row = readRowNum - m - 1;
 8013b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b6c:	f1c3 030e 	rsb	r3, r3, #14
 8013b70:	647b      	str	r3, [r7, #68]	; 0x44
				temp = RGB24TORGB16(pColorData[k + 2], pColorData[k + 1], pColorData[k]);
 8013b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b74:	3302      	adds	r3, #2
 8013b76:	4a3c      	ldr	r2, [pc, #240]	; (8013c68 <Screen_ShowFileImage+0x218>)
 8013b78:	5cd3      	ldrb	r3, [r2, r3]
 8013b7a:	08db      	lsrs	r3, r3, #3
 8013b7c:	b2db      	uxtb	r3, r3
 8013b7e:	02db      	lsls	r3, r3, #11
 8013b80:	b21a      	sxth	r2, r3
 8013b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b84:	3301      	adds	r3, #1
 8013b86:	4938      	ldr	r1, [pc, #224]	; (8013c68 <Screen_ShowFileImage+0x218>)
 8013b88:	5ccb      	ldrb	r3, [r1, r3]
 8013b8a:	089b      	lsrs	r3, r3, #2
 8013b8c:	b2db      	uxtb	r3, r3
 8013b8e:	015b      	lsls	r3, r3, #5
 8013b90:	b21b      	sxth	r3, r3
 8013b92:	4313      	orrs	r3, r2
 8013b94:	b21a      	sxth	r2, r3
 8013b96:	4934      	ldr	r1, [pc, #208]	; (8013c68 <Screen_ShowFileImage+0x218>)
 8013b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b9a:	440b      	add	r3, r1
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	08db      	lsrs	r3, r3, #3
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	b21b      	sxth	r3, r3
 8013ba4:	4313      	orrs	r3, r2
 8013ba6:	b21b      	sxth	r3, r3
 8013ba8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				ImageTransform_Buffer[row * 480 + j * 2] = temp >> 8;
 8013bac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013bb0:	0a1b      	lsrs	r3, r3, #8
 8013bb2:	b299      	uxth	r1, r3
 8013bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	011b      	lsls	r3, r3, #4
 8013bba:	1a9b      	subs	r3, r3, r2
 8013bbc:	011b      	lsls	r3, r3, #4
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bc2:	4413      	add	r3, r2
 8013bc4:	005b      	lsls	r3, r3, #1
 8013bc6:	b2c9      	uxtb	r1, r1
 8013bc8:	4a28      	ldr	r2, [pc, #160]	; (8013c6c <Screen_ShowFileImage+0x21c>)
 8013bca:	54d1      	strb	r1, [r2, r3]
				ImageTransform_Buffer[row * 480 + j * 2 + 1] = temp;
 8013bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bce:	4613      	mov	r3, r2
 8013bd0:	011b      	lsls	r3, r3, #4
 8013bd2:	1a9b      	subs	r3, r3, r2
 8013bd4:	011b      	lsls	r3, r3, #4
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bda:	4413      	add	r3, r2
 8013bdc:	005b      	lsls	r3, r3, #1
 8013bde:	3301      	adds	r3, #1
 8013be0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8013be4:	b2d1      	uxtb	r1, r2
 8013be6:	4a21      	ldr	r2, [pc, #132]	; (8013c6c <Screen_ShowFileImage+0x21c>)
 8013be8:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j < width; j++) 											   //一行有效信息
 8013bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bec:	3301      	adds	r3, #1
 8013bee:	663b      	str	r3, [r7, #96]	; 0x60
 8013bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	dbae      	blt.n	8013b56 <Screen_ShowFileImage+0x106>
		for (m = 0; m < readRowNum; m++)
 8013bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c00:	2b0e      	cmp	r3, #14
 8013c02:	dda5      	ble.n	8013b50 <Screen_ShowFileImage+0x100>
//				ImageTransform_Buffer[row * 480 + j * 2] = ((pColorData[k + 1] << 1) | pColorData[k] >> 7);
//				ImageTransform_Buffer[row * 480 + j * 2 + 1] = (pColorData[k] & 0x1F) | ((pColorData[k] & 0xE0) << 1);
			}
		}

		LCD_Show_Image(0, i * readRowNum, 240, readRowNum, ImageTransform_Buffer);
 8013c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	461a      	mov	r2, r3
 8013c0a:	0112      	lsls	r2, r2, #4
 8013c0c:	1ad3      	subs	r3, r2, r3
 8013c0e:	b299      	uxth	r1, r3
 8013c10:	4b16      	ldr	r3, [pc, #88]	; (8013c6c <Screen_ShowFileImage+0x21c>)
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	230f      	movs	r3, #15
 8013c16:	22f0      	movs	r2, #240	; 0xf0
 8013c18:	2000      	movs	r0, #0
 8013c1a:	f7ff fe0d 	bl	8013838 <LCD_Show_Image>
		delay_us(LCD_File_Disp_Delay_us);
 8013c1e:	2028      	movs	r0, #40	; 0x28
 8013c20:	f7fc ff9c 	bl	8010b5c <delay_us>
	for (i = 0; i < height / readRowNum; i++)
 8013c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c26:	3301      	adds	r3, #1
 8013c28:	667b      	str	r3, [r7, #100]	; 0x64
 8013c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c2c:	4a10      	ldr	r2, [pc, #64]	; (8013c70 <Screen_ShowFileImage+0x220>)
 8013c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8013c32:	441a      	add	r2, r3
 8013c34:	10d2      	asrs	r2, r2, #3
 8013c36:	17db      	asrs	r3, r3, #31
 8013c38:	1ad3      	subs	r3, r2, r3
 8013c3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	f6ff af69 	blt.w	8013b14 <Screen_ShowFileImage+0xc4>
	}
	// 不再读写，关闭文件 //
	f_close(&file);
 8013c42:	4803      	ldr	r0, [pc, #12]	; (8013c50 <Screen_ShowFileImage+0x200>)
 8013c44:	f7f8 ff42 	bl	800cacc <f_close>

	// 注销一个FatFS设备：SD卡 //
	//FATFS_UnLinkDriver(SDPath);

	//printfX("总耗时：%.d ms\n\n", (int )(uwTick - time));
}
 8013c48:	bf00      	nop
 8013c4a:	3768      	adds	r7, #104	; 0x68
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	20001f20 	.word	0x20001f20
 8013c54:	20002144 	.word	0x20002144
 8013c58:	08019ab4 	.word	0x08019ab4
 8013c5c:	20001308 	.word	0x20001308
 8013c60:	08019ad4 	.word	0x08019ad4
 8013c64:	08019b04 	.word	0x08019b04
 8013c68:	200025f4 	.word	0x200025f4
 8013c6c:	20005e34 	.word	0x20005e34
 8013c70:	88888889 	.word	0x88888889

08013c74 <Init_USART>:
uint8_t RxData_Index[UART_Number];
//1 未读 0 已读
uint8_t RxData_Flag[UART_Number];

void Init_USART()
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
	//打开串口接收中断
	for (int var = 0; var < UART_Number; ++var)
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	607b      	str	r3, [r7, #4]
 8013c7e:	e00d      	b.n	8013c9c <Init_USART+0x28>
	{
		HAL_UART_Receive_IT(UART_Handles[var], &RxData_Buffer[var], 1);
 8013c80:	4a0a      	ldr	r2, [pc, #40]	; (8013cac <Init_USART+0x38>)
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	4a09      	ldr	r2, [pc, #36]	; (8013cb0 <Init_USART+0x3c>)
 8013c8c:	4413      	add	r3, r2
 8013c8e:	2201      	movs	r2, #1
 8013c90:	4619      	mov	r1, r3
 8013c92:	f7f5 fc12 	bl	80094ba <HAL_UART_Receive_IT>
	for (int var = 0; var < UART_Number; ++var)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	3301      	adds	r3, #1
 8013c9a:	607b      	str	r3, [r7, #4]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	ddee      	ble.n	8013c80 <Init_USART+0xc>
	}
}
 8013ca2:	bf00      	nop
 8013ca4:	bf00      	nop
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	20000220 	.word	0x20000220
 8013cb0:	20007aa4 	.word	0x20007aa4

08013cb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013cb4:	b5b0      	push	{r4, r5, r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	73fb      	strb	r3, [r7, #15]
	//判断串口序号
	for (int var = 0; var < UART_Number; ++var)
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	60bb      	str	r3, [r7, #8]
 8013cc4:	e00c      	b.n	8013ce0 <HAL_UART_RxCpltCallback+0x2c>
	{
		if (huart->Instance == UART_Types[var])
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	4932      	ldr	r1, [pc, #200]	; (8013d94 <HAL_UART_RxCpltCallback+0xe0>)
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	d101      	bne.n	8013cda <HAL_UART_RxCpltCallback+0x26>
		{
			index = var;
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	73fb      	strb	r3, [r7, #15]
	for (int var = 0; var < UART_Number; ++var)
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	60bb      	str	r3, [r7, #8]
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	ddef      	ble.n	8013cc6 <HAL_UART_RxCpltCallback+0x12>
		}
	}

	//判断结束字符
	if (RxData_Buffer[index] == '\0' || RxData_Buffer[index] == '#' || RxData_Buffer[index] == '\n')
 8013ce6:	7bfb      	ldrb	r3, [r7, #15]
 8013ce8:	4a2b      	ldr	r2, [pc, #172]	; (8013d98 <HAL_UART_RxCpltCallback+0xe4>)
 8013cea:	5cd3      	ldrb	r3, [r2, r3]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d009      	beq.n	8013d04 <HAL_UART_RxCpltCallback+0x50>
 8013cf0:	7bfb      	ldrb	r3, [r7, #15]
 8013cf2:	4a29      	ldr	r2, [pc, #164]	; (8013d98 <HAL_UART_RxCpltCallback+0xe4>)
 8013cf4:	5cd3      	ldrb	r3, [r2, r3]
 8013cf6:	2b23      	cmp	r3, #35	; 0x23
 8013cf8:	d004      	beq.n	8013d04 <HAL_UART_RxCpltCallback+0x50>
 8013cfa:	7bfb      	ldrb	r3, [r7, #15]
 8013cfc:	4a26      	ldr	r2, [pc, #152]	; (8013d98 <HAL_UART_RxCpltCallback+0xe4>)
 8013cfe:	5cd3      	ldrb	r3, [r2, r3]
 8013d00:	2b0a      	cmp	r3, #10
 8013d02:	d116      	bne.n	8013d32 <HAL_UART_RxCpltCallback+0x7e>
	{
		RxData[index][RxData_Index[index]++] = '\0';
 8013d04:	7bfa      	ldrb	r2, [r7, #15]
 8013d06:	7bfb      	ldrb	r3, [r7, #15]
 8013d08:	4924      	ldr	r1, [pc, #144]	; (8013d9c <HAL_UART_RxCpltCallback+0xe8>)
 8013d0a:	5cc9      	ldrb	r1, [r1, r3]
 8013d0c:	1c48      	adds	r0, r1, #1
 8013d0e:	b2c4      	uxtb	r4, r0
 8013d10:	4822      	ldr	r0, [pc, #136]	; (8013d9c <HAL_UART_RxCpltCallback+0xe8>)
 8013d12:	54c4      	strb	r4, [r0, r3]
 8013d14:	4608      	mov	r0, r1
 8013d16:	4922      	ldr	r1, [pc, #136]	; (8013da0 <HAL_UART_RxCpltCallback+0xec>)
 8013d18:	4613      	mov	r3, r2
 8013d1a:	009b      	lsls	r3, r3, #2
 8013d1c:	4413      	add	r3, r2
 8013d1e:	00db      	lsls	r3, r3, #3
 8013d20:	440b      	add	r3, r1
 8013d22:	4403      	add	r3, r0
 8013d24:	2200      	movs	r2, #0
 8013d26:	701a      	strb	r2, [r3, #0]
		RxData_Flag[index] = RX_UnRead;
 8013d28:	7bfb      	ldrb	r3, [r7, #15]
 8013d2a:	4a1e      	ldr	r2, [pc, #120]	; (8013da4 <HAL_UART_RxCpltCallback+0xf0>)
 8013d2c:	2101      	movs	r1, #1
 8013d2e:	54d1      	strb	r1, [r2, r3]
 8013d30:	e021      	b.n	8013d76 <HAL_UART_RxCpltCallback+0xc2>
	}
	else
	{
		//未读 则清零
		if (RxData_Flag[index] == RX_UnRead)
 8013d32:	7bfb      	ldrb	r3, [r7, #15]
 8013d34:	4a1b      	ldr	r2, [pc, #108]	; (8013da4 <HAL_UART_RxCpltCallback+0xf0>)
 8013d36:	5cd3      	ldrb	r3, [r2, r3]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d107      	bne.n	8013d4c <HAL_UART_RxCpltCallback+0x98>
		{
			RxData_Flag[index] = RX_NoData;
 8013d3c:	7bfb      	ldrb	r3, [r7, #15]
 8013d3e:	4a19      	ldr	r2, [pc, #100]	; (8013da4 <HAL_UART_RxCpltCallback+0xf0>)
 8013d40:	2100      	movs	r1, #0
 8013d42:	54d1      	strb	r1, [r2, r3]
			RxData_Index[index] = RX_NoData;
 8013d44:	7bfb      	ldrb	r3, [r7, #15]
 8013d46:	4a15      	ldr	r2, [pc, #84]	; (8013d9c <HAL_UART_RxCpltCallback+0xe8>)
 8013d48:	2100      	movs	r1, #0
 8013d4a:	54d1      	strb	r1, [r2, r3]
		}

		//复制数据
		RxData[index][RxData_Index[index]++] = RxData_Buffer[index];
 8013d4c:	7bf8      	ldrb	r0, [r7, #15]
 8013d4e:	7bfa      	ldrb	r2, [r7, #15]
 8013d50:	7bfb      	ldrb	r3, [r7, #15]
 8013d52:	4912      	ldr	r1, [pc, #72]	; (8013d9c <HAL_UART_RxCpltCallback+0xe8>)
 8013d54:	5cc9      	ldrb	r1, [r1, r3]
 8013d56:	1c4c      	adds	r4, r1, #1
 8013d58:	b2e5      	uxtb	r5, r4
 8013d5a:	4c10      	ldr	r4, [pc, #64]	; (8013d9c <HAL_UART_RxCpltCallback+0xe8>)
 8013d5c:	54e5      	strb	r5, [r4, r3]
 8013d5e:	460c      	mov	r4, r1
 8013d60:	4b0d      	ldr	r3, [pc, #52]	; (8013d98 <HAL_UART_RxCpltCallback+0xe4>)
 8013d62:	5c18      	ldrb	r0, [r3, r0]
 8013d64:	490e      	ldr	r1, [pc, #56]	; (8013da0 <HAL_UART_RxCpltCallback+0xec>)
 8013d66:	4613      	mov	r3, r2
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	4413      	add	r3, r2
 8013d6c:	00db      	lsls	r3, r3, #3
 8013d6e:	440b      	add	r3, r1
 8013d70:	4423      	add	r3, r4
 8013d72:	4602      	mov	r2, r0
 8013d74:	701a      	strb	r2, [r3, #0]
	}

	//打开串口接收中断
	HAL_UART_Receive_IT(UART_Handles[index], &RxData_Buffer[index], 1);
 8013d76:	7bfb      	ldrb	r3, [r7, #15]
 8013d78:	4a0b      	ldr	r2, [pc, #44]	; (8013da8 <HAL_UART_RxCpltCallback+0xf4>)
 8013d7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013d7e:	7bfb      	ldrb	r3, [r7, #15]
 8013d80:	4a05      	ldr	r2, [pc, #20]	; (8013d98 <HAL_UART_RxCpltCallback+0xe4>)
 8013d82:	4413      	add	r3, r2
 8013d84:	2201      	movs	r2, #1
 8013d86:	4619      	mov	r1, r3
 8013d88:	f7f5 fb97 	bl	80094ba <HAL_UART_Receive_IT>
}
 8013d8c:	bf00      	nop
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bdb0      	pop	{r4, r5, r7, pc}
 8013d94:	20000228 	.word	0x20000228
 8013d98:	20007aa4 	.word	0x20007aa4
 8013d9c:	20007aa8 	.word	0x20007aa8
 8013da0:	20007a54 	.word	0x20007a54
 8013da4:	20007aac 	.word	0x20007aac
 8013da8:	20000220 	.word	0x20000220

08013dac <CleanRxData>:

//清除未读标志
void CleanRxData(uint8_t index)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b083      	sub	sp, #12
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	4603      	mov	r3, r0
 8013db4:	71fb      	strb	r3, [r7, #7]

	RxData_Flag[index] = 0;
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	4a06      	ldr	r2, [pc, #24]	; (8013dd4 <CleanRxData+0x28>)
 8013dba:	2100      	movs	r1, #0
 8013dbc:	54d1      	strb	r1, [r2, r3]
	RxData_Index[index] = 0;
 8013dbe:	79fb      	ldrb	r3, [r7, #7]
 8013dc0:	4a05      	ldr	r2, [pc, #20]	; (8013dd8 <CleanRxData+0x2c>)
 8013dc2:	2100      	movs	r1, #0
 8013dc4:	54d1      	strb	r1, [r2, r3]
}
 8013dc6:	bf00      	nop
 8013dc8:	370c      	adds	r7, #12
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd0:	4770      	bx	lr
 8013dd2:	bf00      	nop
 8013dd4:	20007aac 	.word	0x20007aac
 8013dd8:	20007aa8 	.word	0x20007aa8

08013ddc <printf_Base>:

void printf_Base(const char *TX_String)
{
 8013ddc:	b590      	push	{r4, r7, lr}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART_Handles[Printf_UART], (uint8_t*) TX_String, strlen(TX_String), 0xFFFF);
 8013de4:	4b08      	ldr	r3, [pc, #32]	; (8013e08 <printf_Base+0x2c>)
 8013de6:	685c      	ldr	r4, [r3, #4]
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ec f9f1 	bl	80001d0 <strlen>
 8013dee:	4603      	mov	r3, r0
 8013df0:	b29a      	uxth	r2, r3
 8013df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013df6:	6879      	ldr	r1, [r7, #4]
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f7f5 facc 	bl	8009396 <HAL_UART_Transmit>
}
 8013dfe:	bf00      	nop
 8013e00:	370c      	adds	r7, #12
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd90      	pop	{r4, r7, pc}
 8013e06:	bf00      	nop
 8013e08:	20000220 	.word	0x20000220

08013e0c <__errno>:
 8013e0c:	4b01      	ldr	r3, [pc, #4]	; (8013e14 <__errno+0x8>)
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop
 8013e14:	20000230 	.word	0x20000230

08013e18 <__libc_init_array>:
 8013e18:	b570      	push	{r4, r5, r6, lr}
 8013e1a:	4d0d      	ldr	r5, [pc, #52]	; (8013e50 <__libc_init_array+0x38>)
 8013e1c:	4c0d      	ldr	r4, [pc, #52]	; (8013e54 <__libc_init_array+0x3c>)
 8013e1e:	1b64      	subs	r4, r4, r5
 8013e20:	10a4      	asrs	r4, r4, #2
 8013e22:	2600      	movs	r6, #0
 8013e24:	42a6      	cmp	r6, r4
 8013e26:	d109      	bne.n	8013e3c <__libc_init_array+0x24>
 8013e28:	4d0b      	ldr	r5, [pc, #44]	; (8013e58 <__libc_init_array+0x40>)
 8013e2a:	4c0c      	ldr	r4, [pc, #48]	; (8013e5c <__libc_init_array+0x44>)
 8013e2c:	f005 faca 	bl	80193c4 <_init>
 8013e30:	1b64      	subs	r4, r4, r5
 8013e32:	10a4      	asrs	r4, r4, #2
 8013e34:	2600      	movs	r6, #0
 8013e36:	42a6      	cmp	r6, r4
 8013e38:	d105      	bne.n	8013e46 <__libc_init_array+0x2e>
 8013e3a:	bd70      	pop	{r4, r5, r6, pc}
 8013e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e40:	4798      	blx	r3
 8013e42:	3601      	adds	r6, #1
 8013e44:	e7ee      	b.n	8013e24 <__libc_init_array+0xc>
 8013e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e4a:	4798      	blx	r3
 8013e4c:	3601      	adds	r6, #1
 8013e4e:	e7f2      	b.n	8013e36 <__libc_init_array+0x1e>
 8013e50:	0801e3a8 	.word	0x0801e3a8
 8013e54:	0801e3a8 	.word	0x0801e3a8
 8013e58:	0801e3a8 	.word	0x0801e3a8
 8013e5c:	0801e3ac 	.word	0x0801e3ac

08013e60 <memcmp>:
 8013e60:	b510      	push	{r4, lr}
 8013e62:	3901      	subs	r1, #1
 8013e64:	4402      	add	r2, r0
 8013e66:	4290      	cmp	r0, r2
 8013e68:	d101      	bne.n	8013e6e <memcmp+0xe>
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	e005      	b.n	8013e7a <memcmp+0x1a>
 8013e6e:	7803      	ldrb	r3, [r0, #0]
 8013e70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013e74:	42a3      	cmp	r3, r4
 8013e76:	d001      	beq.n	8013e7c <memcmp+0x1c>
 8013e78:	1b18      	subs	r0, r3, r4
 8013e7a:	bd10      	pop	{r4, pc}
 8013e7c:	3001      	adds	r0, #1
 8013e7e:	e7f2      	b.n	8013e66 <memcmp+0x6>

08013e80 <memset>:
 8013e80:	4402      	add	r2, r0
 8013e82:	4603      	mov	r3, r0
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d100      	bne.n	8013e8a <memset+0xa>
 8013e88:	4770      	bx	lr
 8013e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8013e8e:	e7f9      	b.n	8013e84 <memset+0x4>

08013e90 <__cvt>:
 8013e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e94:	ec55 4b10 	vmov	r4, r5, d0
 8013e98:	2d00      	cmp	r5, #0
 8013e9a:	460e      	mov	r6, r1
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	462b      	mov	r3, r5
 8013ea0:	bfbb      	ittet	lt
 8013ea2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013ea6:	461d      	movlt	r5, r3
 8013ea8:	2300      	movge	r3, #0
 8013eaa:	232d      	movlt	r3, #45	; 0x2d
 8013eac:	700b      	strb	r3, [r1, #0]
 8013eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013eb4:	4691      	mov	r9, r2
 8013eb6:	f023 0820 	bic.w	r8, r3, #32
 8013eba:	bfbc      	itt	lt
 8013ebc:	4622      	movlt	r2, r4
 8013ebe:	4614      	movlt	r4, r2
 8013ec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ec4:	d005      	beq.n	8013ed2 <__cvt+0x42>
 8013ec6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013eca:	d100      	bne.n	8013ece <__cvt+0x3e>
 8013ecc:	3601      	adds	r6, #1
 8013ece:	2102      	movs	r1, #2
 8013ed0:	e000      	b.n	8013ed4 <__cvt+0x44>
 8013ed2:	2103      	movs	r1, #3
 8013ed4:	ab03      	add	r3, sp, #12
 8013ed6:	9301      	str	r3, [sp, #4]
 8013ed8:	ab02      	add	r3, sp, #8
 8013eda:	9300      	str	r3, [sp, #0]
 8013edc:	ec45 4b10 	vmov	d0, r4, r5
 8013ee0:	4653      	mov	r3, sl
 8013ee2:	4632      	mov	r2, r6
 8013ee4:	f001 fefc 	bl	8015ce0 <_dtoa_r>
 8013ee8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013eec:	4607      	mov	r7, r0
 8013eee:	d102      	bne.n	8013ef6 <__cvt+0x66>
 8013ef0:	f019 0f01 	tst.w	r9, #1
 8013ef4:	d022      	beq.n	8013f3c <__cvt+0xac>
 8013ef6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013efa:	eb07 0906 	add.w	r9, r7, r6
 8013efe:	d110      	bne.n	8013f22 <__cvt+0x92>
 8013f00:	783b      	ldrb	r3, [r7, #0]
 8013f02:	2b30      	cmp	r3, #48	; 0x30
 8013f04:	d10a      	bne.n	8013f1c <__cvt+0x8c>
 8013f06:	2200      	movs	r2, #0
 8013f08:	2300      	movs	r3, #0
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	f7ec fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f12:	b918      	cbnz	r0, 8013f1c <__cvt+0x8c>
 8013f14:	f1c6 0601 	rsb	r6, r6, #1
 8013f18:	f8ca 6000 	str.w	r6, [sl]
 8013f1c:	f8da 3000 	ldr.w	r3, [sl]
 8013f20:	4499      	add	r9, r3
 8013f22:	2200      	movs	r2, #0
 8013f24:	2300      	movs	r3, #0
 8013f26:	4620      	mov	r0, r4
 8013f28:	4629      	mov	r1, r5
 8013f2a:	f7ec fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f2e:	b108      	cbz	r0, 8013f34 <__cvt+0xa4>
 8013f30:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f34:	2230      	movs	r2, #48	; 0x30
 8013f36:	9b03      	ldr	r3, [sp, #12]
 8013f38:	454b      	cmp	r3, r9
 8013f3a:	d307      	bcc.n	8013f4c <__cvt+0xbc>
 8013f3c:	9b03      	ldr	r3, [sp, #12]
 8013f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f40:	1bdb      	subs	r3, r3, r7
 8013f42:	4638      	mov	r0, r7
 8013f44:	6013      	str	r3, [r2, #0]
 8013f46:	b004      	add	sp, #16
 8013f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f4c:	1c59      	adds	r1, r3, #1
 8013f4e:	9103      	str	r1, [sp, #12]
 8013f50:	701a      	strb	r2, [r3, #0]
 8013f52:	e7f0      	b.n	8013f36 <__cvt+0xa6>

08013f54 <__exponent>:
 8013f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f56:	4603      	mov	r3, r0
 8013f58:	2900      	cmp	r1, #0
 8013f5a:	bfb8      	it	lt
 8013f5c:	4249      	neglt	r1, r1
 8013f5e:	f803 2b02 	strb.w	r2, [r3], #2
 8013f62:	bfb4      	ite	lt
 8013f64:	222d      	movlt	r2, #45	; 0x2d
 8013f66:	222b      	movge	r2, #43	; 0x2b
 8013f68:	2909      	cmp	r1, #9
 8013f6a:	7042      	strb	r2, [r0, #1]
 8013f6c:	dd2a      	ble.n	8013fc4 <__exponent+0x70>
 8013f6e:	f10d 0407 	add.w	r4, sp, #7
 8013f72:	46a4      	mov	ip, r4
 8013f74:	270a      	movs	r7, #10
 8013f76:	46a6      	mov	lr, r4
 8013f78:	460a      	mov	r2, r1
 8013f7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8013f7e:	fb07 1516 	mls	r5, r7, r6, r1
 8013f82:	3530      	adds	r5, #48	; 0x30
 8013f84:	2a63      	cmp	r2, #99	; 0x63
 8013f86:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013f8e:	4631      	mov	r1, r6
 8013f90:	dcf1      	bgt.n	8013f76 <__exponent+0x22>
 8013f92:	3130      	adds	r1, #48	; 0x30
 8013f94:	f1ae 0502 	sub.w	r5, lr, #2
 8013f98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013f9c:	1c44      	adds	r4, r0, #1
 8013f9e:	4629      	mov	r1, r5
 8013fa0:	4561      	cmp	r1, ip
 8013fa2:	d30a      	bcc.n	8013fba <__exponent+0x66>
 8013fa4:	f10d 0209 	add.w	r2, sp, #9
 8013fa8:	eba2 020e 	sub.w	r2, r2, lr
 8013fac:	4565      	cmp	r5, ip
 8013fae:	bf88      	it	hi
 8013fb0:	2200      	movhi	r2, #0
 8013fb2:	4413      	add	r3, r2
 8013fb4:	1a18      	subs	r0, r3, r0
 8013fb6:	b003      	add	sp, #12
 8013fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fbe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013fc2:	e7ed      	b.n	8013fa0 <__exponent+0x4c>
 8013fc4:	2330      	movs	r3, #48	; 0x30
 8013fc6:	3130      	adds	r1, #48	; 0x30
 8013fc8:	7083      	strb	r3, [r0, #2]
 8013fca:	70c1      	strb	r1, [r0, #3]
 8013fcc:	1d03      	adds	r3, r0, #4
 8013fce:	e7f1      	b.n	8013fb4 <__exponent+0x60>

08013fd0 <_printf_float>:
 8013fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd4:	ed2d 8b02 	vpush	{d8}
 8013fd8:	b08d      	sub	sp, #52	; 0x34
 8013fda:	460c      	mov	r4, r1
 8013fdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013fe0:	4616      	mov	r6, r2
 8013fe2:	461f      	mov	r7, r3
 8013fe4:	4605      	mov	r5, r0
 8013fe6:	f003 f98f 	bl	8017308 <_localeconv_r>
 8013fea:	f8d0 a000 	ldr.w	sl, [r0]
 8013fee:	4650      	mov	r0, sl
 8013ff0:	f7ec f8ee 	bl	80001d0 <strlen>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ff8:	6823      	ldr	r3, [r4, #0]
 8013ffa:	9305      	str	r3, [sp, #20]
 8013ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8014000:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014004:	3307      	adds	r3, #7
 8014006:	f023 0307 	bic.w	r3, r3, #7
 801400a:	f103 0208 	add.w	r2, r3, #8
 801400e:	f8c8 2000 	str.w	r2, [r8]
 8014012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014016:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801401a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801401e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014022:	9307      	str	r3, [sp, #28]
 8014024:	f8cd 8018 	str.w	r8, [sp, #24]
 8014028:	ee08 0a10 	vmov	s16, r0
 801402c:	4b9f      	ldr	r3, [pc, #636]	; (80142ac <_printf_float+0x2dc>)
 801402e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014032:	f04f 32ff 	mov.w	r2, #4294967295
 8014036:	f7ec fd79 	bl	8000b2c <__aeabi_dcmpun>
 801403a:	bb88      	cbnz	r0, 80140a0 <_printf_float+0xd0>
 801403c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014040:	4b9a      	ldr	r3, [pc, #616]	; (80142ac <_printf_float+0x2dc>)
 8014042:	f04f 32ff 	mov.w	r2, #4294967295
 8014046:	f7ec fd53 	bl	8000af0 <__aeabi_dcmple>
 801404a:	bb48      	cbnz	r0, 80140a0 <_printf_float+0xd0>
 801404c:	2200      	movs	r2, #0
 801404e:	2300      	movs	r3, #0
 8014050:	4640      	mov	r0, r8
 8014052:	4649      	mov	r1, r9
 8014054:	f7ec fd42 	bl	8000adc <__aeabi_dcmplt>
 8014058:	b110      	cbz	r0, 8014060 <_printf_float+0x90>
 801405a:	232d      	movs	r3, #45	; 0x2d
 801405c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014060:	4b93      	ldr	r3, [pc, #588]	; (80142b0 <_printf_float+0x2e0>)
 8014062:	4894      	ldr	r0, [pc, #592]	; (80142b4 <_printf_float+0x2e4>)
 8014064:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014068:	bf94      	ite	ls
 801406a:	4698      	movls	r8, r3
 801406c:	4680      	movhi	r8, r0
 801406e:	2303      	movs	r3, #3
 8014070:	6123      	str	r3, [r4, #16]
 8014072:	9b05      	ldr	r3, [sp, #20]
 8014074:	f023 0204 	bic.w	r2, r3, #4
 8014078:	6022      	str	r2, [r4, #0]
 801407a:	f04f 0900 	mov.w	r9, #0
 801407e:	9700      	str	r7, [sp, #0]
 8014080:	4633      	mov	r3, r6
 8014082:	aa0b      	add	r2, sp, #44	; 0x2c
 8014084:	4621      	mov	r1, r4
 8014086:	4628      	mov	r0, r5
 8014088:	f000 f9d8 	bl	801443c <_printf_common>
 801408c:	3001      	adds	r0, #1
 801408e:	f040 8090 	bne.w	80141b2 <_printf_float+0x1e2>
 8014092:	f04f 30ff 	mov.w	r0, #4294967295
 8014096:	b00d      	add	sp, #52	; 0x34
 8014098:	ecbd 8b02 	vpop	{d8}
 801409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a0:	4642      	mov	r2, r8
 80140a2:	464b      	mov	r3, r9
 80140a4:	4640      	mov	r0, r8
 80140a6:	4649      	mov	r1, r9
 80140a8:	f7ec fd40 	bl	8000b2c <__aeabi_dcmpun>
 80140ac:	b140      	cbz	r0, 80140c0 <_printf_float+0xf0>
 80140ae:	464b      	mov	r3, r9
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	bfbc      	itt	lt
 80140b4:	232d      	movlt	r3, #45	; 0x2d
 80140b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80140ba:	487f      	ldr	r0, [pc, #508]	; (80142b8 <_printf_float+0x2e8>)
 80140bc:	4b7f      	ldr	r3, [pc, #508]	; (80142bc <_printf_float+0x2ec>)
 80140be:	e7d1      	b.n	8014064 <_printf_float+0x94>
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80140c6:	9206      	str	r2, [sp, #24]
 80140c8:	1c5a      	adds	r2, r3, #1
 80140ca:	d13f      	bne.n	801414c <_printf_float+0x17c>
 80140cc:	2306      	movs	r3, #6
 80140ce:	6063      	str	r3, [r4, #4]
 80140d0:	9b05      	ldr	r3, [sp, #20]
 80140d2:	6861      	ldr	r1, [r4, #4]
 80140d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80140d8:	2300      	movs	r3, #0
 80140da:	9303      	str	r3, [sp, #12]
 80140dc:	ab0a      	add	r3, sp, #40	; 0x28
 80140de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80140e2:	ab09      	add	r3, sp, #36	; 0x24
 80140e4:	ec49 8b10 	vmov	d0, r8, r9
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	6022      	str	r2, [r4, #0]
 80140ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80140f0:	4628      	mov	r0, r5
 80140f2:	f7ff fecd 	bl	8013e90 <__cvt>
 80140f6:	9b06      	ldr	r3, [sp, #24]
 80140f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140fa:	2b47      	cmp	r3, #71	; 0x47
 80140fc:	4680      	mov	r8, r0
 80140fe:	d108      	bne.n	8014112 <_printf_float+0x142>
 8014100:	1cc8      	adds	r0, r1, #3
 8014102:	db02      	blt.n	801410a <_printf_float+0x13a>
 8014104:	6863      	ldr	r3, [r4, #4]
 8014106:	4299      	cmp	r1, r3
 8014108:	dd41      	ble.n	801418e <_printf_float+0x1be>
 801410a:	f1ab 0b02 	sub.w	fp, fp, #2
 801410e:	fa5f fb8b 	uxtb.w	fp, fp
 8014112:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014116:	d820      	bhi.n	801415a <_printf_float+0x18a>
 8014118:	3901      	subs	r1, #1
 801411a:	465a      	mov	r2, fp
 801411c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014120:	9109      	str	r1, [sp, #36]	; 0x24
 8014122:	f7ff ff17 	bl	8013f54 <__exponent>
 8014126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014128:	1813      	adds	r3, r2, r0
 801412a:	2a01      	cmp	r2, #1
 801412c:	4681      	mov	r9, r0
 801412e:	6123      	str	r3, [r4, #16]
 8014130:	dc02      	bgt.n	8014138 <_printf_float+0x168>
 8014132:	6822      	ldr	r2, [r4, #0]
 8014134:	07d2      	lsls	r2, r2, #31
 8014136:	d501      	bpl.n	801413c <_printf_float+0x16c>
 8014138:	3301      	adds	r3, #1
 801413a:	6123      	str	r3, [r4, #16]
 801413c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014140:	2b00      	cmp	r3, #0
 8014142:	d09c      	beq.n	801407e <_printf_float+0xae>
 8014144:	232d      	movs	r3, #45	; 0x2d
 8014146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801414a:	e798      	b.n	801407e <_printf_float+0xae>
 801414c:	9a06      	ldr	r2, [sp, #24]
 801414e:	2a47      	cmp	r2, #71	; 0x47
 8014150:	d1be      	bne.n	80140d0 <_printf_float+0x100>
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1bc      	bne.n	80140d0 <_printf_float+0x100>
 8014156:	2301      	movs	r3, #1
 8014158:	e7b9      	b.n	80140ce <_printf_float+0xfe>
 801415a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801415e:	d118      	bne.n	8014192 <_printf_float+0x1c2>
 8014160:	2900      	cmp	r1, #0
 8014162:	6863      	ldr	r3, [r4, #4]
 8014164:	dd0b      	ble.n	801417e <_printf_float+0x1ae>
 8014166:	6121      	str	r1, [r4, #16]
 8014168:	b913      	cbnz	r3, 8014170 <_printf_float+0x1a0>
 801416a:	6822      	ldr	r2, [r4, #0]
 801416c:	07d0      	lsls	r0, r2, #31
 801416e:	d502      	bpl.n	8014176 <_printf_float+0x1a6>
 8014170:	3301      	adds	r3, #1
 8014172:	440b      	add	r3, r1
 8014174:	6123      	str	r3, [r4, #16]
 8014176:	65a1      	str	r1, [r4, #88]	; 0x58
 8014178:	f04f 0900 	mov.w	r9, #0
 801417c:	e7de      	b.n	801413c <_printf_float+0x16c>
 801417e:	b913      	cbnz	r3, 8014186 <_printf_float+0x1b6>
 8014180:	6822      	ldr	r2, [r4, #0]
 8014182:	07d2      	lsls	r2, r2, #31
 8014184:	d501      	bpl.n	801418a <_printf_float+0x1ba>
 8014186:	3302      	adds	r3, #2
 8014188:	e7f4      	b.n	8014174 <_printf_float+0x1a4>
 801418a:	2301      	movs	r3, #1
 801418c:	e7f2      	b.n	8014174 <_printf_float+0x1a4>
 801418e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014194:	4299      	cmp	r1, r3
 8014196:	db05      	blt.n	80141a4 <_printf_float+0x1d4>
 8014198:	6823      	ldr	r3, [r4, #0]
 801419a:	6121      	str	r1, [r4, #16]
 801419c:	07d8      	lsls	r0, r3, #31
 801419e:	d5ea      	bpl.n	8014176 <_printf_float+0x1a6>
 80141a0:	1c4b      	adds	r3, r1, #1
 80141a2:	e7e7      	b.n	8014174 <_printf_float+0x1a4>
 80141a4:	2900      	cmp	r1, #0
 80141a6:	bfd4      	ite	le
 80141a8:	f1c1 0202 	rsble	r2, r1, #2
 80141ac:	2201      	movgt	r2, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	e7e0      	b.n	8014174 <_printf_float+0x1a4>
 80141b2:	6823      	ldr	r3, [r4, #0]
 80141b4:	055a      	lsls	r2, r3, #21
 80141b6:	d407      	bmi.n	80141c8 <_printf_float+0x1f8>
 80141b8:	6923      	ldr	r3, [r4, #16]
 80141ba:	4642      	mov	r2, r8
 80141bc:	4631      	mov	r1, r6
 80141be:	4628      	mov	r0, r5
 80141c0:	47b8      	blx	r7
 80141c2:	3001      	adds	r0, #1
 80141c4:	d12c      	bne.n	8014220 <_printf_float+0x250>
 80141c6:	e764      	b.n	8014092 <_printf_float+0xc2>
 80141c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80141cc:	f240 80e0 	bls.w	8014390 <_printf_float+0x3c0>
 80141d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80141d4:	2200      	movs	r2, #0
 80141d6:	2300      	movs	r3, #0
 80141d8:	f7ec fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80141dc:	2800      	cmp	r0, #0
 80141de:	d034      	beq.n	801424a <_printf_float+0x27a>
 80141e0:	4a37      	ldr	r2, [pc, #220]	; (80142c0 <_printf_float+0x2f0>)
 80141e2:	2301      	movs	r3, #1
 80141e4:	4631      	mov	r1, r6
 80141e6:	4628      	mov	r0, r5
 80141e8:	47b8      	blx	r7
 80141ea:	3001      	adds	r0, #1
 80141ec:	f43f af51 	beq.w	8014092 <_printf_float+0xc2>
 80141f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141f4:	429a      	cmp	r2, r3
 80141f6:	db02      	blt.n	80141fe <_printf_float+0x22e>
 80141f8:	6823      	ldr	r3, [r4, #0]
 80141fa:	07d8      	lsls	r0, r3, #31
 80141fc:	d510      	bpl.n	8014220 <_printf_float+0x250>
 80141fe:	ee18 3a10 	vmov	r3, s16
 8014202:	4652      	mov	r2, sl
 8014204:	4631      	mov	r1, r6
 8014206:	4628      	mov	r0, r5
 8014208:	47b8      	blx	r7
 801420a:	3001      	adds	r0, #1
 801420c:	f43f af41 	beq.w	8014092 <_printf_float+0xc2>
 8014210:	f04f 0800 	mov.w	r8, #0
 8014214:	f104 091a 	add.w	r9, r4, #26
 8014218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801421a:	3b01      	subs	r3, #1
 801421c:	4543      	cmp	r3, r8
 801421e:	dc09      	bgt.n	8014234 <_printf_float+0x264>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	079b      	lsls	r3, r3, #30
 8014224:	f100 8105 	bmi.w	8014432 <_printf_float+0x462>
 8014228:	68e0      	ldr	r0, [r4, #12]
 801422a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801422c:	4298      	cmp	r0, r3
 801422e:	bfb8      	it	lt
 8014230:	4618      	movlt	r0, r3
 8014232:	e730      	b.n	8014096 <_printf_float+0xc6>
 8014234:	2301      	movs	r3, #1
 8014236:	464a      	mov	r2, r9
 8014238:	4631      	mov	r1, r6
 801423a:	4628      	mov	r0, r5
 801423c:	47b8      	blx	r7
 801423e:	3001      	adds	r0, #1
 8014240:	f43f af27 	beq.w	8014092 <_printf_float+0xc2>
 8014244:	f108 0801 	add.w	r8, r8, #1
 8014248:	e7e6      	b.n	8014218 <_printf_float+0x248>
 801424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424c:	2b00      	cmp	r3, #0
 801424e:	dc39      	bgt.n	80142c4 <_printf_float+0x2f4>
 8014250:	4a1b      	ldr	r2, [pc, #108]	; (80142c0 <_printf_float+0x2f0>)
 8014252:	2301      	movs	r3, #1
 8014254:	4631      	mov	r1, r6
 8014256:	4628      	mov	r0, r5
 8014258:	47b8      	blx	r7
 801425a:	3001      	adds	r0, #1
 801425c:	f43f af19 	beq.w	8014092 <_printf_float+0xc2>
 8014260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014264:	4313      	orrs	r3, r2
 8014266:	d102      	bne.n	801426e <_printf_float+0x29e>
 8014268:	6823      	ldr	r3, [r4, #0]
 801426a:	07d9      	lsls	r1, r3, #31
 801426c:	d5d8      	bpl.n	8014220 <_printf_float+0x250>
 801426e:	ee18 3a10 	vmov	r3, s16
 8014272:	4652      	mov	r2, sl
 8014274:	4631      	mov	r1, r6
 8014276:	4628      	mov	r0, r5
 8014278:	47b8      	blx	r7
 801427a:	3001      	adds	r0, #1
 801427c:	f43f af09 	beq.w	8014092 <_printf_float+0xc2>
 8014280:	f04f 0900 	mov.w	r9, #0
 8014284:	f104 0a1a 	add.w	sl, r4, #26
 8014288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801428a:	425b      	negs	r3, r3
 801428c:	454b      	cmp	r3, r9
 801428e:	dc01      	bgt.n	8014294 <_printf_float+0x2c4>
 8014290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014292:	e792      	b.n	80141ba <_printf_float+0x1ea>
 8014294:	2301      	movs	r3, #1
 8014296:	4652      	mov	r2, sl
 8014298:	4631      	mov	r1, r6
 801429a:	4628      	mov	r0, r5
 801429c:	47b8      	blx	r7
 801429e:	3001      	adds	r0, #1
 80142a0:	f43f aef7 	beq.w	8014092 <_printf_float+0xc2>
 80142a4:	f109 0901 	add.w	r9, r9, #1
 80142a8:	e7ee      	b.n	8014288 <_printf_float+0x2b8>
 80142aa:	bf00      	nop
 80142ac:	7fefffff 	.word	0x7fefffff
 80142b0:	0801de80 	.word	0x0801de80
 80142b4:	0801de84 	.word	0x0801de84
 80142b8:	0801de8c 	.word	0x0801de8c
 80142bc:	0801de88 	.word	0x0801de88
 80142c0:	0801de90 	.word	0x0801de90
 80142c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80142c8:	429a      	cmp	r2, r3
 80142ca:	bfa8      	it	ge
 80142cc:	461a      	movge	r2, r3
 80142ce:	2a00      	cmp	r2, #0
 80142d0:	4691      	mov	r9, r2
 80142d2:	dc37      	bgt.n	8014344 <_printf_float+0x374>
 80142d4:	f04f 0b00 	mov.w	fp, #0
 80142d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142dc:	f104 021a 	add.w	r2, r4, #26
 80142e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80142e2:	9305      	str	r3, [sp, #20]
 80142e4:	eba3 0309 	sub.w	r3, r3, r9
 80142e8:	455b      	cmp	r3, fp
 80142ea:	dc33      	bgt.n	8014354 <_printf_float+0x384>
 80142ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142f0:	429a      	cmp	r2, r3
 80142f2:	db3b      	blt.n	801436c <_printf_float+0x39c>
 80142f4:	6823      	ldr	r3, [r4, #0]
 80142f6:	07da      	lsls	r2, r3, #31
 80142f8:	d438      	bmi.n	801436c <_printf_float+0x39c>
 80142fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142fc:	9a05      	ldr	r2, [sp, #20]
 80142fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014300:	1a9a      	subs	r2, r3, r2
 8014302:	eba3 0901 	sub.w	r9, r3, r1
 8014306:	4591      	cmp	r9, r2
 8014308:	bfa8      	it	ge
 801430a:	4691      	movge	r9, r2
 801430c:	f1b9 0f00 	cmp.w	r9, #0
 8014310:	dc35      	bgt.n	801437e <_printf_float+0x3ae>
 8014312:	f04f 0800 	mov.w	r8, #0
 8014316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801431a:	f104 0a1a 	add.w	sl, r4, #26
 801431e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014322:	1a9b      	subs	r3, r3, r2
 8014324:	eba3 0309 	sub.w	r3, r3, r9
 8014328:	4543      	cmp	r3, r8
 801432a:	f77f af79 	ble.w	8014220 <_printf_float+0x250>
 801432e:	2301      	movs	r3, #1
 8014330:	4652      	mov	r2, sl
 8014332:	4631      	mov	r1, r6
 8014334:	4628      	mov	r0, r5
 8014336:	47b8      	blx	r7
 8014338:	3001      	adds	r0, #1
 801433a:	f43f aeaa 	beq.w	8014092 <_printf_float+0xc2>
 801433e:	f108 0801 	add.w	r8, r8, #1
 8014342:	e7ec      	b.n	801431e <_printf_float+0x34e>
 8014344:	4613      	mov	r3, r2
 8014346:	4631      	mov	r1, r6
 8014348:	4642      	mov	r2, r8
 801434a:	4628      	mov	r0, r5
 801434c:	47b8      	blx	r7
 801434e:	3001      	adds	r0, #1
 8014350:	d1c0      	bne.n	80142d4 <_printf_float+0x304>
 8014352:	e69e      	b.n	8014092 <_printf_float+0xc2>
 8014354:	2301      	movs	r3, #1
 8014356:	4631      	mov	r1, r6
 8014358:	4628      	mov	r0, r5
 801435a:	9205      	str	r2, [sp, #20]
 801435c:	47b8      	blx	r7
 801435e:	3001      	adds	r0, #1
 8014360:	f43f ae97 	beq.w	8014092 <_printf_float+0xc2>
 8014364:	9a05      	ldr	r2, [sp, #20]
 8014366:	f10b 0b01 	add.w	fp, fp, #1
 801436a:	e7b9      	b.n	80142e0 <_printf_float+0x310>
 801436c:	ee18 3a10 	vmov	r3, s16
 8014370:	4652      	mov	r2, sl
 8014372:	4631      	mov	r1, r6
 8014374:	4628      	mov	r0, r5
 8014376:	47b8      	blx	r7
 8014378:	3001      	adds	r0, #1
 801437a:	d1be      	bne.n	80142fa <_printf_float+0x32a>
 801437c:	e689      	b.n	8014092 <_printf_float+0xc2>
 801437e:	9a05      	ldr	r2, [sp, #20]
 8014380:	464b      	mov	r3, r9
 8014382:	4442      	add	r2, r8
 8014384:	4631      	mov	r1, r6
 8014386:	4628      	mov	r0, r5
 8014388:	47b8      	blx	r7
 801438a:	3001      	adds	r0, #1
 801438c:	d1c1      	bne.n	8014312 <_printf_float+0x342>
 801438e:	e680      	b.n	8014092 <_printf_float+0xc2>
 8014390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014392:	2a01      	cmp	r2, #1
 8014394:	dc01      	bgt.n	801439a <_printf_float+0x3ca>
 8014396:	07db      	lsls	r3, r3, #31
 8014398:	d538      	bpl.n	801440c <_printf_float+0x43c>
 801439a:	2301      	movs	r3, #1
 801439c:	4642      	mov	r2, r8
 801439e:	4631      	mov	r1, r6
 80143a0:	4628      	mov	r0, r5
 80143a2:	47b8      	blx	r7
 80143a4:	3001      	adds	r0, #1
 80143a6:	f43f ae74 	beq.w	8014092 <_printf_float+0xc2>
 80143aa:	ee18 3a10 	vmov	r3, s16
 80143ae:	4652      	mov	r2, sl
 80143b0:	4631      	mov	r1, r6
 80143b2:	4628      	mov	r0, r5
 80143b4:	47b8      	blx	r7
 80143b6:	3001      	adds	r0, #1
 80143b8:	f43f ae6b 	beq.w	8014092 <_printf_float+0xc2>
 80143bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143c0:	2200      	movs	r2, #0
 80143c2:	2300      	movs	r3, #0
 80143c4:	f7ec fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 80143c8:	b9d8      	cbnz	r0, 8014402 <_printf_float+0x432>
 80143ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143cc:	f108 0201 	add.w	r2, r8, #1
 80143d0:	3b01      	subs	r3, #1
 80143d2:	4631      	mov	r1, r6
 80143d4:	4628      	mov	r0, r5
 80143d6:	47b8      	blx	r7
 80143d8:	3001      	adds	r0, #1
 80143da:	d10e      	bne.n	80143fa <_printf_float+0x42a>
 80143dc:	e659      	b.n	8014092 <_printf_float+0xc2>
 80143de:	2301      	movs	r3, #1
 80143e0:	4652      	mov	r2, sl
 80143e2:	4631      	mov	r1, r6
 80143e4:	4628      	mov	r0, r5
 80143e6:	47b8      	blx	r7
 80143e8:	3001      	adds	r0, #1
 80143ea:	f43f ae52 	beq.w	8014092 <_printf_float+0xc2>
 80143ee:	f108 0801 	add.w	r8, r8, #1
 80143f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143f4:	3b01      	subs	r3, #1
 80143f6:	4543      	cmp	r3, r8
 80143f8:	dcf1      	bgt.n	80143de <_printf_float+0x40e>
 80143fa:	464b      	mov	r3, r9
 80143fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014400:	e6dc      	b.n	80141bc <_printf_float+0x1ec>
 8014402:	f04f 0800 	mov.w	r8, #0
 8014406:	f104 0a1a 	add.w	sl, r4, #26
 801440a:	e7f2      	b.n	80143f2 <_printf_float+0x422>
 801440c:	2301      	movs	r3, #1
 801440e:	4642      	mov	r2, r8
 8014410:	e7df      	b.n	80143d2 <_printf_float+0x402>
 8014412:	2301      	movs	r3, #1
 8014414:	464a      	mov	r2, r9
 8014416:	4631      	mov	r1, r6
 8014418:	4628      	mov	r0, r5
 801441a:	47b8      	blx	r7
 801441c:	3001      	adds	r0, #1
 801441e:	f43f ae38 	beq.w	8014092 <_printf_float+0xc2>
 8014422:	f108 0801 	add.w	r8, r8, #1
 8014426:	68e3      	ldr	r3, [r4, #12]
 8014428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801442a:	1a5b      	subs	r3, r3, r1
 801442c:	4543      	cmp	r3, r8
 801442e:	dcf0      	bgt.n	8014412 <_printf_float+0x442>
 8014430:	e6fa      	b.n	8014228 <_printf_float+0x258>
 8014432:	f04f 0800 	mov.w	r8, #0
 8014436:	f104 0919 	add.w	r9, r4, #25
 801443a:	e7f4      	b.n	8014426 <_printf_float+0x456>

0801443c <_printf_common>:
 801443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014440:	4616      	mov	r6, r2
 8014442:	4699      	mov	r9, r3
 8014444:	688a      	ldr	r2, [r1, #8]
 8014446:	690b      	ldr	r3, [r1, #16]
 8014448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801444c:	4293      	cmp	r3, r2
 801444e:	bfb8      	it	lt
 8014450:	4613      	movlt	r3, r2
 8014452:	6033      	str	r3, [r6, #0]
 8014454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014458:	4607      	mov	r7, r0
 801445a:	460c      	mov	r4, r1
 801445c:	b10a      	cbz	r2, 8014462 <_printf_common+0x26>
 801445e:	3301      	adds	r3, #1
 8014460:	6033      	str	r3, [r6, #0]
 8014462:	6823      	ldr	r3, [r4, #0]
 8014464:	0699      	lsls	r1, r3, #26
 8014466:	bf42      	ittt	mi
 8014468:	6833      	ldrmi	r3, [r6, #0]
 801446a:	3302      	addmi	r3, #2
 801446c:	6033      	strmi	r3, [r6, #0]
 801446e:	6825      	ldr	r5, [r4, #0]
 8014470:	f015 0506 	ands.w	r5, r5, #6
 8014474:	d106      	bne.n	8014484 <_printf_common+0x48>
 8014476:	f104 0a19 	add.w	sl, r4, #25
 801447a:	68e3      	ldr	r3, [r4, #12]
 801447c:	6832      	ldr	r2, [r6, #0]
 801447e:	1a9b      	subs	r3, r3, r2
 8014480:	42ab      	cmp	r3, r5
 8014482:	dc26      	bgt.n	80144d2 <_printf_common+0x96>
 8014484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014488:	1e13      	subs	r3, r2, #0
 801448a:	6822      	ldr	r2, [r4, #0]
 801448c:	bf18      	it	ne
 801448e:	2301      	movne	r3, #1
 8014490:	0692      	lsls	r2, r2, #26
 8014492:	d42b      	bmi.n	80144ec <_printf_common+0xb0>
 8014494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014498:	4649      	mov	r1, r9
 801449a:	4638      	mov	r0, r7
 801449c:	47c0      	blx	r8
 801449e:	3001      	adds	r0, #1
 80144a0:	d01e      	beq.n	80144e0 <_printf_common+0xa4>
 80144a2:	6823      	ldr	r3, [r4, #0]
 80144a4:	68e5      	ldr	r5, [r4, #12]
 80144a6:	6832      	ldr	r2, [r6, #0]
 80144a8:	f003 0306 	and.w	r3, r3, #6
 80144ac:	2b04      	cmp	r3, #4
 80144ae:	bf08      	it	eq
 80144b0:	1aad      	subeq	r5, r5, r2
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	6922      	ldr	r2, [r4, #16]
 80144b6:	bf0c      	ite	eq
 80144b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144bc:	2500      	movne	r5, #0
 80144be:	4293      	cmp	r3, r2
 80144c0:	bfc4      	itt	gt
 80144c2:	1a9b      	subgt	r3, r3, r2
 80144c4:	18ed      	addgt	r5, r5, r3
 80144c6:	2600      	movs	r6, #0
 80144c8:	341a      	adds	r4, #26
 80144ca:	42b5      	cmp	r5, r6
 80144cc:	d11a      	bne.n	8014504 <_printf_common+0xc8>
 80144ce:	2000      	movs	r0, #0
 80144d0:	e008      	b.n	80144e4 <_printf_common+0xa8>
 80144d2:	2301      	movs	r3, #1
 80144d4:	4652      	mov	r2, sl
 80144d6:	4649      	mov	r1, r9
 80144d8:	4638      	mov	r0, r7
 80144da:	47c0      	blx	r8
 80144dc:	3001      	adds	r0, #1
 80144de:	d103      	bne.n	80144e8 <_printf_common+0xac>
 80144e0:	f04f 30ff 	mov.w	r0, #4294967295
 80144e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144e8:	3501      	adds	r5, #1
 80144ea:	e7c6      	b.n	801447a <_printf_common+0x3e>
 80144ec:	18e1      	adds	r1, r4, r3
 80144ee:	1c5a      	adds	r2, r3, #1
 80144f0:	2030      	movs	r0, #48	; 0x30
 80144f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80144f6:	4422      	add	r2, r4
 80144f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80144fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014500:	3302      	adds	r3, #2
 8014502:	e7c7      	b.n	8014494 <_printf_common+0x58>
 8014504:	2301      	movs	r3, #1
 8014506:	4622      	mov	r2, r4
 8014508:	4649      	mov	r1, r9
 801450a:	4638      	mov	r0, r7
 801450c:	47c0      	blx	r8
 801450e:	3001      	adds	r0, #1
 8014510:	d0e6      	beq.n	80144e0 <_printf_common+0xa4>
 8014512:	3601      	adds	r6, #1
 8014514:	e7d9      	b.n	80144ca <_printf_common+0x8e>
	...

08014518 <_printf_i>:
 8014518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801451c:	7e0f      	ldrb	r7, [r1, #24]
 801451e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014520:	2f78      	cmp	r7, #120	; 0x78
 8014522:	4691      	mov	r9, r2
 8014524:	4680      	mov	r8, r0
 8014526:	460c      	mov	r4, r1
 8014528:	469a      	mov	sl, r3
 801452a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801452e:	d807      	bhi.n	8014540 <_printf_i+0x28>
 8014530:	2f62      	cmp	r7, #98	; 0x62
 8014532:	d80a      	bhi.n	801454a <_printf_i+0x32>
 8014534:	2f00      	cmp	r7, #0
 8014536:	f000 80d8 	beq.w	80146ea <_printf_i+0x1d2>
 801453a:	2f58      	cmp	r7, #88	; 0x58
 801453c:	f000 80a3 	beq.w	8014686 <_printf_i+0x16e>
 8014540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014548:	e03a      	b.n	80145c0 <_printf_i+0xa8>
 801454a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801454e:	2b15      	cmp	r3, #21
 8014550:	d8f6      	bhi.n	8014540 <_printf_i+0x28>
 8014552:	a101      	add	r1, pc, #4	; (adr r1, 8014558 <_printf_i+0x40>)
 8014554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014558:	080145b1 	.word	0x080145b1
 801455c:	080145c5 	.word	0x080145c5
 8014560:	08014541 	.word	0x08014541
 8014564:	08014541 	.word	0x08014541
 8014568:	08014541 	.word	0x08014541
 801456c:	08014541 	.word	0x08014541
 8014570:	080145c5 	.word	0x080145c5
 8014574:	08014541 	.word	0x08014541
 8014578:	08014541 	.word	0x08014541
 801457c:	08014541 	.word	0x08014541
 8014580:	08014541 	.word	0x08014541
 8014584:	080146d1 	.word	0x080146d1
 8014588:	080145f5 	.word	0x080145f5
 801458c:	080146b3 	.word	0x080146b3
 8014590:	08014541 	.word	0x08014541
 8014594:	08014541 	.word	0x08014541
 8014598:	080146f3 	.word	0x080146f3
 801459c:	08014541 	.word	0x08014541
 80145a0:	080145f5 	.word	0x080145f5
 80145a4:	08014541 	.word	0x08014541
 80145a8:	08014541 	.word	0x08014541
 80145ac:	080146bb 	.word	0x080146bb
 80145b0:	682b      	ldr	r3, [r5, #0]
 80145b2:	1d1a      	adds	r2, r3, #4
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	602a      	str	r2, [r5, #0]
 80145b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145c0:	2301      	movs	r3, #1
 80145c2:	e0a3      	b.n	801470c <_printf_i+0x1f4>
 80145c4:	6820      	ldr	r0, [r4, #0]
 80145c6:	6829      	ldr	r1, [r5, #0]
 80145c8:	0606      	lsls	r6, r0, #24
 80145ca:	f101 0304 	add.w	r3, r1, #4
 80145ce:	d50a      	bpl.n	80145e6 <_printf_i+0xce>
 80145d0:	680e      	ldr	r6, [r1, #0]
 80145d2:	602b      	str	r3, [r5, #0]
 80145d4:	2e00      	cmp	r6, #0
 80145d6:	da03      	bge.n	80145e0 <_printf_i+0xc8>
 80145d8:	232d      	movs	r3, #45	; 0x2d
 80145da:	4276      	negs	r6, r6
 80145dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145e0:	485e      	ldr	r0, [pc, #376]	; (801475c <_printf_i+0x244>)
 80145e2:	230a      	movs	r3, #10
 80145e4:	e019      	b.n	801461a <_printf_i+0x102>
 80145e6:	680e      	ldr	r6, [r1, #0]
 80145e8:	602b      	str	r3, [r5, #0]
 80145ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80145ee:	bf18      	it	ne
 80145f0:	b236      	sxthne	r6, r6
 80145f2:	e7ef      	b.n	80145d4 <_printf_i+0xbc>
 80145f4:	682b      	ldr	r3, [r5, #0]
 80145f6:	6820      	ldr	r0, [r4, #0]
 80145f8:	1d19      	adds	r1, r3, #4
 80145fa:	6029      	str	r1, [r5, #0]
 80145fc:	0601      	lsls	r1, r0, #24
 80145fe:	d501      	bpl.n	8014604 <_printf_i+0xec>
 8014600:	681e      	ldr	r6, [r3, #0]
 8014602:	e002      	b.n	801460a <_printf_i+0xf2>
 8014604:	0646      	lsls	r6, r0, #25
 8014606:	d5fb      	bpl.n	8014600 <_printf_i+0xe8>
 8014608:	881e      	ldrh	r6, [r3, #0]
 801460a:	4854      	ldr	r0, [pc, #336]	; (801475c <_printf_i+0x244>)
 801460c:	2f6f      	cmp	r7, #111	; 0x6f
 801460e:	bf0c      	ite	eq
 8014610:	2308      	moveq	r3, #8
 8014612:	230a      	movne	r3, #10
 8014614:	2100      	movs	r1, #0
 8014616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801461a:	6865      	ldr	r5, [r4, #4]
 801461c:	60a5      	str	r5, [r4, #8]
 801461e:	2d00      	cmp	r5, #0
 8014620:	bfa2      	ittt	ge
 8014622:	6821      	ldrge	r1, [r4, #0]
 8014624:	f021 0104 	bicge.w	r1, r1, #4
 8014628:	6021      	strge	r1, [r4, #0]
 801462a:	b90e      	cbnz	r6, 8014630 <_printf_i+0x118>
 801462c:	2d00      	cmp	r5, #0
 801462e:	d04d      	beq.n	80146cc <_printf_i+0x1b4>
 8014630:	4615      	mov	r5, r2
 8014632:	fbb6 f1f3 	udiv	r1, r6, r3
 8014636:	fb03 6711 	mls	r7, r3, r1, r6
 801463a:	5dc7      	ldrb	r7, [r0, r7]
 801463c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014640:	4637      	mov	r7, r6
 8014642:	42bb      	cmp	r3, r7
 8014644:	460e      	mov	r6, r1
 8014646:	d9f4      	bls.n	8014632 <_printf_i+0x11a>
 8014648:	2b08      	cmp	r3, #8
 801464a:	d10b      	bne.n	8014664 <_printf_i+0x14c>
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	07de      	lsls	r6, r3, #31
 8014650:	d508      	bpl.n	8014664 <_printf_i+0x14c>
 8014652:	6923      	ldr	r3, [r4, #16]
 8014654:	6861      	ldr	r1, [r4, #4]
 8014656:	4299      	cmp	r1, r3
 8014658:	bfde      	ittt	le
 801465a:	2330      	movle	r3, #48	; 0x30
 801465c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014664:	1b52      	subs	r2, r2, r5
 8014666:	6122      	str	r2, [r4, #16]
 8014668:	f8cd a000 	str.w	sl, [sp]
 801466c:	464b      	mov	r3, r9
 801466e:	aa03      	add	r2, sp, #12
 8014670:	4621      	mov	r1, r4
 8014672:	4640      	mov	r0, r8
 8014674:	f7ff fee2 	bl	801443c <_printf_common>
 8014678:	3001      	adds	r0, #1
 801467a:	d14c      	bne.n	8014716 <_printf_i+0x1fe>
 801467c:	f04f 30ff 	mov.w	r0, #4294967295
 8014680:	b004      	add	sp, #16
 8014682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014686:	4835      	ldr	r0, [pc, #212]	; (801475c <_printf_i+0x244>)
 8014688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801468c:	6829      	ldr	r1, [r5, #0]
 801468e:	6823      	ldr	r3, [r4, #0]
 8014690:	f851 6b04 	ldr.w	r6, [r1], #4
 8014694:	6029      	str	r1, [r5, #0]
 8014696:	061d      	lsls	r5, r3, #24
 8014698:	d514      	bpl.n	80146c4 <_printf_i+0x1ac>
 801469a:	07df      	lsls	r7, r3, #31
 801469c:	bf44      	itt	mi
 801469e:	f043 0320 	orrmi.w	r3, r3, #32
 80146a2:	6023      	strmi	r3, [r4, #0]
 80146a4:	b91e      	cbnz	r6, 80146ae <_printf_i+0x196>
 80146a6:	6823      	ldr	r3, [r4, #0]
 80146a8:	f023 0320 	bic.w	r3, r3, #32
 80146ac:	6023      	str	r3, [r4, #0]
 80146ae:	2310      	movs	r3, #16
 80146b0:	e7b0      	b.n	8014614 <_printf_i+0xfc>
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	f043 0320 	orr.w	r3, r3, #32
 80146b8:	6023      	str	r3, [r4, #0]
 80146ba:	2378      	movs	r3, #120	; 0x78
 80146bc:	4828      	ldr	r0, [pc, #160]	; (8014760 <_printf_i+0x248>)
 80146be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146c2:	e7e3      	b.n	801468c <_printf_i+0x174>
 80146c4:	0659      	lsls	r1, r3, #25
 80146c6:	bf48      	it	mi
 80146c8:	b2b6      	uxthmi	r6, r6
 80146ca:	e7e6      	b.n	801469a <_printf_i+0x182>
 80146cc:	4615      	mov	r5, r2
 80146ce:	e7bb      	b.n	8014648 <_printf_i+0x130>
 80146d0:	682b      	ldr	r3, [r5, #0]
 80146d2:	6826      	ldr	r6, [r4, #0]
 80146d4:	6961      	ldr	r1, [r4, #20]
 80146d6:	1d18      	adds	r0, r3, #4
 80146d8:	6028      	str	r0, [r5, #0]
 80146da:	0635      	lsls	r5, r6, #24
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	d501      	bpl.n	80146e4 <_printf_i+0x1cc>
 80146e0:	6019      	str	r1, [r3, #0]
 80146e2:	e002      	b.n	80146ea <_printf_i+0x1d2>
 80146e4:	0670      	lsls	r0, r6, #25
 80146e6:	d5fb      	bpl.n	80146e0 <_printf_i+0x1c8>
 80146e8:	8019      	strh	r1, [r3, #0]
 80146ea:	2300      	movs	r3, #0
 80146ec:	6123      	str	r3, [r4, #16]
 80146ee:	4615      	mov	r5, r2
 80146f0:	e7ba      	b.n	8014668 <_printf_i+0x150>
 80146f2:	682b      	ldr	r3, [r5, #0]
 80146f4:	1d1a      	adds	r2, r3, #4
 80146f6:	602a      	str	r2, [r5, #0]
 80146f8:	681d      	ldr	r5, [r3, #0]
 80146fa:	6862      	ldr	r2, [r4, #4]
 80146fc:	2100      	movs	r1, #0
 80146fe:	4628      	mov	r0, r5
 8014700:	f7eb fd6e 	bl	80001e0 <memchr>
 8014704:	b108      	cbz	r0, 801470a <_printf_i+0x1f2>
 8014706:	1b40      	subs	r0, r0, r5
 8014708:	6060      	str	r0, [r4, #4]
 801470a:	6863      	ldr	r3, [r4, #4]
 801470c:	6123      	str	r3, [r4, #16]
 801470e:	2300      	movs	r3, #0
 8014710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014714:	e7a8      	b.n	8014668 <_printf_i+0x150>
 8014716:	6923      	ldr	r3, [r4, #16]
 8014718:	462a      	mov	r2, r5
 801471a:	4649      	mov	r1, r9
 801471c:	4640      	mov	r0, r8
 801471e:	47d0      	blx	sl
 8014720:	3001      	adds	r0, #1
 8014722:	d0ab      	beq.n	801467c <_printf_i+0x164>
 8014724:	6823      	ldr	r3, [r4, #0]
 8014726:	079b      	lsls	r3, r3, #30
 8014728:	d413      	bmi.n	8014752 <_printf_i+0x23a>
 801472a:	68e0      	ldr	r0, [r4, #12]
 801472c:	9b03      	ldr	r3, [sp, #12]
 801472e:	4298      	cmp	r0, r3
 8014730:	bfb8      	it	lt
 8014732:	4618      	movlt	r0, r3
 8014734:	e7a4      	b.n	8014680 <_printf_i+0x168>
 8014736:	2301      	movs	r3, #1
 8014738:	4632      	mov	r2, r6
 801473a:	4649      	mov	r1, r9
 801473c:	4640      	mov	r0, r8
 801473e:	47d0      	blx	sl
 8014740:	3001      	adds	r0, #1
 8014742:	d09b      	beq.n	801467c <_printf_i+0x164>
 8014744:	3501      	adds	r5, #1
 8014746:	68e3      	ldr	r3, [r4, #12]
 8014748:	9903      	ldr	r1, [sp, #12]
 801474a:	1a5b      	subs	r3, r3, r1
 801474c:	42ab      	cmp	r3, r5
 801474e:	dcf2      	bgt.n	8014736 <_printf_i+0x21e>
 8014750:	e7eb      	b.n	801472a <_printf_i+0x212>
 8014752:	2500      	movs	r5, #0
 8014754:	f104 0619 	add.w	r6, r4, #25
 8014758:	e7f5      	b.n	8014746 <_printf_i+0x22e>
 801475a:	bf00      	nop
 801475c:	0801de92 	.word	0x0801de92
 8014760:	0801dea3 	.word	0x0801dea3

08014764 <_scanf_float>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	b087      	sub	sp, #28
 801476a:	4617      	mov	r7, r2
 801476c:	9303      	str	r3, [sp, #12]
 801476e:	688b      	ldr	r3, [r1, #8]
 8014770:	1e5a      	subs	r2, r3, #1
 8014772:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014776:	bf83      	ittte	hi
 8014778:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801477c:	195b      	addhi	r3, r3, r5
 801477e:	9302      	strhi	r3, [sp, #8]
 8014780:	2300      	movls	r3, #0
 8014782:	bf86      	itte	hi
 8014784:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014788:	608b      	strhi	r3, [r1, #8]
 801478a:	9302      	strls	r3, [sp, #8]
 801478c:	680b      	ldr	r3, [r1, #0]
 801478e:	468b      	mov	fp, r1
 8014790:	2500      	movs	r5, #0
 8014792:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014796:	f84b 3b1c 	str.w	r3, [fp], #28
 801479a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801479e:	4680      	mov	r8, r0
 80147a0:	460c      	mov	r4, r1
 80147a2:	465e      	mov	r6, fp
 80147a4:	46aa      	mov	sl, r5
 80147a6:	46a9      	mov	r9, r5
 80147a8:	9501      	str	r5, [sp, #4]
 80147aa:	68a2      	ldr	r2, [r4, #8]
 80147ac:	b152      	cbz	r2, 80147c4 <_scanf_float+0x60>
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	2b4e      	cmp	r3, #78	; 0x4e
 80147b4:	d864      	bhi.n	8014880 <_scanf_float+0x11c>
 80147b6:	2b40      	cmp	r3, #64	; 0x40
 80147b8:	d83c      	bhi.n	8014834 <_scanf_float+0xd0>
 80147ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80147be:	b2c8      	uxtb	r0, r1
 80147c0:	280e      	cmp	r0, #14
 80147c2:	d93a      	bls.n	801483a <_scanf_float+0xd6>
 80147c4:	f1b9 0f00 	cmp.w	r9, #0
 80147c8:	d003      	beq.n	80147d2 <_scanf_float+0x6e>
 80147ca:	6823      	ldr	r3, [r4, #0]
 80147cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147d0:	6023      	str	r3, [r4, #0]
 80147d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80147d6:	f1ba 0f01 	cmp.w	sl, #1
 80147da:	f200 8113 	bhi.w	8014a04 <_scanf_float+0x2a0>
 80147de:	455e      	cmp	r6, fp
 80147e0:	f200 8105 	bhi.w	80149ee <_scanf_float+0x28a>
 80147e4:	2501      	movs	r5, #1
 80147e6:	4628      	mov	r0, r5
 80147e8:	b007      	add	sp, #28
 80147ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80147f2:	2a0d      	cmp	r2, #13
 80147f4:	d8e6      	bhi.n	80147c4 <_scanf_float+0x60>
 80147f6:	a101      	add	r1, pc, #4	; (adr r1, 80147fc <_scanf_float+0x98>)
 80147f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80147fc:	0801493b 	.word	0x0801493b
 8014800:	080147c5 	.word	0x080147c5
 8014804:	080147c5 	.word	0x080147c5
 8014808:	080147c5 	.word	0x080147c5
 801480c:	0801499b 	.word	0x0801499b
 8014810:	08014973 	.word	0x08014973
 8014814:	080147c5 	.word	0x080147c5
 8014818:	080147c5 	.word	0x080147c5
 801481c:	08014949 	.word	0x08014949
 8014820:	080147c5 	.word	0x080147c5
 8014824:	080147c5 	.word	0x080147c5
 8014828:	080147c5 	.word	0x080147c5
 801482c:	080147c5 	.word	0x080147c5
 8014830:	08014901 	.word	0x08014901
 8014834:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014838:	e7db      	b.n	80147f2 <_scanf_float+0x8e>
 801483a:	290e      	cmp	r1, #14
 801483c:	d8c2      	bhi.n	80147c4 <_scanf_float+0x60>
 801483e:	a001      	add	r0, pc, #4	; (adr r0, 8014844 <_scanf_float+0xe0>)
 8014840:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014844:	080148f3 	.word	0x080148f3
 8014848:	080147c5 	.word	0x080147c5
 801484c:	080148f3 	.word	0x080148f3
 8014850:	08014987 	.word	0x08014987
 8014854:	080147c5 	.word	0x080147c5
 8014858:	080148a1 	.word	0x080148a1
 801485c:	080148dd 	.word	0x080148dd
 8014860:	080148dd 	.word	0x080148dd
 8014864:	080148dd 	.word	0x080148dd
 8014868:	080148dd 	.word	0x080148dd
 801486c:	080148dd 	.word	0x080148dd
 8014870:	080148dd 	.word	0x080148dd
 8014874:	080148dd 	.word	0x080148dd
 8014878:	080148dd 	.word	0x080148dd
 801487c:	080148dd 	.word	0x080148dd
 8014880:	2b6e      	cmp	r3, #110	; 0x6e
 8014882:	d809      	bhi.n	8014898 <_scanf_float+0x134>
 8014884:	2b60      	cmp	r3, #96	; 0x60
 8014886:	d8b2      	bhi.n	80147ee <_scanf_float+0x8a>
 8014888:	2b54      	cmp	r3, #84	; 0x54
 801488a:	d077      	beq.n	801497c <_scanf_float+0x218>
 801488c:	2b59      	cmp	r3, #89	; 0x59
 801488e:	d199      	bne.n	80147c4 <_scanf_float+0x60>
 8014890:	2d07      	cmp	r5, #7
 8014892:	d197      	bne.n	80147c4 <_scanf_float+0x60>
 8014894:	2508      	movs	r5, #8
 8014896:	e029      	b.n	80148ec <_scanf_float+0x188>
 8014898:	2b74      	cmp	r3, #116	; 0x74
 801489a:	d06f      	beq.n	801497c <_scanf_float+0x218>
 801489c:	2b79      	cmp	r3, #121	; 0x79
 801489e:	e7f6      	b.n	801488e <_scanf_float+0x12a>
 80148a0:	6821      	ldr	r1, [r4, #0]
 80148a2:	05c8      	lsls	r0, r1, #23
 80148a4:	d51a      	bpl.n	80148dc <_scanf_float+0x178>
 80148a6:	9b02      	ldr	r3, [sp, #8]
 80148a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80148ac:	6021      	str	r1, [r4, #0]
 80148ae:	f109 0901 	add.w	r9, r9, #1
 80148b2:	b11b      	cbz	r3, 80148bc <_scanf_float+0x158>
 80148b4:	3b01      	subs	r3, #1
 80148b6:	3201      	adds	r2, #1
 80148b8:	9302      	str	r3, [sp, #8]
 80148ba:	60a2      	str	r2, [r4, #8]
 80148bc:	68a3      	ldr	r3, [r4, #8]
 80148be:	3b01      	subs	r3, #1
 80148c0:	60a3      	str	r3, [r4, #8]
 80148c2:	6923      	ldr	r3, [r4, #16]
 80148c4:	3301      	adds	r3, #1
 80148c6:	6123      	str	r3, [r4, #16]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	3b01      	subs	r3, #1
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	607b      	str	r3, [r7, #4]
 80148d0:	f340 8084 	ble.w	80149dc <_scanf_float+0x278>
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	3301      	adds	r3, #1
 80148d8:	603b      	str	r3, [r7, #0]
 80148da:	e766      	b.n	80147aa <_scanf_float+0x46>
 80148dc:	eb1a 0f05 	cmn.w	sl, r5
 80148e0:	f47f af70 	bne.w	80147c4 <_scanf_float+0x60>
 80148e4:	6822      	ldr	r2, [r4, #0]
 80148e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80148ea:	6022      	str	r2, [r4, #0]
 80148ec:	f806 3b01 	strb.w	r3, [r6], #1
 80148f0:	e7e4      	b.n	80148bc <_scanf_float+0x158>
 80148f2:	6822      	ldr	r2, [r4, #0]
 80148f4:	0610      	lsls	r0, r2, #24
 80148f6:	f57f af65 	bpl.w	80147c4 <_scanf_float+0x60>
 80148fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80148fe:	e7f4      	b.n	80148ea <_scanf_float+0x186>
 8014900:	f1ba 0f00 	cmp.w	sl, #0
 8014904:	d10e      	bne.n	8014924 <_scanf_float+0x1c0>
 8014906:	f1b9 0f00 	cmp.w	r9, #0
 801490a:	d10e      	bne.n	801492a <_scanf_float+0x1c6>
 801490c:	6822      	ldr	r2, [r4, #0]
 801490e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014912:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014916:	d108      	bne.n	801492a <_scanf_float+0x1c6>
 8014918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801491c:	6022      	str	r2, [r4, #0]
 801491e:	f04f 0a01 	mov.w	sl, #1
 8014922:	e7e3      	b.n	80148ec <_scanf_float+0x188>
 8014924:	f1ba 0f02 	cmp.w	sl, #2
 8014928:	d055      	beq.n	80149d6 <_scanf_float+0x272>
 801492a:	2d01      	cmp	r5, #1
 801492c:	d002      	beq.n	8014934 <_scanf_float+0x1d0>
 801492e:	2d04      	cmp	r5, #4
 8014930:	f47f af48 	bne.w	80147c4 <_scanf_float+0x60>
 8014934:	3501      	adds	r5, #1
 8014936:	b2ed      	uxtb	r5, r5
 8014938:	e7d8      	b.n	80148ec <_scanf_float+0x188>
 801493a:	f1ba 0f01 	cmp.w	sl, #1
 801493e:	f47f af41 	bne.w	80147c4 <_scanf_float+0x60>
 8014942:	f04f 0a02 	mov.w	sl, #2
 8014946:	e7d1      	b.n	80148ec <_scanf_float+0x188>
 8014948:	b97d      	cbnz	r5, 801496a <_scanf_float+0x206>
 801494a:	f1b9 0f00 	cmp.w	r9, #0
 801494e:	f47f af3c 	bne.w	80147ca <_scanf_float+0x66>
 8014952:	6822      	ldr	r2, [r4, #0]
 8014954:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014958:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801495c:	f47f af39 	bne.w	80147d2 <_scanf_float+0x6e>
 8014960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014964:	6022      	str	r2, [r4, #0]
 8014966:	2501      	movs	r5, #1
 8014968:	e7c0      	b.n	80148ec <_scanf_float+0x188>
 801496a:	2d03      	cmp	r5, #3
 801496c:	d0e2      	beq.n	8014934 <_scanf_float+0x1d0>
 801496e:	2d05      	cmp	r5, #5
 8014970:	e7de      	b.n	8014930 <_scanf_float+0x1cc>
 8014972:	2d02      	cmp	r5, #2
 8014974:	f47f af26 	bne.w	80147c4 <_scanf_float+0x60>
 8014978:	2503      	movs	r5, #3
 801497a:	e7b7      	b.n	80148ec <_scanf_float+0x188>
 801497c:	2d06      	cmp	r5, #6
 801497e:	f47f af21 	bne.w	80147c4 <_scanf_float+0x60>
 8014982:	2507      	movs	r5, #7
 8014984:	e7b2      	b.n	80148ec <_scanf_float+0x188>
 8014986:	6822      	ldr	r2, [r4, #0]
 8014988:	0591      	lsls	r1, r2, #22
 801498a:	f57f af1b 	bpl.w	80147c4 <_scanf_float+0x60>
 801498e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014992:	6022      	str	r2, [r4, #0]
 8014994:	f8cd 9004 	str.w	r9, [sp, #4]
 8014998:	e7a8      	b.n	80148ec <_scanf_float+0x188>
 801499a:	6822      	ldr	r2, [r4, #0]
 801499c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80149a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80149a4:	d006      	beq.n	80149b4 <_scanf_float+0x250>
 80149a6:	0550      	lsls	r0, r2, #21
 80149a8:	f57f af0c 	bpl.w	80147c4 <_scanf_float+0x60>
 80149ac:	f1b9 0f00 	cmp.w	r9, #0
 80149b0:	f43f af0f 	beq.w	80147d2 <_scanf_float+0x6e>
 80149b4:	0591      	lsls	r1, r2, #22
 80149b6:	bf58      	it	pl
 80149b8:	9901      	ldrpl	r1, [sp, #4]
 80149ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80149be:	bf58      	it	pl
 80149c0:	eba9 0101 	subpl.w	r1, r9, r1
 80149c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80149c8:	bf58      	it	pl
 80149ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80149ce:	6022      	str	r2, [r4, #0]
 80149d0:	f04f 0900 	mov.w	r9, #0
 80149d4:	e78a      	b.n	80148ec <_scanf_float+0x188>
 80149d6:	f04f 0a03 	mov.w	sl, #3
 80149da:	e787      	b.n	80148ec <_scanf_float+0x188>
 80149dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80149e0:	4639      	mov	r1, r7
 80149e2:	4640      	mov	r0, r8
 80149e4:	4798      	blx	r3
 80149e6:	2800      	cmp	r0, #0
 80149e8:	f43f aedf 	beq.w	80147aa <_scanf_float+0x46>
 80149ec:	e6ea      	b.n	80147c4 <_scanf_float+0x60>
 80149ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80149f6:	463a      	mov	r2, r7
 80149f8:	4640      	mov	r0, r8
 80149fa:	4798      	blx	r3
 80149fc:	6923      	ldr	r3, [r4, #16]
 80149fe:	3b01      	subs	r3, #1
 8014a00:	6123      	str	r3, [r4, #16]
 8014a02:	e6ec      	b.n	80147de <_scanf_float+0x7a>
 8014a04:	1e6b      	subs	r3, r5, #1
 8014a06:	2b06      	cmp	r3, #6
 8014a08:	d825      	bhi.n	8014a56 <_scanf_float+0x2f2>
 8014a0a:	2d02      	cmp	r5, #2
 8014a0c:	d836      	bhi.n	8014a7c <_scanf_float+0x318>
 8014a0e:	455e      	cmp	r6, fp
 8014a10:	f67f aee8 	bls.w	80147e4 <_scanf_float+0x80>
 8014a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014a1c:	463a      	mov	r2, r7
 8014a1e:	4640      	mov	r0, r8
 8014a20:	4798      	blx	r3
 8014a22:	6923      	ldr	r3, [r4, #16]
 8014a24:	3b01      	subs	r3, #1
 8014a26:	6123      	str	r3, [r4, #16]
 8014a28:	e7f1      	b.n	8014a0e <_scanf_float+0x2aa>
 8014a2a:	9802      	ldr	r0, [sp, #8]
 8014a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014a34:	9002      	str	r0, [sp, #8]
 8014a36:	463a      	mov	r2, r7
 8014a38:	4640      	mov	r0, r8
 8014a3a:	4798      	blx	r3
 8014a3c:	6923      	ldr	r3, [r4, #16]
 8014a3e:	3b01      	subs	r3, #1
 8014a40:	6123      	str	r3, [r4, #16]
 8014a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a46:	fa5f fa8a 	uxtb.w	sl, sl
 8014a4a:	f1ba 0f02 	cmp.w	sl, #2
 8014a4e:	d1ec      	bne.n	8014a2a <_scanf_float+0x2c6>
 8014a50:	3d03      	subs	r5, #3
 8014a52:	b2ed      	uxtb	r5, r5
 8014a54:	1b76      	subs	r6, r6, r5
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	05da      	lsls	r2, r3, #23
 8014a5a:	d52f      	bpl.n	8014abc <_scanf_float+0x358>
 8014a5c:	055b      	lsls	r3, r3, #21
 8014a5e:	d510      	bpl.n	8014a82 <_scanf_float+0x31e>
 8014a60:	455e      	cmp	r6, fp
 8014a62:	f67f aebf 	bls.w	80147e4 <_scanf_float+0x80>
 8014a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014a6e:	463a      	mov	r2, r7
 8014a70:	4640      	mov	r0, r8
 8014a72:	4798      	blx	r3
 8014a74:	6923      	ldr	r3, [r4, #16]
 8014a76:	3b01      	subs	r3, #1
 8014a78:	6123      	str	r3, [r4, #16]
 8014a7a:	e7f1      	b.n	8014a60 <_scanf_float+0x2fc>
 8014a7c:	46aa      	mov	sl, r5
 8014a7e:	9602      	str	r6, [sp, #8]
 8014a80:	e7df      	b.n	8014a42 <_scanf_float+0x2de>
 8014a82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014a86:	6923      	ldr	r3, [r4, #16]
 8014a88:	2965      	cmp	r1, #101	; 0x65
 8014a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014a8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8014a92:	6123      	str	r3, [r4, #16]
 8014a94:	d00c      	beq.n	8014ab0 <_scanf_float+0x34c>
 8014a96:	2945      	cmp	r1, #69	; 0x45
 8014a98:	d00a      	beq.n	8014ab0 <_scanf_float+0x34c>
 8014a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a9e:	463a      	mov	r2, r7
 8014aa0:	4640      	mov	r0, r8
 8014aa2:	4798      	blx	r3
 8014aa4:	6923      	ldr	r3, [r4, #16]
 8014aa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	1eb5      	subs	r5, r6, #2
 8014aae:	6123      	str	r3, [r4, #16]
 8014ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ab4:	463a      	mov	r2, r7
 8014ab6:	4640      	mov	r0, r8
 8014ab8:	4798      	blx	r3
 8014aba:	462e      	mov	r6, r5
 8014abc:	6825      	ldr	r5, [r4, #0]
 8014abe:	f015 0510 	ands.w	r5, r5, #16
 8014ac2:	d159      	bne.n	8014b78 <_scanf_float+0x414>
 8014ac4:	7035      	strb	r5, [r6, #0]
 8014ac6:	6823      	ldr	r3, [r4, #0]
 8014ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ad0:	d11b      	bne.n	8014b0a <_scanf_float+0x3a6>
 8014ad2:	9b01      	ldr	r3, [sp, #4]
 8014ad4:	454b      	cmp	r3, r9
 8014ad6:	eba3 0209 	sub.w	r2, r3, r9
 8014ada:	d123      	bne.n	8014b24 <_scanf_float+0x3c0>
 8014adc:	2200      	movs	r2, #0
 8014ade:	4659      	mov	r1, fp
 8014ae0:	4640      	mov	r0, r8
 8014ae2:	f000 ff27 	bl	8015934 <_strtod_r>
 8014ae6:	6822      	ldr	r2, [r4, #0]
 8014ae8:	9b03      	ldr	r3, [sp, #12]
 8014aea:	f012 0f02 	tst.w	r2, #2
 8014aee:	ec57 6b10 	vmov	r6, r7, d0
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	d021      	beq.n	8014b3a <_scanf_float+0x3d6>
 8014af6:	9903      	ldr	r1, [sp, #12]
 8014af8:	1d1a      	adds	r2, r3, #4
 8014afa:	600a      	str	r2, [r1, #0]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	e9c3 6700 	strd	r6, r7, [r3]
 8014b02:	68e3      	ldr	r3, [r4, #12]
 8014b04:	3301      	adds	r3, #1
 8014b06:	60e3      	str	r3, [r4, #12]
 8014b08:	e66d      	b.n	80147e6 <_scanf_float+0x82>
 8014b0a:	9b04      	ldr	r3, [sp, #16]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d0e5      	beq.n	8014adc <_scanf_float+0x378>
 8014b10:	9905      	ldr	r1, [sp, #20]
 8014b12:	230a      	movs	r3, #10
 8014b14:	462a      	mov	r2, r5
 8014b16:	3101      	adds	r1, #1
 8014b18:	4640      	mov	r0, r8
 8014b1a:	f000 ff93 	bl	8015a44 <_strtol_r>
 8014b1e:	9b04      	ldr	r3, [sp, #16]
 8014b20:	9e05      	ldr	r6, [sp, #20]
 8014b22:	1ac2      	subs	r2, r0, r3
 8014b24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014b28:	429e      	cmp	r6, r3
 8014b2a:	bf28      	it	cs
 8014b2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014b30:	4912      	ldr	r1, [pc, #72]	; (8014b7c <_scanf_float+0x418>)
 8014b32:	4630      	mov	r0, r6
 8014b34:	f000 f8ba 	bl	8014cac <siprintf>
 8014b38:	e7d0      	b.n	8014adc <_scanf_float+0x378>
 8014b3a:	9903      	ldr	r1, [sp, #12]
 8014b3c:	f012 0f04 	tst.w	r2, #4
 8014b40:	f103 0204 	add.w	r2, r3, #4
 8014b44:	600a      	str	r2, [r1, #0]
 8014b46:	d1d9      	bne.n	8014afc <_scanf_float+0x398>
 8014b48:	f8d3 8000 	ldr.w	r8, [r3]
 8014b4c:	ee10 2a10 	vmov	r2, s0
 8014b50:	ee10 0a10 	vmov	r0, s0
 8014b54:	463b      	mov	r3, r7
 8014b56:	4639      	mov	r1, r7
 8014b58:	f7eb ffe8 	bl	8000b2c <__aeabi_dcmpun>
 8014b5c:	b128      	cbz	r0, 8014b6a <_scanf_float+0x406>
 8014b5e:	4808      	ldr	r0, [pc, #32]	; (8014b80 <_scanf_float+0x41c>)
 8014b60:	f000 f89e 	bl	8014ca0 <nanf>
 8014b64:	ed88 0a00 	vstr	s0, [r8]
 8014b68:	e7cb      	b.n	8014b02 <_scanf_float+0x39e>
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	4639      	mov	r1, r7
 8014b6e:	f7ec f83b 	bl	8000be8 <__aeabi_d2f>
 8014b72:	f8c8 0000 	str.w	r0, [r8]
 8014b76:	e7c4      	b.n	8014b02 <_scanf_float+0x39e>
 8014b78:	2500      	movs	r5, #0
 8014b7a:	e634      	b.n	80147e6 <_scanf_float+0x82>
 8014b7c:	0801deb4 	.word	0x0801deb4
 8014b80:	0801e328 	.word	0x0801e328

08014b84 <iprintf>:
 8014b84:	b40f      	push	{r0, r1, r2, r3}
 8014b86:	4b0a      	ldr	r3, [pc, #40]	; (8014bb0 <iprintf+0x2c>)
 8014b88:	b513      	push	{r0, r1, r4, lr}
 8014b8a:	681c      	ldr	r4, [r3, #0]
 8014b8c:	b124      	cbz	r4, 8014b98 <iprintf+0x14>
 8014b8e:	69a3      	ldr	r3, [r4, #24]
 8014b90:	b913      	cbnz	r3, 8014b98 <iprintf+0x14>
 8014b92:	4620      	mov	r0, r4
 8014b94:	f001 ffac 	bl	8016af0 <__sinit>
 8014b98:	ab05      	add	r3, sp, #20
 8014b9a:	9a04      	ldr	r2, [sp, #16]
 8014b9c:	68a1      	ldr	r1, [r4, #8]
 8014b9e:	9301      	str	r3, [sp, #4]
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f003 fb83 	bl	80182ac <_vfiprintf_r>
 8014ba6:	b002      	add	sp, #8
 8014ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bac:	b004      	add	sp, #16
 8014bae:	4770      	bx	lr
 8014bb0:	20000230 	.word	0x20000230

08014bb4 <_puts_r>:
 8014bb4:	b570      	push	{r4, r5, r6, lr}
 8014bb6:	460e      	mov	r6, r1
 8014bb8:	4605      	mov	r5, r0
 8014bba:	b118      	cbz	r0, 8014bc4 <_puts_r+0x10>
 8014bbc:	6983      	ldr	r3, [r0, #24]
 8014bbe:	b90b      	cbnz	r3, 8014bc4 <_puts_r+0x10>
 8014bc0:	f001 ff96 	bl	8016af0 <__sinit>
 8014bc4:	69ab      	ldr	r3, [r5, #24]
 8014bc6:	68ac      	ldr	r4, [r5, #8]
 8014bc8:	b913      	cbnz	r3, 8014bd0 <_puts_r+0x1c>
 8014bca:	4628      	mov	r0, r5
 8014bcc:	f001 ff90 	bl	8016af0 <__sinit>
 8014bd0:	4b2c      	ldr	r3, [pc, #176]	; (8014c84 <_puts_r+0xd0>)
 8014bd2:	429c      	cmp	r4, r3
 8014bd4:	d120      	bne.n	8014c18 <_puts_r+0x64>
 8014bd6:	686c      	ldr	r4, [r5, #4]
 8014bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bda:	07db      	lsls	r3, r3, #31
 8014bdc:	d405      	bmi.n	8014bea <_puts_r+0x36>
 8014bde:	89a3      	ldrh	r3, [r4, #12]
 8014be0:	0598      	lsls	r0, r3, #22
 8014be2:	d402      	bmi.n	8014bea <_puts_r+0x36>
 8014be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014be6:	f002 fb94 	bl	8017312 <__retarget_lock_acquire_recursive>
 8014bea:	89a3      	ldrh	r3, [r4, #12]
 8014bec:	0719      	lsls	r1, r3, #28
 8014bee:	d51d      	bpl.n	8014c2c <_puts_r+0x78>
 8014bf0:	6923      	ldr	r3, [r4, #16]
 8014bf2:	b1db      	cbz	r3, 8014c2c <_puts_r+0x78>
 8014bf4:	3e01      	subs	r6, #1
 8014bf6:	68a3      	ldr	r3, [r4, #8]
 8014bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014bfc:	3b01      	subs	r3, #1
 8014bfe:	60a3      	str	r3, [r4, #8]
 8014c00:	bb39      	cbnz	r1, 8014c52 <_puts_r+0x9e>
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	da38      	bge.n	8014c78 <_puts_r+0xc4>
 8014c06:	4622      	mov	r2, r4
 8014c08:	210a      	movs	r1, #10
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	f000 ff1c 	bl	8015a48 <__swbuf_r>
 8014c10:	3001      	adds	r0, #1
 8014c12:	d011      	beq.n	8014c38 <_puts_r+0x84>
 8014c14:	250a      	movs	r5, #10
 8014c16:	e011      	b.n	8014c3c <_puts_r+0x88>
 8014c18:	4b1b      	ldr	r3, [pc, #108]	; (8014c88 <_puts_r+0xd4>)
 8014c1a:	429c      	cmp	r4, r3
 8014c1c:	d101      	bne.n	8014c22 <_puts_r+0x6e>
 8014c1e:	68ac      	ldr	r4, [r5, #8]
 8014c20:	e7da      	b.n	8014bd8 <_puts_r+0x24>
 8014c22:	4b1a      	ldr	r3, [pc, #104]	; (8014c8c <_puts_r+0xd8>)
 8014c24:	429c      	cmp	r4, r3
 8014c26:	bf08      	it	eq
 8014c28:	68ec      	ldreq	r4, [r5, #12]
 8014c2a:	e7d5      	b.n	8014bd8 <_puts_r+0x24>
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f000 ff5c 	bl	8015aec <__swsetup_r>
 8014c34:	2800      	cmp	r0, #0
 8014c36:	d0dd      	beq.n	8014bf4 <_puts_r+0x40>
 8014c38:	f04f 35ff 	mov.w	r5, #4294967295
 8014c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c3e:	07da      	lsls	r2, r3, #31
 8014c40:	d405      	bmi.n	8014c4e <_puts_r+0x9a>
 8014c42:	89a3      	ldrh	r3, [r4, #12]
 8014c44:	059b      	lsls	r3, r3, #22
 8014c46:	d402      	bmi.n	8014c4e <_puts_r+0x9a>
 8014c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c4a:	f002 fb63 	bl	8017314 <__retarget_lock_release_recursive>
 8014c4e:	4628      	mov	r0, r5
 8014c50:	bd70      	pop	{r4, r5, r6, pc}
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	da04      	bge.n	8014c60 <_puts_r+0xac>
 8014c56:	69a2      	ldr	r2, [r4, #24]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	dc06      	bgt.n	8014c6a <_puts_r+0xb6>
 8014c5c:	290a      	cmp	r1, #10
 8014c5e:	d004      	beq.n	8014c6a <_puts_r+0xb6>
 8014c60:	6823      	ldr	r3, [r4, #0]
 8014c62:	1c5a      	adds	r2, r3, #1
 8014c64:	6022      	str	r2, [r4, #0]
 8014c66:	7019      	strb	r1, [r3, #0]
 8014c68:	e7c5      	b.n	8014bf6 <_puts_r+0x42>
 8014c6a:	4622      	mov	r2, r4
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	f000 feeb 	bl	8015a48 <__swbuf_r>
 8014c72:	3001      	adds	r0, #1
 8014c74:	d1bf      	bne.n	8014bf6 <_puts_r+0x42>
 8014c76:	e7df      	b.n	8014c38 <_puts_r+0x84>
 8014c78:	6823      	ldr	r3, [r4, #0]
 8014c7a:	250a      	movs	r5, #10
 8014c7c:	1c5a      	adds	r2, r3, #1
 8014c7e:	6022      	str	r2, [r4, #0]
 8014c80:	701d      	strb	r5, [r3, #0]
 8014c82:	e7db      	b.n	8014c3c <_puts_r+0x88>
 8014c84:	0801e0c4 	.word	0x0801e0c4
 8014c88:	0801e0e4 	.word	0x0801e0e4
 8014c8c:	0801e0a4 	.word	0x0801e0a4

08014c90 <puts>:
 8014c90:	4b02      	ldr	r3, [pc, #8]	; (8014c9c <puts+0xc>)
 8014c92:	4601      	mov	r1, r0
 8014c94:	6818      	ldr	r0, [r3, #0]
 8014c96:	f7ff bf8d 	b.w	8014bb4 <_puts_r>
 8014c9a:	bf00      	nop
 8014c9c:	20000230 	.word	0x20000230

08014ca0 <nanf>:
 8014ca0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ca8 <nanf+0x8>
 8014ca4:	4770      	bx	lr
 8014ca6:	bf00      	nop
 8014ca8:	7fc00000 	.word	0x7fc00000

08014cac <siprintf>:
 8014cac:	b40e      	push	{r1, r2, r3}
 8014cae:	b500      	push	{lr}
 8014cb0:	b09c      	sub	sp, #112	; 0x70
 8014cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8014cb4:	9002      	str	r0, [sp, #8]
 8014cb6:	9006      	str	r0, [sp, #24]
 8014cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014cbc:	4809      	ldr	r0, [pc, #36]	; (8014ce4 <siprintf+0x38>)
 8014cbe:	9107      	str	r1, [sp, #28]
 8014cc0:	9104      	str	r1, [sp, #16]
 8014cc2:	4909      	ldr	r1, [pc, #36]	; (8014ce8 <siprintf+0x3c>)
 8014cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cc8:	9105      	str	r1, [sp, #20]
 8014cca:	6800      	ldr	r0, [r0, #0]
 8014ccc:	9301      	str	r3, [sp, #4]
 8014cce:	a902      	add	r1, sp, #8
 8014cd0:	f003 f9c2 	bl	8018058 <_svfiprintf_r>
 8014cd4:	9b02      	ldr	r3, [sp, #8]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	701a      	strb	r2, [r3, #0]
 8014cda:	b01c      	add	sp, #112	; 0x70
 8014cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ce0:	b003      	add	sp, #12
 8014ce2:	4770      	bx	lr
 8014ce4:	20000230 	.word	0x20000230
 8014ce8:	ffff0208 	.word	0xffff0208

08014cec <sulp>:
 8014cec:	b570      	push	{r4, r5, r6, lr}
 8014cee:	4604      	mov	r4, r0
 8014cf0:	460d      	mov	r5, r1
 8014cf2:	ec45 4b10 	vmov	d0, r4, r5
 8014cf6:	4616      	mov	r6, r2
 8014cf8:	f002 ff0c 	bl	8017b14 <__ulp>
 8014cfc:	ec51 0b10 	vmov	r0, r1, d0
 8014d00:	b17e      	cbz	r6, 8014d22 <sulp+0x36>
 8014d02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014d06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	dd09      	ble.n	8014d22 <sulp+0x36>
 8014d0e:	051b      	lsls	r3, r3, #20
 8014d10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014d14:	2400      	movs	r4, #0
 8014d16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014d1a:	4622      	mov	r2, r4
 8014d1c:	462b      	mov	r3, r5
 8014d1e:	f7eb fc6b 	bl	80005f8 <__aeabi_dmul>
 8014d22:	bd70      	pop	{r4, r5, r6, pc}
 8014d24:	0000      	movs	r0, r0
	...

08014d28 <_strtod_l>:
 8014d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d2c:	ed2d 8b02 	vpush	{d8}
 8014d30:	b09d      	sub	sp, #116	; 0x74
 8014d32:	461f      	mov	r7, r3
 8014d34:	2300      	movs	r3, #0
 8014d36:	9318      	str	r3, [sp, #96]	; 0x60
 8014d38:	4ba2      	ldr	r3, [pc, #648]	; (8014fc4 <_strtod_l+0x29c>)
 8014d3a:	9213      	str	r2, [sp, #76]	; 0x4c
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	9305      	str	r3, [sp, #20]
 8014d40:	4604      	mov	r4, r0
 8014d42:	4618      	mov	r0, r3
 8014d44:	4688      	mov	r8, r1
 8014d46:	f7eb fa43 	bl	80001d0 <strlen>
 8014d4a:	f04f 0a00 	mov.w	sl, #0
 8014d4e:	4605      	mov	r5, r0
 8014d50:	f04f 0b00 	mov.w	fp, #0
 8014d54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d5a:	781a      	ldrb	r2, [r3, #0]
 8014d5c:	2a2b      	cmp	r2, #43	; 0x2b
 8014d5e:	d04e      	beq.n	8014dfe <_strtod_l+0xd6>
 8014d60:	d83b      	bhi.n	8014dda <_strtod_l+0xb2>
 8014d62:	2a0d      	cmp	r2, #13
 8014d64:	d834      	bhi.n	8014dd0 <_strtod_l+0xa8>
 8014d66:	2a08      	cmp	r2, #8
 8014d68:	d834      	bhi.n	8014dd4 <_strtod_l+0xac>
 8014d6a:	2a00      	cmp	r2, #0
 8014d6c:	d03e      	beq.n	8014dec <_strtod_l+0xc4>
 8014d6e:	2300      	movs	r3, #0
 8014d70:	930a      	str	r3, [sp, #40]	; 0x28
 8014d72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014d74:	7833      	ldrb	r3, [r6, #0]
 8014d76:	2b30      	cmp	r3, #48	; 0x30
 8014d78:	f040 80b0 	bne.w	8014edc <_strtod_l+0x1b4>
 8014d7c:	7873      	ldrb	r3, [r6, #1]
 8014d7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014d82:	2b58      	cmp	r3, #88	; 0x58
 8014d84:	d168      	bne.n	8014e58 <_strtod_l+0x130>
 8014d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d88:	9301      	str	r3, [sp, #4]
 8014d8a:	ab18      	add	r3, sp, #96	; 0x60
 8014d8c:	9702      	str	r7, [sp, #8]
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	4a8d      	ldr	r2, [pc, #564]	; (8014fc8 <_strtod_l+0x2a0>)
 8014d92:	ab19      	add	r3, sp, #100	; 0x64
 8014d94:	a917      	add	r1, sp, #92	; 0x5c
 8014d96:	4620      	mov	r0, r4
 8014d98:	f001 ffae 	bl	8016cf8 <__gethex>
 8014d9c:	f010 0707 	ands.w	r7, r0, #7
 8014da0:	4605      	mov	r5, r0
 8014da2:	d005      	beq.n	8014db0 <_strtod_l+0x88>
 8014da4:	2f06      	cmp	r7, #6
 8014da6:	d12c      	bne.n	8014e02 <_strtod_l+0xda>
 8014da8:	3601      	adds	r6, #1
 8014daa:	2300      	movs	r3, #0
 8014dac:	9617      	str	r6, [sp, #92]	; 0x5c
 8014dae:	930a      	str	r3, [sp, #40]	; 0x28
 8014db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	f040 8590 	bne.w	80158d8 <_strtod_l+0xbb0>
 8014db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dba:	b1eb      	cbz	r3, 8014df8 <_strtod_l+0xd0>
 8014dbc:	4652      	mov	r2, sl
 8014dbe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014dc2:	ec43 2b10 	vmov	d0, r2, r3
 8014dc6:	b01d      	add	sp, #116	; 0x74
 8014dc8:	ecbd 8b02 	vpop	{d8}
 8014dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd0:	2a20      	cmp	r2, #32
 8014dd2:	d1cc      	bne.n	8014d6e <_strtod_l+0x46>
 8014dd4:	3301      	adds	r3, #1
 8014dd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8014dd8:	e7be      	b.n	8014d58 <_strtod_l+0x30>
 8014dda:	2a2d      	cmp	r2, #45	; 0x2d
 8014ddc:	d1c7      	bne.n	8014d6e <_strtod_l+0x46>
 8014dde:	2201      	movs	r2, #1
 8014de0:	920a      	str	r2, [sp, #40]	; 0x28
 8014de2:	1c5a      	adds	r2, r3, #1
 8014de4:	9217      	str	r2, [sp, #92]	; 0x5c
 8014de6:	785b      	ldrb	r3, [r3, #1]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d1c2      	bne.n	8014d72 <_strtod_l+0x4a>
 8014dec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	f040 856e 	bne.w	80158d4 <_strtod_l+0xbac>
 8014df8:	4652      	mov	r2, sl
 8014dfa:	465b      	mov	r3, fp
 8014dfc:	e7e1      	b.n	8014dc2 <_strtod_l+0x9a>
 8014dfe:	2200      	movs	r2, #0
 8014e00:	e7ee      	b.n	8014de0 <_strtod_l+0xb8>
 8014e02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014e04:	b13a      	cbz	r2, 8014e16 <_strtod_l+0xee>
 8014e06:	2135      	movs	r1, #53	; 0x35
 8014e08:	a81a      	add	r0, sp, #104	; 0x68
 8014e0a:	f002 ff8e 	bl	8017d2a <__copybits>
 8014e0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014e10:	4620      	mov	r0, r4
 8014e12:	f002 fb4d 	bl	80174b0 <_Bfree>
 8014e16:	3f01      	subs	r7, #1
 8014e18:	2f04      	cmp	r7, #4
 8014e1a:	d806      	bhi.n	8014e2a <_strtod_l+0x102>
 8014e1c:	e8df f007 	tbb	[pc, r7]
 8014e20:	1714030a 	.word	0x1714030a
 8014e24:	0a          	.byte	0x0a
 8014e25:	00          	.byte	0x00
 8014e26:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014e2a:	0728      	lsls	r0, r5, #28
 8014e2c:	d5c0      	bpl.n	8014db0 <_strtod_l+0x88>
 8014e2e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014e32:	e7bd      	b.n	8014db0 <_strtod_l+0x88>
 8014e34:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014e38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014e3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014e3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014e42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014e46:	e7f0      	b.n	8014e2a <_strtod_l+0x102>
 8014e48:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014fcc <_strtod_l+0x2a4>
 8014e4c:	e7ed      	b.n	8014e2a <_strtod_l+0x102>
 8014e4e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014e52:	f04f 3aff 	mov.w	sl, #4294967295
 8014e56:	e7e8      	b.n	8014e2a <_strtod_l+0x102>
 8014e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e5a:	1c5a      	adds	r2, r3, #1
 8014e5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e5e:	785b      	ldrb	r3, [r3, #1]
 8014e60:	2b30      	cmp	r3, #48	; 0x30
 8014e62:	d0f9      	beq.n	8014e58 <_strtod_l+0x130>
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d0a3      	beq.n	8014db0 <_strtod_l+0x88>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	f04f 0900 	mov.w	r9, #0
 8014e6e:	9304      	str	r3, [sp, #16]
 8014e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e72:	9308      	str	r3, [sp, #32]
 8014e74:	f8cd 901c 	str.w	r9, [sp, #28]
 8014e78:	464f      	mov	r7, r9
 8014e7a:	220a      	movs	r2, #10
 8014e7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014e7e:	7806      	ldrb	r6, [r0, #0]
 8014e80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014e84:	b2d9      	uxtb	r1, r3
 8014e86:	2909      	cmp	r1, #9
 8014e88:	d92a      	bls.n	8014ee0 <_strtod_l+0x1b8>
 8014e8a:	9905      	ldr	r1, [sp, #20]
 8014e8c:	462a      	mov	r2, r5
 8014e8e:	f003 fb9a 	bl	80185c6 <strncmp>
 8014e92:	b398      	cbz	r0, 8014efc <_strtod_l+0x1d4>
 8014e94:	2000      	movs	r0, #0
 8014e96:	4632      	mov	r2, r6
 8014e98:	463d      	mov	r5, r7
 8014e9a:	9005      	str	r0, [sp, #20]
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	2a65      	cmp	r2, #101	; 0x65
 8014ea0:	d001      	beq.n	8014ea6 <_strtod_l+0x17e>
 8014ea2:	2a45      	cmp	r2, #69	; 0x45
 8014ea4:	d118      	bne.n	8014ed8 <_strtod_l+0x1b0>
 8014ea6:	b91d      	cbnz	r5, 8014eb0 <_strtod_l+0x188>
 8014ea8:	9a04      	ldr	r2, [sp, #16]
 8014eaa:	4302      	orrs	r2, r0
 8014eac:	d09e      	beq.n	8014dec <_strtod_l+0xc4>
 8014eae:	2500      	movs	r5, #0
 8014eb0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014eb4:	f108 0201 	add.w	r2, r8, #1
 8014eb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8014eba:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014ebe:	2a2b      	cmp	r2, #43	; 0x2b
 8014ec0:	d075      	beq.n	8014fae <_strtod_l+0x286>
 8014ec2:	2a2d      	cmp	r2, #45	; 0x2d
 8014ec4:	d07b      	beq.n	8014fbe <_strtod_l+0x296>
 8014ec6:	f04f 0c00 	mov.w	ip, #0
 8014eca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014ece:	2909      	cmp	r1, #9
 8014ed0:	f240 8082 	bls.w	8014fd8 <_strtod_l+0x2b0>
 8014ed4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014ed8:	2600      	movs	r6, #0
 8014eda:	e09d      	b.n	8015018 <_strtod_l+0x2f0>
 8014edc:	2300      	movs	r3, #0
 8014ede:	e7c4      	b.n	8014e6a <_strtod_l+0x142>
 8014ee0:	2f08      	cmp	r7, #8
 8014ee2:	bfd8      	it	le
 8014ee4:	9907      	ldrle	r1, [sp, #28]
 8014ee6:	f100 0001 	add.w	r0, r0, #1
 8014eea:	bfda      	itte	le
 8014eec:	fb02 3301 	mlale	r3, r2, r1, r3
 8014ef0:	9307      	strle	r3, [sp, #28]
 8014ef2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014ef6:	3701      	adds	r7, #1
 8014ef8:	9017      	str	r0, [sp, #92]	; 0x5c
 8014efa:	e7bf      	b.n	8014e7c <_strtod_l+0x154>
 8014efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014efe:	195a      	adds	r2, r3, r5
 8014f00:	9217      	str	r2, [sp, #92]	; 0x5c
 8014f02:	5d5a      	ldrb	r2, [r3, r5]
 8014f04:	2f00      	cmp	r7, #0
 8014f06:	d037      	beq.n	8014f78 <_strtod_l+0x250>
 8014f08:	9005      	str	r0, [sp, #20]
 8014f0a:	463d      	mov	r5, r7
 8014f0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014f10:	2b09      	cmp	r3, #9
 8014f12:	d912      	bls.n	8014f3a <_strtod_l+0x212>
 8014f14:	2301      	movs	r3, #1
 8014f16:	e7c2      	b.n	8014e9e <_strtod_l+0x176>
 8014f18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f1a:	1c5a      	adds	r2, r3, #1
 8014f1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8014f1e:	785a      	ldrb	r2, [r3, #1]
 8014f20:	3001      	adds	r0, #1
 8014f22:	2a30      	cmp	r2, #48	; 0x30
 8014f24:	d0f8      	beq.n	8014f18 <_strtod_l+0x1f0>
 8014f26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014f2a:	2b08      	cmp	r3, #8
 8014f2c:	f200 84d9 	bhi.w	80158e2 <_strtod_l+0xbba>
 8014f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f32:	9005      	str	r0, [sp, #20]
 8014f34:	2000      	movs	r0, #0
 8014f36:	9308      	str	r3, [sp, #32]
 8014f38:	4605      	mov	r5, r0
 8014f3a:	3a30      	subs	r2, #48	; 0x30
 8014f3c:	f100 0301 	add.w	r3, r0, #1
 8014f40:	d014      	beq.n	8014f6c <_strtod_l+0x244>
 8014f42:	9905      	ldr	r1, [sp, #20]
 8014f44:	4419      	add	r1, r3
 8014f46:	9105      	str	r1, [sp, #20]
 8014f48:	462b      	mov	r3, r5
 8014f4a:	eb00 0e05 	add.w	lr, r0, r5
 8014f4e:	210a      	movs	r1, #10
 8014f50:	4573      	cmp	r3, lr
 8014f52:	d113      	bne.n	8014f7c <_strtod_l+0x254>
 8014f54:	182b      	adds	r3, r5, r0
 8014f56:	2b08      	cmp	r3, #8
 8014f58:	f105 0501 	add.w	r5, r5, #1
 8014f5c:	4405      	add	r5, r0
 8014f5e:	dc1c      	bgt.n	8014f9a <_strtod_l+0x272>
 8014f60:	9907      	ldr	r1, [sp, #28]
 8014f62:	230a      	movs	r3, #10
 8014f64:	fb03 2301 	mla	r3, r3, r1, r2
 8014f68:	9307      	str	r3, [sp, #28]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f6e:	1c51      	adds	r1, r2, #1
 8014f70:	9117      	str	r1, [sp, #92]	; 0x5c
 8014f72:	7852      	ldrb	r2, [r2, #1]
 8014f74:	4618      	mov	r0, r3
 8014f76:	e7c9      	b.n	8014f0c <_strtod_l+0x1e4>
 8014f78:	4638      	mov	r0, r7
 8014f7a:	e7d2      	b.n	8014f22 <_strtod_l+0x1fa>
 8014f7c:	2b08      	cmp	r3, #8
 8014f7e:	dc04      	bgt.n	8014f8a <_strtod_l+0x262>
 8014f80:	9e07      	ldr	r6, [sp, #28]
 8014f82:	434e      	muls	r6, r1
 8014f84:	9607      	str	r6, [sp, #28]
 8014f86:	3301      	adds	r3, #1
 8014f88:	e7e2      	b.n	8014f50 <_strtod_l+0x228>
 8014f8a:	f103 0c01 	add.w	ip, r3, #1
 8014f8e:	f1bc 0f10 	cmp.w	ip, #16
 8014f92:	bfd8      	it	le
 8014f94:	fb01 f909 	mulle.w	r9, r1, r9
 8014f98:	e7f5      	b.n	8014f86 <_strtod_l+0x25e>
 8014f9a:	2d10      	cmp	r5, #16
 8014f9c:	bfdc      	itt	le
 8014f9e:	230a      	movle	r3, #10
 8014fa0:	fb03 2909 	mlale	r9, r3, r9, r2
 8014fa4:	e7e1      	b.n	8014f6a <_strtod_l+0x242>
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	9305      	str	r3, [sp, #20]
 8014faa:	2301      	movs	r3, #1
 8014fac:	e77c      	b.n	8014ea8 <_strtod_l+0x180>
 8014fae:	f04f 0c00 	mov.w	ip, #0
 8014fb2:	f108 0202 	add.w	r2, r8, #2
 8014fb6:	9217      	str	r2, [sp, #92]	; 0x5c
 8014fb8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014fbc:	e785      	b.n	8014eca <_strtod_l+0x1a2>
 8014fbe:	f04f 0c01 	mov.w	ip, #1
 8014fc2:	e7f6      	b.n	8014fb2 <_strtod_l+0x28a>
 8014fc4:	0801e16c 	.word	0x0801e16c
 8014fc8:	0801debc 	.word	0x0801debc
 8014fcc:	7ff00000 	.word	0x7ff00000
 8014fd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014fd2:	1c51      	adds	r1, r2, #1
 8014fd4:	9117      	str	r1, [sp, #92]	; 0x5c
 8014fd6:	7852      	ldrb	r2, [r2, #1]
 8014fd8:	2a30      	cmp	r2, #48	; 0x30
 8014fda:	d0f9      	beq.n	8014fd0 <_strtod_l+0x2a8>
 8014fdc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014fe0:	2908      	cmp	r1, #8
 8014fe2:	f63f af79 	bhi.w	8014ed8 <_strtod_l+0x1b0>
 8014fe6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014fea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014fec:	9206      	str	r2, [sp, #24]
 8014fee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ff0:	1c51      	adds	r1, r2, #1
 8014ff2:	9117      	str	r1, [sp, #92]	; 0x5c
 8014ff4:	7852      	ldrb	r2, [r2, #1]
 8014ff6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014ffa:	2e09      	cmp	r6, #9
 8014ffc:	d937      	bls.n	801506e <_strtod_l+0x346>
 8014ffe:	9e06      	ldr	r6, [sp, #24]
 8015000:	1b89      	subs	r1, r1, r6
 8015002:	2908      	cmp	r1, #8
 8015004:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015008:	dc02      	bgt.n	8015010 <_strtod_l+0x2e8>
 801500a:	4576      	cmp	r6, lr
 801500c:	bfa8      	it	ge
 801500e:	4676      	movge	r6, lr
 8015010:	f1bc 0f00 	cmp.w	ip, #0
 8015014:	d000      	beq.n	8015018 <_strtod_l+0x2f0>
 8015016:	4276      	negs	r6, r6
 8015018:	2d00      	cmp	r5, #0
 801501a:	d14d      	bne.n	80150b8 <_strtod_l+0x390>
 801501c:	9904      	ldr	r1, [sp, #16]
 801501e:	4301      	orrs	r1, r0
 8015020:	f47f aec6 	bne.w	8014db0 <_strtod_l+0x88>
 8015024:	2b00      	cmp	r3, #0
 8015026:	f47f aee1 	bne.w	8014dec <_strtod_l+0xc4>
 801502a:	2a69      	cmp	r2, #105	; 0x69
 801502c:	d027      	beq.n	801507e <_strtod_l+0x356>
 801502e:	dc24      	bgt.n	801507a <_strtod_l+0x352>
 8015030:	2a49      	cmp	r2, #73	; 0x49
 8015032:	d024      	beq.n	801507e <_strtod_l+0x356>
 8015034:	2a4e      	cmp	r2, #78	; 0x4e
 8015036:	f47f aed9 	bne.w	8014dec <_strtod_l+0xc4>
 801503a:	499f      	ldr	r1, [pc, #636]	; (80152b8 <_strtod_l+0x590>)
 801503c:	a817      	add	r0, sp, #92	; 0x5c
 801503e:	f002 f8b3 	bl	80171a8 <__match>
 8015042:	2800      	cmp	r0, #0
 8015044:	f43f aed2 	beq.w	8014dec <_strtod_l+0xc4>
 8015048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801504a:	781b      	ldrb	r3, [r3, #0]
 801504c:	2b28      	cmp	r3, #40	; 0x28
 801504e:	d12d      	bne.n	80150ac <_strtod_l+0x384>
 8015050:	499a      	ldr	r1, [pc, #616]	; (80152bc <_strtod_l+0x594>)
 8015052:	aa1a      	add	r2, sp, #104	; 0x68
 8015054:	a817      	add	r0, sp, #92	; 0x5c
 8015056:	f002 f8bb 	bl	80171d0 <__hexnan>
 801505a:	2805      	cmp	r0, #5
 801505c:	d126      	bne.n	80150ac <_strtod_l+0x384>
 801505e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015060:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8015064:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015068:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801506c:	e6a0      	b.n	8014db0 <_strtod_l+0x88>
 801506e:	210a      	movs	r1, #10
 8015070:	fb01 2e0e 	mla	lr, r1, lr, r2
 8015074:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015078:	e7b9      	b.n	8014fee <_strtod_l+0x2c6>
 801507a:	2a6e      	cmp	r2, #110	; 0x6e
 801507c:	e7db      	b.n	8015036 <_strtod_l+0x30e>
 801507e:	4990      	ldr	r1, [pc, #576]	; (80152c0 <_strtod_l+0x598>)
 8015080:	a817      	add	r0, sp, #92	; 0x5c
 8015082:	f002 f891 	bl	80171a8 <__match>
 8015086:	2800      	cmp	r0, #0
 8015088:	f43f aeb0 	beq.w	8014dec <_strtod_l+0xc4>
 801508c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801508e:	498d      	ldr	r1, [pc, #564]	; (80152c4 <_strtod_l+0x59c>)
 8015090:	3b01      	subs	r3, #1
 8015092:	a817      	add	r0, sp, #92	; 0x5c
 8015094:	9317      	str	r3, [sp, #92]	; 0x5c
 8015096:	f002 f887 	bl	80171a8 <__match>
 801509a:	b910      	cbnz	r0, 80150a2 <_strtod_l+0x37a>
 801509c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801509e:	3301      	adds	r3, #1
 80150a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80150a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80152d4 <_strtod_l+0x5ac>
 80150a6:	f04f 0a00 	mov.w	sl, #0
 80150aa:	e681      	b.n	8014db0 <_strtod_l+0x88>
 80150ac:	4886      	ldr	r0, [pc, #536]	; (80152c8 <_strtod_l+0x5a0>)
 80150ae:	f003 fa2f 	bl	8018510 <nan>
 80150b2:	ec5b ab10 	vmov	sl, fp, d0
 80150b6:	e67b      	b.n	8014db0 <_strtod_l+0x88>
 80150b8:	9b05      	ldr	r3, [sp, #20]
 80150ba:	9807      	ldr	r0, [sp, #28]
 80150bc:	1af3      	subs	r3, r6, r3
 80150be:	2f00      	cmp	r7, #0
 80150c0:	bf08      	it	eq
 80150c2:	462f      	moveq	r7, r5
 80150c4:	2d10      	cmp	r5, #16
 80150c6:	9306      	str	r3, [sp, #24]
 80150c8:	46a8      	mov	r8, r5
 80150ca:	bfa8      	it	ge
 80150cc:	f04f 0810 	movge.w	r8, #16
 80150d0:	f7eb fa18 	bl	8000504 <__aeabi_ui2d>
 80150d4:	2d09      	cmp	r5, #9
 80150d6:	4682      	mov	sl, r0
 80150d8:	468b      	mov	fp, r1
 80150da:	dd13      	ble.n	8015104 <_strtod_l+0x3dc>
 80150dc:	4b7b      	ldr	r3, [pc, #492]	; (80152cc <_strtod_l+0x5a4>)
 80150de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80150e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80150e6:	f7eb fa87 	bl	80005f8 <__aeabi_dmul>
 80150ea:	4682      	mov	sl, r0
 80150ec:	4648      	mov	r0, r9
 80150ee:	468b      	mov	fp, r1
 80150f0:	f7eb fa08 	bl	8000504 <__aeabi_ui2d>
 80150f4:	4602      	mov	r2, r0
 80150f6:	460b      	mov	r3, r1
 80150f8:	4650      	mov	r0, sl
 80150fa:	4659      	mov	r1, fp
 80150fc:	f7eb f8c6 	bl	800028c <__adddf3>
 8015100:	4682      	mov	sl, r0
 8015102:	468b      	mov	fp, r1
 8015104:	2d0f      	cmp	r5, #15
 8015106:	dc38      	bgt.n	801517a <_strtod_l+0x452>
 8015108:	9b06      	ldr	r3, [sp, #24]
 801510a:	2b00      	cmp	r3, #0
 801510c:	f43f ae50 	beq.w	8014db0 <_strtod_l+0x88>
 8015110:	dd24      	ble.n	801515c <_strtod_l+0x434>
 8015112:	2b16      	cmp	r3, #22
 8015114:	dc0b      	bgt.n	801512e <_strtod_l+0x406>
 8015116:	496d      	ldr	r1, [pc, #436]	; (80152cc <_strtod_l+0x5a4>)
 8015118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801511c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015120:	4652      	mov	r2, sl
 8015122:	465b      	mov	r3, fp
 8015124:	f7eb fa68 	bl	80005f8 <__aeabi_dmul>
 8015128:	4682      	mov	sl, r0
 801512a:	468b      	mov	fp, r1
 801512c:	e640      	b.n	8014db0 <_strtod_l+0x88>
 801512e:	9a06      	ldr	r2, [sp, #24]
 8015130:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015134:	4293      	cmp	r3, r2
 8015136:	db20      	blt.n	801517a <_strtod_l+0x452>
 8015138:	4c64      	ldr	r4, [pc, #400]	; (80152cc <_strtod_l+0x5a4>)
 801513a:	f1c5 050f 	rsb	r5, r5, #15
 801513e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015142:	4652      	mov	r2, sl
 8015144:	465b      	mov	r3, fp
 8015146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801514a:	f7eb fa55 	bl	80005f8 <__aeabi_dmul>
 801514e:	9b06      	ldr	r3, [sp, #24]
 8015150:	1b5d      	subs	r5, r3, r5
 8015152:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015156:	e9d4 2300 	ldrd	r2, r3, [r4]
 801515a:	e7e3      	b.n	8015124 <_strtod_l+0x3fc>
 801515c:	9b06      	ldr	r3, [sp, #24]
 801515e:	3316      	adds	r3, #22
 8015160:	db0b      	blt.n	801517a <_strtod_l+0x452>
 8015162:	9b05      	ldr	r3, [sp, #20]
 8015164:	1b9e      	subs	r6, r3, r6
 8015166:	4b59      	ldr	r3, [pc, #356]	; (80152cc <_strtod_l+0x5a4>)
 8015168:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801516c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015170:	4650      	mov	r0, sl
 8015172:	4659      	mov	r1, fp
 8015174:	f7eb fb6a 	bl	800084c <__aeabi_ddiv>
 8015178:	e7d6      	b.n	8015128 <_strtod_l+0x400>
 801517a:	9b06      	ldr	r3, [sp, #24]
 801517c:	eba5 0808 	sub.w	r8, r5, r8
 8015180:	4498      	add	r8, r3
 8015182:	f1b8 0f00 	cmp.w	r8, #0
 8015186:	dd74      	ble.n	8015272 <_strtod_l+0x54a>
 8015188:	f018 030f 	ands.w	r3, r8, #15
 801518c:	d00a      	beq.n	80151a4 <_strtod_l+0x47c>
 801518e:	494f      	ldr	r1, [pc, #316]	; (80152cc <_strtod_l+0x5a4>)
 8015190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015194:	4652      	mov	r2, sl
 8015196:	465b      	mov	r3, fp
 8015198:	e9d1 0100 	ldrd	r0, r1, [r1]
 801519c:	f7eb fa2c 	bl	80005f8 <__aeabi_dmul>
 80151a0:	4682      	mov	sl, r0
 80151a2:	468b      	mov	fp, r1
 80151a4:	f038 080f 	bics.w	r8, r8, #15
 80151a8:	d04f      	beq.n	801524a <_strtod_l+0x522>
 80151aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80151ae:	dd22      	ble.n	80151f6 <_strtod_l+0x4ce>
 80151b0:	2500      	movs	r5, #0
 80151b2:	462e      	mov	r6, r5
 80151b4:	9507      	str	r5, [sp, #28]
 80151b6:	9505      	str	r5, [sp, #20]
 80151b8:	2322      	movs	r3, #34	; 0x22
 80151ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80152d4 <_strtod_l+0x5ac>
 80151be:	6023      	str	r3, [r4, #0]
 80151c0:	f04f 0a00 	mov.w	sl, #0
 80151c4:	9b07      	ldr	r3, [sp, #28]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	f43f adf2 	beq.w	8014db0 <_strtod_l+0x88>
 80151cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80151ce:	4620      	mov	r0, r4
 80151d0:	f002 f96e 	bl	80174b0 <_Bfree>
 80151d4:	9905      	ldr	r1, [sp, #20]
 80151d6:	4620      	mov	r0, r4
 80151d8:	f002 f96a 	bl	80174b0 <_Bfree>
 80151dc:	4631      	mov	r1, r6
 80151de:	4620      	mov	r0, r4
 80151e0:	f002 f966 	bl	80174b0 <_Bfree>
 80151e4:	9907      	ldr	r1, [sp, #28]
 80151e6:	4620      	mov	r0, r4
 80151e8:	f002 f962 	bl	80174b0 <_Bfree>
 80151ec:	4629      	mov	r1, r5
 80151ee:	4620      	mov	r0, r4
 80151f0:	f002 f95e 	bl	80174b0 <_Bfree>
 80151f4:	e5dc      	b.n	8014db0 <_strtod_l+0x88>
 80151f6:	4b36      	ldr	r3, [pc, #216]	; (80152d0 <_strtod_l+0x5a8>)
 80151f8:	9304      	str	r3, [sp, #16]
 80151fa:	2300      	movs	r3, #0
 80151fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015200:	4650      	mov	r0, sl
 8015202:	4659      	mov	r1, fp
 8015204:	4699      	mov	r9, r3
 8015206:	f1b8 0f01 	cmp.w	r8, #1
 801520a:	dc21      	bgt.n	8015250 <_strtod_l+0x528>
 801520c:	b10b      	cbz	r3, 8015212 <_strtod_l+0x4ea>
 801520e:	4682      	mov	sl, r0
 8015210:	468b      	mov	fp, r1
 8015212:	4b2f      	ldr	r3, [pc, #188]	; (80152d0 <_strtod_l+0x5a8>)
 8015214:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015218:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801521c:	4652      	mov	r2, sl
 801521e:	465b      	mov	r3, fp
 8015220:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015224:	f7eb f9e8 	bl	80005f8 <__aeabi_dmul>
 8015228:	4b2a      	ldr	r3, [pc, #168]	; (80152d4 <_strtod_l+0x5ac>)
 801522a:	460a      	mov	r2, r1
 801522c:	400b      	ands	r3, r1
 801522e:	492a      	ldr	r1, [pc, #168]	; (80152d8 <_strtod_l+0x5b0>)
 8015230:	428b      	cmp	r3, r1
 8015232:	4682      	mov	sl, r0
 8015234:	d8bc      	bhi.n	80151b0 <_strtod_l+0x488>
 8015236:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801523a:	428b      	cmp	r3, r1
 801523c:	bf86      	itte	hi
 801523e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80152dc <_strtod_l+0x5b4>
 8015242:	f04f 3aff 	movhi.w	sl, #4294967295
 8015246:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801524a:	2300      	movs	r3, #0
 801524c:	9304      	str	r3, [sp, #16]
 801524e:	e084      	b.n	801535a <_strtod_l+0x632>
 8015250:	f018 0f01 	tst.w	r8, #1
 8015254:	d005      	beq.n	8015262 <_strtod_l+0x53a>
 8015256:	9b04      	ldr	r3, [sp, #16]
 8015258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525c:	f7eb f9cc 	bl	80005f8 <__aeabi_dmul>
 8015260:	2301      	movs	r3, #1
 8015262:	9a04      	ldr	r2, [sp, #16]
 8015264:	3208      	adds	r2, #8
 8015266:	f109 0901 	add.w	r9, r9, #1
 801526a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801526e:	9204      	str	r2, [sp, #16]
 8015270:	e7c9      	b.n	8015206 <_strtod_l+0x4de>
 8015272:	d0ea      	beq.n	801524a <_strtod_l+0x522>
 8015274:	f1c8 0800 	rsb	r8, r8, #0
 8015278:	f018 020f 	ands.w	r2, r8, #15
 801527c:	d00a      	beq.n	8015294 <_strtod_l+0x56c>
 801527e:	4b13      	ldr	r3, [pc, #76]	; (80152cc <_strtod_l+0x5a4>)
 8015280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015284:	4650      	mov	r0, sl
 8015286:	4659      	mov	r1, fp
 8015288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528c:	f7eb fade 	bl	800084c <__aeabi_ddiv>
 8015290:	4682      	mov	sl, r0
 8015292:	468b      	mov	fp, r1
 8015294:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015298:	d0d7      	beq.n	801524a <_strtod_l+0x522>
 801529a:	f1b8 0f1f 	cmp.w	r8, #31
 801529e:	dd1f      	ble.n	80152e0 <_strtod_l+0x5b8>
 80152a0:	2500      	movs	r5, #0
 80152a2:	462e      	mov	r6, r5
 80152a4:	9507      	str	r5, [sp, #28]
 80152a6:	9505      	str	r5, [sp, #20]
 80152a8:	2322      	movs	r3, #34	; 0x22
 80152aa:	f04f 0a00 	mov.w	sl, #0
 80152ae:	f04f 0b00 	mov.w	fp, #0
 80152b2:	6023      	str	r3, [r4, #0]
 80152b4:	e786      	b.n	80151c4 <_strtod_l+0x49c>
 80152b6:	bf00      	nop
 80152b8:	0801de8d 	.word	0x0801de8d
 80152bc:	0801ded0 	.word	0x0801ded0
 80152c0:	0801de85 	.word	0x0801de85
 80152c4:	0801e014 	.word	0x0801e014
 80152c8:	0801e328 	.word	0x0801e328
 80152cc:	0801e208 	.word	0x0801e208
 80152d0:	0801e1e0 	.word	0x0801e1e0
 80152d4:	7ff00000 	.word	0x7ff00000
 80152d8:	7ca00000 	.word	0x7ca00000
 80152dc:	7fefffff 	.word	0x7fefffff
 80152e0:	f018 0310 	ands.w	r3, r8, #16
 80152e4:	bf18      	it	ne
 80152e6:	236a      	movne	r3, #106	; 0x6a
 80152e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8015698 <_strtod_l+0x970>
 80152ec:	9304      	str	r3, [sp, #16]
 80152ee:	4650      	mov	r0, sl
 80152f0:	4659      	mov	r1, fp
 80152f2:	2300      	movs	r3, #0
 80152f4:	f018 0f01 	tst.w	r8, #1
 80152f8:	d004      	beq.n	8015304 <_strtod_l+0x5dc>
 80152fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80152fe:	f7eb f97b 	bl	80005f8 <__aeabi_dmul>
 8015302:	2301      	movs	r3, #1
 8015304:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015308:	f109 0908 	add.w	r9, r9, #8
 801530c:	d1f2      	bne.n	80152f4 <_strtod_l+0x5cc>
 801530e:	b10b      	cbz	r3, 8015314 <_strtod_l+0x5ec>
 8015310:	4682      	mov	sl, r0
 8015312:	468b      	mov	fp, r1
 8015314:	9b04      	ldr	r3, [sp, #16]
 8015316:	b1c3      	cbz	r3, 801534a <_strtod_l+0x622>
 8015318:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801531c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015320:	2b00      	cmp	r3, #0
 8015322:	4659      	mov	r1, fp
 8015324:	dd11      	ble.n	801534a <_strtod_l+0x622>
 8015326:	2b1f      	cmp	r3, #31
 8015328:	f340 8124 	ble.w	8015574 <_strtod_l+0x84c>
 801532c:	2b34      	cmp	r3, #52	; 0x34
 801532e:	bfde      	ittt	le
 8015330:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015334:	f04f 33ff 	movle.w	r3, #4294967295
 8015338:	fa03 f202 	lslle.w	r2, r3, r2
 801533c:	f04f 0a00 	mov.w	sl, #0
 8015340:	bfcc      	ite	gt
 8015342:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015346:	ea02 0b01 	andle.w	fp, r2, r1
 801534a:	2200      	movs	r2, #0
 801534c:	2300      	movs	r3, #0
 801534e:	4650      	mov	r0, sl
 8015350:	4659      	mov	r1, fp
 8015352:	f7eb fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8015356:	2800      	cmp	r0, #0
 8015358:	d1a2      	bne.n	80152a0 <_strtod_l+0x578>
 801535a:	9b07      	ldr	r3, [sp, #28]
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	9908      	ldr	r1, [sp, #32]
 8015360:	462b      	mov	r3, r5
 8015362:	463a      	mov	r2, r7
 8015364:	4620      	mov	r0, r4
 8015366:	f002 f90b 	bl	8017580 <__s2b>
 801536a:	9007      	str	r0, [sp, #28]
 801536c:	2800      	cmp	r0, #0
 801536e:	f43f af1f 	beq.w	80151b0 <_strtod_l+0x488>
 8015372:	9b05      	ldr	r3, [sp, #20]
 8015374:	1b9e      	subs	r6, r3, r6
 8015376:	9b06      	ldr	r3, [sp, #24]
 8015378:	2b00      	cmp	r3, #0
 801537a:	bfb4      	ite	lt
 801537c:	4633      	movlt	r3, r6
 801537e:	2300      	movge	r3, #0
 8015380:	930c      	str	r3, [sp, #48]	; 0x30
 8015382:	9b06      	ldr	r3, [sp, #24]
 8015384:	2500      	movs	r5, #0
 8015386:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801538a:	9312      	str	r3, [sp, #72]	; 0x48
 801538c:	462e      	mov	r6, r5
 801538e:	9b07      	ldr	r3, [sp, #28]
 8015390:	4620      	mov	r0, r4
 8015392:	6859      	ldr	r1, [r3, #4]
 8015394:	f002 f84c 	bl	8017430 <_Balloc>
 8015398:	9005      	str	r0, [sp, #20]
 801539a:	2800      	cmp	r0, #0
 801539c:	f43f af0c 	beq.w	80151b8 <_strtod_l+0x490>
 80153a0:	9b07      	ldr	r3, [sp, #28]
 80153a2:	691a      	ldr	r2, [r3, #16]
 80153a4:	3202      	adds	r2, #2
 80153a6:	f103 010c 	add.w	r1, r3, #12
 80153aa:	0092      	lsls	r2, r2, #2
 80153ac:	300c      	adds	r0, #12
 80153ae:	f002 f831 	bl	8017414 <memcpy>
 80153b2:	ec4b ab10 	vmov	d0, sl, fp
 80153b6:	aa1a      	add	r2, sp, #104	; 0x68
 80153b8:	a919      	add	r1, sp, #100	; 0x64
 80153ba:	4620      	mov	r0, r4
 80153bc:	f002 fc26 	bl	8017c0c <__d2b>
 80153c0:	ec4b ab18 	vmov	d8, sl, fp
 80153c4:	9018      	str	r0, [sp, #96]	; 0x60
 80153c6:	2800      	cmp	r0, #0
 80153c8:	f43f aef6 	beq.w	80151b8 <_strtod_l+0x490>
 80153cc:	2101      	movs	r1, #1
 80153ce:	4620      	mov	r0, r4
 80153d0:	f002 f970 	bl	80176b4 <__i2b>
 80153d4:	4606      	mov	r6, r0
 80153d6:	2800      	cmp	r0, #0
 80153d8:	f43f aeee 	beq.w	80151b8 <_strtod_l+0x490>
 80153dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80153de:	9904      	ldr	r1, [sp, #16]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	bfab      	itete	ge
 80153e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80153e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80153e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80153ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80153ee:	bfac      	ite	ge
 80153f0:	eb03 0902 	addge.w	r9, r3, r2
 80153f4:	1ad7      	sublt	r7, r2, r3
 80153f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80153f8:	eba3 0801 	sub.w	r8, r3, r1
 80153fc:	4490      	add	r8, r2
 80153fe:	4ba1      	ldr	r3, [pc, #644]	; (8015684 <_strtod_l+0x95c>)
 8015400:	f108 38ff 	add.w	r8, r8, #4294967295
 8015404:	4598      	cmp	r8, r3
 8015406:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801540a:	f280 80c7 	bge.w	801559c <_strtod_l+0x874>
 801540e:	eba3 0308 	sub.w	r3, r3, r8
 8015412:	2b1f      	cmp	r3, #31
 8015414:	eba2 0203 	sub.w	r2, r2, r3
 8015418:	f04f 0101 	mov.w	r1, #1
 801541c:	f300 80b1 	bgt.w	8015582 <_strtod_l+0x85a>
 8015420:	fa01 f303 	lsl.w	r3, r1, r3
 8015424:	930d      	str	r3, [sp, #52]	; 0x34
 8015426:	2300      	movs	r3, #0
 8015428:	9308      	str	r3, [sp, #32]
 801542a:	eb09 0802 	add.w	r8, r9, r2
 801542e:	9b04      	ldr	r3, [sp, #16]
 8015430:	45c1      	cmp	r9, r8
 8015432:	4417      	add	r7, r2
 8015434:	441f      	add	r7, r3
 8015436:	464b      	mov	r3, r9
 8015438:	bfa8      	it	ge
 801543a:	4643      	movge	r3, r8
 801543c:	42bb      	cmp	r3, r7
 801543e:	bfa8      	it	ge
 8015440:	463b      	movge	r3, r7
 8015442:	2b00      	cmp	r3, #0
 8015444:	bfc2      	ittt	gt
 8015446:	eba8 0803 	subgt.w	r8, r8, r3
 801544a:	1aff      	subgt	r7, r7, r3
 801544c:	eba9 0903 	subgt.w	r9, r9, r3
 8015450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015452:	2b00      	cmp	r3, #0
 8015454:	dd17      	ble.n	8015486 <_strtod_l+0x75e>
 8015456:	4631      	mov	r1, r6
 8015458:	461a      	mov	r2, r3
 801545a:	4620      	mov	r0, r4
 801545c:	f002 f9ea 	bl	8017834 <__pow5mult>
 8015460:	4606      	mov	r6, r0
 8015462:	2800      	cmp	r0, #0
 8015464:	f43f aea8 	beq.w	80151b8 <_strtod_l+0x490>
 8015468:	4601      	mov	r1, r0
 801546a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801546c:	4620      	mov	r0, r4
 801546e:	f002 f937 	bl	80176e0 <__multiply>
 8015472:	900b      	str	r0, [sp, #44]	; 0x2c
 8015474:	2800      	cmp	r0, #0
 8015476:	f43f ae9f 	beq.w	80151b8 <_strtod_l+0x490>
 801547a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801547c:	4620      	mov	r0, r4
 801547e:	f002 f817 	bl	80174b0 <_Bfree>
 8015482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015484:	9318      	str	r3, [sp, #96]	; 0x60
 8015486:	f1b8 0f00 	cmp.w	r8, #0
 801548a:	f300 808c 	bgt.w	80155a6 <_strtod_l+0x87e>
 801548e:	9b06      	ldr	r3, [sp, #24]
 8015490:	2b00      	cmp	r3, #0
 8015492:	dd08      	ble.n	80154a6 <_strtod_l+0x77e>
 8015494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015496:	9905      	ldr	r1, [sp, #20]
 8015498:	4620      	mov	r0, r4
 801549a:	f002 f9cb 	bl	8017834 <__pow5mult>
 801549e:	9005      	str	r0, [sp, #20]
 80154a0:	2800      	cmp	r0, #0
 80154a2:	f43f ae89 	beq.w	80151b8 <_strtod_l+0x490>
 80154a6:	2f00      	cmp	r7, #0
 80154a8:	dd08      	ble.n	80154bc <_strtod_l+0x794>
 80154aa:	9905      	ldr	r1, [sp, #20]
 80154ac:	463a      	mov	r2, r7
 80154ae:	4620      	mov	r0, r4
 80154b0:	f002 fa1a 	bl	80178e8 <__lshift>
 80154b4:	9005      	str	r0, [sp, #20]
 80154b6:	2800      	cmp	r0, #0
 80154b8:	f43f ae7e 	beq.w	80151b8 <_strtod_l+0x490>
 80154bc:	f1b9 0f00 	cmp.w	r9, #0
 80154c0:	dd08      	ble.n	80154d4 <_strtod_l+0x7ac>
 80154c2:	4631      	mov	r1, r6
 80154c4:	464a      	mov	r2, r9
 80154c6:	4620      	mov	r0, r4
 80154c8:	f002 fa0e 	bl	80178e8 <__lshift>
 80154cc:	4606      	mov	r6, r0
 80154ce:	2800      	cmp	r0, #0
 80154d0:	f43f ae72 	beq.w	80151b8 <_strtod_l+0x490>
 80154d4:	9a05      	ldr	r2, [sp, #20]
 80154d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80154d8:	4620      	mov	r0, r4
 80154da:	f002 fa91 	bl	8017a00 <__mdiff>
 80154de:	4605      	mov	r5, r0
 80154e0:	2800      	cmp	r0, #0
 80154e2:	f43f ae69 	beq.w	80151b8 <_strtod_l+0x490>
 80154e6:	68c3      	ldr	r3, [r0, #12]
 80154e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80154ea:	2300      	movs	r3, #0
 80154ec:	60c3      	str	r3, [r0, #12]
 80154ee:	4631      	mov	r1, r6
 80154f0:	f002 fa6a 	bl	80179c8 <__mcmp>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	da60      	bge.n	80155ba <_strtod_l+0x892>
 80154f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154fa:	ea53 030a 	orrs.w	r3, r3, sl
 80154fe:	f040 8082 	bne.w	8015606 <_strtod_l+0x8de>
 8015502:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015506:	2b00      	cmp	r3, #0
 8015508:	d17d      	bne.n	8015606 <_strtod_l+0x8de>
 801550a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801550e:	0d1b      	lsrs	r3, r3, #20
 8015510:	051b      	lsls	r3, r3, #20
 8015512:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015516:	d976      	bls.n	8015606 <_strtod_l+0x8de>
 8015518:	696b      	ldr	r3, [r5, #20]
 801551a:	b913      	cbnz	r3, 8015522 <_strtod_l+0x7fa>
 801551c:	692b      	ldr	r3, [r5, #16]
 801551e:	2b01      	cmp	r3, #1
 8015520:	dd71      	ble.n	8015606 <_strtod_l+0x8de>
 8015522:	4629      	mov	r1, r5
 8015524:	2201      	movs	r2, #1
 8015526:	4620      	mov	r0, r4
 8015528:	f002 f9de 	bl	80178e8 <__lshift>
 801552c:	4631      	mov	r1, r6
 801552e:	4605      	mov	r5, r0
 8015530:	f002 fa4a 	bl	80179c8 <__mcmp>
 8015534:	2800      	cmp	r0, #0
 8015536:	dd66      	ble.n	8015606 <_strtod_l+0x8de>
 8015538:	9904      	ldr	r1, [sp, #16]
 801553a:	4a53      	ldr	r2, [pc, #332]	; (8015688 <_strtod_l+0x960>)
 801553c:	465b      	mov	r3, fp
 801553e:	2900      	cmp	r1, #0
 8015540:	f000 8081 	beq.w	8015646 <_strtod_l+0x91e>
 8015544:	ea02 010b 	and.w	r1, r2, fp
 8015548:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801554c:	dc7b      	bgt.n	8015646 <_strtod_l+0x91e>
 801554e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015552:	f77f aea9 	ble.w	80152a8 <_strtod_l+0x580>
 8015556:	4b4d      	ldr	r3, [pc, #308]	; (801568c <_strtod_l+0x964>)
 8015558:	4650      	mov	r0, sl
 801555a:	4659      	mov	r1, fp
 801555c:	2200      	movs	r2, #0
 801555e:	f7eb f84b 	bl	80005f8 <__aeabi_dmul>
 8015562:	460b      	mov	r3, r1
 8015564:	4303      	orrs	r3, r0
 8015566:	bf08      	it	eq
 8015568:	2322      	moveq	r3, #34	; 0x22
 801556a:	4682      	mov	sl, r0
 801556c:	468b      	mov	fp, r1
 801556e:	bf08      	it	eq
 8015570:	6023      	streq	r3, [r4, #0]
 8015572:	e62b      	b.n	80151cc <_strtod_l+0x4a4>
 8015574:	f04f 32ff 	mov.w	r2, #4294967295
 8015578:	fa02 f303 	lsl.w	r3, r2, r3
 801557c:	ea03 0a0a 	and.w	sl, r3, sl
 8015580:	e6e3      	b.n	801534a <_strtod_l+0x622>
 8015582:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015586:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801558a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801558e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015592:	fa01 f308 	lsl.w	r3, r1, r8
 8015596:	9308      	str	r3, [sp, #32]
 8015598:	910d      	str	r1, [sp, #52]	; 0x34
 801559a:	e746      	b.n	801542a <_strtod_l+0x702>
 801559c:	2300      	movs	r3, #0
 801559e:	9308      	str	r3, [sp, #32]
 80155a0:	2301      	movs	r3, #1
 80155a2:	930d      	str	r3, [sp, #52]	; 0x34
 80155a4:	e741      	b.n	801542a <_strtod_l+0x702>
 80155a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80155a8:	4642      	mov	r2, r8
 80155aa:	4620      	mov	r0, r4
 80155ac:	f002 f99c 	bl	80178e8 <__lshift>
 80155b0:	9018      	str	r0, [sp, #96]	; 0x60
 80155b2:	2800      	cmp	r0, #0
 80155b4:	f47f af6b 	bne.w	801548e <_strtod_l+0x766>
 80155b8:	e5fe      	b.n	80151b8 <_strtod_l+0x490>
 80155ba:	465f      	mov	r7, fp
 80155bc:	d16e      	bne.n	801569c <_strtod_l+0x974>
 80155be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155c4:	b342      	cbz	r2, 8015618 <_strtod_l+0x8f0>
 80155c6:	4a32      	ldr	r2, [pc, #200]	; (8015690 <_strtod_l+0x968>)
 80155c8:	4293      	cmp	r3, r2
 80155ca:	d128      	bne.n	801561e <_strtod_l+0x8f6>
 80155cc:	9b04      	ldr	r3, [sp, #16]
 80155ce:	4651      	mov	r1, sl
 80155d0:	b1eb      	cbz	r3, 801560e <_strtod_l+0x8e6>
 80155d2:	4b2d      	ldr	r3, [pc, #180]	; (8015688 <_strtod_l+0x960>)
 80155d4:	403b      	ands	r3, r7
 80155d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80155da:	f04f 32ff 	mov.w	r2, #4294967295
 80155de:	d819      	bhi.n	8015614 <_strtod_l+0x8ec>
 80155e0:	0d1b      	lsrs	r3, r3, #20
 80155e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80155e6:	fa02 f303 	lsl.w	r3, r2, r3
 80155ea:	4299      	cmp	r1, r3
 80155ec:	d117      	bne.n	801561e <_strtod_l+0x8f6>
 80155ee:	4b29      	ldr	r3, [pc, #164]	; (8015694 <_strtod_l+0x96c>)
 80155f0:	429f      	cmp	r7, r3
 80155f2:	d102      	bne.n	80155fa <_strtod_l+0x8d2>
 80155f4:	3101      	adds	r1, #1
 80155f6:	f43f addf 	beq.w	80151b8 <_strtod_l+0x490>
 80155fa:	4b23      	ldr	r3, [pc, #140]	; (8015688 <_strtod_l+0x960>)
 80155fc:	403b      	ands	r3, r7
 80155fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015602:	f04f 0a00 	mov.w	sl, #0
 8015606:	9b04      	ldr	r3, [sp, #16]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d1a4      	bne.n	8015556 <_strtod_l+0x82e>
 801560c:	e5de      	b.n	80151cc <_strtod_l+0x4a4>
 801560e:	f04f 33ff 	mov.w	r3, #4294967295
 8015612:	e7ea      	b.n	80155ea <_strtod_l+0x8c2>
 8015614:	4613      	mov	r3, r2
 8015616:	e7e8      	b.n	80155ea <_strtod_l+0x8c2>
 8015618:	ea53 030a 	orrs.w	r3, r3, sl
 801561c:	d08c      	beq.n	8015538 <_strtod_l+0x810>
 801561e:	9b08      	ldr	r3, [sp, #32]
 8015620:	b1db      	cbz	r3, 801565a <_strtod_l+0x932>
 8015622:	423b      	tst	r3, r7
 8015624:	d0ef      	beq.n	8015606 <_strtod_l+0x8de>
 8015626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015628:	9a04      	ldr	r2, [sp, #16]
 801562a:	4650      	mov	r0, sl
 801562c:	4659      	mov	r1, fp
 801562e:	b1c3      	cbz	r3, 8015662 <_strtod_l+0x93a>
 8015630:	f7ff fb5c 	bl	8014cec <sulp>
 8015634:	4602      	mov	r2, r0
 8015636:	460b      	mov	r3, r1
 8015638:	ec51 0b18 	vmov	r0, r1, d8
 801563c:	f7ea fe26 	bl	800028c <__adddf3>
 8015640:	4682      	mov	sl, r0
 8015642:	468b      	mov	fp, r1
 8015644:	e7df      	b.n	8015606 <_strtod_l+0x8de>
 8015646:	4013      	ands	r3, r2
 8015648:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801564c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015650:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015654:	f04f 3aff 	mov.w	sl, #4294967295
 8015658:	e7d5      	b.n	8015606 <_strtod_l+0x8de>
 801565a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801565c:	ea13 0f0a 	tst.w	r3, sl
 8015660:	e7e0      	b.n	8015624 <_strtod_l+0x8fc>
 8015662:	f7ff fb43 	bl	8014cec <sulp>
 8015666:	4602      	mov	r2, r0
 8015668:	460b      	mov	r3, r1
 801566a:	ec51 0b18 	vmov	r0, r1, d8
 801566e:	f7ea fe0b 	bl	8000288 <__aeabi_dsub>
 8015672:	2200      	movs	r2, #0
 8015674:	2300      	movs	r3, #0
 8015676:	4682      	mov	sl, r0
 8015678:	468b      	mov	fp, r1
 801567a:	f7eb fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 801567e:	2800      	cmp	r0, #0
 8015680:	d0c1      	beq.n	8015606 <_strtod_l+0x8de>
 8015682:	e611      	b.n	80152a8 <_strtod_l+0x580>
 8015684:	fffffc02 	.word	0xfffffc02
 8015688:	7ff00000 	.word	0x7ff00000
 801568c:	39500000 	.word	0x39500000
 8015690:	000fffff 	.word	0x000fffff
 8015694:	7fefffff 	.word	0x7fefffff
 8015698:	0801dee8 	.word	0x0801dee8
 801569c:	4631      	mov	r1, r6
 801569e:	4628      	mov	r0, r5
 80156a0:	f002 fb10 	bl	8017cc4 <__ratio>
 80156a4:	ec59 8b10 	vmov	r8, r9, d0
 80156a8:	ee10 0a10 	vmov	r0, s0
 80156ac:	2200      	movs	r2, #0
 80156ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80156b2:	4649      	mov	r1, r9
 80156b4:	f7eb fa1c 	bl	8000af0 <__aeabi_dcmple>
 80156b8:	2800      	cmp	r0, #0
 80156ba:	d07a      	beq.n	80157b2 <_strtod_l+0xa8a>
 80156bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d04a      	beq.n	8015758 <_strtod_l+0xa30>
 80156c2:	4b95      	ldr	r3, [pc, #596]	; (8015918 <_strtod_l+0xbf0>)
 80156c4:	2200      	movs	r2, #0
 80156c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80156ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015918 <_strtod_l+0xbf0>
 80156ce:	f04f 0800 	mov.w	r8, #0
 80156d2:	4b92      	ldr	r3, [pc, #584]	; (801591c <_strtod_l+0xbf4>)
 80156d4:	403b      	ands	r3, r7
 80156d6:	930d      	str	r3, [sp, #52]	; 0x34
 80156d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80156da:	4b91      	ldr	r3, [pc, #580]	; (8015920 <_strtod_l+0xbf8>)
 80156dc:	429a      	cmp	r2, r3
 80156de:	f040 80b0 	bne.w	8015842 <_strtod_l+0xb1a>
 80156e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80156e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80156ea:	ec4b ab10 	vmov	d0, sl, fp
 80156ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80156f2:	f002 fa0f 	bl	8017b14 <__ulp>
 80156f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80156fa:	ec53 2b10 	vmov	r2, r3, d0
 80156fe:	f7ea ff7b 	bl	80005f8 <__aeabi_dmul>
 8015702:	4652      	mov	r2, sl
 8015704:	465b      	mov	r3, fp
 8015706:	f7ea fdc1 	bl	800028c <__adddf3>
 801570a:	460b      	mov	r3, r1
 801570c:	4983      	ldr	r1, [pc, #524]	; (801591c <_strtod_l+0xbf4>)
 801570e:	4a85      	ldr	r2, [pc, #532]	; (8015924 <_strtod_l+0xbfc>)
 8015710:	4019      	ands	r1, r3
 8015712:	4291      	cmp	r1, r2
 8015714:	4682      	mov	sl, r0
 8015716:	d960      	bls.n	80157da <_strtod_l+0xab2>
 8015718:	ee18 3a90 	vmov	r3, s17
 801571c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015720:	4293      	cmp	r3, r2
 8015722:	d104      	bne.n	801572e <_strtod_l+0xa06>
 8015724:	ee18 3a10 	vmov	r3, s16
 8015728:	3301      	adds	r3, #1
 801572a:	f43f ad45 	beq.w	80151b8 <_strtod_l+0x490>
 801572e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8015930 <_strtod_l+0xc08>
 8015732:	f04f 3aff 	mov.w	sl, #4294967295
 8015736:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015738:	4620      	mov	r0, r4
 801573a:	f001 feb9 	bl	80174b0 <_Bfree>
 801573e:	9905      	ldr	r1, [sp, #20]
 8015740:	4620      	mov	r0, r4
 8015742:	f001 feb5 	bl	80174b0 <_Bfree>
 8015746:	4631      	mov	r1, r6
 8015748:	4620      	mov	r0, r4
 801574a:	f001 feb1 	bl	80174b0 <_Bfree>
 801574e:	4629      	mov	r1, r5
 8015750:	4620      	mov	r0, r4
 8015752:	f001 fead 	bl	80174b0 <_Bfree>
 8015756:	e61a      	b.n	801538e <_strtod_l+0x666>
 8015758:	f1ba 0f00 	cmp.w	sl, #0
 801575c:	d11b      	bne.n	8015796 <_strtod_l+0xa6e>
 801575e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015762:	b9f3      	cbnz	r3, 80157a2 <_strtod_l+0xa7a>
 8015764:	4b6c      	ldr	r3, [pc, #432]	; (8015918 <_strtod_l+0xbf0>)
 8015766:	2200      	movs	r2, #0
 8015768:	4640      	mov	r0, r8
 801576a:	4649      	mov	r1, r9
 801576c:	f7eb f9b6 	bl	8000adc <__aeabi_dcmplt>
 8015770:	b9d0      	cbnz	r0, 80157a8 <_strtod_l+0xa80>
 8015772:	4640      	mov	r0, r8
 8015774:	4649      	mov	r1, r9
 8015776:	4b6c      	ldr	r3, [pc, #432]	; (8015928 <_strtod_l+0xc00>)
 8015778:	2200      	movs	r2, #0
 801577a:	f7ea ff3d 	bl	80005f8 <__aeabi_dmul>
 801577e:	4680      	mov	r8, r0
 8015780:	4689      	mov	r9, r1
 8015782:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015786:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801578a:	9315      	str	r3, [sp, #84]	; 0x54
 801578c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015790:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015794:	e79d      	b.n	80156d2 <_strtod_l+0x9aa>
 8015796:	f1ba 0f01 	cmp.w	sl, #1
 801579a:	d102      	bne.n	80157a2 <_strtod_l+0xa7a>
 801579c:	2f00      	cmp	r7, #0
 801579e:	f43f ad83 	beq.w	80152a8 <_strtod_l+0x580>
 80157a2:	4b62      	ldr	r3, [pc, #392]	; (801592c <_strtod_l+0xc04>)
 80157a4:	2200      	movs	r2, #0
 80157a6:	e78e      	b.n	80156c6 <_strtod_l+0x99e>
 80157a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8015928 <_strtod_l+0xc00>
 80157ac:	f04f 0800 	mov.w	r8, #0
 80157b0:	e7e7      	b.n	8015782 <_strtod_l+0xa5a>
 80157b2:	4b5d      	ldr	r3, [pc, #372]	; (8015928 <_strtod_l+0xc00>)
 80157b4:	4640      	mov	r0, r8
 80157b6:	4649      	mov	r1, r9
 80157b8:	2200      	movs	r2, #0
 80157ba:	f7ea ff1d 	bl	80005f8 <__aeabi_dmul>
 80157be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157c0:	4680      	mov	r8, r0
 80157c2:	4689      	mov	r9, r1
 80157c4:	b933      	cbnz	r3, 80157d4 <_strtod_l+0xaac>
 80157c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157ca:	900e      	str	r0, [sp, #56]	; 0x38
 80157cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80157ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80157d2:	e7dd      	b.n	8015790 <_strtod_l+0xa68>
 80157d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80157d8:	e7f9      	b.n	80157ce <_strtod_l+0xaa6>
 80157da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80157de:	9b04      	ldr	r3, [sp, #16]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d1a8      	bne.n	8015736 <_strtod_l+0xa0e>
 80157e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80157e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157ea:	0d1b      	lsrs	r3, r3, #20
 80157ec:	051b      	lsls	r3, r3, #20
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d1a1      	bne.n	8015736 <_strtod_l+0xa0e>
 80157f2:	4640      	mov	r0, r8
 80157f4:	4649      	mov	r1, r9
 80157f6:	f7eb faaf 	bl	8000d58 <__aeabi_d2lz>
 80157fa:	f7ea fecf 	bl	800059c <__aeabi_l2d>
 80157fe:	4602      	mov	r2, r0
 8015800:	460b      	mov	r3, r1
 8015802:	4640      	mov	r0, r8
 8015804:	4649      	mov	r1, r9
 8015806:	f7ea fd3f 	bl	8000288 <__aeabi_dsub>
 801580a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801580c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015810:	ea43 030a 	orr.w	r3, r3, sl
 8015814:	4313      	orrs	r3, r2
 8015816:	4680      	mov	r8, r0
 8015818:	4689      	mov	r9, r1
 801581a:	d055      	beq.n	80158c8 <_strtod_l+0xba0>
 801581c:	a336      	add	r3, pc, #216	; (adr r3, 80158f8 <_strtod_l+0xbd0>)
 801581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015822:	f7eb f95b 	bl	8000adc <__aeabi_dcmplt>
 8015826:	2800      	cmp	r0, #0
 8015828:	f47f acd0 	bne.w	80151cc <_strtod_l+0x4a4>
 801582c:	a334      	add	r3, pc, #208	; (adr r3, 8015900 <_strtod_l+0xbd8>)
 801582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015832:	4640      	mov	r0, r8
 8015834:	4649      	mov	r1, r9
 8015836:	f7eb f96f 	bl	8000b18 <__aeabi_dcmpgt>
 801583a:	2800      	cmp	r0, #0
 801583c:	f43f af7b 	beq.w	8015736 <_strtod_l+0xa0e>
 8015840:	e4c4      	b.n	80151cc <_strtod_l+0x4a4>
 8015842:	9b04      	ldr	r3, [sp, #16]
 8015844:	b333      	cbz	r3, 8015894 <_strtod_l+0xb6c>
 8015846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015848:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801584c:	d822      	bhi.n	8015894 <_strtod_l+0xb6c>
 801584e:	a32e      	add	r3, pc, #184	; (adr r3, 8015908 <_strtod_l+0xbe0>)
 8015850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015854:	4640      	mov	r0, r8
 8015856:	4649      	mov	r1, r9
 8015858:	f7eb f94a 	bl	8000af0 <__aeabi_dcmple>
 801585c:	b1a0      	cbz	r0, 8015888 <_strtod_l+0xb60>
 801585e:	4649      	mov	r1, r9
 8015860:	4640      	mov	r0, r8
 8015862:	f7eb f9a1 	bl	8000ba8 <__aeabi_d2uiz>
 8015866:	2801      	cmp	r0, #1
 8015868:	bf38      	it	cc
 801586a:	2001      	movcc	r0, #1
 801586c:	f7ea fe4a 	bl	8000504 <__aeabi_ui2d>
 8015870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015872:	4680      	mov	r8, r0
 8015874:	4689      	mov	r9, r1
 8015876:	bb23      	cbnz	r3, 80158c2 <_strtod_l+0xb9a>
 8015878:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801587c:	9010      	str	r0, [sp, #64]	; 0x40
 801587e:	9311      	str	r3, [sp, #68]	; 0x44
 8015880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015884:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801588a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801588c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015890:	1a9b      	subs	r3, r3, r2
 8015892:	9309      	str	r3, [sp, #36]	; 0x24
 8015894:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015898:	eeb0 0a48 	vmov.f32	s0, s16
 801589c:	eef0 0a68 	vmov.f32	s1, s17
 80158a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80158a4:	f002 f936 	bl	8017b14 <__ulp>
 80158a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80158ac:	ec53 2b10 	vmov	r2, r3, d0
 80158b0:	f7ea fea2 	bl	80005f8 <__aeabi_dmul>
 80158b4:	ec53 2b18 	vmov	r2, r3, d8
 80158b8:	f7ea fce8 	bl	800028c <__adddf3>
 80158bc:	4682      	mov	sl, r0
 80158be:	468b      	mov	fp, r1
 80158c0:	e78d      	b.n	80157de <_strtod_l+0xab6>
 80158c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80158c6:	e7db      	b.n	8015880 <_strtod_l+0xb58>
 80158c8:	a311      	add	r3, pc, #68	; (adr r3, 8015910 <_strtod_l+0xbe8>)
 80158ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ce:	f7eb f905 	bl	8000adc <__aeabi_dcmplt>
 80158d2:	e7b2      	b.n	801583a <_strtod_l+0xb12>
 80158d4:	2300      	movs	r3, #0
 80158d6:	930a      	str	r3, [sp, #40]	; 0x28
 80158d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80158da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80158dc:	6013      	str	r3, [r2, #0]
 80158de:	f7ff ba6b 	b.w	8014db8 <_strtod_l+0x90>
 80158e2:	2a65      	cmp	r2, #101	; 0x65
 80158e4:	f43f ab5f 	beq.w	8014fa6 <_strtod_l+0x27e>
 80158e8:	2a45      	cmp	r2, #69	; 0x45
 80158ea:	f43f ab5c 	beq.w	8014fa6 <_strtod_l+0x27e>
 80158ee:	2301      	movs	r3, #1
 80158f0:	f7ff bb94 	b.w	801501c <_strtod_l+0x2f4>
 80158f4:	f3af 8000 	nop.w
 80158f8:	94a03595 	.word	0x94a03595
 80158fc:	3fdfffff 	.word	0x3fdfffff
 8015900:	35afe535 	.word	0x35afe535
 8015904:	3fe00000 	.word	0x3fe00000
 8015908:	ffc00000 	.word	0xffc00000
 801590c:	41dfffff 	.word	0x41dfffff
 8015910:	94a03595 	.word	0x94a03595
 8015914:	3fcfffff 	.word	0x3fcfffff
 8015918:	3ff00000 	.word	0x3ff00000
 801591c:	7ff00000 	.word	0x7ff00000
 8015920:	7fe00000 	.word	0x7fe00000
 8015924:	7c9fffff 	.word	0x7c9fffff
 8015928:	3fe00000 	.word	0x3fe00000
 801592c:	bff00000 	.word	0xbff00000
 8015930:	7fefffff 	.word	0x7fefffff

08015934 <_strtod_r>:
 8015934:	4b01      	ldr	r3, [pc, #4]	; (801593c <_strtod_r+0x8>)
 8015936:	f7ff b9f7 	b.w	8014d28 <_strtod_l>
 801593a:	bf00      	nop
 801593c:	20000298 	.word	0x20000298

08015940 <_strtol_l.constprop.0>:
 8015940:	2b01      	cmp	r3, #1
 8015942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015946:	d001      	beq.n	801594c <_strtol_l.constprop.0+0xc>
 8015948:	2b24      	cmp	r3, #36	; 0x24
 801594a:	d906      	bls.n	801595a <_strtol_l.constprop.0+0x1a>
 801594c:	f7fe fa5e 	bl	8013e0c <__errno>
 8015950:	2316      	movs	r3, #22
 8015952:	6003      	str	r3, [r0, #0]
 8015954:	2000      	movs	r0, #0
 8015956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801595a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015a40 <_strtol_l.constprop.0+0x100>
 801595e:	460d      	mov	r5, r1
 8015960:	462e      	mov	r6, r5
 8015962:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015966:	f814 700c 	ldrb.w	r7, [r4, ip]
 801596a:	f017 0708 	ands.w	r7, r7, #8
 801596e:	d1f7      	bne.n	8015960 <_strtol_l.constprop.0+0x20>
 8015970:	2c2d      	cmp	r4, #45	; 0x2d
 8015972:	d132      	bne.n	80159da <_strtol_l.constprop.0+0x9a>
 8015974:	782c      	ldrb	r4, [r5, #0]
 8015976:	2701      	movs	r7, #1
 8015978:	1cb5      	adds	r5, r6, #2
 801597a:	2b00      	cmp	r3, #0
 801597c:	d05b      	beq.n	8015a36 <_strtol_l.constprop.0+0xf6>
 801597e:	2b10      	cmp	r3, #16
 8015980:	d109      	bne.n	8015996 <_strtol_l.constprop.0+0x56>
 8015982:	2c30      	cmp	r4, #48	; 0x30
 8015984:	d107      	bne.n	8015996 <_strtol_l.constprop.0+0x56>
 8015986:	782c      	ldrb	r4, [r5, #0]
 8015988:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801598c:	2c58      	cmp	r4, #88	; 0x58
 801598e:	d14d      	bne.n	8015a2c <_strtol_l.constprop.0+0xec>
 8015990:	786c      	ldrb	r4, [r5, #1]
 8015992:	2310      	movs	r3, #16
 8015994:	3502      	adds	r5, #2
 8015996:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801599a:	f108 38ff 	add.w	r8, r8, #4294967295
 801599e:	f04f 0c00 	mov.w	ip, #0
 80159a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80159a6:	4666      	mov	r6, ip
 80159a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80159ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80159b0:	f1be 0f09 	cmp.w	lr, #9
 80159b4:	d816      	bhi.n	80159e4 <_strtol_l.constprop.0+0xa4>
 80159b6:	4674      	mov	r4, lr
 80159b8:	42a3      	cmp	r3, r4
 80159ba:	dd24      	ble.n	8015a06 <_strtol_l.constprop.0+0xc6>
 80159bc:	f1bc 0f00 	cmp.w	ip, #0
 80159c0:	db1e      	blt.n	8015a00 <_strtol_l.constprop.0+0xc0>
 80159c2:	45b1      	cmp	r9, r6
 80159c4:	d31c      	bcc.n	8015a00 <_strtol_l.constprop.0+0xc0>
 80159c6:	d101      	bne.n	80159cc <_strtol_l.constprop.0+0x8c>
 80159c8:	45a2      	cmp	sl, r4
 80159ca:	db19      	blt.n	8015a00 <_strtol_l.constprop.0+0xc0>
 80159cc:	fb06 4603 	mla	r6, r6, r3, r4
 80159d0:	f04f 0c01 	mov.w	ip, #1
 80159d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80159d8:	e7e8      	b.n	80159ac <_strtol_l.constprop.0+0x6c>
 80159da:	2c2b      	cmp	r4, #43	; 0x2b
 80159dc:	bf04      	itt	eq
 80159de:	782c      	ldrbeq	r4, [r5, #0]
 80159e0:	1cb5      	addeq	r5, r6, #2
 80159e2:	e7ca      	b.n	801597a <_strtol_l.constprop.0+0x3a>
 80159e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80159e8:	f1be 0f19 	cmp.w	lr, #25
 80159ec:	d801      	bhi.n	80159f2 <_strtol_l.constprop.0+0xb2>
 80159ee:	3c37      	subs	r4, #55	; 0x37
 80159f0:	e7e2      	b.n	80159b8 <_strtol_l.constprop.0+0x78>
 80159f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80159f6:	f1be 0f19 	cmp.w	lr, #25
 80159fa:	d804      	bhi.n	8015a06 <_strtol_l.constprop.0+0xc6>
 80159fc:	3c57      	subs	r4, #87	; 0x57
 80159fe:	e7db      	b.n	80159b8 <_strtol_l.constprop.0+0x78>
 8015a00:	f04f 3cff 	mov.w	ip, #4294967295
 8015a04:	e7e6      	b.n	80159d4 <_strtol_l.constprop.0+0x94>
 8015a06:	f1bc 0f00 	cmp.w	ip, #0
 8015a0a:	da05      	bge.n	8015a18 <_strtol_l.constprop.0+0xd8>
 8015a0c:	2322      	movs	r3, #34	; 0x22
 8015a0e:	6003      	str	r3, [r0, #0]
 8015a10:	4646      	mov	r6, r8
 8015a12:	b942      	cbnz	r2, 8015a26 <_strtol_l.constprop.0+0xe6>
 8015a14:	4630      	mov	r0, r6
 8015a16:	e79e      	b.n	8015956 <_strtol_l.constprop.0+0x16>
 8015a18:	b107      	cbz	r7, 8015a1c <_strtol_l.constprop.0+0xdc>
 8015a1a:	4276      	negs	r6, r6
 8015a1c:	2a00      	cmp	r2, #0
 8015a1e:	d0f9      	beq.n	8015a14 <_strtol_l.constprop.0+0xd4>
 8015a20:	f1bc 0f00 	cmp.w	ip, #0
 8015a24:	d000      	beq.n	8015a28 <_strtol_l.constprop.0+0xe8>
 8015a26:	1e69      	subs	r1, r5, #1
 8015a28:	6011      	str	r1, [r2, #0]
 8015a2a:	e7f3      	b.n	8015a14 <_strtol_l.constprop.0+0xd4>
 8015a2c:	2430      	movs	r4, #48	; 0x30
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d1b1      	bne.n	8015996 <_strtol_l.constprop.0+0x56>
 8015a32:	2308      	movs	r3, #8
 8015a34:	e7af      	b.n	8015996 <_strtol_l.constprop.0+0x56>
 8015a36:	2c30      	cmp	r4, #48	; 0x30
 8015a38:	d0a5      	beq.n	8015986 <_strtol_l.constprop.0+0x46>
 8015a3a:	230a      	movs	r3, #10
 8015a3c:	e7ab      	b.n	8015996 <_strtol_l.constprop.0+0x56>
 8015a3e:	bf00      	nop
 8015a40:	0801df11 	.word	0x0801df11

08015a44 <_strtol_r>:
 8015a44:	f7ff bf7c 	b.w	8015940 <_strtol_l.constprop.0>

08015a48 <__swbuf_r>:
 8015a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a4a:	460e      	mov	r6, r1
 8015a4c:	4614      	mov	r4, r2
 8015a4e:	4605      	mov	r5, r0
 8015a50:	b118      	cbz	r0, 8015a5a <__swbuf_r+0x12>
 8015a52:	6983      	ldr	r3, [r0, #24]
 8015a54:	b90b      	cbnz	r3, 8015a5a <__swbuf_r+0x12>
 8015a56:	f001 f84b 	bl	8016af0 <__sinit>
 8015a5a:	4b21      	ldr	r3, [pc, #132]	; (8015ae0 <__swbuf_r+0x98>)
 8015a5c:	429c      	cmp	r4, r3
 8015a5e:	d12b      	bne.n	8015ab8 <__swbuf_r+0x70>
 8015a60:	686c      	ldr	r4, [r5, #4]
 8015a62:	69a3      	ldr	r3, [r4, #24]
 8015a64:	60a3      	str	r3, [r4, #8]
 8015a66:	89a3      	ldrh	r3, [r4, #12]
 8015a68:	071a      	lsls	r2, r3, #28
 8015a6a:	d52f      	bpl.n	8015acc <__swbuf_r+0x84>
 8015a6c:	6923      	ldr	r3, [r4, #16]
 8015a6e:	b36b      	cbz	r3, 8015acc <__swbuf_r+0x84>
 8015a70:	6923      	ldr	r3, [r4, #16]
 8015a72:	6820      	ldr	r0, [r4, #0]
 8015a74:	1ac0      	subs	r0, r0, r3
 8015a76:	6963      	ldr	r3, [r4, #20]
 8015a78:	b2f6      	uxtb	r6, r6
 8015a7a:	4283      	cmp	r3, r0
 8015a7c:	4637      	mov	r7, r6
 8015a7e:	dc04      	bgt.n	8015a8a <__swbuf_r+0x42>
 8015a80:	4621      	mov	r1, r4
 8015a82:	4628      	mov	r0, r5
 8015a84:	f000 ffa0 	bl	80169c8 <_fflush_r>
 8015a88:	bb30      	cbnz	r0, 8015ad8 <__swbuf_r+0x90>
 8015a8a:	68a3      	ldr	r3, [r4, #8]
 8015a8c:	3b01      	subs	r3, #1
 8015a8e:	60a3      	str	r3, [r4, #8]
 8015a90:	6823      	ldr	r3, [r4, #0]
 8015a92:	1c5a      	adds	r2, r3, #1
 8015a94:	6022      	str	r2, [r4, #0]
 8015a96:	701e      	strb	r6, [r3, #0]
 8015a98:	6963      	ldr	r3, [r4, #20]
 8015a9a:	3001      	adds	r0, #1
 8015a9c:	4283      	cmp	r3, r0
 8015a9e:	d004      	beq.n	8015aaa <__swbuf_r+0x62>
 8015aa0:	89a3      	ldrh	r3, [r4, #12]
 8015aa2:	07db      	lsls	r3, r3, #31
 8015aa4:	d506      	bpl.n	8015ab4 <__swbuf_r+0x6c>
 8015aa6:	2e0a      	cmp	r6, #10
 8015aa8:	d104      	bne.n	8015ab4 <__swbuf_r+0x6c>
 8015aaa:	4621      	mov	r1, r4
 8015aac:	4628      	mov	r0, r5
 8015aae:	f000 ff8b 	bl	80169c8 <_fflush_r>
 8015ab2:	b988      	cbnz	r0, 8015ad8 <__swbuf_r+0x90>
 8015ab4:	4638      	mov	r0, r7
 8015ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ab8:	4b0a      	ldr	r3, [pc, #40]	; (8015ae4 <__swbuf_r+0x9c>)
 8015aba:	429c      	cmp	r4, r3
 8015abc:	d101      	bne.n	8015ac2 <__swbuf_r+0x7a>
 8015abe:	68ac      	ldr	r4, [r5, #8]
 8015ac0:	e7cf      	b.n	8015a62 <__swbuf_r+0x1a>
 8015ac2:	4b09      	ldr	r3, [pc, #36]	; (8015ae8 <__swbuf_r+0xa0>)
 8015ac4:	429c      	cmp	r4, r3
 8015ac6:	bf08      	it	eq
 8015ac8:	68ec      	ldreq	r4, [r5, #12]
 8015aca:	e7ca      	b.n	8015a62 <__swbuf_r+0x1a>
 8015acc:	4621      	mov	r1, r4
 8015ace:	4628      	mov	r0, r5
 8015ad0:	f000 f80c 	bl	8015aec <__swsetup_r>
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d0cb      	beq.n	8015a70 <__swbuf_r+0x28>
 8015ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8015adc:	e7ea      	b.n	8015ab4 <__swbuf_r+0x6c>
 8015ade:	bf00      	nop
 8015ae0:	0801e0c4 	.word	0x0801e0c4
 8015ae4:	0801e0e4 	.word	0x0801e0e4
 8015ae8:	0801e0a4 	.word	0x0801e0a4

08015aec <__swsetup_r>:
 8015aec:	4b32      	ldr	r3, [pc, #200]	; (8015bb8 <__swsetup_r+0xcc>)
 8015aee:	b570      	push	{r4, r5, r6, lr}
 8015af0:	681d      	ldr	r5, [r3, #0]
 8015af2:	4606      	mov	r6, r0
 8015af4:	460c      	mov	r4, r1
 8015af6:	b125      	cbz	r5, 8015b02 <__swsetup_r+0x16>
 8015af8:	69ab      	ldr	r3, [r5, #24]
 8015afa:	b913      	cbnz	r3, 8015b02 <__swsetup_r+0x16>
 8015afc:	4628      	mov	r0, r5
 8015afe:	f000 fff7 	bl	8016af0 <__sinit>
 8015b02:	4b2e      	ldr	r3, [pc, #184]	; (8015bbc <__swsetup_r+0xd0>)
 8015b04:	429c      	cmp	r4, r3
 8015b06:	d10f      	bne.n	8015b28 <__swsetup_r+0x3c>
 8015b08:	686c      	ldr	r4, [r5, #4]
 8015b0a:	89a3      	ldrh	r3, [r4, #12]
 8015b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b10:	0719      	lsls	r1, r3, #28
 8015b12:	d42c      	bmi.n	8015b6e <__swsetup_r+0x82>
 8015b14:	06dd      	lsls	r5, r3, #27
 8015b16:	d411      	bmi.n	8015b3c <__swsetup_r+0x50>
 8015b18:	2309      	movs	r3, #9
 8015b1a:	6033      	str	r3, [r6, #0]
 8015b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015b20:	81a3      	strh	r3, [r4, #12]
 8015b22:	f04f 30ff 	mov.w	r0, #4294967295
 8015b26:	e03e      	b.n	8015ba6 <__swsetup_r+0xba>
 8015b28:	4b25      	ldr	r3, [pc, #148]	; (8015bc0 <__swsetup_r+0xd4>)
 8015b2a:	429c      	cmp	r4, r3
 8015b2c:	d101      	bne.n	8015b32 <__swsetup_r+0x46>
 8015b2e:	68ac      	ldr	r4, [r5, #8]
 8015b30:	e7eb      	b.n	8015b0a <__swsetup_r+0x1e>
 8015b32:	4b24      	ldr	r3, [pc, #144]	; (8015bc4 <__swsetup_r+0xd8>)
 8015b34:	429c      	cmp	r4, r3
 8015b36:	bf08      	it	eq
 8015b38:	68ec      	ldreq	r4, [r5, #12]
 8015b3a:	e7e6      	b.n	8015b0a <__swsetup_r+0x1e>
 8015b3c:	0758      	lsls	r0, r3, #29
 8015b3e:	d512      	bpl.n	8015b66 <__swsetup_r+0x7a>
 8015b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b42:	b141      	cbz	r1, 8015b56 <__swsetup_r+0x6a>
 8015b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b48:	4299      	cmp	r1, r3
 8015b4a:	d002      	beq.n	8015b52 <__swsetup_r+0x66>
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	f002 f947 	bl	8017de0 <_free_r>
 8015b52:	2300      	movs	r3, #0
 8015b54:	6363      	str	r3, [r4, #52]	; 0x34
 8015b56:	89a3      	ldrh	r3, [r4, #12]
 8015b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b5c:	81a3      	strh	r3, [r4, #12]
 8015b5e:	2300      	movs	r3, #0
 8015b60:	6063      	str	r3, [r4, #4]
 8015b62:	6923      	ldr	r3, [r4, #16]
 8015b64:	6023      	str	r3, [r4, #0]
 8015b66:	89a3      	ldrh	r3, [r4, #12]
 8015b68:	f043 0308 	orr.w	r3, r3, #8
 8015b6c:	81a3      	strh	r3, [r4, #12]
 8015b6e:	6923      	ldr	r3, [r4, #16]
 8015b70:	b94b      	cbnz	r3, 8015b86 <__swsetup_r+0x9a>
 8015b72:	89a3      	ldrh	r3, [r4, #12]
 8015b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b7c:	d003      	beq.n	8015b86 <__swsetup_r+0x9a>
 8015b7e:	4621      	mov	r1, r4
 8015b80:	4630      	mov	r0, r6
 8015b82:	f001 fbed 	bl	8017360 <__smakebuf_r>
 8015b86:	89a0      	ldrh	r0, [r4, #12]
 8015b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b8c:	f010 0301 	ands.w	r3, r0, #1
 8015b90:	d00a      	beq.n	8015ba8 <__swsetup_r+0xbc>
 8015b92:	2300      	movs	r3, #0
 8015b94:	60a3      	str	r3, [r4, #8]
 8015b96:	6963      	ldr	r3, [r4, #20]
 8015b98:	425b      	negs	r3, r3
 8015b9a:	61a3      	str	r3, [r4, #24]
 8015b9c:	6923      	ldr	r3, [r4, #16]
 8015b9e:	b943      	cbnz	r3, 8015bb2 <__swsetup_r+0xc6>
 8015ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ba4:	d1ba      	bne.n	8015b1c <__swsetup_r+0x30>
 8015ba6:	bd70      	pop	{r4, r5, r6, pc}
 8015ba8:	0781      	lsls	r1, r0, #30
 8015baa:	bf58      	it	pl
 8015bac:	6963      	ldrpl	r3, [r4, #20]
 8015bae:	60a3      	str	r3, [r4, #8]
 8015bb0:	e7f4      	b.n	8015b9c <__swsetup_r+0xb0>
 8015bb2:	2000      	movs	r0, #0
 8015bb4:	e7f7      	b.n	8015ba6 <__swsetup_r+0xba>
 8015bb6:	bf00      	nop
 8015bb8:	20000230 	.word	0x20000230
 8015bbc:	0801e0c4 	.word	0x0801e0c4
 8015bc0:	0801e0e4 	.word	0x0801e0e4
 8015bc4:	0801e0a4 	.word	0x0801e0a4

08015bc8 <quorem>:
 8015bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bcc:	6903      	ldr	r3, [r0, #16]
 8015bce:	690c      	ldr	r4, [r1, #16]
 8015bd0:	42a3      	cmp	r3, r4
 8015bd2:	4607      	mov	r7, r0
 8015bd4:	f2c0 8081 	blt.w	8015cda <quorem+0x112>
 8015bd8:	3c01      	subs	r4, #1
 8015bda:	f101 0814 	add.w	r8, r1, #20
 8015bde:	f100 0514 	add.w	r5, r0, #20
 8015be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015be6:	9301      	str	r3, [sp, #4]
 8015be8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015bec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015bf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015bfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8015c00:	d331      	bcc.n	8015c66 <quorem+0x9e>
 8015c02:	f04f 0e00 	mov.w	lr, #0
 8015c06:	4640      	mov	r0, r8
 8015c08:	46ac      	mov	ip, r5
 8015c0a:	46f2      	mov	sl, lr
 8015c0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015c10:	b293      	uxth	r3, r2
 8015c12:	fb06 e303 	mla	r3, r6, r3, lr
 8015c16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8015c20:	f8dc a000 	ldr.w	sl, [ip]
 8015c24:	0c12      	lsrs	r2, r2, #16
 8015c26:	fa13 f38a 	uxtah	r3, r3, sl
 8015c2a:	fb06 e202 	mla	r2, r6, r2, lr
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	9b00      	ldr	r3, [sp, #0]
 8015c32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015c36:	b292      	uxth	r2, r2
 8015c38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015c40:	f8bd 3000 	ldrh.w	r3, [sp]
 8015c44:	4581      	cmp	r9, r0
 8015c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c4a:	f84c 3b04 	str.w	r3, [ip], #4
 8015c4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015c52:	d2db      	bcs.n	8015c0c <quorem+0x44>
 8015c54:	f855 300b 	ldr.w	r3, [r5, fp]
 8015c58:	b92b      	cbnz	r3, 8015c66 <quorem+0x9e>
 8015c5a:	9b01      	ldr	r3, [sp, #4]
 8015c5c:	3b04      	subs	r3, #4
 8015c5e:	429d      	cmp	r5, r3
 8015c60:	461a      	mov	r2, r3
 8015c62:	d32e      	bcc.n	8015cc2 <quorem+0xfa>
 8015c64:	613c      	str	r4, [r7, #16]
 8015c66:	4638      	mov	r0, r7
 8015c68:	f001 feae 	bl	80179c8 <__mcmp>
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	db24      	blt.n	8015cba <quorem+0xf2>
 8015c70:	3601      	adds	r6, #1
 8015c72:	4628      	mov	r0, r5
 8015c74:	f04f 0c00 	mov.w	ip, #0
 8015c78:	f858 2b04 	ldr.w	r2, [r8], #4
 8015c7c:	f8d0 e000 	ldr.w	lr, [r0]
 8015c80:	b293      	uxth	r3, r2
 8015c82:	ebac 0303 	sub.w	r3, ip, r3
 8015c86:	0c12      	lsrs	r2, r2, #16
 8015c88:	fa13 f38e 	uxtah	r3, r3, lr
 8015c8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015c94:	b29b      	uxth	r3, r3
 8015c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c9a:	45c1      	cmp	r9, r8
 8015c9c:	f840 3b04 	str.w	r3, [r0], #4
 8015ca0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015ca4:	d2e8      	bcs.n	8015c78 <quorem+0xb0>
 8015ca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015cae:	b922      	cbnz	r2, 8015cba <quorem+0xf2>
 8015cb0:	3b04      	subs	r3, #4
 8015cb2:	429d      	cmp	r5, r3
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	d30a      	bcc.n	8015cce <quorem+0x106>
 8015cb8:	613c      	str	r4, [r7, #16]
 8015cba:	4630      	mov	r0, r6
 8015cbc:	b003      	add	sp, #12
 8015cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cc2:	6812      	ldr	r2, [r2, #0]
 8015cc4:	3b04      	subs	r3, #4
 8015cc6:	2a00      	cmp	r2, #0
 8015cc8:	d1cc      	bne.n	8015c64 <quorem+0x9c>
 8015cca:	3c01      	subs	r4, #1
 8015ccc:	e7c7      	b.n	8015c5e <quorem+0x96>
 8015cce:	6812      	ldr	r2, [r2, #0]
 8015cd0:	3b04      	subs	r3, #4
 8015cd2:	2a00      	cmp	r2, #0
 8015cd4:	d1f0      	bne.n	8015cb8 <quorem+0xf0>
 8015cd6:	3c01      	subs	r4, #1
 8015cd8:	e7eb      	b.n	8015cb2 <quorem+0xea>
 8015cda:	2000      	movs	r0, #0
 8015cdc:	e7ee      	b.n	8015cbc <quorem+0xf4>
	...

08015ce0 <_dtoa_r>:
 8015ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce4:	ed2d 8b04 	vpush	{d8-d9}
 8015ce8:	ec57 6b10 	vmov	r6, r7, d0
 8015cec:	b093      	sub	sp, #76	; 0x4c
 8015cee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015cf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015cf4:	9106      	str	r1, [sp, #24]
 8015cf6:	ee10 aa10 	vmov	sl, s0
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8015cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8015d00:	46bb      	mov	fp, r7
 8015d02:	b975      	cbnz	r5, 8015d22 <_dtoa_r+0x42>
 8015d04:	2010      	movs	r0, #16
 8015d06:	f001 fb6b 	bl	80173e0 <malloc>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	6260      	str	r0, [r4, #36]	; 0x24
 8015d0e:	b920      	cbnz	r0, 8015d1a <_dtoa_r+0x3a>
 8015d10:	4ba7      	ldr	r3, [pc, #668]	; (8015fb0 <_dtoa_r+0x2d0>)
 8015d12:	21ea      	movs	r1, #234	; 0xea
 8015d14:	48a7      	ldr	r0, [pc, #668]	; (8015fb4 <_dtoa_r+0x2d4>)
 8015d16:	f002 fc89 	bl	801862c <__assert_func>
 8015d1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015d1e:	6005      	str	r5, [r0, #0]
 8015d20:	60c5      	str	r5, [r0, #12]
 8015d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d24:	6819      	ldr	r1, [r3, #0]
 8015d26:	b151      	cbz	r1, 8015d3e <_dtoa_r+0x5e>
 8015d28:	685a      	ldr	r2, [r3, #4]
 8015d2a:	604a      	str	r2, [r1, #4]
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	4093      	lsls	r3, r2
 8015d30:	608b      	str	r3, [r1, #8]
 8015d32:	4620      	mov	r0, r4
 8015d34:	f001 fbbc 	bl	80174b0 <_Bfree>
 8015d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	601a      	str	r2, [r3, #0]
 8015d3e:	1e3b      	subs	r3, r7, #0
 8015d40:	bfaa      	itet	ge
 8015d42:	2300      	movge	r3, #0
 8015d44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015d48:	f8c8 3000 	strge.w	r3, [r8]
 8015d4c:	4b9a      	ldr	r3, [pc, #616]	; (8015fb8 <_dtoa_r+0x2d8>)
 8015d4e:	bfbc      	itt	lt
 8015d50:	2201      	movlt	r2, #1
 8015d52:	f8c8 2000 	strlt.w	r2, [r8]
 8015d56:	ea33 030b 	bics.w	r3, r3, fp
 8015d5a:	d11b      	bne.n	8015d94 <_dtoa_r+0xb4>
 8015d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015d62:	6013      	str	r3, [r2, #0]
 8015d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d68:	4333      	orrs	r3, r6
 8015d6a:	f000 8592 	beq.w	8016892 <_dtoa_r+0xbb2>
 8015d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d70:	b963      	cbnz	r3, 8015d8c <_dtoa_r+0xac>
 8015d72:	4b92      	ldr	r3, [pc, #584]	; (8015fbc <_dtoa_r+0x2dc>)
 8015d74:	e022      	b.n	8015dbc <_dtoa_r+0xdc>
 8015d76:	4b92      	ldr	r3, [pc, #584]	; (8015fc0 <_dtoa_r+0x2e0>)
 8015d78:	9301      	str	r3, [sp, #4]
 8015d7a:	3308      	adds	r3, #8
 8015d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d7e:	6013      	str	r3, [r2, #0]
 8015d80:	9801      	ldr	r0, [sp, #4]
 8015d82:	b013      	add	sp, #76	; 0x4c
 8015d84:	ecbd 8b04 	vpop	{d8-d9}
 8015d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8c:	4b8b      	ldr	r3, [pc, #556]	; (8015fbc <_dtoa_r+0x2dc>)
 8015d8e:	9301      	str	r3, [sp, #4]
 8015d90:	3303      	adds	r3, #3
 8015d92:	e7f3      	b.n	8015d7c <_dtoa_r+0x9c>
 8015d94:	2200      	movs	r2, #0
 8015d96:	2300      	movs	r3, #0
 8015d98:	4650      	mov	r0, sl
 8015d9a:	4659      	mov	r1, fp
 8015d9c:	f7ea fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8015da0:	ec4b ab19 	vmov	d9, sl, fp
 8015da4:	4680      	mov	r8, r0
 8015da6:	b158      	cbz	r0, 8015dc0 <_dtoa_r+0xe0>
 8015da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015daa:	2301      	movs	r3, #1
 8015dac:	6013      	str	r3, [r2, #0]
 8015dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	f000 856b 	beq.w	801688c <_dtoa_r+0xbac>
 8015db6:	4883      	ldr	r0, [pc, #524]	; (8015fc4 <_dtoa_r+0x2e4>)
 8015db8:	6018      	str	r0, [r3, #0]
 8015dba:	1e43      	subs	r3, r0, #1
 8015dbc:	9301      	str	r3, [sp, #4]
 8015dbe:	e7df      	b.n	8015d80 <_dtoa_r+0xa0>
 8015dc0:	ec4b ab10 	vmov	d0, sl, fp
 8015dc4:	aa10      	add	r2, sp, #64	; 0x40
 8015dc6:	a911      	add	r1, sp, #68	; 0x44
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f001 ff1f 	bl	8017c0c <__d2b>
 8015dce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015dd2:	ee08 0a10 	vmov	s16, r0
 8015dd6:	2d00      	cmp	r5, #0
 8015dd8:	f000 8084 	beq.w	8015ee4 <_dtoa_r+0x204>
 8015ddc:	ee19 3a90 	vmov	r3, s19
 8015de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015de4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015de8:	4656      	mov	r6, sl
 8015dea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015dee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015df2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015df6:	4b74      	ldr	r3, [pc, #464]	; (8015fc8 <_dtoa_r+0x2e8>)
 8015df8:	2200      	movs	r2, #0
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	4639      	mov	r1, r7
 8015dfe:	f7ea fa43 	bl	8000288 <__aeabi_dsub>
 8015e02:	a365      	add	r3, pc, #404	; (adr r3, 8015f98 <_dtoa_r+0x2b8>)
 8015e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e08:	f7ea fbf6 	bl	80005f8 <__aeabi_dmul>
 8015e0c:	a364      	add	r3, pc, #400	; (adr r3, 8015fa0 <_dtoa_r+0x2c0>)
 8015e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e12:	f7ea fa3b 	bl	800028c <__adddf3>
 8015e16:	4606      	mov	r6, r0
 8015e18:	4628      	mov	r0, r5
 8015e1a:	460f      	mov	r7, r1
 8015e1c:	f7ea fb82 	bl	8000524 <__aeabi_i2d>
 8015e20:	a361      	add	r3, pc, #388	; (adr r3, 8015fa8 <_dtoa_r+0x2c8>)
 8015e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e26:	f7ea fbe7 	bl	80005f8 <__aeabi_dmul>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	4630      	mov	r0, r6
 8015e30:	4639      	mov	r1, r7
 8015e32:	f7ea fa2b 	bl	800028c <__adddf3>
 8015e36:	4606      	mov	r6, r0
 8015e38:	460f      	mov	r7, r1
 8015e3a:	f7ea fe8d 	bl	8000b58 <__aeabi_d2iz>
 8015e3e:	2200      	movs	r2, #0
 8015e40:	9000      	str	r0, [sp, #0]
 8015e42:	2300      	movs	r3, #0
 8015e44:	4630      	mov	r0, r6
 8015e46:	4639      	mov	r1, r7
 8015e48:	f7ea fe48 	bl	8000adc <__aeabi_dcmplt>
 8015e4c:	b150      	cbz	r0, 8015e64 <_dtoa_r+0x184>
 8015e4e:	9800      	ldr	r0, [sp, #0]
 8015e50:	f7ea fb68 	bl	8000524 <__aeabi_i2d>
 8015e54:	4632      	mov	r2, r6
 8015e56:	463b      	mov	r3, r7
 8015e58:	f7ea fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e5c:	b910      	cbnz	r0, 8015e64 <_dtoa_r+0x184>
 8015e5e:	9b00      	ldr	r3, [sp, #0]
 8015e60:	3b01      	subs	r3, #1
 8015e62:	9300      	str	r3, [sp, #0]
 8015e64:	9b00      	ldr	r3, [sp, #0]
 8015e66:	2b16      	cmp	r3, #22
 8015e68:	d85a      	bhi.n	8015f20 <_dtoa_r+0x240>
 8015e6a:	9a00      	ldr	r2, [sp, #0]
 8015e6c:	4b57      	ldr	r3, [pc, #348]	; (8015fcc <_dtoa_r+0x2ec>)
 8015e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e76:	ec51 0b19 	vmov	r0, r1, d9
 8015e7a:	f7ea fe2f 	bl	8000adc <__aeabi_dcmplt>
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	d050      	beq.n	8015f24 <_dtoa_r+0x244>
 8015e82:	9b00      	ldr	r3, [sp, #0]
 8015e84:	3b01      	subs	r3, #1
 8015e86:	9300      	str	r3, [sp, #0]
 8015e88:	2300      	movs	r3, #0
 8015e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e8e:	1b5d      	subs	r5, r3, r5
 8015e90:	1e6b      	subs	r3, r5, #1
 8015e92:	9305      	str	r3, [sp, #20]
 8015e94:	bf45      	ittet	mi
 8015e96:	f1c5 0301 	rsbmi	r3, r5, #1
 8015e9a:	9304      	strmi	r3, [sp, #16]
 8015e9c:	2300      	movpl	r3, #0
 8015e9e:	2300      	movmi	r3, #0
 8015ea0:	bf4c      	ite	mi
 8015ea2:	9305      	strmi	r3, [sp, #20]
 8015ea4:	9304      	strpl	r3, [sp, #16]
 8015ea6:	9b00      	ldr	r3, [sp, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	db3d      	blt.n	8015f28 <_dtoa_r+0x248>
 8015eac:	9b05      	ldr	r3, [sp, #20]
 8015eae:	9a00      	ldr	r2, [sp, #0]
 8015eb0:	920a      	str	r2, [sp, #40]	; 0x28
 8015eb2:	4413      	add	r3, r2
 8015eb4:	9305      	str	r3, [sp, #20]
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	9307      	str	r3, [sp, #28]
 8015eba:	9b06      	ldr	r3, [sp, #24]
 8015ebc:	2b09      	cmp	r3, #9
 8015ebe:	f200 8089 	bhi.w	8015fd4 <_dtoa_r+0x2f4>
 8015ec2:	2b05      	cmp	r3, #5
 8015ec4:	bfc4      	itt	gt
 8015ec6:	3b04      	subgt	r3, #4
 8015ec8:	9306      	strgt	r3, [sp, #24]
 8015eca:	9b06      	ldr	r3, [sp, #24]
 8015ecc:	f1a3 0302 	sub.w	r3, r3, #2
 8015ed0:	bfcc      	ite	gt
 8015ed2:	2500      	movgt	r5, #0
 8015ed4:	2501      	movle	r5, #1
 8015ed6:	2b03      	cmp	r3, #3
 8015ed8:	f200 8087 	bhi.w	8015fea <_dtoa_r+0x30a>
 8015edc:	e8df f003 	tbb	[pc, r3]
 8015ee0:	59383a2d 	.word	0x59383a2d
 8015ee4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015ee8:	441d      	add	r5, r3
 8015eea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015eee:	2b20      	cmp	r3, #32
 8015ef0:	bfc1      	itttt	gt
 8015ef2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015ef6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015efa:	fa0b f303 	lslgt.w	r3, fp, r3
 8015efe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015f02:	bfda      	itte	le
 8015f04:	f1c3 0320 	rsble	r3, r3, #32
 8015f08:	fa06 f003 	lslle.w	r0, r6, r3
 8015f0c:	4318      	orrgt	r0, r3
 8015f0e:	f7ea faf9 	bl	8000504 <__aeabi_ui2d>
 8015f12:	2301      	movs	r3, #1
 8015f14:	4606      	mov	r6, r0
 8015f16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015f1a:	3d01      	subs	r5, #1
 8015f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8015f1e:	e76a      	b.n	8015df6 <_dtoa_r+0x116>
 8015f20:	2301      	movs	r3, #1
 8015f22:	e7b2      	b.n	8015e8a <_dtoa_r+0x1aa>
 8015f24:	900b      	str	r0, [sp, #44]	; 0x2c
 8015f26:	e7b1      	b.n	8015e8c <_dtoa_r+0x1ac>
 8015f28:	9b04      	ldr	r3, [sp, #16]
 8015f2a:	9a00      	ldr	r2, [sp, #0]
 8015f2c:	1a9b      	subs	r3, r3, r2
 8015f2e:	9304      	str	r3, [sp, #16]
 8015f30:	4253      	negs	r3, r2
 8015f32:	9307      	str	r3, [sp, #28]
 8015f34:	2300      	movs	r3, #0
 8015f36:	930a      	str	r3, [sp, #40]	; 0x28
 8015f38:	e7bf      	b.n	8015eba <_dtoa_r+0x1da>
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	9308      	str	r3, [sp, #32]
 8015f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	dc55      	bgt.n	8015ff0 <_dtoa_r+0x310>
 8015f44:	2301      	movs	r3, #1
 8015f46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8015f4e:	e00c      	b.n	8015f6a <_dtoa_r+0x28a>
 8015f50:	2301      	movs	r3, #1
 8015f52:	e7f3      	b.n	8015f3c <_dtoa_r+0x25c>
 8015f54:	2300      	movs	r3, #0
 8015f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f58:	9308      	str	r3, [sp, #32]
 8015f5a:	9b00      	ldr	r3, [sp, #0]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	9302      	str	r3, [sp, #8]
 8015f60:	3301      	adds	r3, #1
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	9303      	str	r3, [sp, #12]
 8015f66:	bfb8      	it	lt
 8015f68:	2301      	movlt	r3, #1
 8015f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	6042      	str	r2, [r0, #4]
 8015f70:	2204      	movs	r2, #4
 8015f72:	f102 0614 	add.w	r6, r2, #20
 8015f76:	429e      	cmp	r6, r3
 8015f78:	6841      	ldr	r1, [r0, #4]
 8015f7a:	d93d      	bls.n	8015ff8 <_dtoa_r+0x318>
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f001 fa57 	bl	8017430 <_Balloc>
 8015f82:	9001      	str	r0, [sp, #4]
 8015f84:	2800      	cmp	r0, #0
 8015f86:	d13b      	bne.n	8016000 <_dtoa_r+0x320>
 8015f88:	4b11      	ldr	r3, [pc, #68]	; (8015fd0 <_dtoa_r+0x2f0>)
 8015f8a:	4602      	mov	r2, r0
 8015f8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015f90:	e6c0      	b.n	8015d14 <_dtoa_r+0x34>
 8015f92:	2301      	movs	r3, #1
 8015f94:	e7df      	b.n	8015f56 <_dtoa_r+0x276>
 8015f96:	bf00      	nop
 8015f98:	636f4361 	.word	0x636f4361
 8015f9c:	3fd287a7 	.word	0x3fd287a7
 8015fa0:	8b60c8b3 	.word	0x8b60c8b3
 8015fa4:	3fc68a28 	.word	0x3fc68a28
 8015fa8:	509f79fb 	.word	0x509f79fb
 8015fac:	3fd34413 	.word	0x3fd34413
 8015fb0:	0801e01e 	.word	0x0801e01e
 8015fb4:	0801e035 	.word	0x0801e035
 8015fb8:	7ff00000 	.word	0x7ff00000
 8015fbc:	0801e01a 	.word	0x0801e01a
 8015fc0:	0801e011 	.word	0x0801e011
 8015fc4:	0801de91 	.word	0x0801de91
 8015fc8:	3ff80000 	.word	0x3ff80000
 8015fcc:	0801e208 	.word	0x0801e208
 8015fd0:	0801e090 	.word	0x0801e090
 8015fd4:	2501      	movs	r5, #1
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	9306      	str	r3, [sp, #24]
 8015fda:	9508      	str	r5, [sp, #32]
 8015fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8015fe0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	2312      	movs	r3, #18
 8015fe8:	e7b0      	b.n	8015f4c <_dtoa_r+0x26c>
 8015fea:	2301      	movs	r3, #1
 8015fec:	9308      	str	r3, [sp, #32]
 8015fee:	e7f5      	b.n	8015fdc <_dtoa_r+0x2fc>
 8015ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015ff6:	e7b8      	b.n	8015f6a <_dtoa_r+0x28a>
 8015ff8:	3101      	adds	r1, #1
 8015ffa:	6041      	str	r1, [r0, #4]
 8015ffc:	0052      	lsls	r2, r2, #1
 8015ffe:	e7b8      	b.n	8015f72 <_dtoa_r+0x292>
 8016000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016002:	9a01      	ldr	r2, [sp, #4]
 8016004:	601a      	str	r2, [r3, #0]
 8016006:	9b03      	ldr	r3, [sp, #12]
 8016008:	2b0e      	cmp	r3, #14
 801600a:	f200 809d 	bhi.w	8016148 <_dtoa_r+0x468>
 801600e:	2d00      	cmp	r5, #0
 8016010:	f000 809a 	beq.w	8016148 <_dtoa_r+0x468>
 8016014:	9b00      	ldr	r3, [sp, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	dd32      	ble.n	8016080 <_dtoa_r+0x3a0>
 801601a:	4ab7      	ldr	r2, [pc, #732]	; (80162f8 <_dtoa_r+0x618>)
 801601c:	f003 030f 	and.w	r3, r3, #15
 8016020:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016028:	9b00      	ldr	r3, [sp, #0]
 801602a:	05d8      	lsls	r0, r3, #23
 801602c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016030:	d516      	bpl.n	8016060 <_dtoa_r+0x380>
 8016032:	4bb2      	ldr	r3, [pc, #712]	; (80162fc <_dtoa_r+0x61c>)
 8016034:	ec51 0b19 	vmov	r0, r1, d9
 8016038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801603c:	f7ea fc06 	bl	800084c <__aeabi_ddiv>
 8016040:	f007 070f 	and.w	r7, r7, #15
 8016044:	4682      	mov	sl, r0
 8016046:	468b      	mov	fp, r1
 8016048:	2503      	movs	r5, #3
 801604a:	4eac      	ldr	r6, [pc, #688]	; (80162fc <_dtoa_r+0x61c>)
 801604c:	b957      	cbnz	r7, 8016064 <_dtoa_r+0x384>
 801604e:	4642      	mov	r2, r8
 8016050:	464b      	mov	r3, r9
 8016052:	4650      	mov	r0, sl
 8016054:	4659      	mov	r1, fp
 8016056:	f7ea fbf9 	bl	800084c <__aeabi_ddiv>
 801605a:	4682      	mov	sl, r0
 801605c:	468b      	mov	fp, r1
 801605e:	e028      	b.n	80160b2 <_dtoa_r+0x3d2>
 8016060:	2502      	movs	r5, #2
 8016062:	e7f2      	b.n	801604a <_dtoa_r+0x36a>
 8016064:	07f9      	lsls	r1, r7, #31
 8016066:	d508      	bpl.n	801607a <_dtoa_r+0x39a>
 8016068:	4640      	mov	r0, r8
 801606a:	4649      	mov	r1, r9
 801606c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016070:	f7ea fac2 	bl	80005f8 <__aeabi_dmul>
 8016074:	3501      	adds	r5, #1
 8016076:	4680      	mov	r8, r0
 8016078:	4689      	mov	r9, r1
 801607a:	107f      	asrs	r7, r7, #1
 801607c:	3608      	adds	r6, #8
 801607e:	e7e5      	b.n	801604c <_dtoa_r+0x36c>
 8016080:	f000 809b 	beq.w	80161ba <_dtoa_r+0x4da>
 8016084:	9b00      	ldr	r3, [sp, #0]
 8016086:	4f9d      	ldr	r7, [pc, #628]	; (80162fc <_dtoa_r+0x61c>)
 8016088:	425e      	negs	r6, r3
 801608a:	4b9b      	ldr	r3, [pc, #620]	; (80162f8 <_dtoa_r+0x618>)
 801608c:	f006 020f 	and.w	r2, r6, #15
 8016090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016098:	ec51 0b19 	vmov	r0, r1, d9
 801609c:	f7ea faac 	bl	80005f8 <__aeabi_dmul>
 80160a0:	1136      	asrs	r6, r6, #4
 80160a2:	4682      	mov	sl, r0
 80160a4:	468b      	mov	fp, r1
 80160a6:	2300      	movs	r3, #0
 80160a8:	2502      	movs	r5, #2
 80160aa:	2e00      	cmp	r6, #0
 80160ac:	d17a      	bne.n	80161a4 <_dtoa_r+0x4c4>
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1d3      	bne.n	801605a <_dtoa_r+0x37a>
 80160b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	f000 8082 	beq.w	80161be <_dtoa_r+0x4de>
 80160ba:	4b91      	ldr	r3, [pc, #580]	; (8016300 <_dtoa_r+0x620>)
 80160bc:	2200      	movs	r2, #0
 80160be:	4650      	mov	r0, sl
 80160c0:	4659      	mov	r1, fp
 80160c2:	f7ea fd0b 	bl	8000adc <__aeabi_dcmplt>
 80160c6:	2800      	cmp	r0, #0
 80160c8:	d079      	beq.n	80161be <_dtoa_r+0x4de>
 80160ca:	9b03      	ldr	r3, [sp, #12]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d076      	beq.n	80161be <_dtoa_r+0x4de>
 80160d0:	9b02      	ldr	r3, [sp, #8]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	dd36      	ble.n	8016144 <_dtoa_r+0x464>
 80160d6:	9b00      	ldr	r3, [sp, #0]
 80160d8:	4650      	mov	r0, sl
 80160da:	4659      	mov	r1, fp
 80160dc:	1e5f      	subs	r7, r3, #1
 80160de:	2200      	movs	r2, #0
 80160e0:	4b88      	ldr	r3, [pc, #544]	; (8016304 <_dtoa_r+0x624>)
 80160e2:	f7ea fa89 	bl	80005f8 <__aeabi_dmul>
 80160e6:	9e02      	ldr	r6, [sp, #8]
 80160e8:	4682      	mov	sl, r0
 80160ea:	468b      	mov	fp, r1
 80160ec:	3501      	adds	r5, #1
 80160ee:	4628      	mov	r0, r5
 80160f0:	f7ea fa18 	bl	8000524 <__aeabi_i2d>
 80160f4:	4652      	mov	r2, sl
 80160f6:	465b      	mov	r3, fp
 80160f8:	f7ea fa7e 	bl	80005f8 <__aeabi_dmul>
 80160fc:	4b82      	ldr	r3, [pc, #520]	; (8016308 <_dtoa_r+0x628>)
 80160fe:	2200      	movs	r2, #0
 8016100:	f7ea f8c4 	bl	800028c <__adddf3>
 8016104:	46d0      	mov	r8, sl
 8016106:	46d9      	mov	r9, fp
 8016108:	4682      	mov	sl, r0
 801610a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801610e:	2e00      	cmp	r6, #0
 8016110:	d158      	bne.n	80161c4 <_dtoa_r+0x4e4>
 8016112:	4b7e      	ldr	r3, [pc, #504]	; (801630c <_dtoa_r+0x62c>)
 8016114:	2200      	movs	r2, #0
 8016116:	4640      	mov	r0, r8
 8016118:	4649      	mov	r1, r9
 801611a:	f7ea f8b5 	bl	8000288 <__aeabi_dsub>
 801611e:	4652      	mov	r2, sl
 8016120:	465b      	mov	r3, fp
 8016122:	4680      	mov	r8, r0
 8016124:	4689      	mov	r9, r1
 8016126:	f7ea fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 801612a:	2800      	cmp	r0, #0
 801612c:	f040 8295 	bne.w	801665a <_dtoa_r+0x97a>
 8016130:	4652      	mov	r2, sl
 8016132:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016136:	4640      	mov	r0, r8
 8016138:	4649      	mov	r1, r9
 801613a:	f7ea fccf 	bl	8000adc <__aeabi_dcmplt>
 801613e:	2800      	cmp	r0, #0
 8016140:	f040 8289 	bne.w	8016656 <_dtoa_r+0x976>
 8016144:	ec5b ab19 	vmov	sl, fp, d9
 8016148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801614a:	2b00      	cmp	r3, #0
 801614c:	f2c0 8148 	blt.w	80163e0 <_dtoa_r+0x700>
 8016150:	9a00      	ldr	r2, [sp, #0]
 8016152:	2a0e      	cmp	r2, #14
 8016154:	f300 8144 	bgt.w	80163e0 <_dtoa_r+0x700>
 8016158:	4b67      	ldr	r3, [pc, #412]	; (80162f8 <_dtoa_r+0x618>)
 801615a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801615e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016164:	2b00      	cmp	r3, #0
 8016166:	f280 80d5 	bge.w	8016314 <_dtoa_r+0x634>
 801616a:	9b03      	ldr	r3, [sp, #12]
 801616c:	2b00      	cmp	r3, #0
 801616e:	f300 80d1 	bgt.w	8016314 <_dtoa_r+0x634>
 8016172:	f040 826f 	bne.w	8016654 <_dtoa_r+0x974>
 8016176:	4b65      	ldr	r3, [pc, #404]	; (801630c <_dtoa_r+0x62c>)
 8016178:	2200      	movs	r2, #0
 801617a:	4640      	mov	r0, r8
 801617c:	4649      	mov	r1, r9
 801617e:	f7ea fa3b 	bl	80005f8 <__aeabi_dmul>
 8016182:	4652      	mov	r2, sl
 8016184:	465b      	mov	r3, fp
 8016186:	f7ea fcbd 	bl	8000b04 <__aeabi_dcmpge>
 801618a:	9e03      	ldr	r6, [sp, #12]
 801618c:	4637      	mov	r7, r6
 801618e:	2800      	cmp	r0, #0
 8016190:	f040 8245 	bne.w	801661e <_dtoa_r+0x93e>
 8016194:	9d01      	ldr	r5, [sp, #4]
 8016196:	2331      	movs	r3, #49	; 0x31
 8016198:	f805 3b01 	strb.w	r3, [r5], #1
 801619c:	9b00      	ldr	r3, [sp, #0]
 801619e:	3301      	adds	r3, #1
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	e240      	b.n	8016626 <_dtoa_r+0x946>
 80161a4:	07f2      	lsls	r2, r6, #31
 80161a6:	d505      	bpl.n	80161b4 <_dtoa_r+0x4d4>
 80161a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161ac:	f7ea fa24 	bl	80005f8 <__aeabi_dmul>
 80161b0:	3501      	adds	r5, #1
 80161b2:	2301      	movs	r3, #1
 80161b4:	1076      	asrs	r6, r6, #1
 80161b6:	3708      	adds	r7, #8
 80161b8:	e777      	b.n	80160aa <_dtoa_r+0x3ca>
 80161ba:	2502      	movs	r5, #2
 80161bc:	e779      	b.n	80160b2 <_dtoa_r+0x3d2>
 80161be:	9f00      	ldr	r7, [sp, #0]
 80161c0:	9e03      	ldr	r6, [sp, #12]
 80161c2:	e794      	b.n	80160ee <_dtoa_r+0x40e>
 80161c4:	9901      	ldr	r1, [sp, #4]
 80161c6:	4b4c      	ldr	r3, [pc, #304]	; (80162f8 <_dtoa_r+0x618>)
 80161c8:	4431      	add	r1, r6
 80161ca:	910d      	str	r1, [sp, #52]	; 0x34
 80161cc:	9908      	ldr	r1, [sp, #32]
 80161ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80161d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80161d6:	2900      	cmp	r1, #0
 80161d8:	d043      	beq.n	8016262 <_dtoa_r+0x582>
 80161da:	494d      	ldr	r1, [pc, #308]	; (8016310 <_dtoa_r+0x630>)
 80161dc:	2000      	movs	r0, #0
 80161de:	f7ea fb35 	bl	800084c <__aeabi_ddiv>
 80161e2:	4652      	mov	r2, sl
 80161e4:	465b      	mov	r3, fp
 80161e6:	f7ea f84f 	bl	8000288 <__aeabi_dsub>
 80161ea:	9d01      	ldr	r5, [sp, #4]
 80161ec:	4682      	mov	sl, r0
 80161ee:	468b      	mov	fp, r1
 80161f0:	4649      	mov	r1, r9
 80161f2:	4640      	mov	r0, r8
 80161f4:	f7ea fcb0 	bl	8000b58 <__aeabi_d2iz>
 80161f8:	4606      	mov	r6, r0
 80161fa:	f7ea f993 	bl	8000524 <__aeabi_i2d>
 80161fe:	4602      	mov	r2, r0
 8016200:	460b      	mov	r3, r1
 8016202:	4640      	mov	r0, r8
 8016204:	4649      	mov	r1, r9
 8016206:	f7ea f83f 	bl	8000288 <__aeabi_dsub>
 801620a:	3630      	adds	r6, #48	; 0x30
 801620c:	f805 6b01 	strb.w	r6, [r5], #1
 8016210:	4652      	mov	r2, sl
 8016212:	465b      	mov	r3, fp
 8016214:	4680      	mov	r8, r0
 8016216:	4689      	mov	r9, r1
 8016218:	f7ea fc60 	bl	8000adc <__aeabi_dcmplt>
 801621c:	2800      	cmp	r0, #0
 801621e:	d163      	bne.n	80162e8 <_dtoa_r+0x608>
 8016220:	4642      	mov	r2, r8
 8016222:	464b      	mov	r3, r9
 8016224:	4936      	ldr	r1, [pc, #216]	; (8016300 <_dtoa_r+0x620>)
 8016226:	2000      	movs	r0, #0
 8016228:	f7ea f82e 	bl	8000288 <__aeabi_dsub>
 801622c:	4652      	mov	r2, sl
 801622e:	465b      	mov	r3, fp
 8016230:	f7ea fc54 	bl	8000adc <__aeabi_dcmplt>
 8016234:	2800      	cmp	r0, #0
 8016236:	f040 80b5 	bne.w	80163a4 <_dtoa_r+0x6c4>
 801623a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801623c:	429d      	cmp	r5, r3
 801623e:	d081      	beq.n	8016144 <_dtoa_r+0x464>
 8016240:	4b30      	ldr	r3, [pc, #192]	; (8016304 <_dtoa_r+0x624>)
 8016242:	2200      	movs	r2, #0
 8016244:	4650      	mov	r0, sl
 8016246:	4659      	mov	r1, fp
 8016248:	f7ea f9d6 	bl	80005f8 <__aeabi_dmul>
 801624c:	4b2d      	ldr	r3, [pc, #180]	; (8016304 <_dtoa_r+0x624>)
 801624e:	4682      	mov	sl, r0
 8016250:	468b      	mov	fp, r1
 8016252:	4640      	mov	r0, r8
 8016254:	4649      	mov	r1, r9
 8016256:	2200      	movs	r2, #0
 8016258:	f7ea f9ce 	bl	80005f8 <__aeabi_dmul>
 801625c:	4680      	mov	r8, r0
 801625e:	4689      	mov	r9, r1
 8016260:	e7c6      	b.n	80161f0 <_dtoa_r+0x510>
 8016262:	4650      	mov	r0, sl
 8016264:	4659      	mov	r1, fp
 8016266:	f7ea f9c7 	bl	80005f8 <__aeabi_dmul>
 801626a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801626c:	9d01      	ldr	r5, [sp, #4]
 801626e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016270:	4682      	mov	sl, r0
 8016272:	468b      	mov	fp, r1
 8016274:	4649      	mov	r1, r9
 8016276:	4640      	mov	r0, r8
 8016278:	f7ea fc6e 	bl	8000b58 <__aeabi_d2iz>
 801627c:	4606      	mov	r6, r0
 801627e:	f7ea f951 	bl	8000524 <__aeabi_i2d>
 8016282:	3630      	adds	r6, #48	; 0x30
 8016284:	4602      	mov	r2, r0
 8016286:	460b      	mov	r3, r1
 8016288:	4640      	mov	r0, r8
 801628a:	4649      	mov	r1, r9
 801628c:	f7e9 fffc 	bl	8000288 <__aeabi_dsub>
 8016290:	f805 6b01 	strb.w	r6, [r5], #1
 8016294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016296:	429d      	cmp	r5, r3
 8016298:	4680      	mov	r8, r0
 801629a:	4689      	mov	r9, r1
 801629c:	f04f 0200 	mov.w	r2, #0
 80162a0:	d124      	bne.n	80162ec <_dtoa_r+0x60c>
 80162a2:	4b1b      	ldr	r3, [pc, #108]	; (8016310 <_dtoa_r+0x630>)
 80162a4:	4650      	mov	r0, sl
 80162a6:	4659      	mov	r1, fp
 80162a8:	f7e9 fff0 	bl	800028c <__adddf3>
 80162ac:	4602      	mov	r2, r0
 80162ae:	460b      	mov	r3, r1
 80162b0:	4640      	mov	r0, r8
 80162b2:	4649      	mov	r1, r9
 80162b4:	f7ea fc30 	bl	8000b18 <__aeabi_dcmpgt>
 80162b8:	2800      	cmp	r0, #0
 80162ba:	d173      	bne.n	80163a4 <_dtoa_r+0x6c4>
 80162bc:	4652      	mov	r2, sl
 80162be:	465b      	mov	r3, fp
 80162c0:	4913      	ldr	r1, [pc, #76]	; (8016310 <_dtoa_r+0x630>)
 80162c2:	2000      	movs	r0, #0
 80162c4:	f7e9 ffe0 	bl	8000288 <__aeabi_dsub>
 80162c8:	4602      	mov	r2, r0
 80162ca:	460b      	mov	r3, r1
 80162cc:	4640      	mov	r0, r8
 80162ce:	4649      	mov	r1, r9
 80162d0:	f7ea fc04 	bl	8000adc <__aeabi_dcmplt>
 80162d4:	2800      	cmp	r0, #0
 80162d6:	f43f af35 	beq.w	8016144 <_dtoa_r+0x464>
 80162da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80162dc:	1e6b      	subs	r3, r5, #1
 80162de:	930f      	str	r3, [sp, #60]	; 0x3c
 80162e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80162e4:	2b30      	cmp	r3, #48	; 0x30
 80162e6:	d0f8      	beq.n	80162da <_dtoa_r+0x5fa>
 80162e8:	9700      	str	r7, [sp, #0]
 80162ea:	e049      	b.n	8016380 <_dtoa_r+0x6a0>
 80162ec:	4b05      	ldr	r3, [pc, #20]	; (8016304 <_dtoa_r+0x624>)
 80162ee:	f7ea f983 	bl	80005f8 <__aeabi_dmul>
 80162f2:	4680      	mov	r8, r0
 80162f4:	4689      	mov	r9, r1
 80162f6:	e7bd      	b.n	8016274 <_dtoa_r+0x594>
 80162f8:	0801e208 	.word	0x0801e208
 80162fc:	0801e1e0 	.word	0x0801e1e0
 8016300:	3ff00000 	.word	0x3ff00000
 8016304:	40240000 	.word	0x40240000
 8016308:	401c0000 	.word	0x401c0000
 801630c:	40140000 	.word	0x40140000
 8016310:	3fe00000 	.word	0x3fe00000
 8016314:	9d01      	ldr	r5, [sp, #4]
 8016316:	4656      	mov	r6, sl
 8016318:	465f      	mov	r7, fp
 801631a:	4642      	mov	r2, r8
 801631c:	464b      	mov	r3, r9
 801631e:	4630      	mov	r0, r6
 8016320:	4639      	mov	r1, r7
 8016322:	f7ea fa93 	bl	800084c <__aeabi_ddiv>
 8016326:	f7ea fc17 	bl	8000b58 <__aeabi_d2iz>
 801632a:	4682      	mov	sl, r0
 801632c:	f7ea f8fa 	bl	8000524 <__aeabi_i2d>
 8016330:	4642      	mov	r2, r8
 8016332:	464b      	mov	r3, r9
 8016334:	f7ea f960 	bl	80005f8 <__aeabi_dmul>
 8016338:	4602      	mov	r2, r0
 801633a:	460b      	mov	r3, r1
 801633c:	4630      	mov	r0, r6
 801633e:	4639      	mov	r1, r7
 8016340:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016344:	f7e9 ffa0 	bl	8000288 <__aeabi_dsub>
 8016348:	f805 6b01 	strb.w	r6, [r5], #1
 801634c:	9e01      	ldr	r6, [sp, #4]
 801634e:	9f03      	ldr	r7, [sp, #12]
 8016350:	1bae      	subs	r6, r5, r6
 8016352:	42b7      	cmp	r7, r6
 8016354:	4602      	mov	r2, r0
 8016356:	460b      	mov	r3, r1
 8016358:	d135      	bne.n	80163c6 <_dtoa_r+0x6e6>
 801635a:	f7e9 ff97 	bl	800028c <__adddf3>
 801635e:	4642      	mov	r2, r8
 8016360:	464b      	mov	r3, r9
 8016362:	4606      	mov	r6, r0
 8016364:	460f      	mov	r7, r1
 8016366:	f7ea fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 801636a:	b9d0      	cbnz	r0, 80163a2 <_dtoa_r+0x6c2>
 801636c:	4642      	mov	r2, r8
 801636e:	464b      	mov	r3, r9
 8016370:	4630      	mov	r0, r6
 8016372:	4639      	mov	r1, r7
 8016374:	f7ea fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 8016378:	b110      	cbz	r0, 8016380 <_dtoa_r+0x6a0>
 801637a:	f01a 0f01 	tst.w	sl, #1
 801637e:	d110      	bne.n	80163a2 <_dtoa_r+0x6c2>
 8016380:	4620      	mov	r0, r4
 8016382:	ee18 1a10 	vmov	r1, s16
 8016386:	f001 f893 	bl	80174b0 <_Bfree>
 801638a:	2300      	movs	r3, #0
 801638c:	9800      	ldr	r0, [sp, #0]
 801638e:	702b      	strb	r3, [r5, #0]
 8016390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016392:	3001      	adds	r0, #1
 8016394:	6018      	str	r0, [r3, #0]
 8016396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016398:	2b00      	cmp	r3, #0
 801639a:	f43f acf1 	beq.w	8015d80 <_dtoa_r+0xa0>
 801639e:	601d      	str	r5, [r3, #0]
 80163a0:	e4ee      	b.n	8015d80 <_dtoa_r+0xa0>
 80163a2:	9f00      	ldr	r7, [sp, #0]
 80163a4:	462b      	mov	r3, r5
 80163a6:	461d      	mov	r5, r3
 80163a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80163ac:	2a39      	cmp	r2, #57	; 0x39
 80163ae:	d106      	bne.n	80163be <_dtoa_r+0x6de>
 80163b0:	9a01      	ldr	r2, [sp, #4]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d1f7      	bne.n	80163a6 <_dtoa_r+0x6c6>
 80163b6:	9901      	ldr	r1, [sp, #4]
 80163b8:	2230      	movs	r2, #48	; 0x30
 80163ba:	3701      	adds	r7, #1
 80163bc:	700a      	strb	r2, [r1, #0]
 80163be:	781a      	ldrb	r2, [r3, #0]
 80163c0:	3201      	adds	r2, #1
 80163c2:	701a      	strb	r2, [r3, #0]
 80163c4:	e790      	b.n	80162e8 <_dtoa_r+0x608>
 80163c6:	4ba6      	ldr	r3, [pc, #664]	; (8016660 <_dtoa_r+0x980>)
 80163c8:	2200      	movs	r2, #0
 80163ca:	f7ea f915 	bl	80005f8 <__aeabi_dmul>
 80163ce:	2200      	movs	r2, #0
 80163d0:	2300      	movs	r3, #0
 80163d2:	4606      	mov	r6, r0
 80163d4:	460f      	mov	r7, r1
 80163d6:	f7ea fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80163da:	2800      	cmp	r0, #0
 80163dc:	d09d      	beq.n	801631a <_dtoa_r+0x63a>
 80163de:	e7cf      	b.n	8016380 <_dtoa_r+0x6a0>
 80163e0:	9a08      	ldr	r2, [sp, #32]
 80163e2:	2a00      	cmp	r2, #0
 80163e4:	f000 80d7 	beq.w	8016596 <_dtoa_r+0x8b6>
 80163e8:	9a06      	ldr	r2, [sp, #24]
 80163ea:	2a01      	cmp	r2, #1
 80163ec:	f300 80ba 	bgt.w	8016564 <_dtoa_r+0x884>
 80163f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163f2:	2a00      	cmp	r2, #0
 80163f4:	f000 80b2 	beq.w	801655c <_dtoa_r+0x87c>
 80163f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80163fc:	9e07      	ldr	r6, [sp, #28]
 80163fe:	9d04      	ldr	r5, [sp, #16]
 8016400:	9a04      	ldr	r2, [sp, #16]
 8016402:	441a      	add	r2, r3
 8016404:	9204      	str	r2, [sp, #16]
 8016406:	9a05      	ldr	r2, [sp, #20]
 8016408:	2101      	movs	r1, #1
 801640a:	441a      	add	r2, r3
 801640c:	4620      	mov	r0, r4
 801640e:	9205      	str	r2, [sp, #20]
 8016410:	f001 f950 	bl	80176b4 <__i2b>
 8016414:	4607      	mov	r7, r0
 8016416:	2d00      	cmp	r5, #0
 8016418:	dd0c      	ble.n	8016434 <_dtoa_r+0x754>
 801641a:	9b05      	ldr	r3, [sp, #20]
 801641c:	2b00      	cmp	r3, #0
 801641e:	dd09      	ble.n	8016434 <_dtoa_r+0x754>
 8016420:	42ab      	cmp	r3, r5
 8016422:	9a04      	ldr	r2, [sp, #16]
 8016424:	bfa8      	it	ge
 8016426:	462b      	movge	r3, r5
 8016428:	1ad2      	subs	r2, r2, r3
 801642a:	9204      	str	r2, [sp, #16]
 801642c:	9a05      	ldr	r2, [sp, #20]
 801642e:	1aed      	subs	r5, r5, r3
 8016430:	1ad3      	subs	r3, r2, r3
 8016432:	9305      	str	r3, [sp, #20]
 8016434:	9b07      	ldr	r3, [sp, #28]
 8016436:	b31b      	cbz	r3, 8016480 <_dtoa_r+0x7a0>
 8016438:	9b08      	ldr	r3, [sp, #32]
 801643a:	2b00      	cmp	r3, #0
 801643c:	f000 80af 	beq.w	801659e <_dtoa_r+0x8be>
 8016440:	2e00      	cmp	r6, #0
 8016442:	dd13      	ble.n	801646c <_dtoa_r+0x78c>
 8016444:	4639      	mov	r1, r7
 8016446:	4632      	mov	r2, r6
 8016448:	4620      	mov	r0, r4
 801644a:	f001 f9f3 	bl	8017834 <__pow5mult>
 801644e:	ee18 2a10 	vmov	r2, s16
 8016452:	4601      	mov	r1, r0
 8016454:	4607      	mov	r7, r0
 8016456:	4620      	mov	r0, r4
 8016458:	f001 f942 	bl	80176e0 <__multiply>
 801645c:	ee18 1a10 	vmov	r1, s16
 8016460:	4680      	mov	r8, r0
 8016462:	4620      	mov	r0, r4
 8016464:	f001 f824 	bl	80174b0 <_Bfree>
 8016468:	ee08 8a10 	vmov	s16, r8
 801646c:	9b07      	ldr	r3, [sp, #28]
 801646e:	1b9a      	subs	r2, r3, r6
 8016470:	d006      	beq.n	8016480 <_dtoa_r+0x7a0>
 8016472:	ee18 1a10 	vmov	r1, s16
 8016476:	4620      	mov	r0, r4
 8016478:	f001 f9dc 	bl	8017834 <__pow5mult>
 801647c:	ee08 0a10 	vmov	s16, r0
 8016480:	2101      	movs	r1, #1
 8016482:	4620      	mov	r0, r4
 8016484:	f001 f916 	bl	80176b4 <__i2b>
 8016488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801648a:	2b00      	cmp	r3, #0
 801648c:	4606      	mov	r6, r0
 801648e:	f340 8088 	ble.w	80165a2 <_dtoa_r+0x8c2>
 8016492:	461a      	mov	r2, r3
 8016494:	4601      	mov	r1, r0
 8016496:	4620      	mov	r0, r4
 8016498:	f001 f9cc 	bl	8017834 <__pow5mult>
 801649c:	9b06      	ldr	r3, [sp, #24]
 801649e:	2b01      	cmp	r3, #1
 80164a0:	4606      	mov	r6, r0
 80164a2:	f340 8081 	ble.w	80165a8 <_dtoa_r+0x8c8>
 80164a6:	f04f 0800 	mov.w	r8, #0
 80164aa:	6933      	ldr	r3, [r6, #16]
 80164ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80164b0:	6918      	ldr	r0, [r3, #16]
 80164b2:	f001 f8af 	bl	8017614 <__hi0bits>
 80164b6:	f1c0 0020 	rsb	r0, r0, #32
 80164ba:	9b05      	ldr	r3, [sp, #20]
 80164bc:	4418      	add	r0, r3
 80164be:	f010 001f 	ands.w	r0, r0, #31
 80164c2:	f000 8092 	beq.w	80165ea <_dtoa_r+0x90a>
 80164c6:	f1c0 0320 	rsb	r3, r0, #32
 80164ca:	2b04      	cmp	r3, #4
 80164cc:	f340 808a 	ble.w	80165e4 <_dtoa_r+0x904>
 80164d0:	f1c0 001c 	rsb	r0, r0, #28
 80164d4:	9b04      	ldr	r3, [sp, #16]
 80164d6:	4403      	add	r3, r0
 80164d8:	9304      	str	r3, [sp, #16]
 80164da:	9b05      	ldr	r3, [sp, #20]
 80164dc:	4403      	add	r3, r0
 80164de:	4405      	add	r5, r0
 80164e0:	9305      	str	r3, [sp, #20]
 80164e2:	9b04      	ldr	r3, [sp, #16]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	dd07      	ble.n	80164f8 <_dtoa_r+0x818>
 80164e8:	ee18 1a10 	vmov	r1, s16
 80164ec:	461a      	mov	r2, r3
 80164ee:	4620      	mov	r0, r4
 80164f0:	f001 f9fa 	bl	80178e8 <__lshift>
 80164f4:	ee08 0a10 	vmov	s16, r0
 80164f8:	9b05      	ldr	r3, [sp, #20]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	dd05      	ble.n	801650a <_dtoa_r+0x82a>
 80164fe:	4631      	mov	r1, r6
 8016500:	461a      	mov	r2, r3
 8016502:	4620      	mov	r0, r4
 8016504:	f001 f9f0 	bl	80178e8 <__lshift>
 8016508:	4606      	mov	r6, r0
 801650a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801650c:	2b00      	cmp	r3, #0
 801650e:	d06e      	beq.n	80165ee <_dtoa_r+0x90e>
 8016510:	ee18 0a10 	vmov	r0, s16
 8016514:	4631      	mov	r1, r6
 8016516:	f001 fa57 	bl	80179c8 <__mcmp>
 801651a:	2800      	cmp	r0, #0
 801651c:	da67      	bge.n	80165ee <_dtoa_r+0x90e>
 801651e:	9b00      	ldr	r3, [sp, #0]
 8016520:	3b01      	subs	r3, #1
 8016522:	ee18 1a10 	vmov	r1, s16
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	220a      	movs	r2, #10
 801652a:	2300      	movs	r3, #0
 801652c:	4620      	mov	r0, r4
 801652e:	f000 ffe1 	bl	80174f4 <__multadd>
 8016532:	9b08      	ldr	r3, [sp, #32]
 8016534:	ee08 0a10 	vmov	s16, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	f000 81b1 	beq.w	80168a0 <_dtoa_r+0xbc0>
 801653e:	2300      	movs	r3, #0
 8016540:	4639      	mov	r1, r7
 8016542:	220a      	movs	r2, #10
 8016544:	4620      	mov	r0, r4
 8016546:	f000 ffd5 	bl	80174f4 <__multadd>
 801654a:	9b02      	ldr	r3, [sp, #8]
 801654c:	2b00      	cmp	r3, #0
 801654e:	4607      	mov	r7, r0
 8016550:	f300 808e 	bgt.w	8016670 <_dtoa_r+0x990>
 8016554:	9b06      	ldr	r3, [sp, #24]
 8016556:	2b02      	cmp	r3, #2
 8016558:	dc51      	bgt.n	80165fe <_dtoa_r+0x91e>
 801655a:	e089      	b.n	8016670 <_dtoa_r+0x990>
 801655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801655e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016562:	e74b      	b.n	80163fc <_dtoa_r+0x71c>
 8016564:	9b03      	ldr	r3, [sp, #12]
 8016566:	1e5e      	subs	r6, r3, #1
 8016568:	9b07      	ldr	r3, [sp, #28]
 801656a:	42b3      	cmp	r3, r6
 801656c:	bfbf      	itttt	lt
 801656e:	9b07      	ldrlt	r3, [sp, #28]
 8016570:	9607      	strlt	r6, [sp, #28]
 8016572:	1af2      	sublt	r2, r6, r3
 8016574:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016576:	bfb6      	itet	lt
 8016578:	189b      	addlt	r3, r3, r2
 801657a:	1b9e      	subge	r6, r3, r6
 801657c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801657e:	9b03      	ldr	r3, [sp, #12]
 8016580:	bfb8      	it	lt
 8016582:	2600      	movlt	r6, #0
 8016584:	2b00      	cmp	r3, #0
 8016586:	bfb7      	itett	lt
 8016588:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801658c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016590:	1a9d      	sublt	r5, r3, r2
 8016592:	2300      	movlt	r3, #0
 8016594:	e734      	b.n	8016400 <_dtoa_r+0x720>
 8016596:	9e07      	ldr	r6, [sp, #28]
 8016598:	9d04      	ldr	r5, [sp, #16]
 801659a:	9f08      	ldr	r7, [sp, #32]
 801659c:	e73b      	b.n	8016416 <_dtoa_r+0x736>
 801659e:	9a07      	ldr	r2, [sp, #28]
 80165a0:	e767      	b.n	8016472 <_dtoa_r+0x792>
 80165a2:	9b06      	ldr	r3, [sp, #24]
 80165a4:	2b01      	cmp	r3, #1
 80165a6:	dc18      	bgt.n	80165da <_dtoa_r+0x8fa>
 80165a8:	f1ba 0f00 	cmp.w	sl, #0
 80165ac:	d115      	bne.n	80165da <_dtoa_r+0x8fa>
 80165ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80165b2:	b993      	cbnz	r3, 80165da <_dtoa_r+0x8fa>
 80165b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80165b8:	0d1b      	lsrs	r3, r3, #20
 80165ba:	051b      	lsls	r3, r3, #20
 80165bc:	b183      	cbz	r3, 80165e0 <_dtoa_r+0x900>
 80165be:	9b04      	ldr	r3, [sp, #16]
 80165c0:	3301      	adds	r3, #1
 80165c2:	9304      	str	r3, [sp, #16]
 80165c4:	9b05      	ldr	r3, [sp, #20]
 80165c6:	3301      	adds	r3, #1
 80165c8:	9305      	str	r3, [sp, #20]
 80165ca:	f04f 0801 	mov.w	r8, #1
 80165ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	f47f af6a 	bne.w	80164aa <_dtoa_r+0x7ca>
 80165d6:	2001      	movs	r0, #1
 80165d8:	e76f      	b.n	80164ba <_dtoa_r+0x7da>
 80165da:	f04f 0800 	mov.w	r8, #0
 80165de:	e7f6      	b.n	80165ce <_dtoa_r+0x8ee>
 80165e0:	4698      	mov	r8, r3
 80165e2:	e7f4      	b.n	80165ce <_dtoa_r+0x8ee>
 80165e4:	f43f af7d 	beq.w	80164e2 <_dtoa_r+0x802>
 80165e8:	4618      	mov	r0, r3
 80165ea:	301c      	adds	r0, #28
 80165ec:	e772      	b.n	80164d4 <_dtoa_r+0x7f4>
 80165ee:	9b03      	ldr	r3, [sp, #12]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	dc37      	bgt.n	8016664 <_dtoa_r+0x984>
 80165f4:	9b06      	ldr	r3, [sp, #24]
 80165f6:	2b02      	cmp	r3, #2
 80165f8:	dd34      	ble.n	8016664 <_dtoa_r+0x984>
 80165fa:	9b03      	ldr	r3, [sp, #12]
 80165fc:	9302      	str	r3, [sp, #8]
 80165fe:	9b02      	ldr	r3, [sp, #8]
 8016600:	b96b      	cbnz	r3, 801661e <_dtoa_r+0x93e>
 8016602:	4631      	mov	r1, r6
 8016604:	2205      	movs	r2, #5
 8016606:	4620      	mov	r0, r4
 8016608:	f000 ff74 	bl	80174f4 <__multadd>
 801660c:	4601      	mov	r1, r0
 801660e:	4606      	mov	r6, r0
 8016610:	ee18 0a10 	vmov	r0, s16
 8016614:	f001 f9d8 	bl	80179c8 <__mcmp>
 8016618:	2800      	cmp	r0, #0
 801661a:	f73f adbb 	bgt.w	8016194 <_dtoa_r+0x4b4>
 801661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016620:	9d01      	ldr	r5, [sp, #4]
 8016622:	43db      	mvns	r3, r3
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	f04f 0800 	mov.w	r8, #0
 801662a:	4631      	mov	r1, r6
 801662c:	4620      	mov	r0, r4
 801662e:	f000 ff3f 	bl	80174b0 <_Bfree>
 8016632:	2f00      	cmp	r7, #0
 8016634:	f43f aea4 	beq.w	8016380 <_dtoa_r+0x6a0>
 8016638:	f1b8 0f00 	cmp.w	r8, #0
 801663c:	d005      	beq.n	801664a <_dtoa_r+0x96a>
 801663e:	45b8      	cmp	r8, r7
 8016640:	d003      	beq.n	801664a <_dtoa_r+0x96a>
 8016642:	4641      	mov	r1, r8
 8016644:	4620      	mov	r0, r4
 8016646:	f000 ff33 	bl	80174b0 <_Bfree>
 801664a:	4639      	mov	r1, r7
 801664c:	4620      	mov	r0, r4
 801664e:	f000 ff2f 	bl	80174b0 <_Bfree>
 8016652:	e695      	b.n	8016380 <_dtoa_r+0x6a0>
 8016654:	2600      	movs	r6, #0
 8016656:	4637      	mov	r7, r6
 8016658:	e7e1      	b.n	801661e <_dtoa_r+0x93e>
 801665a:	9700      	str	r7, [sp, #0]
 801665c:	4637      	mov	r7, r6
 801665e:	e599      	b.n	8016194 <_dtoa_r+0x4b4>
 8016660:	40240000 	.word	0x40240000
 8016664:	9b08      	ldr	r3, [sp, #32]
 8016666:	2b00      	cmp	r3, #0
 8016668:	f000 80ca 	beq.w	8016800 <_dtoa_r+0xb20>
 801666c:	9b03      	ldr	r3, [sp, #12]
 801666e:	9302      	str	r3, [sp, #8]
 8016670:	2d00      	cmp	r5, #0
 8016672:	dd05      	ble.n	8016680 <_dtoa_r+0x9a0>
 8016674:	4639      	mov	r1, r7
 8016676:	462a      	mov	r2, r5
 8016678:	4620      	mov	r0, r4
 801667a:	f001 f935 	bl	80178e8 <__lshift>
 801667e:	4607      	mov	r7, r0
 8016680:	f1b8 0f00 	cmp.w	r8, #0
 8016684:	d05b      	beq.n	801673e <_dtoa_r+0xa5e>
 8016686:	6879      	ldr	r1, [r7, #4]
 8016688:	4620      	mov	r0, r4
 801668a:	f000 fed1 	bl	8017430 <_Balloc>
 801668e:	4605      	mov	r5, r0
 8016690:	b928      	cbnz	r0, 801669e <_dtoa_r+0x9be>
 8016692:	4b87      	ldr	r3, [pc, #540]	; (80168b0 <_dtoa_r+0xbd0>)
 8016694:	4602      	mov	r2, r0
 8016696:	f240 21ea 	movw	r1, #746	; 0x2ea
 801669a:	f7ff bb3b 	b.w	8015d14 <_dtoa_r+0x34>
 801669e:	693a      	ldr	r2, [r7, #16]
 80166a0:	3202      	adds	r2, #2
 80166a2:	0092      	lsls	r2, r2, #2
 80166a4:	f107 010c 	add.w	r1, r7, #12
 80166a8:	300c      	adds	r0, #12
 80166aa:	f000 feb3 	bl	8017414 <memcpy>
 80166ae:	2201      	movs	r2, #1
 80166b0:	4629      	mov	r1, r5
 80166b2:	4620      	mov	r0, r4
 80166b4:	f001 f918 	bl	80178e8 <__lshift>
 80166b8:	9b01      	ldr	r3, [sp, #4]
 80166ba:	f103 0901 	add.w	r9, r3, #1
 80166be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80166c2:	4413      	add	r3, r2
 80166c4:	9305      	str	r3, [sp, #20]
 80166c6:	f00a 0301 	and.w	r3, sl, #1
 80166ca:	46b8      	mov	r8, r7
 80166cc:	9304      	str	r3, [sp, #16]
 80166ce:	4607      	mov	r7, r0
 80166d0:	4631      	mov	r1, r6
 80166d2:	ee18 0a10 	vmov	r0, s16
 80166d6:	f7ff fa77 	bl	8015bc8 <quorem>
 80166da:	4641      	mov	r1, r8
 80166dc:	9002      	str	r0, [sp, #8]
 80166de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80166e2:	ee18 0a10 	vmov	r0, s16
 80166e6:	f001 f96f 	bl	80179c8 <__mcmp>
 80166ea:	463a      	mov	r2, r7
 80166ec:	9003      	str	r0, [sp, #12]
 80166ee:	4631      	mov	r1, r6
 80166f0:	4620      	mov	r0, r4
 80166f2:	f001 f985 	bl	8017a00 <__mdiff>
 80166f6:	68c2      	ldr	r2, [r0, #12]
 80166f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80166fc:	4605      	mov	r5, r0
 80166fe:	bb02      	cbnz	r2, 8016742 <_dtoa_r+0xa62>
 8016700:	4601      	mov	r1, r0
 8016702:	ee18 0a10 	vmov	r0, s16
 8016706:	f001 f95f 	bl	80179c8 <__mcmp>
 801670a:	4602      	mov	r2, r0
 801670c:	4629      	mov	r1, r5
 801670e:	4620      	mov	r0, r4
 8016710:	9207      	str	r2, [sp, #28]
 8016712:	f000 fecd 	bl	80174b0 <_Bfree>
 8016716:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801671a:	ea43 0102 	orr.w	r1, r3, r2
 801671e:	9b04      	ldr	r3, [sp, #16]
 8016720:	430b      	orrs	r3, r1
 8016722:	464d      	mov	r5, r9
 8016724:	d10f      	bne.n	8016746 <_dtoa_r+0xa66>
 8016726:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801672a:	d02a      	beq.n	8016782 <_dtoa_r+0xaa2>
 801672c:	9b03      	ldr	r3, [sp, #12]
 801672e:	2b00      	cmp	r3, #0
 8016730:	dd02      	ble.n	8016738 <_dtoa_r+0xa58>
 8016732:	9b02      	ldr	r3, [sp, #8]
 8016734:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016738:	f88b a000 	strb.w	sl, [fp]
 801673c:	e775      	b.n	801662a <_dtoa_r+0x94a>
 801673e:	4638      	mov	r0, r7
 8016740:	e7ba      	b.n	80166b8 <_dtoa_r+0x9d8>
 8016742:	2201      	movs	r2, #1
 8016744:	e7e2      	b.n	801670c <_dtoa_r+0xa2c>
 8016746:	9b03      	ldr	r3, [sp, #12]
 8016748:	2b00      	cmp	r3, #0
 801674a:	db04      	blt.n	8016756 <_dtoa_r+0xa76>
 801674c:	9906      	ldr	r1, [sp, #24]
 801674e:	430b      	orrs	r3, r1
 8016750:	9904      	ldr	r1, [sp, #16]
 8016752:	430b      	orrs	r3, r1
 8016754:	d122      	bne.n	801679c <_dtoa_r+0xabc>
 8016756:	2a00      	cmp	r2, #0
 8016758:	ddee      	ble.n	8016738 <_dtoa_r+0xa58>
 801675a:	ee18 1a10 	vmov	r1, s16
 801675e:	2201      	movs	r2, #1
 8016760:	4620      	mov	r0, r4
 8016762:	f001 f8c1 	bl	80178e8 <__lshift>
 8016766:	4631      	mov	r1, r6
 8016768:	ee08 0a10 	vmov	s16, r0
 801676c:	f001 f92c 	bl	80179c8 <__mcmp>
 8016770:	2800      	cmp	r0, #0
 8016772:	dc03      	bgt.n	801677c <_dtoa_r+0xa9c>
 8016774:	d1e0      	bne.n	8016738 <_dtoa_r+0xa58>
 8016776:	f01a 0f01 	tst.w	sl, #1
 801677a:	d0dd      	beq.n	8016738 <_dtoa_r+0xa58>
 801677c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016780:	d1d7      	bne.n	8016732 <_dtoa_r+0xa52>
 8016782:	2339      	movs	r3, #57	; 0x39
 8016784:	f88b 3000 	strb.w	r3, [fp]
 8016788:	462b      	mov	r3, r5
 801678a:	461d      	mov	r5, r3
 801678c:	3b01      	subs	r3, #1
 801678e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016792:	2a39      	cmp	r2, #57	; 0x39
 8016794:	d071      	beq.n	801687a <_dtoa_r+0xb9a>
 8016796:	3201      	adds	r2, #1
 8016798:	701a      	strb	r2, [r3, #0]
 801679a:	e746      	b.n	801662a <_dtoa_r+0x94a>
 801679c:	2a00      	cmp	r2, #0
 801679e:	dd07      	ble.n	80167b0 <_dtoa_r+0xad0>
 80167a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80167a4:	d0ed      	beq.n	8016782 <_dtoa_r+0xaa2>
 80167a6:	f10a 0301 	add.w	r3, sl, #1
 80167aa:	f88b 3000 	strb.w	r3, [fp]
 80167ae:	e73c      	b.n	801662a <_dtoa_r+0x94a>
 80167b0:	9b05      	ldr	r3, [sp, #20]
 80167b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80167b6:	4599      	cmp	r9, r3
 80167b8:	d047      	beq.n	801684a <_dtoa_r+0xb6a>
 80167ba:	ee18 1a10 	vmov	r1, s16
 80167be:	2300      	movs	r3, #0
 80167c0:	220a      	movs	r2, #10
 80167c2:	4620      	mov	r0, r4
 80167c4:	f000 fe96 	bl	80174f4 <__multadd>
 80167c8:	45b8      	cmp	r8, r7
 80167ca:	ee08 0a10 	vmov	s16, r0
 80167ce:	f04f 0300 	mov.w	r3, #0
 80167d2:	f04f 020a 	mov.w	r2, #10
 80167d6:	4641      	mov	r1, r8
 80167d8:	4620      	mov	r0, r4
 80167da:	d106      	bne.n	80167ea <_dtoa_r+0xb0a>
 80167dc:	f000 fe8a 	bl	80174f4 <__multadd>
 80167e0:	4680      	mov	r8, r0
 80167e2:	4607      	mov	r7, r0
 80167e4:	f109 0901 	add.w	r9, r9, #1
 80167e8:	e772      	b.n	80166d0 <_dtoa_r+0x9f0>
 80167ea:	f000 fe83 	bl	80174f4 <__multadd>
 80167ee:	4639      	mov	r1, r7
 80167f0:	4680      	mov	r8, r0
 80167f2:	2300      	movs	r3, #0
 80167f4:	220a      	movs	r2, #10
 80167f6:	4620      	mov	r0, r4
 80167f8:	f000 fe7c 	bl	80174f4 <__multadd>
 80167fc:	4607      	mov	r7, r0
 80167fe:	e7f1      	b.n	80167e4 <_dtoa_r+0xb04>
 8016800:	9b03      	ldr	r3, [sp, #12]
 8016802:	9302      	str	r3, [sp, #8]
 8016804:	9d01      	ldr	r5, [sp, #4]
 8016806:	ee18 0a10 	vmov	r0, s16
 801680a:	4631      	mov	r1, r6
 801680c:	f7ff f9dc 	bl	8015bc8 <quorem>
 8016810:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016814:	9b01      	ldr	r3, [sp, #4]
 8016816:	f805 ab01 	strb.w	sl, [r5], #1
 801681a:	1aea      	subs	r2, r5, r3
 801681c:	9b02      	ldr	r3, [sp, #8]
 801681e:	4293      	cmp	r3, r2
 8016820:	dd09      	ble.n	8016836 <_dtoa_r+0xb56>
 8016822:	ee18 1a10 	vmov	r1, s16
 8016826:	2300      	movs	r3, #0
 8016828:	220a      	movs	r2, #10
 801682a:	4620      	mov	r0, r4
 801682c:	f000 fe62 	bl	80174f4 <__multadd>
 8016830:	ee08 0a10 	vmov	s16, r0
 8016834:	e7e7      	b.n	8016806 <_dtoa_r+0xb26>
 8016836:	9b02      	ldr	r3, [sp, #8]
 8016838:	2b00      	cmp	r3, #0
 801683a:	bfc8      	it	gt
 801683c:	461d      	movgt	r5, r3
 801683e:	9b01      	ldr	r3, [sp, #4]
 8016840:	bfd8      	it	le
 8016842:	2501      	movle	r5, #1
 8016844:	441d      	add	r5, r3
 8016846:	f04f 0800 	mov.w	r8, #0
 801684a:	ee18 1a10 	vmov	r1, s16
 801684e:	2201      	movs	r2, #1
 8016850:	4620      	mov	r0, r4
 8016852:	f001 f849 	bl	80178e8 <__lshift>
 8016856:	4631      	mov	r1, r6
 8016858:	ee08 0a10 	vmov	s16, r0
 801685c:	f001 f8b4 	bl	80179c8 <__mcmp>
 8016860:	2800      	cmp	r0, #0
 8016862:	dc91      	bgt.n	8016788 <_dtoa_r+0xaa8>
 8016864:	d102      	bne.n	801686c <_dtoa_r+0xb8c>
 8016866:	f01a 0f01 	tst.w	sl, #1
 801686a:	d18d      	bne.n	8016788 <_dtoa_r+0xaa8>
 801686c:	462b      	mov	r3, r5
 801686e:	461d      	mov	r5, r3
 8016870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016874:	2a30      	cmp	r2, #48	; 0x30
 8016876:	d0fa      	beq.n	801686e <_dtoa_r+0xb8e>
 8016878:	e6d7      	b.n	801662a <_dtoa_r+0x94a>
 801687a:	9a01      	ldr	r2, [sp, #4]
 801687c:	429a      	cmp	r2, r3
 801687e:	d184      	bne.n	801678a <_dtoa_r+0xaaa>
 8016880:	9b00      	ldr	r3, [sp, #0]
 8016882:	3301      	adds	r3, #1
 8016884:	9300      	str	r3, [sp, #0]
 8016886:	2331      	movs	r3, #49	; 0x31
 8016888:	7013      	strb	r3, [r2, #0]
 801688a:	e6ce      	b.n	801662a <_dtoa_r+0x94a>
 801688c:	4b09      	ldr	r3, [pc, #36]	; (80168b4 <_dtoa_r+0xbd4>)
 801688e:	f7ff ba95 	b.w	8015dbc <_dtoa_r+0xdc>
 8016892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016894:	2b00      	cmp	r3, #0
 8016896:	f47f aa6e 	bne.w	8015d76 <_dtoa_r+0x96>
 801689a:	4b07      	ldr	r3, [pc, #28]	; (80168b8 <_dtoa_r+0xbd8>)
 801689c:	f7ff ba8e 	b.w	8015dbc <_dtoa_r+0xdc>
 80168a0:	9b02      	ldr	r3, [sp, #8]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	dcae      	bgt.n	8016804 <_dtoa_r+0xb24>
 80168a6:	9b06      	ldr	r3, [sp, #24]
 80168a8:	2b02      	cmp	r3, #2
 80168aa:	f73f aea8 	bgt.w	80165fe <_dtoa_r+0x91e>
 80168ae:	e7a9      	b.n	8016804 <_dtoa_r+0xb24>
 80168b0:	0801e090 	.word	0x0801e090
 80168b4:	0801de90 	.word	0x0801de90
 80168b8:	0801e011 	.word	0x0801e011

080168bc <__sflush_r>:
 80168bc:	898a      	ldrh	r2, [r1, #12]
 80168be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168c2:	4605      	mov	r5, r0
 80168c4:	0710      	lsls	r0, r2, #28
 80168c6:	460c      	mov	r4, r1
 80168c8:	d458      	bmi.n	801697c <__sflush_r+0xc0>
 80168ca:	684b      	ldr	r3, [r1, #4]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	dc05      	bgt.n	80168dc <__sflush_r+0x20>
 80168d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	dc02      	bgt.n	80168dc <__sflush_r+0x20>
 80168d6:	2000      	movs	r0, #0
 80168d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168de:	2e00      	cmp	r6, #0
 80168e0:	d0f9      	beq.n	80168d6 <__sflush_r+0x1a>
 80168e2:	2300      	movs	r3, #0
 80168e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80168e8:	682f      	ldr	r7, [r5, #0]
 80168ea:	602b      	str	r3, [r5, #0]
 80168ec:	d032      	beq.n	8016954 <__sflush_r+0x98>
 80168ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80168f0:	89a3      	ldrh	r3, [r4, #12]
 80168f2:	075a      	lsls	r2, r3, #29
 80168f4:	d505      	bpl.n	8016902 <__sflush_r+0x46>
 80168f6:	6863      	ldr	r3, [r4, #4]
 80168f8:	1ac0      	subs	r0, r0, r3
 80168fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168fc:	b10b      	cbz	r3, 8016902 <__sflush_r+0x46>
 80168fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016900:	1ac0      	subs	r0, r0, r3
 8016902:	2300      	movs	r3, #0
 8016904:	4602      	mov	r2, r0
 8016906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016908:	6a21      	ldr	r1, [r4, #32]
 801690a:	4628      	mov	r0, r5
 801690c:	47b0      	blx	r6
 801690e:	1c43      	adds	r3, r0, #1
 8016910:	89a3      	ldrh	r3, [r4, #12]
 8016912:	d106      	bne.n	8016922 <__sflush_r+0x66>
 8016914:	6829      	ldr	r1, [r5, #0]
 8016916:	291d      	cmp	r1, #29
 8016918:	d82c      	bhi.n	8016974 <__sflush_r+0xb8>
 801691a:	4a2a      	ldr	r2, [pc, #168]	; (80169c4 <__sflush_r+0x108>)
 801691c:	40ca      	lsrs	r2, r1
 801691e:	07d6      	lsls	r6, r2, #31
 8016920:	d528      	bpl.n	8016974 <__sflush_r+0xb8>
 8016922:	2200      	movs	r2, #0
 8016924:	6062      	str	r2, [r4, #4]
 8016926:	04d9      	lsls	r1, r3, #19
 8016928:	6922      	ldr	r2, [r4, #16]
 801692a:	6022      	str	r2, [r4, #0]
 801692c:	d504      	bpl.n	8016938 <__sflush_r+0x7c>
 801692e:	1c42      	adds	r2, r0, #1
 8016930:	d101      	bne.n	8016936 <__sflush_r+0x7a>
 8016932:	682b      	ldr	r3, [r5, #0]
 8016934:	b903      	cbnz	r3, 8016938 <__sflush_r+0x7c>
 8016936:	6560      	str	r0, [r4, #84]	; 0x54
 8016938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801693a:	602f      	str	r7, [r5, #0]
 801693c:	2900      	cmp	r1, #0
 801693e:	d0ca      	beq.n	80168d6 <__sflush_r+0x1a>
 8016940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016944:	4299      	cmp	r1, r3
 8016946:	d002      	beq.n	801694e <__sflush_r+0x92>
 8016948:	4628      	mov	r0, r5
 801694a:	f001 fa49 	bl	8017de0 <_free_r>
 801694e:	2000      	movs	r0, #0
 8016950:	6360      	str	r0, [r4, #52]	; 0x34
 8016952:	e7c1      	b.n	80168d8 <__sflush_r+0x1c>
 8016954:	6a21      	ldr	r1, [r4, #32]
 8016956:	2301      	movs	r3, #1
 8016958:	4628      	mov	r0, r5
 801695a:	47b0      	blx	r6
 801695c:	1c41      	adds	r1, r0, #1
 801695e:	d1c7      	bne.n	80168f0 <__sflush_r+0x34>
 8016960:	682b      	ldr	r3, [r5, #0]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d0c4      	beq.n	80168f0 <__sflush_r+0x34>
 8016966:	2b1d      	cmp	r3, #29
 8016968:	d001      	beq.n	801696e <__sflush_r+0xb2>
 801696a:	2b16      	cmp	r3, #22
 801696c:	d101      	bne.n	8016972 <__sflush_r+0xb6>
 801696e:	602f      	str	r7, [r5, #0]
 8016970:	e7b1      	b.n	80168d6 <__sflush_r+0x1a>
 8016972:	89a3      	ldrh	r3, [r4, #12]
 8016974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016978:	81a3      	strh	r3, [r4, #12]
 801697a:	e7ad      	b.n	80168d8 <__sflush_r+0x1c>
 801697c:	690f      	ldr	r7, [r1, #16]
 801697e:	2f00      	cmp	r7, #0
 8016980:	d0a9      	beq.n	80168d6 <__sflush_r+0x1a>
 8016982:	0793      	lsls	r3, r2, #30
 8016984:	680e      	ldr	r6, [r1, #0]
 8016986:	bf08      	it	eq
 8016988:	694b      	ldreq	r3, [r1, #20]
 801698a:	600f      	str	r7, [r1, #0]
 801698c:	bf18      	it	ne
 801698e:	2300      	movne	r3, #0
 8016990:	eba6 0807 	sub.w	r8, r6, r7
 8016994:	608b      	str	r3, [r1, #8]
 8016996:	f1b8 0f00 	cmp.w	r8, #0
 801699a:	dd9c      	ble.n	80168d6 <__sflush_r+0x1a>
 801699c:	6a21      	ldr	r1, [r4, #32]
 801699e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80169a0:	4643      	mov	r3, r8
 80169a2:	463a      	mov	r2, r7
 80169a4:	4628      	mov	r0, r5
 80169a6:	47b0      	blx	r6
 80169a8:	2800      	cmp	r0, #0
 80169aa:	dc06      	bgt.n	80169ba <__sflush_r+0xfe>
 80169ac:	89a3      	ldrh	r3, [r4, #12]
 80169ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169b2:	81a3      	strh	r3, [r4, #12]
 80169b4:	f04f 30ff 	mov.w	r0, #4294967295
 80169b8:	e78e      	b.n	80168d8 <__sflush_r+0x1c>
 80169ba:	4407      	add	r7, r0
 80169bc:	eba8 0800 	sub.w	r8, r8, r0
 80169c0:	e7e9      	b.n	8016996 <__sflush_r+0xda>
 80169c2:	bf00      	nop
 80169c4:	20400001 	.word	0x20400001

080169c8 <_fflush_r>:
 80169c8:	b538      	push	{r3, r4, r5, lr}
 80169ca:	690b      	ldr	r3, [r1, #16]
 80169cc:	4605      	mov	r5, r0
 80169ce:	460c      	mov	r4, r1
 80169d0:	b913      	cbnz	r3, 80169d8 <_fflush_r+0x10>
 80169d2:	2500      	movs	r5, #0
 80169d4:	4628      	mov	r0, r5
 80169d6:	bd38      	pop	{r3, r4, r5, pc}
 80169d8:	b118      	cbz	r0, 80169e2 <_fflush_r+0x1a>
 80169da:	6983      	ldr	r3, [r0, #24]
 80169dc:	b90b      	cbnz	r3, 80169e2 <_fflush_r+0x1a>
 80169de:	f000 f887 	bl	8016af0 <__sinit>
 80169e2:	4b14      	ldr	r3, [pc, #80]	; (8016a34 <_fflush_r+0x6c>)
 80169e4:	429c      	cmp	r4, r3
 80169e6:	d11b      	bne.n	8016a20 <_fflush_r+0x58>
 80169e8:	686c      	ldr	r4, [r5, #4]
 80169ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d0ef      	beq.n	80169d2 <_fflush_r+0xa>
 80169f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80169f4:	07d0      	lsls	r0, r2, #31
 80169f6:	d404      	bmi.n	8016a02 <_fflush_r+0x3a>
 80169f8:	0599      	lsls	r1, r3, #22
 80169fa:	d402      	bmi.n	8016a02 <_fflush_r+0x3a>
 80169fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169fe:	f000 fc88 	bl	8017312 <__retarget_lock_acquire_recursive>
 8016a02:	4628      	mov	r0, r5
 8016a04:	4621      	mov	r1, r4
 8016a06:	f7ff ff59 	bl	80168bc <__sflush_r>
 8016a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a0c:	07da      	lsls	r2, r3, #31
 8016a0e:	4605      	mov	r5, r0
 8016a10:	d4e0      	bmi.n	80169d4 <_fflush_r+0xc>
 8016a12:	89a3      	ldrh	r3, [r4, #12]
 8016a14:	059b      	lsls	r3, r3, #22
 8016a16:	d4dd      	bmi.n	80169d4 <_fflush_r+0xc>
 8016a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a1a:	f000 fc7b 	bl	8017314 <__retarget_lock_release_recursive>
 8016a1e:	e7d9      	b.n	80169d4 <_fflush_r+0xc>
 8016a20:	4b05      	ldr	r3, [pc, #20]	; (8016a38 <_fflush_r+0x70>)
 8016a22:	429c      	cmp	r4, r3
 8016a24:	d101      	bne.n	8016a2a <_fflush_r+0x62>
 8016a26:	68ac      	ldr	r4, [r5, #8]
 8016a28:	e7df      	b.n	80169ea <_fflush_r+0x22>
 8016a2a:	4b04      	ldr	r3, [pc, #16]	; (8016a3c <_fflush_r+0x74>)
 8016a2c:	429c      	cmp	r4, r3
 8016a2e:	bf08      	it	eq
 8016a30:	68ec      	ldreq	r4, [r5, #12]
 8016a32:	e7da      	b.n	80169ea <_fflush_r+0x22>
 8016a34:	0801e0c4 	.word	0x0801e0c4
 8016a38:	0801e0e4 	.word	0x0801e0e4
 8016a3c:	0801e0a4 	.word	0x0801e0a4

08016a40 <std>:
 8016a40:	2300      	movs	r3, #0
 8016a42:	b510      	push	{r4, lr}
 8016a44:	4604      	mov	r4, r0
 8016a46:	e9c0 3300 	strd	r3, r3, [r0]
 8016a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a4e:	6083      	str	r3, [r0, #8]
 8016a50:	8181      	strh	r1, [r0, #12]
 8016a52:	6643      	str	r3, [r0, #100]	; 0x64
 8016a54:	81c2      	strh	r2, [r0, #14]
 8016a56:	6183      	str	r3, [r0, #24]
 8016a58:	4619      	mov	r1, r3
 8016a5a:	2208      	movs	r2, #8
 8016a5c:	305c      	adds	r0, #92	; 0x5c
 8016a5e:	f7fd fa0f 	bl	8013e80 <memset>
 8016a62:	4b05      	ldr	r3, [pc, #20]	; (8016a78 <std+0x38>)
 8016a64:	6263      	str	r3, [r4, #36]	; 0x24
 8016a66:	4b05      	ldr	r3, [pc, #20]	; (8016a7c <std+0x3c>)
 8016a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a6a:	4b05      	ldr	r3, [pc, #20]	; (8016a80 <std+0x40>)
 8016a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a6e:	4b05      	ldr	r3, [pc, #20]	; (8016a84 <std+0x44>)
 8016a70:	6224      	str	r4, [r4, #32]
 8016a72:	6323      	str	r3, [r4, #48]	; 0x30
 8016a74:	bd10      	pop	{r4, pc}
 8016a76:	bf00      	nop
 8016a78:	08018541 	.word	0x08018541
 8016a7c:	08018563 	.word	0x08018563
 8016a80:	0801859b 	.word	0x0801859b
 8016a84:	080185bf 	.word	0x080185bf

08016a88 <_cleanup_r>:
 8016a88:	4901      	ldr	r1, [pc, #4]	; (8016a90 <_cleanup_r+0x8>)
 8016a8a:	f000 b8af 	b.w	8016bec <_fwalk_reent>
 8016a8e:	bf00      	nop
 8016a90:	080169c9 	.word	0x080169c9

08016a94 <__sfmoreglue>:
 8016a94:	b570      	push	{r4, r5, r6, lr}
 8016a96:	2268      	movs	r2, #104	; 0x68
 8016a98:	1e4d      	subs	r5, r1, #1
 8016a9a:	4355      	muls	r5, r2
 8016a9c:	460e      	mov	r6, r1
 8016a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016aa2:	f001 fa09 	bl	8017eb8 <_malloc_r>
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	b140      	cbz	r0, 8016abc <__sfmoreglue+0x28>
 8016aaa:	2100      	movs	r1, #0
 8016aac:	e9c0 1600 	strd	r1, r6, [r0]
 8016ab0:	300c      	adds	r0, #12
 8016ab2:	60a0      	str	r0, [r4, #8]
 8016ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ab8:	f7fd f9e2 	bl	8013e80 <memset>
 8016abc:	4620      	mov	r0, r4
 8016abe:	bd70      	pop	{r4, r5, r6, pc}

08016ac0 <__sfp_lock_acquire>:
 8016ac0:	4801      	ldr	r0, [pc, #4]	; (8016ac8 <__sfp_lock_acquire+0x8>)
 8016ac2:	f000 bc26 	b.w	8017312 <__retarget_lock_acquire_recursive>
 8016ac6:	bf00      	nop
 8016ac8:	20007aaf 	.word	0x20007aaf

08016acc <__sfp_lock_release>:
 8016acc:	4801      	ldr	r0, [pc, #4]	; (8016ad4 <__sfp_lock_release+0x8>)
 8016ace:	f000 bc21 	b.w	8017314 <__retarget_lock_release_recursive>
 8016ad2:	bf00      	nop
 8016ad4:	20007aaf 	.word	0x20007aaf

08016ad8 <__sinit_lock_acquire>:
 8016ad8:	4801      	ldr	r0, [pc, #4]	; (8016ae0 <__sinit_lock_acquire+0x8>)
 8016ada:	f000 bc1a 	b.w	8017312 <__retarget_lock_acquire_recursive>
 8016ade:	bf00      	nop
 8016ae0:	20007ab0 	.word	0x20007ab0

08016ae4 <__sinit_lock_release>:
 8016ae4:	4801      	ldr	r0, [pc, #4]	; (8016aec <__sinit_lock_release+0x8>)
 8016ae6:	f000 bc15 	b.w	8017314 <__retarget_lock_release_recursive>
 8016aea:	bf00      	nop
 8016aec:	20007ab0 	.word	0x20007ab0

08016af0 <__sinit>:
 8016af0:	b510      	push	{r4, lr}
 8016af2:	4604      	mov	r4, r0
 8016af4:	f7ff fff0 	bl	8016ad8 <__sinit_lock_acquire>
 8016af8:	69a3      	ldr	r3, [r4, #24]
 8016afa:	b11b      	cbz	r3, 8016b04 <__sinit+0x14>
 8016afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b00:	f7ff bff0 	b.w	8016ae4 <__sinit_lock_release>
 8016b04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016b08:	6523      	str	r3, [r4, #80]	; 0x50
 8016b0a:	4b13      	ldr	r3, [pc, #76]	; (8016b58 <__sinit+0x68>)
 8016b0c:	4a13      	ldr	r2, [pc, #76]	; (8016b5c <__sinit+0x6c>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8016b12:	42a3      	cmp	r3, r4
 8016b14:	bf04      	itt	eq
 8016b16:	2301      	moveq	r3, #1
 8016b18:	61a3      	streq	r3, [r4, #24]
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f000 f820 	bl	8016b60 <__sfp>
 8016b20:	6060      	str	r0, [r4, #4]
 8016b22:	4620      	mov	r0, r4
 8016b24:	f000 f81c 	bl	8016b60 <__sfp>
 8016b28:	60a0      	str	r0, [r4, #8]
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	f000 f818 	bl	8016b60 <__sfp>
 8016b30:	2200      	movs	r2, #0
 8016b32:	60e0      	str	r0, [r4, #12]
 8016b34:	2104      	movs	r1, #4
 8016b36:	6860      	ldr	r0, [r4, #4]
 8016b38:	f7ff ff82 	bl	8016a40 <std>
 8016b3c:	68a0      	ldr	r0, [r4, #8]
 8016b3e:	2201      	movs	r2, #1
 8016b40:	2109      	movs	r1, #9
 8016b42:	f7ff ff7d 	bl	8016a40 <std>
 8016b46:	68e0      	ldr	r0, [r4, #12]
 8016b48:	2202      	movs	r2, #2
 8016b4a:	2112      	movs	r1, #18
 8016b4c:	f7ff ff78 	bl	8016a40 <std>
 8016b50:	2301      	movs	r3, #1
 8016b52:	61a3      	str	r3, [r4, #24]
 8016b54:	e7d2      	b.n	8016afc <__sinit+0xc>
 8016b56:	bf00      	nop
 8016b58:	0801de7c 	.word	0x0801de7c
 8016b5c:	08016a89 	.word	0x08016a89

08016b60 <__sfp>:
 8016b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b62:	4607      	mov	r7, r0
 8016b64:	f7ff ffac 	bl	8016ac0 <__sfp_lock_acquire>
 8016b68:	4b1e      	ldr	r3, [pc, #120]	; (8016be4 <__sfp+0x84>)
 8016b6a:	681e      	ldr	r6, [r3, #0]
 8016b6c:	69b3      	ldr	r3, [r6, #24]
 8016b6e:	b913      	cbnz	r3, 8016b76 <__sfp+0x16>
 8016b70:	4630      	mov	r0, r6
 8016b72:	f7ff ffbd 	bl	8016af0 <__sinit>
 8016b76:	3648      	adds	r6, #72	; 0x48
 8016b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	d503      	bpl.n	8016b88 <__sfp+0x28>
 8016b80:	6833      	ldr	r3, [r6, #0]
 8016b82:	b30b      	cbz	r3, 8016bc8 <__sfp+0x68>
 8016b84:	6836      	ldr	r6, [r6, #0]
 8016b86:	e7f7      	b.n	8016b78 <__sfp+0x18>
 8016b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b8c:	b9d5      	cbnz	r5, 8016bc4 <__sfp+0x64>
 8016b8e:	4b16      	ldr	r3, [pc, #88]	; (8016be8 <__sfp+0x88>)
 8016b90:	60e3      	str	r3, [r4, #12]
 8016b92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b96:	6665      	str	r5, [r4, #100]	; 0x64
 8016b98:	f000 fbba 	bl	8017310 <__retarget_lock_init_recursive>
 8016b9c:	f7ff ff96 	bl	8016acc <__sfp_lock_release>
 8016ba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ba8:	6025      	str	r5, [r4, #0]
 8016baa:	61a5      	str	r5, [r4, #24]
 8016bac:	2208      	movs	r2, #8
 8016bae:	4629      	mov	r1, r5
 8016bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016bb4:	f7fd f964 	bl	8013e80 <memset>
 8016bb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016bbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc4:	3468      	adds	r4, #104	; 0x68
 8016bc6:	e7d9      	b.n	8016b7c <__sfp+0x1c>
 8016bc8:	2104      	movs	r1, #4
 8016bca:	4638      	mov	r0, r7
 8016bcc:	f7ff ff62 	bl	8016a94 <__sfmoreglue>
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	6030      	str	r0, [r6, #0]
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	d1d5      	bne.n	8016b84 <__sfp+0x24>
 8016bd8:	f7ff ff78 	bl	8016acc <__sfp_lock_release>
 8016bdc:	230c      	movs	r3, #12
 8016bde:	603b      	str	r3, [r7, #0]
 8016be0:	e7ee      	b.n	8016bc0 <__sfp+0x60>
 8016be2:	bf00      	nop
 8016be4:	0801de7c 	.word	0x0801de7c
 8016be8:	ffff0001 	.word	0xffff0001

08016bec <_fwalk_reent>:
 8016bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bf0:	4606      	mov	r6, r0
 8016bf2:	4688      	mov	r8, r1
 8016bf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016bf8:	2700      	movs	r7, #0
 8016bfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bfe:	f1b9 0901 	subs.w	r9, r9, #1
 8016c02:	d505      	bpl.n	8016c10 <_fwalk_reent+0x24>
 8016c04:	6824      	ldr	r4, [r4, #0]
 8016c06:	2c00      	cmp	r4, #0
 8016c08:	d1f7      	bne.n	8016bfa <_fwalk_reent+0xe>
 8016c0a:	4638      	mov	r0, r7
 8016c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c10:	89ab      	ldrh	r3, [r5, #12]
 8016c12:	2b01      	cmp	r3, #1
 8016c14:	d907      	bls.n	8016c26 <_fwalk_reent+0x3a>
 8016c16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c1a:	3301      	adds	r3, #1
 8016c1c:	d003      	beq.n	8016c26 <_fwalk_reent+0x3a>
 8016c1e:	4629      	mov	r1, r5
 8016c20:	4630      	mov	r0, r6
 8016c22:	47c0      	blx	r8
 8016c24:	4307      	orrs	r7, r0
 8016c26:	3568      	adds	r5, #104	; 0x68
 8016c28:	e7e9      	b.n	8016bfe <_fwalk_reent+0x12>

08016c2a <rshift>:
 8016c2a:	6903      	ldr	r3, [r0, #16]
 8016c2c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c34:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016c38:	f100 0414 	add.w	r4, r0, #20
 8016c3c:	dd45      	ble.n	8016cca <rshift+0xa0>
 8016c3e:	f011 011f 	ands.w	r1, r1, #31
 8016c42:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016c46:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016c4a:	d10c      	bne.n	8016c66 <rshift+0x3c>
 8016c4c:	f100 0710 	add.w	r7, r0, #16
 8016c50:	4629      	mov	r1, r5
 8016c52:	42b1      	cmp	r1, r6
 8016c54:	d334      	bcc.n	8016cc0 <rshift+0x96>
 8016c56:	1a9b      	subs	r3, r3, r2
 8016c58:	009b      	lsls	r3, r3, #2
 8016c5a:	1eea      	subs	r2, r5, #3
 8016c5c:	4296      	cmp	r6, r2
 8016c5e:	bf38      	it	cc
 8016c60:	2300      	movcc	r3, #0
 8016c62:	4423      	add	r3, r4
 8016c64:	e015      	b.n	8016c92 <rshift+0x68>
 8016c66:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016c6a:	f1c1 0820 	rsb	r8, r1, #32
 8016c6e:	40cf      	lsrs	r7, r1
 8016c70:	f105 0e04 	add.w	lr, r5, #4
 8016c74:	46a1      	mov	r9, r4
 8016c76:	4576      	cmp	r6, lr
 8016c78:	46f4      	mov	ip, lr
 8016c7a:	d815      	bhi.n	8016ca8 <rshift+0x7e>
 8016c7c:	1a9a      	subs	r2, r3, r2
 8016c7e:	0092      	lsls	r2, r2, #2
 8016c80:	3a04      	subs	r2, #4
 8016c82:	3501      	adds	r5, #1
 8016c84:	42ae      	cmp	r6, r5
 8016c86:	bf38      	it	cc
 8016c88:	2200      	movcc	r2, #0
 8016c8a:	18a3      	adds	r3, r4, r2
 8016c8c:	50a7      	str	r7, [r4, r2]
 8016c8e:	b107      	cbz	r7, 8016c92 <rshift+0x68>
 8016c90:	3304      	adds	r3, #4
 8016c92:	1b1a      	subs	r2, r3, r4
 8016c94:	42a3      	cmp	r3, r4
 8016c96:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016c9a:	bf08      	it	eq
 8016c9c:	2300      	moveq	r3, #0
 8016c9e:	6102      	str	r2, [r0, #16]
 8016ca0:	bf08      	it	eq
 8016ca2:	6143      	streq	r3, [r0, #20]
 8016ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ca8:	f8dc c000 	ldr.w	ip, [ip]
 8016cac:	fa0c fc08 	lsl.w	ip, ip, r8
 8016cb0:	ea4c 0707 	orr.w	r7, ip, r7
 8016cb4:	f849 7b04 	str.w	r7, [r9], #4
 8016cb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016cbc:	40cf      	lsrs	r7, r1
 8016cbe:	e7da      	b.n	8016c76 <rshift+0x4c>
 8016cc0:	f851 cb04 	ldr.w	ip, [r1], #4
 8016cc4:	f847 cf04 	str.w	ip, [r7, #4]!
 8016cc8:	e7c3      	b.n	8016c52 <rshift+0x28>
 8016cca:	4623      	mov	r3, r4
 8016ccc:	e7e1      	b.n	8016c92 <rshift+0x68>

08016cce <__hexdig_fun>:
 8016cce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016cd2:	2b09      	cmp	r3, #9
 8016cd4:	d802      	bhi.n	8016cdc <__hexdig_fun+0xe>
 8016cd6:	3820      	subs	r0, #32
 8016cd8:	b2c0      	uxtb	r0, r0
 8016cda:	4770      	bx	lr
 8016cdc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016ce0:	2b05      	cmp	r3, #5
 8016ce2:	d801      	bhi.n	8016ce8 <__hexdig_fun+0x1a>
 8016ce4:	3847      	subs	r0, #71	; 0x47
 8016ce6:	e7f7      	b.n	8016cd8 <__hexdig_fun+0xa>
 8016ce8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016cec:	2b05      	cmp	r3, #5
 8016cee:	d801      	bhi.n	8016cf4 <__hexdig_fun+0x26>
 8016cf0:	3827      	subs	r0, #39	; 0x27
 8016cf2:	e7f1      	b.n	8016cd8 <__hexdig_fun+0xa>
 8016cf4:	2000      	movs	r0, #0
 8016cf6:	4770      	bx	lr

08016cf8 <__gethex>:
 8016cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfc:	ed2d 8b02 	vpush	{d8}
 8016d00:	b089      	sub	sp, #36	; 0x24
 8016d02:	ee08 0a10 	vmov	s16, r0
 8016d06:	9304      	str	r3, [sp, #16]
 8016d08:	4bb4      	ldr	r3, [pc, #720]	; (8016fdc <__gethex+0x2e4>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	9301      	str	r3, [sp, #4]
 8016d0e:	4618      	mov	r0, r3
 8016d10:	468b      	mov	fp, r1
 8016d12:	4690      	mov	r8, r2
 8016d14:	f7e9 fa5c 	bl	80001d0 <strlen>
 8016d18:	9b01      	ldr	r3, [sp, #4]
 8016d1a:	f8db 2000 	ldr.w	r2, [fp]
 8016d1e:	4403      	add	r3, r0
 8016d20:	4682      	mov	sl, r0
 8016d22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016d26:	9305      	str	r3, [sp, #20]
 8016d28:	1c93      	adds	r3, r2, #2
 8016d2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016d2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016d32:	32fe      	adds	r2, #254	; 0xfe
 8016d34:	18d1      	adds	r1, r2, r3
 8016d36:	461f      	mov	r7, r3
 8016d38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016d3c:	9100      	str	r1, [sp, #0]
 8016d3e:	2830      	cmp	r0, #48	; 0x30
 8016d40:	d0f8      	beq.n	8016d34 <__gethex+0x3c>
 8016d42:	f7ff ffc4 	bl	8016cce <__hexdig_fun>
 8016d46:	4604      	mov	r4, r0
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	d13a      	bne.n	8016dc2 <__gethex+0xca>
 8016d4c:	9901      	ldr	r1, [sp, #4]
 8016d4e:	4652      	mov	r2, sl
 8016d50:	4638      	mov	r0, r7
 8016d52:	f001 fc38 	bl	80185c6 <strncmp>
 8016d56:	4605      	mov	r5, r0
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	d168      	bne.n	8016e2e <__gethex+0x136>
 8016d5c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016d60:	eb07 060a 	add.w	r6, r7, sl
 8016d64:	f7ff ffb3 	bl	8016cce <__hexdig_fun>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	d062      	beq.n	8016e32 <__gethex+0x13a>
 8016d6c:	4633      	mov	r3, r6
 8016d6e:	7818      	ldrb	r0, [r3, #0]
 8016d70:	2830      	cmp	r0, #48	; 0x30
 8016d72:	461f      	mov	r7, r3
 8016d74:	f103 0301 	add.w	r3, r3, #1
 8016d78:	d0f9      	beq.n	8016d6e <__gethex+0x76>
 8016d7a:	f7ff ffa8 	bl	8016cce <__hexdig_fun>
 8016d7e:	2301      	movs	r3, #1
 8016d80:	fab0 f480 	clz	r4, r0
 8016d84:	0964      	lsrs	r4, r4, #5
 8016d86:	4635      	mov	r5, r6
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	463a      	mov	r2, r7
 8016d8c:	4616      	mov	r6, r2
 8016d8e:	3201      	adds	r2, #1
 8016d90:	7830      	ldrb	r0, [r6, #0]
 8016d92:	f7ff ff9c 	bl	8016cce <__hexdig_fun>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d1f8      	bne.n	8016d8c <__gethex+0x94>
 8016d9a:	9901      	ldr	r1, [sp, #4]
 8016d9c:	4652      	mov	r2, sl
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f001 fc11 	bl	80185c6 <strncmp>
 8016da4:	b980      	cbnz	r0, 8016dc8 <__gethex+0xd0>
 8016da6:	b94d      	cbnz	r5, 8016dbc <__gethex+0xc4>
 8016da8:	eb06 050a 	add.w	r5, r6, sl
 8016dac:	462a      	mov	r2, r5
 8016dae:	4616      	mov	r6, r2
 8016db0:	3201      	adds	r2, #1
 8016db2:	7830      	ldrb	r0, [r6, #0]
 8016db4:	f7ff ff8b 	bl	8016cce <__hexdig_fun>
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d1f8      	bne.n	8016dae <__gethex+0xb6>
 8016dbc:	1bad      	subs	r5, r5, r6
 8016dbe:	00ad      	lsls	r5, r5, #2
 8016dc0:	e004      	b.n	8016dcc <__gethex+0xd4>
 8016dc2:	2400      	movs	r4, #0
 8016dc4:	4625      	mov	r5, r4
 8016dc6:	e7e0      	b.n	8016d8a <__gethex+0x92>
 8016dc8:	2d00      	cmp	r5, #0
 8016dca:	d1f7      	bne.n	8016dbc <__gethex+0xc4>
 8016dcc:	7833      	ldrb	r3, [r6, #0]
 8016dce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016dd2:	2b50      	cmp	r3, #80	; 0x50
 8016dd4:	d13b      	bne.n	8016e4e <__gethex+0x156>
 8016dd6:	7873      	ldrb	r3, [r6, #1]
 8016dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8016dda:	d02c      	beq.n	8016e36 <__gethex+0x13e>
 8016ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8016dde:	d02e      	beq.n	8016e3e <__gethex+0x146>
 8016de0:	1c71      	adds	r1, r6, #1
 8016de2:	f04f 0900 	mov.w	r9, #0
 8016de6:	7808      	ldrb	r0, [r1, #0]
 8016de8:	f7ff ff71 	bl	8016cce <__hexdig_fun>
 8016dec:	1e43      	subs	r3, r0, #1
 8016dee:	b2db      	uxtb	r3, r3
 8016df0:	2b18      	cmp	r3, #24
 8016df2:	d82c      	bhi.n	8016e4e <__gethex+0x156>
 8016df4:	f1a0 0210 	sub.w	r2, r0, #16
 8016df8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016dfc:	f7ff ff67 	bl	8016cce <__hexdig_fun>
 8016e00:	1e43      	subs	r3, r0, #1
 8016e02:	b2db      	uxtb	r3, r3
 8016e04:	2b18      	cmp	r3, #24
 8016e06:	d91d      	bls.n	8016e44 <__gethex+0x14c>
 8016e08:	f1b9 0f00 	cmp.w	r9, #0
 8016e0c:	d000      	beq.n	8016e10 <__gethex+0x118>
 8016e0e:	4252      	negs	r2, r2
 8016e10:	4415      	add	r5, r2
 8016e12:	f8cb 1000 	str.w	r1, [fp]
 8016e16:	b1e4      	cbz	r4, 8016e52 <__gethex+0x15a>
 8016e18:	9b00      	ldr	r3, [sp, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	bf14      	ite	ne
 8016e1e:	2700      	movne	r7, #0
 8016e20:	2706      	moveq	r7, #6
 8016e22:	4638      	mov	r0, r7
 8016e24:	b009      	add	sp, #36	; 0x24
 8016e26:	ecbd 8b02 	vpop	{d8}
 8016e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e2e:	463e      	mov	r6, r7
 8016e30:	4625      	mov	r5, r4
 8016e32:	2401      	movs	r4, #1
 8016e34:	e7ca      	b.n	8016dcc <__gethex+0xd4>
 8016e36:	f04f 0900 	mov.w	r9, #0
 8016e3a:	1cb1      	adds	r1, r6, #2
 8016e3c:	e7d3      	b.n	8016de6 <__gethex+0xee>
 8016e3e:	f04f 0901 	mov.w	r9, #1
 8016e42:	e7fa      	b.n	8016e3a <__gethex+0x142>
 8016e44:	230a      	movs	r3, #10
 8016e46:	fb03 0202 	mla	r2, r3, r2, r0
 8016e4a:	3a10      	subs	r2, #16
 8016e4c:	e7d4      	b.n	8016df8 <__gethex+0x100>
 8016e4e:	4631      	mov	r1, r6
 8016e50:	e7df      	b.n	8016e12 <__gethex+0x11a>
 8016e52:	1bf3      	subs	r3, r6, r7
 8016e54:	3b01      	subs	r3, #1
 8016e56:	4621      	mov	r1, r4
 8016e58:	2b07      	cmp	r3, #7
 8016e5a:	dc0b      	bgt.n	8016e74 <__gethex+0x17c>
 8016e5c:	ee18 0a10 	vmov	r0, s16
 8016e60:	f000 fae6 	bl	8017430 <_Balloc>
 8016e64:	4604      	mov	r4, r0
 8016e66:	b940      	cbnz	r0, 8016e7a <__gethex+0x182>
 8016e68:	4b5d      	ldr	r3, [pc, #372]	; (8016fe0 <__gethex+0x2e8>)
 8016e6a:	4602      	mov	r2, r0
 8016e6c:	21de      	movs	r1, #222	; 0xde
 8016e6e:	485d      	ldr	r0, [pc, #372]	; (8016fe4 <__gethex+0x2ec>)
 8016e70:	f001 fbdc 	bl	801862c <__assert_func>
 8016e74:	3101      	adds	r1, #1
 8016e76:	105b      	asrs	r3, r3, #1
 8016e78:	e7ee      	b.n	8016e58 <__gethex+0x160>
 8016e7a:	f100 0914 	add.w	r9, r0, #20
 8016e7e:	f04f 0b00 	mov.w	fp, #0
 8016e82:	f1ca 0301 	rsb	r3, sl, #1
 8016e86:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e8a:	f8cd b000 	str.w	fp, [sp]
 8016e8e:	9306      	str	r3, [sp, #24]
 8016e90:	42b7      	cmp	r7, r6
 8016e92:	d340      	bcc.n	8016f16 <__gethex+0x21e>
 8016e94:	9802      	ldr	r0, [sp, #8]
 8016e96:	9b00      	ldr	r3, [sp, #0]
 8016e98:	f840 3b04 	str.w	r3, [r0], #4
 8016e9c:	eba0 0009 	sub.w	r0, r0, r9
 8016ea0:	1080      	asrs	r0, r0, #2
 8016ea2:	0146      	lsls	r6, r0, #5
 8016ea4:	6120      	str	r0, [r4, #16]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f000 fbb4 	bl	8017614 <__hi0bits>
 8016eac:	1a30      	subs	r0, r6, r0
 8016eae:	f8d8 6000 	ldr.w	r6, [r8]
 8016eb2:	42b0      	cmp	r0, r6
 8016eb4:	dd63      	ble.n	8016f7e <__gethex+0x286>
 8016eb6:	1b87      	subs	r7, r0, r6
 8016eb8:	4639      	mov	r1, r7
 8016eba:	4620      	mov	r0, r4
 8016ebc:	f000 ff58 	bl	8017d70 <__any_on>
 8016ec0:	4682      	mov	sl, r0
 8016ec2:	b1a8      	cbz	r0, 8016ef0 <__gethex+0x1f8>
 8016ec4:	1e7b      	subs	r3, r7, #1
 8016ec6:	1159      	asrs	r1, r3, #5
 8016ec8:	f003 021f 	and.w	r2, r3, #31
 8016ecc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016ed0:	f04f 0a01 	mov.w	sl, #1
 8016ed4:	fa0a f202 	lsl.w	r2, sl, r2
 8016ed8:	420a      	tst	r2, r1
 8016eda:	d009      	beq.n	8016ef0 <__gethex+0x1f8>
 8016edc:	4553      	cmp	r3, sl
 8016ede:	dd05      	ble.n	8016eec <__gethex+0x1f4>
 8016ee0:	1eb9      	subs	r1, r7, #2
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f000 ff44 	bl	8017d70 <__any_on>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d145      	bne.n	8016f78 <__gethex+0x280>
 8016eec:	f04f 0a02 	mov.w	sl, #2
 8016ef0:	4639      	mov	r1, r7
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f7ff fe99 	bl	8016c2a <rshift>
 8016ef8:	443d      	add	r5, r7
 8016efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016efe:	42ab      	cmp	r3, r5
 8016f00:	da4c      	bge.n	8016f9c <__gethex+0x2a4>
 8016f02:	ee18 0a10 	vmov	r0, s16
 8016f06:	4621      	mov	r1, r4
 8016f08:	f000 fad2 	bl	80174b0 <_Bfree>
 8016f0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f0e:	2300      	movs	r3, #0
 8016f10:	6013      	str	r3, [r2, #0]
 8016f12:	27a3      	movs	r7, #163	; 0xa3
 8016f14:	e785      	b.n	8016e22 <__gethex+0x12a>
 8016f16:	1e73      	subs	r3, r6, #1
 8016f18:	9a05      	ldr	r2, [sp, #20]
 8016f1a:	9303      	str	r3, [sp, #12]
 8016f1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016f20:	4293      	cmp	r3, r2
 8016f22:	d019      	beq.n	8016f58 <__gethex+0x260>
 8016f24:	f1bb 0f20 	cmp.w	fp, #32
 8016f28:	d107      	bne.n	8016f3a <__gethex+0x242>
 8016f2a:	9b02      	ldr	r3, [sp, #8]
 8016f2c:	9a00      	ldr	r2, [sp, #0]
 8016f2e:	f843 2b04 	str.w	r2, [r3], #4
 8016f32:	9302      	str	r3, [sp, #8]
 8016f34:	2300      	movs	r3, #0
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	469b      	mov	fp, r3
 8016f3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016f3e:	f7ff fec6 	bl	8016cce <__hexdig_fun>
 8016f42:	9b00      	ldr	r3, [sp, #0]
 8016f44:	f000 000f 	and.w	r0, r0, #15
 8016f48:	fa00 f00b 	lsl.w	r0, r0, fp
 8016f4c:	4303      	orrs	r3, r0
 8016f4e:	9300      	str	r3, [sp, #0]
 8016f50:	f10b 0b04 	add.w	fp, fp, #4
 8016f54:	9b03      	ldr	r3, [sp, #12]
 8016f56:	e00d      	b.n	8016f74 <__gethex+0x27c>
 8016f58:	9b03      	ldr	r3, [sp, #12]
 8016f5a:	9a06      	ldr	r2, [sp, #24]
 8016f5c:	4413      	add	r3, r2
 8016f5e:	42bb      	cmp	r3, r7
 8016f60:	d3e0      	bcc.n	8016f24 <__gethex+0x22c>
 8016f62:	4618      	mov	r0, r3
 8016f64:	9901      	ldr	r1, [sp, #4]
 8016f66:	9307      	str	r3, [sp, #28]
 8016f68:	4652      	mov	r2, sl
 8016f6a:	f001 fb2c 	bl	80185c6 <strncmp>
 8016f6e:	9b07      	ldr	r3, [sp, #28]
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d1d7      	bne.n	8016f24 <__gethex+0x22c>
 8016f74:	461e      	mov	r6, r3
 8016f76:	e78b      	b.n	8016e90 <__gethex+0x198>
 8016f78:	f04f 0a03 	mov.w	sl, #3
 8016f7c:	e7b8      	b.n	8016ef0 <__gethex+0x1f8>
 8016f7e:	da0a      	bge.n	8016f96 <__gethex+0x29e>
 8016f80:	1a37      	subs	r7, r6, r0
 8016f82:	4621      	mov	r1, r4
 8016f84:	ee18 0a10 	vmov	r0, s16
 8016f88:	463a      	mov	r2, r7
 8016f8a:	f000 fcad 	bl	80178e8 <__lshift>
 8016f8e:	1bed      	subs	r5, r5, r7
 8016f90:	4604      	mov	r4, r0
 8016f92:	f100 0914 	add.w	r9, r0, #20
 8016f96:	f04f 0a00 	mov.w	sl, #0
 8016f9a:	e7ae      	b.n	8016efa <__gethex+0x202>
 8016f9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016fa0:	42a8      	cmp	r0, r5
 8016fa2:	dd72      	ble.n	801708a <__gethex+0x392>
 8016fa4:	1b45      	subs	r5, r0, r5
 8016fa6:	42ae      	cmp	r6, r5
 8016fa8:	dc36      	bgt.n	8017018 <__gethex+0x320>
 8016faa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016fae:	2b02      	cmp	r3, #2
 8016fb0:	d02a      	beq.n	8017008 <__gethex+0x310>
 8016fb2:	2b03      	cmp	r3, #3
 8016fb4:	d02c      	beq.n	8017010 <__gethex+0x318>
 8016fb6:	2b01      	cmp	r3, #1
 8016fb8:	d11c      	bne.n	8016ff4 <__gethex+0x2fc>
 8016fba:	42ae      	cmp	r6, r5
 8016fbc:	d11a      	bne.n	8016ff4 <__gethex+0x2fc>
 8016fbe:	2e01      	cmp	r6, #1
 8016fc0:	d112      	bne.n	8016fe8 <__gethex+0x2f0>
 8016fc2:	9a04      	ldr	r2, [sp, #16]
 8016fc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016fc8:	6013      	str	r3, [r2, #0]
 8016fca:	2301      	movs	r3, #1
 8016fcc:	6123      	str	r3, [r4, #16]
 8016fce:	f8c9 3000 	str.w	r3, [r9]
 8016fd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fd4:	2762      	movs	r7, #98	; 0x62
 8016fd6:	601c      	str	r4, [r3, #0]
 8016fd8:	e723      	b.n	8016e22 <__gethex+0x12a>
 8016fda:	bf00      	nop
 8016fdc:	0801e16c 	.word	0x0801e16c
 8016fe0:	0801e090 	.word	0x0801e090
 8016fe4:	0801e104 	.word	0x0801e104
 8016fe8:	1e71      	subs	r1, r6, #1
 8016fea:	4620      	mov	r0, r4
 8016fec:	f000 fec0 	bl	8017d70 <__any_on>
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d1e6      	bne.n	8016fc2 <__gethex+0x2ca>
 8016ff4:	ee18 0a10 	vmov	r0, s16
 8016ff8:	4621      	mov	r1, r4
 8016ffa:	f000 fa59 	bl	80174b0 <_Bfree>
 8016ffe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017000:	2300      	movs	r3, #0
 8017002:	6013      	str	r3, [r2, #0]
 8017004:	2750      	movs	r7, #80	; 0x50
 8017006:	e70c      	b.n	8016e22 <__gethex+0x12a>
 8017008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801700a:	2b00      	cmp	r3, #0
 801700c:	d1f2      	bne.n	8016ff4 <__gethex+0x2fc>
 801700e:	e7d8      	b.n	8016fc2 <__gethex+0x2ca>
 8017010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017012:	2b00      	cmp	r3, #0
 8017014:	d1d5      	bne.n	8016fc2 <__gethex+0x2ca>
 8017016:	e7ed      	b.n	8016ff4 <__gethex+0x2fc>
 8017018:	1e6f      	subs	r7, r5, #1
 801701a:	f1ba 0f00 	cmp.w	sl, #0
 801701e:	d131      	bne.n	8017084 <__gethex+0x38c>
 8017020:	b127      	cbz	r7, 801702c <__gethex+0x334>
 8017022:	4639      	mov	r1, r7
 8017024:	4620      	mov	r0, r4
 8017026:	f000 fea3 	bl	8017d70 <__any_on>
 801702a:	4682      	mov	sl, r0
 801702c:	117b      	asrs	r3, r7, #5
 801702e:	2101      	movs	r1, #1
 8017030:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017034:	f007 071f 	and.w	r7, r7, #31
 8017038:	fa01 f707 	lsl.w	r7, r1, r7
 801703c:	421f      	tst	r7, r3
 801703e:	4629      	mov	r1, r5
 8017040:	4620      	mov	r0, r4
 8017042:	bf18      	it	ne
 8017044:	f04a 0a02 	orrne.w	sl, sl, #2
 8017048:	1b76      	subs	r6, r6, r5
 801704a:	f7ff fdee 	bl	8016c2a <rshift>
 801704e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017052:	2702      	movs	r7, #2
 8017054:	f1ba 0f00 	cmp.w	sl, #0
 8017058:	d048      	beq.n	80170ec <__gethex+0x3f4>
 801705a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801705e:	2b02      	cmp	r3, #2
 8017060:	d015      	beq.n	801708e <__gethex+0x396>
 8017062:	2b03      	cmp	r3, #3
 8017064:	d017      	beq.n	8017096 <__gethex+0x39e>
 8017066:	2b01      	cmp	r3, #1
 8017068:	d109      	bne.n	801707e <__gethex+0x386>
 801706a:	f01a 0f02 	tst.w	sl, #2
 801706e:	d006      	beq.n	801707e <__gethex+0x386>
 8017070:	f8d9 0000 	ldr.w	r0, [r9]
 8017074:	ea4a 0a00 	orr.w	sl, sl, r0
 8017078:	f01a 0f01 	tst.w	sl, #1
 801707c:	d10e      	bne.n	801709c <__gethex+0x3a4>
 801707e:	f047 0710 	orr.w	r7, r7, #16
 8017082:	e033      	b.n	80170ec <__gethex+0x3f4>
 8017084:	f04f 0a01 	mov.w	sl, #1
 8017088:	e7d0      	b.n	801702c <__gethex+0x334>
 801708a:	2701      	movs	r7, #1
 801708c:	e7e2      	b.n	8017054 <__gethex+0x35c>
 801708e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017090:	f1c3 0301 	rsb	r3, r3, #1
 8017094:	9315      	str	r3, [sp, #84]	; 0x54
 8017096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017098:	2b00      	cmp	r3, #0
 801709a:	d0f0      	beq.n	801707e <__gethex+0x386>
 801709c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80170a0:	f104 0314 	add.w	r3, r4, #20
 80170a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80170a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80170ac:	f04f 0c00 	mov.w	ip, #0
 80170b0:	4618      	mov	r0, r3
 80170b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80170b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80170ba:	d01c      	beq.n	80170f6 <__gethex+0x3fe>
 80170bc:	3201      	adds	r2, #1
 80170be:	6002      	str	r2, [r0, #0]
 80170c0:	2f02      	cmp	r7, #2
 80170c2:	f104 0314 	add.w	r3, r4, #20
 80170c6:	d13f      	bne.n	8017148 <__gethex+0x450>
 80170c8:	f8d8 2000 	ldr.w	r2, [r8]
 80170cc:	3a01      	subs	r2, #1
 80170ce:	42b2      	cmp	r2, r6
 80170d0:	d10a      	bne.n	80170e8 <__gethex+0x3f0>
 80170d2:	1171      	asrs	r1, r6, #5
 80170d4:	2201      	movs	r2, #1
 80170d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80170da:	f006 061f 	and.w	r6, r6, #31
 80170de:	fa02 f606 	lsl.w	r6, r2, r6
 80170e2:	421e      	tst	r6, r3
 80170e4:	bf18      	it	ne
 80170e6:	4617      	movne	r7, r2
 80170e8:	f047 0720 	orr.w	r7, r7, #32
 80170ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170ee:	601c      	str	r4, [r3, #0]
 80170f0:	9b04      	ldr	r3, [sp, #16]
 80170f2:	601d      	str	r5, [r3, #0]
 80170f4:	e695      	b.n	8016e22 <__gethex+0x12a>
 80170f6:	4299      	cmp	r1, r3
 80170f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80170fc:	d8d8      	bhi.n	80170b0 <__gethex+0x3b8>
 80170fe:	68a3      	ldr	r3, [r4, #8]
 8017100:	459b      	cmp	fp, r3
 8017102:	db19      	blt.n	8017138 <__gethex+0x440>
 8017104:	6861      	ldr	r1, [r4, #4]
 8017106:	ee18 0a10 	vmov	r0, s16
 801710a:	3101      	adds	r1, #1
 801710c:	f000 f990 	bl	8017430 <_Balloc>
 8017110:	4681      	mov	r9, r0
 8017112:	b918      	cbnz	r0, 801711c <__gethex+0x424>
 8017114:	4b1a      	ldr	r3, [pc, #104]	; (8017180 <__gethex+0x488>)
 8017116:	4602      	mov	r2, r0
 8017118:	2184      	movs	r1, #132	; 0x84
 801711a:	e6a8      	b.n	8016e6e <__gethex+0x176>
 801711c:	6922      	ldr	r2, [r4, #16]
 801711e:	3202      	adds	r2, #2
 8017120:	f104 010c 	add.w	r1, r4, #12
 8017124:	0092      	lsls	r2, r2, #2
 8017126:	300c      	adds	r0, #12
 8017128:	f000 f974 	bl	8017414 <memcpy>
 801712c:	4621      	mov	r1, r4
 801712e:	ee18 0a10 	vmov	r0, s16
 8017132:	f000 f9bd 	bl	80174b0 <_Bfree>
 8017136:	464c      	mov	r4, r9
 8017138:	6923      	ldr	r3, [r4, #16]
 801713a:	1c5a      	adds	r2, r3, #1
 801713c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017140:	6122      	str	r2, [r4, #16]
 8017142:	2201      	movs	r2, #1
 8017144:	615a      	str	r2, [r3, #20]
 8017146:	e7bb      	b.n	80170c0 <__gethex+0x3c8>
 8017148:	6922      	ldr	r2, [r4, #16]
 801714a:	455a      	cmp	r2, fp
 801714c:	dd0b      	ble.n	8017166 <__gethex+0x46e>
 801714e:	2101      	movs	r1, #1
 8017150:	4620      	mov	r0, r4
 8017152:	f7ff fd6a 	bl	8016c2a <rshift>
 8017156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801715a:	3501      	adds	r5, #1
 801715c:	42ab      	cmp	r3, r5
 801715e:	f6ff aed0 	blt.w	8016f02 <__gethex+0x20a>
 8017162:	2701      	movs	r7, #1
 8017164:	e7c0      	b.n	80170e8 <__gethex+0x3f0>
 8017166:	f016 061f 	ands.w	r6, r6, #31
 801716a:	d0fa      	beq.n	8017162 <__gethex+0x46a>
 801716c:	4453      	add	r3, sl
 801716e:	f1c6 0620 	rsb	r6, r6, #32
 8017172:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017176:	f000 fa4d 	bl	8017614 <__hi0bits>
 801717a:	42b0      	cmp	r0, r6
 801717c:	dbe7      	blt.n	801714e <__gethex+0x456>
 801717e:	e7f0      	b.n	8017162 <__gethex+0x46a>
 8017180:	0801e090 	.word	0x0801e090

08017184 <L_shift>:
 8017184:	f1c2 0208 	rsb	r2, r2, #8
 8017188:	0092      	lsls	r2, r2, #2
 801718a:	b570      	push	{r4, r5, r6, lr}
 801718c:	f1c2 0620 	rsb	r6, r2, #32
 8017190:	6843      	ldr	r3, [r0, #4]
 8017192:	6804      	ldr	r4, [r0, #0]
 8017194:	fa03 f506 	lsl.w	r5, r3, r6
 8017198:	432c      	orrs	r4, r5
 801719a:	40d3      	lsrs	r3, r2
 801719c:	6004      	str	r4, [r0, #0]
 801719e:	f840 3f04 	str.w	r3, [r0, #4]!
 80171a2:	4288      	cmp	r0, r1
 80171a4:	d3f4      	bcc.n	8017190 <L_shift+0xc>
 80171a6:	bd70      	pop	{r4, r5, r6, pc}

080171a8 <__match>:
 80171a8:	b530      	push	{r4, r5, lr}
 80171aa:	6803      	ldr	r3, [r0, #0]
 80171ac:	3301      	adds	r3, #1
 80171ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171b2:	b914      	cbnz	r4, 80171ba <__match+0x12>
 80171b4:	6003      	str	r3, [r0, #0]
 80171b6:	2001      	movs	r0, #1
 80171b8:	bd30      	pop	{r4, r5, pc}
 80171ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80171c2:	2d19      	cmp	r5, #25
 80171c4:	bf98      	it	ls
 80171c6:	3220      	addls	r2, #32
 80171c8:	42a2      	cmp	r2, r4
 80171ca:	d0f0      	beq.n	80171ae <__match+0x6>
 80171cc:	2000      	movs	r0, #0
 80171ce:	e7f3      	b.n	80171b8 <__match+0x10>

080171d0 <__hexnan>:
 80171d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d4:	680b      	ldr	r3, [r1, #0]
 80171d6:	115e      	asrs	r6, r3, #5
 80171d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80171dc:	f013 031f 	ands.w	r3, r3, #31
 80171e0:	b087      	sub	sp, #28
 80171e2:	bf18      	it	ne
 80171e4:	3604      	addne	r6, #4
 80171e6:	2500      	movs	r5, #0
 80171e8:	1f37      	subs	r7, r6, #4
 80171ea:	4690      	mov	r8, r2
 80171ec:	6802      	ldr	r2, [r0, #0]
 80171ee:	9301      	str	r3, [sp, #4]
 80171f0:	4682      	mov	sl, r0
 80171f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80171f6:	46b9      	mov	r9, r7
 80171f8:	463c      	mov	r4, r7
 80171fa:	9502      	str	r5, [sp, #8]
 80171fc:	46ab      	mov	fp, r5
 80171fe:	7851      	ldrb	r1, [r2, #1]
 8017200:	1c53      	adds	r3, r2, #1
 8017202:	9303      	str	r3, [sp, #12]
 8017204:	b341      	cbz	r1, 8017258 <__hexnan+0x88>
 8017206:	4608      	mov	r0, r1
 8017208:	9205      	str	r2, [sp, #20]
 801720a:	9104      	str	r1, [sp, #16]
 801720c:	f7ff fd5f 	bl	8016cce <__hexdig_fun>
 8017210:	2800      	cmp	r0, #0
 8017212:	d14f      	bne.n	80172b4 <__hexnan+0xe4>
 8017214:	9904      	ldr	r1, [sp, #16]
 8017216:	9a05      	ldr	r2, [sp, #20]
 8017218:	2920      	cmp	r1, #32
 801721a:	d818      	bhi.n	801724e <__hexnan+0x7e>
 801721c:	9b02      	ldr	r3, [sp, #8]
 801721e:	459b      	cmp	fp, r3
 8017220:	dd13      	ble.n	801724a <__hexnan+0x7a>
 8017222:	454c      	cmp	r4, r9
 8017224:	d206      	bcs.n	8017234 <__hexnan+0x64>
 8017226:	2d07      	cmp	r5, #7
 8017228:	dc04      	bgt.n	8017234 <__hexnan+0x64>
 801722a:	462a      	mov	r2, r5
 801722c:	4649      	mov	r1, r9
 801722e:	4620      	mov	r0, r4
 8017230:	f7ff ffa8 	bl	8017184 <L_shift>
 8017234:	4544      	cmp	r4, r8
 8017236:	d950      	bls.n	80172da <__hexnan+0x10a>
 8017238:	2300      	movs	r3, #0
 801723a:	f1a4 0904 	sub.w	r9, r4, #4
 801723e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017242:	f8cd b008 	str.w	fp, [sp, #8]
 8017246:	464c      	mov	r4, r9
 8017248:	461d      	mov	r5, r3
 801724a:	9a03      	ldr	r2, [sp, #12]
 801724c:	e7d7      	b.n	80171fe <__hexnan+0x2e>
 801724e:	2929      	cmp	r1, #41	; 0x29
 8017250:	d156      	bne.n	8017300 <__hexnan+0x130>
 8017252:	3202      	adds	r2, #2
 8017254:	f8ca 2000 	str.w	r2, [sl]
 8017258:	f1bb 0f00 	cmp.w	fp, #0
 801725c:	d050      	beq.n	8017300 <__hexnan+0x130>
 801725e:	454c      	cmp	r4, r9
 8017260:	d206      	bcs.n	8017270 <__hexnan+0xa0>
 8017262:	2d07      	cmp	r5, #7
 8017264:	dc04      	bgt.n	8017270 <__hexnan+0xa0>
 8017266:	462a      	mov	r2, r5
 8017268:	4649      	mov	r1, r9
 801726a:	4620      	mov	r0, r4
 801726c:	f7ff ff8a 	bl	8017184 <L_shift>
 8017270:	4544      	cmp	r4, r8
 8017272:	d934      	bls.n	80172de <__hexnan+0x10e>
 8017274:	f1a8 0204 	sub.w	r2, r8, #4
 8017278:	4623      	mov	r3, r4
 801727a:	f853 1b04 	ldr.w	r1, [r3], #4
 801727e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017282:	429f      	cmp	r7, r3
 8017284:	d2f9      	bcs.n	801727a <__hexnan+0xaa>
 8017286:	1b3b      	subs	r3, r7, r4
 8017288:	f023 0303 	bic.w	r3, r3, #3
 801728c:	3304      	adds	r3, #4
 801728e:	3401      	adds	r4, #1
 8017290:	3e03      	subs	r6, #3
 8017292:	42b4      	cmp	r4, r6
 8017294:	bf88      	it	hi
 8017296:	2304      	movhi	r3, #4
 8017298:	4443      	add	r3, r8
 801729a:	2200      	movs	r2, #0
 801729c:	f843 2b04 	str.w	r2, [r3], #4
 80172a0:	429f      	cmp	r7, r3
 80172a2:	d2fb      	bcs.n	801729c <__hexnan+0xcc>
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	b91b      	cbnz	r3, 80172b0 <__hexnan+0xe0>
 80172a8:	4547      	cmp	r7, r8
 80172aa:	d127      	bne.n	80172fc <__hexnan+0x12c>
 80172ac:	2301      	movs	r3, #1
 80172ae:	603b      	str	r3, [r7, #0]
 80172b0:	2005      	movs	r0, #5
 80172b2:	e026      	b.n	8017302 <__hexnan+0x132>
 80172b4:	3501      	adds	r5, #1
 80172b6:	2d08      	cmp	r5, #8
 80172b8:	f10b 0b01 	add.w	fp, fp, #1
 80172bc:	dd06      	ble.n	80172cc <__hexnan+0xfc>
 80172be:	4544      	cmp	r4, r8
 80172c0:	d9c3      	bls.n	801724a <__hexnan+0x7a>
 80172c2:	2300      	movs	r3, #0
 80172c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80172c8:	2501      	movs	r5, #1
 80172ca:	3c04      	subs	r4, #4
 80172cc:	6822      	ldr	r2, [r4, #0]
 80172ce:	f000 000f 	and.w	r0, r0, #15
 80172d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80172d6:	6022      	str	r2, [r4, #0]
 80172d8:	e7b7      	b.n	801724a <__hexnan+0x7a>
 80172da:	2508      	movs	r5, #8
 80172dc:	e7b5      	b.n	801724a <__hexnan+0x7a>
 80172de:	9b01      	ldr	r3, [sp, #4]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d0df      	beq.n	80172a4 <__hexnan+0xd4>
 80172e4:	f04f 32ff 	mov.w	r2, #4294967295
 80172e8:	f1c3 0320 	rsb	r3, r3, #32
 80172ec:	fa22 f303 	lsr.w	r3, r2, r3
 80172f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80172f4:	401a      	ands	r2, r3
 80172f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80172fa:	e7d3      	b.n	80172a4 <__hexnan+0xd4>
 80172fc:	3f04      	subs	r7, #4
 80172fe:	e7d1      	b.n	80172a4 <__hexnan+0xd4>
 8017300:	2004      	movs	r0, #4
 8017302:	b007      	add	sp, #28
 8017304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017308 <_localeconv_r>:
 8017308:	4800      	ldr	r0, [pc, #0]	; (801730c <_localeconv_r+0x4>)
 801730a:	4770      	bx	lr
 801730c:	20000388 	.word	0x20000388

08017310 <__retarget_lock_init_recursive>:
 8017310:	4770      	bx	lr

08017312 <__retarget_lock_acquire_recursive>:
 8017312:	4770      	bx	lr

08017314 <__retarget_lock_release_recursive>:
 8017314:	4770      	bx	lr

08017316 <__swhatbuf_r>:
 8017316:	b570      	push	{r4, r5, r6, lr}
 8017318:	460e      	mov	r6, r1
 801731a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801731e:	2900      	cmp	r1, #0
 8017320:	b096      	sub	sp, #88	; 0x58
 8017322:	4614      	mov	r4, r2
 8017324:	461d      	mov	r5, r3
 8017326:	da08      	bge.n	801733a <__swhatbuf_r+0x24>
 8017328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801732c:	2200      	movs	r2, #0
 801732e:	602a      	str	r2, [r5, #0]
 8017330:	061a      	lsls	r2, r3, #24
 8017332:	d410      	bmi.n	8017356 <__swhatbuf_r+0x40>
 8017334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017338:	e00e      	b.n	8017358 <__swhatbuf_r+0x42>
 801733a:	466a      	mov	r2, sp
 801733c:	f001 f9b6 	bl	80186ac <_fstat_r>
 8017340:	2800      	cmp	r0, #0
 8017342:	dbf1      	blt.n	8017328 <__swhatbuf_r+0x12>
 8017344:	9a01      	ldr	r2, [sp, #4]
 8017346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801734a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801734e:	425a      	negs	r2, r3
 8017350:	415a      	adcs	r2, r3
 8017352:	602a      	str	r2, [r5, #0]
 8017354:	e7ee      	b.n	8017334 <__swhatbuf_r+0x1e>
 8017356:	2340      	movs	r3, #64	; 0x40
 8017358:	2000      	movs	r0, #0
 801735a:	6023      	str	r3, [r4, #0]
 801735c:	b016      	add	sp, #88	; 0x58
 801735e:	bd70      	pop	{r4, r5, r6, pc}

08017360 <__smakebuf_r>:
 8017360:	898b      	ldrh	r3, [r1, #12]
 8017362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017364:	079d      	lsls	r5, r3, #30
 8017366:	4606      	mov	r6, r0
 8017368:	460c      	mov	r4, r1
 801736a:	d507      	bpl.n	801737c <__smakebuf_r+0x1c>
 801736c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017370:	6023      	str	r3, [r4, #0]
 8017372:	6123      	str	r3, [r4, #16]
 8017374:	2301      	movs	r3, #1
 8017376:	6163      	str	r3, [r4, #20]
 8017378:	b002      	add	sp, #8
 801737a:	bd70      	pop	{r4, r5, r6, pc}
 801737c:	ab01      	add	r3, sp, #4
 801737e:	466a      	mov	r2, sp
 8017380:	f7ff ffc9 	bl	8017316 <__swhatbuf_r>
 8017384:	9900      	ldr	r1, [sp, #0]
 8017386:	4605      	mov	r5, r0
 8017388:	4630      	mov	r0, r6
 801738a:	f000 fd95 	bl	8017eb8 <_malloc_r>
 801738e:	b948      	cbnz	r0, 80173a4 <__smakebuf_r+0x44>
 8017390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017394:	059a      	lsls	r2, r3, #22
 8017396:	d4ef      	bmi.n	8017378 <__smakebuf_r+0x18>
 8017398:	f023 0303 	bic.w	r3, r3, #3
 801739c:	f043 0302 	orr.w	r3, r3, #2
 80173a0:	81a3      	strh	r3, [r4, #12]
 80173a2:	e7e3      	b.n	801736c <__smakebuf_r+0xc>
 80173a4:	4b0d      	ldr	r3, [pc, #52]	; (80173dc <__smakebuf_r+0x7c>)
 80173a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80173a8:	89a3      	ldrh	r3, [r4, #12]
 80173aa:	6020      	str	r0, [r4, #0]
 80173ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173b0:	81a3      	strh	r3, [r4, #12]
 80173b2:	9b00      	ldr	r3, [sp, #0]
 80173b4:	6163      	str	r3, [r4, #20]
 80173b6:	9b01      	ldr	r3, [sp, #4]
 80173b8:	6120      	str	r0, [r4, #16]
 80173ba:	b15b      	cbz	r3, 80173d4 <__smakebuf_r+0x74>
 80173bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173c0:	4630      	mov	r0, r6
 80173c2:	f001 f985 	bl	80186d0 <_isatty_r>
 80173c6:	b128      	cbz	r0, 80173d4 <__smakebuf_r+0x74>
 80173c8:	89a3      	ldrh	r3, [r4, #12]
 80173ca:	f023 0303 	bic.w	r3, r3, #3
 80173ce:	f043 0301 	orr.w	r3, r3, #1
 80173d2:	81a3      	strh	r3, [r4, #12]
 80173d4:	89a0      	ldrh	r0, [r4, #12]
 80173d6:	4305      	orrs	r5, r0
 80173d8:	81a5      	strh	r5, [r4, #12]
 80173da:	e7cd      	b.n	8017378 <__smakebuf_r+0x18>
 80173dc:	08016a89 	.word	0x08016a89

080173e0 <malloc>:
 80173e0:	4b02      	ldr	r3, [pc, #8]	; (80173ec <malloc+0xc>)
 80173e2:	4601      	mov	r1, r0
 80173e4:	6818      	ldr	r0, [r3, #0]
 80173e6:	f000 bd67 	b.w	8017eb8 <_malloc_r>
 80173ea:	bf00      	nop
 80173ec:	20000230 	.word	0x20000230

080173f0 <__ascii_mbtowc>:
 80173f0:	b082      	sub	sp, #8
 80173f2:	b901      	cbnz	r1, 80173f6 <__ascii_mbtowc+0x6>
 80173f4:	a901      	add	r1, sp, #4
 80173f6:	b142      	cbz	r2, 801740a <__ascii_mbtowc+0x1a>
 80173f8:	b14b      	cbz	r3, 801740e <__ascii_mbtowc+0x1e>
 80173fa:	7813      	ldrb	r3, [r2, #0]
 80173fc:	600b      	str	r3, [r1, #0]
 80173fe:	7812      	ldrb	r2, [r2, #0]
 8017400:	1e10      	subs	r0, r2, #0
 8017402:	bf18      	it	ne
 8017404:	2001      	movne	r0, #1
 8017406:	b002      	add	sp, #8
 8017408:	4770      	bx	lr
 801740a:	4610      	mov	r0, r2
 801740c:	e7fb      	b.n	8017406 <__ascii_mbtowc+0x16>
 801740e:	f06f 0001 	mvn.w	r0, #1
 8017412:	e7f8      	b.n	8017406 <__ascii_mbtowc+0x16>

08017414 <memcpy>:
 8017414:	440a      	add	r2, r1
 8017416:	4291      	cmp	r1, r2
 8017418:	f100 33ff 	add.w	r3, r0, #4294967295
 801741c:	d100      	bne.n	8017420 <memcpy+0xc>
 801741e:	4770      	bx	lr
 8017420:	b510      	push	{r4, lr}
 8017422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017426:	f803 4f01 	strb.w	r4, [r3, #1]!
 801742a:	4291      	cmp	r1, r2
 801742c:	d1f9      	bne.n	8017422 <memcpy+0xe>
 801742e:	bd10      	pop	{r4, pc}

08017430 <_Balloc>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017434:	4604      	mov	r4, r0
 8017436:	460d      	mov	r5, r1
 8017438:	b976      	cbnz	r6, 8017458 <_Balloc+0x28>
 801743a:	2010      	movs	r0, #16
 801743c:	f7ff ffd0 	bl	80173e0 <malloc>
 8017440:	4602      	mov	r2, r0
 8017442:	6260      	str	r0, [r4, #36]	; 0x24
 8017444:	b920      	cbnz	r0, 8017450 <_Balloc+0x20>
 8017446:	4b18      	ldr	r3, [pc, #96]	; (80174a8 <_Balloc+0x78>)
 8017448:	4818      	ldr	r0, [pc, #96]	; (80174ac <_Balloc+0x7c>)
 801744a:	2166      	movs	r1, #102	; 0x66
 801744c:	f001 f8ee 	bl	801862c <__assert_func>
 8017450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017454:	6006      	str	r6, [r0, #0]
 8017456:	60c6      	str	r6, [r0, #12]
 8017458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801745a:	68f3      	ldr	r3, [r6, #12]
 801745c:	b183      	cbz	r3, 8017480 <_Balloc+0x50>
 801745e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017460:	68db      	ldr	r3, [r3, #12]
 8017462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017466:	b9b8      	cbnz	r0, 8017498 <_Balloc+0x68>
 8017468:	2101      	movs	r1, #1
 801746a:	fa01 f605 	lsl.w	r6, r1, r5
 801746e:	1d72      	adds	r2, r6, #5
 8017470:	0092      	lsls	r2, r2, #2
 8017472:	4620      	mov	r0, r4
 8017474:	f000 fc9d 	bl	8017db2 <_calloc_r>
 8017478:	b160      	cbz	r0, 8017494 <_Balloc+0x64>
 801747a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801747e:	e00e      	b.n	801749e <_Balloc+0x6e>
 8017480:	2221      	movs	r2, #33	; 0x21
 8017482:	2104      	movs	r1, #4
 8017484:	4620      	mov	r0, r4
 8017486:	f000 fc94 	bl	8017db2 <_calloc_r>
 801748a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801748c:	60f0      	str	r0, [r6, #12]
 801748e:	68db      	ldr	r3, [r3, #12]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d1e4      	bne.n	801745e <_Balloc+0x2e>
 8017494:	2000      	movs	r0, #0
 8017496:	bd70      	pop	{r4, r5, r6, pc}
 8017498:	6802      	ldr	r2, [r0, #0]
 801749a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801749e:	2300      	movs	r3, #0
 80174a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80174a4:	e7f7      	b.n	8017496 <_Balloc+0x66>
 80174a6:	bf00      	nop
 80174a8:	0801e01e 	.word	0x0801e01e
 80174ac:	0801e180 	.word	0x0801e180

080174b0 <_Bfree>:
 80174b0:	b570      	push	{r4, r5, r6, lr}
 80174b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80174b4:	4605      	mov	r5, r0
 80174b6:	460c      	mov	r4, r1
 80174b8:	b976      	cbnz	r6, 80174d8 <_Bfree+0x28>
 80174ba:	2010      	movs	r0, #16
 80174bc:	f7ff ff90 	bl	80173e0 <malloc>
 80174c0:	4602      	mov	r2, r0
 80174c2:	6268      	str	r0, [r5, #36]	; 0x24
 80174c4:	b920      	cbnz	r0, 80174d0 <_Bfree+0x20>
 80174c6:	4b09      	ldr	r3, [pc, #36]	; (80174ec <_Bfree+0x3c>)
 80174c8:	4809      	ldr	r0, [pc, #36]	; (80174f0 <_Bfree+0x40>)
 80174ca:	218a      	movs	r1, #138	; 0x8a
 80174cc:	f001 f8ae 	bl	801862c <__assert_func>
 80174d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80174d4:	6006      	str	r6, [r0, #0]
 80174d6:	60c6      	str	r6, [r0, #12]
 80174d8:	b13c      	cbz	r4, 80174ea <_Bfree+0x3a>
 80174da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80174dc:	6862      	ldr	r2, [r4, #4]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80174e4:	6021      	str	r1, [r4, #0]
 80174e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80174ea:	bd70      	pop	{r4, r5, r6, pc}
 80174ec:	0801e01e 	.word	0x0801e01e
 80174f0:	0801e180 	.word	0x0801e180

080174f4 <__multadd>:
 80174f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f8:	690d      	ldr	r5, [r1, #16]
 80174fa:	4607      	mov	r7, r0
 80174fc:	460c      	mov	r4, r1
 80174fe:	461e      	mov	r6, r3
 8017500:	f101 0c14 	add.w	ip, r1, #20
 8017504:	2000      	movs	r0, #0
 8017506:	f8dc 3000 	ldr.w	r3, [ip]
 801750a:	b299      	uxth	r1, r3
 801750c:	fb02 6101 	mla	r1, r2, r1, r6
 8017510:	0c1e      	lsrs	r6, r3, #16
 8017512:	0c0b      	lsrs	r3, r1, #16
 8017514:	fb02 3306 	mla	r3, r2, r6, r3
 8017518:	b289      	uxth	r1, r1
 801751a:	3001      	adds	r0, #1
 801751c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017520:	4285      	cmp	r5, r0
 8017522:	f84c 1b04 	str.w	r1, [ip], #4
 8017526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801752a:	dcec      	bgt.n	8017506 <__multadd+0x12>
 801752c:	b30e      	cbz	r6, 8017572 <__multadd+0x7e>
 801752e:	68a3      	ldr	r3, [r4, #8]
 8017530:	42ab      	cmp	r3, r5
 8017532:	dc19      	bgt.n	8017568 <__multadd+0x74>
 8017534:	6861      	ldr	r1, [r4, #4]
 8017536:	4638      	mov	r0, r7
 8017538:	3101      	adds	r1, #1
 801753a:	f7ff ff79 	bl	8017430 <_Balloc>
 801753e:	4680      	mov	r8, r0
 8017540:	b928      	cbnz	r0, 801754e <__multadd+0x5a>
 8017542:	4602      	mov	r2, r0
 8017544:	4b0c      	ldr	r3, [pc, #48]	; (8017578 <__multadd+0x84>)
 8017546:	480d      	ldr	r0, [pc, #52]	; (801757c <__multadd+0x88>)
 8017548:	21b5      	movs	r1, #181	; 0xb5
 801754a:	f001 f86f 	bl	801862c <__assert_func>
 801754e:	6922      	ldr	r2, [r4, #16]
 8017550:	3202      	adds	r2, #2
 8017552:	f104 010c 	add.w	r1, r4, #12
 8017556:	0092      	lsls	r2, r2, #2
 8017558:	300c      	adds	r0, #12
 801755a:	f7ff ff5b 	bl	8017414 <memcpy>
 801755e:	4621      	mov	r1, r4
 8017560:	4638      	mov	r0, r7
 8017562:	f7ff ffa5 	bl	80174b0 <_Bfree>
 8017566:	4644      	mov	r4, r8
 8017568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801756c:	3501      	adds	r5, #1
 801756e:	615e      	str	r6, [r3, #20]
 8017570:	6125      	str	r5, [r4, #16]
 8017572:	4620      	mov	r0, r4
 8017574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017578:	0801e090 	.word	0x0801e090
 801757c:	0801e180 	.word	0x0801e180

08017580 <__s2b>:
 8017580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017584:	460c      	mov	r4, r1
 8017586:	4615      	mov	r5, r2
 8017588:	461f      	mov	r7, r3
 801758a:	2209      	movs	r2, #9
 801758c:	3308      	adds	r3, #8
 801758e:	4606      	mov	r6, r0
 8017590:	fb93 f3f2 	sdiv	r3, r3, r2
 8017594:	2100      	movs	r1, #0
 8017596:	2201      	movs	r2, #1
 8017598:	429a      	cmp	r2, r3
 801759a:	db09      	blt.n	80175b0 <__s2b+0x30>
 801759c:	4630      	mov	r0, r6
 801759e:	f7ff ff47 	bl	8017430 <_Balloc>
 80175a2:	b940      	cbnz	r0, 80175b6 <__s2b+0x36>
 80175a4:	4602      	mov	r2, r0
 80175a6:	4b19      	ldr	r3, [pc, #100]	; (801760c <__s2b+0x8c>)
 80175a8:	4819      	ldr	r0, [pc, #100]	; (8017610 <__s2b+0x90>)
 80175aa:	21ce      	movs	r1, #206	; 0xce
 80175ac:	f001 f83e 	bl	801862c <__assert_func>
 80175b0:	0052      	lsls	r2, r2, #1
 80175b2:	3101      	adds	r1, #1
 80175b4:	e7f0      	b.n	8017598 <__s2b+0x18>
 80175b6:	9b08      	ldr	r3, [sp, #32]
 80175b8:	6143      	str	r3, [r0, #20]
 80175ba:	2d09      	cmp	r5, #9
 80175bc:	f04f 0301 	mov.w	r3, #1
 80175c0:	6103      	str	r3, [r0, #16]
 80175c2:	dd16      	ble.n	80175f2 <__s2b+0x72>
 80175c4:	f104 0909 	add.w	r9, r4, #9
 80175c8:	46c8      	mov	r8, r9
 80175ca:	442c      	add	r4, r5
 80175cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80175d0:	4601      	mov	r1, r0
 80175d2:	3b30      	subs	r3, #48	; 0x30
 80175d4:	220a      	movs	r2, #10
 80175d6:	4630      	mov	r0, r6
 80175d8:	f7ff ff8c 	bl	80174f4 <__multadd>
 80175dc:	45a0      	cmp	r8, r4
 80175de:	d1f5      	bne.n	80175cc <__s2b+0x4c>
 80175e0:	f1a5 0408 	sub.w	r4, r5, #8
 80175e4:	444c      	add	r4, r9
 80175e6:	1b2d      	subs	r5, r5, r4
 80175e8:	1963      	adds	r3, r4, r5
 80175ea:	42bb      	cmp	r3, r7
 80175ec:	db04      	blt.n	80175f8 <__s2b+0x78>
 80175ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175f2:	340a      	adds	r4, #10
 80175f4:	2509      	movs	r5, #9
 80175f6:	e7f6      	b.n	80175e6 <__s2b+0x66>
 80175f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80175fc:	4601      	mov	r1, r0
 80175fe:	3b30      	subs	r3, #48	; 0x30
 8017600:	220a      	movs	r2, #10
 8017602:	4630      	mov	r0, r6
 8017604:	f7ff ff76 	bl	80174f4 <__multadd>
 8017608:	e7ee      	b.n	80175e8 <__s2b+0x68>
 801760a:	bf00      	nop
 801760c:	0801e090 	.word	0x0801e090
 8017610:	0801e180 	.word	0x0801e180

08017614 <__hi0bits>:
 8017614:	0c03      	lsrs	r3, r0, #16
 8017616:	041b      	lsls	r3, r3, #16
 8017618:	b9d3      	cbnz	r3, 8017650 <__hi0bits+0x3c>
 801761a:	0400      	lsls	r0, r0, #16
 801761c:	2310      	movs	r3, #16
 801761e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017622:	bf04      	itt	eq
 8017624:	0200      	lsleq	r0, r0, #8
 8017626:	3308      	addeq	r3, #8
 8017628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801762c:	bf04      	itt	eq
 801762e:	0100      	lsleq	r0, r0, #4
 8017630:	3304      	addeq	r3, #4
 8017632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017636:	bf04      	itt	eq
 8017638:	0080      	lsleq	r0, r0, #2
 801763a:	3302      	addeq	r3, #2
 801763c:	2800      	cmp	r0, #0
 801763e:	db05      	blt.n	801764c <__hi0bits+0x38>
 8017640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017644:	f103 0301 	add.w	r3, r3, #1
 8017648:	bf08      	it	eq
 801764a:	2320      	moveq	r3, #32
 801764c:	4618      	mov	r0, r3
 801764e:	4770      	bx	lr
 8017650:	2300      	movs	r3, #0
 8017652:	e7e4      	b.n	801761e <__hi0bits+0xa>

08017654 <__lo0bits>:
 8017654:	6803      	ldr	r3, [r0, #0]
 8017656:	f013 0207 	ands.w	r2, r3, #7
 801765a:	4601      	mov	r1, r0
 801765c:	d00b      	beq.n	8017676 <__lo0bits+0x22>
 801765e:	07da      	lsls	r2, r3, #31
 8017660:	d423      	bmi.n	80176aa <__lo0bits+0x56>
 8017662:	0798      	lsls	r0, r3, #30
 8017664:	bf49      	itett	mi
 8017666:	085b      	lsrmi	r3, r3, #1
 8017668:	089b      	lsrpl	r3, r3, #2
 801766a:	2001      	movmi	r0, #1
 801766c:	600b      	strmi	r3, [r1, #0]
 801766e:	bf5c      	itt	pl
 8017670:	600b      	strpl	r3, [r1, #0]
 8017672:	2002      	movpl	r0, #2
 8017674:	4770      	bx	lr
 8017676:	b298      	uxth	r0, r3
 8017678:	b9a8      	cbnz	r0, 80176a6 <__lo0bits+0x52>
 801767a:	0c1b      	lsrs	r3, r3, #16
 801767c:	2010      	movs	r0, #16
 801767e:	b2da      	uxtb	r2, r3
 8017680:	b90a      	cbnz	r2, 8017686 <__lo0bits+0x32>
 8017682:	3008      	adds	r0, #8
 8017684:	0a1b      	lsrs	r3, r3, #8
 8017686:	071a      	lsls	r2, r3, #28
 8017688:	bf04      	itt	eq
 801768a:	091b      	lsreq	r3, r3, #4
 801768c:	3004      	addeq	r0, #4
 801768e:	079a      	lsls	r2, r3, #30
 8017690:	bf04      	itt	eq
 8017692:	089b      	lsreq	r3, r3, #2
 8017694:	3002      	addeq	r0, #2
 8017696:	07da      	lsls	r2, r3, #31
 8017698:	d403      	bmi.n	80176a2 <__lo0bits+0x4e>
 801769a:	085b      	lsrs	r3, r3, #1
 801769c:	f100 0001 	add.w	r0, r0, #1
 80176a0:	d005      	beq.n	80176ae <__lo0bits+0x5a>
 80176a2:	600b      	str	r3, [r1, #0]
 80176a4:	4770      	bx	lr
 80176a6:	4610      	mov	r0, r2
 80176a8:	e7e9      	b.n	801767e <__lo0bits+0x2a>
 80176aa:	2000      	movs	r0, #0
 80176ac:	4770      	bx	lr
 80176ae:	2020      	movs	r0, #32
 80176b0:	4770      	bx	lr
	...

080176b4 <__i2b>:
 80176b4:	b510      	push	{r4, lr}
 80176b6:	460c      	mov	r4, r1
 80176b8:	2101      	movs	r1, #1
 80176ba:	f7ff feb9 	bl	8017430 <_Balloc>
 80176be:	4602      	mov	r2, r0
 80176c0:	b928      	cbnz	r0, 80176ce <__i2b+0x1a>
 80176c2:	4b05      	ldr	r3, [pc, #20]	; (80176d8 <__i2b+0x24>)
 80176c4:	4805      	ldr	r0, [pc, #20]	; (80176dc <__i2b+0x28>)
 80176c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80176ca:	f000 ffaf 	bl	801862c <__assert_func>
 80176ce:	2301      	movs	r3, #1
 80176d0:	6144      	str	r4, [r0, #20]
 80176d2:	6103      	str	r3, [r0, #16]
 80176d4:	bd10      	pop	{r4, pc}
 80176d6:	bf00      	nop
 80176d8:	0801e090 	.word	0x0801e090
 80176dc:	0801e180 	.word	0x0801e180

080176e0 <__multiply>:
 80176e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e4:	4691      	mov	r9, r2
 80176e6:	690a      	ldr	r2, [r1, #16]
 80176e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80176ec:	429a      	cmp	r2, r3
 80176ee:	bfb8      	it	lt
 80176f0:	460b      	movlt	r3, r1
 80176f2:	460c      	mov	r4, r1
 80176f4:	bfbc      	itt	lt
 80176f6:	464c      	movlt	r4, r9
 80176f8:	4699      	movlt	r9, r3
 80176fa:	6927      	ldr	r7, [r4, #16]
 80176fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017700:	68a3      	ldr	r3, [r4, #8]
 8017702:	6861      	ldr	r1, [r4, #4]
 8017704:	eb07 060a 	add.w	r6, r7, sl
 8017708:	42b3      	cmp	r3, r6
 801770a:	b085      	sub	sp, #20
 801770c:	bfb8      	it	lt
 801770e:	3101      	addlt	r1, #1
 8017710:	f7ff fe8e 	bl	8017430 <_Balloc>
 8017714:	b930      	cbnz	r0, 8017724 <__multiply+0x44>
 8017716:	4602      	mov	r2, r0
 8017718:	4b44      	ldr	r3, [pc, #272]	; (801782c <__multiply+0x14c>)
 801771a:	4845      	ldr	r0, [pc, #276]	; (8017830 <__multiply+0x150>)
 801771c:	f240 115d 	movw	r1, #349	; 0x15d
 8017720:	f000 ff84 	bl	801862c <__assert_func>
 8017724:	f100 0514 	add.w	r5, r0, #20
 8017728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801772c:	462b      	mov	r3, r5
 801772e:	2200      	movs	r2, #0
 8017730:	4543      	cmp	r3, r8
 8017732:	d321      	bcc.n	8017778 <__multiply+0x98>
 8017734:	f104 0314 	add.w	r3, r4, #20
 8017738:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801773c:	f109 0314 	add.w	r3, r9, #20
 8017740:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017744:	9202      	str	r2, [sp, #8]
 8017746:	1b3a      	subs	r2, r7, r4
 8017748:	3a15      	subs	r2, #21
 801774a:	f022 0203 	bic.w	r2, r2, #3
 801774e:	3204      	adds	r2, #4
 8017750:	f104 0115 	add.w	r1, r4, #21
 8017754:	428f      	cmp	r7, r1
 8017756:	bf38      	it	cc
 8017758:	2204      	movcc	r2, #4
 801775a:	9201      	str	r2, [sp, #4]
 801775c:	9a02      	ldr	r2, [sp, #8]
 801775e:	9303      	str	r3, [sp, #12]
 8017760:	429a      	cmp	r2, r3
 8017762:	d80c      	bhi.n	801777e <__multiply+0x9e>
 8017764:	2e00      	cmp	r6, #0
 8017766:	dd03      	ble.n	8017770 <__multiply+0x90>
 8017768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801776c:	2b00      	cmp	r3, #0
 801776e:	d05a      	beq.n	8017826 <__multiply+0x146>
 8017770:	6106      	str	r6, [r0, #16]
 8017772:	b005      	add	sp, #20
 8017774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017778:	f843 2b04 	str.w	r2, [r3], #4
 801777c:	e7d8      	b.n	8017730 <__multiply+0x50>
 801777e:	f8b3 a000 	ldrh.w	sl, [r3]
 8017782:	f1ba 0f00 	cmp.w	sl, #0
 8017786:	d024      	beq.n	80177d2 <__multiply+0xf2>
 8017788:	f104 0e14 	add.w	lr, r4, #20
 801778c:	46a9      	mov	r9, r5
 801778e:	f04f 0c00 	mov.w	ip, #0
 8017792:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017796:	f8d9 1000 	ldr.w	r1, [r9]
 801779a:	fa1f fb82 	uxth.w	fp, r2
 801779e:	b289      	uxth	r1, r1
 80177a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80177a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80177a8:	f8d9 2000 	ldr.w	r2, [r9]
 80177ac:	4461      	add	r1, ip
 80177ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80177b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80177b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80177ba:	b289      	uxth	r1, r1
 80177bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80177c0:	4577      	cmp	r7, lr
 80177c2:	f849 1b04 	str.w	r1, [r9], #4
 80177c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80177ca:	d8e2      	bhi.n	8017792 <__multiply+0xb2>
 80177cc:	9a01      	ldr	r2, [sp, #4]
 80177ce:	f845 c002 	str.w	ip, [r5, r2]
 80177d2:	9a03      	ldr	r2, [sp, #12]
 80177d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80177d8:	3304      	adds	r3, #4
 80177da:	f1b9 0f00 	cmp.w	r9, #0
 80177de:	d020      	beq.n	8017822 <__multiply+0x142>
 80177e0:	6829      	ldr	r1, [r5, #0]
 80177e2:	f104 0c14 	add.w	ip, r4, #20
 80177e6:	46ae      	mov	lr, r5
 80177e8:	f04f 0a00 	mov.w	sl, #0
 80177ec:	f8bc b000 	ldrh.w	fp, [ip]
 80177f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80177f4:	fb09 220b 	mla	r2, r9, fp, r2
 80177f8:	4492      	add	sl, r2
 80177fa:	b289      	uxth	r1, r1
 80177fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017800:	f84e 1b04 	str.w	r1, [lr], #4
 8017804:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017808:	f8be 1000 	ldrh.w	r1, [lr]
 801780c:	0c12      	lsrs	r2, r2, #16
 801780e:	fb09 1102 	mla	r1, r9, r2, r1
 8017812:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017816:	4567      	cmp	r7, ip
 8017818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801781c:	d8e6      	bhi.n	80177ec <__multiply+0x10c>
 801781e:	9a01      	ldr	r2, [sp, #4]
 8017820:	50a9      	str	r1, [r5, r2]
 8017822:	3504      	adds	r5, #4
 8017824:	e79a      	b.n	801775c <__multiply+0x7c>
 8017826:	3e01      	subs	r6, #1
 8017828:	e79c      	b.n	8017764 <__multiply+0x84>
 801782a:	bf00      	nop
 801782c:	0801e090 	.word	0x0801e090
 8017830:	0801e180 	.word	0x0801e180

08017834 <__pow5mult>:
 8017834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017838:	4615      	mov	r5, r2
 801783a:	f012 0203 	ands.w	r2, r2, #3
 801783e:	4606      	mov	r6, r0
 8017840:	460f      	mov	r7, r1
 8017842:	d007      	beq.n	8017854 <__pow5mult+0x20>
 8017844:	4c25      	ldr	r4, [pc, #148]	; (80178dc <__pow5mult+0xa8>)
 8017846:	3a01      	subs	r2, #1
 8017848:	2300      	movs	r3, #0
 801784a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801784e:	f7ff fe51 	bl	80174f4 <__multadd>
 8017852:	4607      	mov	r7, r0
 8017854:	10ad      	asrs	r5, r5, #2
 8017856:	d03d      	beq.n	80178d4 <__pow5mult+0xa0>
 8017858:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801785a:	b97c      	cbnz	r4, 801787c <__pow5mult+0x48>
 801785c:	2010      	movs	r0, #16
 801785e:	f7ff fdbf 	bl	80173e0 <malloc>
 8017862:	4602      	mov	r2, r0
 8017864:	6270      	str	r0, [r6, #36]	; 0x24
 8017866:	b928      	cbnz	r0, 8017874 <__pow5mult+0x40>
 8017868:	4b1d      	ldr	r3, [pc, #116]	; (80178e0 <__pow5mult+0xac>)
 801786a:	481e      	ldr	r0, [pc, #120]	; (80178e4 <__pow5mult+0xb0>)
 801786c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017870:	f000 fedc 	bl	801862c <__assert_func>
 8017874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017878:	6004      	str	r4, [r0, #0]
 801787a:	60c4      	str	r4, [r0, #12]
 801787c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017884:	b94c      	cbnz	r4, 801789a <__pow5mult+0x66>
 8017886:	f240 2171 	movw	r1, #625	; 0x271
 801788a:	4630      	mov	r0, r6
 801788c:	f7ff ff12 	bl	80176b4 <__i2b>
 8017890:	2300      	movs	r3, #0
 8017892:	f8c8 0008 	str.w	r0, [r8, #8]
 8017896:	4604      	mov	r4, r0
 8017898:	6003      	str	r3, [r0, #0]
 801789a:	f04f 0900 	mov.w	r9, #0
 801789e:	07eb      	lsls	r3, r5, #31
 80178a0:	d50a      	bpl.n	80178b8 <__pow5mult+0x84>
 80178a2:	4639      	mov	r1, r7
 80178a4:	4622      	mov	r2, r4
 80178a6:	4630      	mov	r0, r6
 80178a8:	f7ff ff1a 	bl	80176e0 <__multiply>
 80178ac:	4639      	mov	r1, r7
 80178ae:	4680      	mov	r8, r0
 80178b0:	4630      	mov	r0, r6
 80178b2:	f7ff fdfd 	bl	80174b0 <_Bfree>
 80178b6:	4647      	mov	r7, r8
 80178b8:	106d      	asrs	r5, r5, #1
 80178ba:	d00b      	beq.n	80178d4 <__pow5mult+0xa0>
 80178bc:	6820      	ldr	r0, [r4, #0]
 80178be:	b938      	cbnz	r0, 80178d0 <__pow5mult+0x9c>
 80178c0:	4622      	mov	r2, r4
 80178c2:	4621      	mov	r1, r4
 80178c4:	4630      	mov	r0, r6
 80178c6:	f7ff ff0b 	bl	80176e0 <__multiply>
 80178ca:	6020      	str	r0, [r4, #0]
 80178cc:	f8c0 9000 	str.w	r9, [r0]
 80178d0:	4604      	mov	r4, r0
 80178d2:	e7e4      	b.n	801789e <__pow5mult+0x6a>
 80178d4:	4638      	mov	r0, r7
 80178d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178da:	bf00      	nop
 80178dc:	0801e2d0 	.word	0x0801e2d0
 80178e0:	0801e01e 	.word	0x0801e01e
 80178e4:	0801e180 	.word	0x0801e180

080178e8 <__lshift>:
 80178e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178ec:	460c      	mov	r4, r1
 80178ee:	6849      	ldr	r1, [r1, #4]
 80178f0:	6923      	ldr	r3, [r4, #16]
 80178f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80178f6:	68a3      	ldr	r3, [r4, #8]
 80178f8:	4607      	mov	r7, r0
 80178fa:	4691      	mov	r9, r2
 80178fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017900:	f108 0601 	add.w	r6, r8, #1
 8017904:	42b3      	cmp	r3, r6
 8017906:	db0b      	blt.n	8017920 <__lshift+0x38>
 8017908:	4638      	mov	r0, r7
 801790a:	f7ff fd91 	bl	8017430 <_Balloc>
 801790e:	4605      	mov	r5, r0
 8017910:	b948      	cbnz	r0, 8017926 <__lshift+0x3e>
 8017912:	4602      	mov	r2, r0
 8017914:	4b2a      	ldr	r3, [pc, #168]	; (80179c0 <__lshift+0xd8>)
 8017916:	482b      	ldr	r0, [pc, #172]	; (80179c4 <__lshift+0xdc>)
 8017918:	f240 11d9 	movw	r1, #473	; 0x1d9
 801791c:	f000 fe86 	bl	801862c <__assert_func>
 8017920:	3101      	adds	r1, #1
 8017922:	005b      	lsls	r3, r3, #1
 8017924:	e7ee      	b.n	8017904 <__lshift+0x1c>
 8017926:	2300      	movs	r3, #0
 8017928:	f100 0114 	add.w	r1, r0, #20
 801792c:	f100 0210 	add.w	r2, r0, #16
 8017930:	4618      	mov	r0, r3
 8017932:	4553      	cmp	r3, sl
 8017934:	db37      	blt.n	80179a6 <__lshift+0xbe>
 8017936:	6920      	ldr	r0, [r4, #16]
 8017938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801793c:	f104 0314 	add.w	r3, r4, #20
 8017940:	f019 091f 	ands.w	r9, r9, #31
 8017944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017948:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801794c:	d02f      	beq.n	80179ae <__lshift+0xc6>
 801794e:	f1c9 0e20 	rsb	lr, r9, #32
 8017952:	468a      	mov	sl, r1
 8017954:	f04f 0c00 	mov.w	ip, #0
 8017958:	681a      	ldr	r2, [r3, #0]
 801795a:	fa02 f209 	lsl.w	r2, r2, r9
 801795e:	ea42 020c 	orr.w	r2, r2, ip
 8017962:	f84a 2b04 	str.w	r2, [sl], #4
 8017966:	f853 2b04 	ldr.w	r2, [r3], #4
 801796a:	4298      	cmp	r0, r3
 801796c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017970:	d8f2      	bhi.n	8017958 <__lshift+0x70>
 8017972:	1b03      	subs	r3, r0, r4
 8017974:	3b15      	subs	r3, #21
 8017976:	f023 0303 	bic.w	r3, r3, #3
 801797a:	3304      	adds	r3, #4
 801797c:	f104 0215 	add.w	r2, r4, #21
 8017980:	4290      	cmp	r0, r2
 8017982:	bf38      	it	cc
 8017984:	2304      	movcc	r3, #4
 8017986:	f841 c003 	str.w	ip, [r1, r3]
 801798a:	f1bc 0f00 	cmp.w	ip, #0
 801798e:	d001      	beq.n	8017994 <__lshift+0xac>
 8017990:	f108 0602 	add.w	r6, r8, #2
 8017994:	3e01      	subs	r6, #1
 8017996:	4638      	mov	r0, r7
 8017998:	612e      	str	r6, [r5, #16]
 801799a:	4621      	mov	r1, r4
 801799c:	f7ff fd88 	bl	80174b0 <_Bfree>
 80179a0:	4628      	mov	r0, r5
 80179a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80179aa:	3301      	adds	r3, #1
 80179ac:	e7c1      	b.n	8017932 <__lshift+0x4a>
 80179ae:	3904      	subs	r1, #4
 80179b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80179b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80179b8:	4298      	cmp	r0, r3
 80179ba:	d8f9      	bhi.n	80179b0 <__lshift+0xc8>
 80179bc:	e7ea      	b.n	8017994 <__lshift+0xac>
 80179be:	bf00      	nop
 80179c0:	0801e090 	.word	0x0801e090
 80179c4:	0801e180 	.word	0x0801e180

080179c8 <__mcmp>:
 80179c8:	b530      	push	{r4, r5, lr}
 80179ca:	6902      	ldr	r2, [r0, #16]
 80179cc:	690c      	ldr	r4, [r1, #16]
 80179ce:	1b12      	subs	r2, r2, r4
 80179d0:	d10e      	bne.n	80179f0 <__mcmp+0x28>
 80179d2:	f100 0314 	add.w	r3, r0, #20
 80179d6:	3114      	adds	r1, #20
 80179d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80179dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80179e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80179e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80179e8:	42a5      	cmp	r5, r4
 80179ea:	d003      	beq.n	80179f4 <__mcmp+0x2c>
 80179ec:	d305      	bcc.n	80179fa <__mcmp+0x32>
 80179ee:	2201      	movs	r2, #1
 80179f0:	4610      	mov	r0, r2
 80179f2:	bd30      	pop	{r4, r5, pc}
 80179f4:	4283      	cmp	r3, r0
 80179f6:	d3f3      	bcc.n	80179e0 <__mcmp+0x18>
 80179f8:	e7fa      	b.n	80179f0 <__mcmp+0x28>
 80179fa:	f04f 32ff 	mov.w	r2, #4294967295
 80179fe:	e7f7      	b.n	80179f0 <__mcmp+0x28>

08017a00 <__mdiff>:
 8017a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a04:	460c      	mov	r4, r1
 8017a06:	4606      	mov	r6, r0
 8017a08:	4611      	mov	r1, r2
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	4690      	mov	r8, r2
 8017a0e:	f7ff ffdb 	bl	80179c8 <__mcmp>
 8017a12:	1e05      	subs	r5, r0, #0
 8017a14:	d110      	bne.n	8017a38 <__mdiff+0x38>
 8017a16:	4629      	mov	r1, r5
 8017a18:	4630      	mov	r0, r6
 8017a1a:	f7ff fd09 	bl	8017430 <_Balloc>
 8017a1e:	b930      	cbnz	r0, 8017a2e <__mdiff+0x2e>
 8017a20:	4b3a      	ldr	r3, [pc, #232]	; (8017b0c <__mdiff+0x10c>)
 8017a22:	4602      	mov	r2, r0
 8017a24:	f240 2132 	movw	r1, #562	; 0x232
 8017a28:	4839      	ldr	r0, [pc, #228]	; (8017b10 <__mdiff+0x110>)
 8017a2a:	f000 fdff 	bl	801862c <__assert_func>
 8017a2e:	2301      	movs	r3, #1
 8017a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a38:	bfa4      	itt	ge
 8017a3a:	4643      	movge	r3, r8
 8017a3c:	46a0      	movge	r8, r4
 8017a3e:	4630      	mov	r0, r6
 8017a40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a44:	bfa6      	itte	ge
 8017a46:	461c      	movge	r4, r3
 8017a48:	2500      	movge	r5, #0
 8017a4a:	2501      	movlt	r5, #1
 8017a4c:	f7ff fcf0 	bl	8017430 <_Balloc>
 8017a50:	b920      	cbnz	r0, 8017a5c <__mdiff+0x5c>
 8017a52:	4b2e      	ldr	r3, [pc, #184]	; (8017b0c <__mdiff+0x10c>)
 8017a54:	4602      	mov	r2, r0
 8017a56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017a5a:	e7e5      	b.n	8017a28 <__mdiff+0x28>
 8017a5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017a60:	6926      	ldr	r6, [r4, #16]
 8017a62:	60c5      	str	r5, [r0, #12]
 8017a64:	f104 0914 	add.w	r9, r4, #20
 8017a68:	f108 0514 	add.w	r5, r8, #20
 8017a6c:	f100 0e14 	add.w	lr, r0, #20
 8017a70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017a74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017a78:	f108 0210 	add.w	r2, r8, #16
 8017a7c:	46f2      	mov	sl, lr
 8017a7e:	2100      	movs	r1, #0
 8017a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8017a84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017a88:	fa1f f883 	uxth.w	r8, r3
 8017a8c:	fa11 f18b 	uxtah	r1, r1, fp
 8017a90:	0c1b      	lsrs	r3, r3, #16
 8017a92:	eba1 0808 	sub.w	r8, r1, r8
 8017a96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017a9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017a9e:	fa1f f888 	uxth.w	r8, r8
 8017aa2:	1419      	asrs	r1, r3, #16
 8017aa4:	454e      	cmp	r6, r9
 8017aa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017aaa:	f84a 3b04 	str.w	r3, [sl], #4
 8017aae:	d8e7      	bhi.n	8017a80 <__mdiff+0x80>
 8017ab0:	1b33      	subs	r3, r6, r4
 8017ab2:	3b15      	subs	r3, #21
 8017ab4:	f023 0303 	bic.w	r3, r3, #3
 8017ab8:	3304      	adds	r3, #4
 8017aba:	3415      	adds	r4, #21
 8017abc:	42a6      	cmp	r6, r4
 8017abe:	bf38      	it	cc
 8017ac0:	2304      	movcc	r3, #4
 8017ac2:	441d      	add	r5, r3
 8017ac4:	4473      	add	r3, lr
 8017ac6:	469e      	mov	lr, r3
 8017ac8:	462e      	mov	r6, r5
 8017aca:	4566      	cmp	r6, ip
 8017acc:	d30e      	bcc.n	8017aec <__mdiff+0xec>
 8017ace:	f10c 0203 	add.w	r2, ip, #3
 8017ad2:	1b52      	subs	r2, r2, r5
 8017ad4:	f022 0203 	bic.w	r2, r2, #3
 8017ad8:	3d03      	subs	r5, #3
 8017ada:	45ac      	cmp	ip, r5
 8017adc:	bf38      	it	cc
 8017ade:	2200      	movcc	r2, #0
 8017ae0:	441a      	add	r2, r3
 8017ae2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017ae6:	b17b      	cbz	r3, 8017b08 <__mdiff+0x108>
 8017ae8:	6107      	str	r7, [r0, #16]
 8017aea:	e7a3      	b.n	8017a34 <__mdiff+0x34>
 8017aec:	f856 8b04 	ldr.w	r8, [r6], #4
 8017af0:	fa11 f288 	uxtah	r2, r1, r8
 8017af4:	1414      	asrs	r4, r2, #16
 8017af6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017afa:	b292      	uxth	r2, r2
 8017afc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017b00:	f84e 2b04 	str.w	r2, [lr], #4
 8017b04:	1421      	asrs	r1, r4, #16
 8017b06:	e7e0      	b.n	8017aca <__mdiff+0xca>
 8017b08:	3f01      	subs	r7, #1
 8017b0a:	e7ea      	b.n	8017ae2 <__mdiff+0xe2>
 8017b0c:	0801e090 	.word	0x0801e090
 8017b10:	0801e180 	.word	0x0801e180

08017b14 <__ulp>:
 8017b14:	b082      	sub	sp, #8
 8017b16:	ed8d 0b00 	vstr	d0, [sp]
 8017b1a:	9b01      	ldr	r3, [sp, #4]
 8017b1c:	4912      	ldr	r1, [pc, #72]	; (8017b68 <__ulp+0x54>)
 8017b1e:	4019      	ands	r1, r3
 8017b20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017b24:	2900      	cmp	r1, #0
 8017b26:	dd05      	ble.n	8017b34 <__ulp+0x20>
 8017b28:	2200      	movs	r2, #0
 8017b2a:	460b      	mov	r3, r1
 8017b2c:	ec43 2b10 	vmov	d0, r2, r3
 8017b30:	b002      	add	sp, #8
 8017b32:	4770      	bx	lr
 8017b34:	4249      	negs	r1, r1
 8017b36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017b3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017b3e:	f04f 0200 	mov.w	r2, #0
 8017b42:	f04f 0300 	mov.w	r3, #0
 8017b46:	da04      	bge.n	8017b52 <__ulp+0x3e>
 8017b48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017b4c:	fa41 f300 	asr.w	r3, r1, r0
 8017b50:	e7ec      	b.n	8017b2c <__ulp+0x18>
 8017b52:	f1a0 0114 	sub.w	r1, r0, #20
 8017b56:	291e      	cmp	r1, #30
 8017b58:	bfda      	itte	le
 8017b5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017b5e:	fa20 f101 	lsrle.w	r1, r0, r1
 8017b62:	2101      	movgt	r1, #1
 8017b64:	460a      	mov	r2, r1
 8017b66:	e7e1      	b.n	8017b2c <__ulp+0x18>
 8017b68:	7ff00000 	.word	0x7ff00000

08017b6c <__b2d>:
 8017b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b6e:	6905      	ldr	r5, [r0, #16]
 8017b70:	f100 0714 	add.w	r7, r0, #20
 8017b74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017b78:	1f2e      	subs	r6, r5, #4
 8017b7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7ff fd48 	bl	8017614 <__hi0bits>
 8017b84:	f1c0 0320 	rsb	r3, r0, #32
 8017b88:	280a      	cmp	r0, #10
 8017b8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017c08 <__b2d+0x9c>
 8017b8e:	600b      	str	r3, [r1, #0]
 8017b90:	dc14      	bgt.n	8017bbc <__b2d+0x50>
 8017b92:	f1c0 0e0b 	rsb	lr, r0, #11
 8017b96:	fa24 f10e 	lsr.w	r1, r4, lr
 8017b9a:	42b7      	cmp	r7, r6
 8017b9c:	ea41 030c 	orr.w	r3, r1, ip
 8017ba0:	bf34      	ite	cc
 8017ba2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017ba6:	2100      	movcs	r1, #0
 8017ba8:	3015      	adds	r0, #21
 8017baa:	fa04 f000 	lsl.w	r0, r4, r0
 8017bae:	fa21 f10e 	lsr.w	r1, r1, lr
 8017bb2:	ea40 0201 	orr.w	r2, r0, r1
 8017bb6:	ec43 2b10 	vmov	d0, r2, r3
 8017bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bbc:	42b7      	cmp	r7, r6
 8017bbe:	bf3a      	itte	cc
 8017bc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017bc4:	f1a5 0608 	subcc.w	r6, r5, #8
 8017bc8:	2100      	movcs	r1, #0
 8017bca:	380b      	subs	r0, #11
 8017bcc:	d017      	beq.n	8017bfe <__b2d+0x92>
 8017bce:	f1c0 0c20 	rsb	ip, r0, #32
 8017bd2:	fa04 f500 	lsl.w	r5, r4, r0
 8017bd6:	42be      	cmp	r6, r7
 8017bd8:	fa21 f40c 	lsr.w	r4, r1, ip
 8017bdc:	ea45 0504 	orr.w	r5, r5, r4
 8017be0:	bf8c      	ite	hi
 8017be2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017be6:	2400      	movls	r4, #0
 8017be8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017bec:	fa01 f000 	lsl.w	r0, r1, r0
 8017bf0:	fa24 f40c 	lsr.w	r4, r4, ip
 8017bf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017bf8:	ea40 0204 	orr.w	r2, r0, r4
 8017bfc:	e7db      	b.n	8017bb6 <__b2d+0x4a>
 8017bfe:	ea44 030c 	orr.w	r3, r4, ip
 8017c02:	460a      	mov	r2, r1
 8017c04:	e7d7      	b.n	8017bb6 <__b2d+0x4a>
 8017c06:	bf00      	nop
 8017c08:	3ff00000 	.word	0x3ff00000

08017c0c <__d2b>:
 8017c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017c10:	4689      	mov	r9, r1
 8017c12:	2101      	movs	r1, #1
 8017c14:	ec57 6b10 	vmov	r6, r7, d0
 8017c18:	4690      	mov	r8, r2
 8017c1a:	f7ff fc09 	bl	8017430 <_Balloc>
 8017c1e:	4604      	mov	r4, r0
 8017c20:	b930      	cbnz	r0, 8017c30 <__d2b+0x24>
 8017c22:	4602      	mov	r2, r0
 8017c24:	4b25      	ldr	r3, [pc, #148]	; (8017cbc <__d2b+0xb0>)
 8017c26:	4826      	ldr	r0, [pc, #152]	; (8017cc0 <__d2b+0xb4>)
 8017c28:	f240 310a 	movw	r1, #778	; 0x30a
 8017c2c:	f000 fcfe 	bl	801862c <__assert_func>
 8017c30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017c34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017c38:	bb35      	cbnz	r5, 8017c88 <__d2b+0x7c>
 8017c3a:	2e00      	cmp	r6, #0
 8017c3c:	9301      	str	r3, [sp, #4]
 8017c3e:	d028      	beq.n	8017c92 <__d2b+0x86>
 8017c40:	4668      	mov	r0, sp
 8017c42:	9600      	str	r6, [sp, #0]
 8017c44:	f7ff fd06 	bl	8017654 <__lo0bits>
 8017c48:	9900      	ldr	r1, [sp, #0]
 8017c4a:	b300      	cbz	r0, 8017c8e <__d2b+0x82>
 8017c4c:	9a01      	ldr	r2, [sp, #4]
 8017c4e:	f1c0 0320 	rsb	r3, r0, #32
 8017c52:	fa02 f303 	lsl.w	r3, r2, r3
 8017c56:	430b      	orrs	r3, r1
 8017c58:	40c2      	lsrs	r2, r0
 8017c5a:	6163      	str	r3, [r4, #20]
 8017c5c:	9201      	str	r2, [sp, #4]
 8017c5e:	9b01      	ldr	r3, [sp, #4]
 8017c60:	61a3      	str	r3, [r4, #24]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	bf14      	ite	ne
 8017c66:	2202      	movne	r2, #2
 8017c68:	2201      	moveq	r2, #1
 8017c6a:	6122      	str	r2, [r4, #16]
 8017c6c:	b1d5      	cbz	r5, 8017ca4 <__d2b+0x98>
 8017c6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017c72:	4405      	add	r5, r0
 8017c74:	f8c9 5000 	str.w	r5, [r9]
 8017c78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017c7c:	f8c8 0000 	str.w	r0, [r8]
 8017c80:	4620      	mov	r0, r4
 8017c82:	b003      	add	sp, #12
 8017c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017c8c:	e7d5      	b.n	8017c3a <__d2b+0x2e>
 8017c8e:	6161      	str	r1, [r4, #20]
 8017c90:	e7e5      	b.n	8017c5e <__d2b+0x52>
 8017c92:	a801      	add	r0, sp, #4
 8017c94:	f7ff fcde 	bl	8017654 <__lo0bits>
 8017c98:	9b01      	ldr	r3, [sp, #4]
 8017c9a:	6163      	str	r3, [r4, #20]
 8017c9c:	2201      	movs	r2, #1
 8017c9e:	6122      	str	r2, [r4, #16]
 8017ca0:	3020      	adds	r0, #32
 8017ca2:	e7e3      	b.n	8017c6c <__d2b+0x60>
 8017ca4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017cac:	f8c9 0000 	str.w	r0, [r9]
 8017cb0:	6918      	ldr	r0, [r3, #16]
 8017cb2:	f7ff fcaf 	bl	8017614 <__hi0bits>
 8017cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017cba:	e7df      	b.n	8017c7c <__d2b+0x70>
 8017cbc:	0801e090 	.word	0x0801e090
 8017cc0:	0801e180 	.word	0x0801e180

08017cc4 <__ratio>:
 8017cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc8:	4688      	mov	r8, r1
 8017cca:	4669      	mov	r1, sp
 8017ccc:	4681      	mov	r9, r0
 8017cce:	f7ff ff4d 	bl	8017b6c <__b2d>
 8017cd2:	a901      	add	r1, sp, #4
 8017cd4:	4640      	mov	r0, r8
 8017cd6:	ec55 4b10 	vmov	r4, r5, d0
 8017cda:	f7ff ff47 	bl	8017b6c <__b2d>
 8017cde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ce2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ce6:	eba3 0c02 	sub.w	ip, r3, r2
 8017cea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017cee:	1a9b      	subs	r3, r3, r2
 8017cf0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017cf4:	ec51 0b10 	vmov	r0, r1, d0
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	bfd6      	itet	le
 8017cfc:	460a      	movle	r2, r1
 8017cfe:	462a      	movgt	r2, r5
 8017d00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017d04:	468b      	mov	fp, r1
 8017d06:	462f      	mov	r7, r5
 8017d08:	bfd4      	ite	le
 8017d0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017d0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017d12:	4620      	mov	r0, r4
 8017d14:	ee10 2a10 	vmov	r2, s0
 8017d18:	465b      	mov	r3, fp
 8017d1a:	4639      	mov	r1, r7
 8017d1c:	f7e8 fd96 	bl	800084c <__aeabi_ddiv>
 8017d20:	ec41 0b10 	vmov	d0, r0, r1
 8017d24:	b003      	add	sp, #12
 8017d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d2a <__copybits>:
 8017d2a:	3901      	subs	r1, #1
 8017d2c:	b570      	push	{r4, r5, r6, lr}
 8017d2e:	1149      	asrs	r1, r1, #5
 8017d30:	6914      	ldr	r4, [r2, #16]
 8017d32:	3101      	adds	r1, #1
 8017d34:	f102 0314 	add.w	r3, r2, #20
 8017d38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017d3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017d40:	1f05      	subs	r5, r0, #4
 8017d42:	42a3      	cmp	r3, r4
 8017d44:	d30c      	bcc.n	8017d60 <__copybits+0x36>
 8017d46:	1aa3      	subs	r3, r4, r2
 8017d48:	3b11      	subs	r3, #17
 8017d4a:	f023 0303 	bic.w	r3, r3, #3
 8017d4e:	3211      	adds	r2, #17
 8017d50:	42a2      	cmp	r2, r4
 8017d52:	bf88      	it	hi
 8017d54:	2300      	movhi	r3, #0
 8017d56:	4418      	add	r0, r3
 8017d58:	2300      	movs	r3, #0
 8017d5a:	4288      	cmp	r0, r1
 8017d5c:	d305      	bcc.n	8017d6a <__copybits+0x40>
 8017d5e:	bd70      	pop	{r4, r5, r6, pc}
 8017d60:	f853 6b04 	ldr.w	r6, [r3], #4
 8017d64:	f845 6f04 	str.w	r6, [r5, #4]!
 8017d68:	e7eb      	b.n	8017d42 <__copybits+0x18>
 8017d6a:	f840 3b04 	str.w	r3, [r0], #4
 8017d6e:	e7f4      	b.n	8017d5a <__copybits+0x30>

08017d70 <__any_on>:
 8017d70:	f100 0214 	add.w	r2, r0, #20
 8017d74:	6900      	ldr	r0, [r0, #16]
 8017d76:	114b      	asrs	r3, r1, #5
 8017d78:	4298      	cmp	r0, r3
 8017d7a:	b510      	push	{r4, lr}
 8017d7c:	db11      	blt.n	8017da2 <__any_on+0x32>
 8017d7e:	dd0a      	ble.n	8017d96 <__any_on+0x26>
 8017d80:	f011 011f 	ands.w	r1, r1, #31
 8017d84:	d007      	beq.n	8017d96 <__any_on+0x26>
 8017d86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017d8a:	fa24 f001 	lsr.w	r0, r4, r1
 8017d8e:	fa00 f101 	lsl.w	r1, r0, r1
 8017d92:	428c      	cmp	r4, r1
 8017d94:	d10b      	bne.n	8017dae <__any_on+0x3e>
 8017d96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	d803      	bhi.n	8017da6 <__any_on+0x36>
 8017d9e:	2000      	movs	r0, #0
 8017da0:	bd10      	pop	{r4, pc}
 8017da2:	4603      	mov	r3, r0
 8017da4:	e7f7      	b.n	8017d96 <__any_on+0x26>
 8017da6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017daa:	2900      	cmp	r1, #0
 8017dac:	d0f5      	beq.n	8017d9a <__any_on+0x2a>
 8017dae:	2001      	movs	r0, #1
 8017db0:	e7f6      	b.n	8017da0 <__any_on+0x30>

08017db2 <_calloc_r>:
 8017db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017db4:	fba1 2402 	umull	r2, r4, r1, r2
 8017db8:	b94c      	cbnz	r4, 8017dce <_calloc_r+0x1c>
 8017dba:	4611      	mov	r1, r2
 8017dbc:	9201      	str	r2, [sp, #4]
 8017dbe:	f000 f87b 	bl	8017eb8 <_malloc_r>
 8017dc2:	9a01      	ldr	r2, [sp, #4]
 8017dc4:	4605      	mov	r5, r0
 8017dc6:	b930      	cbnz	r0, 8017dd6 <_calloc_r+0x24>
 8017dc8:	4628      	mov	r0, r5
 8017dca:	b003      	add	sp, #12
 8017dcc:	bd30      	pop	{r4, r5, pc}
 8017dce:	220c      	movs	r2, #12
 8017dd0:	6002      	str	r2, [r0, #0]
 8017dd2:	2500      	movs	r5, #0
 8017dd4:	e7f8      	b.n	8017dc8 <_calloc_r+0x16>
 8017dd6:	4621      	mov	r1, r4
 8017dd8:	f7fc f852 	bl	8013e80 <memset>
 8017ddc:	e7f4      	b.n	8017dc8 <_calloc_r+0x16>
	...

08017de0 <_free_r>:
 8017de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017de2:	2900      	cmp	r1, #0
 8017de4:	d044      	beq.n	8017e70 <_free_r+0x90>
 8017de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dea:	9001      	str	r0, [sp, #4]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	f1a1 0404 	sub.w	r4, r1, #4
 8017df2:	bfb8      	it	lt
 8017df4:	18e4      	addlt	r4, r4, r3
 8017df6:	f000 fca7 	bl	8018748 <__malloc_lock>
 8017dfa:	4a1e      	ldr	r2, [pc, #120]	; (8017e74 <_free_r+0x94>)
 8017dfc:	9801      	ldr	r0, [sp, #4]
 8017dfe:	6813      	ldr	r3, [r2, #0]
 8017e00:	b933      	cbnz	r3, 8017e10 <_free_r+0x30>
 8017e02:	6063      	str	r3, [r4, #4]
 8017e04:	6014      	str	r4, [r2, #0]
 8017e06:	b003      	add	sp, #12
 8017e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e0c:	f000 bca2 	b.w	8018754 <__malloc_unlock>
 8017e10:	42a3      	cmp	r3, r4
 8017e12:	d908      	bls.n	8017e26 <_free_r+0x46>
 8017e14:	6825      	ldr	r5, [r4, #0]
 8017e16:	1961      	adds	r1, r4, r5
 8017e18:	428b      	cmp	r3, r1
 8017e1a:	bf01      	itttt	eq
 8017e1c:	6819      	ldreq	r1, [r3, #0]
 8017e1e:	685b      	ldreq	r3, [r3, #4]
 8017e20:	1949      	addeq	r1, r1, r5
 8017e22:	6021      	streq	r1, [r4, #0]
 8017e24:	e7ed      	b.n	8017e02 <_free_r+0x22>
 8017e26:	461a      	mov	r2, r3
 8017e28:	685b      	ldr	r3, [r3, #4]
 8017e2a:	b10b      	cbz	r3, 8017e30 <_free_r+0x50>
 8017e2c:	42a3      	cmp	r3, r4
 8017e2e:	d9fa      	bls.n	8017e26 <_free_r+0x46>
 8017e30:	6811      	ldr	r1, [r2, #0]
 8017e32:	1855      	adds	r5, r2, r1
 8017e34:	42a5      	cmp	r5, r4
 8017e36:	d10b      	bne.n	8017e50 <_free_r+0x70>
 8017e38:	6824      	ldr	r4, [r4, #0]
 8017e3a:	4421      	add	r1, r4
 8017e3c:	1854      	adds	r4, r2, r1
 8017e3e:	42a3      	cmp	r3, r4
 8017e40:	6011      	str	r1, [r2, #0]
 8017e42:	d1e0      	bne.n	8017e06 <_free_r+0x26>
 8017e44:	681c      	ldr	r4, [r3, #0]
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	6053      	str	r3, [r2, #4]
 8017e4a:	4421      	add	r1, r4
 8017e4c:	6011      	str	r1, [r2, #0]
 8017e4e:	e7da      	b.n	8017e06 <_free_r+0x26>
 8017e50:	d902      	bls.n	8017e58 <_free_r+0x78>
 8017e52:	230c      	movs	r3, #12
 8017e54:	6003      	str	r3, [r0, #0]
 8017e56:	e7d6      	b.n	8017e06 <_free_r+0x26>
 8017e58:	6825      	ldr	r5, [r4, #0]
 8017e5a:	1961      	adds	r1, r4, r5
 8017e5c:	428b      	cmp	r3, r1
 8017e5e:	bf04      	itt	eq
 8017e60:	6819      	ldreq	r1, [r3, #0]
 8017e62:	685b      	ldreq	r3, [r3, #4]
 8017e64:	6063      	str	r3, [r4, #4]
 8017e66:	bf04      	itt	eq
 8017e68:	1949      	addeq	r1, r1, r5
 8017e6a:	6021      	streq	r1, [r4, #0]
 8017e6c:	6054      	str	r4, [r2, #4]
 8017e6e:	e7ca      	b.n	8017e06 <_free_r+0x26>
 8017e70:	b003      	add	sp, #12
 8017e72:	bd30      	pop	{r4, r5, pc}
 8017e74:	20007ab4 	.word	0x20007ab4

08017e78 <sbrk_aligned>:
 8017e78:	b570      	push	{r4, r5, r6, lr}
 8017e7a:	4e0e      	ldr	r6, [pc, #56]	; (8017eb4 <sbrk_aligned+0x3c>)
 8017e7c:	460c      	mov	r4, r1
 8017e7e:	6831      	ldr	r1, [r6, #0]
 8017e80:	4605      	mov	r5, r0
 8017e82:	b911      	cbnz	r1, 8017e8a <sbrk_aligned+0x12>
 8017e84:	f000 fb4c 	bl	8018520 <_sbrk_r>
 8017e88:	6030      	str	r0, [r6, #0]
 8017e8a:	4621      	mov	r1, r4
 8017e8c:	4628      	mov	r0, r5
 8017e8e:	f000 fb47 	bl	8018520 <_sbrk_r>
 8017e92:	1c43      	adds	r3, r0, #1
 8017e94:	d00a      	beq.n	8017eac <sbrk_aligned+0x34>
 8017e96:	1cc4      	adds	r4, r0, #3
 8017e98:	f024 0403 	bic.w	r4, r4, #3
 8017e9c:	42a0      	cmp	r0, r4
 8017e9e:	d007      	beq.n	8017eb0 <sbrk_aligned+0x38>
 8017ea0:	1a21      	subs	r1, r4, r0
 8017ea2:	4628      	mov	r0, r5
 8017ea4:	f000 fb3c 	bl	8018520 <_sbrk_r>
 8017ea8:	3001      	adds	r0, #1
 8017eaa:	d101      	bne.n	8017eb0 <sbrk_aligned+0x38>
 8017eac:	f04f 34ff 	mov.w	r4, #4294967295
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	bd70      	pop	{r4, r5, r6, pc}
 8017eb4:	20007ab8 	.word	0x20007ab8

08017eb8 <_malloc_r>:
 8017eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ebc:	1ccd      	adds	r5, r1, #3
 8017ebe:	f025 0503 	bic.w	r5, r5, #3
 8017ec2:	3508      	adds	r5, #8
 8017ec4:	2d0c      	cmp	r5, #12
 8017ec6:	bf38      	it	cc
 8017ec8:	250c      	movcc	r5, #12
 8017eca:	2d00      	cmp	r5, #0
 8017ecc:	4607      	mov	r7, r0
 8017ece:	db01      	blt.n	8017ed4 <_malloc_r+0x1c>
 8017ed0:	42a9      	cmp	r1, r5
 8017ed2:	d905      	bls.n	8017ee0 <_malloc_r+0x28>
 8017ed4:	230c      	movs	r3, #12
 8017ed6:	603b      	str	r3, [r7, #0]
 8017ed8:	2600      	movs	r6, #0
 8017eda:	4630      	mov	r0, r6
 8017edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee0:	4e2e      	ldr	r6, [pc, #184]	; (8017f9c <_malloc_r+0xe4>)
 8017ee2:	f000 fc31 	bl	8018748 <__malloc_lock>
 8017ee6:	6833      	ldr	r3, [r6, #0]
 8017ee8:	461c      	mov	r4, r3
 8017eea:	bb34      	cbnz	r4, 8017f3a <_malloc_r+0x82>
 8017eec:	4629      	mov	r1, r5
 8017eee:	4638      	mov	r0, r7
 8017ef0:	f7ff ffc2 	bl	8017e78 <sbrk_aligned>
 8017ef4:	1c43      	adds	r3, r0, #1
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	d14d      	bne.n	8017f96 <_malloc_r+0xde>
 8017efa:	6834      	ldr	r4, [r6, #0]
 8017efc:	4626      	mov	r6, r4
 8017efe:	2e00      	cmp	r6, #0
 8017f00:	d140      	bne.n	8017f84 <_malloc_r+0xcc>
 8017f02:	6823      	ldr	r3, [r4, #0]
 8017f04:	4631      	mov	r1, r6
 8017f06:	4638      	mov	r0, r7
 8017f08:	eb04 0803 	add.w	r8, r4, r3
 8017f0c:	f000 fb08 	bl	8018520 <_sbrk_r>
 8017f10:	4580      	cmp	r8, r0
 8017f12:	d13a      	bne.n	8017f8a <_malloc_r+0xd2>
 8017f14:	6821      	ldr	r1, [r4, #0]
 8017f16:	3503      	adds	r5, #3
 8017f18:	1a6d      	subs	r5, r5, r1
 8017f1a:	f025 0503 	bic.w	r5, r5, #3
 8017f1e:	3508      	adds	r5, #8
 8017f20:	2d0c      	cmp	r5, #12
 8017f22:	bf38      	it	cc
 8017f24:	250c      	movcc	r5, #12
 8017f26:	4629      	mov	r1, r5
 8017f28:	4638      	mov	r0, r7
 8017f2a:	f7ff ffa5 	bl	8017e78 <sbrk_aligned>
 8017f2e:	3001      	adds	r0, #1
 8017f30:	d02b      	beq.n	8017f8a <_malloc_r+0xd2>
 8017f32:	6823      	ldr	r3, [r4, #0]
 8017f34:	442b      	add	r3, r5
 8017f36:	6023      	str	r3, [r4, #0]
 8017f38:	e00e      	b.n	8017f58 <_malloc_r+0xa0>
 8017f3a:	6822      	ldr	r2, [r4, #0]
 8017f3c:	1b52      	subs	r2, r2, r5
 8017f3e:	d41e      	bmi.n	8017f7e <_malloc_r+0xc6>
 8017f40:	2a0b      	cmp	r2, #11
 8017f42:	d916      	bls.n	8017f72 <_malloc_r+0xba>
 8017f44:	1961      	adds	r1, r4, r5
 8017f46:	42a3      	cmp	r3, r4
 8017f48:	6025      	str	r5, [r4, #0]
 8017f4a:	bf18      	it	ne
 8017f4c:	6059      	strne	r1, [r3, #4]
 8017f4e:	6863      	ldr	r3, [r4, #4]
 8017f50:	bf08      	it	eq
 8017f52:	6031      	streq	r1, [r6, #0]
 8017f54:	5162      	str	r2, [r4, r5]
 8017f56:	604b      	str	r3, [r1, #4]
 8017f58:	4638      	mov	r0, r7
 8017f5a:	f104 060b 	add.w	r6, r4, #11
 8017f5e:	f000 fbf9 	bl	8018754 <__malloc_unlock>
 8017f62:	f026 0607 	bic.w	r6, r6, #7
 8017f66:	1d23      	adds	r3, r4, #4
 8017f68:	1af2      	subs	r2, r6, r3
 8017f6a:	d0b6      	beq.n	8017eda <_malloc_r+0x22>
 8017f6c:	1b9b      	subs	r3, r3, r6
 8017f6e:	50a3      	str	r3, [r4, r2]
 8017f70:	e7b3      	b.n	8017eda <_malloc_r+0x22>
 8017f72:	6862      	ldr	r2, [r4, #4]
 8017f74:	42a3      	cmp	r3, r4
 8017f76:	bf0c      	ite	eq
 8017f78:	6032      	streq	r2, [r6, #0]
 8017f7a:	605a      	strne	r2, [r3, #4]
 8017f7c:	e7ec      	b.n	8017f58 <_malloc_r+0xa0>
 8017f7e:	4623      	mov	r3, r4
 8017f80:	6864      	ldr	r4, [r4, #4]
 8017f82:	e7b2      	b.n	8017eea <_malloc_r+0x32>
 8017f84:	4634      	mov	r4, r6
 8017f86:	6876      	ldr	r6, [r6, #4]
 8017f88:	e7b9      	b.n	8017efe <_malloc_r+0x46>
 8017f8a:	230c      	movs	r3, #12
 8017f8c:	603b      	str	r3, [r7, #0]
 8017f8e:	4638      	mov	r0, r7
 8017f90:	f000 fbe0 	bl	8018754 <__malloc_unlock>
 8017f94:	e7a1      	b.n	8017eda <_malloc_r+0x22>
 8017f96:	6025      	str	r5, [r4, #0]
 8017f98:	e7de      	b.n	8017f58 <_malloc_r+0xa0>
 8017f9a:	bf00      	nop
 8017f9c:	20007ab4 	.word	0x20007ab4

08017fa0 <__ssputs_r>:
 8017fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fa4:	688e      	ldr	r6, [r1, #8]
 8017fa6:	429e      	cmp	r6, r3
 8017fa8:	4682      	mov	sl, r0
 8017faa:	460c      	mov	r4, r1
 8017fac:	4690      	mov	r8, r2
 8017fae:	461f      	mov	r7, r3
 8017fb0:	d838      	bhi.n	8018024 <__ssputs_r+0x84>
 8017fb2:	898a      	ldrh	r2, [r1, #12]
 8017fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fb8:	d032      	beq.n	8018020 <__ssputs_r+0x80>
 8017fba:	6825      	ldr	r5, [r4, #0]
 8017fbc:	6909      	ldr	r1, [r1, #16]
 8017fbe:	eba5 0901 	sub.w	r9, r5, r1
 8017fc2:	6965      	ldr	r5, [r4, #20]
 8017fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017fcc:	3301      	adds	r3, #1
 8017fce:	444b      	add	r3, r9
 8017fd0:	106d      	asrs	r5, r5, #1
 8017fd2:	429d      	cmp	r5, r3
 8017fd4:	bf38      	it	cc
 8017fd6:	461d      	movcc	r5, r3
 8017fd8:	0553      	lsls	r3, r2, #21
 8017fda:	d531      	bpl.n	8018040 <__ssputs_r+0xa0>
 8017fdc:	4629      	mov	r1, r5
 8017fde:	f7ff ff6b 	bl	8017eb8 <_malloc_r>
 8017fe2:	4606      	mov	r6, r0
 8017fe4:	b950      	cbnz	r0, 8017ffc <__ssputs_r+0x5c>
 8017fe6:	230c      	movs	r3, #12
 8017fe8:	f8ca 3000 	str.w	r3, [sl]
 8017fec:	89a3      	ldrh	r3, [r4, #12]
 8017fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ff2:	81a3      	strh	r3, [r4, #12]
 8017ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ffc:	6921      	ldr	r1, [r4, #16]
 8017ffe:	464a      	mov	r2, r9
 8018000:	f7ff fa08 	bl	8017414 <memcpy>
 8018004:	89a3      	ldrh	r3, [r4, #12]
 8018006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801800e:	81a3      	strh	r3, [r4, #12]
 8018010:	6126      	str	r6, [r4, #16]
 8018012:	6165      	str	r5, [r4, #20]
 8018014:	444e      	add	r6, r9
 8018016:	eba5 0509 	sub.w	r5, r5, r9
 801801a:	6026      	str	r6, [r4, #0]
 801801c:	60a5      	str	r5, [r4, #8]
 801801e:	463e      	mov	r6, r7
 8018020:	42be      	cmp	r6, r7
 8018022:	d900      	bls.n	8018026 <__ssputs_r+0x86>
 8018024:	463e      	mov	r6, r7
 8018026:	6820      	ldr	r0, [r4, #0]
 8018028:	4632      	mov	r2, r6
 801802a:	4641      	mov	r1, r8
 801802c:	f000 fb72 	bl	8018714 <memmove>
 8018030:	68a3      	ldr	r3, [r4, #8]
 8018032:	1b9b      	subs	r3, r3, r6
 8018034:	60a3      	str	r3, [r4, #8]
 8018036:	6823      	ldr	r3, [r4, #0]
 8018038:	4433      	add	r3, r6
 801803a:	6023      	str	r3, [r4, #0]
 801803c:	2000      	movs	r0, #0
 801803e:	e7db      	b.n	8017ff8 <__ssputs_r+0x58>
 8018040:	462a      	mov	r2, r5
 8018042:	f000 fb8d 	bl	8018760 <_realloc_r>
 8018046:	4606      	mov	r6, r0
 8018048:	2800      	cmp	r0, #0
 801804a:	d1e1      	bne.n	8018010 <__ssputs_r+0x70>
 801804c:	6921      	ldr	r1, [r4, #16]
 801804e:	4650      	mov	r0, sl
 8018050:	f7ff fec6 	bl	8017de0 <_free_r>
 8018054:	e7c7      	b.n	8017fe6 <__ssputs_r+0x46>
	...

08018058 <_svfiprintf_r>:
 8018058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801805c:	4698      	mov	r8, r3
 801805e:	898b      	ldrh	r3, [r1, #12]
 8018060:	061b      	lsls	r3, r3, #24
 8018062:	b09d      	sub	sp, #116	; 0x74
 8018064:	4607      	mov	r7, r0
 8018066:	460d      	mov	r5, r1
 8018068:	4614      	mov	r4, r2
 801806a:	d50e      	bpl.n	801808a <_svfiprintf_r+0x32>
 801806c:	690b      	ldr	r3, [r1, #16]
 801806e:	b963      	cbnz	r3, 801808a <_svfiprintf_r+0x32>
 8018070:	2140      	movs	r1, #64	; 0x40
 8018072:	f7ff ff21 	bl	8017eb8 <_malloc_r>
 8018076:	6028      	str	r0, [r5, #0]
 8018078:	6128      	str	r0, [r5, #16]
 801807a:	b920      	cbnz	r0, 8018086 <_svfiprintf_r+0x2e>
 801807c:	230c      	movs	r3, #12
 801807e:	603b      	str	r3, [r7, #0]
 8018080:	f04f 30ff 	mov.w	r0, #4294967295
 8018084:	e0d1      	b.n	801822a <_svfiprintf_r+0x1d2>
 8018086:	2340      	movs	r3, #64	; 0x40
 8018088:	616b      	str	r3, [r5, #20]
 801808a:	2300      	movs	r3, #0
 801808c:	9309      	str	r3, [sp, #36]	; 0x24
 801808e:	2320      	movs	r3, #32
 8018090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018094:	f8cd 800c 	str.w	r8, [sp, #12]
 8018098:	2330      	movs	r3, #48	; 0x30
 801809a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018244 <_svfiprintf_r+0x1ec>
 801809e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180a2:	f04f 0901 	mov.w	r9, #1
 80180a6:	4623      	mov	r3, r4
 80180a8:	469a      	mov	sl, r3
 80180aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180ae:	b10a      	cbz	r2, 80180b4 <_svfiprintf_r+0x5c>
 80180b0:	2a25      	cmp	r2, #37	; 0x25
 80180b2:	d1f9      	bne.n	80180a8 <_svfiprintf_r+0x50>
 80180b4:	ebba 0b04 	subs.w	fp, sl, r4
 80180b8:	d00b      	beq.n	80180d2 <_svfiprintf_r+0x7a>
 80180ba:	465b      	mov	r3, fp
 80180bc:	4622      	mov	r2, r4
 80180be:	4629      	mov	r1, r5
 80180c0:	4638      	mov	r0, r7
 80180c2:	f7ff ff6d 	bl	8017fa0 <__ssputs_r>
 80180c6:	3001      	adds	r0, #1
 80180c8:	f000 80aa 	beq.w	8018220 <_svfiprintf_r+0x1c8>
 80180cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180ce:	445a      	add	r2, fp
 80180d0:	9209      	str	r2, [sp, #36]	; 0x24
 80180d2:	f89a 3000 	ldrb.w	r3, [sl]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	f000 80a2 	beq.w	8018220 <_svfiprintf_r+0x1c8>
 80180dc:	2300      	movs	r3, #0
 80180de:	f04f 32ff 	mov.w	r2, #4294967295
 80180e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180e6:	f10a 0a01 	add.w	sl, sl, #1
 80180ea:	9304      	str	r3, [sp, #16]
 80180ec:	9307      	str	r3, [sp, #28]
 80180ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180f2:	931a      	str	r3, [sp, #104]	; 0x68
 80180f4:	4654      	mov	r4, sl
 80180f6:	2205      	movs	r2, #5
 80180f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180fc:	4851      	ldr	r0, [pc, #324]	; (8018244 <_svfiprintf_r+0x1ec>)
 80180fe:	f7e8 f86f 	bl	80001e0 <memchr>
 8018102:	9a04      	ldr	r2, [sp, #16]
 8018104:	b9d8      	cbnz	r0, 801813e <_svfiprintf_r+0xe6>
 8018106:	06d0      	lsls	r0, r2, #27
 8018108:	bf44      	itt	mi
 801810a:	2320      	movmi	r3, #32
 801810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018110:	0711      	lsls	r1, r2, #28
 8018112:	bf44      	itt	mi
 8018114:	232b      	movmi	r3, #43	; 0x2b
 8018116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801811a:	f89a 3000 	ldrb.w	r3, [sl]
 801811e:	2b2a      	cmp	r3, #42	; 0x2a
 8018120:	d015      	beq.n	801814e <_svfiprintf_r+0xf6>
 8018122:	9a07      	ldr	r2, [sp, #28]
 8018124:	4654      	mov	r4, sl
 8018126:	2000      	movs	r0, #0
 8018128:	f04f 0c0a 	mov.w	ip, #10
 801812c:	4621      	mov	r1, r4
 801812e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018132:	3b30      	subs	r3, #48	; 0x30
 8018134:	2b09      	cmp	r3, #9
 8018136:	d94e      	bls.n	80181d6 <_svfiprintf_r+0x17e>
 8018138:	b1b0      	cbz	r0, 8018168 <_svfiprintf_r+0x110>
 801813a:	9207      	str	r2, [sp, #28]
 801813c:	e014      	b.n	8018168 <_svfiprintf_r+0x110>
 801813e:	eba0 0308 	sub.w	r3, r0, r8
 8018142:	fa09 f303 	lsl.w	r3, r9, r3
 8018146:	4313      	orrs	r3, r2
 8018148:	9304      	str	r3, [sp, #16]
 801814a:	46a2      	mov	sl, r4
 801814c:	e7d2      	b.n	80180f4 <_svfiprintf_r+0x9c>
 801814e:	9b03      	ldr	r3, [sp, #12]
 8018150:	1d19      	adds	r1, r3, #4
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	9103      	str	r1, [sp, #12]
 8018156:	2b00      	cmp	r3, #0
 8018158:	bfbb      	ittet	lt
 801815a:	425b      	neglt	r3, r3
 801815c:	f042 0202 	orrlt.w	r2, r2, #2
 8018160:	9307      	strge	r3, [sp, #28]
 8018162:	9307      	strlt	r3, [sp, #28]
 8018164:	bfb8      	it	lt
 8018166:	9204      	strlt	r2, [sp, #16]
 8018168:	7823      	ldrb	r3, [r4, #0]
 801816a:	2b2e      	cmp	r3, #46	; 0x2e
 801816c:	d10c      	bne.n	8018188 <_svfiprintf_r+0x130>
 801816e:	7863      	ldrb	r3, [r4, #1]
 8018170:	2b2a      	cmp	r3, #42	; 0x2a
 8018172:	d135      	bne.n	80181e0 <_svfiprintf_r+0x188>
 8018174:	9b03      	ldr	r3, [sp, #12]
 8018176:	1d1a      	adds	r2, r3, #4
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	9203      	str	r2, [sp, #12]
 801817c:	2b00      	cmp	r3, #0
 801817e:	bfb8      	it	lt
 8018180:	f04f 33ff 	movlt.w	r3, #4294967295
 8018184:	3402      	adds	r4, #2
 8018186:	9305      	str	r3, [sp, #20]
 8018188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018254 <_svfiprintf_r+0x1fc>
 801818c:	7821      	ldrb	r1, [r4, #0]
 801818e:	2203      	movs	r2, #3
 8018190:	4650      	mov	r0, sl
 8018192:	f7e8 f825 	bl	80001e0 <memchr>
 8018196:	b140      	cbz	r0, 80181aa <_svfiprintf_r+0x152>
 8018198:	2340      	movs	r3, #64	; 0x40
 801819a:	eba0 000a 	sub.w	r0, r0, sl
 801819e:	fa03 f000 	lsl.w	r0, r3, r0
 80181a2:	9b04      	ldr	r3, [sp, #16]
 80181a4:	4303      	orrs	r3, r0
 80181a6:	3401      	adds	r4, #1
 80181a8:	9304      	str	r3, [sp, #16]
 80181aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ae:	4826      	ldr	r0, [pc, #152]	; (8018248 <_svfiprintf_r+0x1f0>)
 80181b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181b4:	2206      	movs	r2, #6
 80181b6:	f7e8 f813 	bl	80001e0 <memchr>
 80181ba:	2800      	cmp	r0, #0
 80181bc:	d038      	beq.n	8018230 <_svfiprintf_r+0x1d8>
 80181be:	4b23      	ldr	r3, [pc, #140]	; (801824c <_svfiprintf_r+0x1f4>)
 80181c0:	bb1b      	cbnz	r3, 801820a <_svfiprintf_r+0x1b2>
 80181c2:	9b03      	ldr	r3, [sp, #12]
 80181c4:	3307      	adds	r3, #7
 80181c6:	f023 0307 	bic.w	r3, r3, #7
 80181ca:	3308      	adds	r3, #8
 80181cc:	9303      	str	r3, [sp, #12]
 80181ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181d0:	4433      	add	r3, r6
 80181d2:	9309      	str	r3, [sp, #36]	; 0x24
 80181d4:	e767      	b.n	80180a6 <_svfiprintf_r+0x4e>
 80181d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80181da:	460c      	mov	r4, r1
 80181dc:	2001      	movs	r0, #1
 80181de:	e7a5      	b.n	801812c <_svfiprintf_r+0xd4>
 80181e0:	2300      	movs	r3, #0
 80181e2:	3401      	adds	r4, #1
 80181e4:	9305      	str	r3, [sp, #20]
 80181e6:	4619      	mov	r1, r3
 80181e8:	f04f 0c0a 	mov.w	ip, #10
 80181ec:	4620      	mov	r0, r4
 80181ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181f2:	3a30      	subs	r2, #48	; 0x30
 80181f4:	2a09      	cmp	r2, #9
 80181f6:	d903      	bls.n	8018200 <_svfiprintf_r+0x1a8>
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d0c5      	beq.n	8018188 <_svfiprintf_r+0x130>
 80181fc:	9105      	str	r1, [sp, #20]
 80181fe:	e7c3      	b.n	8018188 <_svfiprintf_r+0x130>
 8018200:	fb0c 2101 	mla	r1, ip, r1, r2
 8018204:	4604      	mov	r4, r0
 8018206:	2301      	movs	r3, #1
 8018208:	e7f0      	b.n	80181ec <_svfiprintf_r+0x194>
 801820a:	ab03      	add	r3, sp, #12
 801820c:	9300      	str	r3, [sp, #0]
 801820e:	462a      	mov	r2, r5
 8018210:	4b0f      	ldr	r3, [pc, #60]	; (8018250 <_svfiprintf_r+0x1f8>)
 8018212:	a904      	add	r1, sp, #16
 8018214:	4638      	mov	r0, r7
 8018216:	f7fb fedb 	bl	8013fd0 <_printf_float>
 801821a:	1c42      	adds	r2, r0, #1
 801821c:	4606      	mov	r6, r0
 801821e:	d1d6      	bne.n	80181ce <_svfiprintf_r+0x176>
 8018220:	89ab      	ldrh	r3, [r5, #12]
 8018222:	065b      	lsls	r3, r3, #25
 8018224:	f53f af2c 	bmi.w	8018080 <_svfiprintf_r+0x28>
 8018228:	9809      	ldr	r0, [sp, #36]	; 0x24
 801822a:	b01d      	add	sp, #116	; 0x74
 801822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018230:	ab03      	add	r3, sp, #12
 8018232:	9300      	str	r3, [sp, #0]
 8018234:	462a      	mov	r2, r5
 8018236:	4b06      	ldr	r3, [pc, #24]	; (8018250 <_svfiprintf_r+0x1f8>)
 8018238:	a904      	add	r1, sp, #16
 801823a:	4638      	mov	r0, r7
 801823c:	f7fc f96c 	bl	8014518 <_printf_i>
 8018240:	e7eb      	b.n	801821a <_svfiprintf_r+0x1c2>
 8018242:	bf00      	nop
 8018244:	0801e2dc 	.word	0x0801e2dc
 8018248:	0801e2e6 	.word	0x0801e2e6
 801824c:	08013fd1 	.word	0x08013fd1
 8018250:	08017fa1 	.word	0x08017fa1
 8018254:	0801e2e2 	.word	0x0801e2e2

08018258 <__sfputc_r>:
 8018258:	6893      	ldr	r3, [r2, #8]
 801825a:	3b01      	subs	r3, #1
 801825c:	2b00      	cmp	r3, #0
 801825e:	b410      	push	{r4}
 8018260:	6093      	str	r3, [r2, #8]
 8018262:	da08      	bge.n	8018276 <__sfputc_r+0x1e>
 8018264:	6994      	ldr	r4, [r2, #24]
 8018266:	42a3      	cmp	r3, r4
 8018268:	db01      	blt.n	801826e <__sfputc_r+0x16>
 801826a:	290a      	cmp	r1, #10
 801826c:	d103      	bne.n	8018276 <__sfputc_r+0x1e>
 801826e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018272:	f7fd bbe9 	b.w	8015a48 <__swbuf_r>
 8018276:	6813      	ldr	r3, [r2, #0]
 8018278:	1c58      	adds	r0, r3, #1
 801827a:	6010      	str	r0, [r2, #0]
 801827c:	7019      	strb	r1, [r3, #0]
 801827e:	4608      	mov	r0, r1
 8018280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018284:	4770      	bx	lr

08018286 <__sfputs_r>:
 8018286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018288:	4606      	mov	r6, r0
 801828a:	460f      	mov	r7, r1
 801828c:	4614      	mov	r4, r2
 801828e:	18d5      	adds	r5, r2, r3
 8018290:	42ac      	cmp	r4, r5
 8018292:	d101      	bne.n	8018298 <__sfputs_r+0x12>
 8018294:	2000      	movs	r0, #0
 8018296:	e007      	b.n	80182a8 <__sfputs_r+0x22>
 8018298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801829c:	463a      	mov	r2, r7
 801829e:	4630      	mov	r0, r6
 80182a0:	f7ff ffda 	bl	8018258 <__sfputc_r>
 80182a4:	1c43      	adds	r3, r0, #1
 80182a6:	d1f3      	bne.n	8018290 <__sfputs_r+0xa>
 80182a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080182ac <_vfiprintf_r>:
 80182ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182b0:	460d      	mov	r5, r1
 80182b2:	b09d      	sub	sp, #116	; 0x74
 80182b4:	4614      	mov	r4, r2
 80182b6:	4698      	mov	r8, r3
 80182b8:	4606      	mov	r6, r0
 80182ba:	b118      	cbz	r0, 80182c4 <_vfiprintf_r+0x18>
 80182bc:	6983      	ldr	r3, [r0, #24]
 80182be:	b90b      	cbnz	r3, 80182c4 <_vfiprintf_r+0x18>
 80182c0:	f7fe fc16 	bl	8016af0 <__sinit>
 80182c4:	4b89      	ldr	r3, [pc, #548]	; (80184ec <_vfiprintf_r+0x240>)
 80182c6:	429d      	cmp	r5, r3
 80182c8:	d11b      	bne.n	8018302 <_vfiprintf_r+0x56>
 80182ca:	6875      	ldr	r5, [r6, #4]
 80182cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182ce:	07d9      	lsls	r1, r3, #31
 80182d0:	d405      	bmi.n	80182de <_vfiprintf_r+0x32>
 80182d2:	89ab      	ldrh	r3, [r5, #12]
 80182d4:	059a      	lsls	r2, r3, #22
 80182d6:	d402      	bmi.n	80182de <_vfiprintf_r+0x32>
 80182d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182da:	f7ff f81a 	bl	8017312 <__retarget_lock_acquire_recursive>
 80182de:	89ab      	ldrh	r3, [r5, #12]
 80182e0:	071b      	lsls	r3, r3, #28
 80182e2:	d501      	bpl.n	80182e8 <_vfiprintf_r+0x3c>
 80182e4:	692b      	ldr	r3, [r5, #16]
 80182e6:	b9eb      	cbnz	r3, 8018324 <_vfiprintf_r+0x78>
 80182e8:	4629      	mov	r1, r5
 80182ea:	4630      	mov	r0, r6
 80182ec:	f7fd fbfe 	bl	8015aec <__swsetup_r>
 80182f0:	b1c0      	cbz	r0, 8018324 <_vfiprintf_r+0x78>
 80182f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182f4:	07dc      	lsls	r4, r3, #31
 80182f6:	d50e      	bpl.n	8018316 <_vfiprintf_r+0x6a>
 80182f8:	f04f 30ff 	mov.w	r0, #4294967295
 80182fc:	b01d      	add	sp, #116	; 0x74
 80182fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018302:	4b7b      	ldr	r3, [pc, #492]	; (80184f0 <_vfiprintf_r+0x244>)
 8018304:	429d      	cmp	r5, r3
 8018306:	d101      	bne.n	801830c <_vfiprintf_r+0x60>
 8018308:	68b5      	ldr	r5, [r6, #8]
 801830a:	e7df      	b.n	80182cc <_vfiprintf_r+0x20>
 801830c:	4b79      	ldr	r3, [pc, #484]	; (80184f4 <_vfiprintf_r+0x248>)
 801830e:	429d      	cmp	r5, r3
 8018310:	bf08      	it	eq
 8018312:	68f5      	ldreq	r5, [r6, #12]
 8018314:	e7da      	b.n	80182cc <_vfiprintf_r+0x20>
 8018316:	89ab      	ldrh	r3, [r5, #12]
 8018318:	0598      	lsls	r0, r3, #22
 801831a:	d4ed      	bmi.n	80182f8 <_vfiprintf_r+0x4c>
 801831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801831e:	f7fe fff9 	bl	8017314 <__retarget_lock_release_recursive>
 8018322:	e7e9      	b.n	80182f8 <_vfiprintf_r+0x4c>
 8018324:	2300      	movs	r3, #0
 8018326:	9309      	str	r3, [sp, #36]	; 0x24
 8018328:	2320      	movs	r3, #32
 801832a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801832e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018332:	2330      	movs	r3, #48	; 0x30
 8018334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80184f8 <_vfiprintf_r+0x24c>
 8018338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801833c:	f04f 0901 	mov.w	r9, #1
 8018340:	4623      	mov	r3, r4
 8018342:	469a      	mov	sl, r3
 8018344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018348:	b10a      	cbz	r2, 801834e <_vfiprintf_r+0xa2>
 801834a:	2a25      	cmp	r2, #37	; 0x25
 801834c:	d1f9      	bne.n	8018342 <_vfiprintf_r+0x96>
 801834e:	ebba 0b04 	subs.w	fp, sl, r4
 8018352:	d00b      	beq.n	801836c <_vfiprintf_r+0xc0>
 8018354:	465b      	mov	r3, fp
 8018356:	4622      	mov	r2, r4
 8018358:	4629      	mov	r1, r5
 801835a:	4630      	mov	r0, r6
 801835c:	f7ff ff93 	bl	8018286 <__sfputs_r>
 8018360:	3001      	adds	r0, #1
 8018362:	f000 80aa 	beq.w	80184ba <_vfiprintf_r+0x20e>
 8018366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018368:	445a      	add	r2, fp
 801836a:	9209      	str	r2, [sp, #36]	; 0x24
 801836c:	f89a 3000 	ldrb.w	r3, [sl]
 8018370:	2b00      	cmp	r3, #0
 8018372:	f000 80a2 	beq.w	80184ba <_vfiprintf_r+0x20e>
 8018376:	2300      	movs	r3, #0
 8018378:	f04f 32ff 	mov.w	r2, #4294967295
 801837c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018380:	f10a 0a01 	add.w	sl, sl, #1
 8018384:	9304      	str	r3, [sp, #16]
 8018386:	9307      	str	r3, [sp, #28]
 8018388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801838c:	931a      	str	r3, [sp, #104]	; 0x68
 801838e:	4654      	mov	r4, sl
 8018390:	2205      	movs	r2, #5
 8018392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018396:	4858      	ldr	r0, [pc, #352]	; (80184f8 <_vfiprintf_r+0x24c>)
 8018398:	f7e7 ff22 	bl	80001e0 <memchr>
 801839c:	9a04      	ldr	r2, [sp, #16]
 801839e:	b9d8      	cbnz	r0, 80183d8 <_vfiprintf_r+0x12c>
 80183a0:	06d1      	lsls	r1, r2, #27
 80183a2:	bf44      	itt	mi
 80183a4:	2320      	movmi	r3, #32
 80183a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183aa:	0713      	lsls	r3, r2, #28
 80183ac:	bf44      	itt	mi
 80183ae:	232b      	movmi	r3, #43	; 0x2b
 80183b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183b4:	f89a 3000 	ldrb.w	r3, [sl]
 80183b8:	2b2a      	cmp	r3, #42	; 0x2a
 80183ba:	d015      	beq.n	80183e8 <_vfiprintf_r+0x13c>
 80183bc:	9a07      	ldr	r2, [sp, #28]
 80183be:	4654      	mov	r4, sl
 80183c0:	2000      	movs	r0, #0
 80183c2:	f04f 0c0a 	mov.w	ip, #10
 80183c6:	4621      	mov	r1, r4
 80183c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80183cc:	3b30      	subs	r3, #48	; 0x30
 80183ce:	2b09      	cmp	r3, #9
 80183d0:	d94e      	bls.n	8018470 <_vfiprintf_r+0x1c4>
 80183d2:	b1b0      	cbz	r0, 8018402 <_vfiprintf_r+0x156>
 80183d4:	9207      	str	r2, [sp, #28]
 80183d6:	e014      	b.n	8018402 <_vfiprintf_r+0x156>
 80183d8:	eba0 0308 	sub.w	r3, r0, r8
 80183dc:	fa09 f303 	lsl.w	r3, r9, r3
 80183e0:	4313      	orrs	r3, r2
 80183e2:	9304      	str	r3, [sp, #16]
 80183e4:	46a2      	mov	sl, r4
 80183e6:	e7d2      	b.n	801838e <_vfiprintf_r+0xe2>
 80183e8:	9b03      	ldr	r3, [sp, #12]
 80183ea:	1d19      	adds	r1, r3, #4
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	9103      	str	r1, [sp, #12]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	bfbb      	ittet	lt
 80183f4:	425b      	neglt	r3, r3
 80183f6:	f042 0202 	orrlt.w	r2, r2, #2
 80183fa:	9307      	strge	r3, [sp, #28]
 80183fc:	9307      	strlt	r3, [sp, #28]
 80183fe:	bfb8      	it	lt
 8018400:	9204      	strlt	r2, [sp, #16]
 8018402:	7823      	ldrb	r3, [r4, #0]
 8018404:	2b2e      	cmp	r3, #46	; 0x2e
 8018406:	d10c      	bne.n	8018422 <_vfiprintf_r+0x176>
 8018408:	7863      	ldrb	r3, [r4, #1]
 801840a:	2b2a      	cmp	r3, #42	; 0x2a
 801840c:	d135      	bne.n	801847a <_vfiprintf_r+0x1ce>
 801840e:	9b03      	ldr	r3, [sp, #12]
 8018410:	1d1a      	adds	r2, r3, #4
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	9203      	str	r2, [sp, #12]
 8018416:	2b00      	cmp	r3, #0
 8018418:	bfb8      	it	lt
 801841a:	f04f 33ff 	movlt.w	r3, #4294967295
 801841e:	3402      	adds	r4, #2
 8018420:	9305      	str	r3, [sp, #20]
 8018422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018508 <_vfiprintf_r+0x25c>
 8018426:	7821      	ldrb	r1, [r4, #0]
 8018428:	2203      	movs	r2, #3
 801842a:	4650      	mov	r0, sl
 801842c:	f7e7 fed8 	bl	80001e0 <memchr>
 8018430:	b140      	cbz	r0, 8018444 <_vfiprintf_r+0x198>
 8018432:	2340      	movs	r3, #64	; 0x40
 8018434:	eba0 000a 	sub.w	r0, r0, sl
 8018438:	fa03 f000 	lsl.w	r0, r3, r0
 801843c:	9b04      	ldr	r3, [sp, #16]
 801843e:	4303      	orrs	r3, r0
 8018440:	3401      	adds	r4, #1
 8018442:	9304      	str	r3, [sp, #16]
 8018444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018448:	482c      	ldr	r0, [pc, #176]	; (80184fc <_vfiprintf_r+0x250>)
 801844a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801844e:	2206      	movs	r2, #6
 8018450:	f7e7 fec6 	bl	80001e0 <memchr>
 8018454:	2800      	cmp	r0, #0
 8018456:	d03f      	beq.n	80184d8 <_vfiprintf_r+0x22c>
 8018458:	4b29      	ldr	r3, [pc, #164]	; (8018500 <_vfiprintf_r+0x254>)
 801845a:	bb1b      	cbnz	r3, 80184a4 <_vfiprintf_r+0x1f8>
 801845c:	9b03      	ldr	r3, [sp, #12]
 801845e:	3307      	adds	r3, #7
 8018460:	f023 0307 	bic.w	r3, r3, #7
 8018464:	3308      	adds	r3, #8
 8018466:	9303      	str	r3, [sp, #12]
 8018468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801846a:	443b      	add	r3, r7
 801846c:	9309      	str	r3, [sp, #36]	; 0x24
 801846e:	e767      	b.n	8018340 <_vfiprintf_r+0x94>
 8018470:	fb0c 3202 	mla	r2, ip, r2, r3
 8018474:	460c      	mov	r4, r1
 8018476:	2001      	movs	r0, #1
 8018478:	e7a5      	b.n	80183c6 <_vfiprintf_r+0x11a>
 801847a:	2300      	movs	r3, #0
 801847c:	3401      	adds	r4, #1
 801847e:	9305      	str	r3, [sp, #20]
 8018480:	4619      	mov	r1, r3
 8018482:	f04f 0c0a 	mov.w	ip, #10
 8018486:	4620      	mov	r0, r4
 8018488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801848c:	3a30      	subs	r2, #48	; 0x30
 801848e:	2a09      	cmp	r2, #9
 8018490:	d903      	bls.n	801849a <_vfiprintf_r+0x1ee>
 8018492:	2b00      	cmp	r3, #0
 8018494:	d0c5      	beq.n	8018422 <_vfiprintf_r+0x176>
 8018496:	9105      	str	r1, [sp, #20]
 8018498:	e7c3      	b.n	8018422 <_vfiprintf_r+0x176>
 801849a:	fb0c 2101 	mla	r1, ip, r1, r2
 801849e:	4604      	mov	r4, r0
 80184a0:	2301      	movs	r3, #1
 80184a2:	e7f0      	b.n	8018486 <_vfiprintf_r+0x1da>
 80184a4:	ab03      	add	r3, sp, #12
 80184a6:	9300      	str	r3, [sp, #0]
 80184a8:	462a      	mov	r2, r5
 80184aa:	4b16      	ldr	r3, [pc, #88]	; (8018504 <_vfiprintf_r+0x258>)
 80184ac:	a904      	add	r1, sp, #16
 80184ae:	4630      	mov	r0, r6
 80184b0:	f7fb fd8e 	bl	8013fd0 <_printf_float>
 80184b4:	4607      	mov	r7, r0
 80184b6:	1c78      	adds	r0, r7, #1
 80184b8:	d1d6      	bne.n	8018468 <_vfiprintf_r+0x1bc>
 80184ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80184bc:	07d9      	lsls	r1, r3, #31
 80184be:	d405      	bmi.n	80184cc <_vfiprintf_r+0x220>
 80184c0:	89ab      	ldrh	r3, [r5, #12]
 80184c2:	059a      	lsls	r2, r3, #22
 80184c4:	d402      	bmi.n	80184cc <_vfiprintf_r+0x220>
 80184c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184c8:	f7fe ff24 	bl	8017314 <__retarget_lock_release_recursive>
 80184cc:	89ab      	ldrh	r3, [r5, #12]
 80184ce:	065b      	lsls	r3, r3, #25
 80184d0:	f53f af12 	bmi.w	80182f8 <_vfiprintf_r+0x4c>
 80184d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184d6:	e711      	b.n	80182fc <_vfiprintf_r+0x50>
 80184d8:	ab03      	add	r3, sp, #12
 80184da:	9300      	str	r3, [sp, #0]
 80184dc:	462a      	mov	r2, r5
 80184de:	4b09      	ldr	r3, [pc, #36]	; (8018504 <_vfiprintf_r+0x258>)
 80184e0:	a904      	add	r1, sp, #16
 80184e2:	4630      	mov	r0, r6
 80184e4:	f7fc f818 	bl	8014518 <_printf_i>
 80184e8:	e7e4      	b.n	80184b4 <_vfiprintf_r+0x208>
 80184ea:	bf00      	nop
 80184ec:	0801e0c4 	.word	0x0801e0c4
 80184f0:	0801e0e4 	.word	0x0801e0e4
 80184f4:	0801e0a4 	.word	0x0801e0a4
 80184f8:	0801e2dc 	.word	0x0801e2dc
 80184fc:	0801e2e6 	.word	0x0801e2e6
 8018500:	08013fd1 	.word	0x08013fd1
 8018504:	08018287 	.word	0x08018287
 8018508:	0801e2e2 	.word	0x0801e2e2
 801850c:	00000000 	.word	0x00000000

08018510 <nan>:
 8018510:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018518 <nan+0x8>
 8018514:	4770      	bx	lr
 8018516:	bf00      	nop
 8018518:	00000000 	.word	0x00000000
 801851c:	7ff80000 	.word	0x7ff80000

08018520 <_sbrk_r>:
 8018520:	b538      	push	{r3, r4, r5, lr}
 8018522:	4d06      	ldr	r5, [pc, #24]	; (801853c <_sbrk_r+0x1c>)
 8018524:	2300      	movs	r3, #0
 8018526:	4604      	mov	r4, r0
 8018528:	4608      	mov	r0, r1
 801852a:	602b      	str	r3, [r5, #0]
 801852c:	f7e9 ff70 	bl	8002410 <_sbrk>
 8018530:	1c43      	adds	r3, r0, #1
 8018532:	d102      	bne.n	801853a <_sbrk_r+0x1a>
 8018534:	682b      	ldr	r3, [r5, #0]
 8018536:	b103      	cbz	r3, 801853a <_sbrk_r+0x1a>
 8018538:	6023      	str	r3, [r4, #0]
 801853a:	bd38      	pop	{r3, r4, r5, pc}
 801853c:	20007abc 	.word	0x20007abc

08018540 <__sread>:
 8018540:	b510      	push	{r4, lr}
 8018542:	460c      	mov	r4, r1
 8018544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018548:	f000 f93a 	bl	80187c0 <_read_r>
 801854c:	2800      	cmp	r0, #0
 801854e:	bfab      	itete	ge
 8018550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018552:	89a3      	ldrhlt	r3, [r4, #12]
 8018554:	181b      	addge	r3, r3, r0
 8018556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801855a:	bfac      	ite	ge
 801855c:	6563      	strge	r3, [r4, #84]	; 0x54
 801855e:	81a3      	strhlt	r3, [r4, #12]
 8018560:	bd10      	pop	{r4, pc}

08018562 <__swrite>:
 8018562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018566:	461f      	mov	r7, r3
 8018568:	898b      	ldrh	r3, [r1, #12]
 801856a:	05db      	lsls	r3, r3, #23
 801856c:	4605      	mov	r5, r0
 801856e:	460c      	mov	r4, r1
 8018570:	4616      	mov	r6, r2
 8018572:	d505      	bpl.n	8018580 <__swrite+0x1e>
 8018574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018578:	2302      	movs	r3, #2
 801857a:	2200      	movs	r2, #0
 801857c:	f000 f8b8 	bl	80186f0 <_lseek_r>
 8018580:	89a3      	ldrh	r3, [r4, #12]
 8018582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801858a:	81a3      	strh	r3, [r4, #12]
 801858c:	4632      	mov	r2, r6
 801858e:	463b      	mov	r3, r7
 8018590:	4628      	mov	r0, r5
 8018592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018596:	f000 b837 	b.w	8018608 <_write_r>

0801859a <__sseek>:
 801859a:	b510      	push	{r4, lr}
 801859c:	460c      	mov	r4, r1
 801859e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185a2:	f000 f8a5 	bl	80186f0 <_lseek_r>
 80185a6:	1c43      	adds	r3, r0, #1
 80185a8:	89a3      	ldrh	r3, [r4, #12]
 80185aa:	bf15      	itete	ne
 80185ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80185ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80185b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80185b6:	81a3      	strheq	r3, [r4, #12]
 80185b8:	bf18      	it	ne
 80185ba:	81a3      	strhne	r3, [r4, #12]
 80185bc:	bd10      	pop	{r4, pc}

080185be <__sclose>:
 80185be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185c2:	f000 b851 	b.w	8018668 <_close_r>

080185c6 <strncmp>:
 80185c6:	b510      	push	{r4, lr}
 80185c8:	b17a      	cbz	r2, 80185ea <strncmp+0x24>
 80185ca:	4603      	mov	r3, r0
 80185cc:	3901      	subs	r1, #1
 80185ce:	1884      	adds	r4, r0, r2
 80185d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80185d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80185d8:	4290      	cmp	r0, r2
 80185da:	d101      	bne.n	80185e0 <strncmp+0x1a>
 80185dc:	42a3      	cmp	r3, r4
 80185de:	d101      	bne.n	80185e4 <strncmp+0x1e>
 80185e0:	1a80      	subs	r0, r0, r2
 80185e2:	bd10      	pop	{r4, pc}
 80185e4:	2800      	cmp	r0, #0
 80185e6:	d1f3      	bne.n	80185d0 <strncmp+0xa>
 80185e8:	e7fa      	b.n	80185e0 <strncmp+0x1a>
 80185ea:	4610      	mov	r0, r2
 80185ec:	e7f9      	b.n	80185e2 <strncmp+0x1c>

080185ee <__ascii_wctomb>:
 80185ee:	b149      	cbz	r1, 8018604 <__ascii_wctomb+0x16>
 80185f0:	2aff      	cmp	r2, #255	; 0xff
 80185f2:	bf85      	ittet	hi
 80185f4:	238a      	movhi	r3, #138	; 0x8a
 80185f6:	6003      	strhi	r3, [r0, #0]
 80185f8:	700a      	strbls	r2, [r1, #0]
 80185fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80185fe:	bf98      	it	ls
 8018600:	2001      	movls	r0, #1
 8018602:	4770      	bx	lr
 8018604:	4608      	mov	r0, r1
 8018606:	4770      	bx	lr

08018608 <_write_r>:
 8018608:	b538      	push	{r3, r4, r5, lr}
 801860a:	4d07      	ldr	r5, [pc, #28]	; (8018628 <_write_r+0x20>)
 801860c:	4604      	mov	r4, r0
 801860e:	4608      	mov	r0, r1
 8018610:	4611      	mov	r1, r2
 8018612:	2200      	movs	r2, #0
 8018614:	602a      	str	r2, [r5, #0]
 8018616:	461a      	mov	r2, r3
 8018618:	f7e9 fea9 	bl	800236e <_write>
 801861c:	1c43      	adds	r3, r0, #1
 801861e:	d102      	bne.n	8018626 <_write_r+0x1e>
 8018620:	682b      	ldr	r3, [r5, #0]
 8018622:	b103      	cbz	r3, 8018626 <_write_r+0x1e>
 8018624:	6023      	str	r3, [r4, #0]
 8018626:	bd38      	pop	{r3, r4, r5, pc}
 8018628:	20007abc 	.word	0x20007abc

0801862c <__assert_func>:
 801862c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801862e:	4614      	mov	r4, r2
 8018630:	461a      	mov	r2, r3
 8018632:	4b09      	ldr	r3, [pc, #36]	; (8018658 <__assert_func+0x2c>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	4605      	mov	r5, r0
 8018638:	68d8      	ldr	r0, [r3, #12]
 801863a:	b14c      	cbz	r4, 8018650 <__assert_func+0x24>
 801863c:	4b07      	ldr	r3, [pc, #28]	; (801865c <__assert_func+0x30>)
 801863e:	9100      	str	r1, [sp, #0]
 8018640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018644:	4906      	ldr	r1, [pc, #24]	; (8018660 <__assert_func+0x34>)
 8018646:	462b      	mov	r3, r5
 8018648:	f000 f81e 	bl	8018688 <fiprintf>
 801864c:	f000 f8ca 	bl	80187e4 <abort>
 8018650:	4b04      	ldr	r3, [pc, #16]	; (8018664 <__assert_func+0x38>)
 8018652:	461c      	mov	r4, r3
 8018654:	e7f3      	b.n	801863e <__assert_func+0x12>
 8018656:	bf00      	nop
 8018658:	20000230 	.word	0x20000230
 801865c:	0801e2ed 	.word	0x0801e2ed
 8018660:	0801e2fa 	.word	0x0801e2fa
 8018664:	0801e328 	.word	0x0801e328

08018668 <_close_r>:
 8018668:	b538      	push	{r3, r4, r5, lr}
 801866a:	4d06      	ldr	r5, [pc, #24]	; (8018684 <_close_r+0x1c>)
 801866c:	2300      	movs	r3, #0
 801866e:	4604      	mov	r4, r0
 8018670:	4608      	mov	r0, r1
 8018672:	602b      	str	r3, [r5, #0]
 8018674:	f7e9 fe97 	bl	80023a6 <_close>
 8018678:	1c43      	adds	r3, r0, #1
 801867a:	d102      	bne.n	8018682 <_close_r+0x1a>
 801867c:	682b      	ldr	r3, [r5, #0]
 801867e:	b103      	cbz	r3, 8018682 <_close_r+0x1a>
 8018680:	6023      	str	r3, [r4, #0]
 8018682:	bd38      	pop	{r3, r4, r5, pc}
 8018684:	20007abc 	.word	0x20007abc

08018688 <fiprintf>:
 8018688:	b40e      	push	{r1, r2, r3}
 801868a:	b503      	push	{r0, r1, lr}
 801868c:	4601      	mov	r1, r0
 801868e:	ab03      	add	r3, sp, #12
 8018690:	4805      	ldr	r0, [pc, #20]	; (80186a8 <fiprintf+0x20>)
 8018692:	f853 2b04 	ldr.w	r2, [r3], #4
 8018696:	6800      	ldr	r0, [r0, #0]
 8018698:	9301      	str	r3, [sp, #4]
 801869a:	f7ff fe07 	bl	80182ac <_vfiprintf_r>
 801869e:	b002      	add	sp, #8
 80186a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80186a4:	b003      	add	sp, #12
 80186a6:	4770      	bx	lr
 80186a8:	20000230 	.word	0x20000230

080186ac <_fstat_r>:
 80186ac:	b538      	push	{r3, r4, r5, lr}
 80186ae:	4d07      	ldr	r5, [pc, #28]	; (80186cc <_fstat_r+0x20>)
 80186b0:	2300      	movs	r3, #0
 80186b2:	4604      	mov	r4, r0
 80186b4:	4608      	mov	r0, r1
 80186b6:	4611      	mov	r1, r2
 80186b8:	602b      	str	r3, [r5, #0]
 80186ba:	f7e9 fe80 	bl	80023be <_fstat>
 80186be:	1c43      	adds	r3, r0, #1
 80186c0:	d102      	bne.n	80186c8 <_fstat_r+0x1c>
 80186c2:	682b      	ldr	r3, [r5, #0]
 80186c4:	b103      	cbz	r3, 80186c8 <_fstat_r+0x1c>
 80186c6:	6023      	str	r3, [r4, #0]
 80186c8:	bd38      	pop	{r3, r4, r5, pc}
 80186ca:	bf00      	nop
 80186cc:	20007abc 	.word	0x20007abc

080186d0 <_isatty_r>:
 80186d0:	b538      	push	{r3, r4, r5, lr}
 80186d2:	4d06      	ldr	r5, [pc, #24]	; (80186ec <_isatty_r+0x1c>)
 80186d4:	2300      	movs	r3, #0
 80186d6:	4604      	mov	r4, r0
 80186d8:	4608      	mov	r0, r1
 80186da:	602b      	str	r3, [r5, #0]
 80186dc:	f7e9 fe7f 	bl	80023de <_isatty>
 80186e0:	1c43      	adds	r3, r0, #1
 80186e2:	d102      	bne.n	80186ea <_isatty_r+0x1a>
 80186e4:	682b      	ldr	r3, [r5, #0]
 80186e6:	b103      	cbz	r3, 80186ea <_isatty_r+0x1a>
 80186e8:	6023      	str	r3, [r4, #0]
 80186ea:	bd38      	pop	{r3, r4, r5, pc}
 80186ec:	20007abc 	.word	0x20007abc

080186f0 <_lseek_r>:
 80186f0:	b538      	push	{r3, r4, r5, lr}
 80186f2:	4d07      	ldr	r5, [pc, #28]	; (8018710 <_lseek_r+0x20>)
 80186f4:	4604      	mov	r4, r0
 80186f6:	4608      	mov	r0, r1
 80186f8:	4611      	mov	r1, r2
 80186fa:	2200      	movs	r2, #0
 80186fc:	602a      	str	r2, [r5, #0]
 80186fe:	461a      	mov	r2, r3
 8018700:	f7e9 fe78 	bl	80023f4 <_lseek>
 8018704:	1c43      	adds	r3, r0, #1
 8018706:	d102      	bne.n	801870e <_lseek_r+0x1e>
 8018708:	682b      	ldr	r3, [r5, #0]
 801870a:	b103      	cbz	r3, 801870e <_lseek_r+0x1e>
 801870c:	6023      	str	r3, [r4, #0]
 801870e:	bd38      	pop	{r3, r4, r5, pc}
 8018710:	20007abc 	.word	0x20007abc

08018714 <memmove>:
 8018714:	4288      	cmp	r0, r1
 8018716:	b510      	push	{r4, lr}
 8018718:	eb01 0402 	add.w	r4, r1, r2
 801871c:	d902      	bls.n	8018724 <memmove+0x10>
 801871e:	4284      	cmp	r4, r0
 8018720:	4623      	mov	r3, r4
 8018722:	d807      	bhi.n	8018734 <memmove+0x20>
 8018724:	1e43      	subs	r3, r0, #1
 8018726:	42a1      	cmp	r1, r4
 8018728:	d008      	beq.n	801873c <memmove+0x28>
 801872a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801872e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018732:	e7f8      	b.n	8018726 <memmove+0x12>
 8018734:	4402      	add	r2, r0
 8018736:	4601      	mov	r1, r0
 8018738:	428a      	cmp	r2, r1
 801873a:	d100      	bne.n	801873e <memmove+0x2a>
 801873c:	bd10      	pop	{r4, pc}
 801873e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018746:	e7f7      	b.n	8018738 <memmove+0x24>

08018748 <__malloc_lock>:
 8018748:	4801      	ldr	r0, [pc, #4]	; (8018750 <__malloc_lock+0x8>)
 801874a:	f7fe bde2 	b.w	8017312 <__retarget_lock_acquire_recursive>
 801874e:	bf00      	nop
 8018750:	20007aae 	.word	0x20007aae

08018754 <__malloc_unlock>:
 8018754:	4801      	ldr	r0, [pc, #4]	; (801875c <__malloc_unlock+0x8>)
 8018756:	f7fe bddd 	b.w	8017314 <__retarget_lock_release_recursive>
 801875a:	bf00      	nop
 801875c:	20007aae 	.word	0x20007aae

08018760 <_realloc_r>:
 8018760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018764:	4680      	mov	r8, r0
 8018766:	4614      	mov	r4, r2
 8018768:	460e      	mov	r6, r1
 801876a:	b921      	cbnz	r1, 8018776 <_realloc_r+0x16>
 801876c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018770:	4611      	mov	r1, r2
 8018772:	f7ff bba1 	b.w	8017eb8 <_malloc_r>
 8018776:	b92a      	cbnz	r2, 8018784 <_realloc_r+0x24>
 8018778:	f7ff fb32 	bl	8017de0 <_free_r>
 801877c:	4625      	mov	r5, r4
 801877e:	4628      	mov	r0, r5
 8018780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018784:	f000 f835 	bl	80187f2 <_malloc_usable_size_r>
 8018788:	4284      	cmp	r4, r0
 801878a:	4607      	mov	r7, r0
 801878c:	d802      	bhi.n	8018794 <_realloc_r+0x34>
 801878e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018792:	d812      	bhi.n	80187ba <_realloc_r+0x5a>
 8018794:	4621      	mov	r1, r4
 8018796:	4640      	mov	r0, r8
 8018798:	f7ff fb8e 	bl	8017eb8 <_malloc_r>
 801879c:	4605      	mov	r5, r0
 801879e:	2800      	cmp	r0, #0
 80187a0:	d0ed      	beq.n	801877e <_realloc_r+0x1e>
 80187a2:	42bc      	cmp	r4, r7
 80187a4:	4622      	mov	r2, r4
 80187a6:	4631      	mov	r1, r6
 80187a8:	bf28      	it	cs
 80187aa:	463a      	movcs	r2, r7
 80187ac:	f7fe fe32 	bl	8017414 <memcpy>
 80187b0:	4631      	mov	r1, r6
 80187b2:	4640      	mov	r0, r8
 80187b4:	f7ff fb14 	bl	8017de0 <_free_r>
 80187b8:	e7e1      	b.n	801877e <_realloc_r+0x1e>
 80187ba:	4635      	mov	r5, r6
 80187bc:	e7df      	b.n	801877e <_realloc_r+0x1e>
	...

080187c0 <_read_r>:
 80187c0:	b538      	push	{r3, r4, r5, lr}
 80187c2:	4d07      	ldr	r5, [pc, #28]	; (80187e0 <_read_r+0x20>)
 80187c4:	4604      	mov	r4, r0
 80187c6:	4608      	mov	r0, r1
 80187c8:	4611      	mov	r1, r2
 80187ca:	2200      	movs	r2, #0
 80187cc:	602a      	str	r2, [r5, #0]
 80187ce:	461a      	mov	r2, r3
 80187d0:	f7e9 fdb0 	bl	8002334 <_read>
 80187d4:	1c43      	adds	r3, r0, #1
 80187d6:	d102      	bne.n	80187de <_read_r+0x1e>
 80187d8:	682b      	ldr	r3, [r5, #0]
 80187da:	b103      	cbz	r3, 80187de <_read_r+0x1e>
 80187dc:	6023      	str	r3, [r4, #0]
 80187de:	bd38      	pop	{r3, r4, r5, pc}
 80187e0:	20007abc 	.word	0x20007abc

080187e4 <abort>:
 80187e4:	b508      	push	{r3, lr}
 80187e6:	2006      	movs	r0, #6
 80187e8:	f000 f834 	bl	8018854 <raise>
 80187ec:	2001      	movs	r0, #1
 80187ee:	f7e9 fd97 	bl	8002320 <_exit>

080187f2 <_malloc_usable_size_r>:
 80187f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187f6:	1f18      	subs	r0, r3, #4
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	bfbc      	itt	lt
 80187fc:	580b      	ldrlt	r3, [r1, r0]
 80187fe:	18c0      	addlt	r0, r0, r3
 8018800:	4770      	bx	lr

08018802 <_raise_r>:
 8018802:	291f      	cmp	r1, #31
 8018804:	b538      	push	{r3, r4, r5, lr}
 8018806:	4604      	mov	r4, r0
 8018808:	460d      	mov	r5, r1
 801880a:	d904      	bls.n	8018816 <_raise_r+0x14>
 801880c:	2316      	movs	r3, #22
 801880e:	6003      	str	r3, [r0, #0]
 8018810:	f04f 30ff 	mov.w	r0, #4294967295
 8018814:	bd38      	pop	{r3, r4, r5, pc}
 8018816:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018818:	b112      	cbz	r2, 8018820 <_raise_r+0x1e>
 801881a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801881e:	b94b      	cbnz	r3, 8018834 <_raise_r+0x32>
 8018820:	4620      	mov	r0, r4
 8018822:	f000 f831 	bl	8018888 <_getpid_r>
 8018826:	462a      	mov	r2, r5
 8018828:	4601      	mov	r1, r0
 801882a:	4620      	mov	r0, r4
 801882c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018830:	f000 b818 	b.w	8018864 <_kill_r>
 8018834:	2b01      	cmp	r3, #1
 8018836:	d00a      	beq.n	801884e <_raise_r+0x4c>
 8018838:	1c59      	adds	r1, r3, #1
 801883a:	d103      	bne.n	8018844 <_raise_r+0x42>
 801883c:	2316      	movs	r3, #22
 801883e:	6003      	str	r3, [r0, #0]
 8018840:	2001      	movs	r0, #1
 8018842:	e7e7      	b.n	8018814 <_raise_r+0x12>
 8018844:	2400      	movs	r4, #0
 8018846:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801884a:	4628      	mov	r0, r5
 801884c:	4798      	blx	r3
 801884e:	2000      	movs	r0, #0
 8018850:	e7e0      	b.n	8018814 <_raise_r+0x12>
	...

08018854 <raise>:
 8018854:	4b02      	ldr	r3, [pc, #8]	; (8018860 <raise+0xc>)
 8018856:	4601      	mov	r1, r0
 8018858:	6818      	ldr	r0, [r3, #0]
 801885a:	f7ff bfd2 	b.w	8018802 <_raise_r>
 801885e:	bf00      	nop
 8018860:	20000230 	.word	0x20000230

08018864 <_kill_r>:
 8018864:	b538      	push	{r3, r4, r5, lr}
 8018866:	4d07      	ldr	r5, [pc, #28]	; (8018884 <_kill_r+0x20>)
 8018868:	2300      	movs	r3, #0
 801886a:	4604      	mov	r4, r0
 801886c:	4608      	mov	r0, r1
 801886e:	4611      	mov	r1, r2
 8018870:	602b      	str	r3, [r5, #0]
 8018872:	f7e9 fd45 	bl	8002300 <_kill>
 8018876:	1c43      	adds	r3, r0, #1
 8018878:	d102      	bne.n	8018880 <_kill_r+0x1c>
 801887a:	682b      	ldr	r3, [r5, #0]
 801887c:	b103      	cbz	r3, 8018880 <_kill_r+0x1c>
 801887e:	6023      	str	r3, [r4, #0]
 8018880:	bd38      	pop	{r3, r4, r5, pc}
 8018882:	bf00      	nop
 8018884:	20007abc 	.word	0x20007abc

08018888 <_getpid_r>:
 8018888:	f7e9 bd32 	b.w	80022f0 <_getpid>

0801888c <asin>:
 801888c:	b538      	push	{r3, r4, r5, lr}
 801888e:	ed2d 8b02 	vpush	{d8}
 8018892:	ec55 4b10 	vmov	r4, r5, d0
 8018896:	f000 f85b 	bl	8018950 <__ieee754_asin>
 801889a:	4622      	mov	r2, r4
 801889c:	462b      	mov	r3, r5
 801889e:	4620      	mov	r0, r4
 80188a0:	4629      	mov	r1, r5
 80188a2:	eeb0 8a40 	vmov.f32	s16, s0
 80188a6:	eef0 8a60 	vmov.f32	s17, s1
 80188aa:	f7e8 f93f 	bl	8000b2c <__aeabi_dcmpun>
 80188ae:	b9a8      	cbnz	r0, 80188dc <asin+0x50>
 80188b0:	ec45 4b10 	vmov	d0, r4, r5
 80188b4:	f000 fd7c 	bl	80193b0 <fabs>
 80188b8:	4b0c      	ldr	r3, [pc, #48]	; (80188ec <asin+0x60>)
 80188ba:	ec51 0b10 	vmov	r0, r1, d0
 80188be:	2200      	movs	r2, #0
 80188c0:	f7e8 f92a 	bl	8000b18 <__aeabi_dcmpgt>
 80188c4:	b150      	cbz	r0, 80188dc <asin+0x50>
 80188c6:	f7fb faa1 	bl	8013e0c <__errno>
 80188ca:	ecbd 8b02 	vpop	{d8}
 80188ce:	2321      	movs	r3, #33	; 0x21
 80188d0:	6003      	str	r3, [r0, #0]
 80188d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188d6:	4806      	ldr	r0, [pc, #24]	; (80188f0 <asin+0x64>)
 80188d8:	f7ff be1a 	b.w	8018510 <nan>
 80188dc:	eeb0 0a48 	vmov.f32	s0, s16
 80188e0:	eef0 0a68 	vmov.f32	s1, s17
 80188e4:	ecbd 8b02 	vpop	{d8}
 80188e8:	bd38      	pop	{r3, r4, r5, pc}
 80188ea:	bf00      	nop
 80188ec:	3ff00000 	.word	0x3ff00000
 80188f0:	0801e328 	.word	0x0801e328

080188f4 <atan2>:
 80188f4:	f000 ba40 	b.w	8018d78 <__ieee754_atan2>

080188f8 <sqrt>:
 80188f8:	b538      	push	{r3, r4, r5, lr}
 80188fa:	ed2d 8b02 	vpush	{d8}
 80188fe:	ec55 4b10 	vmov	r4, r5, d0
 8018902:	f000 fb03 	bl	8018f0c <__ieee754_sqrt>
 8018906:	4622      	mov	r2, r4
 8018908:	462b      	mov	r3, r5
 801890a:	4620      	mov	r0, r4
 801890c:	4629      	mov	r1, r5
 801890e:	eeb0 8a40 	vmov.f32	s16, s0
 8018912:	eef0 8a60 	vmov.f32	s17, s1
 8018916:	f7e8 f909 	bl	8000b2c <__aeabi_dcmpun>
 801891a:	b990      	cbnz	r0, 8018942 <sqrt+0x4a>
 801891c:	2200      	movs	r2, #0
 801891e:	2300      	movs	r3, #0
 8018920:	4620      	mov	r0, r4
 8018922:	4629      	mov	r1, r5
 8018924:	f7e8 f8da 	bl	8000adc <__aeabi_dcmplt>
 8018928:	b158      	cbz	r0, 8018942 <sqrt+0x4a>
 801892a:	f7fb fa6f 	bl	8013e0c <__errno>
 801892e:	2321      	movs	r3, #33	; 0x21
 8018930:	6003      	str	r3, [r0, #0]
 8018932:	2200      	movs	r2, #0
 8018934:	2300      	movs	r3, #0
 8018936:	4610      	mov	r0, r2
 8018938:	4619      	mov	r1, r3
 801893a:	f7e7 ff87 	bl	800084c <__aeabi_ddiv>
 801893e:	ec41 0b18 	vmov	d8, r0, r1
 8018942:	eeb0 0a48 	vmov.f32	s0, s16
 8018946:	eef0 0a68 	vmov.f32	s1, s17
 801894a:	ecbd 8b02 	vpop	{d8}
 801894e:	bd38      	pop	{r3, r4, r5, pc}

08018950 <__ieee754_asin>:
 8018950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018954:	ed2d 8b04 	vpush	{d8-d9}
 8018958:	ec55 4b10 	vmov	r4, r5, d0
 801895c:	4bcc      	ldr	r3, [pc, #816]	; (8018c90 <__ieee754_asin+0x340>)
 801895e:	b083      	sub	sp, #12
 8018960:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8018964:	4598      	cmp	r8, r3
 8018966:	9501      	str	r5, [sp, #4]
 8018968:	dd35      	ble.n	80189d6 <__ieee754_asin+0x86>
 801896a:	ee10 3a10 	vmov	r3, s0
 801896e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8018972:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8018976:	ea58 0303 	orrs.w	r3, r8, r3
 801897a:	d117      	bne.n	80189ac <__ieee754_asin+0x5c>
 801897c:	a3aa      	add	r3, pc, #680	; (adr r3, 8018c28 <__ieee754_asin+0x2d8>)
 801897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018982:	ee10 0a10 	vmov	r0, s0
 8018986:	4629      	mov	r1, r5
 8018988:	f7e7 fe36 	bl	80005f8 <__aeabi_dmul>
 801898c:	a3a8      	add	r3, pc, #672	; (adr r3, 8018c30 <__ieee754_asin+0x2e0>)
 801898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018992:	4606      	mov	r6, r0
 8018994:	460f      	mov	r7, r1
 8018996:	4620      	mov	r0, r4
 8018998:	4629      	mov	r1, r5
 801899a:	f7e7 fe2d 	bl	80005f8 <__aeabi_dmul>
 801899e:	4602      	mov	r2, r0
 80189a0:	460b      	mov	r3, r1
 80189a2:	4630      	mov	r0, r6
 80189a4:	4639      	mov	r1, r7
 80189a6:	f7e7 fc71 	bl	800028c <__adddf3>
 80189aa:	e00b      	b.n	80189c4 <__ieee754_asin+0x74>
 80189ac:	ee10 2a10 	vmov	r2, s0
 80189b0:	462b      	mov	r3, r5
 80189b2:	ee10 0a10 	vmov	r0, s0
 80189b6:	4629      	mov	r1, r5
 80189b8:	f7e7 fc66 	bl	8000288 <__aeabi_dsub>
 80189bc:	4602      	mov	r2, r0
 80189be:	460b      	mov	r3, r1
 80189c0:	f7e7 ff44 	bl	800084c <__aeabi_ddiv>
 80189c4:	4604      	mov	r4, r0
 80189c6:	460d      	mov	r5, r1
 80189c8:	ec45 4b10 	vmov	d0, r4, r5
 80189cc:	b003      	add	sp, #12
 80189ce:	ecbd 8b04 	vpop	{d8-d9}
 80189d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d6:	4baf      	ldr	r3, [pc, #700]	; (8018c94 <__ieee754_asin+0x344>)
 80189d8:	4598      	cmp	r8, r3
 80189da:	dc11      	bgt.n	8018a00 <__ieee754_asin+0xb0>
 80189dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80189e0:	f280 80ae 	bge.w	8018b40 <__ieee754_asin+0x1f0>
 80189e4:	a394      	add	r3, pc, #592	; (adr r3, 8018c38 <__ieee754_asin+0x2e8>)
 80189e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ea:	ee10 0a10 	vmov	r0, s0
 80189ee:	4629      	mov	r1, r5
 80189f0:	f7e7 fc4c 	bl	800028c <__adddf3>
 80189f4:	4ba8      	ldr	r3, [pc, #672]	; (8018c98 <__ieee754_asin+0x348>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	f7e8 f88e 	bl	8000b18 <__aeabi_dcmpgt>
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d1e3      	bne.n	80189c8 <__ieee754_asin+0x78>
 8018a00:	ec45 4b10 	vmov	d0, r4, r5
 8018a04:	f000 fcd4 	bl	80193b0 <fabs>
 8018a08:	49a3      	ldr	r1, [pc, #652]	; (8018c98 <__ieee754_asin+0x348>)
 8018a0a:	ec53 2b10 	vmov	r2, r3, d0
 8018a0e:	2000      	movs	r0, #0
 8018a10:	f7e7 fc3a 	bl	8000288 <__aeabi_dsub>
 8018a14:	4ba1      	ldr	r3, [pc, #644]	; (8018c9c <__ieee754_asin+0x34c>)
 8018a16:	2200      	movs	r2, #0
 8018a18:	f7e7 fdee 	bl	80005f8 <__aeabi_dmul>
 8018a1c:	a388      	add	r3, pc, #544	; (adr r3, 8018c40 <__ieee754_asin+0x2f0>)
 8018a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a22:	4604      	mov	r4, r0
 8018a24:	460d      	mov	r5, r1
 8018a26:	f7e7 fde7 	bl	80005f8 <__aeabi_dmul>
 8018a2a:	a387      	add	r3, pc, #540	; (adr r3, 8018c48 <__ieee754_asin+0x2f8>)
 8018a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a30:	f7e7 fc2c 	bl	800028c <__adddf3>
 8018a34:	4622      	mov	r2, r4
 8018a36:	462b      	mov	r3, r5
 8018a38:	f7e7 fdde 	bl	80005f8 <__aeabi_dmul>
 8018a3c:	a384      	add	r3, pc, #528	; (adr r3, 8018c50 <__ieee754_asin+0x300>)
 8018a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a42:	f7e7 fc21 	bl	8000288 <__aeabi_dsub>
 8018a46:	4622      	mov	r2, r4
 8018a48:	462b      	mov	r3, r5
 8018a4a:	f7e7 fdd5 	bl	80005f8 <__aeabi_dmul>
 8018a4e:	a382      	add	r3, pc, #520	; (adr r3, 8018c58 <__ieee754_asin+0x308>)
 8018a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a54:	f7e7 fc1a 	bl	800028c <__adddf3>
 8018a58:	4622      	mov	r2, r4
 8018a5a:	462b      	mov	r3, r5
 8018a5c:	f7e7 fdcc 	bl	80005f8 <__aeabi_dmul>
 8018a60:	a37f      	add	r3, pc, #508	; (adr r3, 8018c60 <__ieee754_asin+0x310>)
 8018a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a66:	f7e7 fc0f 	bl	8000288 <__aeabi_dsub>
 8018a6a:	4622      	mov	r2, r4
 8018a6c:	462b      	mov	r3, r5
 8018a6e:	f7e7 fdc3 	bl	80005f8 <__aeabi_dmul>
 8018a72:	a37d      	add	r3, pc, #500	; (adr r3, 8018c68 <__ieee754_asin+0x318>)
 8018a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a78:	f7e7 fc08 	bl	800028c <__adddf3>
 8018a7c:	4622      	mov	r2, r4
 8018a7e:	462b      	mov	r3, r5
 8018a80:	f7e7 fdba 	bl	80005f8 <__aeabi_dmul>
 8018a84:	a37a      	add	r3, pc, #488	; (adr r3, 8018c70 <__ieee754_asin+0x320>)
 8018a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a8a:	ec41 0b18 	vmov	d8, r0, r1
 8018a8e:	4620      	mov	r0, r4
 8018a90:	4629      	mov	r1, r5
 8018a92:	f7e7 fdb1 	bl	80005f8 <__aeabi_dmul>
 8018a96:	a378      	add	r3, pc, #480	; (adr r3, 8018c78 <__ieee754_asin+0x328>)
 8018a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a9c:	f7e7 fbf4 	bl	8000288 <__aeabi_dsub>
 8018aa0:	4622      	mov	r2, r4
 8018aa2:	462b      	mov	r3, r5
 8018aa4:	f7e7 fda8 	bl	80005f8 <__aeabi_dmul>
 8018aa8:	a375      	add	r3, pc, #468	; (adr r3, 8018c80 <__ieee754_asin+0x330>)
 8018aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aae:	f7e7 fbed 	bl	800028c <__adddf3>
 8018ab2:	4622      	mov	r2, r4
 8018ab4:	462b      	mov	r3, r5
 8018ab6:	f7e7 fd9f 	bl	80005f8 <__aeabi_dmul>
 8018aba:	a373      	add	r3, pc, #460	; (adr r3, 8018c88 <__ieee754_asin+0x338>)
 8018abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ac0:	f7e7 fbe2 	bl	8000288 <__aeabi_dsub>
 8018ac4:	4622      	mov	r2, r4
 8018ac6:	462b      	mov	r3, r5
 8018ac8:	f7e7 fd96 	bl	80005f8 <__aeabi_dmul>
 8018acc:	4b72      	ldr	r3, [pc, #456]	; (8018c98 <__ieee754_asin+0x348>)
 8018ace:	2200      	movs	r2, #0
 8018ad0:	f7e7 fbdc 	bl	800028c <__adddf3>
 8018ad4:	ec45 4b10 	vmov	d0, r4, r5
 8018ad8:	4606      	mov	r6, r0
 8018ada:	460f      	mov	r7, r1
 8018adc:	f000 fa16 	bl	8018f0c <__ieee754_sqrt>
 8018ae0:	4b6f      	ldr	r3, [pc, #444]	; (8018ca0 <__ieee754_asin+0x350>)
 8018ae2:	4598      	cmp	r8, r3
 8018ae4:	ec5b ab10 	vmov	sl, fp, d0
 8018ae8:	f340 80dc 	ble.w	8018ca4 <__ieee754_asin+0x354>
 8018aec:	4632      	mov	r2, r6
 8018aee:	463b      	mov	r3, r7
 8018af0:	ec51 0b18 	vmov	r0, r1, d8
 8018af4:	f7e7 feaa 	bl	800084c <__aeabi_ddiv>
 8018af8:	4652      	mov	r2, sl
 8018afa:	465b      	mov	r3, fp
 8018afc:	f7e7 fd7c 	bl	80005f8 <__aeabi_dmul>
 8018b00:	4652      	mov	r2, sl
 8018b02:	465b      	mov	r3, fp
 8018b04:	f7e7 fbc2 	bl	800028c <__adddf3>
 8018b08:	4602      	mov	r2, r0
 8018b0a:	460b      	mov	r3, r1
 8018b0c:	f7e7 fbbe 	bl	800028c <__adddf3>
 8018b10:	a347      	add	r3, pc, #284	; (adr r3, 8018c30 <__ieee754_asin+0x2e0>)
 8018b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b16:	f7e7 fbb7 	bl	8000288 <__aeabi_dsub>
 8018b1a:	4602      	mov	r2, r0
 8018b1c:	460b      	mov	r3, r1
 8018b1e:	a142      	add	r1, pc, #264	; (adr r1, 8018c28 <__ieee754_asin+0x2d8>)
 8018b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b24:	f7e7 fbb0 	bl	8000288 <__aeabi_dsub>
 8018b28:	9b01      	ldr	r3, [sp, #4]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	bfdc      	itt	le
 8018b2e:	4602      	movle	r2, r0
 8018b30:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8018b34:	4604      	mov	r4, r0
 8018b36:	460d      	mov	r5, r1
 8018b38:	bfdc      	itt	le
 8018b3a:	4614      	movle	r4, r2
 8018b3c:	461d      	movle	r5, r3
 8018b3e:	e743      	b.n	80189c8 <__ieee754_asin+0x78>
 8018b40:	ee10 2a10 	vmov	r2, s0
 8018b44:	ee10 0a10 	vmov	r0, s0
 8018b48:	462b      	mov	r3, r5
 8018b4a:	4629      	mov	r1, r5
 8018b4c:	f7e7 fd54 	bl	80005f8 <__aeabi_dmul>
 8018b50:	a33b      	add	r3, pc, #236	; (adr r3, 8018c40 <__ieee754_asin+0x2f0>)
 8018b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b56:	4606      	mov	r6, r0
 8018b58:	460f      	mov	r7, r1
 8018b5a:	f7e7 fd4d 	bl	80005f8 <__aeabi_dmul>
 8018b5e:	a33a      	add	r3, pc, #232	; (adr r3, 8018c48 <__ieee754_asin+0x2f8>)
 8018b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b64:	f7e7 fb92 	bl	800028c <__adddf3>
 8018b68:	4632      	mov	r2, r6
 8018b6a:	463b      	mov	r3, r7
 8018b6c:	f7e7 fd44 	bl	80005f8 <__aeabi_dmul>
 8018b70:	a337      	add	r3, pc, #220	; (adr r3, 8018c50 <__ieee754_asin+0x300>)
 8018b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b76:	f7e7 fb87 	bl	8000288 <__aeabi_dsub>
 8018b7a:	4632      	mov	r2, r6
 8018b7c:	463b      	mov	r3, r7
 8018b7e:	f7e7 fd3b 	bl	80005f8 <__aeabi_dmul>
 8018b82:	a335      	add	r3, pc, #212	; (adr r3, 8018c58 <__ieee754_asin+0x308>)
 8018b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b88:	f7e7 fb80 	bl	800028c <__adddf3>
 8018b8c:	4632      	mov	r2, r6
 8018b8e:	463b      	mov	r3, r7
 8018b90:	f7e7 fd32 	bl	80005f8 <__aeabi_dmul>
 8018b94:	a332      	add	r3, pc, #200	; (adr r3, 8018c60 <__ieee754_asin+0x310>)
 8018b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b9a:	f7e7 fb75 	bl	8000288 <__aeabi_dsub>
 8018b9e:	4632      	mov	r2, r6
 8018ba0:	463b      	mov	r3, r7
 8018ba2:	f7e7 fd29 	bl	80005f8 <__aeabi_dmul>
 8018ba6:	a330      	add	r3, pc, #192	; (adr r3, 8018c68 <__ieee754_asin+0x318>)
 8018ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bac:	f7e7 fb6e 	bl	800028c <__adddf3>
 8018bb0:	4632      	mov	r2, r6
 8018bb2:	463b      	mov	r3, r7
 8018bb4:	f7e7 fd20 	bl	80005f8 <__aeabi_dmul>
 8018bb8:	a32d      	add	r3, pc, #180	; (adr r3, 8018c70 <__ieee754_asin+0x320>)
 8018bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bbe:	4680      	mov	r8, r0
 8018bc0:	4689      	mov	r9, r1
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	4639      	mov	r1, r7
 8018bc6:	f7e7 fd17 	bl	80005f8 <__aeabi_dmul>
 8018bca:	a32b      	add	r3, pc, #172	; (adr r3, 8018c78 <__ieee754_asin+0x328>)
 8018bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd0:	f7e7 fb5a 	bl	8000288 <__aeabi_dsub>
 8018bd4:	4632      	mov	r2, r6
 8018bd6:	463b      	mov	r3, r7
 8018bd8:	f7e7 fd0e 	bl	80005f8 <__aeabi_dmul>
 8018bdc:	a328      	add	r3, pc, #160	; (adr r3, 8018c80 <__ieee754_asin+0x330>)
 8018bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be2:	f7e7 fb53 	bl	800028c <__adddf3>
 8018be6:	4632      	mov	r2, r6
 8018be8:	463b      	mov	r3, r7
 8018bea:	f7e7 fd05 	bl	80005f8 <__aeabi_dmul>
 8018bee:	a326      	add	r3, pc, #152	; (adr r3, 8018c88 <__ieee754_asin+0x338>)
 8018bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf4:	f7e7 fb48 	bl	8000288 <__aeabi_dsub>
 8018bf8:	4632      	mov	r2, r6
 8018bfa:	463b      	mov	r3, r7
 8018bfc:	f7e7 fcfc 	bl	80005f8 <__aeabi_dmul>
 8018c00:	4b25      	ldr	r3, [pc, #148]	; (8018c98 <__ieee754_asin+0x348>)
 8018c02:	2200      	movs	r2, #0
 8018c04:	f7e7 fb42 	bl	800028c <__adddf3>
 8018c08:	4602      	mov	r2, r0
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	4640      	mov	r0, r8
 8018c0e:	4649      	mov	r1, r9
 8018c10:	f7e7 fe1c 	bl	800084c <__aeabi_ddiv>
 8018c14:	4622      	mov	r2, r4
 8018c16:	462b      	mov	r3, r5
 8018c18:	f7e7 fcee 	bl	80005f8 <__aeabi_dmul>
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	460b      	mov	r3, r1
 8018c20:	4620      	mov	r0, r4
 8018c22:	4629      	mov	r1, r5
 8018c24:	e6bf      	b.n	80189a6 <__ieee754_asin+0x56>
 8018c26:	bf00      	nop
 8018c28:	54442d18 	.word	0x54442d18
 8018c2c:	3ff921fb 	.word	0x3ff921fb
 8018c30:	33145c07 	.word	0x33145c07
 8018c34:	3c91a626 	.word	0x3c91a626
 8018c38:	8800759c 	.word	0x8800759c
 8018c3c:	7e37e43c 	.word	0x7e37e43c
 8018c40:	0dfdf709 	.word	0x0dfdf709
 8018c44:	3f023de1 	.word	0x3f023de1
 8018c48:	7501b288 	.word	0x7501b288
 8018c4c:	3f49efe0 	.word	0x3f49efe0
 8018c50:	b5688f3b 	.word	0xb5688f3b
 8018c54:	3fa48228 	.word	0x3fa48228
 8018c58:	0e884455 	.word	0x0e884455
 8018c5c:	3fc9c155 	.word	0x3fc9c155
 8018c60:	03eb6f7d 	.word	0x03eb6f7d
 8018c64:	3fd4d612 	.word	0x3fd4d612
 8018c68:	55555555 	.word	0x55555555
 8018c6c:	3fc55555 	.word	0x3fc55555
 8018c70:	b12e9282 	.word	0xb12e9282
 8018c74:	3fb3b8c5 	.word	0x3fb3b8c5
 8018c78:	1b8d0159 	.word	0x1b8d0159
 8018c7c:	3fe6066c 	.word	0x3fe6066c
 8018c80:	9c598ac8 	.word	0x9c598ac8
 8018c84:	40002ae5 	.word	0x40002ae5
 8018c88:	1c8a2d4b 	.word	0x1c8a2d4b
 8018c8c:	40033a27 	.word	0x40033a27
 8018c90:	3fefffff 	.word	0x3fefffff
 8018c94:	3fdfffff 	.word	0x3fdfffff
 8018c98:	3ff00000 	.word	0x3ff00000
 8018c9c:	3fe00000 	.word	0x3fe00000
 8018ca0:	3fef3332 	.word	0x3fef3332
 8018ca4:	ee10 2a10 	vmov	r2, s0
 8018ca8:	ee10 0a10 	vmov	r0, s0
 8018cac:	465b      	mov	r3, fp
 8018cae:	4659      	mov	r1, fp
 8018cb0:	f7e7 faec 	bl	800028c <__adddf3>
 8018cb4:	4632      	mov	r2, r6
 8018cb6:	463b      	mov	r3, r7
 8018cb8:	ec41 0b19 	vmov	d9, r0, r1
 8018cbc:	ec51 0b18 	vmov	r0, r1, d8
 8018cc0:	f7e7 fdc4 	bl	800084c <__aeabi_ddiv>
 8018cc4:	4602      	mov	r2, r0
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	ec51 0b19 	vmov	r0, r1, d9
 8018ccc:	f7e7 fc94 	bl	80005f8 <__aeabi_dmul>
 8018cd0:	f04f 0800 	mov.w	r8, #0
 8018cd4:	4606      	mov	r6, r0
 8018cd6:	460f      	mov	r7, r1
 8018cd8:	4642      	mov	r2, r8
 8018cda:	465b      	mov	r3, fp
 8018cdc:	4640      	mov	r0, r8
 8018cde:	4659      	mov	r1, fp
 8018ce0:	f7e7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8018ce4:	4602      	mov	r2, r0
 8018ce6:	460b      	mov	r3, r1
 8018ce8:	4620      	mov	r0, r4
 8018cea:	4629      	mov	r1, r5
 8018cec:	f7e7 facc 	bl	8000288 <__aeabi_dsub>
 8018cf0:	4642      	mov	r2, r8
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	460d      	mov	r5, r1
 8018cf6:	465b      	mov	r3, fp
 8018cf8:	4650      	mov	r0, sl
 8018cfa:	4659      	mov	r1, fp
 8018cfc:	f7e7 fac6 	bl	800028c <__adddf3>
 8018d00:	4602      	mov	r2, r0
 8018d02:	460b      	mov	r3, r1
 8018d04:	4620      	mov	r0, r4
 8018d06:	4629      	mov	r1, r5
 8018d08:	f7e7 fda0 	bl	800084c <__aeabi_ddiv>
 8018d0c:	4602      	mov	r2, r0
 8018d0e:	460b      	mov	r3, r1
 8018d10:	f7e7 fabc 	bl	800028c <__adddf3>
 8018d14:	4602      	mov	r2, r0
 8018d16:	460b      	mov	r3, r1
 8018d18:	a113      	add	r1, pc, #76	; (adr r1, 8018d68 <__ieee754_asin+0x418>)
 8018d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d1e:	f7e7 fab3 	bl	8000288 <__aeabi_dsub>
 8018d22:	4602      	mov	r2, r0
 8018d24:	460b      	mov	r3, r1
 8018d26:	4630      	mov	r0, r6
 8018d28:	4639      	mov	r1, r7
 8018d2a:	f7e7 faad 	bl	8000288 <__aeabi_dsub>
 8018d2e:	4642      	mov	r2, r8
 8018d30:	4604      	mov	r4, r0
 8018d32:	460d      	mov	r5, r1
 8018d34:	465b      	mov	r3, fp
 8018d36:	4640      	mov	r0, r8
 8018d38:	4659      	mov	r1, fp
 8018d3a:	f7e7 faa7 	bl	800028c <__adddf3>
 8018d3e:	4602      	mov	r2, r0
 8018d40:	460b      	mov	r3, r1
 8018d42:	a10b      	add	r1, pc, #44	; (adr r1, 8018d70 <__ieee754_asin+0x420>)
 8018d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d48:	f7e7 fa9e 	bl	8000288 <__aeabi_dsub>
 8018d4c:	4602      	mov	r2, r0
 8018d4e:	460b      	mov	r3, r1
 8018d50:	4620      	mov	r0, r4
 8018d52:	4629      	mov	r1, r5
 8018d54:	f7e7 fa98 	bl	8000288 <__aeabi_dsub>
 8018d58:	4602      	mov	r2, r0
 8018d5a:	460b      	mov	r3, r1
 8018d5c:	a104      	add	r1, pc, #16	; (adr r1, 8018d70 <__ieee754_asin+0x420>)
 8018d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d62:	e6df      	b.n	8018b24 <__ieee754_asin+0x1d4>
 8018d64:	f3af 8000 	nop.w
 8018d68:	33145c07 	.word	0x33145c07
 8018d6c:	3c91a626 	.word	0x3c91a626
 8018d70:	54442d18 	.word	0x54442d18
 8018d74:	3fe921fb 	.word	0x3fe921fb

08018d78 <__ieee754_atan2>:
 8018d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d7c:	ec57 6b11 	vmov	r6, r7, d1
 8018d80:	4273      	negs	r3, r6
 8018d82:	f8df e184 	ldr.w	lr, [pc, #388]	; 8018f08 <__ieee754_atan2+0x190>
 8018d86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018d8a:	4333      	orrs	r3, r6
 8018d8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018d90:	4573      	cmp	r3, lr
 8018d92:	ec51 0b10 	vmov	r0, r1, d0
 8018d96:	ee11 8a10 	vmov	r8, s2
 8018d9a:	d80a      	bhi.n	8018db2 <__ieee754_atan2+0x3a>
 8018d9c:	4244      	negs	r4, r0
 8018d9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018da2:	4304      	orrs	r4, r0
 8018da4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018da8:	4574      	cmp	r4, lr
 8018daa:	ee10 9a10 	vmov	r9, s0
 8018dae:	468c      	mov	ip, r1
 8018db0:	d907      	bls.n	8018dc2 <__ieee754_atan2+0x4a>
 8018db2:	4632      	mov	r2, r6
 8018db4:	463b      	mov	r3, r7
 8018db6:	f7e7 fa69 	bl	800028c <__adddf3>
 8018dba:	ec41 0b10 	vmov	d0, r0, r1
 8018dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018dc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8018dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018dca:	4334      	orrs	r4, r6
 8018dcc:	d103      	bne.n	8018dd6 <__ieee754_atan2+0x5e>
 8018dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dd2:	f000 b94d 	b.w	8019070 <atan>
 8018dd6:	17bc      	asrs	r4, r7, #30
 8018dd8:	f004 0402 	and.w	r4, r4, #2
 8018ddc:	ea53 0909 	orrs.w	r9, r3, r9
 8018de0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018de4:	d107      	bne.n	8018df6 <__ieee754_atan2+0x7e>
 8018de6:	2c02      	cmp	r4, #2
 8018de8:	d060      	beq.n	8018eac <__ieee754_atan2+0x134>
 8018dea:	2c03      	cmp	r4, #3
 8018dec:	d1e5      	bne.n	8018dba <__ieee754_atan2+0x42>
 8018dee:	a142      	add	r1, pc, #264	; (adr r1, 8018ef8 <__ieee754_atan2+0x180>)
 8018df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018df4:	e7e1      	b.n	8018dba <__ieee754_atan2+0x42>
 8018df6:	ea52 0808 	orrs.w	r8, r2, r8
 8018dfa:	d106      	bne.n	8018e0a <__ieee754_atan2+0x92>
 8018dfc:	f1bc 0f00 	cmp.w	ip, #0
 8018e00:	da5f      	bge.n	8018ec2 <__ieee754_atan2+0x14a>
 8018e02:	a13f      	add	r1, pc, #252	; (adr r1, 8018f00 <__ieee754_atan2+0x188>)
 8018e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e08:	e7d7      	b.n	8018dba <__ieee754_atan2+0x42>
 8018e0a:	4572      	cmp	r2, lr
 8018e0c:	d10f      	bne.n	8018e2e <__ieee754_atan2+0xb6>
 8018e0e:	4293      	cmp	r3, r2
 8018e10:	f104 34ff 	add.w	r4, r4, #4294967295
 8018e14:	d107      	bne.n	8018e26 <__ieee754_atan2+0xae>
 8018e16:	2c02      	cmp	r4, #2
 8018e18:	d84c      	bhi.n	8018eb4 <__ieee754_atan2+0x13c>
 8018e1a:	4b35      	ldr	r3, [pc, #212]	; (8018ef0 <__ieee754_atan2+0x178>)
 8018e1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018e20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8018e24:	e7c9      	b.n	8018dba <__ieee754_atan2+0x42>
 8018e26:	2c02      	cmp	r4, #2
 8018e28:	d848      	bhi.n	8018ebc <__ieee754_atan2+0x144>
 8018e2a:	4b32      	ldr	r3, [pc, #200]	; (8018ef4 <__ieee754_atan2+0x17c>)
 8018e2c:	e7f6      	b.n	8018e1c <__ieee754_atan2+0xa4>
 8018e2e:	4573      	cmp	r3, lr
 8018e30:	d0e4      	beq.n	8018dfc <__ieee754_atan2+0x84>
 8018e32:	1a9b      	subs	r3, r3, r2
 8018e34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018e38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018e3c:	da1e      	bge.n	8018e7c <__ieee754_atan2+0x104>
 8018e3e:	2f00      	cmp	r7, #0
 8018e40:	da01      	bge.n	8018e46 <__ieee754_atan2+0xce>
 8018e42:	323c      	adds	r2, #60	; 0x3c
 8018e44:	db1e      	blt.n	8018e84 <__ieee754_atan2+0x10c>
 8018e46:	4632      	mov	r2, r6
 8018e48:	463b      	mov	r3, r7
 8018e4a:	f7e7 fcff 	bl	800084c <__aeabi_ddiv>
 8018e4e:	ec41 0b10 	vmov	d0, r0, r1
 8018e52:	f000 faad 	bl	80193b0 <fabs>
 8018e56:	f000 f90b 	bl	8019070 <atan>
 8018e5a:	ec51 0b10 	vmov	r0, r1, d0
 8018e5e:	2c01      	cmp	r4, #1
 8018e60:	d013      	beq.n	8018e8a <__ieee754_atan2+0x112>
 8018e62:	2c02      	cmp	r4, #2
 8018e64:	d015      	beq.n	8018e92 <__ieee754_atan2+0x11a>
 8018e66:	2c00      	cmp	r4, #0
 8018e68:	d0a7      	beq.n	8018dba <__ieee754_atan2+0x42>
 8018e6a:	a319      	add	r3, pc, #100	; (adr r3, 8018ed0 <__ieee754_atan2+0x158>)
 8018e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e70:	f7e7 fa0a 	bl	8000288 <__aeabi_dsub>
 8018e74:	a318      	add	r3, pc, #96	; (adr r3, 8018ed8 <__ieee754_atan2+0x160>)
 8018e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e7a:	e014      	b.n	8018ea6 <__ieee754_atan2+0x12e>
 8018e7c:	a118      	add	r1, pc, #96	; (adr r1, 8018ee0 <__ieee754_atan2+0x168>)
 8018e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e82:	e7ec      	b.n	8018e5e <__ieee754_atan2+0xe6>
 8018e84:	2000      	movs	r0, #0
 8018e86:	2100      	movs	r1, #0
 8018e88:	e7e9      	b.n	8018e5e <__ieee754_atan2+0xe6>
 8018e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e8e:	4619      	mov	r1, r3
 8018e90:	e793      	b.n	8018dba <__ieee754_atan2+0x42>
 8018e92:	a30f      	add	r3, pc, #60	; (adr r3, 8018ed0 <__ieee754_atan2+0x158>)
 8018e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e98:	f7e7 f9f6 	bl	8000288 <__aeabi_dsub>
 8018e9c:	4602      	mov	r2, r0
 8018e9e:	460b      	mov	r3, r1
 8018ea0:	a10d      	add	r1, pc, #52	; (adr r1, 8018ed8 <__ieee754_atan2+0x160>)
 8018ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ea6:	f7e7 f9ef 	bl	8000288 <__aeabi_dsub>
 8018eaa:	e786      	b.n	8018dba <__ieee754_atan2+0x42>
 8018eac:	a10a      	add	r1, pc, #40	; (adr r1, 8018ed8 <__ieee754_atan2+0x160>)
 8018eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018eb2:	e782      	b.n	8018dba <__ieee754_atan2+0x42>
 8018eb4:	a10c      	add	r1, pc, #48	; (adr r1, 8018ee8 <__ieee754_atan2+0x170>)
 8018eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018eba:	e77e      	b.n	8018dba <__ieee754_atan2+0x42>
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	2100      	movs	r1, #0
 8018ec0:	e77b      	b.n	8018dba <__ieee754_atan2+0x42>
 8018ec2:	a107      	add	r1, pc, #28	; (adr r1, 8018ee0 <__ieee754_atan2+0x168>)
 8018ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ec8:	e777      	b.n	8018dba <__ieee754_atan2+0x42>
 8018eca:	bf00      	nop
 8018ecc:	f3af 8000 	nop.w
 8018ed0:	33145c07 	.word	0x33145c07
 8018ed4:	3ca1a626 	.word	0x3ca1a626
 8018ed8:	54442d18 	.word	0x54442d18
 8018edc:	400921fb 	.word	0x400921fb
 8018ee0:	54442d18 	.word	0x54442d18
 8018ee4:	3ff921fb 	.word	0x3ff921fb
 8018ee8:	54442d18 	.word	0x54442d18
 8018eec:	3fe921fb 	.word	0x3fe921fb
 8018ef0:	0801e330 	.word	0x0801e330
 8018ef4:	0801e348 	.word	0x0801e348
 8018ef8:	54442d18 	.word	0x54442d18
 8018efc:	c00921fb 	.word	0xc00921fb
 8018f00:	54442d18 	.word	0x54442d18
 8018f04:	bff921fb 	.word	0xbff921fb
 8018f08:	7ff00000 	.word	0x7ff00000

08018f0c <__ieee754_sqrt>:
 8018f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f10:	ec55 4b10 	vmov	r4, r5, d0
 8018f14:	4e55      	ldr	r6, [pc, #340]	; (801906c <__ieee754_sqrt+0x160>)
 8018f16:	43ae      	bics	r6, r5
 8018f18:	ee10 0a10 	vmov	r0, s0
 8018f1c:	ee10 3a10 	vmov	r3, s0
 8018f20:	462a      	mov	r2, r5
 8018f22:	4629      	mov	r1, r5
 8018f24:	d110      	bne.n	8018f48 <__ieee754_sqrt+0x3c>
 8018f26:	ee10 2a10 	vmov	r2, s0
 8018f2a:	462b      	mov	r3, r5
 8018f2c:	f7e7 fb64 	bl	80005f8 <__aeabi_dmul>
 8018f30:	4602      	mov	r2, r0
 8018f32:	460b      	mov	r3, r1
 8018f34:	4620      	mov	r0, r4
 8018f36:	4629      	mov	r1, r5
 8018f38:	f7e7 f9a8 	bl	800028c <__adddf3>
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	460d      	mov	r5, r1
 8018f40:	ec45 4b10 	vmov	d0, r4, r5
 8018f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f48:	2d00      	cmp	r5, #0
 8018f4a:	dc10      	bgt.n	8018f6e <__ieee754_sqrt+0x62>
 8018f4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018f50:	4330      	orrs	r0, r6
 8018f52:	d0f5      	beq.n	8018f40 <__ieee754_sqrt+0x34>
 8018f54:	b15d      	cbz	r5, 8018f6e <__ieee754_sqrt+0x62>
 8018f56:	ee10 2a10 	vmov	r2, s0
 8018f5a:	462b      	mov	r3, r5
 8018f5c:	ee10 0a10 	vmov	r0, s0
 8018f60:	f7e7 f992 	bl	8000288 <__aeabi_dsub>
 8018f64:	4602      	mov	r2, r0
 8018f66:	460b      	mov	r3, r1
 8018f68:	f7e7 fc70 	bl	800084c <__aeabi_ddiv>
 8018f6c:	e7e6      	b.n	8018f3c <__ieee754_sqrt+0x30>
 8018f6e:	1512      	asrs	r2, r2, #20
 8018f70:	d074      	beq.n	801905c <__ieee754_sqrt+0x150>
 8018f72:	07d4      	lsls	r4, r2, #31
 8018f74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018f78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018f80:	bf5e      	ittt	pl
 8018f82:	0fda      	lsrpl	r2, r3, #31
 8018f84:	005b      	lslpl	r3, r3, #1
 8018f86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018f8a:	2400      	movs	r4, #0
 8018f8c:	0fda      	lsrs	r2, r3, #31
 8018f8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018f92:	107f      	asrs	r7, r7, #1
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	2516      	movs	r5, #22
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018f9e:	1886      	adds	r6, r0, r2
 8018fa0:	428e      	cmp	r6, r1
 8018fa2:	bfde      	ittt	le
 8018fa4:	1b89      	suble	r1, r1, r6
 8018fa6:	18b0      	addle	r0, r6, r2
 8018fa8:	18a4      	addle	r4, r4, r2
 8018faa:	0049      	lsls	r1, r1, #1
 8018fac:	3d01      	subs	r5, #1
 8018fae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018fb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018fb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018fba:	d1f0      	bne.n	8018f9e <__ieee754_sqrt+0x92>
 8018fbc:	462a      	mov	r2, r5
 8018fbe:	f04f 0e20 	mov.w	lr, #32
 8018fc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018fc6:	4281      	cmp	r1, r0
 8018fc8:	eb06 0c05 	add.w	ip, r6, r5
 8018fcc:	dc02      	bgt.n	8018fd4 <__ieee754_sqrt+0xc8>
 8018fce:	d113      	bne.n	8018ff8 <__ieee754_sqrt+0xec>
 8018fd0:	459c      	cmp	ip, r3
 8018fd2:	d811      	bhi.n	8018ff8 <__ieee754_sqrt+0xec>
 8018fd4:	f1bc 0f00 	cmp.w	ip, #0
 8018fd8:	eb0c 0506 	add.w	r5, ip, r6
 8018fdc:	da43      	bge.n	8019066 <__ieee754_sqrt+0x15a>
 8018fde:	2d00      	cmp	r5, #0
 8018fe0:	db41      	blt.n	8019066 <__ieee754_sqrt+0x15a>
 8018fe2:	f100 0801 	add.w	r8, r0, #1
 8018fe6:	1a09      	subs	r1, r1, r0
 8018fe8:	459c      	cmp	ip, r3
 8018fea:	bf88      	it	hi
 8018fec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018ff0:	eba3 030c 	sub.w	r3, r3, ip
 8018ff4:	4432      	add	r2, r6
 8018ff6:	4640      	mov	r0, r8
 8018ff8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018ffc:	f1be 0e01 	subs.w	lr, lr, #1
 8019000:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019004:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019008:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801900c:	d1db      	bne.n	8018fc6 <__ieee754_sqrt+0xba>
 801900e:	430b      	orrs	r3, r1
 8019010:	d006      	beq.n	8019020 <__ieee754_sqrt+0x114>
 8019012:	1c50      	adds	r0, r2, #1
 8019014:	bf13      	iteet	ne
 8019016:	3201      	addne	r2, #1
 8019018:	3401      	addeq	r4, #1
 801901a:	4672      	moveq	r2, lr
 801901c:	f022 0201 	bicne.w	r2, r2, #1
 8019020:	1063      	asrs	r3, r4, #1
 8019022:	0852      	lsrs	r2, r2, #1
 8019024:	07e1      	lsls	r1, r4, #31
 8019026:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801902a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801902e:	bf48      	it	mi
 8019030:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019034:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019038:	4614      	mov	r4, r2
 801903a:	e781      	b.n	8018f40 <__ieee754_sqrt+0x34>
 801903c:	0ad9      	lsrs	r1, r3, #11
 801903e:	3815      	subs	r0, #21
 8019040:	055b      	lsls	r3, r3, #21
 8019042:	2900      	cmp	r1, #0
 8019044:	d0fa      	beq.n	801903c <__ieee754_sqrt+0x130>
 8019046:	02cd      	lsls	r5, r1, #11
 8019048:	d50a      	bpl.n	8019060 <__ieee754_sqrt+0x154>
 801904a:	f1c2 0420 	rsb	r4, r2, #32
 801904e:	fa23 f404 	lsr.w	r4, r3, r4
 8019052:	1e55      	subs	r5, r2, #1
 8019054:	4093      	lsls	r3, r2
 8019056:	4321      	orrs	r1, r4
 8019058:	1b42      	subs	r2, r0, r5
 801905a:	e78a      	b.n	8018f72 <__ieee754_sqrt+0x66>
 801905c:	4610      	mov	r0, r2
 801905e:	e7f0      	b.n	8019042 <__ieee754_sqrt+0x136>
 8019060:	0049      	lsls	r1, r1, #1
 8019062:	3201      	adds	r2, #1
 8019064:	e7ef      	b.n	8019046 <__ieee754_sqrt+0x13a>
 8019066:	4680      	mov	r8, r0
 8019068:	e7bd      	b.n	8018fe6 <__ieee754_sqrt+0xda>
 801906a:	bf00      	nop
 801906c:	7ff00000 	.word	0x7ff00000

08019070 <atan>:
 8019070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019074:	ec55 4b10 	vmov	r4, r5, d0
 8019078:	4bc3      	ldr	r3, [pc, #780]	; (8019388 <atan+0x318>)
 801907a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801907e:	429e      	cmp	r6, r3
 8019080:	46ab      	mov	fp, r5
 8019082:	dd18      	ble.n	80190b6 <atan+0x46>
 8019084:	4bc1      	ldr	r3, [pc, #772]	; (801938c <atan+0x31c>)
 8019086:	429e      	cmp	r6, r3
 8019088:	dc01      	bgt.n	801908e <atan+0x1e>
 801908a:	d109      	bne.n	80190a0 <atan+0x30>
 801908c:	b144      	cbz	r4, 80190a0 <atan+0x30>
 801908e:	4622      	mov	r2, r4
 8019090:	462b      	mov	r3, r5
 8019092:	4620      	mov	r0, r4
 8019094:	4629      	mov	r1, r5
 8019096:	f7e7 f8f9 	bl	800028c <__adddf3>
 801909a:	4604      	mov	r4, r0
 801909c:	460d      	mov	r5, r1
 801909e:	e006      	b.n	80190ae <atan+0x3e>
 80190a0:	f1bb 0f00 	cmp.w	fp, #0
 80190a4:	f300 8131 	bgt.w	801930a <atan+0x29a>
 80190a8:	a59b      	add	r5, pc, #620	; (adr r5, 8019318 <atan+0x2a8>)
 80190aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80190ae:	ec45 4b10 	vmov	d0, r4, r5
 80190b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b6:	4bb6      	ldr	r3, [pc, #728]	; (8019390 <atan+0x320>)
 80190b8:	429e      	cmp	r6, r3
 80190ba:	dc14      	bgt.n	80190e6 <atan+0x76>
 80190bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80190c0:	429e      	cmp	r6, r3
 80190c2:	dc0d      	bgt.n	80190e0 <atan+0x70>
 80190c4:	a396      	add	r3, pc, #600	; (adr r3, 8019320 <atan+0x2b0>)
 80190c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ca:	ee10 0a10 	vmov	r0, s0
 80190ce:	4629      	mov	r1, r5
 80190d0:	f7e7 f8dc 	bl	800028c <__adddf3>
 80190d4:	4baf      	ldr	r3, [pc, #700]	; (8019394 <atan+0x324>)
 80190d6:	2200      	movs	r2, #0
 80190d8:	f7e7 fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 80190dc:	2800      	cmp	r0, #0
 80190de:	d1e6      	bne.n	80190ae <atan+0x3e>
 80190e0:	f04f 3aff 	mov.w	sl, #4294967295
 80190e4:	e02b      	b.n	801913e <atan+0xce>
 80190e6:	f000 f963 	bl	80193b0 <fabs>
 80190ea:	4bab      	ldr	r3, [pc, #684]	; (8019398 <atan+0x328>)
 80190ec:	429e      	cmp	r6, r3
 80190ee:	ec55 4b10 	vmov	r4, r5, d0
 80190f2:	f300 80bf 	bgt.w	8019274 <atan+0x204>
 80190f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80190fa:	429e      	cmp	r6, r3
 80190fc:	f300 80a0 	bgt.w	8019240 <atan+0x1d0>
 8019100:	ee10 2a10 	vmov	r2, s0
 8019104:	ee10 0a10 	vmov	r0, s0
 8019108:	462b      	mov	r3, r5
 801910a:	4629      	mov	r1, r5
 801910c:	f7e7 f8be 	bl	800028c <__adddf3>
 8019110:	4ba0      	ldr	r3, [pc, #640]	; (8019394 <atan+0x324>)
 8019112:	2200      	movs	r2, #0
 8019114:	f7e7 f8b8 	bl	8000288 <__aeabi_dsub>
 8019118:	2200      	movs	r2, #0
 801911a:	4606      	mov	r6, r0
 801911c:	460f      	mov	r7, r1
 801911e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019122:	4620      	mov	r0, r4
 8019124:	4629      	mov	r1, r5
 8019126:	f7e7 f8b1 	bl	800028c <__adddf3>
 801912a:	4602      	mov	r2, r0
 801912c:	460b      	mov	r3, r1
 801912e:	4630      	mov	r0, r6
 8019130:	4639      	mov	r1, r7
 8019132:	f7e7 fb8b 	bl	800084c <__aeabi_ddiv>
 8019136:	f04f 0a00 	mov.w	sl, #0
 801913a:	4604      	mov	r4, r0
 801913c:	460d      	mov	r5, r1
 801913e:	4622      	mov	r2, r4
 8019140:	462b      	mov	r3, r5
 8019142:	4620      	mov	r0, r4
 8019144:	4629      	mov	r1, r5
 8019146:	f7e7 fa57 	bl	80005f8 <__aeabi_dmul>
 801914a:	4602      	mov	r2, r0
 801914c:	460b      	mov	r3, r1
 801914e:	4680      	mov	r8, r0
 8019150:	4689      	mov	r9, r1
 8019152:	f7e7 fa51 	bl	80005f8 <__aeabi_dmul>
 8019156:	a374      	add	r3, pc, #464	; (adr r3, 8019328 <atan+0x2b8>)
 8019158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801915c:	4606      	mov	r6, r0
 801915e:	460f      	mov	r7, r1
 8019160:	f7e7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8019164:	a372      	add	r3, pc, #456	; (adr r3, 8019330 <atan+0x2c0>)
 8019166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801916a:	f7e7 f88f 	bl	800028c <__adddf3>
 801916e:	4632      	mov	r2, r6
 8019170:	463b      	mov	r3, r7
 8019172:	f7e7 fa41 	bl	80005f8 <__aeabi_dmul>
 8019176:	a370      	add	r3, pc, #448	; (adr r3, 8019338 <atan+0x2c8>)
 8019178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917c:	f7e7 f886 	bl	800028c <__adddf3>
 8019180:	4632      	mov	r2, r6
 8019182:	463b      	mov	r3, r7
 8019184:	f7e7 fa38 	bl	80005f8 <__aeabi_dmul>
 8019188:	a36d      	add	r3, pc, #436	; (adr r3, 8019340 <atan+0x2d0>)
 801918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801918e:	f7e7 f87d 	bl	800028c <__adddf3>
 8019192:	4632      	mov	r2, r6
 8019194:	463b      	mov	r3, r7
 8019196:	f7e7 fa2f 	bl	80005f8 <__aeabi_dmul>
 801919a:	a36b      	add	r3, pc, #428	; (adr r3, 8019348 <atan+0x2d8>)
 801919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a0:	f7e7 f874 	bl	800028c <__adddf3>
 80191a4:	4632      	mov	r2, r6
 80191a6:	463b      	mov	r3, r7
 80191a8:	f7e7 fa26 	bl	80005f8 <__aeabi_dmul>
 80191ac:	a368      	add	r3, pc, #416	; (adr r3, 8019350 <atan+0x2e0>)
 80191ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b2:	f7e7 f86b 	bl	800028c <__adddf3>
 80191b6:	4642      	mov	r2, r8
 80191b8:	464b      	mov	r3, r9
 80191ba:	f7e7 fa1d 	bl	80005f8 <__aeabi_dmul>
 80191be:	a366      	add	r3, pc, #408	; (adr r3, 8019358 <atan+0x2e8>)
 80191c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c4:	4680      	mov	r8, r0
 80191c6:	4689      	mov	r9, r1
 80191c8:	4630      	mov	r0, r6
 80191ca:	4639      	mov	r1, r7
 80191cc:	f7e7 fa14 	bl	80005f8 <__aeabi_dmul>
 80191d0:	a363      	add	r3, pc, #396	; (adr r3, 8019360 <atan+0x2f0>)
 80191d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191d6:	f7e7 f857 	bl	8000288 <__aeabi_dsub>
 80191da:	4632      	mov	r2, r6
 80191dc:	463b      	mov	r3, r7
 80191de:	f7e7 fa0b 	bl	80005f8 <__aeabi_dmul>
 80191e2:	a361      	add	r3, pc, #388	; (adr r3, 8019368 <atan+0x2f8>)
 80191e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191e8:	f7e7 f84e 	bl	8000288 <__aeabi_dsub>
 80191ec:	4632      	mov	r2, r6
 80191ee:	463b      	mov	r3, r7
 80191f0:	f7e7 fa02 	bl	80005f8 <__aeabi_dmul>
 80191f4:	a35e      	add	r3, pc, #376	; (adr r3, 8019370 <atan+0x300>)
 80191f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191fa:	f7e7 f845 	bl	8000288 <__aeabi_dsub>
 80191fe:	4632      	mov	r2, r6
 8019200:	463b      	mov	r3, r7
 8019202:	f7e7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8019206:	a35c      	add	r3, pc, #368	; (adr r3, 8019378 <atan+0x308>)
 8019208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920c:	f7e7 f83c 	bl	8000288 <__aeabi_dsub>
 8019210:	4632      	mov	r2, r6
 8019212:	463b      	mov	r3, r7
 8019214:	f7e7 f9f0 	bl	80005f8 <__aeabi_dmul>
 8019218:	4602      	mov	r2, r0
 801921a:	460b      	mov	r3, r1
 801921c:	4640      	mov	r0, r8
 801921e:	4649      	mov	r1, r9
 8019220:	f7e7 f834 	bl	800028c <__adddf3>
 8019224:	4622      	mov	r2, r4
 8019226:	462b      	mov	r3, r5
 8019228:	f7e7 f9e6 	bl	80005f8 <__aeabi_dmul>
 801922c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8019230:	4602      	mov	r2, r0
 8019232:	460b      	mov	r3, r1
 8019234:	d14b      	bne.n	80192ce <atan+0x25e>
 8019236:	4620      	mov	r0, r4
 8019238:	4629      	mov	r1, r5
 801923a:	f7e7 f825 	bl	8000288 <__aeabi_dsub>
 801923e:	e72c      	b.n	801909a <atan+0x2a>
 8019240:	ee10 0a10 	vmov	r0, s0
 8019244:	4b53      	ldr	r3, [pc, #332]	; (8019394 <atan+0x324>)
 8019246:	2200      	movs	r2, #0
 8019248:	4629      	mov	r1, r5
 801924a:	f7e7 f81d 	bl	8000288 <__aeabi_dsub>
 801924e:	4b51      	ldr	r3, [pc, #324]	; (8019394 <atan+0x324>)
 8019250:	4606      	mov	r6, r0
 8019252:	460f      	mov	r7, r1
 8019254:	2200      	movs	r2, #0
 8019256:	4620      	mov	r0, r4
 8019258:	4629      	mov	r1, r5
 801925a:	f7e7 f817 	bl	800028c <__adddf3>
 801925e:	4602      	mov	r2, r0
 8019260:	460b      	mov	r3, r1
 8019262:	4630      	mov	r0, r6
 8019264:	4639      	mov	r1, r7
 8019266:	f7e7 faf1 	bl	800084c <__aeabi_ddiv>
 801926a:	f04f 0a01 	mov.w	sl, #1
 801926e:	4604      	mov	r4, r0
 8019270:	460d      	mov	r5, r1
 8019272:	e764      	b.n	801913e <atan+0xce>
 8019274:	4b49      	ldr	r3, [pc, #292]	; (801939c <atan+0x32c>)
 8019276:	429e      	cmp	r6, r3
 8019278:	da1d      	bge.n	80192b6 <atan+0x246>
 801927a:	ee10 0a10 	vmov	r0, s0
 801927e:	4b48      	ldr	r3, [pc, #288]	; (80193a0 <atan+0x330>)
 8019280:	2200      	movs	r2, #0
 8019282:	4629      	mov	r1, r5
 8019284:	f7e7 f800 	bl	8000288 <__aeabi_dsub>
 8019288:	4b45      	ldr	r3, [pc, #276]	; (80193a0 <atan+0x330>)
 801928a:	4606      	mov	r6, r0
 801928c:	460f      	mov	r7, r1
 801928e:	2200      	movs	r2, #0
 8019290:	4620      	mov	r0, r4
 8019292:	4629      	mov	r1, r5
 8019294:	f7e7 f9b0 	bl	80005f8 <__aeabi_dmul>
 8019298:	4b3e      	ldr	r3, [pc, #248]	; (8019394 <atan+0x324>)
 801929a:	2200      	movs	r2, #0
 801929c:	f7e6 fff6 	bl	800028c <__adddf3>
 80192a0:	4602      	mov	r2, r0
 80192a2:	460b      	mov	r3, r1
 80192a4:	4630      	mov	r0, r6
 80192a6:	4639      	mov	r1, r7
 80192a8:	f7e7 fad0 	bl	800084c <__aeabi_ddiv>
 80192ac:	f04f 0a02 	mov.w	sl, #2
 80192b0:	4604      	mov	r4, r0
 80192b2:	460d      	mov	r5, r1
 80192b4:	e743      	b.n	801913e <atan+0xce>
 80192b6:	462b      	mov	r3, r5
 80192b8:	ee10 2a10 	vmov	r2, s0
 80192bc:	4939      	ldr	r1, [pc, #228]	; (80193a4 <atan+0x334>)
 80192be:	2000      	movs	r0, #0
 80192c0:	f7e7 fac4 	bl	800084c <__aeabi_ddiv>
 80192c4:	f04f 0a03 	mov.w	sl, #3
 80192c8:	4604      	mov	r4, r0
 80192ca:	460d      	mov	r5, r1
 80192cc:	e737      	b.n	801913e <atan+0xce>
 80192ce:	4b36      	ldr	r3, [pc, #216]	; (80193a8 <atan+0x338>)
 80192d0:	4e36      	ldr	r6, [pc, #216]	; (80193ac <atan+0x33c>)
 80192d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80192d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80192da:	e9da 2300 	ldrd	r2, r3, [sl]
 80192de:	f7e6 ffd3 	bl	8000288 <__aeabi_dsub>
 80192e2:	4622      	mov	r2, r4
 80192e4:	462b      	mov	r3, r5
 80192e6:	f7e6 ffcf 	bl	8000288 <__aeabi_dsub>
 80192ea:	4602      	mov	r2, r0
 80192ec:	460b      	mov	r3, r1
 80192ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80192f2:	f7e6 ffc9 	bl	8000288 <__aeabi_dsub>
 80192f6:	f1bb 0f00 	cmp.w	fp, #0
 80192fa:	4604      	mov	r4, r0
 80192fc:	460d      	mov	r5, r1
 80192fe:	f6bf aed6 	bge.w	80190ae <atan+0x3e>
 8019302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019306:	461d      	mov	r5, r3
 8019308:	e6d1      	b.n	80190ae <atan+0x3e>
 801930a:	a51d      	add	r5, pc, #116	; (adr r5, 8019380 <atan+0x310>)
 801930c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019310:	e6cd      	b.n	80190ae <atan+0x3e>
 8019312:	bf00      	nop
 8019314:	f3af 8000 	nop.w
 8019318:	54442d18 	.word	0x54442d18
 801931c:	bff921fb 	.word	0xbff921fb
 8019320:	8800759c 	.word	0x8800759c
 8019324:	7e37e43c 	.word	0x7e37e43c
 8019328:	e322da11 	.word	0xe322da11
 801932c:	3f90ad3a 	.word	0x3f90ad3a
 8019330:	24760deb 	.word	0x24760deb
 8019334:	3fa97b4b 	.word	0x3fa97b4b
 8019338:	a0d03d51 	.word	0xa0d03d51
 801933c:	3fb10d66 	.word	0x3fb10d66
 8019340:	c54c206e 	.word	0xc54c206e
 8019344:	3fb745cd 	.word	0x3fb745cd
 8019348:	920083ff 	.word	0x920083ff
 801934c:	3fc24924 	.word	0x3fc24924
 8019350:	5555550d 	.word	0x5555550d
 8019354:	3fd55555 	.word	0x3fd55555
 8019358:	2c6a6c2f 	.word	0x2c6a6c2f
 801935c:	bfa2b444 	.word	0xbfa2b444
 8019360:	52defd9a 	.word	0x52defd9a
 8019364:	3fadde2d 	.word	0x3fadde2d
 8019368:	af749a6d 	.word	0xaf749a6d
 801936c:	3fb3b0f2 	.word	0x3fb3b0f2
 8019370:	fe231671 	.word	0xfe231671
 8019374:	3fbc71c6 	.word	0x3fbc71c6
 8019378:	9998ebc4 	.word	0x9998ebc4
 801937c:	3fc99999 	.word	0x3fc99999
 8019380:	54442d18 	.word	0x54442d18
 8019384:	3ff921fb 	.word	0x3ff921fb
 8019388:	440fffff 	.word	0x440fffff
 801938c:	7ff00000 	.word	0x7ff00000
 8019390:	3fdbffff 	.word	0x3fdbffff
 8019394:	3ff00000 	.word	0x3ff00000
 8019398:	3ff2ffff 	.word	0x3ff2ffff
 801939c:	40038000 	.word	0x40038000
 80193a0:	3ff80000 	.word	0x3ff80000
 80193a4:	bff00000 	.word	0xbff00000
 80193a8:	0801e380 	.word	0x0801e380
 80193ac:	0801e360 	.word	0x0801e360

080193b0 <fabs>:
 80193b0:	ec51 0b10 	vmov	r0, r1, d0
 80193b4:	ee10 2a10 	vmov	r2, s0
 80193b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80193bc:	ec43 2b10 	vmov	d0, r2, r3
 80193c0:	4770      	bx	lr
	...

080193c4 <_init>:
 80193c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193c6:	bf00      	nop
 80193c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193ca:	bc08      	pop	{r3}
 80193cc:	469e      	mov	lr, r3
 80193ce:	4770      	bx	lr

080193d0 <_fini>:
 80193d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d2:	bf00      	nop
 80193d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193d6:	bc08      	pop	{r3}
 80193d8:	469e      	mov	lr, r3
 80193da:	4770      	bx	lr
