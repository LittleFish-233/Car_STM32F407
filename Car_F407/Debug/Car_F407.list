
Car_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f1c  0800c540  0800c540  0001c540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801045c  0801045c  0003027c  2**0
                  CONTENTS
  4 .ARM          00000008  0801045c  0801045c  0002045c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010464  08010464  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010464  08010464  00020464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010468  08010468  00020468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0801046c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003027c  2**0
                  CONTENTS
 10 .bss          00007470  2000027c  2000027c  0003027c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  200076ec  200076ec  0003027c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002abbf  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006fd7  00000000  00000000  0005ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00016ce9  00000000  00000000  00061e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001778  00000000  00000000  00078b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001e90  00000000  00000000  0007a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dadb  00000000  00000000  0007c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000323a0  00000000  00000000  000a9c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4c20  00000000  00000000  000dbfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c0bd3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005934  00000000  00000000  001c0c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000027c 	.word	0x2000027c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c528 	.word	0x0800c528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000280 	.word	0x20000280
 80001cc:	0800c528 	.word	0x0800c528

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4668      	mov	r0, sp
 8001000:	f006 fe10 	bl	8007c24 <memset>

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <MX_ADC1_Init+0x5c>)
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <MX_ADC1_Init+0x60>)
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	e9c0 2300 	strd	r2, r3, [r0]
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.NbrOfConversion = 1;
 8001010:	2401      	movs	r4, #1
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	2300      	movs	r3, #0
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <MX_ADC1_Init+0x64>)
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001016:	6083      	str	r3, [r0, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001018:	6103      	str	r3, [r0, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800101a:	7603      	strb	r3, [r0, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101c:	f880 3020 	strb.w	r3, [r0, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001022:	6282      	str	r2, [r0, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	60c3      	str	r3, [r0, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001026:	61c4      	str	r4, [r0, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001028:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	6144      	str	r4, [r0, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102e:	f001 fa9f 	bl	8002570 <HAL_ADC_Init>
 8001032:	b108      	cbz	r0, 8001038 <MX_ADC1_Init+0x40>
    {
        Error_Handler();
 8001034:	f000 fbb0 	bl	8001798 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_4;
 8001038:	2304      	movs	r3, #4
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_ADC1_Init+0x5c>)
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800103c:	9402      	str	r4, [sp, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	4669      	mov	r1, sp
    sConfig.Rank = 1;
 8001040:	e9cd 3400 	strd	r3, r4, [sp]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	f001 fc14 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001048:	b108      	cbz	r0, 800104e <MX_ADC1_Init+0x56>
    {
        Error_Handler();
 800104a:	f000 fba5 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 800104e:	b004      	add	sp, #16
 8001050:	bd10      	pop	{r4, pc}
 8001052:	bf00      	nop
 8001054:	20000298 	.word	0x20000298
 8001058:	40012000 	.word	0x40012000
 800105c:	0f000001 	.word	0x0f000001

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	b088      	sub	sp, #32

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	2214      	movs	r2, #20
 8001068:	2100      	movs	r1, #0
 800106a:	a803      	add	r0, sp, #12
 800106c:	f006 fdda 	bl	8007c24 <memset>
    if(adcHandle->Instance==ADC1)
 8001070:	6822      	ldr	r2, [r4, #0]
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_ADC_MspInit+0x5c>)
 8001074:	429a      	cmp	r2, r3
 8001076:	d11e      	bne.n	80010b6 <HAL_ADC_MspInit+0x56>
    {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
        /* ADC1 clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 8001078:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800107c:	2100      	movs	r1, #0
 800107e:	9101      	str	r1, [sp, #4]
 8001080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        PA4         ------> ADC1_IN4
        */
        GPIO_InitStruct.Pin = BatteryLevel_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(BatteryLevel_GPIO_Port, &GPIO_InitStruct);
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <HAL_ADC_MspInit+0x60>)
        __HAL_RCC_ADC1_CLK_ENABLE();
 8001084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
 800108a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001090:	9201      	str	r2, [sp, #4]
 8001092:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	9102      	str	r1, [sp, #8]
 8001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a8:	2210      	movs	r2, #16
 80010aa:	2303      	movs	r3, #3
        HAL_GPIO_Init(BatteryLevel_GPIO_Port, &GPIO_InitStruct);
 80010ac:	a903      	add	r1, sp, #12
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
        HAL_GPIO_Init(BatteryLevel_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f001 febb 	bl	8002e2c <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
    }
}
 80010b6:	b008      	add	sp, #32
 80010b8:	bd10      	pop	{r4, pc}
 80010ba:	bf00      	nop
 80010bc:	40012000 	.word	0x40012000
 80010c0:	40020000 	.word	0x40020000

080010c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_DMA_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ce:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80010d2:	6319      	str	r1, [r3, #48]	; 0x30
 80010d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80010da:	9100      	str	r1, [sp, #0]
 80010dc:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010de:	9201      	str	r2, [sp, #4]
 80010e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e2:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80010e6:	6319      	str	r1, [r3, #48]	; 0x30
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	9301      	str	r3, [sp, #4]

    /* DMA interrupt init */
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 14, 0);
 80010f0:	210e      	movs	r1, #14
 80010f2:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 14, 0);
 80010f6:	f001 fc5f 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f001 fc8e 	bl	8002a1c <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 14, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	210e      	movs	r1, #14
 8001104:	203b      	movs	r0, #59	; 0x3b
 8001106:	f001 fc57 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800110a:	203b      	movs	r0, #59	; 0x3b
 800110c:	f001 fc86 	bl	8002a1c <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 14, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	210e      	movs	r1, #14
 8001114:	2045      	movs	r0, #69	; 0x45
 8001116:	f001 fc4f 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800111a:	2045      	movs	r0, #69	; 0x45

}
 800111c:	b003      	add	sp, #12
 800111e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001122:	f001 bc7b 	b.w	8002a1c <HAL_NVIC_EnableIRQ>
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
              * Output
              * EVENT_OUT
              * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	b08e      	sub	sp, #56	; 0x38

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	2214      	movs	r2, #20
 8001134:	2100      	movs	r1, #0
 8001136:	a809      	add	r0, sp, #36	; 0x24
 8001138:	f006 fd74 	bl	8007c24 <memset>

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113c:	2400      	movs	r4, #0
 800113e:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <MX_GPIO_Init+0x17c>)
 8001140:	9401      	str	r4, [sp, #4]
 8001142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOG_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOF, Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001144:	4f59      	ldr	r7, [pc, #356]	; (80012ac <MX_GPIO_Init+0x180>)
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOG, Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 8001146:	f8df a174 	ldr.w	sl, [pc, #372]	; 80012bc <MX_GPIO_Init+0x190>
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET);
 800114a:	4e59      	ldr	r6, [pc, #356]	; (80012b0 <MX_GPIO_Init+0x184>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800114c:	f042 0210 	orr.w	r2, r2, #16
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
 8001152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001154:	f002 0210 	and.w	r2, r2, #16
 8001158:	9201      	str	r2, [sp, #4]
 800115a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115c:	9402      	str	r4, [sp, #8]
 800115e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001160:	f042 0204 	orr.w	r2, r2, #4
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
 8001166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001168:	f002 0204 	and.w	r2, r2, #4
 800116c:	9202      	str	r2, [sp, #8]
 800116e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001170:	9403      	str	r4, [sp, #12]
 8001172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001174:	f042 0220 	orr.w	r2, r2, #32
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	f002 0220 	and.w	r2, r2, #32
 8001180:	9203      	str	r2, [sp, #12]
 8001182:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001184:	9404      	str	r4, [sp, #16]
 8001186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001194:	9204      	str	r2, [sp, #16]
 8001196:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	9405      	str	r4, [sp, #20]
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a4:	f002 0201 	and.w	r2, r2, #1
 80011a8:	9205      	str	r2, [sp, #20]
 80011aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	9406      	str	r4, [sp, #24]
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	f042 0202 	orr.w	r2, r2, #2
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
 80011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b8:	f002 0202 	and.w	r2, r2, #2
 80011bc:	9206      	str	r2, [sp, #24]
 80011be:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c0:	9407      	str	r4, [sp, #28]
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80011d0:	9207      	str	r2, [sp, #28]
 80011d2:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	9408      	str	r4, [sp, #32]
 80011d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d8:	f042 0208 	orr.w	r2, r2, #8
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_WritePin(GPIOF, Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 80011e6:	4622      	mov	r2, r4
 80011e8:	4638      	mov	r0, r7
 80011ea:	f240 41fc 	movw	r1, #1276	; 0x4fc
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	9b08      	ldr	r3, [sp, #32]
    HAL_GPIO_WritePin(GPIOF, Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 80011f0:	f001 fefc 	bl	8002fec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 80011f4:	4622      	mov	r2, r4
 80011f6:	4650      	mov	r0, sl
 80011f8:	217f      	movs	r1, #127	; 0x7f
 80011fa:	f001 fef7 	bl	8002fec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET);
 80011fe:	4622      	mov	r2, r4
 8001200:	4630      	mov	r0, r6
 8001202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001206:	f001 fef1 	bl	8002fec <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = Key_Stop_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120a:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120c:	2208      	movs	r2, #8
 800120e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
    HAL_GPIO_Init(Key_Stop_GPIO_Port, &GPIO_InitStruct);
 8001212:	a909      	add	r1, sp, #36	; 0x24
 8001214:	4827      	ldr	r0, [pc, #156]	; (80012b4 <MX_GPIO_Init+0x188>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001218:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(Key_Stop_GPIO_Port, &GPIO_InitStruct);
 800121c:	f001 fe06 	bl	8002e2c <HAL_GPIO_Init>

    /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                                                     PFPin PFPin PFPin */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001220:	f240 43fc 	movw	r3, #1276	; 0x4fc
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	a909      	add	r1, sp, #36	; 0x24
 8001226:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SIM_SD_Inser_Pin;
 800122c:	f44f 7980 	mov.w	r9, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001230:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001238:	f001 fdf8 	bl	8002e2c <HAL_GPIO_Init>
    HAL_GPIO_Init(SIM_SD_Inser_GPIO_Port, &GPIO_InitStruct);
 800123c:	a909      	add	r1, sp, #36	; 0x24
 800123e:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001244:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(SIM_SD_Inser_GPIO_Port, &GPIO_InitStruct);
 8001248:	f001 fdf0 	bl	8002e2c <HAL_GPIO_Init>

    /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                                                     PGPin PGPin PGPin */
    GPIO_InitStruct.Pin = Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 800124c:	237f      	movs	r3, #127	; 0x7f
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124e:	a909      	add	r1, sp, #36	; 0x24
 8001250:	4650      	mov	r0, sl
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125a:	f001 fde7 	bl	8002e2c <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin PBPin */
    GPIO_InitStruct.Pin = Infrared1_Pin|Infrared2_Pin|Infrared4_Pin;
 800125e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	a909      	add	r1, sp, #36	; 0x24
 8001264:	4630      	mov	r0, r6
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f001 fdde 	bl	8002e2c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 8001270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 8001274:	a909      	add	r1, sp, #36	; 0x24
 8001276:	4630      	mov	r0, r6
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 8001280:	f001 fdd4 	bl	8002e2c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = Infrared3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(Infrared3_GPIO_Port, &GPIO_InitStruct);
 8001284:	a909      	add	r1, sp, #36	; 0x24
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0x18c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001288:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(Infrared3_GPIO_Port, &GPIO_InitStruct);
 800128e:	f001 fdcd 	bl	8002e2c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001292:	4622      	mov	r2, r4
 8001294:	4641      	mov	r1, r8
 8001296:	2009      	movs	r0, #9
 8001298:	f001 fb8e 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800129c:	2009      	movs	r0, #9
 800129e:	f001 fbbd 	bl	8002a1c <HAL_NVIC_EnableIRQ>

}
 80012a2:	b00e      	add	sp, #56	; 0x38
 80012a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021800 	.word	0x40021800

080012c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012c0:	b510      	push	{r4, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012c4:	2214      	movs	r2, #20
 80012c6:	2100      	movs	r1, #0
 80012c8:	a809      	add	r0, sp, #36	; 0x24
 80012ca:	f006 fcab 	bl	8007c24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ce:	2214      	movs	r2, #20
 80012d0:	2100      	movs	r1, #0
 80012d2:	a803      	add	r0, sp, #12
 80012d4:	f006 fca6 	bl	8007c24 <memset>
	
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <SystemClock_Config+0x98>)
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80012e0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80012e4:	6411      	str	r1, [r2, #64]	; 0x40
 80012e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012e8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80012ec:	9201      	str	r2, [sp, #4]
 80012ee:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4a1a      	ldr	r2, [pc, #104]	; (800135c <SystemClock_Config+0x9c>)
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	6811      	ldr	r1, [r2, #0]
 80012f6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80012fa:	6011      	str	r1, [r2, #0]
 80012fc:	6812      	ldr	r2, [r2, #0]
	
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fe:	2402      	movs	r4, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001304:	2008      	movs	r0, #8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001306:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130a:	9202      	str	r2, [sp, #8]
	RCC_OscInitStruct.PLL.PLLN = 168;
 800130c:	23a8      	movs	r3, #168	; 0xa8
 800130e:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001312:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2101      	movs	r1, #1
 8001318:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800131a:	2307      	movs	r3, #7
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001322:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001324:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	f001 fe83 	bl	8003030 <HAL_RCC_OscConfig>
 800132a:	b108      	cbz	r0, 8001330 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800132e:	e7fe      	b.n	800132e <SystemClock_Config+0x6e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001330:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	e9cd 3403 	strd	r3, r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001338:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001340:	2105      	movs	r1, #5
 8001342:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001344:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001348:	f002 f850 	bl	80033ec <HAL_RCC_ClockConfig>
 800134c:	b108      	cbz	r0, 8001352 <SystemClock_Config+0x92>
 800134e:	b672      	cpsid	i
	while (1)
 8001350:	e7fe      	b.n	8001350 <SystemClock_Config+0x90>
}
 8001352:	b014      	add	sp, #80	; 0x50
 8001354:	bd10      	pop	{r4, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <OLED_Proc>:
{
 8001360:	b570      	push	{r4, r5, r6, lr}
	if (uwTick - uwTick_OLED < 500)
 8001362:	4a5a      	ldr	r2, [pc, #360]	; (80014cc <OLED_Proc+0x16c>)
 8001364:	4d5a      	ldr	r5, [pc, #360]	; (80014d0 <OLED_Proc+0x170>)
 8001366:	6811      	ldr	r1, [r2, #0]
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
{
 8001370:	b086      	sub	sp, #24
	if (uwTick - uwTick_OLED < 500)
 8001372:	f0c0 80a8 	bcc.w	80014c6 <OLED_Proc+0x166>
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Actual_Speeds[0], Motor_Actual_Speeds[1]);
 8001376:	4c57      	ldr	r4, [pc, #348]	; (80014d4 <OLED_Proc+0x174>)
	uwTick_OLED = uwTick;
 8001378:	682b      	ldr	r3, [r5, #0]
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Actual_Speeds[0], Motor_Actual_Speeds[1]);
 800137a:	6820      	ldr	r0, [r4, #0]
	uwTick_OLED = uwTick;
 800137c:	6013      	str	r3, [r2, #0]
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Actual_Speeds[0], Motor_Actual_Speeds[1]);
 800137e:	f7ff f8e3 	bl	8000548 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	6860      	ldr	r0, [r4, #4]
 8001388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800138c:	f7ff f8dc 	bl	8000548 <__aeabi_f2d>
 8001390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001394:	e9cd 0100 	strd	r0, r1, [sp]
 8001398:	494f      	ldr	r1, [pc, #316]	; (80014d8 <OLED_Proc+0x178>)
 800139a:	4850      	ldr	r0, [pc, #320]	; (80014dc <OLED_Proc+0x17c>)
 800139c:	f007 faca 	bl	8008934 <siprintf>
	Screen_ShowStringLine(0, String_Line, Font_Size);
 80013a0:	2218      	movs	r2, #24
 80013a2:	494e      	ldr	r1, [pc, #312]	; (80014dc <OLED_Proc+0x17c>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f006 facb 	bl	8007940 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Actual_Speeds[2], Motor_Actual_Speeds[3]);
 80013aa:	68a0      	ldr	r0, [r4, #8]
 80013ac:	f7ff f8cc 	bl	8000548 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	68e0      	ldr	r0, [r4, #12]
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Expected_Speeds[0], Motor_Expected_Speeds[1]);
 80013b6:	4c4a      	ldr	r4, [pc, #296]	; (80014e0 <OLED_Proc+0x180>)
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Actual_Speeds[2], Motor_Actual_Speeds[3]);
 80013b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013bc:	f7ff f8c4 	bl	8000548 <__aeabi_f2d>
 80013c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013c4:	e9cd 0100 	strd	r0, r1, [sp]
 80013c8:	4946      	ldr	r1, [pc, #280]	; (80014e4 <OLED_Proc+0x184>)
 80013ca:	4844      	ldr	r0, [pc, #272]	; (80014dc <OLED_Proc+0x17c>)
 80013cc:	f007 fab2 	bl	8008934 <siprintf>
	Screen_ShowStringLine(1, String_Line, Font_Size);
 80013d0:	2218      	movs	r2, #24
 80013d2:	4942      	ldr	r1, [pc, #264]	; (80014dc <OLED_Proc+0x17c>)
 80013d4:	2001      	movs	r0, #1
 80013d6:	f006 fab3 	bl	8007940 <Screen_ShowStringLine>
	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Expected_Speeds[0], Motor_Expected_Speeds[1]);
 80013da:	6820      	ldr	r0, [r4, #0]
 80013dc:	f7ff f8b4 	bl	8000548 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	6860      	ldr	r0, [r4, #4]
 80013e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013ea:	f7ff f8ad 	bl	8000548 <__aeabi_f2d>
 80013ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013f2:	e9cd 0100 	strd	r0, r1, [sp]
 80013f6:	4938      	ldr	r1, [pc, #224]	; (80014d8 <OLED_Proc+0x178>)
 80013f8:	4838      	ldr	r0, [pc, #224]	; (80014dc <OLED_Proc+0x17c>)
 80013fa:	f007 fa9b 	bl	8008934 <siprintf>
	Screen_ShowStringLine(3, String_Line, Font_Size);
 80013fe:	2218      	movs	r2, #24
 8001400:	4936      	ldr	r1, [pc, #216]	; (80014dc <OLED_Proc+0x17c>)
 8001402:	2003      	movs	r0, #3
 8001404:	f006 fa9c 	bl	8007940 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Expected_Speeds[2], Motor_Expected_Speeds[3]);
 8001408:	68a0      	ldr	r0, [r4, #8]
 800140a:	f7ff f89d 	bl	8000548 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	68e0      	ldr	r0, [r4, #12]
 8001414:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001418:	f7ff f896 	bl	8000548 <__aeabi_f2d>
 800141c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001420:	e9cd 0100 	strd	r0, r1, [sp]
 8001424:	492f      	ldr	r1, [pc, #188]	; (80014e4 <OLED_Proc+0x184>)
 8001426:	482d      	ldr	r0, [pc, #180]	; (80014dc <OLED_Proc+0x17c>)
 8001428:	f007 fa84 	bl	8008934 <siprintf>
	Screen_ShowStringLine(4, String_Line, Font_Size);
 800142c:	2218      	movs	r2, #24
 800142e:	492b      	ldr	r1, [pc, #172]	; (80014dc <OLED_Proc+0x17c>)
 8001430:	2004      	movs	r0, #4
 8001432:	f006 fa85 	bl	8007940 <Screen_ShowStringLine>
	sprintf(String_Line, "     %c %c %c %c", Infrared_Datas[0] ? '#' : ' ', Infrared_Datas[1] ? '#' : ' ', Infrared_Datas[2] ? '#' : ' ', Infrared_Datas[3] ? '#' : ' ');
 8001436:	492c      	ldr	r1, [pc, #176]	; (80014e8 <OLED_Proc+0x188>)
 8001438:	780b      	ldrb	r3, [r1, #0]
 800143a:	7888      	ldrb	r0, [r1, #2]
 800143c:	2b00      	cmp	r3, #0
 800143e:	784b      	ldrb	r3, [r1, #1]
 8001440:	78c9      	ldrb	r1, [r1, #3]
 8001442:	bf14      	ite	ne
 8001444:	2223      	movne	r2, #35	; 0x23
 8001446:	2220      	moveq	r2, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2323      	movne	r3, #35	; 0x23
 800144e:	2320      	moveq	r3, #32
 8001450:	2800      	cmp	r0, #0
 8001452:	bf14      	ite	ne
 8001454:	2023      	movne	r0, #35	; 0x23
 8001456:	2020      	moveq	r0, #32
 8001458:	2900      	cmp	r1, #0
 800145a:	bf14      	ite	ne
 800145c:	2123      	movne	r1, #35	; 0x23
 800145e:	2120      	moveq	r1, #32
 8001460:	e9cd 0100 	strd	r0, r1, [sp]
 8001464:	4921      	ldr	r1, [pc, #132]	; (80014ec <OLED_Proc+0x18c>)
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <OLED_Proc+0x17c>)
 8001468:	f007 fa64 	bl	8008934 <siprintf>
	Screen_ShowStringLine(5, String_Line, Font_Size);
 800146c:	2218      	movs	r2, #24
 800146e:	491b      	ldr	r1, [pc, #108]	; (80014dc <OLED_Proc+0x17c>)
 8001470:	2005      	movs	r0, #5
 8001472:	f006 fa65 	bl	8007940 <Screen_ShowStringLine>
	sprintf(String_Line, "%.2f V    %.2f C    %d s", GetBatteryLevel(), GetInternalTemperature(), (int) uwTick / 1000);
 8001476:	f005 fc83 	bl	8006d80 <GetBatteryLevel>
 800147a:	ee10 6a10 	vmov	r6, s0
 800147e:	f005 fca7 	bl	8006dd0 <GetInternalTemperature>
 8001482:	4630      	mov	r0, r6
 8001484:	ee10 4a10 	vmov	r4, s0
 8001488:	f7ff f85e 	bl	8000548 <__aeabi_f2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	682d      	ldr	r5, [r5, #0]
 8001494:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800149c:	fb95 f5f1 	sdiv	r5, r5, r1
 80014a0:	9502      	str	r5, [sp, #8]
 80014a2:	f7ff f851 	bl	8000548 <__aeabi_f2d>
 80014a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014aa:	e9cd 0100 	strd	r0, r1, [sp]
 80014ae:	4910      	ldr	r1, [pc, #64]	; (80014f0 <OLED_Proc+0x190>)
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <OLED_Proc+0x17c>)
 80014b2:	f007 fa3f 	bl	8008934 <siprintf>
	Screen_ShowStringLine(14, String_Line, Font_Size_Small);
 80014b6:	4909      	ldr	r1, [pc, #36]	; (80014dc <OLED_Proc+0x17c>)
 80014b8:	2210      	movs	r2, #16
 80014ba:	200e      	movs	r0, #14
}
 80014bc:	b006      	add	sp, #24
 80014be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Screen_ShowStringLine(14, String_Line, Font_Size_Small);
 80014c2:	f006 ba3d 	b.w	8007940 <Screen_ShowStringLine>
}
 80014c6:	b006      	add	sp, #24
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	bf00      	nop
 80014cc:	20000b00 	.word	0x20000b00
 80014d0:	20001070 	.word	0x20001070
 80014d4:	20001874 	.word	0x20001874
 80014d8:	0800c540 	.word	0x0800c540
 80014dc:	200002e0 	.word	0x200002e0
 80014e0:	20001910 	.word	0x20001910
 80014e4:	0800c552 	.word	0x0800c552
 80014e8:	20001920 	.word	0x20001920
 80014ec:	0800c564 	.word	0x0800c564
 80014f0:	0800c575 	.word	0x0800c575

080014f4 <SendData_Proc>:
	if (uwTick - uwTick_SendData < 100)
 80014f4:	4911      	ldr	r1, [pc, #68]	; (800153c <SendData_Proc+0x48>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <SendData_Proc+0x4c>)
 80014f8:	680b      	ldr	r3, [r1, #0]
 80014fa:	6810      	ldr	r0, [r2, #0]
 80014fc:	1a1b      	subs	r3, r3, r0
 80014fe:	2b63      	cmp	r3, #99	; 0x63
 8001500:	d91a      	bls.n	8001538 <SendData_Proc+0x44>
	uwTick_SendData = uwTick;
 8001502:	680b      	ldr	r3, [r1, #0]
 8001504:	6013      	str	r3, [r2, #0]
	for (int var = 0; var < Motor_Number; ++var)
 8001506:	490f      	ldr	r1, [pc, #60]	; (8001544 <SendData_Proc+0x50>)
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <SendData_Proc+0x54>)
		TX_String[var] = ((uint16_t) (int16_t) (Motor_Actual_Speeds[var] * 100));
 800150a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800154c <SendData_Proc+0x58>
	for (int var = 0; var < Motor_Number; ++var)
 800150e:	2300      	movs	r3, #0
		TX_String[var] = ((uint16_t) (int16_t) (Motor_Actual_Speeds[var] * 100));
 8001510:	ecf1 7a01 	vldmia	r1!, {s15}
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int var = 0; var < Motor_Number; ++var)
 8001518:	3301      	adds	r3, #1
		TX_String[var] = ((uint16_t) (int16_t) (Motor_Actual_Speeds[var] * 100));
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	for (int var = 0; var < Motor_Number; ++var)
 800151e:	2b04      	cmp	r3, #4
		TX_String[var] = ((uint16_t) (int16_t) (Motor_Actual_Speeds[var] * 100));
 8001520:	ee17 0a90 	vmov	r0, s15
 8001524:	f822 0b02 	strh.w	r0, [r2], #2
	for (int var = 0; var < Motor_Number; ++var)
 8001528:	d1f2      	bne.n	8001510 <SendData_Proc+0x1c>
	HAL_UART_Transmit(&huart1, (uint8_t*) TX_String, Motor_Number * 2, 0xFFFF);
 800152a:	4907      	ldr	r1, [pc, #28]	; (8001548 <SendData_Proc+0x54>)
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <SendData_Proc+0x5c>)
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	2208      	movs	r2, #8
 8001534:	f003 be0a 	b.w	800514c <HAL_UART_Transmit>
}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20001070 	.word	0x20001070
 8001540:	20000b04 	.word	0x20000b04
 8001544:	20001874 	.word	0x20001874
 8001548:	20000ab0 	.word	0x20000ab0
 800154c:	42c80000 	.word	0x42c80000
 8001550:	20000fe8 	.word	0x20000fe8

08001554 <main>:
{
 8001554:	b508      	push	{r3, lr}
	HAL_Init();
 8001556:	f000 ffcb 	bl	80024f0 <HAL_Init>
	SystemClock_Config();
 800155a:	f7ff feb1 	bl	80012c0 <SystemClock_Config>
	MX_GPIO_Init();
 800155e:	f7ff fde5 	bl	800112c <MX_GPIO_Init>
	MX_DMA_Init();
 8001562:	f7ff fdaf 	bl	80010c4 <MX_DMA_Init>
	MX_TIM14_Init();
 8001566:	f000 fe9d 	bl	80022a4 <MX_TIM14_Init>
	MX_TIM1_Init();
 800156a:	f000 fb8b 	bl	8001c84 <MX_TIM1_Init>
	MX_TIM3_Init();
 800156e:	f000 fe31 	bl	80021d4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001572:	f000 fbb7 	bl	8001ce4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001576:	f000 fbe3 	bl	8001d40 <MX_TIM5_Init>
	MX_ADC1_Init();
 800157a:	f7ff fd3d 	bl	8000ff8 <MX_ADC1_Init>
	MX_TIM6_Init();
 800157e:	f000 fc0d 	bl	8001d9c <MX_TIM6_Init>
	MX_USART1_UART_Init();
 8001582:	f000 fec5 	bl	8002310 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8001586:	f000 fc2b 	bl	8001de0 <MX_TIM7_Init>
	MX_TIM13_Init();
 800158a:	f000 fc7d 	bl	8001e88 <MX_TIM13_Init>
	MX_SPI1_Init();
 800158e:	f000 f9cb 	bl	8001928 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001592:	f000 f9ed 	bl	8001970 <MX_SPI2_Init>
	MX_TIM8_Init();
 8001596:	f000 fc47 	bl	8001e28 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800159a:	f000 fed5 	bl	8002348 <MX_USART2_UART_Init>
	MX_SDIO_SD_Init();
 800159e:	f000 f8fd 	bl	800179c <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 80015a2:	f004 fb47 	bl	8005c34 <MX_FATFS_Init>
	HAL_TIM_Base_Start_IT(&htim14);
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <main+0x90>)
 80015a8:	f003 f846 	bl	8004638 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80015ac:	2100      	movs	r1, #0
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <main+0x90>)
 80015b0:	f003 fc58 	bl	8004e64 <HAL_TIM_PWM_Start>
	Clean_Dormancy_Count();
 80015b4:	f005 fb8c 	bl	8006cd0 <Clean_Dormancy_Count>
	Init_FATFS();
 80015b8:	f005 feec 	bl	8007394 <Init_FATFS>
	HAL_TIM_Base_Start_IT(&htim6);
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <main+0x94>)
 80015be:	f003 f83b 	bl	8004638 <HAL_TIM_Base_Start_IT>
	Screen_Init();
 80015c2:	f006 fa87 	bl	8007ad4 <Screen_Init>
	Init_USART();
 80015c6:	f006 fa95 	bl	8007af4 <Init_USART>
	InitCar();
 80015ca:	f005 fdeb 	bl	80071a4 <InitCar>
	LED2_H();
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <main+0x98>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	f001 fd09 	bl	8002fec <HAL_GPIO_WritePin>
		OLED_Proc();
 80015da:	f7ff fec1 	bl	8001360 <OLED_Proc>
		SendData_Proc();
 80015de:	f7ff ff89 	bl	80014f4 <SendData_Proc>
	while (1)
 80015e2:	e7fa      	b.n	80015da <main+0x86>
 80015e4:	20000df0 	.word	0x20000df0
 80015e8:	20000f10 	.word	0x20000f10
 80015ec:	40021400 	.word	0x40021400

080015f0 <ProcessReceivedData>:
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
	if (RxData_Flag[UART_1] == RX_UnRead)
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <ProcessReceivedData+0x10c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10a      	bne.n	8001610 <ProcessReceivedData+0x20>
		switch (RxData[UART_1][0])
 80015fa:	4c41      	ldr	r4, [pc, #260]	; (8001700 <ProcessReceivedData+0x110>)
		CleanRxData(UART_1);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f006 facb 	bl	8007b98 <CleanRxData>
		Clean_Dormancy_Count();
 8001602:	f005 fb65 	bl	8006cd0 <Clean_Dormancy_Count>
		switch (RxData[UART_1][0])
 8001606:	7823      	ldrb	r3, [r4, #0]
 8001608:	2b41      	cmp	r3, #65	; 0x41
 800160a:	d002      	beq.n	8001612 <ProcessReceivedData+0x22>
 800160c:	2b42      	cmp	r3, #66	; 0x42
 800160e:	d057      	beq.n	80016c0 <ProcessReceivedData+0xd0>
}
 8001610:	bd38      	pop	{r3, r4, r5, pc}
				switch (RxData[UART_1][1])
 8001612:	7863      	ldrb	r3, [r4, #1]
 8001614:	3b31      	subs	r3, #49	; 0x31
 8001616:	2b08      	cmp	r3, #8
 8001618:	d8fa      	bhi.n	8001610 <ProcessReceivedData+0x20>
 800161a:	e8df f003 	tbb	[pc, r3]
 800161e:	0f05      	.short	0x0f05
 8001620:	3832271d 	.word	0x3832271d
 8001624:	0f41      	.short	0x0f41
 8001626:	47          	.byte	0x47
 8001627:	00          	.byte	0x00
						AddCarSpeed(Speed_Step * 2, 0, 0);
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <ProcessReceivedData+0x114>)
 800162a:	ed93 0a00 	vldr	s0, [r3]
						AddCarSpeed(-Speed_Step * 2, 0, 0);
 800162e:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8001708 <ProcessReceivedData+0x118>
 8001632:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001636:	eef0 0a41 	vmov.f32	s1, s2
 800163a:	e009      	b.n	8001650 <ProcessReceivedData+0x60>
						AddCarSpeed(Speed_Step, 0, -Direction_Step);
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <ProcessReceivedData+0x11c>)
 800163e:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001708 <ProcessReceivedData+0x118>
 8001642:	ed93 1a00 	vldr	s2, [r3]
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <ProcessReceivedData+0x114>)
 8001648:	ed93 0a00 	vldr	s0, [r3]
 800164c:	eeb1 1a41 	vneg.f32	s2, s2
}
 8001650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						AddCarSpeed(Speed_Step, 0, -Direction_Step);
 8001654:	f005 be14 	b.w	8007280 <AddCarSpeed>
						AddCarSpeed(0, 0, Direction_Step * 2);
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <ProcessReceivedData+0x11c>)
 800165a:	ed93 1a00 	vldr	s2, [r3]
						AddCarSpeed(0, 0, -Direction_Step * 2);
 800165e:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8001708 <ProcessReceivedData+0x118>
 8001662:	ee31 1a01 	vadd.f32	s2, s2, s2
 8001666:	eeb0 0a60 	vmov.f32	s0, s1
 800166a:	e7f1      	b.n	8001650 <ProcessReceivedData+0x60>
						AddCarSpeed(-Speed_Step, 0, Direction_Step);
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <ProcessReceivedData+0x114>)
 800166e:	ed93 0a00 	vldr	s0, [r3]
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <ProcessReceivedData+0x11c>)
 8001674:	ed93 1a00 	vldr	s2, [r3]
						AddCarSpeed(-Speed_Step, 0, -Direction_Step);
 8001678:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001708 <ProcessReceivedData+0x118>
 800167c:	eeb1 0a40 	vneg.f32	s0, s0
 8001680:	e7e6      	b.n	8001650 <ProcessReceivedData+0x60>
						AddCarSpeed(-Speed_Step * 2, 0, 0);
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <ProcessReceivedData+0x114>)
 8001684:	ed93 0a00 	vldr	s0, [r3]
 8001688:	eeb1 0a40 	vneg.f32	s0, s0
 800168c:	e7cf      	b.n	800162e <ProcessReceivedData+0x3e>
						AddCarSpeed(-Speed_Step, 0, -Direction_Step);
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <ProcessReceivedData+0x11c>)
 8001690:	ed93 1a00 	vldr	s2, [r3]
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <ProcessReceivedData+0x114>)
 8001696:	eeb1 1a41 	vneg.f32	s2, s2
 800169a:	ed93 0a00 	vldr	s0, [r3]
 800169e:	e7eb      	b.n	8001678 <ProcessReceivedData+0x88>
						AddCarSpeed(0, 0, -Direction_Step * 2);
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <ProcessReceivedData+0x11c>)
 80016a2:	ed93 1a00 	vldr	s2, [r3]
 80016a6:	eeb1 1a41 	vneg.f32	s2, s2
 80016aa:	e7d8      	b.n	800165e <ProcessReceivedData+0x6e>
						SetCarSpeed(0, 0, 0);
 80016ac:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001708 <ProcessReceivedData+0x118>
}
 80016b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						SetCarSpeed(0, 0, 0);
 80016b4:	eef0 0a41 	vmov.f32	s1, s2
 80016b8:	eeb0 0a41 	vmov.f32	s0, s2
 80016bc:	f005 bdf8 	b.w	80072b0 <SetCarSpeed>
		switch (RxData[UART_1][0])
 80016c0:	2500      	movs	r5, #0
					speed = (RxData[UART_1][i * 3 + 2] - '0') * 10 + (RxData[UART_1][i * 3 + 3] - '0');
 80016c2:	78a3      	ldrb	r3, [r4, #2]
 80016c4:	3b30      	subs	r3, #48	; 0x30
 80016c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80016ca:	78e3      	ldrb	r3, [r4, #3]
 80016cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					if (RxData[UART_1][i * 3 + 1] == '-')
 80016d0:	7862      	ldrb	r2, [r4, #1]
					speed = (RxData[UART_1][i * 3 + 2] - '0') * 10 + (RxData[UART_1][i * 3 + 3] - '0');
 80016d2:	b29b      	uxth	r3, r3
					if (RxData[UART_1][i * 3 + 1] == '-')
 80016d4:	2a2d      	cmp	r2, #45	; 0x2d
					speed = (RxData[UART_1][i * 3 + 2] - '0') * 10 + (RxData[UART_1][i * 3 + 3] - '0');
 80016d6:	bf14      	ite	ne
 80016d8:	3b30      	subne	r3, #48	; 0x30
						speed = -speed;
 80016da:	f1c3 0330 	rsbeq	r3, r3, #48	; 0x30
 80016de:	b29b      	uxth	r3, r3
					Set_Motor_ExpectedSpeed(i, speed);
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	ee00 3a10 	vmov	s0, r3
 80016e6:	b2e8      	uxtb	r0, r5
 80016e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
				for (uint8_t i = 0; i < Motor_Number; i++)
 80016ec:	3501      	adds	r5, #1
					Set_Motor_ExpectedSpeed(i, speed);
 80016ee:	f005 fda7 	bl	8007240 <Set_Motor_ExpectedSpeed>
				for (uint8_t i = 0; i < Motor_Number; i++)
 80016f2:	2d04      	cmp	r5, #4
 80016f4:	f104 0403 	add.w	r4, r4, #3
 80016f8:	d1e3      	bne.n	80016c2 <ProcessReceivedData+0xd2>
 80016fa:	e789      	b.n	8001610 <ProcessReceivedData+0x20>
 80016fc:	200076d8 	.word	0x200076d8
 8001700:	20007686 	.word	0x20007686
 8001704:	20000004 	.word	0x20000004
 8001708:	00000000 	.word	0x00000000
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM14)
 8001710:	6803      	ldr	r3, [r0, #0]
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001714:	4293      	cmp	r3, r2
{
 8001716:	b510      	push	{r4, lr}
 8001718:	4604      	mov	r4, r0
	if (htim->Instance == TIM14)
 800171a:	d10b      	bne.n	8001734 <HAL_TIM_PeriodElapsedCallback+0x24>
		Periodic_Update_BreathingLights();
 800171c:	f005 fe52 	bl	80073c4 <Periodic_Update_BreathingLights>
		ProcessReceivedData();
 8001720:	f7ff ff66 	bl	80015f0 <ProcessReceivedData>
	if (htim->Instance == TIM8)
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001728:	429a      	cmp	r2, r3
 800172a:	d117      	bne.n	800175c <HAL_TIM_PeriodElapsedCallback+0x4c>
}
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ProcessReceivedData();
 8001730:	f7ff bf5e 	b.w	80015f0 <ProcessReceivedData>
	else if (htim->Instance == TIM6)
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10a      	bne.n	8001750 <HAL_TIM_PeriodElapsedCallback+0x40>
		Periodic_Update_Car_ActualSpeed();
 800173a:	f005 fd63 	bl	8007204 <Periodic_Update_Car_ActualSpeed>
		Periodic_UpdateAndSet_Car_ExpectedSpeed();
 800173e:	f005 fd39 	bl	80071b4 <Periodic_UpdateAndSet_Car_ExpectedSpeed>
		if (Is_Car_Runing() == 1)
 8001742:	f005 fd4f 	bl	80071e4 <Is_Car_Runing>
 8001746:	2801      	cmp	r0, #1
 8001748:	d1ec      	bne.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x14>
			Clean_Dormancy_Count();
 800174a:	f005 fac1 	bl	8006cd0 <Clean_Dormancy_Count>
 800174e:	e7e9      	b.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x14>
	else if (htim->Instance == TIM7)
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d1e6      	bne.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x14>
		Periodic_Dormancy_Counter();
 8001756:	f005 faf5 	bl	8006d44 <Periodic_Dormancy_Counter>
 800175a:	e7e3      	b.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x14>
}
 800175c:	bd10      	pop	{r4, pc}
 800175e:	bf00      	nop
 8001760:	40002000 	.word	0x40002000
 8001764:	40010400 	.word	0x40010400
 8001768:	40001000 	.word	0x40001000
 800176c:	40001400 	.word	0x40001400

08001770 <HAL_GPIO_EXTI_Callback>:
{
 8001770:	b510      	push	{r4, lr}
 8001772:	4604      	mov	r4, r0
	Clean_Dormancy_Count();
 8001774:	f005 faac 	bl	8006cd0 <Clean_Dormancy_Count>
	if (GPIO_Pin == Key_Stop_Pin)
 8001778:	2c08      	cmp	r4, #8
 800177a:	d109      	bne.n	8001790 <HAL_GPIO_EXTI_Callback+0x20>
		SetCarSpeed(0, 0, 0);
 800177c:	ed9f 1a05 	vldr	s2, [pc, #20]	; 8001794 <HAL_GPIO_EXTI_Callback+0x24>
}
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		SetCarSpeed(0, 0, 0);
 8001784:	eef0 0a41 	vmov.f32	s1, s2
 8001788:	eeb0 0a41 	vmov.f32	s0, s2
 800178c:	f005 bd90 	b.w	80072b0 <SetCarSpeed>
}
 8001790:	bd10      	pop	{r4, pc}
 8001792:	bf00      	nop
 8001794:	00000000 	.word	0x00000000

08001798 <Error_Handler>:
 8001798:	b672      	cpsid	i
	while (1)
 800179a:	e7fe      	b.n	800179a <Error_Handler+0x2>

0800179c <MX_SDIO_SD_Init>:
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_SDIO_SD_Init+0x1c>)
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800179e:	4907      	ldr	r1, [pc, #28]	; (80017bc <MX_SDIO_SD_Init+0x20>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	e9c3 1200 	strd	r1, r2, [r3]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80017a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017aa:	e9c3 2202 	strd	r2, r2, [r3, #8]
    hsd.Init.ClockDiv = 0;
 80017ae:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80017b2:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000bc8 	.word	0x20000bc8
 80017bc:	40012c00 	.word	0x40012c00

080017c0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80017c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c4:	4605      	mov	r5, r0
 80017c6:	b088      	sub	sp, #32

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	2214      	movs	r2, #20
 80017ca:	2100      	movs	r1, #0
 80017cc:	a803      	add	r0, sp, #12
 80017ce:	f006 fa29 	bl	8007c24 <memset>
    if(sdHandle->Instance==SDIO)
 80017d2:	682a      	ldr	r2, [r5, #0]
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_SD_MspInit+0x14c>)
 80017d6:	429a      	cmp	r2, r3
 80017d8:	f040 8094 	bne.w	8001904 <HAL_SD_MspInit+0x144>
    {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
        /* SDIO clock enable */
        __HAL_RCC_SDIO_CLK_ENABLE();
 80017dc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80017e0:	2600      	movs	r6, #0
 80017e2:	9600      	str	r6, [sp, #0]
 80017e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                                    |GPIO_PIN_12;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_PULLUP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	484a      	ldr	r0, [pc, #296]	; (8001910 <HAL_SD_MspInit+0x150>)
        __HAL_RCC_SDIO_CLK_ENABLE();
 80017e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
 80017ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017f4:	9200      	str	r2, [sp, #0]
 80017f6:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	9601      	str	r6, [sp, #4]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
 8001802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001804:	f002 0204 	and.w	r2, r2, #4
 8001808:	9201      	str	r2, [sp, #4]
 800180a:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800180c:	9602      	str	r6, [sp, #8]
 800180e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001810:	f042 0208 	orr.w	r2, r2, #8
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	f003 0308 	and.w	r3, r3, #8
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800181c:	240c      	movs	r4, #12
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	f04f 0a02 	mov.w	sl, #2
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	f04f 0901 	mov.w	r9, #1
 8001828:	2703      	movs	r7, #3
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182a:	eb0d 0104 	add.w	r1, sp, r4
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001830:	9407      	str	r4, [sp, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001836:	e9cd 3a03 	strd	r3, sl, [sp, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	e9cd 9705 	strd	r9, r7, [sp, #20]

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 800183e:	f04f 0804 	mov.w	r8, #4
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001842:	f001 faf3 	bl	8002e2c <HAL_GPIO_Init>
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_PULLUP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <HAL_SD_MspInit+0x154>)
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001848:	9407      	str	r4, [sp, #28]
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184a:	eb0d 0104 	add.w	r1, sp, r4
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	e9cd 8a03 	strd	r8, sl, [sp, #12]

        /* SDIO DMA Init */
        /* SDIO_RX Init */
        hdma_sdio_rx.Instance = DMA2_Stream3;
 8001852:	4c31      	ldr	r4, [pc, #196]	; (8001918 <HAL_SD_MspInit+0x158>)
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	e9cd 9705 	strd	r9, r7, [sp, #20]
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001858:	f001 fae8 	bl	8002e2c <HAL_GPIO_Init>
        hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800185c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8001924 <HAL_SD_MspInit+0x164>
        hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
        hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
        hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
        hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
        hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
        hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001860:	62a7      	str	r7, [r4, #40]	; 0x28
        hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001862:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001866:	e9c4 e300 	strd	lr, r3, [r4]
        hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800186a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800186e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001872:	e9c4 9304 	strd	r9, r3, [r4, #16]
        hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001876:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 800187a:	2320      	movs	r3, #32
 800187c:	e9c4 a306 	strd	sl, r3, [r4, #24]
        hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
        hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001880:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001888:	4620      	mov	r0, r4
        hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	e9c4 6602 	strd	r6, r6, [r4, #8]
        hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800188e:	e9c4 6808 	strd	r6, r8, [r4, #32]
        hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001892:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
        if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001896:	f001 f8f9 	bl	8002a8c <HAL_DMA_Init>
 800189a:	b108      	cbz	r0, 80018a0 <HAL_SD_MspInit+0xe0>
        {
            Error_Handler();
 800189c:	f7ff ff7c 	bl	8001798 <Error_Handler>

        __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

        /* SDIO_TX Init */
        hdma_sdio_tx.Instance = DMA2_Stream6;
        hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_SD_MspInit+0x15c>)
        __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80018a2:	642c      	str	r4, [r5, #64]	; 0x40
 80018a4:	63a5      	str	r5, [r4, #56]	; 0x38
        hdma_sdio_tx.Instance = DMA2_Stream6;
 80018a6:	4c1e      	ldr	r4, [pc, #120]	; (8001920 <HAL_SD_MspInit+0x160>)
        hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80018a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018ac:	e9c4 2300 	strd	r2, r3, [r4]
        hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
        hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	2300      	movs	r3, #0
        hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
        hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
        hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018bc:	e9c4 1302 	strd	r1, r3, [r4, #8]
        hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
        hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c0:	6223      	str	r3, [r4, #32]
        hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
        hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018c2:	2704      	movs	r7, #4
 80018c4:	2303      	movs	r3, #3
        hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c6:	e9c4 0204 	strd	r0, r2, [r4, #16]
        hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018ca:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80018ce:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80018d2:	2220      	movs	r2, #32
        hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
        hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018d4:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80018d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80018dc:	4620      	mov	r0, r4
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80018de:	e9c4 6206 	strd	r6, r2, [r4, #24]
        hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018e2:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
        if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80018e6:	f001 f8d1 	bl	8002a8c <HAL_DMA_Init>
 80018ea:	b108      	cbz	r0, 80018f0 <HAL_SD_MspInit+0x130>
        {
            Error_Handler();
 80018ec:	f7ff ff54 	bl	8001798 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

        /* SDIO interrupt Init */
        HAL_NVIC_SetPriority(SDIO_IRQn, 13, 0);
 80018f0:	2031      	movs	r0, #49	; 0x31
        __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80018f2:	63ec      	str	r4, [r5, #60]	; 0x3c
        HAL_NVIC_SetPriority(SDIO_IRQn, 13, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	210d      	movs	r1, #13
        __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80018f8:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_NVIC_SetPriority(SDIO_IRQn, 13, 0);
 80018fa:	f001 f85d 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80018fe:	2031      	movs	r0, #49	; 0x31
 8001900:	f001 f88c 	bl	8002a1c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SDIO_MspInit 1 */

    /* USER CODE END SDIO_MspInit 1 */
    }
}
 8001904:	b008      	add	sp, #32
 8001906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800190a:	bf00      	nop
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	20000b08 	.word	0x20000b08
 800191c:	400264a0 	.word	0x400264a0
 8001920:	20000b68 	.word	0x20000b68
 8001924:	40026458 	.word	0x40026458

08001928 <MX_SPI1_Init>:
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 8001928:	480f      	ldr	r0, [pc, #60]	; (8001968 <MX_SPI1_Init+0x40>)
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <MX_SPI1_Init+0x44>)
{
 800192c:	b508      	push	{r3, lr}
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001932:	e9c0 2300 	strd	r2, r3, [r0]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001936:	2102      	movs	r1, #2
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001938:	2300      	movs	r3, #0
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800193a:	2201      	movs	r2, #1
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	e9c0 3302 	strd	r3, r3, [r0, #8]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001940:	e9c0 1204 	strd	r1, r2, [r0, #16]
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001944:	e9c0 3308 	strd	r3, r3, [r0, #32]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001948:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800194c:	2238      	movs	r2, #56	; 0x38
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194e:	6283      	str	r3, [r0, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001950:	230a      	movs	r3, #10
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001952:	e9c0 c206 	strd	ip, r2, [r0, #24]
    hspi1.Init.CRCPolynomial = 10;
 8001956:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001958:	f002 fc24 	bl	80041a4 <HAL_SPI_Init>
 800195c:	b118      	cbz	r0, 8001966 <MX_SPI1_Init+0x3e>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 800195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler();
 8001962:	f7ff bf19 	b.w	8001798 <Error_Handler>
}
 8001966:	bd08      	pop	{r3, pc}
 8001968:	20000cac 	.word	0x20000cac
 800196c:	40013000 	.word	0x40013000

08001970 <MX_SPI2_Init>:
    /* USER CODE END SPI2_Init 0 */

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    hspi2.Instance = SPI2;
 8001970:	480f      	ldr	r0, [pc, #60]	; (80019b0 <MX_SPI2_Init+0x40>)
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <MX_SPI2_Init+0x44>)
{
 8001974:	b508      	push	{r3, lr}
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001976:	f44f 7382 	mov.w	r3, #260	; 0x104
 800197a:	e9c0 2300 	strd	r2, r3, [r0]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800197e:	2102      	movs	r1, #2
 8001980:	2201      	movs	r2, #1
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	2300      	movs	r3, #0
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001984:	e9c0 1204 	strd	r1, r2, [r0, #16]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800198c:	e9c0 3302 	strd	r3, r3, [r0, #8]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001990:	e9c0 2306 	strd	r2, r3, [r0, #24]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001994:	e9c0 3308 	strd	r3, r3, [r0, #32]
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	6283      	str	r3, [r0, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 800199a:	230a      	movs	r3, #10
 800199c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800199e:	f002 fc01 	bl	80041a4 <HAL_SPI_Init>
 80019a2:	b118      	cbz	r0, 80019ac <MX_SPI2_Init+0x3c>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */

}
 80019a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler();
 80019a8:	f7ff bef6 	b.w	8001798 <Error_Handler>
}
 80019ac:	bd08      	pop	{r3, pc}
 80019ae:	bf00      	nop
 80019b0:	20000d04 	.word	0x20000d04
 80019b4:	40003800 	.word	0x40003800

080019b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	2214      	movs	r2, #20
{
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	4606      	mov	r6, r0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	2100      	movs	r1, #0
 80019c4:	eb0d 0002 	add.w	r0, sp, r2
 80019c8:	f006 f92c 	bl	8007c24 <memset>
    if(spiHandle->Instance==SPI1)
 80019cc:	6833      	ldr	r3, [r6, #0]
 80019ce:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <HAL_SPI_MspInit+0x10c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d124      	bne.n	8001a1e <HAL_SPI_MspInit+0x66>
    {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <HAL_SPI_MspInit+0x110>)
        GPIO_InitStruct.Pin = W52QXX_SCK_Pin|W52QXX_MISO_Pin|W52QXX_MOSI_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	483d      	ldr	r0, [pc, #244]	; (8001acc <HAL_SPI_MspInit+0x114>)
        __HAL_RCC_SPI1_CLK_ENABLE();
 80019d8:	2100      	movs	r1, #0
 80019da:	9100      	str	r1, [sp, #0]
 80019dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
 80019e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019ea:	9200      	str	r2, [sp, #0]
 80019ec:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	9101      	str	r1, [sp, #4]
 80019f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f2:	f042 0202 	orr.w	r2, r2, #2
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2238      	movs	r2, #56	; 0x38
 8001a04:	2302      	movs	r3, #2
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a06:	2103      	movs	r1, #3
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	e9cd 1308 	strd	r1, r3, [sp, #32]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	a905      	add	r1, sp, #20
 8001a14:	f001 fa0a 	bl	8002e2c <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
    }
}
 8001a18:	b00b      	add	sp, #44	; 0x2c
 8001a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(spiHandle->Instance==SPI2)
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <HAL_SPI_MspInit+0x118>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d1f9      	bne.n	8001a18 <HAL_SPI_MspInit+0x60>
        __HAL_RCC_SPI2_CLK_ENABLE();
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_SPI_MspInit+0x110>)
        HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a26:	482b      	ldr	r0, [pc, #172]	; (8001ad4 <HAL_SPI_MspInit+0x11c>)
        __HAL_RCC_SPI2_CLK_ENABLE();
 8001a28:	2500      	movs	r5, #0
 8001a2a:	9502      	str	r5, [sp, #8]
 8001a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
 8001a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a3a:	9202      	str	r2, [sp, #8]
 8001a3c:	9a02      	ldr	r2, [sp, #8]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	9503      	str	r5, [sp, #12]
 8001a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a42:	f042 0204 	orr.w	r2, r2, #4
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
 8001a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4a:	f002 0204 	and.w	r2, r2, #4
 8001a4e:	9203      	str	r2, [sp, #12]
 8001a50:	9a03      	ldr	r2, [sp, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	9504      	str	r5, [sp, #16]
 8001a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a56:	f042 0202 	orr.w	r2, r2, #2
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a64:	2405      	movs	r4, #5
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	9b04      	ldr	r3, [sp, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	f04f 0902 	mov.w	r9, #2
 8001a6c:	2308      	movs	r3, #8
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a6e:	f04f 0803 	mov.w	r8, #3
        HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a72:	a905      	add	r1, sp, #20
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	e9cd 3905 	strd	r3, r9, [sp, #20]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a78:	e9cd 8408 	strd	r8, r4, [sp, #32]
        GPIO_InitStruct.Pin = LCD_SCL_Pin;
 8001a7c:	f44f 6780 	mov.w	r7, #1024	; 0x400
        HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f001 f9d4 	bl	8002e2c <HAL_GPIO_Init>
        HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <HAL_SPI_MspInit+0x114>)
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a86:	9409      	str	r4, [sp, #36]	; 0x24
        HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a88:	a905      	add	r1, sp, #20
        hdma_spi2_tx.Instance = DMA1_Stream4;
 8001a8a:	4c13      	ldr	r4, [pc, #76]	; (8001ad8 <HAL_SPI_MspInit+0x120>)
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	e9cd 7905 	strd	r7, r9, [sp, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	e9cd 5807 	strd	r5, r8, [sp, #28]
        HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f001 f9ca 	bl	8002e2c <HAL_GPIO_Init>
        hdma_spi2_tx.Instance = DMA1_Stream4;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_SPI_MspInit+0x124>)
        if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a9a:	4620      	mov	r0, r4
        hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001a9c:	e9c4 3500 	strd	r3, r5, [r4]
        hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa0:	2340      	movs	r3, #64	; 0x40
        hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa2:	e9c4 3502 	strd	r3, r5, [r4, #8]
        hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa6:	e9c4 7504 	strd	r7, r5, [r4, #16]
        hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001aaa:	e9c4 5506 	strd	r5, r5, [r4, #24]
        hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aae:	e9c4 5508 	strd	r5, r5, [r4, #32]
        if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ab2:	f000 ffeb 	bl	8002a8c <HAL_DMA_Init>
 8001ab6:	b108      	cbz	r0, 8001abc <HAL_SPI_MspInit+0x104>
            Error_Handler();
 8001ab8:	f7ff fe6e 	bl	8001798 <Error_Handler>
        __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001abc:	64b4      	str	r4, [r6, #72]	; 0x48
 8001abe:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001ac0:	e7aa      	b.n	8001a18 <HAL_SPI_MspInit+0x60>
 8001ac2:	bf00      	nop
 8001ac4:	40013000 	.word	0x40013000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	20000c4c 	.word	0x20000c4c
 8001adc:	40026070 	.word	0x40026070

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
    * Initializes the Global MSP.
    */
void HAL_MspInit(void)
{
 8001ae0:	b082      	sub	sp, #8
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x34>)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	9100      	str	r1, [sp, #0]
 8001ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
 8001af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001af2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001af6:	9200      	str	r2, [sp, #0]
 8001af8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	9101      	str	r1, [sp, #4]
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	9b01      	ldr	r3, [sp, #4]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8001b0e:	b002      	add	sp, #8
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <NMI_Handler>:
{
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler>

08001b1a <HardFault_Handler>:
void HardFault_Handler(void)
{
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler>

08001b1c <MemManage_Handler>:
void MemManage_Handler(void)
{
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler>

08001b1e <BusFault_Handler>:
void BusFault_Handler(void)
{
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler>

08001b20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler>

08001b22 <SVC_Handler>:

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:
void SysTick_Handler(void)
{
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001b28:	f000 bcfc 	b.w	8002524 <HAL_IncTick>

08001b2c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(Key_Stop_Pin);
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f001 ba63 	b.w	8002ff8 <HAL_GPIO_EXTI_IRQHandler>
	...

08001b34 <DMA1_Stream4_IRQHandler>:
    */
void DMA1_Stream4_IRQHandler(void)
{
    /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
    /* USER CODE END DMA1_Stream4_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b34:	4801      	ldr	r0, [pc, #4]	; (8001b3c <DMA1_Stream4_IRQHandler+0x8>)
 8001b36:	f001 b8b9 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001b3a:	bf00      	nop
 8001b3c:	20000c4c 	.word	0x20000c4c

08001b40 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8001b40:	4801      	ldr	r0, [pc, #4]	; (8001b48 <USART1_IRQHandler+0x8>)
 8001b42:	f003 bbb9 	b.w	80052b8 <HAL_UART_IRQHandler>
 8001b46:	bf00      	nop
 8001b48:	20000fe8 	.word	0x20000fe8

08001b4c <TIM8_UP_TIM13_IRQHandler>:

/**
    * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
    */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001b4c:	b508      	push	{r3, lr}
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001b50:	f002 fe24 	bl	800479c <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim13);
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_TIM_IRQHandler(&htim13);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001b5a:	f002 be1f 	b.w	800479c <HAL_TIM_IRQHandler>
 8001b5e:	bf00      	nop
 8001b60:	20000fa0 	.word	0x20000fa0
 8001b64:	20000da8 	.word	0x20000da8

08001b68 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
    * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
    */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001b68:	b508      	push	{r3, lr}
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8001b6a:	4804      	ldr	r0, [pc, #16]	; (8001b7c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001b6c:	f002 fe16 	bl	800479c <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim14);
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_TIM_IRQHandler(&htim14);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8001b76:	f002 be11 	b.w	800479c <HAL_TIM_IRQHandler>
 8001b7a:	bf00      	nop
 8001b7c:	20000fa0 	.word	0x20000fa0
 8001b80:	20000df0 	.word	0x20000df0

08001b84 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
    /* USER CODE BEGIN SDIO_IRQn 0 */

    /* USER CODE END SDIO_IRQn 0 */
    HAL_SD_IRQHandler(&hsd);
 8001b84:	4801      	ldr	r0, [pc, #4]	; (8001b8c <SDIO_IRQHandler+0x8>)
 8001b86:	f002 b97f 	b.w	8003e88 <HAL_SD_IRQHandler>
 8001b8a:	bf00      	nop
 8001b8c:	20000bc8 	.word	0x20000bc8

08001b90 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
    /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

    /* USER CODE END TIM6_DAC_IRQn 0 */
    HAL_TIM_IRQHandler(&htim6);
 8001b90:	4801      	ldr	r0, [pc, #4]	; (8001b98 <TIM6_DAC_IRQHandler+0x8>)
 8001b92:	f002 be03 	b.w	800479c <HAL_TIM_IRQHandler>
 8001b96:	bf00      	nop
 8001b98:	20000f10 	.word	0x20000f10

08001b9c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <TIM7_IRQHandler+0x8>)
 8001b9e:	f002 bdfd 	b.w	800479c <HAL_TIM_IRQHandler>
 8001ba2:	bf00      	nop
 8001ba4:	20000f58 	.word	0x20000f58

08001ba8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
    /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

    /* USER CODE END DMA2_Stream3_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <DMA2_Stream3_IRQHandler+0x8>)
 8001baa:	f001 b87f 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001bae:	bf00      	nop
 8001bb0:	20000b08 	.word	0x20000b08

08001bb4 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
    /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

    /* USER CODE END DMA2_Stream6_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <DMA2_Stream6_IRQHandler+0x8>)
 8001bb6:	f001 b879 	b.w	8002cac <HAL_DMA_IRQHandler>
 8001bba:	bf00      	nop
 8001bbc:	20000b68 	.word	0x20000b68

08001bc0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bc6:	f006 f803 	bl	8007bd0 <__errno>
 8001bca:	2316      	movs	r3, #22
 8001bcc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001bce:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd2:	bd08      	pop	{r3, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bd6:	f005 fffb 	bl	8007bd0 <__errno>
 8001bda:	2316      	movs	r3, #22
 8001bdc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001bde:	e7fe      	b.n	8001bde <_exit+0xa>

08001be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	460d      	mov	r5, r1
 8001be4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	460e      	mov	r6, r1
 8001be8:	1b73      	subs	r3, r6, r5
 8001bea:	429c      	cmp	r4, r3
 8001bec:	dc01      	bgt.n	8001bf2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001bee:	4620      	mov	r0, r4
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001bf2:	f3af 8000 	nop.w
 8001bf6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	e7f5      	b.n	8001be8 <_read+0x8>

08001bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	460d      	mov	r5, r1
 8001c00:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	460e      	mov	r6, r1
 8001c04:	1b73      	subs	r3, r6, r5
 8001c06:	429c      	cmp	r4, r3
 8001c08:	dc01      	bgt.n	8001c0e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001c0e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001c12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	e7f5      	b.n	8001c04 <_write+0x8>

08001c18 <_close>:

int _close(int file)
{
	return -1;
}
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001c24:	2000      	movs	r0, #0
 8001c26:	4770      	bx	lr

08001c28 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c28:	2001      	movs	r0, #1
 8001c2a:	4770      	bx	lr

08001c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	4770      	bx	lr

08001c30 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <_sbrk+0x30>)
 8001c32:	6811      	ldr	r1, [r2, #0]
{
 8001c34:	b510      	push	{r4, lr}
 8001c36:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001c38:	b909      	cbnz	r1, 8001c3e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <_sbrk+0x34>)
 8001c3c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	6810      	ldr	r0, [r2, #0]
 8001c40:	4909      	ldr	r1, [pc, #36]	; (8001c68 <_sbrk+0x38>)
 8001c42:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <_sbrk+0x3c>)
 8001c44:	4403      	add	r3, r0
 8001c46:	1b09      	subs	r1, r1, r4
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	d906      	bls.n	8001c5a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c4c:	f005 ffc0 	bl	8007bd0 <__errno>
 8001c50:	230c      	movs	r3, #12
 8001c52:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c58:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c5a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001c5c:	e7fc      	b.n	8001c58 <_sbrk+0x28>
 8001c5e:	bf00      	nop
 8001c60:	20000d5c 	.word	0x20000d5c
 8001c64:	200076f0 	.word	0x200076f0
 8001c68:	20020000 	.word	0x20020000
 8001c6c:	00000800 	.word	0x00000800

08001c70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <SystemInit+0x10>)
 8001c72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	a804      	add	r0, sp, #16
 8001c8e:	f005 ffc9 	bl	8007c24 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <MX_TIM1_Init+0x58>)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_TIM1_Init+0x5c>)
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	2400      	movs	r4, #0
    htim1.Init.Prescaler = 0;
 8001c98:	e9c0 3400 	strd	r3, r4, [r0]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim1.Init.Period = 65535;
 8001c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	e9c0 3403 	strd	r3, r4, [r0, #12]
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	9303      	str	r3, [sp, #12]
    sConfig.IC1Filter = 0;
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
    sConfig.IC2Filter = 0;
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ca8:	a903      	add	r1, sp, #12
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	e9cd 4401 	strd	r4, r4, [sp, #4]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	e9c0 4405 	strd	r4, r4, [r0, #20]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	6084      	str	r4, [r0, #8]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb6:	9305      	str	r3, [sp, #20]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb8:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001cba:	f002 fecf 	bl	8004a5c <HAL_TIM_Encoder_Init>
 8001cbe:	b108      	cbz	r0, 8001cc4 <MX_TIM1_Init+0x40>
    {
        Error_Handler();
 8001cc0:	f7ff fd6a 	bl	8001798 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_TIM1_Init+0x58>)
 8001cc6:	a901      	add	r1, sp, #4
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ccc:	f003 f90e 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	b108      	cbz	r0, 8001cd6 <MX_TIM1_Init+0x52>
    {
        Error_Handler();
 8001cd2:	f7ff fd61 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 8001cd6:	b00c      	add	sp, #48	; 0x30
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000d60 	.word	0x20000d60
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <MX_TIM4_Init>:
    HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2220      	movs	r2, #32
 8001cec:	a804      	add	r0, sp, #16
 8001cee:	f005 ff99 	bl	8007c24 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_TIM4_Init+0x54>)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_TIM4_Init+0x58>)
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	2400      	movs	r4, #0
    htim4.Init.Prescaler = 0;
 8001cf8:	e9c0 3400 	strd	r3, r4, [r0]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim4.Init.Period = 65535;
 8001cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	e9c0 3403 	strd	r3, r4, [r0, #12]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d04:	2303      	movs	r3, #3
 8001d06:	9303      	str	r3, [sp, #12]
    sConfig.IC1Filter = 0;
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
    sConfig.IC2Filter = 0;
    if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d08:	a903      	add	r1, sp, #12
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d0a:	2301      	movs	r3, #1
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	6084      	str	r4, [r0, #8]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	6184      	str	r4, [r0, #24]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d14:	9305      	str	r3, [sp, #20]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d16:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d18:	f002 fea0 	bl	8004a5c <HAL_TIM_Encoder_Init>
 8001d1c:	b108      	cbz	r0, 8001d22 <MX_TIM4_Init+0x3e>
    {
        Error_Handler();
 8001d1e:	f7ff fd3b 	bl	8001798 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_TIM4_Init+0x54>)
 8001d24:	a901      	add	r1, sp, #4
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d2a:	f003 f8df 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	b108      	cbz	r0, 8001d34 <MX_TIM4_Init+0x50>
    {
        Error_Handler();
 8001d30:	f7ff fd32 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}
 8001d34:	b00c      	add	sp, #48	; 0x30
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	20000e80 	.word	0x20000e80
 8001d3c:	40000800 	.word	0x40000800

08001d40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8001d44:	2100      	movs	r1, #0
 8001d46:	2220      	movs	r2, #32
 8001d48:	a804      	add	r0, sp, #16
 8001d4a:	f005 ff6b 	bl	8007c24 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8001d4e:	4811      	ldr	r0, [pc, #68]	; (8001d94 <MX_TIM5_Init+0x54>)
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_TIM5_Init+0x58>)
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	2400      	movs	r4, #0
    htim5.Init.Prescaler = 0;
 8001d54:	e9c0 3400 	strd	r3, r4, [r0]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim5.Init.Period = 4294967295;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	e9c0 3403 	strd	r3, r4, [r0, #12]
    sConfig.IC1Filter = 0;
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
    sConfig.IC2Filter = 0;
    if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d60:	a903      	add	r1, sp, #12
    sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d62:	2301      	movs	r3, #1
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	e9cd 4401 	strd	r4, r4, [sp, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	6084      	str	r4, [r0, #8]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	6184      	str	r4, [r0, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d6c:	9303      	str	r3, [sp, #12]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	9305      	str	r3, [sp, #20]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d72:	f002 fe73 	bl	8004a5c <HAL_TIM_Encoder_Init>
 8001d76:	b108      	cbz	r0, 8001d7c <MX_TIM5_Init+0x3c>
    {
        Error_Handler();
 8001d78:	f7ff fd0e 	bl	8001798 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM5_Init+0x54>)
 8001d7e:	a901      	add	r1, sp, #4
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d84:	f003 f8b2 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	b108      	cbz	r0, 8001d8e <MX_TIM5_Init+0x4e>
    {
        Error_Handler();
 8001d8a:	f7ff fd05 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */

}
 8001d8e:	b00c      	add	sp, #48	; 0x30
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	bf00      	nop
 8001d94:	20000ec8 	.word	0x20000ec8
 8001d98:	40000c00 	.word	0x40000c00

08001d9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d9c:	b513      	push	{r0, r1, r4, lr}

    /* USER CODE BEGIN TIM6_Init 1 */

    /* USER CODE END TIM6_Init 1 */
    htim6.Instance = TIM6;
    htim6.Init.Prescaler = 168-1;
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <MX_TIM6_Init+0x3c>)
    htim6.Instance = TIM6;
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <MX_TIM6_Init+0x40>)
    htim6.Init.Prescaler = 168-1;
 8001da2:	23a7      	movs	r3, #167	; 0xa7
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	2400      	movs	r4, #0
    htim6.Init.Prescaler = 168-1;
 8001da6:	e9c0 2300 	strd	r2, r3, [r0]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim6.Init.Period = 1000-1;
 8001daa:	f240 33e7 	movw	r3, #999	; 0x3e7
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	e9cd 4400 	strd	r4, r4, [sp]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	6084      	str	r4, [r0, #8]
    htim6.Init.Period = 1000-1;
 8001db4:	60c3      	str	r3, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	6184      	str	r4, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001db8:	f002 fdf8 	bl	80049ac <HAL_TIM_Base_Init>
 8001dbc:	b108      	cbz	r0, 8001dc2 <MX_TIM6_Init+0x26>
    {
        Error_Handler();
 8001dbe:	f7ff fceb 	bl	8001798 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM6_Init+0x40>)
 8001dc4:	4669      	mov	r1, sp
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	e9cd 4400 	strd	r4, r4, [sp]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dca:	f003 f88f 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	b108      	cbz	r0, 8001dd4 <MX_TIM6_Init+0x38>
    {
        Error_Handler();
 8001dd0:	f7ff fce2 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN TIM6_Init 2 */

    /* USER CODE END TIM6_Init 2 */

}
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd10      	pop	{r4, pc}
 8001dd8:	40001000 	.word	0x40001000
 8001ddc:	20000f10 	.word	0x20000f10

08001de0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001de0:	b513      	push	{r0, r1, r4, lr}

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
    htim7.Init.Prescaler = 16800-1;
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <MX_TIM7_Init+0x40>)
    htim7.Instance = TIM7;
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <MX_TIM7_Init+0x44>)
    htim7.Init.Prescaler = 16800-1;
 8001de6:	f244 139f 	movw	r3, #16799	; 0x419f
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	2400      	movs	r4, #0
    htim7.Init.Prescaler = 16800-1;
 8001dec:	e9c0 2300 	strd	r2, r3, [r0]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim7.Init.Period = 10000-1;
 8001df0:	f242 730f 	movw	r3, #9999	; 0x270f
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	e9cd 4400 	strd	r4, r4, [sp]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	6084      	str	r4, [r0, #8]
    htim7.Init.Period = 10000-1;
 8001dfa:	60c3      	str	r3, [r0, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	6184      	str	r4, [r0, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dfe:	f002 fdd5 	bl	80049ac <HAL_TIM_Base_Init>
 8001e02:	b108      	cbz	r0, 8001e08 <MX_TIM7_Init+0x28>
    {
        Error_Handler();
 8001e04:	f7ff fcc8 	bl	8001798 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e08:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_TIM7_Init+0x44>)
 8001e0a:	4669      	mov	r1, sp
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	e9cd 4400 	strd	r4, r4, [sp]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e10:	f003 f86c 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	b108      	cbz	r0, 8001e1a <MX_TIM7_Init+0x3a>
    {
        Error_Handler();
 8001e16:	f7ff fcbf 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd10      	pop	{r4, pc}
 8001e1e:	bf00      	nop
 8001e20:	40001400 	.word	0x40001400
 8001e24:	20000f58 	.word	0x20000f58

08001e28 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2220      	movs	r2, #32
 8001e30:	a804      	add	r0, sp, #16
 8001e32:	f005 fef7 	bl	8007c24 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance = TIM8;
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <MX_TIM8_Init+0x58>)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_TIM8_Init+0x5c>)
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3a:	2400      	movs	r4, #0
    htim8.Init.Prescaler = 0;
 8001e3c:	e9c0 3400 	strd	r3, r4, [r0]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim8.Init.Period = 65535;
 8001e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e44:	e9c0 3403 	strd	r3, r4, [r0, #12]
    htim8.Init.RepetitionCounter = 0;
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	9303      	str	r3, [sp, #12]
    sConfig.IC1Filter = 0;
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
    sConfig.IC2Filter = 0;
    if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e4c:	a903      	add	r1, sp, #12
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e4e:	2301      	movs	r3, #1
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	e9cd 4401 	strd	r4, r4, [sp, #4]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	e9c0 4405 	strd	r4, r4, [r0, #20]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	6084      	str	r4, [r0, #8]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e5a:	9305      	str	r3, [sp, #20]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e5c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e5e:	f002 fdfd 	bl	8004a5c <HAL_TIM_Encoder_Init>
 8001e62:	b108      	cbz	r0, 8001e68 <MX_TIM8_Init+0x40>
    {
        Error_Handler();
 8001e64:	f7ff fc98 	bl	8001798 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM8_Init+0x58>)
 8001e6a:	a901      	add	r1, sp, #4
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e70:	f003 f83c 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	b108      	cbz	r0, 8001e7a <MX_TIM8_Init+0x52>
    {
        Error_Handler();
 8001e76:	f7ff fc8f 	bl	8001798 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */

}
 8001e7a:	b00c      	add	sp, #48	; 0x30
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000fa0 	.word	0x20000fa0
 8001e84:	40010400 	.word	0x40010400

08001e88 <MX_TIM13_Init>:
    /* USER CODE END TIM13_Init 0 */

    /* USER CODE BEGIN TIM13_Init 1 */

    /* USER CODE END TIM13_Init 1 */
    htim13.Instance = TIM13;
 8001e88:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <MX_TIM13_Init+0x2c>)
    htim13.Init.Prescaler = 16800-1;
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <MX_TIM13_Init+0x30>)
{
 8001e8c:	b508      	push	{r3, lr}
    htim13.Init.Prescaler = 16800-1;
 8001e8e:	f244 139f 	movw	r3, #16799	; 0x419f
 8001e92:	e9c0 2300 	strd	r2, r3, [r0]
    htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim13.Init.Period = 5000-1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e9c:	e9c0 3202 	strd	r3, r2, [r0, #8]
    htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	6103      	str	r3, [r0, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea2:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ea4:	f002 fd82 	bl	80049ac <HAL_TIM_Base_Init>
 8001ea8:	b118      	cbz	r0, 8001eb2 <MX_TIM13_Init+0x2a>
    }
    /* USER CODE BEGIN TIM13_Init 2 */

    /* USER CODE END TIM13_Init 2 */

}
 8001eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler();
 8001eae:	f7ff bc73 	b.w	8001798 <Error_Handler>
}
 8001eb2:	bd08      	pop	{r3, pc}
 8001eb4:	20000da8 	.word	0x20000da8
 8001eb8:	40001c00 	.word	0x40001c00

08001ebc <HAL_TIM_Encoder_MspInit>:
    HAL_TIM_MspPostInit(&htim14);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ebc:	b530      	push	{r4, r5, lr}
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	b08f      	sub	sp, #60	; 0x3c

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	2214      	movs	r2, #20
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	a809      	add	r0, sp, #36	; 0x24
 8001ec8:	f005 feac 	bl	8007c24 <memset>
    if(tim_encoderHandle->Instance==TIM1)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	4a4e      	ldr	r2, [pc, #312]	; (8002008 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d122      	bne.n	8001f1a <HAL_TIM_Encoder_MspInit+0x5e>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* TIM1 clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_TIM_Encoder_MspInit+0x150>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	9101      	str	r1, [sp, #4]
 8001eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee4:	f002 0201 	and.w	r2, r2, #1
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	9a01      	ldr	r2, [sp, #4]

        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eec:	9102      	str	r1, [sp, #8]
 8001eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef0:	f042 0210 	orr.w	r2, r2, #16
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	9302      	str	r3, [sp, #8]
        /**TIM1 GPIO Configuration
        PE9         ------> TIM1_CH1
        PE11         ------> TIM1_CH2
        */
        GPIO_InitStruct.Pin = Motor_1_Encoder_A_Pin|Motor_1_Encoder_B_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	f44f 6020 	mov.w	r0, #2560	; 0xa00
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f0a:	2301      	movs	r3, #1
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0c:	4840      	ldr	r0, [pc, #256]	; (8002010 <HAL_TIM_Encoder_MspInit+0x154>)
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f0e:	930d      	str	r3, [sp, #52]	; 0x34
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f10:	a909      	add	r1, sp, #36	; 0x24
        GPIO_InitStruct.Pin = Motor_4_Encoder_A_Pin|Motor_4_Encoder_B_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f000 ff8b 	bl	8002e2c <HAL_GPIO_Init>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
    }
}
 8001f16:	b00f      	add	sp, #60	; 0x3c
 8001f18:	bd30      	pop	{r4, r5, pc}
    else if(tim_encoderHandle->Instance==TIM4)
 8001f1a:	4a3e      	ldr	r2, [pc, #248]	; (8002014 <HAL_TIM_Encoder_MspInit+0x158>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d11e      	bne.n	8001f5e <HAL_TIM_Encoder_MspInit+0xa2>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_TIM_Encoder_MspInit+0x150>)
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	483d      	ldr	r0, [pc, #244]	; (8002018 <HAL_TIM_Encoder_MspInit+0x15c>)
        __HAL_RCC_TIM4_CLK_ENABLE();
 8001f24:	2100      	movs	r1, #0
 8001f26:	9103      	str	r1, [sp, #12]
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2a:	f042 0204 	orr.w	r2, r2, #4
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f32:	f002 0204 	and.w	r2, r2, #4
 8001f36:	9203      	str	r2, [sp, #12]
 8001f38:	9a03      	ldr	r2, [sp, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	9104      	str	r1, [sp, #16]
 8001f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	9b04      	ldr	r3, [sp, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f58:	930d      	str	r3, [sp, #52]	; 0x34
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5a:	a909      	add	r1, sp, #36	; 0x24
 8001f5c:	e7d9      	b.n	8001f12 <HAL_TIM_Encoder_MspInit+0x56>
    else if(tim_encoderHandle->Instance==TIM5)
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_TIM_Encoder_MspInit+0x160>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d11d      	bne.n	8001fa0 <HAL_TIM_Encoder_MspInit+0xe4>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8001f64:	4b29      	ldr	r3, [pc, #164]	; (800200c <HAL_TIM_Encoder_MspInit+0x150>)
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	482e      	ldr	r0, [pc, #184]	; (8002020 <HAL_TIM_Encoder_MspInit+0x164>)
        __HAL_RCC_TIM5_CLK_ENABLE();
 8001f68:	2100      	movs	r1, #0
 8001f6a:	9105      	str	r1, [sp, #20]
 8001f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
 8001f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f76:	f002 0208 	and.w	r2, r2, #8
 8001f7a:	9205      	str	r2, [sp, #20]
 8001f7c:	9a05      	ldr	r2, [sp, #20]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	9106      	str	r1, [sp, #24]
 8001f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	9306      	str	r3, [sp, #24]
 8001f90:	9b06      	ldr	r3, [sp, #24]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2203      	movs	r2, #3
 8001f94:	2302      	movs	r3, #2
 8001f96:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f9a:	930d      	str	r3, [sp, #52]	; 0x34
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	a909      	add	r1, sp, #36	; 0x24
 8001f9e:	e7b8      	b.n	8001f12 <HAL_TIM_Encoder_MspInit+0x56>
    else if(tim_encoderHandle->Instance==TIM8)
 8001fa0:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_TIM_Encoder_MspInit+0x168>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d1b7      	bne.n	8001f16 <HAL_TIM_Encoder_MspInit+0x5a>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_TIM_Encoder_MspInit+0x150>)
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	481f      	ldr	r0, [pc, #124]	; (8002028 <HAL_TIM_Encoder_MspInit+0x16c>)
        __HAL_RCC_TIM8_CLK_ENABLE();
 8001faa:	2400      	movs	r4, #0
 8001fac:	9407      	str	r4, [sp, #28]
 8001fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb0:	f042 0202 	orr.w	r2, r2, #2
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb8:	f002 0202 	and.w	r2, r2, #2
 8001fbc:	9207      	str	r2, [sp, #28]
 8001fbe:	9a07      	ldr	r2, [sp, #28]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	9408      	str	r4, [sp, #32]
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc4:	f042 0204 	orr.w	r2, r2, #4
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	9308      	str	r3, [sp, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2502      	movs	r5, #2
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	9b08      	ldr	r3, [sp, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	a909      	add	r1, sp, #36	; 0x24
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	930d      	str	r3, [sp, #52]	; 0x34
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f000 ff23 	bl	8002e2c <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	202c      	movs	r0, #44	; 0x2c
 8001fec:	f000 fce4 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ff0:	202c      	movs	r0, #44	; 0x2c
 8001ff2:	f000 fd13 	bl	8002a1c <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	202d      	movs	r0, #45	; 0x2d
 8001ffc:	f000 fcdc 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002000:	202d      	movs	r0, #45	; 0x2d
 8002002:	f000 fd0b 	bl	8002a1c <HAL_NVIC_EnableIRQ>
}
 8002006:	e786      	b.n	8001f16 <HAL_TIM_Encoder_MspInit+0x5a>
 8002008:	40010000 	.word	0x40010000
 800200c:	40023800 	.word	0x40023800
 8002010:	40021000 	.word	0x40021000
 8002014:	40000800 	.word	0x40000800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40020000 	.word	0x40020000
 8002024:	40010400 	.word	0x40010400
 8002028:	40020800 	.word	0x40020800

0800202c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800202c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    if(tim_baseHandle->Instance==TIM3)
 800202e:	6803      	ldr	r3, [r0, #0]
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <HAL_TIM_Base_MspInit+0xd8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x28>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
        /* TIM3 clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_TIM_Base_MspInit+0xdc>)
 800203c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203e:	f042 0202 	orr.w	r2, r2, #2
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }
}
 800204e:	b007      	add	sp, #28
 8002050:	f85d fb04 	ldr.w	pc, [sp], #4
    else if(tim_baseHandle->Instance==TIM6)
 8002054:	4a2d      	ldr	r2, [pc, #180]	; (800210c <HAL_TIM_Base_MspInit+0xe0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d115      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x5a>
        __HAL_RCC_TIM6_CLK_ENABLE();
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_TIM_Base_MspInit+0xdc>)
 800205c:	2200      	movs	r2, #0
 800205e:	9202      	str	r2, [sp, #8]
 8002060:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002062:	f041 0110 	orr.w	r1, r1, #16
 8002066:	6419      	str	r1, [r3, #64]	; 0x40
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	9302      	str	r3, [sp, #8]
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002070:	2036      	movs	r0, #54	; 0x36
 8002072:	2102      	movs	r1, #2
        __HAL_RCC_TIM6_CLK_ENABLE();
 8002074:	9b02      	ldr	r3, [sp, #8]
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002076:	f000 fc9f 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800207a:	2036      	movs	r0, #54	; 0x36
}
 800207c:	b007      	add	sp, #28
 800207e:	f85d eb04 	ldr.w	lr, [sp], #4
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002082:	f000 bccb 	b.w	8002a1c <HAL_NVIC_EnableIRQ>
    else if(tim_baseHandle->Instance==TIM7)
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_TIM_Base_MspInit+0xe4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d111      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x84>
        __HAL_RCC_TIM7_CLK_ENABLE();
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_TIM_Base_MspInit+0xdc>)
 800208e:	2200      	movs	r2, #0
 8002090:	9203      	str	r2, [sp, #12]
 8002092:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002094:	f041 0120 	orr.w	r1, r1, #32
 8002098:	6419      	str	r1, [r3, #64]	; 0x40
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	9303      	str	r3, [sp, #12]
        HAL_NVIC_SetPriority(TIM7_IRQn, 15, 0);
 80020a2:	2037      	movs	r0, #55	; 0x37
 80020a4:	210f      	movs	r1, #15
        __HAL_RCC_TIM7_CLK_ENABLE();
 80020a6:	9b03      	ldr	r3, [sp, #12]
        HAL_NVIC_SetPriority(TIM7_IRQn, 15, 0);
 80020a8:	f000 fc86 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020ac:	2037      	movs	r0, #55	; 0x37
 80020ae:	e7e5      	b.n	800207c <HAL_TIM_Base_MspInit+0x50>
    else if(tim_baseHandle->Instance==TIM13)
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_TIM_Base_MspInit+0xe8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d111      	bne.n	80020da <HAL_TIM_Base_MspInit+0xae>
        __HAL_RCC_TIM13_CLK_ENABLE();
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_TIM_Base_MspInit+0xdc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	9204      	str	r2, [sp, #16]
 80020bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020be:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020c2:	6419      	str	r1, [r3, #64]	; 0x40
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	9304      	str	r3, [sp, #16]
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 80020cc:	202c      	movs	r0, #44	; 0x2c
 80020ce:	2102      	movs	r1, #2
        __HAL_RCC_TIM13_CLK_ENABLE();
 80020d0:	9b04      	ldr	r3, [sp, #16]
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 80020d2:	f000 fc71 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020d6:	202c      	movs	r0, #44	; 0x2c
 80020d8:	e7d0      	b.n	800207c <HAL_TIM_Base_MspInit+0x50>
    else if(tim_baseHandle->Instance==TIM14)
 80020da:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_TIM_Base_MspInit+0xec>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d1b6      	bne.n	800204e <HAL_TIM_Base_MspInit+0x22>
        __HAL_RCC_TIM14_CLK_ENABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_TIM_Base_MspInit+0xdc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	9205      	str	r2, [sp, #20]
 80020e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020e8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020ec:	6419      	str	r1, [r3, #64]	; 0x40
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	9305      	str	r3, [sp, #20]
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 80020f6:	202d      	movs	r0, #45	; 0x2d
 80020f8:	2102      	movs	r1, #2
        __HAL_RCC_TIM14_CLK_ENABLE();
 80020fa:	9b05      	ldr	r3, [sp, #20]
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 80020fc:	f000 fc5c 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002100:	202d      	movs	r0, #45	; 0x2d
 8002102:	e7bb      	b.n	800207c <HAL_TIM_Base_MspInit+0x50>
 8002104:	40000400 	.word	0x40000400
 8002108:	40023800 	.word	0x40023800
 800210c:	40001000 	.word	0x40001000
 8002110:	40001400 	.word	0x40001400
 8002114:	40001c00 	.word	0x40001c00
 8002118:	40002000 	.word	0x40002000

0800211c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800211c:	b530      	push	{r4, r5, lr}
 800211e:	4604      	mov	r4, r0
 8002120:	b089      	sub	sp, #36	; 0x24

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	2214      	movs	r2, #20
 8002124:	2100      	movs	r1, #0
 8002126:	a803      	add	r0, sp, #12
 8002128:	f005 fd7c 	bl	8007c24 <memset>
    if(timHandle->Instance==TIM3)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_TIM_MspPostInit+0xa0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d12a      	bne.n	800218a <HAL_TIM_MspPostInit+0x6e>
    {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_TIM_MspPostInit+0xa4>)
        GPIO_InitStruct.Pin = Motor_1_PWM_Pin|Motor_2_PWM_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	4823      	ldr	r0, [pc, #140]	; (80021c4 <HAL_TIM_MspPostInit+0xa8>)
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	2500      	movs	r5, #0
 800213a:	9500      	str	r5, [sp, #0]
 800213c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	f002 0201 	and.w	r2, r2, #1
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	9501      	str	r5, [sp, #4]
 8002150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002152:	f042 0202 	orr.w	r2, r2, #2
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	9301      	str	r3, [sp, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2402      	movs	r4, #2
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002164:	9407      	str	r4, [sp, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	23c0      	movs	r3, #192	; 0xc0
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	a903      	add	r1, sp, #12
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	e9cd 3403 	strd	r3, r4, [sp, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f000 fe5d 	bl	8002e2c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = Motor_3_PWM_Pin|Motor_4_PWM_Pin;
 8002172:	2303      	movs	r3, #3
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	e9cd 3403 	strd	r3, r4, [sp, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	e9cd 5505 	strd	r5, r5, [sp, #20]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	4812      	ldr	r0, [pc, #72]	; (80021c8 <HAL_TIM_MspPostInit+0xac>)
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800217e:	9407      	str	r4, [sp, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	a903      	add	r1, sp, #12
        GPIO_InitStruct.Pin = LED1_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
        HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002182:	f000 fe53 	bl	8002e2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
    }

}
 8002186:	b009      	add	sp, #36	; 0x24
 8002188:	bd30      	pop	{r4, r5, pc}
    else if(timHandle->Instance==TIM14)
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_TIM_MspPostInit+0xb0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d1fa      	bne.n	8002186 <HAL_TIM_MspPostInit+0x6a>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_MspPostInit+0xa4>)
        HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002196:	480e      	ldr	r0, [pc, #56]	; (80021d0 <HAL_TIM_MspPostInit+0xb4>)
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8002198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ae:	2302      	movs	r3, #2
 80021b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
        GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80021b4:	2309      	movs	r3, #9
 80021b6:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80021b8:	a903      	add	r1, sp, #12
 80021ba:	e7e2      	b.n	8002182 <HAL_TIM_MspPostInit+0x66>
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40002000 	.word	0x40002000
 80021d0:	40021400 	.word	0x40021400

080021d4 <MX_TIM3_Init>:
{
 80021d4:	b510      	push	{r4, lr}
 80021d6:	b08e      	sub	sp, #56	; 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d8:	2210      	movs	r2, #16
 80021da:	2100      	movs	r1, #0
 80021dc:	a803      	add	r0, sp, #12
 80021de:	f005 fd21 	bl	8007c24 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e2:	2400      	movs	r4, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 80021e4:	221c      	movs	r2, #28
 80021e6:	4621      	mov	r1, r4
 80021e8:	eb0d 0002 	add.w	r0, sp, r2
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80021f0:	f005 fd18 	bl	8007c24 <memset>
    htim3.Instance = TIM3;
 80021f4:	4829      	ldr	r0, [pc, #164]	; (800229c <MX_TIM3_Init+0xc8>)
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <MX_TIM3_Init+0xcc>)
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	6084      	str	r4, [r0, #8]
    htim3.Init.Prescaler = 0;
 80021fa:	e9c0 3400 	strd	r3, r4, [r0]
    htim3.Init.Period = 16800-1;
 80021fe:	f244 139f 	movw	r3, #16799	; 0x419f
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	e9c0 3403 	strd	r3, r4, [r0, #12]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	6184      	str	r4, [r0, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002208:	f002 fbd0 	bl	80049ac <HAL_TIM_Base_Init>
 800220c:	b108      	cbz	r0, 8002212 <MX_TIM3_Init+0x3e>
        Error_Handler();
 800220e:	f7ff fac3 	bl	8001798 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002216:	4821      	ldr	r0, [pc, #132]	; (800229c <MX_TIM3_Init+0xc8>)
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002218:	9303      	str	r3, [sp, #12]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221a:	a903      	add	r1, sp, #12
 800221c:	f002 fd10 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 8002220:	b108      	cbz	r0, 8002226 <MX_TIM3_Init+0x52>
        Error_Handler();
 8002222:	f7ff fab9 	bl	8001798 <Error_Handler>
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002226:	481d      	ldr	r0, [pc, #116]	; (800229c <MX_TIM3_Init+0xc8>)
 8002228:	f002 fbec 	bl	8004a04 <HAL_TIM_PWM_Init>
 800222c:	b108      	cbz	r0, 8002232 <MX_TIM3_Init+0x5e>
        Error_Handler();
 800222e:	f7ff fab3 	bl	8001798 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2400      	movs	r4, #0
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	4819      	ldr	r0, [pc, #100]	; (800229c <MX_TIM3_Init+0xc8>)
 8002236:	a901      	add	r1, sp, #4
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002238:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223c:	f002 fe56 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	b108      	cbz	r0, 8002246 <MX_TIM3_Init+0x72>
        Error_Handler();
 8002242:	f7ff faa9 	bl	8001798 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002246:	2360      	movs	r3, #96	; 0x60
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002248:	4814      	ldr	r0, [pc, #80]	; (800229c <MX_TIM3_Init+0xc8>)
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224a:	9409      	str	r4, [sp, #36]	; 0x24
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224c:	2200      	movs	r2, #0
 800224e:	a907      	add	r1, sp, #28
    sConfigOC.Pulse = 0;
 8002250:	e9cd 3407 	strd	r3, r4, [sp, #28]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002254:	940b      	str	r4, [sp, #44]	; 0x2c
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002256:	f002 fc8d 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 800225a:	b108      	cbz	r0, 8002260 <MX_TIM3_Init+0x8c>
        Error_Handler();
 800225c:	f7ff fa9c 	bl	8001798 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002260:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_TIM3_Init+0xc8>)
 8002262:	2204      	movs	r2, #4
 8002264:	a907      	add	r1, sp, #28
 8002266:	f002 fc85 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 800226a:	b108      	cbz	r0, 8002270 <MX_TIM3_Init+0x9c>
        Error_Handler();
 800226c:	f7ff fa94 	bl	8001798 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002270:	480a      	ldr	r0, [pc, #40]	; (800229c <MX_TIM3_Init+0xc8>)
 8002272:	2208      	movs	r2, #8
 8002274:	a907      	add	r1, sp, #28
 8002276:	f002 fc7d 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 800227a:	b108      	cbz	r0, 8002280 <MX_TIM3_Init+0xac>
        Error_Handler();
 800227c:	f7ff fa8c 	bl	8001798 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <MX_TIM3_Init+0xc8>)
 8002282:	220c      	movs	r2, #12
 8002284:	a907      	add	r1, sp, #28
 8002286:	f002 fc75 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 800228a:	b108      	cbz	r0, 8002290 <MX_TIM3_Init+0xbc>
        Error_Handler();
 800228c:	f7ff fa84 	bl	8001798 <Error_Handler>
    HAL_TIM_MspPostInit(&htim3);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <MX_TIM3_Init+0xc8>)
 8002292:	f7ff ff43 	bl	800211c <HAL_TIM_MspPostInit>
}
 8002296:	b00e      	add	sp, #56	; 0x38
 8002298:	bd10      	pop	{r4, pc}
 800229a:	bf00      	nop
 800229c:	20000e38 	.word	0x20000e38
 80022a0:	40000400 	.word	0x40000400

080022a4 <MX_TIM14_Init>:
{
 80022a4:	b500      	push	{lr}
 80022a6:	b089      	sub	sp, #36	; 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 80022a8:	221c      	movs	r2, #28
 80022aa:	2100      	movs	r1, #0
 80022ac:	a801      	add	r0, sp, #4
 80022ae:	f005 fcb9 	bl	8007c24 <memset>
    htim14.Instance = TIM14;
 80022b2:	4815      	ldr	r0, [pc, #84]	; (8002308 <MX_TIM14_Init+0x64>)
    htim14.Init.Prescaler = 42-1;
 80022b4:	4915      	ldr	r1, [pc, #84]	; (800230c <MX_TIM14_Init+0x68>)
 80022b6:	2329      	movs	r3, #41	; 0x29
 80022b8:	e9c0 1300 	strd	r1, r3, [r0]
    htim14.Init.Period = 1000-1;
 80022bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c0:	2300      	movs	r3, #0
 80022c2:	e9c0 3202 	strd	r3, r2, [r0, #8]
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c6:	6103      	str	r3, [r0, #16]
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80022ca:	f002 fb6f 	bl	80049ac <HAL_TIM_Base_Init>
 80022ce:	b108      	cbz	r0, 80022d4 <MX_TIM14_Init+0x30>
        Error_Handler();
 80022d0:	f7ff fa62 	bl	8001798 <Error_Handler>
    if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <MX_TIM14_Init+0x64>)
 80022d6:	f002 fb95 	bl	8004a04 <HAL_TIM_PWM_Init>
 80022da:	b108      	cbz	r0, 80022e0 <MX_TIM14_Init+0x3c>
        Error_Handler();
 80022dc:	f7ff fa5c 	bl	8001798 <Error_Handler>
    sConfigOC.Pulse = 50;
 80022e0:	2260      	movs	r2, #96	; 0x60
 80022e2:	2332      	movs	r3, #50	; 0x32
 80022e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <MX_TIM14_Init+0x64>)
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ea:	2200      	movs	r2, #0
    if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ec:	a901      	add	r1, sp, #4
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ee:	9203      	str	r2, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f0:	9205      	str	r2, [sp, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f2:	f002 fc3f 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	b108      	cbz	r0, 80022fc <MX_TIM14_Init+0x58>
        Error_Handler();
 80022f8:	f7ff fa4e 	bl	8001798 <Error_Handler>
    HAL_TIM_MspPostInit(&htim14);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <MX_TIM14_Init+0x64>)
 80022fe:	f7ff ff0d 	bl	800211c <HAL_TIM_MspPostInit>
}
 8002302:	b009      	add	sp, #36	; 0x24
 8002304:	f85d fb04 	ldr.w	pc, [sp], #4
 8002308:	20000df0 	.word	0x20000df0
 800230c:	40002000 	.word	0x40002000

08002310 <MX_USART1_UART_Init>:
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <MX_USART1_UART_Init+0x30>)
    huart1.Init.BaudRate = 115200;
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <MX_USART1_UART_Init+0x34>)
{
 8002314:	b508      	push	{r3, lr}
    huart1.Init.BaudRate = 115200;
 8002316:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800231a:	e9c0 2300 	strd	r2, r3, [r0]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800231e:	2300      	movs	r3, #0
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002320:	220c      	movs	r2, #12
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002322:	e9c0 3302 	strd	r3, r3, [r0, #8]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	e9c0 2305 	strd	r2, r3, [r0, #20]
    huart1.Init.Parity = UART_PARITY_NONE;
 800232a:	6103      	str	r3, [r0, #16]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800232e:	f002 fedf 	bl	80050f0 <HAL_UART_Init>
 8002332:	b118      	cbz	r0, 800233c <MX_USART1_UART_Init+0x2c>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8002334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler();
 8002338:	f7ff ba2e 	b.w	8001798 <Error_Handler>
}
 800233c:	bd08      	pop	{r3, pc}
 800233e:	bf00      	nop
 8002340:	20000fe8 	.word	0x20000fe8
 8002344:	40011000 	.word	0x40011000

08002348 <MX_USART2_UART_Init>:
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <MX_USART2_UART_Init+0x30>)
    huart2.Init.BaudRate = 115200;
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <MX_USART2_UART_Init+0x34>)
{
 800234c:	b508      	push	{r3, lr}
    huart2.Init.BaudRate = 115200;
 800234e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002352:	e9c0 2300 	strd	r2, r3, [r0]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002356:	2300      	movs	r3, #0
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002358:	220c      	movs	r2, #12
    huart2.Init.StopBits = UART_STOPBITS_1;
 800235a:	e9c0 3302 	strd	r3, r3, [r0, #8]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	e9c0 2305 	strd	r2, r3, [r0, #20]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002362:	6103      	str	r3, [r0, #16]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002366:	f002 fec3 	bl	80050f0 <HAL_UART_Init>
 800236a:	b118      	cbz	r0, 8002374 <MX_USART2_UART_Init+0x2c>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 800236c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler();
 8002370:	f7ff ba12 	b.w	8001798 <Error_Handler>
}
 8002374:	bd08      	pop	{r3, pc}
 8002376:	bf00      	nop
 8002378:	2000102c 	.word	0x2000102c
 800237c:	40004400 	.word	0x40004400

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b510      	push	{r4, lr}

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	2214      	movs	r2, #20
{
 8002384:	b08a      	sub	sp, #40	; 0x28
 8002386:	4604      	mov	r4, r0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	2100      	movs	r1, #0
 800238a:	eb0d 0002 	add.w	r0, sp, r2
 800238e:	f005 fc49 	bl	8007c24 <memset>
    if(uartHandle->Instance==USART1)
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_UART_MspInit+0xc4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12d      	bne.n	80023f6 <HAL_UART_MspInit+0x76>
    {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_UART_MspInit+0xc8>)
 800239c:	2400      	movs	r4, #0
 800239e:	9401      	str	r4, [sp, #4]
 80023a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023a2:	f042 0210 	orr.w	r2, r2, #16
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
 80023a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023aa:	f002 0210 	and.w	r2, r2, #16
 80023ae:	9201      	str	r2, [sp, #4]
 80023b0:	9a01      	ldr	r2, [sp, #4]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	9402      	str	r4, [sp, #8]
 80023b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	9b02      	ldr	r3, [sp, #8]
        /**USART1 GPIO Configuration
        PA9         ------> USART1_TX
        PA10         ------> USART1_RX
        */
        GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80023ca:	2302      	movs	r3, #2
 80023cc:	e9cd 0305 	strd	r0, r3, [sp, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d0:	f04f 0c03 	mov.w	ip, #3
 80023d4:	2307      	movs	r3, #7
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	481d      	ldr	r0, [pc, #116]	; (800244c <HAL_UART_MspInit+0xcc>)
 80023d8:	a905      	add	r1, sp, #20
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	e9cd c308 	strd	ip, r3, [sp, #32]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f000 fd25 	bl	8002e2c <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80023e2:	2025      	movs	r0, #37	; 0x25
 80023e4:	4622      	mov	r2, r4
 80023e6:	2101      	movs	r1, #1
 80023e8:	f000 fae6 	bl	80029b8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ec:	2025      	movs	r0, #37	; 0x25
 80023ee:	f000 fb15 	bl	8002a1c <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
    }
}
 80023f2:	b00a      	add	sp, #40	; 0x28
 80023f4:	bd10      	pop	{r4, pc}
    else if(uartHandle->Instance==USART2)
 80023f6:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_UART_MspInit+0xd0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d1fa      	bne.n	80023f2 <HAL_UART_MspInit+0x72>
        __HAL_RCC_USART2_CLK_ENABLE();
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_UART_MspInit+0xc8>)
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	4813      	ldr	r0, [pc, #76]	; (800244c <HAL_UART_MspInit+0xcc>)
        __HAL_RCC_USART2_CLK_ENABLE();
 8002400:	2100      	movs	r1, #0
 8002402:	9103      	str	r1, [sp, #12]
 8002404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002406:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
 800240c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002412:	9203      	str	r2, [sp, #12]
 8002414:	9a03      	ldr	r2, [sp, #12]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	9104      	str	r1, [sp, #16]
 8002418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	9304      	str	r3, [sp, #16]
 8002428:	9b04      	ldr	r3, [sp, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	220c      	movs	r2, #12
 800242c:	2302      	movs	r3, #2
 800242e:	e9cd 2305 	strd	r2, r3, [sp, #20]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002432:	2103      	movs	r1, #3
 8002434:	2307      	movs	r3, #7
 8002436:	e9cd 1308 	strd	r1, r3, [sp, #32]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	a905      	add	r1, sp, #20
 800243c:	f000 fcf6 	bl	8002e2c <HAL_GPIO_Init>
}
 8002440:	e7d7      	b.n	80023f2 <HAL_UART_MspInit+0x72>
 8002442:	bf00      	nop
 8002444:	40011000 	.word	0x40011000
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000
 8002450:	40004400 	.word	0x40004400

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002458:	480d      	ldr	r0, [pc, #52]	; (8002490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800245a:	490e      	ldr	r1, [pc, #56]	; (8002494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002470:	4c0b      	ldr	r4, [pc, #44]	; (80024a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247e:	f7ff fbf7 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f005 fbab 	bl	8007bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7ff f865 	bl	8001554 <main>
  bx  lr    
 800248a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800248c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8002498:	0801046c 	.word	0x0801046c
  ldr r2, =_sbss
 800249c:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 80024a0:	200076ec 	.word	0x200076ec

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>
	...

080024a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_InitTick+0x3c>)
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_InitTick+0x40>)
{
 80024ae:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b0:	7818      	ldrb	r0, [r3, #0]
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	fbb3 f3f0 	udiv	r3, r3, r0
 80024ba:	6810      	ldr	r0, [r2, #0]
 80024bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80024c0:	f000 faba 	bl	8002a38 <HAL_SYSTICK_Config>
 80024c4:	4604      	mov	r4, r0
 80024c6:	b958      	cbnz	r0, 80024e0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c8:	2d0f      	cmp	r5, #15
 80024ca:	d809      	bhi.n	80024e0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	4602      	mov	r2, r0
 80024ce:	4629      	mov	r1, r5
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 fa70 	bl	80029b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_InitTick+0x44>)
 80024da:	4620      	mov	r0, r4
 80024dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80024de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e7fc      	b.n	80024de <HAL_InitTick+0x36>
 80024e4:	20000008 	.word	0x20000008
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	20000010 	.word	0x20000010

080024f0 <HAL_Init>:
{
 80024f0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_Init+0x30>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002502:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f000 fa41 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff ffc8 	bl	80024a8 <HAL_InitTick>
  HAL_MspInit();
 8002518:	f7ff fae2 	bl	8001ae0 <HAL_MspInit>
}
 800251c:	2000      	movs	r0, #0
 800251e:	bd08      	pop	{r3, pc}
 8002520:	40023c00 	.word	0x40023c00

08002524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002524:	4a03      	ldr	r2, [pc, #12]	; (8002534 <HAL_IncTick+0x10>)
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <HAL_IncTick+0x14>)
 8002528:	6811      	ldr	r1, [r2, #0]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	440b      	add	r3, r1
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20001070 	.word	0x20001070
 8002538:	2000000c 	.word	0x2000000c

0800253c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800253c:	4b01      	ldr	r3, [pc, #4]	; (8002544 <HAL_GetTick+0x8>)
 800253e:	6818      	ldr	r0, [r3, #0]
}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20001070 	.word	0x20001070

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff fff6 	bl	800253c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002550:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	bf1c      	itt	ne
 8002554:	4b05      	ldrne	r3, [pc, #20]	; (800256c <HAL_Delay+0x24>)
 8002556:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002558:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800255a:	bf18      	it	ne
 800255c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255e:	f7ff ffed 	bl	800253c <HAL_GetTick>
 8002562:	1b43      	subs	r3, r0, r5
 8002564:	42a3      	cmp	r3, r4
 8002566:	d3fa      	bcc.n	800255e <HAL_Delay+0x16>
  {
  }
}
 8002568:	bd38      	pop	{r3, r4, r5, pc}
 800256a:	bf00      	nop
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002570:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002572:	4604      	mov	r4, r0
 8002574:	2800      	cmp	r0, #0
 8002576:	f000 809b 	beq.w	80026b0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800257a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800257c:	b925      	cbnz	r5, 8002588 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257e:	f7fe fd6f 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002582:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002584:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800258a:	06db      	lsls	r3, r3, #27
 800258c:	f100 808e 	bmi.w	80026ac <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002592:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002596:	f023 0302 	bic.w	r3, r3, #2
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025a0:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_ADC_Init+0x144>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80025a8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	6861      	ldr	r1, [r4, #4]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025b2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025b4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025c6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025c8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ca:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025ce:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025d6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025d8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e6:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_ADC_Init+0x148>)
 80025e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025ea:	428a      	cmp	r2, r1
 80025ec:	d052      	beq.n	8002694 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80025f4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	f022 0202 	bic.w	r2, r2, #2
 8002612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	7e21      	ldrb	r1, [r4, #24]
 8002618:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800261c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800261e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002622:	2a00      	cmp	r2, #0
 8002624:	d03e      	beq.n	80026a4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002626:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002628:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800262a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	3901      	subs	r1, #1
 800263c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002640:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002644:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264e:	3901      	subs	r1, #1
 8002650:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800265c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002664:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002668:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800266c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002674:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002676:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002678:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800267c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800267e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002692:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800269a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a2:	e7b2      	b.n	800260a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026aa:	e7c9      	b.n	8002640 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7ed      	b.n	800268c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
 80026b2:	e7ee      	b.n	8002692 <HAL_ADC_Init+0x122>
 80026b4:	40012300 	.word	0x40012300
 80026b8:	0f000001 	.word	0x0f000001

080026bc <HAL_ADC_Start>:
{
 80026bc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t counter = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80026c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d06c      	beq.n	80027a4 <HAL_ADC_Start+0xe8>
 80026ca:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026cc:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 80026ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026d2:	6893      	ldr	r3, [r2, #8]
 80026d4:	07d9      	lsls	r1, r3, #31
 80026d6:	d50c      	bpl.n	80026f2 <HAL_ADC_Start+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026d8:	6893      	ldr	r3, [r2, #8]
 80026da:	f013 0301 	ands.w	r3, r3, #1
 80026de:	d11a      	bne.n	8002716 <HAL_ADC_Start+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80026e2:	f042 0210 	orr.w	r2, r2, #16
 80026e6:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	6442      	str	r2, [r0, #68]	; 0x44
 80026f0:	e056      	b.n	80027a0 <HAL_ADC_Start+0xe4>
    __HAL_ADC_ENABLE(hadc);
 80026f2:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f4:	492d      	ldr	r1, [pc, #180]	; (80027ac <HAL_ADC_Start+0xf0>)
    __HAL_ADC_ENABLE(hadc);
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_ADC_Start+0xf4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	fbb3 f3f1 	udiv	r3, r3, r1
 8002704:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8002708:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0e3      	beq.n	80026d8 <HAL_ADC_Start+0x1c>
      counter--;
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	e7f8      	b.n	8002708 <HAL_ADC_Start+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 8002716:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002718:	4c26      	ldr	r4, [pc, #152]	; (80027b4 <HAL_ADC_Start+0xf8>)
 800271a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002728:	6853      	ldr	r3, [r2, #4]
 800272a:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800272c:	bf41      	itttt	mi
 800272e:	6c03      	ldrmi	r3, [r0, #64]	; 0x40
 8002730:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8002734:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8002738:	6403      	strmi	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800273c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002740:	bf1c      	itt	ne
 8002742:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8002744:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002748:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800274a:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800274e:	2300      	movs	r3, #0
 8002750:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002754:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002756:	4918      	ldr	r1, [pc, #96]	; (80027b8 <HAL_ADC_Start+0xfc>)
 8002758:	6848      	ldr	r0, [r1, #4]
 800275a:	f010 001f 	ands.w	r0, r0, #31
 800275e:	d119      	bne.n	8002794 <HAL_ADC_Start+0xd8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002760:	42a2      	cmp	r2, r4
 8002762:	d006      	beq.n	8002772 <HAL_ADC_Start+0xb6>
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_ADC_Start+0x100>)
 8002766:	429a      	cmp	r2, r3
 8002768:	d10d      	bne.n	8002786 <HAL_ADC_Start+0xca>
 800276a:	684b      	ldr	r3, [r1, #4]
 800276c:	f013 0f1f 	tst.w	r3, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002770:	d107      	bne.n	8002782 <HAL_ADC_Start+0xc6>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002772:	6890      	ldr	r0, [r2, #8]
 8002774:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002778:	d116      	bne.n	80027a8 <HAL_ADC_Start+0xec>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800277a:	6893      	ldr	r3, [r2, #8]
 800277c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002780:	6093      	str	r3, [r2, #8]
}
 8002782:	b002      	add	sp, #8
 8002784:	bd10      	pop	{r4, pc}
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_ADC_Start+0x104>)
 8002788:	429a      	cmp	r2, r3
 800278a:	d1fa      	bne.n	8002782 <HAL_ADC_Start+0xc6>
 800278c:	684b      	ldr	r3, [r1, #4]
 800278e:	f013 0f10 	tst.w	r3, #16
 8002792:	e7ed      	b.n	8002770 <HAL_ADC_Start+0xb4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002794:	42a2      	cmp	r2, r4
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_Start+0xec>
 8002798:	6890      	ldr	r0, [r2, #8]
 800279a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800279e:	d0ec      	beq.n	800277a <HAL_ADC_Start+0xbe>
  return HAL_OK;
 80027a0:	4618      	mov	r0, r3
 80027a2:	e7ee      	b.n	8002782 <HAL_ADC_Start+0xc6>
  __HAL_LOCK(hadc);
 80027a4:	2002      	movs	r0, #2
 80027a6:	e7ec      	b.n	8002782 <HAL_ADC_Start+0xc6>
  return HAL_OK;
 80027a8:	2000      	movs	r0, #0
 80027aa:	e7ea      	b.n	8002782 <HAL_ADC_Start+0xc6>
 80027ac:	000f4240 	.word	0x000f4240
 80027b0:	20000008 	.word	0x20000008
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40012300 	.word	0x40012300
 80027bc:	40012100 	.word	0x40012100
 80027c0:	40012200 	.word	0x40012200

080027c4 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027c4:	6803      	ldr	r3, [r0, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	0552      	lsls	r2, r2, #21
{
 80027ca:	b570      	push	{r4, r5, r6, lr}
 80027cc:	4604      	mov	r4, r0
 80027ce:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027d0:	d50b      	bpl.n	80027ea <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027d2:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027d4:	05de      	lsls	r6, r3, #23
 80027d6:	d508      	bpl.n	80027ea <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027da:	f043 0320 	orr.w	r3, r3, #32
 80027de:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80027e0:	2300      	movs	r3, #0
 80027e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
}
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80027ea:	f7ff fea7 	bl	800253c <HAL_GetTick>
 80027ee:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	0791      	lsls	r1, r2, #30
 80027f6:	d50c      	bpl.n	8002812 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027f8:	f06f 0212 	mvn.w	r2, #18
 80027fc:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800280c:	d017      	beq.n	800283e <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 800280e:	2000      	movs	r0, #0
 8002810:	e7ea      	b.n	80027e8 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8002812:	1c68      	adds	r0, r5, #1
 8002814:	d0ed      	beq.n	80027f2 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002816:	b965      	cbnz	r5, 8002832 <HAL_ADC_PollForConversion+0x6e>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f013 0302 	ands.w	r3, r3, #2
 8002820:	d1e6      	bne.n	80027f0 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002822:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8002824:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002828:	f042 0204 	orr.w	r2, r2, #4
 800282c:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 800282e:	2003      	movs	r0, #3
 8002830:	e7da      	b.n	80027e8 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002832:	f7ff fe83 	bl	800253c <HAL_GetTick>
 8002836:	1b80      	subs	r0, r0, r6
 8002838:	42a8      	cmp	r0, r5
 800283a:	d8ed      	bhi.n	8002818 <HAL_ADC_PollForConversion+0x54>
 800283c:	e7d8      	b.n	80027f0 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283e:	7e20      	ldrb	r0, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002840:	2800      	cmp	r0, #0
 8002842:	d1e4      	bne.n	800280e <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002846:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800284a:	d002      	beq.n	8002852 <HAL_ADC_PollForConversion+0x8e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800284c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800284e:	055a      	lsls	r2, r3, #21
 8002850:	d4dd      	bmi.n	800280e <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002858:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800285a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800285c:	04db      	lsls	r3, r3, #19
 800285e:	d4d6      	bmi.n	800280e <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6423      	str	r3, [r4, #64]	; 0x40
 8002868:	e7be      	b.n	80027e8 <HAL_ADC_PollForConversion+0x24>

0800286a <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800286a:	6803      	ldr	r3, [r0, #0]
 800286c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800286e:	4770      	bx	lr

08002870 <HAL_ADC_ConfigChannel>:
{
 8002870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002876:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d066      	beq.n	800294c <HAL_ADC_ConfigChannel+0xdc>
 800287e:	2301      	movs	r3, #1
 8002880:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002884:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002886:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002888:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800288a:	2d09      	cmp	r5, #9
 800288c:	b2ac      	uxth	r4, r5
 800288e:	d931      	bls.n	80028f4 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002890:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002894:	68df      	ldr	r7, [r3, #12]
 8002896:	3a1e      	subs	r2, #30
 8002898:	f04f 0c07 	mov.w	ip, #7
 800289c:	fa0c fc02 	lsl.w	ip, ip, r2
 80028a0:	ea27 070c 	bic.w	r7, r7, ip
 80028a4:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028a6:	68df      	ldr	r7, [r3, #12]
 80028a8:	fa06 f202 	lsl.w	r2, r6, r2
 80028ac:	433a      	orrs	r2, r7
 80028ae:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80028b0:	6849      	ldr	r1, [r1, #4]
 80028b2:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028b4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 80028b8:	d82c      	bhi.n	8002914 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028bc:	3a05      	subs	r2, #5
 80028be:	261f      	movs	r6, #31
 80028c0:	4096      	lsls	r6, r2
 80028c2:	ea21 0106 	bic.w	r1, r1, r6
 80028c6:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ca:	fa04 f202 	lsl.w	r2, r4, r2
 80028ce:	430a      	orrs	r2, r1
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <HAL_ADC_ConfigChannel+0x114>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d107      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x78>
 80028d8:	2d12      	cmp	r5, #18
 80028da:	d139      	bne.n	8002950 <HAL_ADC_ConfigChannel+0xe0>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028dc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80028e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 80028e8:	2300      	movs	r3, #0
 80028ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80028ee:	4618      	mov	r0, r3
}
 80028f0:	b003      	add	sp, #12
 80028f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028f4:	691f      	ldr	r7, [r3, #16]
 80028f6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80028fa:	f04f 0c07 	mov.w	ip, #7
 80028fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8002902:	ea27 070c 	bic.w	r7, r7, ip
 8002906:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002908:	691f      	ldr	r7, [r3, #16]
 800290a:	fa06 f202 	lsl.w	r2, r6, r2
 800290e:	433a      	orrs	r2, r7
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	e7cd      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8002914:	290c      	cmp	r1, #12
 8002916:	f04f 011f 	mov.w	r1, #31
 800291a:	d80b      	bhi.n	8002934 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800291c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800291e:	3a23      	subs	r2, #35	; 0x23
 8002920:	4091      	lsls	r1, r2
 8002922:	ea26 0101 	bic.w	r1, r6, r1
 8002926:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002928:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292a:	fa04 f202 	lsl.w	r2, r4, r2
 800292e:	430a      	orrs	r2, r1
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
 8002932:	e7ce      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002934:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002936:	3a41      	subs	r2, #65	; 0x41
 8002938:	4091      	lsls	r1, r2
 800293a:	ea26 0101 	bic.w	r1, r6, r1
 800293e:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002942:	fa04 f202 	lsl.w	r2, r4, r2
 8002946:	430a      	orrs	r2, r1
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
 800294a:	e7c2      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800294c:	2002      	movs	r0, #2
 800294e:	e7cf      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002950:	f1a5 0310 	sub.w	r3, r5, #16
 8002954:	2b01      	cmp	r3, #1
 8002956:	d8c7      	bhi.n	80028e8 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_ADC_ConfigChannel+0x118>)
 800295a:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800295e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002962:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002964:	d1c0      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_ADC_ConfigChannel+0x11c>)
 8002968:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_ADC_ConfigChannel+0x120>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002970:	220a      	movs	r2, #10
 8002972:	4353      	muls	r3, r2
        counter--;
 8002974:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0b5      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 800297c:	9b01      	ldr	r3, [sp, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	e7f8      	b.n	8002974 <HAL_ADC_ConfigChannel+0x104>
 8002982:	bf00      	nop
 8002984:	40012000 	.word	0x40012000
 8002988:	40012300 	.word	0x40012300
 800298c:	20000008 	.word	0x20000008
 8002990:	000f4240 	.word	0x000f4240

08002994 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002996:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002998:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800299c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ba:	b530      	push	{r4, r5, lr}
 80029bc:	68dc      	ldr	r4, [r3, #12]
 80029be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	2d04      	cmp	r5, #4
 80029ca:	bf28      	it	cs
 80029cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d4:	bf8c      	ite	hi
 80029d6:	3c03      	subhi	r4, #3
 80029d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029da:	fa03 f505 	lsl.w	r5, r3, r5
 80029de:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e2:	40a3      	lsls	r3, r4
 80029e4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80029ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	bfac      	ite	ge
 80029f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	4a08      	ldrlt	r2, [pc, #32]	; (8002a18 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	bfb8      	it	lt
 80029fe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	bfaa      	itet	ge
 8002a06:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a10:	bd30      	pop	{r4, r5, pc}
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00
 8002a18:	e000ed14 	.word	0xe000ed14

08002a1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	db08      	blt.n	8002a32 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a20:	0942      	lsrs	r2, r0, #5
 8002a22:	2301      	movs	r3, #1
 8002a24:	f000 001f 	and.w	r0, r0, #31
 8002a28:	fa03 f000 	lsl.w	r0, r3, r0
 8002a2c:	4b01      	ldr	r3, [pc, #4]	; (8002a34 <HAL_NVIC_EnableIRQ+0x18>)
 8002a2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	3801      	subs	r0, #1
 8002a3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a3e:	d20b      	bcs.n	8002a58 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	21f0      	movs	r1, #240	; 0xf0
 8002a4a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a50:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a52:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a54:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a56:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a58:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a60:	6803      	ldr	r3, [r0, #0]
{
 8002a62:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a64:	4c08      	ldr	r4, [pc, #32]	; (8002a88 <DMA_CalcBaseAndBitshift+0x28>)
{
 8002a66:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a68:	b2d9      	uxtb	r1, r3
 8002a6a:	3910      	subs	r1, #16
 8002a6c:	2018      	movs	r0, #24
 8002a6e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a72:	5c20      	ldrb	r0, [r4, r0]
 8002a74:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a76:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002a7a:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8002a7e:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a80:	bf88      	it	hi
 8002a82:	3004      	addhi	r0, #4
 8002a84:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002a86:	bd10      	pop	{r4, pc}
 8002a88:	0800c5a6 	.word	0x0800c5a6

08002a8c <HAL_DMA_Init>:
{
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff fd54 	bl	800253c <HAL_GetTick>
 8002a94:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002a96:	2c00      	cmp	r4, #0
 8002a98:	d073      	beq.n	8002b82 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002aa0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab0:	6821      	ldr	r1, [r4, #0]
 8002ab2:	680b      	ldr	r3, [r1, #0]
 8002ab4:	07d8      	lsls	r0, r3, #31
 8002ab6:	d42f      	bmi.n	8002b18 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002ab8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aba:	4d33      	ldr	r5, [pc, #204]	; (8002b88 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002abe:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	68e2      	ldr	r2, [r4, #12]
 8002ac8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	6922      	ldr	r2, [r4, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	6962      	ldr	r2, [r4, #20]
 8002ad0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	69e2      	ldr	r2, [r4, #28]
 8002ad4:	4303      	orrs	r3, r0
 8002ad6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad8:	6a22      	ldr	r2, [r4, #32]
 8002ada:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002adc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ade:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ae4:	bf02      	ittt	eq
 8002ae6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002aea:	4335      	orreq	r5, r6
 8002aec:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002aee:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002af0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002af8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afc:	d133      	bne.n	8002b66 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002afe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b00:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b04:	b37d      	cbz	r5, 8002b66 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b06:	b990      	cbnz	r0, 8002b2e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002b08:	2a01      	cmp	r2, #1
 8002b0a:	d021      	beq.n	8002b50 <HAL_DMA_Init+0xc4>
 8002b0c:	f032 0202 	bics.w	r2, r2, #2
 8002b10:	d129      	bne.n	8002b66 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b12:	01ea      	lsls	r2, r5, #7
 8002b14:	d527      	bpl.n	8002b66 <HAL_DMA_Init+0xda>
 8002b16:	e01e      	b.n	8002b56 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b18:	f7ff fd10 	bl	800253c <HAL_GetTick>
 8002b1c:	1b40      	subs	r0, r0, r5
 8002b1e:	2805      	cmp	r0, #5
 8002b20:	d9c6      	bls.n	8002ab0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b22:	2320      	movs	r3, #32
 8002b24:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b26:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002b28:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002b32:	d114      	bne.n	8002b5e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002b34:	2a03      	cmp	r2, #3
 8002b36:	d816      	bhi.n	8002b66 <HAL_DMA_Init+0xda>
 8002b38:	a001      	add	r0, pc, #4	; (adr r0, 8002b40 <HAL_DMA_Init+0xb4>)
 8002b3a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b57 	.word	0x08002b57
 8002b44:	08002b13 	.word	0x08002b13
 8002b48:	08002b57 	.word	0x08002b57
 8002b4c:	08002b51 	.word	0x08002b51
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b50:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002b54:	d107      	bne.n	8002b66 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b56:	2340      	movs	r3, #64	; 0x40
 8002b58:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	e7e4      	b.n	8002b28 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002b5e:	2a02      	cmp	r2, #2
 8002b60:	d9f9      	bls.n	8002b56 <HAL_DMA_Init+0xca>
 8002b62:	2a03      	cmp	r2, #3
 8002b64:	d0d5      	beq.n	8002b12 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002b66:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff ff79 	bl	8002a60 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b70:	233f      	movs	r3, #63	; 0x3f
 8002b72:	4093      	lsls	r3, r2
 8002b74:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b76:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002b78:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002b80:	e7d4      	b.n	8002b2c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002b82:	2001      	movs	r0, #1
 8002b84:	e7d2      	b.n	8002b2c <HAL_DMA_Init+0xa0>
 8002b86:	bf00      	nop
 8002b88:	f010803f 	.word	0xf010803f

08002b8c <HAL_DMA_Start_IT>:
{
 8002b8c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002b8e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b92:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002b94:	2c01      	cmp	r4, #1
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_Start_IT+0x70>
 8002b98:	2401      	movs	r4, #1
 8002b9a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002ba2:	2c01      	cmp	r4, #1
 8002ba4:	f04f 0500 	mov.w	r5, #0
 8002ba8:	f04f 0402 	mov.w	r4, #2
 8002bac:	d124      	bne.n	8002bf8 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bae:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb6:	6825      	ldr	r5, [r4, #0]
 8002bb8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002bbc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002bbe:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bc0:	6883      	ldr	r3, [r0, #8]
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002bc4:	bf0e      	itee	eq
 8002bc6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002bc8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bca:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bcc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002bce:	bf08      	it	eq
 8002bd0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd2:	233f      	movs	r3, #63	; 0x3f
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f043 0316 	orr.w	r3, r3, #22
 8002bde:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002be2:	b11b      	cbz	r3, 8002bec <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2000      	movs	r0, #0
}
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002bf8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	e7fa      	b.n	8002bf6 <HAL_DMA_Start_IT+0x6a>

08002c00 <HAL_DMA_Abort>:
{
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c04:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002c06:	f7ff fc99 	bl	800253c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002c0e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002c10:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c12:	d006      	beq.n	8002c22 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002c1e:	2001      	movs	r0, #1
}
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f022 0216 	bic.w	r2, r2, #22
 8002c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c32:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c36:	b90a      	cbnz	r2, 8002c3c <HAL_DMA_Abort+0x3c>
 8002c38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002c3a:	b11a      	cbz	r2, 8002c44 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f022 0208 	bic.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f013 0301 	ands.w	r3, r3, #1
 8002c54:	d10a      	bne.n	8002c6c <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002c58:	223f      	movs	r2, #63	; 0x3f
 8002c5a:	408a      	lsls	r2, r1
 8002c5c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002c64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002c68:	4618      	mov	r0, r3
 8002c6a:	e7d9      	b.n	8002c20 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c6c:	f7ff fc66 	bl	800253c <HAL_GetTick>
 8002c70:	1b40      	subs	r0, r0, r5
 8002c72:	2805      	cmp	r0, #5
 8002c74:	d9ea      	bls.n	8002c4c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c76:	2320      	movs	r3, #32
 8002c78:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c7a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8002c7c:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c7e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002c82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002c86:	e7cb      	b.n	8002c20 <HAL_DMA_Abort+0x20>

08002c88 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002c94:	2001      	movs	r0, #1
 8002c96:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002c98:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002ca8:	2000      	movs	r0, #0
}
 8002caa:	4770      	bx	lr

08002cac <HAL_DMA_IRQHandler>:
{
 8002cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cb6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002cba:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	4232      	tst	r2, r6
{
 8002cc2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc6:	6801      	ldr	r1, [r0, #0]
 8002cc8:	6808      	ldr	r0, [r1, #0]
 8002cca:	0740      	lsls	r0, r0, #29
 8002ccc:	d508      	bpl.n	8002ce0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cce:	6808      	ldr	r0, [r1, #0]
 8002cd0:	f020 0004 	bic.w	r0, r0, #4
 8002cd4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	4232      	tst	r2, r6
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	6949      	ldr	r1, [r1, #20]
 8002cec:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cee:	bf41      	itttt	mi
 8002cf0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002cf4:	f042 0202 	orrmi.w	r2, r2, #2
 8002cf8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	4232      	tst	r2, r6
 8002d00:	d008      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d02:	6821      	ldr	r1, [r4, #0]
 8002d04:	6809      	ldr	r1, [r1, #0]
 8002d06:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d08:	bf41      	itttt	mi
 8002d0a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d0c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002d0e:	f042 0204 	orrmi.w	r2, r2, #4
 8002d12:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d14:	2210      	movs	r2, #16
 8002d16:	409a      	lsls	r2, r3
 8002d18:	4232      	tst	r2, r6
 8002d1a:	d010      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	0709      	lsls	r1, r1, #28
 8002d22:	d50c      	bpl.n	8002d3e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d24:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	0350      	lsls	r0, r2, #13
 8002d2a:	d537      	bpl.n	8002d9c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0319      	lsls	r1, r3, #12
 8002d30:	d401      	bmi.n	8002d36 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d34:	e000      	b.n	8002d38 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	b10b      	cbz	r3, 8002d3e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002d40:	2220      	movs	r2, #32
 8002d42:	408a      	lsls	r2, r1
 8002d44:	4232      	tst	r2, r6
 8002d46:	d03a      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	06c6      	lsls	r6, r0, #27
 8002d4e:	d536      	bpl.n	8002dbe <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d50:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d52:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002d56:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d58:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d5a:	d127      	bne.n	8002dac <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d68:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d6c:	b90a      	cbnz	r2, 8002d72 <HAL_DMA_IRQHandler+0xc6>
 8002d6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d70:	b11a      	cbz	r2, 8002d7a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7a:	233f      	movs	r3, #63	; 0x3f
 8002d7c:	408b      	lsls	r3, r1
 8002d7e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002d86:	2300      	movs	r3, #0
 8002d88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002d8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d045      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002d92:	4620      	mov	r0, r4
}
 8002d94:	b003      	add	sp, #12
 8002d96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002d9a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da0:	bf5e      	ittt	pl
 8002da2:	681a      	ldrpl	r2, [r3, #0]
 8002da4:	f022 0208 	bicpl.w	r2, r2, #8
 8002da8:	601a      	strpl	r2, [r3, #0]
 8002daa:	e7c2      	b.n	8002d32 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dac:	0350      	lsls	r0, r2, #13
 8002dae:	d527      	bpl.n	8002e00 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0319      	lsls	r1, r3, #12
 8002db4:	d431      	bmi.n	8002e1a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002db8:	b10b      	cbz	r3, 8002dbe <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dc0:	b36b      	cbz	r3, 8002e1e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dc4:	07da      	lsls	r2, r3, #31
 8002dc6:	d519      	bpl.n	8002dfc <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8002dc8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002dce:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002dd8:	6813      	ldr	r3, [r2, #0]
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	d802      	bhi.n	8002df0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	07db      	lsls	r3, r3, #31
 8002dee:	d4f7      	bmi.n	8002de0 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002df6:	2300      	movs	r3, #0
 8002df8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002dfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dfe:	e7c6      	b.n	8002d8e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002e06:	d108      	bne.n	8002e1a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	f021 0110 	bic.w	r1, r1, #16
 8002e0e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002e16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e1c:	e7cc      	b.n	8002db8 <HAL_DMA_IRQHandler+0x10c>
}
 8002e1e:	b003      	add	sp, #12
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000008 	.word	0x20000008

08002e28 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002e28:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e30:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002fdc <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e34:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e38:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002e3a:	2401      	movs	r4, #1
 8002e3c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002e42:	43ac      	bics	r4, r5
 8002e44:	f040 80b1 	bne.w	8002faa <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e48:	684d      	ldr	r5, [r1, #4]
 8002e4a:	f005 0403 	and.w	r4, r5, #3
 8002e4e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e52:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e54:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e56:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e5c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e60:	d834      	bhi.n	8002ecc <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002e62:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e64:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e68:	68cf      	ldr	r7, [r1, #12]
 8002e6a:	fa07 f708 	lsl.w	r7, r7, r8
 8002e6e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002e72:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e74:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e76:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002e7e:	409f      	lsls	r7, r3
 8002e80:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002e84:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002e86:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e88:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	688f      	ldr	r7, [r1, #8]
 8002e8e:	fa07 f708 	lsl.w	r7, r7, r8
 8002e92:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002e98:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9a:	d119      	bne.n	8002ed0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002ea0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ea4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002ea8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002eb0:	f04f 0e0f 	mov.w	lr, #15
 8002eb4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002eb8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ebc:	690f      	ldr	r7, [r1, #16]
 8002ebe:	fa07 f70b 	lsl.w	r7, r7, fp
 8002ec2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002ec6:	f8ca 7020 	str.w	r7, [sl, #32]
 8002eca:	e001      	b.n	8002ed0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	2c03      	cmp	r4, #3
 8002ece:	d1da      	bne.n	8002e86 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002ed0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ed6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eda:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002ede:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee0:	d063      	beq.n	8002faa <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	f04f 0a00 	mov.w	sl, #0
 8002ee6:	f8cd a004 	str.w	sl, [sp, #4]
 8002eea:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eee:	4c3a      	ldr	r4, [pc, #232]	; (8002fd8 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002ef4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002ef8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002efc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002f00:	9601      	str	r6, [sp, #4]
 8002f02:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f04:	f023 0603 	bic.w	r6, r3, #3
 8002f08:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f0c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f10:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f14:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002f1c:	270f      	movs	r7, #15
 8002f1e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f22:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f28:	d046      	beq.n	8002fb8 <HAL_GPIO_Init+0x18c>
 8002f2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f2e:	42a0      	cmp	r0, r4
 8002f30:	d044      	beq.n	8002fbc <HAL_GPIO_Init+0x190>
 8002f32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f36:	42a0      	cmp	r0, r4
 8002f38:	d042      	beq.n	8002fc0 <HAL_GPIO_Init+0x194>
 8002f3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f3e:	42a0      	cmp	r0, r4
 8002f40:	d040      	beq.n	8002fc4 <HAL_GPIO_Init+0x198>
 8002f42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f46:	42a0      	cmp	r0, r4
 8002f48:	d03e      	beq.n	8002fc8 <HAL_GPIO_Init+0x19c>
 8002f4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f4e:	42a0      	cmp	r0, r4
 8002f50:	d03c      	beq.n	8002fcc <HAL_GPIO_Init+0x1a0>
 8002f52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f56:	42a0      	cmp	r0, r4
 8002f58:	d03a      	beq.n	8002fd0 <HAL_GPIO_Init+0x1a4>
 8002f5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f5e:	42a0      	cmp	r0, r4
 8002f60:	bf0c      	ite	eq
 8002f62:	2407      	moveq	r4, #7
 8002f64:	2408      	movne	r4, #8
 8002f66:	fa04 f40e 	lsl.w	r4, r4, lr
 8002f6a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002f6e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f74:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002f76:	bf54      	ite	pl
 8002f78:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f7a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002f7e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002f80:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f82:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002f84:	bf54      	ite	pl
 8002f86:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f88:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002f8c:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002f8e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f90:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002f92:	bf54      	ite	pl
 8002f94:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f96:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002f9a:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9e:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	bf54      	ite	pl
 8002fa2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002fa4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002fa8:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	3301      	adds	r3, #1
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	f47f af43 	bne.w	8002e38 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002fb2:	b003      	add	sp, #12
 8002fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fb8:	4654      	mov	r4, sl
 8002fba:	e7d4      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fbc:	2401      	movs	r4, #1
 8002fbe:	e7d2      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fc0:	2402      	movs	r4, #2
 8002fc2:	e7d0      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fc4:	2403      	movs	r4, #3
 8002fc6:	e7ce      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fc8:	2404      	movs	r4, #4
 8002fca:	e7cc      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fcc:	2405      	movs	r4, #5
 8002fce:	e7ca      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fd0:	2406      	movs	r4, #6
 8002fd2:	e7c8      	b.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002fd4:	40013c00 	.word	0x40013c00
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fe0:	6903      	ldr	r3, [r0, #16]
 8002fe2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002fe4:	bf14      	ite	ne
 8002fe6:	2001      	movne	r0, #1
 8002fe8:	2000      	moveq	r0, #0
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	b10a      	cbz	r2, 8002ff2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fee:	6181      	str	r1, [r0, #24]
  }
}
 8002ff0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff2:	0409      	lsls	r1, r1, #16
 8002ff4:	e7fb      	b.n	8002fee <HAL_GPIO_WritePin+0x2>
	...

08002ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002ffa:	6951      	ldr	r1, [r2, #20]
 8002ffc:	4201      	tst	r1, r0
{
 8002ffe:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003000:	d002      	beq.n	8003008 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003002:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003004:	f7fe fbb4 	bl	8001770 <HAL_GPIO_EXTI_Callback>
  }
}
 8003008:	bd08      	pop	{r3, pc}
 800300a:	bf00      	nop
 800300c:	40013c00 	.word	0x40013c00

08003010 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003010:	4a05      	ldr	r2, [pc, #20]	; (8003028 <HAL_PWR_EnterSTANDBYMode+0x18>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_PWR_EnterSTANDBYMode+0x1c>)
 800301c:	6913      	ldr	r3, [r2, #16]
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003024:	bf30      	wfi
}
 8003026:	4770      	bx	lr
 8003028:	40007000 	.word	0x40007000
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003034:	4604      	mov	r4, r0
 8003036:	b340      	cbz	r0, 800308a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003038:	6803      	ldr	r3, [r0, #0]
 800303a:	07dd      	lsls	r5, r3, #31
 800303c:	d410      	bmi.n	8003060 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	0798      	lsls	r0, r3, #30
 8003042:	d45e      	bmi.n	8003102 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	071a      	lsls	r2, r3, #28
 8003048:	f100 80a0 	bmi.w	800318c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	075b      	lsls	r3, r3, #29
 8003050:	f100 80c0 	bmi.w	80031d4 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	69a0      	ldr	r0, [r4, #24]
 8003056:	2800      	cmp	r0, #0
 8003058:	f040 8128 	bne.w	80032ac <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800305c:	2000      	movs	r0, #0
 800305e:	e02b      	b.n	80030b8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	f002 020c 	and.w	r2, r2, #12
 8003068:	2a04      	cmp	r2, #4
 800306a:	d007      	beq.n	800307c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003072:	2a08      	cmp	r2, #8
 8003074:	d10b      	bne.n	800308e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	0251      	lsls	r1, r2, #9
 800307a:	d508      	bpl.n	800308e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	039a      	lsls	r2, r3, #14
 8003082:	d5dc      	bpl.n	800303e <HAL_RCC_OscConfig+0xe>
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1d9      	bne.n	800303e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308e:	6862      	ldr	r2, [r4, #4]
 8003090:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003094:	d113      	bne.n	80030be <HAL_RCC_OscConfig+0x8e>
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800309c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800309e:	f7ff fa4d 	bl	800253c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4e7f      	ldr	r6, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80030a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	6833      	ldr	r3, [r6, #0]
 80030a8:	039b      	lsls	r3, r3, #14
 80030aa:	d4c8      	bmi.n	800303e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ac:	f7ff fa46 	bl	800253c <HAL_GetTick>
 80030b0:	1b40      	subs	r0, r0, r5
 80030b2:	2864      	cmp	r0, #100	; 0x64
 80030b4:	d9f7      	bls.n	80030a6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80030b6:	2003      	movs	r0, #3
}
 80030b8:	b002      	add	sp, #8
 80030ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030be:	4d78      	ldr	r5, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030c0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0xa8>
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d6:	e7e2      	b.n	800309e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e6:	2a00      	cmp	r2, #0
 80030e8:	d1d9      	bne.n	800309e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80030ea:	f7ff fa27 	bl	800253c <HAL_GetTick>
 80030ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	039f      	lsls	r7, r3, #14
 80030f4:	d5a3      	bpl.n	800303e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f6:	f7ff fa21 	bl	800253c <HAL_GetTick>
 80030fa:	1b80      	subs	r0, r0, r6
 80030fc:	2864      	cmp	r0, #100	; 0x64
 80030fe:	d9f7      	bls.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 8003100:	e7d9      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003102:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	f012 0f0c 	tst.w	r2, #12
 800310a:	d007      	beq.n	800311c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003112:	2a08      	cmp	r2, #8
 8003114:	d111      	bne.n	800313a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	025e      	lsls	r6, r3, #9
 800311a:	d40e      	bmi.n	800313a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311c:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	079d      	lsls	r5, r3, #30
 8003122:	d502      	bpl.n	800312a <HAL_RCC_OscConfig+0xfa>
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d1af      	bne.n	800308a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	6921      	ldr	r1, [r4, #16]
 800312e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003132:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003136:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003138:	e784      	b.n	8003044 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800313a:	68e2      	ldr	r2, [r4, #12]
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_OscConfig+0x274>)
 800313e:	b1b2      	cbz	r2, 800316e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003144:	f7ff f9fa 	bl	800253c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	4d55      	ldr	r5, [pc, #340]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800314a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	0798      	lsls	r0, r3, #30
 8003150:	d507      	bpl.n	8003162 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	682b      	ldr	r3, [r5, #0]
 8003154:	6922      	ldr	r2, [r4, #16]
 8003156:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800315a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	e770      	b.n	8003044 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003162:	f7ff f9eb 	bl	800253c <HAL_GetTick>
 8003166:	1b80      	subs	r0, r0, r6
 8003168:	2802      	cmp	r0, #2
 800316a:	d9ef      	bls.n	800314c <HAL_RCC_OscConfig+0x11c>
 800316c:	e7a3      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800316e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003170:	f7ff f9e4 	bl	800253c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003174:	4e4a      	ldr	r6, [pc, #296]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003176:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003178:	6833      	ldr	r3, [r6, #0]
 800317a:	0799      	lsls	r1, r3, #30
 800317c:	f57f af62 	bpl.w	8003044 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003180:	f7ff f9dc 	bl	800253c <HAL_GetTick>
 8003184:	1b40      	subs	r0, r0, r5
 8003186:	2802      	cmp	r0, #2
 8003188:	d9f6      	bls.n	8003178 <HAL_RCC_OscConfig+0x148>
 800318a:	e794      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318c:	6962      	ldr	r2, [r4, #20]
 800318e:	4b45      	ldr	r3, [pc, #276]	; (80032a4 <HAL_RCC_OscConfig+0x274>)
 8003190:	b182      	cbz	r2, 80031b4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8003192:	2201      	movs	r2, #1
 8003194:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003198:	f7ff f9d0 	bl	800253c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319c:	4e40      	ldr	r6, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800319e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80031a2:	079f      	lsls	r7, r3, #30
 80031a4:	f53f af52 	bmi.w	800304c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a8:	f7ff f9c8 	bl	800253c <HAL_GetTick>
 80031ac:	1b40      	subs	r0, r0, r5
 80031ae:	2802      	cmp	r0, #2
 80031b0:	d9f6      	bls.n	80031a0 <HAL_RCC_OscConfig+0x170>
 80031b2:	e780      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80031b4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80031b8:	f7ff f9c0 	bl	800253c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4e38      	ldr	r6, [pc, #224]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80031be:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80031c2:	0798      	lsls	r0, r3, #30
 80031c4:	f57f af42 	bpl.w	800304c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7ff f9b8 	bl	800253c <HAL_GetTick>
 80031cc:	1b40      	subs	r0, r0, r5
 80031ce:	2802      	cmp	r0, #2
 80031d0:	d9f6      	bls.n	80031c0 <HAL_RCC_OscConfig+0x190>
 80031d2:	e770      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80031dc:	d128      	bne.n	8003230 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	9201      	str	r2, [sp, #4]
 80031e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031f2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4d2c      	ldr	r5, [pc, #176]	; (80032a8 <HAL_RCC_OscConfig+0x278>)
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	05d9      	lsls	r1, r3, #23
 80031fa:	d51b      	bpl.n	8003234 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	68a3      	ldr	r3, [r4, #8]
 80031fe:	4d28      	ldr	r5, [pc, #160]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003200:	2b01      	cmp	r3, #1
 8003202:	d127      	bne.n	8003254 <HAL_RCC_OscConfig+0x224>
 8003204:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800320c:	f7ff f996 	bl	800253c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	4e23      	ldr	r6, [pc, #140]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003212:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800321a:	079b      	lsls	r3, r3, #30
 800321c:	d539      	bpl.n	8003292 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800321e:	2f00      	cmp	r7, #0
 8003220:	f43f af18 	beq.w	8003054 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003226:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	e711      	b.n	8003054 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003230:	2700      	movs	r7, #0
 8003232:	e7df      	b.n	80031f4 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800323c:	f7ff f97e 	bl	800253c <HAL_GetTick>
 8003240:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	05da      	lsls	r2, r3, #23
 8003246:	d4d9      	bmi.n	80031fc <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7ff f978 	bl	800253c <HAL_GetTick>
 800324c:	1b80      	subs	r0, r0, r6
 800324e:	2802      	cmp	r0, #2
 8003250:	d9f7      	bls.n	8003242 <HAL_RCC_OscConfig+0x212>
 8003252:	e730      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003254:	2b05      	cmp	r3, #5
 8003256:	d104      	bne.n	8003262 <HAL_RCC_OscConfig+0x232>
 8003258:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	672b      	str	r3, [r5, #112]	; 0x70
 8003260:	e7d0      	b.n	8003204 <HAL_RCC_OscConfig+0x1d4>
 8003262:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	672a      	str	r2, [r5, #112]	; 0x70
 800326a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800326c:	f022 0204 	bic.w	r2, r2, #4
 8003270:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1ca      	bne.n	800320c <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8003276:	f7ff f961 	bl	800253c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800327e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003282:	0798      	lsls	r0, r3, #30
 8003284:	d5cb      	bpl.n	800321e <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7ff f959 	bl	800253c <HAL_GetTick>
 800328a:	1b80      	subs	r0, r0, r6
 800328c:	4540      	cmp	r0, r8
 800328e:	d9f7      	bls.n	8003280 <HAL_RCC_OscConfig+0x250>
 8003290:	e711      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7ff f953 	bl	800253c <HAL_GetTick>
 8003296:	1b40      	subs	r0, r0, r5
 8003298:	4540      	cmp	r0, r8
 800329a:	d9bd      	bls.n	8003218 <HAL_RCC_OscConfig+0x1e8>
 800329c:	e70b      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ac:	4d36      	ldr	r5, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x358>)
 80032ae:	68ab      	ldr	r3, [r5, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d03d      	beq.n	8003334 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_OscConfig+0x35c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80032be:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	d12b      	bne.n	800331a <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 80032c2:	f7ff f93b 	bl	800253c <HAL_GetTick>
 80032c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	0199      	lsls	r1, r3, #6
 80032cc:	d41f      	bmi.n	800330e <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ce:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032d6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80032da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80032e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032e2:	0852      	lsrs	r2, r2, #1
 80032e4:	3a01      	subs	r2, #1
 80032e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032ea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	4d26      	ldr	r5, [pc, #152]	; (8003388 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80032f0:	2201      	movs	r2, #1
 80032f2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80032f4:	f7ff f922 	bl	800253c <HAL_GetTick>
 80032f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	682b      	ldr	r3, [r5, #0]
 80032fc:	019a      	lsls	r2, r3, #6
 80032fe:	f53f aead 	bmi.w	800305c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7ff f91b 	bl	800253c <HAL_GetTick>
 8003306:	1b00      	subs	r0, r0, r4
 8003308:	2802      	cmp	r0, #2
 800330a:	d9f6      	bls.n	80032fa <HAL_RCC_OscConfig+0x2ca>
 800330c:	e6d3      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7ff f915 	bl	800253c <HAL_GetTick>
 8003312:	1b80      	subs	r0, r0, r6
 8003314:	2802      	cmp	r0, #2
 8003316:	d9d7      	bls.n	80032c8 <HAL_RCC_OscConfig+0x298>
 8003318:	e6cd      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800331a:	f7ff f90f 	bl	800253c <HAL_GetTick>
 800331e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	f57f ae9a 	bpl.w	800305c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7ff f908 	bl	800253c <HAL_GetTick>
 800332c:	1b00      	subs	r0, r0, r4
 800332e:	2802      	cmp	r0, #2
 8003330:	d9f6      	bls.n	8003320 <HAL_RCC_OscConfig+0x2f0>
 8003332:	e6c0      	b.n	80030b6 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	2801      	cmp	r0, #1
 8003336:	f43f aebf 	beq.w	80030b8 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800333a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	4291      	cmp	r1, r2
 8003344:	f47f aea1 	bne.w	800308a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003348:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	428a      	cmp	r2, r1
 8003350:	f47f ae9b 	bne.w	800308a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003354:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003356:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800335a:	401a      	ands	r2, r3
 800335c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003360:	f47f ae93 	bne.w	800308a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003364:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003366:	0852      	lsrs	r2, r2, #1
 8003368:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800336c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003372:	f47f ae8a 	bne.w	800308a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003376:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003378:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003380:	f43f ae6c 	beq.w	800305c <HAL_RCC_OscConfig+0x2c>
 8003384:	e681      	b.n	800308a <HAL_RCC_OscConfig+0x5a>
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	42470000 	.word	0x42470000

08003390 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4913      	ldr	r1, [pc, #76]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003392:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003394:	688b      	ldr	r3, [r1, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d01c      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x48>
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	bf14      	ite	ne
 80033ae:	480d      	ldrne	r0, [pc, #52]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b0:	480d      	ldreq	r0, [pc, #52]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80033b6:	bf18      	it	ne
 80033b8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	fba1 0100 	umull	r0, r1, r1, r0
 80033c2:	f7fd fc61 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80033d2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033d6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80033da:	e7fc      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80033de:	e7fa      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x46>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	007a1200 	.word	0x007a1200
 80033e8:	00f42400 	.word	0x00f42400

080033ec <HAL_RCC_ClockConfig>:
{
 80033ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80033f2:	4604      	mov	r4, r0
 80033f4:	b910      	cbnz	r0, 80033fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80033f6:	2001      	movs	r0, #1
}
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_ClockConfig+0x124>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f002 0207 	and.w	r2, r2, #7
 8003404:	428a      	cmp	r2, r1
 8003406:	d328      	bcc.n	800345a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	0797      	lsls	r7, r2, #30
 800340c:	d42d      	bmi.n	800346a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	07d0      	lsls	r0, r2, #31
 8003410:	d441      	bmi.n	8003496 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_ClockConfig+0x124>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f002 0207 	and.w	r2, r2, #7
 800341a:	42aa      	cmp	r2, r5
 800341c:	d866      	bhi.n	80034ec <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	0751      	lsls	r1, r2, #29
 8003422:	d46c      	bmi.n	80034fe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003424:	0713      	lsls	r3, r2, #28
 8003426:	d507      	bpl.n	8003438 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003428:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 800342a:	6921      	ldr	r1, [r4, #16]
 800342c:	6893      	ldr	r3, [r2, #8]
 800342e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003432:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003436:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003438:	f7ff ffaa 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 800343e:	4a36      	ldr	r2, [pc, #216]	; (8003518 <HAL_RCC_ClockConfig+0x12c>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	40d8      	lsrs	r0, r3
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCC_ClockConfig+0x130>)
 800344c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800344e:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_ClockConfig+0x134>)
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f7ff f829 	bl	80024a8 <HAL_InitTick>
  return HAL_OK;
 8003456:	2000      	movs	r0, #0
 8003458:	e7ce      	b.n	80033f8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	b2ca      	uxtb	r2, r1
 800345c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	428b      	cmp	r3, r1
 8003466:	d1c6      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xa>
 8003468:	e7ce      	b.n	8003408 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346a:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 800346c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	bf1e      	ittt	ne
 8003472:	6899      	ldrne	r1, [r3, #8]
 8003474:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8003478:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	bf42      	ittt	mi
 800347e:	6899      	ldrmi	r1, [r3, #8]
 8003480:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8003484:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003486:	4923      	ldr	r1, [pc, #140]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 8003488:	68a0      	ldr	r0, [r4, #8]
 800348a:	688b      	ldr	r3, [r1, #8]
 800348c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003490:	4303      	orrs	r3, r0
 8003492:	608b      	str	r3, [r1, #8]
 8003494:	e7bb      	b.n	800340e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003496:	6862      	ldr	r2, [r4, #4]
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 800349a:	2a01      	cmp	r2, #1
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	d0a7      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4e1b      	ldr	r6, [pc, #108]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 80034a8:	68b3      	ldr	r3, [r6, #8]
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80034b2:	f7ff f843 	bl	800253c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80034ba:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034bc:	68b3      	ldr	r3, [r6, #8]
 80034be:	6862      	ldr	r2, [r4, #4]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034c8:	d0a3      	beq.n	8003412 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ca:	f7ff f837 	bl	800253c <HAL_GetTick>
 80034ce:	1bc0      	subs	r0, r0, r7
 80034d0:	4540      	cmp	r0, r8
 80034d2:	d9f3      	bls.n	80034bc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80034d4:	2003      	movs	r0, #3
 80034d6:	e78f      	b.n	80033f8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d8:	1e91      	subs	r1, r2, #2
 80034da:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034de:	d802      	bhi.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034e4:	e7de      	b.n	80034a4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e6:	f013 0f02 	tst.w	r3, #2
 80034ea:	e7db      	b.n	80034a4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ec:	b2ea      	uxtb	r2, r5
 80034ee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	42ab      	cmp	r3, r5
 80034f8:	f47f af7d 	bne.w	80033f6 <HAL_RCC_ClockConfig+0xa>
 80034fc:	e78f      	b.n	800341e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fe:	4905      	ldr	r1, [pc, #20]	; (8003514 <HAL_RCC_ClockConfig+0x128>)
 8003500:	68e0      	ldr	r0, [r4, #12]
 8003502:	688b      	ldr	r3, [r1, #8]
 8003504:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003508:	4303      	orrs	r3, r0
 800350a:	608b      	str	r3, [r1, #8]
 800350c:	e78a      	b.n	8003424 <HAL_RCC_ClockConfig+0x38>
 800350e:	bf00      	nop
 8003510:	40023c00 	.word	0x40023c00
 8003514:	40023800 	.word	0x40023800
 8003518:	0800c58e 	.word	0x0800c58e
 800351c:	20000008 	.word	0x20000008
 8003520:	20000010 	.word	0x20000010

08003524 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003524:	4b01      	ldr	r3, [pc, #4]	; (800352c <HAL_RCC_GetHCLKFreq+0x8>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000008 	.word	0x20000008

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	4a03      	ldr	r2, [pc, #12]	; (800354c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800353e:	6810      	ldr	r0, [r2, #0]
}
 8003540:	40d8      	lsrs	r0, r3
 8003542:	4770      	bx	lr
 8003544:	40023800 	.word	0x40023800
 8003548:	0800c59e 	.word	0x0800c59e
 800354c:	20000008 	.word	0x20000008

08003550 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003552:	4a05      	ldr	r2, [pc, #20]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	4a03      	ldr	r2, [pc, #12]	; (800356c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800355e:	6810      	ldr	r0, [r2, #0]
}
 8003560:	40d8      	lsrs	r0, r3
 8003562:	4770      	bx	lr
 8003564:	40023800 	.word	0x40023800
 8003568:	0800c59e 	.word	0x0800c59e
 800356c:	20000008 	.word	0x20000008

08003570 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003570:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800357c:	4770      	bx	lr

0800357e <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800357e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003580:	b089      	sub	sp, #36	; 0x24
 8003582:	4605      	mov	r5, r0
 8003584:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003586:	f7fe ffd9 	bl	800253c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800358a:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800358c:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800358e:	2108      	movs	r1, #8
 8003590:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8003592:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003596:	f002 f91d 	bl	80057d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800359a:	4604      	mov	r4, r0
 800359c:	b9d8      	cbnz	r0, 80035d6 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800359e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80035a0:	6828      	ldr	r0, [r5, #0]
 80035a2:	0409      	lsls	r1, r1, #16
 80035a4:	f002 f9c0 	bl	8005928 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035a8:	4604      	mov	r4, r0
 80035aa:	b9a0      	cbnz	r0, 80035d6 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	2308      	movs	r3, #8
 80035b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80035b6:	2130      	movs	r1, #48	; 0x30
 80035b8:	2302      	movs	r3, #2
 80035ba:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80035be:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80035c0:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80035c2:	a902      	add	r1, sp, #8
 80035c4:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80035c6:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80035c8:	f002 f83b 	bl	8005642 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80035cc:	6828      	ldr	r0, [r5, #0]
 80035ce:	f002 f9db 	bl	8005988 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035d2:	4604      	mov	r4, r0
 80035d4:	b190      	cbz	r0, 80035fc <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80035d6:	4620      	mov	r0, r4
 80035d8:	b009      	add	sp, #36	; 0x24
 80035da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80035dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80035de:	0293      	lsls	r3, r2, #10
 80035e0:	d512      	bpl.n	8003608 <SD_FindSCR+0x8a>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035e2:	f002 f808 	bl	80055f6 <SDIO_ReadFIFO>
 80035e6:	ab08      	add	r3, sp, #32
 80035e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 80035ec:	3401      	adds	r4, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035ee:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035f2:	f7fe ffa3 	bl	800253c <HAL_GetTick>
 80035f6:	1bc0      	subs	r0, r0, r7
 80035f8:	3001      	adds	r0, #1
 80035fa:	d023      	beq.n	8003644 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80035fc:	6828      	ldr	r0, [r5, #0]
 80035fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003600:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8003604:	d0ea      	beq.n	80035dc <SD_FindSCR+0x5e>
 8003606:	e002      	b.n	800360e <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003608:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800360a:	0491      	lsls	r1, r2, #18
 800360c:	d4f1      	bmi.n	80035f2 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800360e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003610:	0712      	lsls	r2, r2, #28
 8003612:	d502      	bpl.n	800361a <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003614:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003616:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003618:	e7dd      	b.n	80035d6 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800361a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800361c:	0793      	lsls	r3, r2, #30
 800361e:	d501      	bpl.n	8003624 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003620:	2402      	movs	r4, #2
 8003622:	e7f8      	b.n	8003616 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003624:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003626:	f014 0420 	ands.w	r4, r4, #32
 800362a:	d001      	beq.n	8003630 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800362c:	2420      	movs	r4, #32
 800362e:	e7f2      	b.n	8003616 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003630:	9b01      	ldr	r3, [sp, #4]
 8003632:	f240 523a 	movw	r2, #1338	; 0x53a
 8003636:	ba1b      	rev	r3, r3
 8003638:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800363a:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800363c:	9b00      	ldr	r3, [sp, #0]
 800363e:	ba1b      	rev	r3, r3
 8003640:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8003642:	e7c8      	b.n	80035d6 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8003644:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003648:	e7c5      	b.n	80035d6 <SD_FindSCR+0x58>
	...

0800364c <HAL_SD_ReadBlocks_DMA>:
{
 800364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003650:	4604      	mov	r4, r0
 8003652:	b086      	sub	sp, #24
 8003654:	4615      	mov	r5, r2
 8003656:	461f      	mov	r7, r3
  if(NULL == pData)
 8003658:	b941      	cbnz	r1, 800366c <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800365a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800365c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003660:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8003662:	2601      	movs	r6, #1
}
 8003664:	4630      	mov	r0, r6
 8003666:	b006      	add	sp, #24
 8003668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800366c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003670:	2b01      	cmp	r3, #1
 8003672:	b2de      	uxtb	r6, r3
 8003674:	d174      	bne.n	8003760 <HAL_SD_ReadBlocks_DMA+0x114>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003676:	2200      	movs	r2, #0
 8003678:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800367a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800367c:	19eb      	adds	r3, r5, r7
 800367e:	4283      	cmp	r3, r0
 8003680:	d904      	bls.n	800368c <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003688:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800368a:	e7eb      	b.n	8003664 <HAL_SD_ReadBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 800368c:	f8d4 c000 	ldr.w	ip, [r4]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003690:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 8003692:	2303      	movs	r3, #3
 8003694:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003698:	f8cc 202c 	str.w	r2, [ip, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800369c:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 80036a0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_SD_ReadBlocks_DMA+0x11c>)
 80036ae:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_SD_ReadBlocks_DMA+0x120>)
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036b2:	6082      	str	r2, [r0, #8]
    hsd->hdmarx->XferAbortCallback = NULL;
 80036b4:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80036b8:	6802      	ldr	r2, [r0, #0]
 80036ba:	6813      	ldr	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80036bc:	ea4f 2847 	mov.w	r8, r7, lsl #9
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80036c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036c4:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80036c6:	460a      	mov	r2, r1
 80036c8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80036cc:	f10c 0180 	add.w	r1, ip, #128	; 0x80
 80036d0:	f7ff fa5c 	bl	8002b8c <HAL_DMA_Start_IT>
 80036d4:	b168      	cbz	r0, 80036f2 <HAL_SD_ReadBlocks_DMA+0xa6>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036da:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <HAL_SD_ReadBlocks_DMA+0x124>)
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80036e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ea:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036ec:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      return HAL_ERROR;
 80036f0:	e7b8      	b.n	8003664 <HAL_SD_ReadBlocks_DMA+0x18>
      __HAL_SD_DMA_ENABLE(hsd);
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_SD_ReadBlocks_DMA+0x128>)
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80036f4:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 80036f6:	f8c3 658c 	str.w	r6, [r3, #1420]	; 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036fc:	2b01      	cmp	r3, #1
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003702:	e9cd 3800 	strd	r3, r8, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003706:	f04f 0290 	mov.w	r2, #144	; 0x90
 800370a:	f04f 0302 	mov.w	r3, #2
 800370e:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	f04f 0301 	mov.w	r3, #1
 800371a:	e9cd 1304 	strd	r1, r3, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800371e:	4669      	mov	r1, sp
        add *= 512U;
 8003720:	bf18      	it	ne
 8003722:	026d      	lslne	r5, r5, #9
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003724:	f001 ff8d 	bl	8005642 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8003728:	2f01      	cmp	r7, #1
 800372a:	d912      	bls.n	8003752 <HAL_SD_ReadBlocks_DMA+0x106>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800372c:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800372e:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003730:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003732:	4629      	mov	r1, r5
 8003734:	f002 f87e 	bl	8005834 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003738:	b1a0      	cbz	r0, 8003764 <HAL_SD_ReadBlocks_DMA+0x118>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <HAL_SD_ReadBlocks_DMA+0x124>)
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003742:	4318      	orrs	r0, r3
        hsd->State = HAL_SD_STATE_READY;
 8003744:	2301      	movs	r3, #1
        hsd->ErrorCode |= errorstate;
 8003746:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003748:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8003750:	e788      	b.n	8003664 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003752:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003754:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003756:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003758:	4629      	mov	r1, r5
 800375a:	f002 f853 	bl	8005804 <SDMMC_CmdReadSingleBlock>
 800375e:	e7eb      	b.n	8003738 <HAL_SD_ReadBlocks_DMA+0xec>
    return HAL_BUSY;
 8003760:	2602      	movs	r6, #2
 8003762:	e77f      	b.n	8003664 <HAL_SD_ReadBlocks_DMA+0x18>
      return HAL_OK;
 8003764:	4606      	mov	r6, r0
 8003766:	e77d      	b.n	8003664 <HAL_SD_ReadBlocks_DMA+0x18>
 8003768:	0800389b 	.word	0x0800389b
 800376c:	08003de5 	.word	0x08003de5
 8003770:	004005ff 	.word	0x004005ff
 8003774:	42258000 	.word	0x42258000

08003778 <HAL_SD_WriteBlocks_DMA>:
{
 8003778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800377c:	4604      	mov	r4, r0
 800377e:	b087      	sub	sp, #28
 8003780:	461e      	mov	r6, r3
  if(NULL == pData)
 8003782:	4689      	mov	r9, r1
 8003784:	b941      	cbnz	r1, 8003798 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003786:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800378c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800378e:	2701      	movs	r7, #1
}
 8003790:	4638      	mov	r0, r7
 8003792:	b007      	add	sp, #28
 8003794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8003798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800379c:	2b01      	cmp	r3, #1
 800379e:	b2df      	uxtb	r7, r3
 80037a0:	d170      	bne.n	8003884 <HAL_SD_WriteBlocks_DMA+0x10c>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037a2:	2100      	movs	r1, #0
 80037a4:	6381      	str	r1, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80037a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80037a8:	1993      	adds	r3, r2, r6
 80037aa:	4283      	cmp	r3, r0
 80037ac:	d904      	bls.n	80037b8 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80037ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037b4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80037b6:	e7eb      	b.n	8003790 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 80037b8:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80037ba:	4d33      	ldr	r5, [pc, #204]	; (8003888 <HAL_SD_WriteBlocks_DMA+0x110>)
    hsd->State = HAL_SD_STATE_BUSY;
 80037bc:	2303      	movs	r3, #3
 80037be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80037c2:	62c1      	str	r1, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80037c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80037c6:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80037d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037d2:	63dd      	str	r5, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80037d4:	4d2d      	ldr	r5, [pc, #180]	; (800388c <HAL_SD_WriteBlocks_DMA+0x114>)
    hsd->hdmatx->XferAbortCallback = NULL;
 80037d6:	e9c3 5113 	strd	r5, r1, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037dc:	2b01      	cmp	r3, #1
      add *= 512U;
 80037de:	bf18      	it	ne
 80037e0:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 80037e2:	2e01      	cmp	r6, #1
 80037e4:	d912      	bls.n	800380c <HAL_SD_WriteBlocks_DMA+0x94>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80037e6:	23a0      	movs	r3, #160	; 0xa0
 80037e8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80037ea:	4611      	mov	r1, r2
 80037ec:	f002 f852 	bl	8005894 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037f0:	6822      	ldr	r2, [r4, #0]
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80037f2:	4605      	mov	r5, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80037f4:	b180      	cbz	r0, 8003818 <HAL_SD_WriteBlocks_DMA+0xa0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_SD_WriteBlocks_DMA+0x118>)
 80037f8:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037fc:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 80037fe:	4305      	orrs	r5, r0
 8003800:	63a5      	str	r5, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003802:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003806:	2300      	movs	r3, #0
 8003808:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800380a:	e7c1      	b.n	8003790 <HAL_SD_WriteBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800380c:	2390      	movs	r3, #144	; 0x90
 800380e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003810:	4611      	mov	r1, r2
 8003812:	f002 f827 	bl	8005864 <SDMMC_CmdWriteSingleBlock>
 8003816:	e7eb      	b.n	80037f0 <HAL_SD_WriteBlocks_DMA+0x78>
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003818:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_SD_WriteBlocks_DMA+0x11c>)
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800381c:	6801      	ldr	r1, [r0, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 800381e:	f04f 0801 	mov.w	r8, #1
 8003822:	f8c3 858c 	str.w	r8, [r3, #1420]	; 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003826:	2340      	movs	r3, #64	; 0x40
 8003828:	6083      	str	r3, [r0, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800382a:	680b      	ldr	r3, [r1, #0]
 800382c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003834:	0276      	lsls	r6, r6, #9
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003836:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003838:	3280      	adds	r2, #128	; 0x80
 800383a:	08b3      	lsrs	r3, r6, #2
 800383c:	4649      	mov	r1, r9
 800383e:	f7ff f9a5 	bl	8002b8c <HAL_DMA_Start_IT>
 8003842:	b180      	cbz	r0, 8003866 <HAL_SD_WriteBlocks_DMA+0xee>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003848:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_SD_WriteBlocks_DMA+0x118>)
 8003854:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800385c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800385e:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003862:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003864:	e794      	b.n	8003790 <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800386a:	e9cd 3600 	strd	r3, r6, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800386e:	6820      	ldr	r0, [r4, #0]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003870:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003872:	4669      	mov	r1, sp
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003874:	e9cd 3502 	strd	r3, r5, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003878:	e9cd 5804 	strd	r5, r8, [sp, #16]
      return HAL_OK;
 800387c:	462f      	mov	r7, r5
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800387e:	f001 fee0 	bl	8005642 <SDIO_ConfigData>
      return HAL_OK;
 8003882:	e785      	b.n	8003790 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8003884:	2702      	movs	r7, #2
 8003886:	e783      	b.n	8003790 <HAL_SD_WriteBlocks_DMA+0x18>
 8003888:	08003571 	.word	0x08003571
 800388c:	08003de5 	.word	0x08003de5
 8003890:	004005ff 	.word	0x004005ff
 8003894:	42258000 	.word	0x42258000

08003898 <HAL_SD_ErrorCallback>:
 8003898:	4770      	bx	lr

0800389a <SD_DMAReceiveCplt>:
{
 800389a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800389c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800389e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038a0:	2b82      	cmp	r3, #130	; 0x82
 80038a2:	d109      	bne.n	80038b8 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	f002 f80d 	bl	80058c4 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038aa:	b128      	cbz	r0, 80038b8 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 80038ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038ae:	4318      	orrs	r0, r3
 80038b0:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff fff0 	bl	8003898 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	f022 0208 	bic.w	r2, r2, #8
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 80038d2:	4620      	mov	r0, r4
 80038d4:	f002 f9fd 	bl	8005cd2 <HAL_SD_RxCpltCallback>
}
 80038d8:	bd10      	pop	{r4, pc}
	...

080038dc <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80038dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80038de:	0f9a      	lsrs	r2, r3, #30
 80038e0:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80038e2:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80038e6:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038e8:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80038ec:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80038f2:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038f8:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038fa:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038fc:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003900:	0d1a      	lsrs	r2, r3, #20
 8003902:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003904:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8003908:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800390a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800390e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003910:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003914:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003916:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800391a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800391c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003920:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003922:	2200      	movs	r2, #0
 8003924:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003926:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8003928:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800392a:	2a00      	cmp	r2, #0
 800392c:	d16c      	bne.n	8003a08 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800392e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003930:	f640 74fc 	movw	r4, #4092	; 0xffc
 8003934:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8003938:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800393c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800393e:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8003942:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003944:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8003948:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800394a:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800394e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003950:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003954:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003958:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800395a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800395c:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800395e:	7e0a      	ldrb	r2, [r1, #24]
 8003960:	f002 0207 	and.w	r2, r2, #7
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003964:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003966:	3202      	adds	r2, #2
 8003968:	fa03 f202 	lsl.w	r2, r3, r2
 800396c:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800396e:	7a0b      	ldrb	r3, [r1, #8]
 8003970:	f003 040f 	and.w	r4, r3, #15
 8003974:	2301      	movs	r3, #1
 8003976:	40a3      	lsls	r3, r4
 8003978:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800397a:	0a5b      	lsrs	r3, r3, #9
 800397c:	4353      	muls	r3, r2
 800397e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003980:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003984:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003986:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003988:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800398c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800398e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003996:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003998:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800399a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800399c:	0fda      	lsrs	r2, r3, #31
 800399e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80039a0:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80039a4:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80039a6:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80039aa:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80039ac:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80039b0:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80039b2:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80039b6:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80039ba:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80039bc:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80039c0:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80039c4:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80039c8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80039cc:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80039d0:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80039d4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80039d8:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80039dc:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80039e0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80039e4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039e8:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80039ec:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039f0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80039f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039f8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80039fc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8003a06:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a08:	2a01      	cmp	r2, #1
 8003a0a:	d10f      	bne.n	8003a2c <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a0c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a1a:	690b      	ldr	r3, [r1, #16]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a22:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a28:	6583      	str	r3, [r0, #88]	; 0x58
 8003a2a:	e7ab      	b.n	8003984 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a2c:	6803      	ldr	r3, [r0, #0]
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <HAL_SD_GetCardCSD+0x168>)
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003a40:	4618      	mov	r0, r3
 8003a42:	e7e0      	b.n	8003a06 <HAL_SD_GetCardCSD+0x12a>
 8003a44:	004005ff 	.word	0x004005ff

08003a48 <HAL_SD_InitCard>:
{
 8003a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003a4c:	2300      	movs	r3, #0
{
 8003a4e:	b098      	sub	sp, #96	; 0x60
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003a50:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003a54:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a58:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003a5a:	2376      	movs	r3, #118	; 0x76
 8003a5c:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8003a5e:	ab0a      	add	r3, sp, #40	; 0x28
{
 8003a60:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 8003a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003a6a:	ab07      	add	r3, sp, #28
 8003a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a6e:	6820      	ldr	r0, [r4, #0]
 8003a70:	f001 fda5 	bl	80055be <SDIO_Init>
  if(status != HAL_OK)
 8003a74:	4605      	mov	r5, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	f040 80df 	bne.w	8003c3a <HAL_SD_InitCard+0x1f2>
  __HAL_SD_DISABLE(hsd);
 8003a7c:	4f70      	ldr	r7, [pc, #448]	; (8003c40 <HAL_SD_InitCard+0x1f8>)
  __HAL_SD_ENABLE(hsd);
 8003a7e:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8003a80:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f001 fdbe 	bl	8005606 <SDIO_PowerState_ON>
  HAL_Delay(2);
 8003a8a:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8003a8c:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
  HAL_Delay(2);
 8003a90:	f7fe fd5a 	bl	8002548 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a94:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8003a96:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a98:	f001 fde6 	bl	8005668 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	b940      	cbnz	r0, 8003ab2 <HAL_SD_InitCard+0x6a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	f002 f8af 	bl	8005c04 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa6:	b170      	cbz	r0, 8003ac6 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003aa8:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003aaa:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003aac:	f001 fddc 	bl	8005668 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ab0:	b190      	cbz	r0, 8003ad8 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8003ab2:	2501      	movs	r5, #1
 8003ab4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aba:	4303      	orrs	r3, r0
 8003abc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003abe:	4628      	mov	r0, r5
 8003ac0:	b018      	add	sp, #96	; 0x60
 8003ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ac6:	64a6      	str	r6, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	2100      	movs	r1, #0
 8003acc:	f001 ff2c 	bl	8005928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ad0:	b128      	cbz	r0, 8003ade <HAL_SD_InitCard+0x96>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ad2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003ad6:	e7ec      	b.n	8003ab2 <HAL_SD_InitCard+0x6a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d0f4      	beq.n	8003ac8 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003ade:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8003c48 <HAL_SD_InitCard+0x200>
{
 8003ae2:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ae4:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8003ae8:	e014      	b.n	8003b14 <HAL_SD_InitCard+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003aea:	6820      	ldr	r0, [r4, #0]
 8003aec:	4631      	mov	r1, r6
 8003aee:	f001 ff1b 	bl	8005928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d1dd      	bne.n	8003ab2 <HAL_SD_InitCard+0x6a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	4641      	mov	r1, r8
 8003afa:	f001 ffe5 	bl	8005ac8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d1e7      	bne.n	8003ad2 <HAL_SD_InitCard+0x8a>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b02:	4631      	mov	r1, r6
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	f001 fd99 	bl	800563c <SDIO_GetResponse>
    count++;
 8003b0a:	9b06      	ldr	r3, [sp, #24]
 8003b0c:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b0e:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b10:	0fc6      	lsrs	r6, r0, #31
    count++;
 8003b12:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b14:	9b06      	ldr	r3, [sp, #24]
 8003b16:	42bb      	cmp	r3, r7
 8003b18:	d801      	bhi.n	8003b1e <HAL_SD_InitCard+0xd6>
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	d0e5      	beq.n	8003aea <HAL_SD_InitCard+0xa2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003b1e:	9b06      	ldr	r3, [sp, #24]
 8003b20:	42bb      	cmp	r3, r7
 8003b22:	d80c      	bhi.n	8003b3e <HAL_SD_InitCard+0xf6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b24:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8003b28:	2301      	movs	r3, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003b2a:	6820      	ldr	r0, [r4, #0]
 8003b2c:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8003b2e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003b32:	f001 fd6c 	bl	800560e <SDIO_GetPowerState>
 8003b36:	b928      	cbnz	r0, 8003b44 <HAL_SD_InitCard+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b38:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003b3c:	e7b9      	b.n	8003ab2 <HAL_SD_InitCard+0x6a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b3e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8003b42:	e7b6      	b.n	8003ab2 <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d043      	beq.n	8003bd2 <HAL_SD_InitCard+0x18a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	f001 ff72 	bl	8005a34 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d1ae      	bne.n	8003ab2 <HAL_SD_InitCard+0x6a>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b54:	4601      	mov	r1, r0
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	f001 fd70 	bl	800563c <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b5c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b5e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	f001 fd6b 	bl	800563c <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b66:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b68:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	f001 fd66 	bl	800563c <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b70:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b72:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f001 fd61 	bl	800563c <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b7c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d026      	beq.n	8003bd2 <HAL_SD_InitCard+0x18a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	f10d 0116 	add.w	r1, sp, #22
 8003b8a:	f001 fff9 	bl	8005b80 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d18f      	bne.n	8003ab2 <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b92:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b94:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d01b      	beq.n	8003bd2 <HAL_SD_InitCard+0x18a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b9a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8003b9e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ba0:	0409      	lsls	r1, r1, #16
 8003ba2:	f001 ff5c 	bl	8005a5e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d183      	bne.n	8003ab2 <HAL_SD_InitCard+0x6a>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003baa:	4601      	mov	r1, r0
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	f001 fd45 	bl	800563c <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003bb2:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bb4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	f001 fd40 	bl	800563c <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003bbc:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003bbe:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	f001 fd3b 	bl	800563c <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003bc6:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003bc8:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	f001 fd36 	bl	800563c <SDIO_GetResponse>
 8003bd0:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	f001 fd31 	bl	800563c <SDIO_GetResponse>
 8003bda:	0d00      	lsrs	r0, r0, #20
 8003bdc:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003bde:	a90d      	add	r1, sp, #52	; 0x34
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7ff fe7b 	bl	80038dc <HAL_SD_GetCardCSD>
 8003be6:	4605      	mov	r5, r0
 8003be8:	2800      	cmp	r0, #0
 8003bea:	f47f af72 	bne.w	8003ad2 <HAL_SD_InitCard+0x8a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003bee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	0412      	lsls	r2, r2, #16
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	f001 fe7f 	bl	80058f8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	f47f af59 	bne.w	8003ab2 <HAL_SD_InitCard+0x6a>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003c00:	f104 0310 	add.w	r3, r4, #16
 8003c04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003c0c:	1d23      	adds	r3, r4, #4
 8003c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c10:	6820      	ldr	r0, [r4, #0]
 8003c12:	f001 fcd4 	bl	80055be <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c1c:	f001 fdda 	bl	80057d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f43f af4c 	beq.w	8003abe <HAL_SD_InitCard+0x76>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <HAL_SD_InitCard+0x1fc>)
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c2e:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 8003c30:	4318      	orrs	r0, r3
 8003c32:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c34:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003c38:	e741      	b.n	8003abe <HAL_SD_InitCard+0x76>
    return HAL_ERROR;
 8003c3a:	2501      	movs	r5, #1
 8003c3c:	e73f      	b.n	8003abe <HAL_SD_InitCard+0x76>
 8003c3e:	bf00      	nop
 8003c40:	42258000 	.word	0x42258000
 8003c44:	004005ff 	.word	0x004005ff
 8003c48:	c1100000 	.word	0xc1100000

08003c4c <HAL_SD_Init>:
{
 8003c4c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8003c4e:	4604      	mov	r4, r0
 8003c50:	b908      	cbnz	r0, 8003c56 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
}
 8003c54:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8003c56:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003c5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c5e:	b913      	cbnz	r3, 8003c66 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8003c60:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003c62:	f7fd fdad 	bl	80017c0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8003c66:	2303      	movs	r3, #3
 8003c68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff feeb 	bl	8003a48 <HAL_SD_InitCard>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d1ed      	bne.n	8003c52 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8003c76:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c78:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003c7a:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003c7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003c80:	e7e8      	b.n	8003c54 <HAL_SD_Init+0x8>

08003c82 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003c82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c84:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003c86:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003c88:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003c8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003c8c:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003c8e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003c90:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003c92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003c94:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003c96:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003c98:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c9a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003c9c:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c9e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003ca0:	61cb      	str	r3, [r1, #28]
}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_SD_ConfigWideBusOperation>:
{
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8003caa:	2303      	movs	r3, #3
 8003cac:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003cb2:	2b03      	cmp	r3, #3
{
 8003cb4:	b08b      	sub	sp, #44	; 0x2c
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cba:	d002      	beq.n	8003cc2 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003cbc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003cc0:	d103      	bne.n	8003cca <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	e05d      	b.n	8003d86 <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003cca:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cce:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003cd0:	d137      	bne.n	8003d42 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cd8:	f001 fcb0 	bl	800563c <SDIO_GetResponse>
 8003cdc:	0180      	lsls	r0, r0, #6
 8003cde:	d449      	bmi.n	8003d74 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8003ce0:	a904      	add	r1, sp, #16
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f7ff fc4b 	bl	800357e <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ce8:	b960      	cbnz	r0, 8003d04 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003cea:	9b05      	ldr	r3, [sp, #20]
 8003cec:	0359      	lsls	r1, r3, #13
 8003cee:	d544      	bpl.n	8003d7a <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cf0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	0409      	lsls	r1, r1, #16
 8003cf6:	f001 fe17 	bl	8005928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	b918      	cbnz	r0, 8003d04 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003cfc:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003cfe:	6820      	ldr	r0, [r4, #0]
 8003d00:	f001 fe2a 	bl	8005958 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8003d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d06:	4318      	orrs	r0, r3
 8003d08:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003d0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d0c:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d03b      	beq.n	8003d8a <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_SD_ConfigWideBusOperation+0x110>)
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d16:	2501      	movs	r5, #1
 8003d18:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d22:	f001 fd57 	bl	80057d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d26:	b130      	cbz	r0, 8003d36 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_SD_ConfigWideBusOperation+0x110>)
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d30:	4318      	orrs	r0, r3
 8003d32:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8003d34:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003d36:	2301      	movs	r3, #1
}
 8003d38:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003d3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003d3e:	b00b      	add	sp, #44	; 0x2c
 8003d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003d42:	b9e9      	cbnz	r1, 8003d80 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8003d44:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d48:	f001 fc78 	bl	800563c <SDIO_GetResponse>
 8003d4c:	0182      	lsls	r2, r0, #6
 8003d4e:	d411      	bmi.n	8003d74 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8003d50:	a904      	add	r1, sp, #16
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fc13 	bl	800357e <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d1d3      	bne.n	8003d04 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d5c:	9b05      	ldr	r3, [sp, #20]
 8003d5e:	03db      	lsls	r3, r3, #15
 8003d60:	d50b      	bpl.n	8003d7a <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d62:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003d64:	6820      	ldr	r0, [r4, #0]
 8003d66:	0409      	lsls	r1, r1, #16
 8003d68:	f001 fdde 	bl	8005928 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d1c9      	bne.n	8003d04 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d70:	4601      	mov	r1, r0
 8003d72:	e7c4      	b.n	8003cfe <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d78:	e7c4      	b.n	8003d04 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d7a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003d7e:	e7c1      	b.n	8003d04 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d86:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d88:	e7bf      	b.n	8003d0a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003d92:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8003d94:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003d98:	6963      	ldr	r3, [r4, #20]
 8003d9a:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003d9c:	69a3      	ldr	r3, [r4, #24]
 8003d9e:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8003da0:	ab0a      	add	r3, sp, #40	; 0x28
 8003da2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003da6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003daa:	ab04      	add	r3, sp, #16
 8003dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dae:	4638      	mov	r0, r7
 8003db0:	f001 fc05 	bl	80055be <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	4635      	mov	r5, r6
 8003db6:	e7b1      	b.n	8003d1c <HAL_SD_ConfigWideBusOperation+0x74>
 8003db8:	004005ff 	.word	0x004005ff

08003dbc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dbc:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003dbe:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dc0:	0409      	lsls	r1, r1, #16
{
 8003dc2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	f001 fdf7 	bl	80059b8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dca:	4601      	mov	r1, r0
 8003dcc:	b928      	cbnz	r0, 8003dda <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	f001 fc34 	bl	800563c <SDIO_GetResponse>
}
 8003dd4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003dd8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003dda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ddc:	4308      	orrs	r0, r1
 8003dde:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8003de0:	2000      	movs	r0, #0
 8003de2:	e7f7      	b.n	8003dd4 <HAL_SD_GetCardState+0x18>

08003de4 <SD_DMAError>:
{
 8003de4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003de6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003de8:	f7ff f81e 	bl	8002e28 <HAL_DMA_GetError>
 8003dec:	2802      	cmp	r0, #2
 8003dee:	d026      	beq.n	8003e3e <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003df4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003df6:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003dfa:	d001      	beq.n	8003e00 <SD_DMAError+0x1c>
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d11b      	bne.n	8003e38 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <SD_DMAError+0x5c>)
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e14:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7ff ffd0 	bl	8003dbc <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e1c:	3805      	subs	r0, #5
 8003e1e:	2801      	cmp	r0, #1
 8003e20:	d805      	bhi.n	8003e2e <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	f001 fd4e 	bl	80058c4 <SDMMC_CmdStopTransfer>
 8003e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e2a:	4318      	orrs	r0, r3
 8003e2c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff fd2d 	bl	8003898 <HAL_SD_ErrorCallback>
}
 8003e3e:	bd10      	pop	{r4, pc}
 8003e40:	004005ff 	.word	0x004005ff

08003e44 <SD_DMATxAbort>:
{
 8003e44:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e46:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff ffb3 	bl	8003dbc <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003e56:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e58:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8003e5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e5e:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e66:	d805      	bhi.n	8003e74 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	f001 fd2b 	bl	80058c4 <SDMMC_CmdStopTransfer>
 8003e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e70:	4318      	orrs	r0, r3
 8003e72:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8003e76:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e78:	b913      	cbnz	r3, 8003e80 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8003e7a:	f001 ff22 	bl	8005cc2 <HAL_SD_AbortCallback>
}
 8003e7e:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8003e80:	f7ff fd0a 	bl	8003898 <HAL_SD_ErrorCallback>
}
 8003e84:	e7fb      	b.n	8003e7e <SD_DMATxAbort+0x3a>
	...

08003e88 <HAL_SD_IRQHandler>:
{
 8003e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8003e8c:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8003e8e:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e94:	041a      	lsls	r2, r3, #16
 8003e96:	d51f      	bpl.n	8003ed8 <HAL_SD_IRQHandler+0x50>
 8003e98:	072b      	lsls	r3, r5, #28
 8003e9a:	d51d      	bpl.n	8003ed8 <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8003e9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8003e9e:	b1c7      	cbz	r7, 8003ed2 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8003ea0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ea2:	1d35      	adds	r5, r6, #4
 8003ea4:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	f001 fba4 	bl	80055f6 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003eae:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 8003eb0:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003eb4:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003eb8:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003eba:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003ebc:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003ec0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 8003ec4:	3504      	adds	r5, #4
 8003ec6:	4545      	cmp	r5, r8
 8003ec8:	d1ee      	bne.n	8003ea8 <HAL_SD_IRQHandler+0x20>
      tmp++;
 8003eca:	3620      	adds	r6, #32
      dataremaining--;
 8003ecc:	3f20      	subs	r7, #32
    }

    hsd->pRxBuffPtr = tmp;
 8003ece:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003ed0:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8003ed2:	b002      	add	sp, #8
 8003ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003ed8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003eda:	05df      	lsls	r7, r3, #23
 8003edc:	d545      	bpl.n	8003f6a <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003ee4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003ee6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003eea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003eee:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003ef0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003ef2:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003efa:	d51b      	bpl.n	8003f34 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003efc:	f015 0f22 	tst.w	r5, #34	; 0x22
 8003f00:	d008      	beq.n	8003f14 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f02:	f001 fcdf 	bl	80058c4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f06:	b128      	cbz	r0, 8003f14 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 8003f08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f0a:	4318      	orrs	r0, r3
 8003f0c:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff fcc2 	bl	8003898 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003f22:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 8003f2a:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003f2c:	d01a      	beq.n	8003f64 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 8003f2e:	f001 fed0 	bl	8005cd2 <HAL_SD_RxCpltCallback>
 8003f32:	e7ce      	b.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003f34:	062a      	lsls	r2, r5, #24
 8003f36:	d5cc      	bpl.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003f38:	06ab      	lsls	r3, r5, #26
 8003f3a:	d508      	bpl.n	8003f4e <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f3c:	f001 fcc2 	bl	80058c4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f40:	b128      	cbz	r0, 8003f4e <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8003f42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f44:	4318      	orrs	r0, r3
 8003f46:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7ff fca5 	bl	8003898 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003f4e:	07af      	lsls	r7, r5, #30
 8003f50:	d1bf      	bne.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f56:	f023 0308 	bic.w	r3, r3, #8
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f62:	4620      	mov	r0, r4
 8003f64:	f001 feb1 	bl	8005cca <HAL_SD_TxCpltCallback>
 8003f68:	e7b3      	b.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f6c:	045e      	lsls	r6, r3, #17
 8003f6e:	d526      	bpl.n	8003fbe <HAL_SD_IRQHandler+0x136>
 8003f70:	0729      	lsls	r1, r5, #28
 8003f72:	d524      	bpl.n	8003fbe <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8003f74:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8003f76:	2f00      	cmp	r7, #0
 8003f78:	d0ab      	beq.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 8003f7a:	6a26      	ldr	r6, [r4, #32]
 8003f7c:	1d35      	adds	r5, r6, #4
 8003f7e:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8003f82:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8003f86:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8003f88:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003f8c:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 8003f8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f92:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8003f94:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8003f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f9c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8003f9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003fa2:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8003fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 8003fa8:	3504      	adds	r5, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8003faa:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003fac:	f001 fb26 	bl	80055fc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003fb0:	4545      	cmp	r5, r8
 8003fb2:	d1e6      	bne.n	8003f82 <HAL_SD_IRQHandler+0xfa>
      tmp++;
 8003fb4:	3620      	adds	r6, #32
      dataremaining--;
 8003fb6:	3f20      	subs	r7, #32
    }

    hsd->pTxBuffPtr = tmp;
 8003fb8:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8003fba:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 8003fbc:	e789      	b.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003fbe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003fc0:	f240 233a 	movw	r3, #570	; 0x23a
 8003fc4:	421a      	tst	r2, r3
 8003fc6:	d084      	beq.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003fc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fca:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003fcc:	bf42      	ittt	mi
 8003fce:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003fd0:	f043 0302 	orrmi.w	r3, r3, #2
 8003fd4:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003fd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fd8:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003fda:	bf42      	ittt	mi
 8003fdc:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003fde:	f043 0308 	orrmi.w	r3, r3, #8
 8003fe2:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003fe4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fe6:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fe8:	bf42      	ittt	mi
 8003fea:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003fec:	f043 0320 	orrmi.w	r3, r3, #32
 8003ff0:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003ff2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ff4:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ff6:	bf42      	ittt	mi
 8003ff8:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003ffa:	f043 0310 	orrmi.w	r3, r3, #16
 8003ffe:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004000:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004002:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004004:	bf42      	ittt	mi
 8004006:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8004008:	f043 0308 	orrmi.w	r3, r3, #8
 800400c:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800400e:	f240 733a 	movw	r3, #1850	; 0x73a
 8004012:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004014:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004016:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800401a:	f023 0302 	bic.w	r3, r3, #2
 800401e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004020:	f001 fc50 	bl	80058c4 <SDMMC_CmdStopTransfer>
 8004024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004026:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004028:	ea40 0003 	orr.w	r0, r0, r3
 800402c:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800402e:	d508      	bpl.n	8004042 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8004030:	2301      	movs	r3, #1
 8004032:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004036:	2300      	movs	r3, #0
 8004038:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800403a:	4620      	mov	r0, r4
 800403c:	f7ff fc2c 	bl	8003898 <HAL_SD_ErrorCallback>
 8004040:	e747      	b.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004042:	062b      	lsls	r3, r5, #24
 8004044:	f57f af45 	bpl.w	8003ed2 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004048:	f015 0f30 	tst.w	r5, #48	; 0x30
 800404c:	d00d      	beq.n	800406a <HAL_SD_IRQHandler+0x1e2>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800404e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_SD_IRQHandler+0x210>)
 8004052:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004054:	f7fe fe18 	bl	8002c88 <HAL_DMA_Abort_IT>
 8004058:	2800      	cmp	r0, #0
 800405a:	f43f af3a 	beq.w	8003ed2 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 800405e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8004060:	b002      	add	sp, #8
 8004062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8004066:	f7ff beed 	b.w	8003e44 <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800406a:	f015 0503 	ands.w	r5, r5, #3
 800406e:	d009      	beq.n	8004084 <HAL_SD_IRQHandler+0x1fc>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004070:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_SD_IRQHandler+0x214>)
 8004074:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004076:	f7fe fe07 	bl	8002c88 <HAL_DMA_Abort_IT>
 800407a:	2800      	cmp	r0, #0
 800407c:	f43f af29 	beq.w	8003ed2 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 8004080:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004082:	e7ed      	b.n	8004060 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 8004084:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004086:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8004088:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 800408a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800408e:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004090:	f001 fe17 	bl	8005cc2 <HAL_SD_AbortCallback>
}
 8004094:	e71d      	b.n	8003ed2 <HAL_SD_IRQHandler+0x4a>
 8004096:	bf00      	nop
 8004098:	08003e45 	.word	0x08003e45
 800409c:	080040a1 	.word	0x080040a1

080040a0 <SD_DMARxAbort>:
 80040a0:	f7ff bed0 	b.w	8003e44 <SD_DMATxAbort>

080040a4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80040a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80040a8:	461d      	mov	r5, r3
 80040aa:	4617      	mov	r7, r2
 80040ac:	4688      	mov	r8, r1
 80040ae:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040b0:	f7fe fa44 	bl	800253c <HAL_GetTick>
 80040b4:	443d      	add	r5, r7
 80040b6:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 80040b8:	f7fe fa40 	bl	800253c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80040c4:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040c6:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c8:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80040ca:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040cc:	6893      	ldr	r3, [r2, #8]
 80040ce:	ea38 0303 	bics.w	r3, r8, r3
 80040d2:	d001      	beq.n	80040d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80040d4:	2000      	movs	r0, #0
 80040d6:	e02d      	b.n	8004134 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 80040d8:	1c7b      	adds	r3, r7, #1
 80040da:	d0f7      	beq.n	80040cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040dc:	f7fe fa2e 	bl	800253c <HAL_GetTick>
 80040e0:	1b40      	subs	r0, r0, r5
 80040e2:	42a0      	cmp	r0, r4
 80040e4:	d329      	bcc.n	800413a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e6:	6833      	ldr	r3, [r6, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040ee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f0:	6872      	ldr	r2, [r6, #4]
 80040f2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80040f6:	d10a      	bne.n	800410e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 80040f8:	68b2      	ldr	r2, [r6, #8]
 80040fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80040fe:	d002      	beq.n	8004106 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004100:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004104:	d103      	bne.n	800410e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800410e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004110:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004114:	d107      	bne.n	8004126 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004124:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004126:	2301      	movs	r3, #1
 8004128:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800412c:	2300      	movs	r3, #0
 800412e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        return HAL_TIMEOUT;
 8004132:	2003      	movs	r0, #3
}
 8004134:	b002      	add	sp, #8
 8004136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 800413a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800413c:	2b00      	cmp	r3, #0
      count--;
 800413e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004140:	bf08      	it	eq
 8004142:	2400      	moveq	r4, #0
      count--;
 8004144:	3b01      	subs	r3, #1
 8004146:	e7bf      	b.n	80040c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004148:	20000008 	.word	0x20000008

0800414c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800414e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <SPI_EndRxTxTransaction+0x50>)
 8004152:	6815      	ldr	r5, [r2, #0]
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <SPI_EndRxTxTransaction+0x54>)
 8004156:	fbb5 f5f2 	udiv	r5, r5, r2
 800415a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800415e:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004160:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004162:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004164:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8004168:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800416a:	d10b      	bne.n	8004184 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	460a      	mov	r2, r1
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	f7ff ff98 	bl	80040a4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004174:	b178      	cbz	r0, 8004196 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004176:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004178:	f043 0320 	orr.w	r3, r3, #32
 800417c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800417e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8004180:	b003      	add	sp, #12
 8004182:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8004184:	9b01      	ldr	r3, [sp, #4]
 8004186:	b133      	cbz	r3, 8004196 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8004188:	9b01      	ldr	r3, [sp, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	d4f6      	bmi.n	8004184 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8004196:	2000      	movs	r0, #0
 8004198:	e7f2      	b.n	8004180 <SPI_EndRxTxTransaction+0x34>
 800419a:	bf00      	nop
 800419c:	20000008 	.word	0x20000008
 80041a0:	016e3600 	.word	0x016e3600

080041a4 <HAL_SPI_Init>:
{
 80041a4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80041a6:	4604      	mov	r4, r0
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d055      	beq.n	8004258 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d14e      	bne.n	8004250 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b2:	6842      	ldr	r2, [r0, #4]
 80041b4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80041b8:	d000      	beq.n	80041bc <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041ba:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80041c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041c8:	b923      	cbnz	r3, 80041d4 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80041ca:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7fd fbf2 	bl	80019b8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80041d4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041d6:	68a0      	ldr	r0, [r4, #8]
 80041d8:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80041e0:	680b      	ldr	r3, [r1, #0]
 80041e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80041ee:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80041f2:	4303      	orrs	r3, r0
 80041f4:	68e0      	ldr	r0, [r4, #12]
 80041f6:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80041fa:	4303      	orrs	r3, r0
 80041fc:	6920      	ldr	r0, [r4, #16]
 80041fe:	f000 0002 	and.w	r0, r0, #2
 8004202:	4303      	orrs	r3, r0
 8004204:	6960      	ldr	r0, [r4, #20]
 8004206:	f000 0001 	and.w	r0, r0, #1
 800420a:	4303      	orrs	r3, r0
 800420c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8004210:	4303      	orrs	r3, r0
 8004212:	69e0      	ldr	r0, [r4, #28]
 8004214:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004218:	4303      	orrs	r3, r0
 800421a:	6a20      	ldr	r0, [r4, #32]
 800421c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004220:	4303      	orrs	r3, r0
 8004222:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004224:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004228:	4303      	orrs	r3, r0
 800422a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800422c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800422e:	0c12      	lsrs	r2, r2, #16
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	f002 0204 	and.w	r2, r2, #4
 8004238:	431a      	orrs	r2, r3
 800423a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800423c:	69cb      	ldr	r3, [r1, #28]
 800423e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004242:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004244:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004246:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004248:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800424a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800424e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004250:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004256:	e7b1      	b.n	80041bc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004258:	2001      	movs	r0, #1
 800425a:	e7f8      	b.n	800424e <HAL_SPI_Init+0xaa>

0800425c <HAL_SPI_Transmit>:
{
 800425c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004260:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004262:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004266:	2b01      	cmp	r3, #1
{
 8004268:	4604      	mov	r4, r0
 800426a:	460d      	mov	r5, r1
 800426c:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 800426e:	f000 80a1 	beq.w	80043b4 <HAL_SPI_Transmit+0x158>
 8004272:	2301      	movs	r3, #1
 8004274:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004278:	f7fe f960 	bl	800253c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800427c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004280:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004282:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004284:	b2d8      	uxtb	r0, r3
 8004286:	f040 8093 	bne.w	80043b0 <HAL_SPI_Transmit+0x154>
  if ((pData == NULL) || (Size == 0U))
 800428a:	2d00      	cmp	r5, #0
 800428c:	d05e      	beq.n	800434c <HAL_SPI_Transmit+0xf0>
 800428e:	2f00      	cmp	r7, #0
 8004290:	d05c      	beq.n	800434c <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004292:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004294:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004296:	2303      	movs	r3, #3
 8004298:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80042a6:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80042aa:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ac:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042b2:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 80042b4:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b6:	d107      	bne.n	80042c8 <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c8:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042ca:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042cc:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80042ce:	bf5e      	ittt	pl
 80042d0:	681a      	ldrpl	r2, [r3, #0]
 80042d2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80042d6:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042d8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042dc:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042de:	d141      	bne.n	8004364 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e0:	b10a      	cbz	r2, 80042e6 <HAL_SPI_Transmit+0x8a>
 80042e2:	2f01      	cmp	r7, #1
 80042e4:	d107      	bne.n	80042f6 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80042ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80042ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80042f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	b9a3      	cbnz	r3, 8004326 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042fc:	4642      	mov	r2, r8
 80042fe:	4631      	mov	r1, r6
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff ff23 	bl	800414c <SPI_EndRxTxTransaction>
 8004306:	2800      	cmp	r0, #0
 8004308:	d14f      	bne.n	80043aa <HAL_SPI_Transmit+0x14e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800430a:	68a3      	ldr	r3, [r4, #8]
 800430c:	b933      	cbnz	r3, 800431c <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	9201      	str	r2, [sp, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800431e:	3800      	subs	r0, #0
 8004320:	bf18      	it	ne
 8004322:	2001      	movne	r0, #1
error:
 8004324:	e012      	b.n	800434c <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	6893      	ldr	r3, [r2, #8]
 800432a:	0798      	lsls	r0, r3, #30
 800432c:	d505      	bpl.n	800433a <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004330:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004334:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004336:	6323      	str	r3, [r4, #48]	; 0x30
 8004338:	e7d9      	b.n	80042ee <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800433a:	f7fe f8ff 	bl	800253c <HAL_GetTick>
 800433e:	eba0 0008 	sub.w	r0, r0, r8
 8004342:	42b0      	cmp	r0, r6
 8004344:	d30b      	bcc.n	800435e <HAL_SPI_Transmit+0x102>
 8004346:	1c71      	adds	r1, r6, #1
 8004348:	d0d5      	beq.n	80042f6 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800434a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800434c:	2301      	movs	r3, #1
 800434e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004352:	2300      	movs	r3, #0
 8004354:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004358:	b002      	add	sp, #8
 800435a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800435e:	2e00      	cmp	r6, #0
 8004360:	d1c9      	bne.n	80042f6 <HAL_SPI_Transmit+0x9a>
 8004362:	e7f2      	b.n	800434a <HAL_SPI_Transmit+0xee>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004364:	b10a      	cbz	r2, 800436a <HAL_SPI_Transmit+0x10e>
 8004366:	2f01      	cmp	r7, #1
 8004368:	d108      	bne.n	800437c <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436a:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800436e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004370:	3301      	adds	r3, #1
 8004372:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004374:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004376:	3b01      	subs	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800437c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0bb      	beq.n	80042fc <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	0792      	lsls	r2, r2, #30
 800438a:	d502      	bpl.n	8004392 <HAL_SPI_Transmit+0x136>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800438c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	e7ec      	b.n	800436c <HAL_SPI_Transmit+0x110>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004392:	f7fe f8d3 	bl	800253c <HAL_GetTick>
 8004396:	eba0 0008 	sub.w	r0, r0, r8
 800439a:	42b0      	cmp	r0, r6
 800439c:	d302      	bcc.n	80043a4 <HAL_SPI_Transmit+0x148>
 800439e:	1c73      	adds	r3, r6, #1
 80043a0:	d0ec      	beq.n	800437c <HAL_SPI_Transmit+0x120>
 80043a2:	e7d2      	b.n	800434a <HAL_SPI_Transmit+0xee>
 80043a4:	2e00      	cmp	r6, #0
 80043a6:	d1e9      	bne.n	800437c <HAL_SPI_Transmit+0x120>
 80043a8:	e7cf      	b.n	800434a <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043aa:	2320      	movs	r3, #32
 80043ac:	6563      	str	r3, [r4, #84]	; 0x54
 80043ae:	e7ac      	b.n	800430a <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80043b0:	2002      	movs	r0, #2
 80043b2:	e7cb      	b.n	800434c <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 80043b4:	2002      	movs	r0, #2
 80043b6:	e7cf      	b.n	8004358 <HAL_SPI_Transmit+0xfc>

080043b8 <HAL_SPI_Transmit_DMA>:
{
 80043b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 80043ba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80043be:	2b01      	cmp	r3, #1
{
 80043c0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80043c2:	d054      	beq.n	800446e <HAL_SPI_Transmit_DMA+0xb6>
 80043c4:	2301      	movs	r3, #1
 80043c6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80043ca:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	b2dd      	uxtb	r5, r3
 80043d2:	d14a      	bne.n	800446a <HAL_SPI_Transmit_DMA+0xb2>
  if ((pData == NULL) || (Size == 0U))
 80043d4:	2900      	cmp	r1, #0
 80043d6:	d031      	beq.n	800443c <HAL_SPI_Transmit_DMA+0x84>
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d02f      	beq.n	800443c <HAL_SPI_Transmit_DMA+0x84>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043dc:	2303      	movs	r3, #3
 80043de:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->RxISR       = NULL;
 80043e6:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 80043ea:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ec:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043ee:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043f0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f2:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 80043f4:	8682      	strh	r2, [r0, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 80043fa:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043fc:	6301      	str	r1, [r0, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fe:	d107      	bne.n	8004410 <HAL_SPI_Transmit_DMA+0x58>
    __HAL_SPI_DISABLE(hspi);
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004406:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440e:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004410:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004412:	4b18      	ldr	r3, [pc, #96]	; (8004474 <HAL_SPI_Transmit_DMA+0xbc>)
 8004414:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004416:	4b18      	ldr	r3, [pc, #96]	; (8004478 <HAL_SPI_Transmit_DMA+0xc0>)
 8004418:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <HAL_SPI_Transmit_DMA+0xc4>)
 800441c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	6503      	str	r3, [r0, #80]	; 0x50
                                 hspi->TxXferCount))
 8004422:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004424:	320c      	adds	r2, #12
 8004426:	b29b      	uxth	r3, r3
 8004428:	f7fe fbb0 	bl	8002b8c <HAL_DMA_Start_IT>
 800442c:	b158      	cbz	r0, 8004446 <HAL_SPI_Transmit_DMA+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800442e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004430:	f043 0310 	orr.w	r3, r3, #16
 8004434:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8004436:	2301      	movs	r3, #1
 8004438:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800443c:	2300      	movs	r3, #0
 800443e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004442:	4628      	mov	r0, r5
 8004444:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800444c:	bf5e      	ittt	pl
 800444e:	681a      	ldrpl	r2, [r3, #0]
 8004450:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004454:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	f042 0220 	orr.w	r2, r2, #32
 800445c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	f042 0202 	orr.w	r2, r2, #2
 8004464:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004466:	2500      	movs	r5, #0
 8004468:	e7e8      	b.n	800443c <HAL_SPI_Transmit_DMA+0x84>
    errorcode = HAL_BUSY;
 800446a:	2502      	movs	r5, #2
 800446c:	e7e6      	b.n	800443c <HAL_SPI_Transmit_DMA+0x84>
  __HAL_LOCK(hspi);
 800446e:	2502      	movs	r5, #2
 8004470:	e7e7      	b.n	8004442 <HAL_SPI_Transmit_DMA+0x8a>
 8004472:	bf00      	nop
 8004474:	08004485 	.word	0x08004485
 8004478:	080044b3 	.word	0x080044b3
 800447c:	08004491 	.word	0x08004491

08004480 <HAL_SPI_TxCpltCallback>:
 8004480:	4770      	bx	lr

08004482 <HAL_SPI_TxHalfCpltCallback>:
 8004482:	4770      	bx	lr

08004484 <SPI_DMAHalfTransmitCplt>:
{
 8004484:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004486:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004488:	f7ff fffb 	bl	8004482 <HAL_SPI_TxHalfCpltCallback>
}
 800448c:	bd08      	pop	{r3, pc}

0800448e <HAL_SPI_ErrorCallback>:
 800448e:	4770      	bx	lr

08004490 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004490:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004492:	6802      	ldr	r2, [r0, #0]
{
 8004494:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004496:	6853      	ldr	r3, [r2, #4]
 8004498:	f023 0303 	bic.w	r3, r3, #3
 800449c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800449e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80044a0:	f043 0310 	orr.w	r3, r3, #16
 80044a4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80044ac:	f7ff ffef 	bl	800448e <HAL_SPI_ErrorCallback>
}
 80044b0:	bd08      	pop	{r3, pc}

080044b2 <SPI_DMATransmitCplt>:
{
 80044b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044b4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80044b8:	f7fe f840 	bl	800253c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 80044c2:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044c4:	d426      	bmi.n	8004514 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	f021 0120 	bic.w	r1, r1, #32
 80044ce:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80044d0:	6859      	ldr	r1, [r3, #4]
 80044d2:	f021 0102 	bic.w	r1, r1, #2
 80044d6:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044d8:	4620      	mov	r0, r4
 80044da:	2164      	movs	r1, #100	; 0x64
 80044dc:	f7ff fe36 	bl	800414c <SPI_EndRxTxTransaction>
 80044e0:	b118      	cbz	r0, 80044ea <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044e4:	f043 0320 	orr.w	r3, r3, #32
 80044e8:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	b933      	cbnz	r3, 80044fc <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	9201      	str	r2, [sp, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004500:	2301      	movs	r3, #1
 8004502:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004506:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004508:	b123      	cbz	r3, 8004514 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff ffbf 	bl	800448e <HAL_SPI_ErrorCallback>
}
 8004510:	b003      	add	sp, #12
 8004512:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff ffb3 	bl	8004480 <HAL_SPI_TxCpltCallback>
 800451a:	e7f9      	b.n	8004510 <SPI_DMATransmitCplt+0x5e>

0800451c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451c:	6a03      	ldr	r3, [r0, #32]
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004524:	6a03      	ldr	r3, [r0, #32]
{
 8004526:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800452e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004532:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004534:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004536:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800453a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800453c:	4d0e      	ldr	r5, [pc, #56]	; (8004578 <TIM_OC1_SetConfig+0x5c>)
 800453e:	42a8      	cmp	r0, r5
 8004540:	d002      	beq.n	8004548 <TIM_OC1_SetConfig+0x2c>
 8004542:	4e0e      	ldr	r6, [pc, #56]	; (800457c <TIM_OC1_SetConfig+0x60>)
 8004544:	42b0      	cmp	r0, r6
 8004546:	d110      	bne.n	800456a <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004548:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800454a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800454e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004550:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004552:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	d002      	beq.n	800455e <TIM_OC1_SetConfig+0x42>
 8004558:	4d08      	ldr	r5, [pc, #32]	; (800457c <TIM_OC1_SetConfig+0x60>)
 800455a:	42a8      	cmp	r0, r5
 800455c:	d105      	bne.n	800456a <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800455e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004562:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004566:	4335      	orrs	r5, r6
 8004568:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800456e:	684a      	ldr	r2, [r1, #4]
 8004570:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	6203      	str	r3, [r0, #32]
}
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40010400 	.word	0x40010400

08004580 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004580:	6a03      	ldr	r3, [r0, #32]
 8004582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004586:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004588:	6a03      	ldr	r3, [r0, #32]
{
 800458a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004592:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004596:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004598:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800459a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800459e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045a2:	4d11      	ldr	r5, [pc, #68]	; (80045e8 <TIM_OC3_SetConfig+0x68>)
 80045a4:	42a8      	cmp	r0, r5
 80045a6:	d003      	beq.n	80045b0 <TIM_OC3_SetConfig+0x30>
 80045a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045ac:	42a8      	cmp	r0, r5
 80045ae:	d114      	bne.n	80045da <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	4d0b      	ldr	r5, [pc, #44]	; (80045e8 <TIM_OC3_SetConfig+0x68>)
 80045bc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80045be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	d003      	beq.n	80045cc <TIM_OC3_SetConfig+0x4c>
 80045c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045c8:	42a8      	cmp	r0, r5
 80045ca:	d106      	bne.n	80045da <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045cc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d4:	4335      	orrs	r5, r6
 80045d6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045dc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045de:	684a      	ldr	r2, [r1, #4]
 80045e0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	6203      	str	r3, [r0, #32]
}
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000

080045ec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ec:	6a03      	ldr	r3, [r0, #32]
 80045ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f4:	6a03      	ldr	r3, [r0, #32]
{
 80045f6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004602:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004606:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800460c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	4d08      	ldr	r5, [pc, #32]	; (8004634 <TIM_OC4_SetConfig+0x48>)
 8004612:	42a8      	cmp	r0, r5
 8004614:	d003      	beq.n	800461e <TIM_OC4_SetConfig+0x32>
 8004616:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800461a:	42a8      	cmp	r0, r5
 800461c:	d104      	bne.n	8004628 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800461e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004620:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004624:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004628:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800462c:	684a      	ldr	r2, [r1, #4]
 800462e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004630:	6203      	str	r3, [r0, #32]
}
 8004632:	bd30      	pop	{r4, r5, pc}
 8004634:	40010000 	.word	0x40010000

08004638 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004638:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800463c:	2b01      	cmp	r3, #1
 800463e:	d130      	bne.n	80046a2 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	2302      	movs	r3, #2
 8004642:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004646:	6803      	ldr	r3, [r0, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <HAL_TIM_Base_Start_IT+0x70>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01a      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d017      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 800465c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 8004664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 800466c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 8004674:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 800467c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x54>
 8004684:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004688:	4293      	cmp	r3, r2
 800468a:	d104      	bne.n	8004696 <HAL_TIM_Base_Start_IT+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	2a06      	cmp	r2, #6
 8004694:	d003      	beq.n	800469e <HAL_TIM_Base_Start_IT+0x66>
    __HAL_TIM_ENABLE(htim);
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800469e:	2000      	movs	r0, #0
}
 80046a0:	4770      	bx	lr
    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000

080046ac <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046ac:	6803      	ldr	r3, [r0, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80046b6:	6a19      	ldr	r1, [r3, #32]
 80046b8:	f241 1211 	movw	r2, #4369	; 0x1111
 80046bc:	4211      	tst	r1, r2
 80046be:	d108      	bne.n	80046d2 <HAL_TIM_Base_Stop_IT+0x26>
 80046c0:	6a19      	ldr	r1, [r3, #32]
 80046c2:	f240 4244 	movw	r2, #1092	; 0x444
 80046c6:	4211      	tst	r1, r2
 80046c8:	bf02      	ittt	eq
 80046ca:	681a      	ldreq	r2, [r3, #0]
 80046cc:	f022 0201 	biceq.w	r2, r2, #1
 80046d0:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80046d8:	2000      	movs	r0, #0
 80046da:	4770      	bx	lr

080046dc <HAL_TIM_PWM_MspInit>:
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_Encoder_Start>:
{
 80046de:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046e0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046e4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046e8:	f890 5042 	ldrb.w	r5, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046ec:	f890 4043 	ldrb.w	r4, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046f0:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046f2:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046f4:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046f6:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 80046f8:	b9c9      	cbnz	r1, 800472e <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046fa:	2a01      	cmp	r2, #1
 80046fc:	d146      	bne.n	800478c <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046fe:	2d01      	cmp	r5, #1
 8004700:	d146      	bne.n	8004790 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	2302      	movs	r3, #2
 8004704:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004708:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800470c:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004716:	6a1a      	ldr	r2, [r3, #32]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800471e:	6802      	ldr	r2, [r0, #0]
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800472e:	2904      	cmp	r1, #4
 8004730:	d111      	bne.n	8004756 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	2b01      	cmp	r3, #1
 8004734:	d12a      	bne.n	800478c <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004736:	2c01      	cmp	r4, #1
 8004738:	d1f7      	bne.n	800472a <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800473a:	2302      	movs	r3, #2
 800473c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004740:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004744:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	f022 0210 	bic.w	r2, r2, #16
 800474c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	f042 0210 	orr.w	r2, r2, #16
 8004754:	e7e2      	b.n	800471c <HAL_TIM_Encoder_Start+0x3e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	2a01      	cmp	r2, #1
 8004758:	d118      	bne.n	800478c <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800475a:	2b01      	cmp	r3, #1
 800475c:	d118      	bne.n	8004790 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	2d01      	cmp	r5, #1
 8004760:	d1e3      	bne.n	800472a <HAL_TIM_Encoder_Start+0x4c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004762:	2c01      	cmp	r4, #1
 8004764:	d1e1      	bne.n	800472a <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004766:	2302      	movs	r3, #2
 8004768:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800476c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004770:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004774:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004778:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	621a      	str	r2, [r3, #32]
 800478a:	e7dc      	b.n	8004746 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e7cc      	b.n	800472a <HAL_TIM_Encoder_Start+0x4c>
 8004790:	4613      	mov	r3, r2
 8004792:	e7ca      	b.n	800472a <HAL_TIM_Encoder_Start+0x4c>

08004794 <HAL_TIM_OC_DelayElapsedCallback>:
 8004794:	4770      	bx	lr

08004796 <HAL_TIM_IC_CaptureCallback>:
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_TriggerCallback>:
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800479c:	6803      	ldr	r3, [r0, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	0791      	lsls	r1, r2, #30
{
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047a6:	d50e      	bpl.n	80047c6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	0792      	lsls	r2, r2, #30
 80047ac:	d50b      	bpl.n	80047c6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ae:	f06f 0202 	mvn.w	r2, #2
 80047b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b4:	2201      	movs	r2, #1
 80047b6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	079b      	lsls	r3, r3, #30
 80047bc:	d077      	beq.n	80048ae <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80047be:	f7ff ffea 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	2300      	movs	r3, #0
 80047c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	0750      	lsls	r0, r2, #29
 80047cc:	d510      	bpl.n	80047f0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	0751      	lsls	r1, r2, #29
 80047d2:	d50d      	bpl.n	80047f0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047d4:	f06f 0204 	mvn.w	r2, #4
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047da:	2202      	movs	r2, #2
 80047dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80047e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e6:	d068      	beq.n	80048ba <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80047e8:	f7ff ffd5 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ec:	2300      	movs	r3, #0
 80047ee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	0712      	lsls	r2, r2, #28
 80047f6:	d50f      	bpl.n	8004818 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	0710      	lsls	r0, r2, #28
 80047fc:	d50c      	bpl.n	8004818 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047fe:	f06f 0208 	mvn.w	r2, #8
 8004802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004804:	2204      	movs	r2, #4
 8004806:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800480c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480e:	d05a      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004810:	f7ff ffc1 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004814:	2300      	movs	r3, #0
 8004816:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	06d2      	lsls	r2, r2, #27
 800481e:	d510      	bpl.n	8004842 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	06d0      	lsls	r0, r2, #27
 8004824:	d50d      	bpl.n	8004842 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004826:	f06f 0210 	mvn.w	r2, #16
 800482a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482c:	2208      	movs	r2, #8
 800482e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004838:	d04b      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	f7ff ffac 	bl	8004796 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	2300      	movs	r3, #0
 8004840:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	07d1      	lsls	r1, r2, #31
 8004848:	d508      	bpl.n	800485c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	07d2      	lsls	r2, r2, #31
 800484e:	d505      	bpl.n	800485c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004850:	f06f 0201 	mvn.w	r2, #1
 8004854:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004856:	4620      	mov	r0, r4
 8004858:	f7fc ff5a 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	0610      	lsls	r0, r2, #24
 8004862:	d508      	bpl.n	8004876 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	0611      	lsls	r1, r2, #24
 8004868:	d505      	bpl.n	8004876 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800486a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800486e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004870:	4620      	mov	r0, r4
 8004872:	f000 fb7a 	bl	8004f6a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	0652      	lsls	r2, r2, #25
 800487c:	d508      	bpl.n	8004890 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	0650      	lsls	r0, r2, #25
 8004882:	d505      	bpl.n	8004890 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004888:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff ff85 	bl	800479a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	0691      	lsls	r1, r2, #26
 8004896:	d522      	bpl.n	80048de <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	0692      	lsls	r2, r2, #26
 800489c:	d51f      	bpl.n	80048de <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800489e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80048a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a4:	611a      	str	r2, [r3, #16]
}
 80048a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80048aa:	f000 bb5d 	b.w	8004f68 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	f7ff ff71 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b2:	4620      	mov	r0, r4
 80048b4:	f7ff ff70 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
 80048b8:	e783      	b.n	80047c2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	f7ff ff6b 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff ff6a 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
 80048c4:	e792      	b.n	80047ec <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	f7ff ff65 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff ff64 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
 80048d0:	e7a0      	b.n	8004814 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	f7ff ff5f 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7ff ff5e 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
 80048dc:	e7af      	b.n	800483e <HAL_TIM_IRQHandler+0xa2>
}
 80048de:	bd10      	pop	{r4, pc}

080048e0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80048e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	4290      	cmp	r0, r2
 80048e6:	d012      	beq.n	800490e <TIM_Base_SetConfig+0x2e>
 80048e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048ec:	d00f      	beq.n	800490e <TIM_Base_SetConfig+0x2e>
 80048ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80048f2:	4290      	cmp	r0, r2
 80048f4:	d00b      	beq.n	800490e <TIM_Base_SetConfig+0x2e>
 80048f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048fa:	4290      	cmp	r0, r2
 80048fc:	d007      	beq.n	800490e <TIM_Base_SetConfig+0x2e>
 80048fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004902:	4290      	cmp	r0, r2
 8004904:	d003      	beq.n	800490e <TIM_Base_SetConfig+0x2e>
 8004906:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800490a:	4290      	cmp	r0, r2
 800490c:	d119      	bne.n	8004942 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800490e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004914:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <TIM_Base_SetConfig+0xc4>)
 8004918:	4290      	cmp	r0, r2
 800491a:	d029      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 800491c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004920:	d026      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004922:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004926:	4290      	cmp	r0, r2
 8004928:	d022      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 800492a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492e:	4290      	cmp	r0, r2
 8004930:	d01e      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004936:	4290      	cmp	r0, r2
 8004938:	d01a      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 800493a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800493e:	4290      	cmp	r0, r2
 8004940:	d016      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004942:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <TIM_Base_SetConfig+0xc8>)
 8004944:	4290      	cmp	r0, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004948:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800494c:	4290      	cmp	r0, r2
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004954:	4290      	cmp	r0, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004958:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800495c:	4290      	cmp	r0, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004960:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004964:	4290      	cmp	r0, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x90>
 8004968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800496c:	4290      	cmp	r0, r2
 800496e:	d103      	bne.n	8004978 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004970:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004978:	694a      	ldr	r2, [r1, #20]
 800497a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004980:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004982:	688b      	ldr	r3, [r1, #8]
 8004984:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004986:	680b      	ldr	r3, [r1, #0]
 8004988:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <TIM_Base_SetConfig+0xc4>)
 800498c:	4298      	cmp	r0, r3
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0xb8>
 8004990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004994:	4298      	cmp	r0, r3
 8004996:	d101      	bne.n	800499c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	690b      	ldr	r3, [r1, #16]
 800499a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800499c:	2301      	movs	r3, #1
 800499e:	6143      	str	r3, [r0, #20]
}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40014000 	.word	0x40014000

080049ac <HAL_TIM_Base_Init>:
{
 80049ac:	b510      	push	{r4, lr}
  if (htim == NULL)
 80049ae:	4604      	mov	r4, r0
 80049b0:	b330      	cbz	r0, 8004a00 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049ba:	b91b      	cbnz	r3, 80049c4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80049bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80049c0:	f7fd fb34 	bl	800202c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049cc:	1d21      	adds	r1, r4, #4
 80049ce:	f7ff ff87 	bl	80048e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80049d8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80049de:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80049f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80049fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a00:	2001      	movs	r0, #1
 8004a02:	e7fc      	b.n	80049fe <HAL_TIM_Base_Init+0x52>

08004a04 <HAL_TIM_PWM_Init>:
{
 8004a04:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004a06:	4604      	mov	r4, r0
 8004a08:	b330      	cbz	r0, 8004a58 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a12:	b91b      	cbnz	r3, 8004a1c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004a14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004a18:	f7ff fe60 	bl	80046dc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	1d21      	adds	r1, r4, #4
 8004a26:	f7ff ff5b 	bl	80048e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8004a30:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004a56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a58:	2001      	movs	r0, #1
 8004a5a:	e7fc      	b.n	8004a56 <HAL_TIM_PWM_Init+0x52>

08004a5c <HAL_TIM_Encoder_Init>:
{
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	460d      	mov	r5, r1
  if (htim == NULL)
 8004a60:	4604      	mov	r4, r0
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d04d      	beq.n	8004b02 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a6e:	b91b      	cbnz	r3, 8004a78 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8004a70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004a74:	f7fd fa22 	bl	8001ebc <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a78:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a80:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a84:	6883      	ldr	r3, [r0, #8]
 8004a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a90:	f7ff ff26 	bl	80048e0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8004a96:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004a9a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a9c:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 8004a9e:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8004aa0:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004aa2:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004aa8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004aac:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ab0:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ab2:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ab6:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ab8:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004ac0:	68e9      	ldr	r1, [r5, #12]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ac6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004aca:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004ace:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ad0:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ad2:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ad6:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004ad8:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ada:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8004ade:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ae0:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8004ae4:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8004aea:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7fc      	b.n	8004b00 <HAL_TIM_Encoder_Init+0xa4>
	...

08004b08 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b08:	6a03      	ldr	r3, [r0, #32]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b10:	6a03      	ldr	r3, [r0, #32]
{
 8004b12:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8004b14:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b16:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b1a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b22:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004b24:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b2c:	4d10      	ldr	r5, [pc, #64]	; (8004b70 <TIM_OC2_SetConfig+0x68>)
 8004b2e:	42a8      	cmp	r0, r5
 8004b30:	d003      	beq.n	8004b3a <TIM_OC2_SetConfig+0x32>
 8004b32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b36:	42a8      	cmp	r0, r5
 8004b38:	d114      	bne.n	8004b64 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	4d0a      	ldr	r5, [pc, #40]	; (8004b70 <TIM_OC2_SetConfig+0x68>)
 8004b46:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	d003      	beq.n	8004b56 <TIM_OC2_SetConfig+0x4e>
 8004b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b52:	42a8      	cmp	r0, r5
 8004b54:	d106      	bne.n	8004b64 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b56:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b5a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5e:	4335      	orrs	r5, r6
 8004b60:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004b64:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b66:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b68:	684a      	ldr	r2, [r1, #4]
 8004b6a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004b6c:	6203      	str	r3, [r0, #32]
}
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	40010000 	.word	0x40010000

08004b74 <HAL_TIM_PWM_ConfigChannel>:
{
 8004b74:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004b76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
{
 8004b7c:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004b7e:	d053      	beq.n	8004c28 <HAL_TIM_PWM_ConfigChannel+0xb4>
 8004b80:	2001      	movs	r0, #1
  switch (Channel)
 8004b82:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8004b84:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004b88:	d03d      	beq.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x92>
 8004b8a:	d806      	bhi.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x26>
 8004b8c:	b1c2      	cbz	r2, 8004bc0 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8004b8e:	2a04      	cmp	r2, #4
 8004b90:	d028      	beq.n	8004be4 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 8004b92:	2300      	movs	r3, #0
 8004b94:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8004b9a:	2a0c      	cmp	r2, #12
 8004b9c:	d1f9      	bne.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9e:	6828      	ldr	r0, [r5, #0]
 8004ba0:	f7ff fd24 	bl	80045ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004bbe:	e031      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc0:	6828      	ldr	r0, [r5, #0]
 8004bc2:	f7ff fcab 	bl	800451c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	f042 0208 	orr.w	r2, r2, #8
 8004bd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	f022 0204 	bic.w	r2, r2, #4
 8004bd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bde:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2000      	movs	r0, #0
      break;
 8004be2:	e7d6      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be4:	6828      	ldr	r0, [r5, #0]
 8004be6:	f7ff ff8f 	bl	8004b08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bea:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c04:	e7eb      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c06:	6828      	ldr	r0, [r5, #0]
 8004c08:	f7ff fcba 	bl	8004580 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c0c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c0e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	f042 0208 	orr.w	r2, r2, #8
 8004c16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c24:	61da      	str	r2, [r3, #28]
 8004c26:	e7db      	b.n	8004be0 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 8004c28:	2002      	movs	r0, #2
 8004c2a:	e7b5      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x24>

08004c2c <TIM_ETR_SetConfig>:
{
 8004c2c:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8004c2e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c30:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c32:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c36:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8004c3a:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004c3c:	6083      	str	r3, [r0, #8]
}
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <HAL_TIM_ConfigClockSource>:
{
 8004c40:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004c42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c46:	2b01      	cmp	r3, #1
{
 8004c48:	4604      	mov	r4, r0
 8004c4a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004c4e:	f000 8091 	beq.w	8004d74 <HAL_TIM_ConfigClockSource+0x134>
 8004c52:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004c58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004c5c:	6800      	ldr	r0, [r0, #0]
 8004c5e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004c68:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004c6a:	680b      	ldr	r3, [r1, #0]
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d052      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xd6>
 8004c70:	d833      	bhi.n	8004cda <HAL_TIM_ConfigClockSource+0x9a>
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d067      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x106>
 8004c76:	d816      	bhi.n	8004ca6 <HAL_TIM_ConfigClockSource+0x66>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d00d      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x58>
 8004c7c:	d80a      	bhi.n	8004c94 <HAL_TIM_ConfigClockSource+0x54>
 8004c7e:	f033 0110 	bics.w	r1, r3, #16
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004c90:	4610      	mov	r0, r2
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d1f5      	bne.n	8004c84 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8004c98:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f043 0307 	orr.w	r3, r3, #7
 8004ca4:	e017      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004ca6:	2b50      	cmp	r3, #80	; 0x50
 8004ca8:	d1ec      	bne.n	8004c84 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	684a      	ldr	r2, [r1, #4]
 8004cac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004cae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb0:	6a05      	ldr	r5, [r0, #32]
 8004cb2:	f025 0501 	bic.w	r5, r5, #1
 8004cb6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cba:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004cc6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004cc8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004cca:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ccc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004cd6:	6083      	str	r3, [r0, #8]
 8004cd8:	e011      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d00e      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0xbe>
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce4:	d00d      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xc2>
 8004ce6:	2b70      	cmp	r3, #112	; 0x70
 8004ce8:	d1cc      	bne.n	8004c84 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	68cb      	ldr	r3, [r1, #12]
 8004cec:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004cf0:	f7ff ff9c 	bl	8004c2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2200      	movs	r2, #0
 8004d00:	e7c0      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004d02:	68cb      	ldr	r3, [r1, #12]
 8004d04:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004d08:	f7ff ff90 	bl	8004c2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d0c:	6822      	ldr	r2, [r4, #0]
 8004d0e:	6893      	ldr	r3, [r2, #8]
 8004d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d14:	e7f2      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d16:	684d      	ldr	r5, [r1, #4]
 8004d18:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1a:	6a01      	ldr	r1, [r0, #32]
 8004d1c:	f021 0110 	bic.w	r1, r1, #16
 8004d20:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d22:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004d24:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d26:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d32:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004d36:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004d38:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004d3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d40:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004d44:	e7c7      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	684a      	ldr	r2, [r1, #4]
 8004d48:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004d4a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4c:	6a05      	ldr	r5, [r0, #32]
 8004d4e:	f025 0501 	bic.w	r5, r5, #1
 8004d52:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d54:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d56:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d5e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004d62:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004d64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004d66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004d68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004d72:	e7b0      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8004d74:	461a      	mov	r2, r3
 8004d76:	e78b      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x50>

08004d78 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8004d78:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d7a:	f001 011f 	and.w	r1, r1, #31
{
 8004d7e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d80:	2401      	movs	r4, #1
 8004d82:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004d84:	ea23 0304 	bic.w	r3, r3, r4
 8004d88:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d8a:	6a03      	ldr	r3, [r0, #32]
 8004d8c:	408a      	lsls	r2, r1
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	6202      	str	r2, [r0, #32]
}
 8004d92:	bd10      	pop	{r4, pc}

08004d94 <HAL_TIM_OC_Start>:
{
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d98:	b929      	cbnz	r1, 8004da6 <HAL_TIM_OC_Start+0x12>
 8004d9a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d018      	beq.n	8004dd4 <HAL_TIM_OC_Start+0x40>
    return HAL_ERROR;
 8004da2:	2001      	movs	r0, #1
 8004da4:	e02d      	b.n	8004e02 <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da6:	2904      	cmp	r1, #4
 8004da8:	d10d      	bne.n	8004dc6 <HAL_TIM_OC_Start+0x32>
 8004daa:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004dae:	3b01      	subs	r3, #1
 8004db0:	bf18      	it	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f4      	bne.n	8004da2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db8:	2904      	cmp	r1, #4
 8004dba:	f04f 0302 	mov.w	r3, #2
 8004dbe:	d121      	bne.n	8004e04 <HAL_TIM_OC_Start+0x70>
 8004dc0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004dc4:	e009      	b.n	8004dda <HAL_TIM_OC_Start+0x46>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dc6:	2908      	cmp	r1, #8
 8004dc8:	bf0c      	ite	eq
 8004dca:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8004dce:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
 8004dd2:	e7ec      	b.n	8004dae <HAL_TIM_OC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dda:	6820      	ldr	r0, [r4, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f7ff ffcb 	bl	8004d78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	491c      	ldr	r1, [pc, #112]	; (8004e58 <HAL_TIM_OC_Start+0xc4>)
 8004de6:	428b      	cmp	r3, r1
 8004de8:	d013      	beq.n	8004e12 <HAL_TIM_OC_Start+0x7e>
 8004dea:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <HAL_TIM_OC_Start+0xc8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d010      	beq.n	8004e12 <HAL_TIM_OC_Start+0x7e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d114      	bne.n	8004e20 <HAL_TIM_OC_Start+0x8c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfc:	2a06      	cmp	r2, #6
 8004dfe:	d126      	bne.n	8004e4e <HAL_TIM_OC_Start+0xba>
  return HAL_OK;
 8004e00:	2000      	movs	r0, #0
}
 8004e02:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e04:	2908      	cmp	r1, #8
 8004e06:	bf0c      	ite	eq
 8004e08:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004e0c:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8004e10:	e7e3      	b.n	8004dda <HAL_TIM_OC_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8004e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e14:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 8004e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1c:	d0eb      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
 8004e1e:	e7e7      	b.n	8004df0 <HAL_TIM_OC_Start+0x5c>
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_TIM_OC_Start+0xcc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d0e7      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
 8004e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d0e3      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
 8004e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d0df      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
 8004e36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d0db      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
 8004e3e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d0d7      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
 8004e46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d0d3      	beq.n	8004df6 <HAL_TIM_OC_Start+0x62>
    __HAL_TIM_ENABLE(htim);
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e7d3      	b.n	8004e00 <HAL_TIM_OC_Start+0x6c>
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40000400 	.word	0x40000400

08004e64 <HAL_TIM_PWM_Start>:
 8004e64:	f7ff bf96 	b.w	8004d94 <HAL_TIM_OC_Start>

08004e68 <HAL_TIM_OC_Stop>:
{
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	6800      	ldr	r0, [r0, #0]
{
 8004e70:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e72:	f7ff ff81 	bl	8004d78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_TIM_OC_Stop+0x7c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_OC_Stop+0x1e>
 8004e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10d      	bne.n	8004ea2 <HAL_TIM_OC_Stop+0x3a>
    __HAL_TIM_MOE_DISABLE(htim);
 8004e86:	6a19      	ldr	r1, [r3, #32]
 8004e88:	f241 1211 	movw	r2, #4369	; 0x1111
 8004e8c:	4211      	tst	r1, r2
 8004e8e:	d108      	bne.n	8004ea2 <HAL_TIM_OC_Stop+0x3a>
 8004e90:	6a19      	ldr	r1, [r3, #32]
 8004e92:	f240 4244 	movw	r2, #1092	; 0x444
 8004e96:	4211      	tst	r1, r2
 8004e98:	bf02      	ittt	eq
 8004e9a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004e9c:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8004ea0:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8004ea2:	6a19      	ldr	r1, [r3, #32]
 8004ea4:	f241 1211 	movw	r2, #4369	; 0x1111
 8004ea8:	4211      	tst	r1, r2
 8004eaa:	d108      	bne.n	8004ebe <HAL_TIM_OC_Stop+0x56>
 8004eac:	6a19      	ldr	r1, [r3, #32]
 8004eae:	f240 4244 	movw	r2, #1092	; 0x444
 8004eb2:	4211      	tst	r1, r2
 8004eb4:	bf02      	ittt	eq
 8004eb6:	681a      	ldreq	r2, [r3, #0]
 8004eb8:	f022 0201 	biceq.w	r2, r2, #1
 8004ebc:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	b91d      	cbnz	r5, 8004eca <HAL_TIM_OC_Stop+0x62>
 8004ec2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004eca:	2d04      	cmp	r5, #4
 8004ecc:	d102      	bne.n	8004ed4 <HAL_TIM_OC_Stop+0x6c>
 8004ece:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ed2:	e7f8      	b.n	8004ec6 <HAL_TIM_OC_Stop+0x5e>
 8004ed4:	2d08      	cmp	r5, #8
 8004ed6:	bf0c      	ite	eq
 8004ed8:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004edc:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8004ee0:	e7f1      	b.n	8004ec6 <HAL_TIM_OC_Stop+0x5e>
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000

08004ee8 <HAL_TIM_PWM_Stop>:
 8004ee8:	f7ff bfbe 	b.w	8004e68 <HAL_TIM_OC_Stop>

08004eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eec:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	f04f 0302 	mov.w	r3, #2
 8004ef8:	d032      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004efe:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f00:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8004f02:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004f04:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f06:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f0a:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0c:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	4c15      	ldr	r4, [pc, #84]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	d01a      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d017      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f1a:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	d013      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	d00f      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	d00b      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f32:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	d007      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f3a:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	d003      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004f42:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	d104      	bne.n	8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f50:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004f60:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004f62:	bd30      	pop	{r4, r5, pc}
 8004f64:	40010000 	.word	0x40010000

08004f68 <HAL_TIMEx_CommutCallback>:
 8004f68:	4770      	bx	lr

08004f6a <HAL_TIMEx_BreakCallback>:
 8004f6a:	4770      	bx	lr

08004f6c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	f102 030c 	add.w	r3, r2, #12
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	320c      	adds	r2, #12
 8004f7c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004f80:	6802      	ldr	r2, [r0, #0]
 8004f82:	2900      	cmp	r1, #0
 8004f84:	d1f2      	bne.n	8004f6c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	f102 0314 	add.w	r3, r2, #20
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	f102 0c14 	add.w	ip, r2, #20
 8004f96:	e84c 3100 	strex	r1, r3, [ip]
 8004f9a:	2900      	cmp	r1, #0
 8004f9c:	d1f3      	bne.n	8004f86 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10b      	bne.n	8004fbc <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	f102 030c 	add.w	r3, r2, #12
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	f102 0c0c 	add.w	ip, r2, #12
 8004fb4:	e84c 3100 	strex	r1, r3, [ip]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d1f3      	bne.n	8004fa4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004fc6:	4770      	bx	lr

08004fc8 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	6802      	ldr	r2, [r0, #0]
 8004fca:	68c1      	ldr	r1, [r0, #12]
 8004fcc:	6913      	ldr	r3, [r2, #16]
 8004fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fd2:	430b      	orrs	r3, r1
{
 8004fd4:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd6:	6113      	str	r3, [r2, #16]
{
 8004fd8:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fda:	6883      	ldr	r3, [r0, #8]
 8004fdc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004fde:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fe0:	4303      	orrs	r3, r0
 8004fe2:	6968      	ldr	r0, [r5, #20]
 8004fe4:	4303      	orrs	r3, r0
 8004fe6:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004fe8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004fec:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ff0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ff6:	6953      	ldr	r3, [r2, #20]
 8004ff8:	69a9      	ldr	r1, [r5, #24]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	430b      	orrs	r3, r1
 8005000:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <UART_SetConfig+0xb8>)
 8005004:	429a      	cmp	r2, r3
 8005006:	d003      	beq.n	8005010 <UART_SetConfig+0x48>
 8005008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500c:	429a      	cmp	r2, r3
 800500e:	d123      	bne.n	8005058 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fe fa9e 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005014:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005016:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800501c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8005020:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005024:	d11b      	bne.n	800505e <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005026:	19b2      	adds	r2, r6, r6
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	415b      	adcs	r3, r3
 800502e:	f7fb fe2b 	bl	8000c88 <__aeabi_uldivmod>
 8005032:	2164      	movs	r1, #100	; 0x64
 8005034:	fbb0 f5f1 	udiv	r5, r0, r1
 8005038:	fb01 0315 	mls	r3, r1, r5, r0
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	fbb3 f3f1 	udiv	r3, r3, r1
 8005044:	f003 0207 	and.w	r2, r3, #7
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800504e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005052:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005054:	60a3      	str	r3, [r4, #8]
  }
}
 8005056:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fe fa6a 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 800505c:	e7da      	b.n	8005014 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800505e:	00b2      	lsls	r2, r6, #2
 8005060:	0fb3      	lsrs	r3, r6, #30
 8005062:	f7fb fe11 	bl	8000c88 <__aeabi_uldivmod>
 8005066:	2264      	movs	r2, #100	; 0x64
 8005068:	fbb0 f1f2 	udiv	r1, r0, r2
 800506c:	fb02 0311 	mls	r3, r2, r1, r0
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	3332      	adds	r3, #50	; 0x32
 8005074:	fbb3 f3f2 	udiv	r3, r3, r2
 8005078:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800507c:	e7ea      	b.n	8005054 <UART_SetConfig+0x8c>
 800507e:	bf00      	nop
 8005080:	40011000 	.word	0x40011000

08005084 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	460e      	mov	r6, r1
 800508a:	4617      	mov	r7, r2
 800508c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508e:	6822      	ldr	r2, [r4, #0]
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	ea36 0303 	bics.w	r3, r6, r3
 8005096:	d101      	bne.n	800509c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8005098:	2000      	movs	r0, #0
 800509a:	e028      	b.n	80050ee <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800509c:	1c6b      	adds	r3, r5, #1
 800509e:	d0f7      	beq.n	8005090 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050a0:	b125      	cbz	r5, 80050ac <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80050a2:	f7fd fa4b 	bl	800253c <HAL_GetTick>
 80050a6:	1bc0      	subs	r0, r0, r7
 80050a8:	4285      	cmp	r5, r0
 80050aa:	d2f0      	bcs.n	800508e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	f102 030c 	add.w	r3, r2, #12
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	320c      	adds	r2, #12
 80050bc:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80050c0:	6821      	ldr	r1, [r4, #0]
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1f2      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	f101 0314 	add.w	r3, r1, #20
 80050ca:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	f101 0014 	add.w	r0, r1, #20
 80050d6:	e840 3200 	strex	r2, r3, [r0]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	d1f3      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80050de:	2320      	movs	r3, #32
 80050e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80050e4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80050e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80050ec:	2003      	movs	r0, #3
}
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050f0 <HAL_UART_Init>:
{
 80050f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80050f2:	4604      	mov	r4, r0
 80050f4:	b340      	cbz	r0, 8005148 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050fe:	b91b      	cbnz	r3, 8005108 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005100:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005104:	f7fd f93c 	bl	8002380 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005108:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800510a:	2324      	movs	r3, #36	; 0x24
 800510c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005110:	68d3      	ldr	r3, [r2, #12]
 8005112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005116:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff ff55 	bl	8004fc8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005126:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800512e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005136:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800513a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800513e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005142:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005146:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005148:	2001      	movs	r0, #1
 800514a:	e7fc      	b.n	8005146 <HAL_UART_Init+0x56>

0800514c <HAL_UART_Transmit>:
{
 800514c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005150:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8005154:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8005156:	2a20      	cmp	r2, #32
{
 8005158:	4604      	mov	r4, r0
 800515a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800515c:	d149      	bne.n	80051f2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800515e:	2900      	cmp	r1, #0
 8005160:	d045      	beq.n	80051ee <HAL_UART_Transmit+0xa2>
 8005162:	2f00      	cmp	r7, #0
 8005164:	d043      	beq.n	80051ee <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8005166:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800516a:	2a01      	cmp	r2, #1
 800516c:	d041      	beq.n	80051f2 <HAL_UART_Transmit+0xa6>
 800516e:	2201      	movs	r2, #1
 8005170:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005176:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800517e:	f7fd f9dd 	bl	800253c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005182:	68a1      	ldr	r1, [r4, #8]
 8005184:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8005186:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005188:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800518c:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800518e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	d103      	bne.n	800519a <HAL_UART_Transmit+0x4e>
 8005192:	6921      	ldr	r1, [r4, #16]
 8005194:	b909      	cbnz	r1, 800519a <HAL_UART_Transmit+0x4e>
 8005196:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005198:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800519a:	2100      	movs	r1, #0
 800519c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80051a0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80051a2:	b289      	uxth	r1, r1
 80051a4:	b941      	cbnz	r1, 80051b8 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	2140      	movs	r1, #64	; 0x40
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7ff ff6b 	bl	8005084 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80051ae:	b960      	cbnz	r0, 80051ca <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80051b0:	2320      	movs	r3, #32
 80051b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80051b6:	e009      	b.n	80051cc <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	4620      	mov	r0, r4
 80051bc:	e9cd 2300 	strd	r2, r3, [sp]
 80051c0:	f7ff ff60 	bl	8005084 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80051c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051c8:	b110      	cbz	r0, 80051d0 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80051ca:	2003      	movs	r0, #3
}
 80051cc:	b003      	add	sp, #12
 80051ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d0:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 80051d2:	b94e      	cbnz	r6, 80051e8 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d4:	f835 1b02 	ldrh.w	r1, [r5], #2
 80051d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051dc:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80051de:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80051e0:	3901      	subs	r1, #1
 80051e2:	b289      	uxth	r1, r1
 80051e4:	84e1      	strh	r1, [r4, #38]	; 0x26
 80051e6:	e7db      	b.n	80051a0 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80051ec:	e7f6      	b.n	80051dc <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80051ee:	2001      	movs	r0, #1
 80051f0:	e7ec      	b.n	80051cc <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80051f2:	2002      	movs	r0, #2
 80051f4:	e7ea      	b.n	80051cc <HAL_UART_Transmit+0x80>

080051f6 <HAL_UART_TxCpltCallback>:
 80051f6:	4770      	bx	lr

080051f8 <HAL_UART_ErrorCallback>:
 80051f8:	4770      	bx	lr

080051fa <UART_DMAAbortOnError>:
{
 80051fa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80051fe:	2300      	movs	r3, #0
 8005200:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005202:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005204:	f7ff fff8 	bl	80051f8 <HAL_UART_ErrorCallback>
}
 8005208:	bd08      	pop	{r3, pc}

0800520a <HAL_UARTEx_RxEventCallback>:
}
 800520a:	4770      	bx	lr

0800520c <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800520c:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005210:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005212:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005214:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005218:	d13e      	bne.n	8005298 <UART_Receive_IT.part.0.isra.0+0x8c>
 800521a:	6901      	ldr	r1, [r0, #16]
 800521c:	2900      	cmp	r1, #0
 800521e:	d13e      	bne.n	800529e <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005220:	6852      	ldr	r2, [r2, #4]
 8005222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005226:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 800522a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800522c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800522e:	3b01      	subs	r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005234:	2b00      	cmp	r3, #0
 8005236:	d12c      	bne.n	8005292 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005238:	6802      	ldr	r2, [r0, #0]
 800523a:	68d1      	ldr	r1, [r2, #12]
 800523c:	f021 0120 	bic.w	r1, r1, #32
 8005240:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005242:	68d1      	ldr	r1, [r2, #12]
 8005244:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005248:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800524a:	6951      	ldr	r1, [r2, #20]
 800524c:	f021 0101 	bic.w	r1, r1, #1
 8005250:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005252:	2220      	movs	r2, #32
 8005254:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800525a:	2a01      	cmp	r2, #1
 800525c:	6802      	ldr	r2, [r0, #0]
 800525e:	d128      	bne.n	80052b2 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005260:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	f102 030c 	add.w	r3, r2, #12
 8005266:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	f102 0c0c 	add.w	ip, r2, #12
 8005272:	e84c 3100 	strex	r1, r3, [ip]
 8005276:	2900      	cmp	r1, #0
 8005278:	d1f3      	bne.n	8005262 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	06db      	lsls	r3, r3, #27
 800527e:	d505      	bpl.n	800528c <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005280:	9101      	str	r1, [sp, #4]
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	6853      	ldr	r3, [r2, #4]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800528c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800528e:	f7ff ffbc 	bl	800520a <HAL_UARTEx_RxEventCallback>
}
 8005292:	b003      	add	sp, #12
 8005294:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005298:	b939      	cbnz	r1, 80052aa <UART_Receive_IT.part.0.isra.0+0x9e>
 800529a:	6901      	ldr	r1, [r0, #16]
 800529c:	b929      	cbnz	r1, 80052aa <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800529e:	6852      	ldr	r2, [r2, #4]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80052a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052a6:	3301      	adds	r3, #1
 80052a8:	e7bf      	b.n	800522a <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052aa:	6852      	ldr	r2, [r2, #4]
 80052ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052b0:	e7f7      	b.n	80052a2 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 80052b2:	f002 fc33 	bl	8007b1c <HAL_UART_RxCpltCallback>
 80052b6:	e7ec      	b.n	8005292 <UART_Receive_IT.part.0.isra.0+0x86>

080052b8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052b8:	6803      	ldr	r3, [r0, #0]
{
 80052ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052bc:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052be:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80052c2:	f012 0f0f 	tst.w	r2, #15
{
 80052c6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80052c8:	d10c      	bne.n	80052e4 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ca:	0695      	lsls	r5, r2, #26
 80052cc:	d570      	bpl.n	80053b0 <HAL_UART_IRQHandler+0xf8>
 80052ce:	068d      	lsls	r5, r1, #26
 80052d0:	d56e      	bpl.n	80053b0 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80052d6:	2b22      	cmp	r3, #34	; 0x22
 80052d8:	d164      	bne.n	80053a4 <HAL_UART_IRQHandler+0xec>
}
 80052da:	b003      	add	sp, #12
 80052dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e0:	f7ff bf94 	b.w	800520c <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052e4:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052e8:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80052ec:	4305      	orrs	r5, r0
 80052ee:	d05f      	beq.n	80053b0 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052f0:	07d5      	lsls	r5, r2, #31
 80052f2:	d505      	bpl.n	8005300 <HAL_UART_IRQHandler+0x48>
 80052f4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052f6:	bf42      	ittt	mi
 80052f8:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80052fa:	f043 0301 	orrmi.w	r3, r3, #1
 80052fe:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005300:	0755      	lsls	r5, r2, #29
 8005302:	d504      	bpl.n	800530e <HAL_UART_IRQHandler+0x56>
 8005304:	b118      	cbz	r0, 800530e <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800530e:	0793      	lsls	r3, r2, #30
 8005310:	d504      	bpl.n	800531c <HAL_UART_IRQHandler+0x64>
 8005312:	b118      	cbz	r0, 800531c <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005316:	f043 0304 	orr.w	r3, r3, #4
 800531a:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800531c:	0715      	lsls	r5, r2, #28
 800531e:	d507      	bpl.n	8005330 <HAL_UART_IRQHandler+0x78>
 8005320:	f001 0320 	and.w	r3, r1, #32
 8005324:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005326:	bf1e      	ittt	ne
 8005328:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800532a:	f043 0308 	orrne.w	r3, r3, #8
 800532e:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d036      	beq.n	80053a4 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005336:	0690      	lsls	r0, r2, #26
 8005338:	d508      	bpl.n	800534c <HAL_UART_IRQHandler+0x94>
 800533a:	068a      	lsls	r2, r1, #26
 800533c:	d506      	bpl.n	800534c <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800533e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005342:	2b22      	cmp	r3, #34	; 0x22
 8005344:	d102      	bne.n	800534c <HAL_UART_IRQHandler+0x94>
 8005346:	4620      	mov	r0, r4
 8005348:	f7ff ff60 	bl	800520c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005350:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005356:	f005 0508 	and.w	r5, r5, #8
 800535a:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800535c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800535e:	d023      	beq.n	80053a8 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8005360:	f7ff fe04 	bl	8004f6c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	6953      	ldr	r3, [r2, #20]
 8005368:	065b      	lsls	r3, r3, #25
 800536a:	d518      	bpl.n	800539e <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	f102 0314 	add.w	r3, r2, #20
 8005370:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	f102 0014 	add.w	r0, r2, #20
 800537c:	e840 3100 	strex	r1, r3, [r0]
 8005380:	2900      	cmp	r1, #0
 8005382:	d1f3      	bne.n	800536c <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8005384:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005386:	b150      	cbz	r0, 800539e <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005388:	4b72      	ldr	r3, [pc, #456]	; (8005554 <HAL_UART_IRQHandler+0x29c>)
 800538a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538c:	f7fd fc7c 	bl	8002c88 <HAL_DMA_Abort_IT>
 8005390:	b140      	cbz	r0, 80053a4 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005392:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005394:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8005396:	b003      	add	sp, #12
 8005398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800539c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff ff2a 	bl	80051f8 <HAL_UART_ErrorCallback>
}
 80053a4:	b003      	add	sp, #12
 80053a6:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80053a8:	f7ff ff26 	bl	80051f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	6425      	str	r5, [r4, #64]	; 0x40
 80053ae:	e7f9      	b.n	80053a4 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80053b2:	2801      	cmp	r0, #1
 80053b4:	f040 8091 	bne.w	80054da <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053b8:	06d5      	lsls	r5, r2, #27
 80053ba:	f140 808e 	bpl.w	80054da <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053be:	06c8      	lsls	r0, r1, #27
 80053c0:	f140 808b 	bpl.w	80054da <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c4:	2200      	movs	r2, #0
 80053c6:	9201      	str	r2, [sp, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	9201      	str	r2, [sp, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	9201      	str	r2, [sp, #4]
 80053d0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	0655      	lsls	r5, r2, #25
 80053d6:	d54c      	bpl.n	8005472 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053da:	680a      	ldr	r2, [r1, #0]
 80053dc:	6852      	ldr	r2, [r2, #4]
 80053de:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	d0df      	beq.n	80053a4 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053e4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80053e6:	4290      	cmp	r0, r2
 80053e8:	d9dc      	bls.n	80053a4 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 80053ea:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053ec:	69ca      	ldr	r2, [r1, #28]
 80053ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80053f2:	d036      	beq.n	8005462 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f103 020c 	add.w	r2, r3, #12
 80053f8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	f103 000c 	add.w	r0, r3, #12
 8005404:	e840 2100 	strex	r1, r2, [r0]
 8005408:	2900      	cmp	r1, #0
 800540a:	d1f3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f103 0214 	add.w	r2, r3, #20
 8005410:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	f103 0014 	add.w	r0, r3, #20
 800541c:	e840 2100 	strex	r1, r2, [r0]
 8005420:	2900      	cmp	r1, #0
 8005422:	d1f3      	bne.n	800540c <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	f103 0214 	add.w	r2, r3, #20
 8005428:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	f103 0014 	add.w	r0, r3, #20
 8005434:	e840 2100 	strex	r1, r2, [r0]
 8005438:	2900      	cmp	r1, #0
 800543a:	d1f3      	bne.n	8005424 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 800543c:	2220      	movs	r2, #32
 800543e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	f103 020c 	add.w	r2, r3, #12
 8005448:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	f103 000c 	add.w	r0, r3, #12
 8005454:	e840 2100 	strex	r1, r2, [r0]
 8005458:	2900      	cmp	r1, #0
 800545a:	d1f3      	bne.n	8005444 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800545c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800545e:	f7fd fbcf 	bl	8002c00 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005462:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005464:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005466:	1ac9      	subs	r1, r1, r3
 8005468:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800546a:	4620      	mov	r0, r4
 800546c:	f7ff fecd 	bl	800520a <HAL_UARTEx_RxEventCallback>
 8005470:	e798      	b.n	80053a4 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005472:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8005474:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8005476:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8005478:	b289      	uxth	r1, r1
 800547a:	2900      	cmp	r1, #0
 800547c:	d092      	beq.n	80053a4 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800547e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005480:	1a89      	subs	r1, r1, r2
 8005482:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005484:	2900      	cmp	r1, #0
 8005486:	d08d      	beq.n	80053a4 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	f103 020c 	add.w	r2, r3, #12
 800548c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	f103 050c 	add.w	r5, r3, #12
 8005498:	e845 2000 	strex	r0, r2, [r5]
 800549c:	2800      	cmp	r0, #0
 800549e:	d1f3      	bne.n	8005488 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	f103 0214 	add.w	r2, r3, #20
 80054a4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	f103 0514 	add.w	r5, r3, #20
 80054b0:	e845 2000 	strex	r0, r2, [r5]
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d1f3      	bne.n	80054a0 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 80054b8:	2220      	movs	r2, #32
 80054ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054be:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	f103 020c 	add.w	r2, r3, #12
 80054c4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	f103 050c 	add.w	r5, r3, #12
 80054d0:	e845 2000 	strex	r0, r2, [r5]
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d1f3      	bne.n	80054c0 <HAL_UART_IRQHandler+0x208>
 80054d8:	e7c7      	b.n	800546a <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054da:	0610      	lsls	r0, r2, #24
 80054dc:	d528      	bpl.n	8005530 <HAL_UART_IRQHandler+0x278>
 80054de:	060d      	lsls	r5, r1, #24
 80054e0:	d526      	bpl.n	8005530 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80054e6:	2a21      	cmp	r2, #33	; 0x21
 80054e8:	f47f af5c 	bne.w	80053a4 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ec:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054ee:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80054f4:	d117      	bne.n	8005526 <HAL_UART_IRQHandler+0x26e>
 80054f6:	6921      	ldr	r1, [r4, #16]
 80054f8:	b9a9      	cbnz	r1, 8005526 <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054fa:	f832 1b02 	ldrh.w	r1, [r2], #2
 80054fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005502:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005504:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8005506:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005508:	3a01      	subs	r2, #1
 800550a:	b292      	uxth	r2, r2
 800550c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800550e:	2a00      	cmp	r2, #0
 8005510:	f47f af48 	bne.w	80053a4 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800551a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e73e      	b.n	80053a4 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005526:	1c51      	adds	r1, r2, #1
 8005528:	6221      	str	r1, [r4, #32]
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e7ea      	b.n	8005506 <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005530:	0650      	lsls	r0, r2, #25
 8005532:	f57f af37 	bpl.w	80053a4 <HAL_UART_IRQHandler+0xec>
 8005536:	064a      	lsls	r2, r1, #25
 8005538:	f57f af34 	bpl.w	80053a4 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005542:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005544:	2320      	movs	r3, #32
 8005546:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fe53 	bl	80051f6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005550:	e728      	b.n	80053a4 <HAL_UART_IRQHandler+0xec>
 8005552:	bf00      	nop
 8005554:	080051fb 	.word	0x080051fb

08005558 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8005558:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	2300      	movs	r3, #0
  huart->RxXferSize = Size;
 800555c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800555e:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005562:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005566:	6902      	ldr	r2, [r0, #16]
  __HAL_UNLOCK(huart);
 8005568:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->pRxBuffPtr = pData;
 800556c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800556e:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005570:	b11a      	cbz	r2, 800557a <UART_Start_Receive_IT+0x22>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005578:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	f042 0220 	orr.w	r2, r2, #32
 8005588:	60da      	str	r2, [r3, #12]
}
 800558a:	2000      	movs	r0, #0
 800558c:	4770      	bx	lr

0800558e <HAL_UART_Receive_IT>:
{
 800558e:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005590:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8005594:	2e20      	cmp	r6, #32
 8005596:	d110      	bne.n	80055ba <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8005598:	b161      	cbz	r1, 80055b4 <HAL_UART_Receive_IT+0x26>
 800559a:	b15a      	cbz	r2, 80055b4 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 800559c:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80055a0:	2c01      	cmp	r4, #1
 80055a2:	d00a      	beq.n	80055ba <HAL_UART_Receive_IT+0x2c>
 80055a4:	2401      	movs	r4, #1
 80055a6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	2400      	movs	r4, #0
 80055ac:	6304      	str	r4, [r0, #48]	; 0x30
}
 80055ae:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80055b0:	f7ff bfd2 	b.w	8005558 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80055b4:	2001      	movs	r0, #1
}
 80055b6:	bc70      	pop	{r4, r5, r6}
 80055b8:	4770      	bx	lr
    return HAL_BUSY;
 80055ba:	2002      	movs	r0, #2
 80055bc:	e7fb      	b.n	80055b6 <HAL_UART_Receive_IT+0x28>

080055be <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80055be:	b084      	sub	sp, #16
 80055c0:	b510      	push	{r4, lr}
 80055c2:	ac03      	add	r4, sp, #12
 80055c4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80055c8:	460b      	mov	r3, r1
 80055ca:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055cc:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80055ce:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80055d0:	9905      	ldr	r1, [sp, #20]
 80055d2:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80055d4:	9906      	ldr	r1, [sp, #24]
 80055d6:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80055d8:	9907      	ldr	r1, [sp, #28]
 80055da:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80055dc:	9908      	ldr	r1, [sp, #32]

  return HAL_OK;
}
 80055de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055e2:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 80055e6:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055e8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80055ec:	4313      	orrs	r3, r2
 80055ee:	6043      	str	r3, [r0, #4]
}
 80055f0:	b004      	add	sp, #16
 80055f2:	2000      	movs	r0, #0
 80055f4:	4770      	bx	lr

080055f6 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80055f6:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80055fa:	4770      	bx	lr

080055fc <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80055fc:	680b      	ldr	r3, [r1, #0]
 80055fe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8005602:	2000      	movs	r0, #0
 8005604:	4770      	bx	lr

08005606 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005606:	2303      	movs	r3, #3
 8005608:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 800560a:	2000      	movs	r0, #0
 800560c:	4770      	bx	lr

0800560e <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800560e:	6800      	ldr	r0, [r0, #0]
}
 8005610:	f000 0003 	and.w	r0, r0, #3
 8005614:	4770      	bx	lr

08005616 <SDIO_SendCommand>:
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005616:	680b      	ldr	r3, [r1, #0]
{
 8005618:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 800561a:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800561c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005620:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005622:	4323      	orrs	r3, r4
                       Command->Response         |\
 8005624:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8005626:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8005628:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800562a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 800562e:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005630:	f022 020f 	bic.w	r2, r2, #15
 8005634:	4313      	orrs	r3, r2
 8005636:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8005638:	2000      	movs	r0, #0
 800563a:	bd10      	pop	{r4, pc}

0800563c <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800563c:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 800563e:	5840      	ldr	r0, [r0, r1]
}  
 8005640:	4770      	bx	lr

08005642 <SDIO_ConfigData>:
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005642:	680b      	ldr	r3, [r1, #0]
{
 8005644:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8005646:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005648:	684b      	ldr	r3, [r1, #4]
 800564a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800564c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8005650:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8005652:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005654:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8005656:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8005658:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800565a:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800565c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8005660:	4313      	orrs	r3, r2
 8005662:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8005664:	2000      	movs	r0, #0
 8005666:	bd10      	pop	{r4, pc}

08005668 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005668:	b510      	push	{r4, lr}
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800566a:	2300      	movs	r3, #0
{
 800566c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800566e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005672:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005676:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800567c:	9305      	str	r3, [sp, #20]
{
 800567e:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005680:	f7ff ffc9 	bl	8005616 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <SDMMC_CmdGoIdleState+0x48>)
 8005686:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8005696:	3b01      	subs	r3, #1
 8005698:	d307      	bcc.n	80056aa <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800569a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800569c:	0612      	lsls	r2, r2, #24
 800569e:	d5fa      	bpl.n	8005696 <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056a0:	23c5      	movs	r3, #197	; 0xc5
 80056a2:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80056a4:	2000      	movs	r0, #0
}
 80056a6:	b006      	add	sp, #24
 80056a8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80056aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80056ae:	e7fa      	b.n	80056a6 <SDMMC_CmdGoIdleState+0x3e>
 80056b0:	20000008 	.word	0x20000008

080056b4 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <SDMMC_GetCmdResp1+0x118>)
{
 80056b6:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80056b8:	681b      	ldr	r3, [r3, #0]
{
 80056ba:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80056bc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80056c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80056c4:	435a      	muls	r2, r3
    if (count-- == 0U)
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d049      	beq.n	800575e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 80056ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056cc:	f013 0f45 	tst.w	r3, #69	; 0x45
 80056d0:	d007      	beq.n	80056e2 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056d2:	051b      	lsls	r3, r3, #20
 80056d4:	d405      	bmi.n	80056e2 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056d8:	0758      	lsls	r0, r3, #29
 80056da:	d504      	bpl.n	80056e6 <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056dc:	2004      	movs	r0, #4
 80056de:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	3a01      	subs	r2, #1
 80056e4:	e7ef      	b.n	80056c6 <SDMMC_GetCmdResp1+0x12>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80056e8:	f010 0001 	ands.w	r0, r0, #1
 80056ec:	d002      	beq.n	80056f4 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056ee:	2301      	movs	r3, #1
 80056f0:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056f2:	e7f5      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056f4:	23c5      	movs	r3, #197	; 0xc5
 80056f6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80056f8:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	4299      	cmp	r1, r3
 80056fe:	d131      	bne.n	8005764 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8005700:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005702:	4833      	ldr	r0, [pc, #204]	; (80057d0 <SDMMC_GetCmdResp1+0x11c>)
 8005704:	4018      	ands	r0, r3
 8005706:	2800      	cmp	r0, #0
 8005708:	d0ea      	beq.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800570a:	2b00      	cmp	r3, #0
 800570c:	db2c      	blt.n	8005768 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800570e:	005a      	lsls	r2, r3, #1
 8005710:	d42d      	bmi.n	800576e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005712:	009c      	lsls	r4, r3, #2
 8005714:	d42d      	bmi.n	8005772 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005716:	00d9      	lsls	r1, r3, #3
 8005718:	d42d      	bmi.n	8005776 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800571a:	011a      	lsls	r2, r3, #4
 800571c:	d42e      	bmi.n	800577c <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800571e:	015c      	lsls	r4, r3, #5
 8005720:	d42f      	bmi.n	8005782 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005722:	01d9      	lsls	r1, r3, #7
 8005724:	d430      	bmi.n	8005788 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	d431      	bmi.n	800578e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800572a:	025c      	lsls	r4, r3, #9
 800572c:	d432      	bmi.n	8005794 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800572e:	0299      	lsls	r1, r3, #10
 8005730:	d433      	bmi.n	800579a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005732:	02da      	lsls	r2, r3, #11
 8005734:	d434      	bmi.n	80057a0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005736:	035c      	lsls	r4, r3, #13
 8005738:	d435      	bmi.n	80057a6 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800573a:	0399      	lsls	r1, r3, #14
 800573c:	d436      	bmi.n	80057ac <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800573e:	03da      	lsls	r2, r3, #15
 8005740:	d437      	bmi.n	80057b2 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005742:	041c      	lsls	r4, r3, #16
 8005744:	d438      	bmi.n	80057b8 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005746:	0459      	lsls	r1, r3, #17
 8005748:	d439      	bmi.n	80057be <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800574a:	049a      	lsls	r2, r3, #18
 800574c:	d43a      	bmi.n	80057c4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800574e:	f013 0f08 	tst.w	r3, #8
 8005752:	bf14      	ite	ne
 8005754:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8005758:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800575c:	e7c0      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800575e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005762:	e7bd      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005764:	2001      	movs	r0, #1
 8005766:	e7bb      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005768:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800576c:	e7b8      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800576e:	2040      	movs	r0, #64	; 0x40
 8005770:	e7b6      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005772:	2080      	movs	r0, #128	; 0x80
 8005774:	e7b4      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005776:	f44f 7080 	mov.w	r0, #256	; 0x100
 800577a:	e7b1      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800577c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005780:	e7ae      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005782:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005786:	e7ab      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005788:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800578c:	e7a8      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800578e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005792:	e7a5      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005794:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005798:	e7a2      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800579a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800579e:	e79f      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80057a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80057a4:	e79c      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80057a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80057aa:	e799      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80057ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80057b0:	e796      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80057b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057b6:	e793      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80057b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057bc:	e790      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80057be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80057c2:	e78d      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80057c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80057c8:	e78a      	b.n	80056e0 <SDMMC_GetCmdResp1+0x2c>
 80057ca:	bf00      	nop
 80057cc:	20000008 	.word	0x20000008
 80057d0:	fdffe008 	.word	0xfdffe008

080057d4 <SDMMC_CmdBlockLength>:
{
 80057d4:	b530      	push	{r4, r5, lr}
 80057d6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057d8:	2510      	movs	r5, #16
 80057da:	2340      	movs	r3, #64	; 0x40
 80057dc:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80057e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80057e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057e8:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f0:	f7ff ff11 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80057f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f8:	4629      	mov	r1, r5
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff ff5a 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005800:	b007      	add	sp, #28
 8005802:	bd30      	pop	{r4, r5, pc}

08005804 <SDMMC_CmdReadSingleBlock>:
{
 8005804:	b530      	push	{r4, r5, lr}
 8005806:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005808:	2511      	movs	r5, #17
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8005810:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005812:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005816:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005818:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800581a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800581c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005820:	f7ff fef9 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4629      	mov	r1, r5
 800582a:	4620      	mov	r0, r4
 800582c:	f7ff ff42 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005830:	b007      	add	sp, #28
 8005832:	bd30      	pop	{r4, r5, pc}

08005834 <SDMMC_CmdReadMultiBlock>:
{
 8005834:	b530      	push	{r4, r5, lr}
 8005836:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005838:	2512      	movs	r5, #18
 800583a:	2340      	movs	r3, #64	; 0x40
 800583c:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8005840:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005842:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005846:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005848:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800584a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005850:	f7ff fee1 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005854:	f241 3288 	movw	r2, #5000	; 0x1388
 8005858:	4629      	mov	r1, r5
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff ff2a 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005860:	b007      	add	sp, #28
 8005862:	bd30      	pop	{r4, r5, pc}

08005864 <SDMMC_CmdWriteSingleBlock>:
{
 8005864:	b530      	push	{r4, r5, lr}
 8005866:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005868:	2518      	movs	r5, #24
 800586a:	2340      	movs	r3, #64	; 0x40
 800586c:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8005870:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005872:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005876:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005878:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800587a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800587c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005880:	f7ff fec9 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4629      	mov	r1, r5
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff ff12 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005890:	b007      	add	sp, #28
 8005892:	bd30      	pop	{r4, r5, pc}

08005894 <SDMMC_CmdWriteMultiBlock>:
{
 8005894:	b530      	push	{r4, r5, lr}
 8005896:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005898:	2519      	movs	r5, #25
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80058a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80058a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058a8:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058b0:	f7ff feb1 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80058b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b8:	4629      	mov	r1, r5
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fefa 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 80058c0:	b007      	add	sp, #28
 80058c2:	bd30      	pop	{r4, r5, pc}

080058c4 <SDMMC_CmdStopTransfer>:
{
 80058c4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80058c6:	2300      	movs	r3, #0
{
 80058c8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80058ca:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058cc:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80058d2:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 80058d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058dc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058de:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058e0:	f7ff fe99 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80058e4:	4a03      	ldr	r2, [pc, #12]	; (80058f4 <SDMMC_CmdStopTransfer+0x30>)
 80058e6:	4629      	mov	r1, r5
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff fee3 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 80058ee:	b007      	add	sp, #28
 80058f0:	bd30      	pop	{r4, r5, pc}
 80058f2:	bf00      	nop
 80058f4:	05f5e100 	.word	0x05f5e100

080058f8 <SDMMC_CmdSelDesel>:
{
 80058f8:	b530      	push	{r4, r5, lr}
 80058fa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058fc:	2507      	movs	r5, #7
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8005904:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800590a:	9201      	str	r2, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800590c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800590e:	2200      	movs	r2, #0
 8005910:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005914:	f7ff fe7f 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005918:	f241 3288 	movw	r2, #5000	; 0x1388
 800591c:	4629      	mov	r1, r5
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff fec8 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005924:	b007      	add	sp, #28
 8005926:	bd30      	pop	{r4, r5, pc}

08005928 <SDMMC_CmdAppCommand>:
{
 8005928:	b530      	push	{r4, r5, lr}
 800592a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800592c:	2537      	movs	r5, #55	; 0x37
 800592e:	2340      	movs	r3, #64	; 0x40
 8005930:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8005934:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005936:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800593a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800593c:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800593e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005940:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005944:	f7ff fe67 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4629      	mov	r1, r5
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff feb0 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005954:	b007      	add	sp, #28
 8005956:	bd30      	pop	{r4, r5, pc}

08005958 <SDMMC_CmdBusWidth>:
{
 8005958:	b530      	push	{r4, r5, lr}
 800595a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800595c:	2506      	movs	r5, #6
 800595e:	2340      	movs	r3, #64	; 0x40
 8005960:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8005964:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005966:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800596a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800596c:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800596e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005970:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005974:	f7ff fe4f 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005978:	f241 3288 	movw	r2, #5000	; 0x1388
 800597c:	4629      	mov	r1, r5
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff fe98 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 8005984:	b007      	add	sp, #28
 8005986:	bd30      	pop	{r4, r5, pc}

08005988 <SDMMC_CmdSendSCR>:
{
 8005988:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800598a:	2300      	movs	r3, #0
{
 800598c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800598e:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005990:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005992:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005996:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 800599a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800599c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059a2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059a4:	f7ff fe37 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	4629      	mov	r1, r5
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7ff fe80 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 80059b4:	b007      	add	sp, #28
 80059b6:	bd30      	pop	{r4, r5, pc}

080059b8 <SDMMC_CmdSendStatus>:
{
 80059b8:	b530      	push	{r4, r5, lr}
 80059ba:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059bc:	250d      	movs	r5, #13
 80059be:	2340      	movs	r3, #64	; 0x40
 80059c0:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80059c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 80059ca:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059cc:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ce:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059d4:	f7ff fe1f 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80059d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059dc:	4629      	mov	r1, r5
 80059de:	4620      	mov	r0, r4
 80059e0:	f7ff fe68 	bl	80056b4 <SDMMC_GetCmdResp1>
}
 80059e4:	b007      	add	sp, #28
 80059e6:	bd30      	pop	{r4, r5, pc}

080059e8 <SDMMC_GetCmdResp2>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059e8:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <SDMMC_GetCmdResp2+0x48>)
 80059ea:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059f4:	f241 3188 	movw	r1, #5000	; 0x1388
{
 80059f8:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059fa:	434b      	muls	r3, r1
    if (count-- == 0U)
 80059fc:	3b01      	subs	r3, #1
 80059fe:	d313      	bcc.n	8005a28 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDIOx->STA;
 8005a00:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a02:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005a06:	d0f9      	beq.n	80059fc <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a08:	0509      	lsls	r1, r1, #20
 8005a0a:	d4f7      	bmi.n	80059fc <SDMMC_GetCmdResp2+0x14>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a0c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005a0e:	075b      	lsls	r3, r3, #29
 8005a10:	d502      	bpl.n	8005a18 <SDMMC_GetCmdResp2+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a12:	2004      	movs	r0, #4
 8005a14:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a16:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a18:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005a1a:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a1e:	bf14      	ite	ne
 8005a20:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a22:	23c5      	moveq	r3, #197	; 0xc5
 8005a24:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005a26:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005a28:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000008 	.word	0x20000008

08005a34 <SDMMC_CmdSendCID>:
{
 8005a34:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a36:	2300      	movs	r3, #0
{
 8005a38:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a40:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a42:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8005a46:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a4c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a4e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a50:	f7ff fde1 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a54:	4620      	mov	r0, r4
 8005a56:	f7ff ffc7 	bl	80059e8 <SDMMC_GetCmdResp2>
}
 8005a5a:	b006      	add	sp, #24
 8005a5c:	bd10      	pop	{r4, pc}

08005a5e <SDMMC_CmdSendCSD>:
{
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a62:	2209      	movs	r2, #9
 8005a64:	23c0      	movs	r3, #192	; 0xc0
 8005a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8005a6a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a70:	2100      	movs	r1, #0
 8005a72:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8005a76:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a78:	a901      	add	r1, sp, #4
 8005a7a:	f7ff fdcc 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff ffb2 	bl	80059e8 <SDMMC_GetCmdResp2>
}
 8005a84:	b006      	add	sp, #24
 8005a86:	bd10      	pop	{r4, pc}

08005a88 <SDMMC_GetCmdResp3>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <SDMMC_GetCmdResp3+0x3c>)
 8005a8a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a94:	f241 3188 	movw	r1, #5000	; 0x1388
{
 8005a98:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a9a:	434b      	muls	r3, r1
    if (count-- == 0U)
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	d30e      	bcc.n	8005abe <SDMMC_GetCmdResp3+0x36>
    sta_reg = SDIOx->STA;
 8005aa0:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005aa2:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005aa6:	d0f9      	beq.n	8005a9c <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005aa8:	0509      	lsls	r1, r1, #20
 8005aaa:	d4f7      	bmi.n	8005a9c <SDMMC_GetCmdResp3+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005aac:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005aae:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ab2:	bf15      	itete	ne
 8005ab4:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ab6:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ab8:	6390      	strne	r0, [r2, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005aba:	6393      	streq	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005abc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005abe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005ac2:	4770      	bx	lr
 8005ac4:	20000008 	.word	0x20000008

08005ac8 <SDMMC_CmdAppOperCommand>:
{
 8005ac8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005aca:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8005ace:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ad0:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ad6:	2340      	movs	r3, #64	; 0x40
 8005ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005adc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8005ae8:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aea:	a901      	add	r1, sp, #4
 8005aec:	f7ff fd93 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff ffc9 	bl	8005a88 <SDMMC_GetCmdResp3>
}
 8005af6:	b006      	add	sp, #24
 8005af8:	bd10      	pop	{r4, pc}
	...

08005afc <SDMMC_GetCmdResp6>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005afc:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <SDMMC_GetCmdResp6+0x80>)
{
 8005afe:	b510      	push	{r4, lr}
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b00:	681b      	ldr	r3, [r3, #0]
{
 8005b02:	4604      	mov	r4, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b04:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005b08:	fbb3 f3f0 	udiv	r3, r3, r0
 8005b0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005b10:	4343      	muls	r3, r0
    if (count-- == 0U)
 8005b12:	3b01      	subs	r3, #1
 8005b14:	d329      	bcc.n	8005b6a <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDIOx->STA;
 8005b16:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b18:	f010 0f45 	tst.w	r0, #69	; 0x45
 8005b1c:	d0f9      	beq.n	8005b12 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b1e:	0500      	lsls	r0, r0, #20
 8005b20:	d4f7      	bmi.n	8005b12 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b24:	0758      	lsls	r0, r3, #29
 8005b26:	d502      	bpl.n	8005b2e <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b28:	2004      	movs	r0, #4
 8005b2a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005b2c:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b30:	f010 0001 	ands.w	r0, r0, #1
 8005b34:	d002      	beq.n	8005b3c <SDMMC_GetCmdResp6+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b36:	2301      	movs	r3, #1
 8005b38:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3a:	e7f7      	b.n	8005b2c <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDIOx->RESPCMD);
 8005b3c:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d115      	bne.n	8005b70 <SDMMC_GetCmdResp6+0x74>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b44:	23c5      	movs	r3, #197	; 0xc5
 8005b46:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8005b48:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b4a:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8005b4e:	d102      	bne.n	8005b56 <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8005b54:	e7ea      	b.n	8005b2c <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b56:	045a      	lsls	r2, r3, #17
 8005b58:	d40c      	bmi.n	8005b74 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005b5e:	bf14      	ite	ne
 8005b60:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8005b64:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005b68:	e7e0      	b.n	8005b2c <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8005b6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005b6e:	e7dd      	b.n	8005b2c <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b70:	2001      	movs	r0, #1
 8005b72:	e7db      	b.n	8005b2c <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b78:	e7d8      	b.n	8005b2c <SDMMC_GetCmdResp6+0x30>
 8005b7a:	bf00      	nop
 8005b7c:	20000008 	.word	0x20000008

08005b80 <SDMMC_CmdSetRelAdd>:
{
 8005b80:	b530      	push	{r4, r5, lr}
 8005b82:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b84:	2300      	movs	r3, #0
{
 8005b86:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b88:	2503      	movs	r5, #3
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b8a:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b8c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b90:	e9cd 3503 	strd	r3, r5, [sp, #12]
{
 8005b94:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b9a:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b9c:	9307      	str	r3, [sp, #28]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b9e:	f7ff fd3a 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005ba2:	9a01      	ldr	r2, [sp, #4]
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff ffa8 	bl	8005afc <SDMMC_GetCmdResp6>
}
 8005bac:	b009      	add	sp, #36	; 0x24
 8005bae:	bd30      	pop	{r4, r5, pc}

08005bb0 <SDMMC_GetCmdResp7>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <SDMMC_GetCmdResp7+0x50>)
 8005bb2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bbc:	f241 3188 	movw	r1, #5000	; 0x1388
{
 8005bc0:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bc2:	434b      	muls	r3, r1
    if (count-- == 0U)
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	d317      	bcc.n	8005bf8 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDIOx->STA;
 8005bc8:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bca:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005bce:	d0f9      	beq.n	8005bc4 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd0:	0508      	lsls	r0, r1, #20
 8005bd2:	d4f7      	bmi.n	8005bc4 <SDMMC_GetCmdResp7+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bd4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005bd6:	0759      	lsls	r1, r3, #29
 8005bd8:	d502      	bpl.n	8005be0 <SDMMC_GetCmdResp7+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bda:	2004      	movs	r0, #4
 8005bdc:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bde:	4770      	bx	lr
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005be0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005be2:	f010 0001 	ands.w	r0, r0, #1
 8005be6:	d002      	beq.n	8005bee <SDMMC_GetCmdResp7+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005be8:	2301      	movs	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005bea:	6393      	str	r3, [r2, #56]	; 0x38
 8005bec:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005bee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005bf0:	065b      	lsls	r3, r3, #25
 8005bf2:	d503      	bpl.n	8005bfc <SDMMC_GetCmdResp7+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	e7f8      	b.n	8005bea <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8005bf8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000008 	.word	0x20000008

08005c04 <SDMMC_CmdOperCond>:
{
 8005c04:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c06:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8005c0a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	2300      	movs	r3, #0
 8005c16:	e9cd 1303 	strd	r1, r3, [sp, #12]
{
 8005c1a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c22:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c24:	f7ff fcf7 	bl	8005616 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff ffc1 	bl	8005bb0 <SDMMC_GetCmdResp7>
}
 8005c2e:	b006      	add	sp, #24
 8005c30:	bd10      	pop	{r4, pc}
	...

08005c34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c34:	b508      	push	{r3, lr}
    /*## FatFS: Link the SD driver ###########################*/
    retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c36:	4906      	ldr	r1, [pc, #24]	; (8005c50 <MX_FATFS_Init+0x1c>)
 8005c38:	4806      	ldr	r0, [pc, #24]	; (8005c54 <MX_FATFS_Init+0x20>)
 8005c3a:	f000 ffbf 	bl	8006bbc <FATFS_LinkDriver>
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <MX_FATFS_Init+0x24>)
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c40:	4906      	ldr	r1, [pc, #24]	; (8005c5c <MX_FATFS_Init+0x28>)
    retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c42:	7018      	strb	r0, [r3, #0]
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c44:	4806      	ldr	r0, [pc, #24]	; (8005c60 <MX_FATFS_Init+0x2c>)
 8005c46:	f000 ffb9 	bl	8006bbc <FATFS_LinkDriver>
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <MX_FATFS_Init+0x30>)
 8005c4c:	7018      	strb	r0, [r3, #0]

    /* USER CODE BEGIN Init */
    /* additional user code for init */
    /* USER CODE END Init */
}
 8005c4e:	bd08      	pop	{r3, pc}
 8005c50:	20001074 	.word	0x20001074
 8005c54:	0800c5b0 	.word	0x0800c5b0
 8005c58:	2000107c 	.word	0x2000107c
 8005c5c:	20001078 	.word	0x20001078
 8005c60:	20000018 	.word	0x20000018
 8005c64:	2000107d 	.word	0x2000107d

08005c68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005c68:	b508      	push	{r3, lr}
 8005c6a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	4601      	mov	r1, r0
 8005c70:	4803      	ldr	r0, [pc, #12]	; (8005c80 <BSP_SD_ReadBlocks_DMA+0x18>)
 8005c72:	f7fd fceb 	bl	800364c <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8005c76:	3800      	subs	r0, #0
 8005c78:	bf18      	it	ne
 8005c7a:	2001      	movne	r0, #1
 8005c7c:	bd08      	pop	{r3, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000bc8 	.word	0x20000bc8

08005c84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005c84:	b508      	push	{r3, lr}
 8005c86:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005c88:	460a      	mov	r2, r1
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4803      	ldr	r0, [pc, #12]	; (8005c9c <BSP_SD_WriteBlocks_DMA+0x18>)
 8005c8e:	f7fd fd73 	bl	8003778 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8005c92:	3800      	subs	r0, #0
 8005c94:	bf18      	it	ne
 8005c96:	2001      	movne	r0, #1
 8005c98:	bd08      	pop	{r3, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000bc8 	.word	0x20000bc8

08005ca0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005ca0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005ca2:	4803      	ldr	r0, [pc, #12]	; (8005cb0 <BSP_SD_GetCardState+0x10>)
 8005ca4:	f7fe f88a 	bl	8003dbc <HAL_SD_GetCardState>
}
 8005ca8:	3804      	subs	r0, #4
 8005caa:	bf18      	it	ne
 8005cac:	2001      	movne	r0, #1
 8005cae:	bd08      	pop	{r3, pc}
 8005cb0:	20000bc8 	.word	0x20000bc8

08005cb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005cb4:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005cb6:	4801      	ldr	r0, [pc, #4]	; (8005cbc <BSP_SD_GetCardInfo+0x8>)
 8005cb8:	f7fd bfe3 	b.w	8003c82 <HAL_SD_GetCardInfo>
 8005cbc:	20000bc8 	.word	0x20000bc8

08005cc0 <BSP_SD_AbortCallback>:
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005cc2:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8005cc4:	f7ff fffc 	bl	8005cc0 <BSP_SD_AbortCallback>
}
 8005cc8:	bd08      	pop	{r3, pc}

08005cca <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005cca:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8005ccc:	f000 f908 	bl	8005ee0 <BSP_SD_WriteCpltCallback>
}
 8005cd0:	bd08      	pop	{r3, pc}

08005cd2 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005cd2:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8005cd4:	f000 f90a 	bl	8005eec <BSP_SD_ReadCpltCallback>
}
 8005cd8:	bd08      	pop	{r3, pc}

08005cda <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005cda:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005ce2:	f000 f81f 	bl	8005d24 <BSP_PlatformIsDetected>
 8005ce6:	b908      	cbnz	r0, 8005cec <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8005ce8:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8005cec:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005cf0:	b003      	add	sp, #12
 8005cf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005cf8 <BSP_SD_Init>:
{
 8005cf8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005cfa:	f7ff ffee 	bl	8005cda <BSP_SD_IsDetected>
 8005cfe:	2801      	cmp	r0, #1
 8005d00:	d10c      	bne.n	8005d1c <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 8005d02:	4807      	ldr	r0, [pc, #28]	; (8005d20 <BSP_SD_Init+0x28>)
 8005d04:	f7fd ffa2 	bl	8003c4c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8005d08:	b938      	cbnz	r0, 8005d1a <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005d0a:	4805      	ldr	r0, [pc, #20]	; (8005d20 <BSP_SD_Init+0x28>)
 8005d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d10:	f7fd ffca 	bl	8003ca8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8005d14:	3800      	subs	r0, #0
 8005d16:	bf18      	it	ne
 8005d18:	2001      	movne	r0, #1
}
 8005d1a:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	e7fc      	b.n	8005d1a <BSP_SD_Init+0x22>
 8005d20:	20000bc8 	.word	0x20000bc8

08005d24 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005d24:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d2a:	4803      	ldr	r0, [pc, #12]	; (8005d38 <BSP_PlatformIsDetected+0x14>)
 8005d2c:	f7fd f958 	bl	8002fe0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8005d30:	fab0 f080 	clz	r0, r0
 8005d34:	0940      	lsrs	r0, r0, #5
 8005d36:	bd08      	pop	{r3, pc}
 8005d38:	40021400 	.word	0x40021400

08005d3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005d3c:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <SD_ioctl+0x50>)
 8005d40:	781c      	ldrb	r4, [r3, #0]
 8005d42:	f014 0401 	ands.w	r4, r4, #1
{
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d4a:	d11b      	bne.n	8005d84 <SD_ioctl+0x48>

  switch (cmd)
 8005d4c:	2903      	cmp	r1, #3
 8005d4e:	d803      	bhi.n	8005d58 <SD_ioctl+0x1c>
 8005d50:	e8df f001 	tbb	[pc, r1]
 8005d54:	120c061a 	.word	0x120c061a
 8005d58:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	b009      	add	sp, #36	; 0x24
 8005d5e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005d60:	4668      	mov	r0, sp
 8005d62:	f7ff ffa7 	bl	8005cb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d66:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d68:	602b      	str	r3, [r5, #0]
    break;
 8005d6a:	e7f6      	b.n	8005d5a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005d6c:	4668      	mov	r0, sp
 8005d6e:	f7ff ffa1 	bl	8005cb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d72:	9b07      	ldr	r3, [sp, #28]
 8005d74:	802b      	strh	r3, [r5, #0]
    break;
 8005d76:	e7f0      	b.n	8005d5a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005d78:	4668      	mov	r0, sp
 8005d7a:	f7ff ff9b 	bl	8005cb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d7e:	9b07      	ldr	r3, [sp, #28]
 8005d80:	0a5b      	lsrs	r3, r3, #9
 8005d82:	e7f1      	b.n	8005d68 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d84:	2403      	movs	r4, #3
 8005d86:	e7e8      	b.n	8005d5a <SD_ioctl+0x1e>
    res = RES_OK;
 8005d88:	460c      	mov	r4, r1
 8005d8a:	e7e6      	b.n	8005d5a <SD_ioctl+0x1e>
 8005d8c:	20000014 	.word	0x20000014

08005d90 <SD_status>:
{
 8005d90:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005d92:	4c06      	ldr	r4, [pc, #24]	; (8005dac <SD_status+0x1c>)
 8005d94:	2301      	movs	r3, #1
 8005d96:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005d98:	f7ff ff82 	bl	8005ca0 <BSP_SD_GetCardState>
 8005d9c:	b918      	cbnz	r0, 8005da6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8005d9e:	7823      	ldrb	r3, [r4, #0]
 8005da0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005da4:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005da6:	7820      	ldrb	r0, [r4, #0]
}
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	20000014 	.word	0x20000014

08005db0 <SD_CheckStatusWithTimeout.constprop.0>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8005db0:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8005db2:	f7fc fbc3 	bl	800253c <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8005db6:	f247 552f 	movw	r5, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 8005dba:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 8005dbc:	f7fc fbbe 	bl	800253c <HAL_GetTick>
 8005dc0:	1b03      	subs	r3, r0, r4
 8005dc2:	42ab      	cmp	r3, r5
 8005dc4:	d902      	bls.n	8005dcc <SD_CheckStatusWithTimeout.constprop.0+0x1c>
  return -1;
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	e003      	b.n	8005dd4 <SD_CheckStatusWithTimeout.constprop.0+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005dcc:	f7ff ff68 	bl	8005ca0 <BSP_SD_GetCardState>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d1f3      	bne.n	8005dbc <SD_CheckStatusWithTimeout.constprop.0+0xc>
}
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08005dd8 <SD_write>:
{
 8005dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   WriteStatus = 0;
 8005dda:	4c1a      	ldr	r4, [pc, #104]	; (8005e44 <SD_write+0x6c>)
{
 8005ddc:	9300      	str	r3, [sp, #0]
   WriteStatus = 0;
 8005dde:	2300      	movs	r3, #0
{
 8005de0:	460d      	mov	r5, r1
 8005de2:	9201      	str	r2, [sp, #4]
   WriteStatus = 0;
 8005de4:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005de6:	f7ff ffe3 	bl	8005db0 <SD_CheckStatusWithTimeout.constprop.0>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	e9dd 2100 	ldrd	r2, r1, [sp]
 8005df0:	da02      	bge.n	8005df8 <SD_write+0x20>
    return res;
 8005df2:	2001      	movs	r0, #1
}
 8005df4:	b002      	add	sp, #8
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff ff43 	bl	8005c84 <BSP_SD_WriteBlocks_DMA>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d1f7      	bne.n	8005df2 <SD_write+0x1a>
      timeout = HAL_GetTick();
 8005e02:	f7fc fb9b 	bl	800253c <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005e06:	f247 562f 	movw	r6, #29999	; 0x752f
      timeout = HAL_GetTick();
 8005e0a:	4605      	mov	r5, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	b923      	cbnz	r3, 8005e1a <SD_write+0x42>
 8005e10:	f7fc fb94 	bl	800253c <HAL_GetTick>
 8005e14:	1b43      	subs	r3, r0, r5
 8005e16:	42b3      	cmp	r3, r6
 8005e18:	d9f8      	bls.n	8005e0c <SD_write+0x34>
      if (WriteStatus == 0)
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0e8      	beq.n	8005df2 <SD_write+0x1a>
        WriteStatus = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8005e24:	f7fc fb8a 	bl	800253c <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e28:	f247 552f 	movw	r5, #29999	; 0x752f
        timeout = HAL_GetTick();
 8005e2c:	4604      	mov	r4, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e2e:	f7fc fb85 	bl	800253c <HAL_GetTick>
 8005e32:	1b03      	subs	r3, r0, r4
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	d8dc      	bhi.n	8005df2 <SD_write+0x1a>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005e38:	f7ff ff32 	bl	8005ca0 <BSP_SD_GetCardState>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1f6      	bne.n	8005e2e <SD_write+0x56>
 8005e40:	e7d8      	b.n	8005df4 <SD_write+0x1c>
 8005e42:	bf00      	nop
 8005e44:	20001084 	.word	0x20001084

08005e48 <SD_read>:
{
 8005e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	9201      	str	r2, [sp, #4]
 8005e4e:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005e50:	f7ff ffae 	bl	8005db0 <SD_CheckStatusWithTimeout.constprop.0>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	e9dd 2100 	ldrd	r2, r1, [sp]
 8005e5a:	da02      	bge.n	8005e62 <SD_read+0x1a>
    return res;
 8005e5c:	2001      	movs	r0, #1
}
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff ff00 	bl	8005c68 <BSP_SD_ReadBlocks_DMA>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d1f7      	bne.n	8005e5c <SD_read+0x14>
      ReadStatus = 0;
 8005e6c:	4c10      	ldr	r4, [pc, #64]	; (8005eb0 <SD_read+0x68>)
 8005e6e:	6020      	str	r0, [r4, #0]
      timeout = HAL_GetTick();
 8005e70:	f7fc fb64 	bl	800253c <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005e74:	f247 562f 	movw	r6, #29999	; 0x752f
      timeout = HAL_GetTick();
 8005e78:	4605      	mov	r5, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	b923      	cbnz	r3, 8005e88 <SD_read+0x40>
 8005e7e:	f7fc fb5d 	bl	800253c <HAL_GetTick>
 8005e82:	1b43      	subs	r3, r0, r5
 8005e84:	42b3      	cmp	r3, r6
 8005e86:	d9f8      	bls.n	8005e7a <SD_read+0x32>
      if (ReadStatus == 0)
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0e6      	beq.n	8005e5c <SD_read+0x14>
        ReadStatus = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8005e92:	f7fc fb53 	bl	800253c <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e96:	f247 552f 	movw	r5, #29999	; 0x752f
        timeout = HAL_GetTick();
 8005e9a:	4604      	mov	r4, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e9c:	f7fc fb4e 	bl	800253c <HAL_GetTick>
 8005ea0:	1b03      	subs	r3, r0, r4
 8005ea2:	42ab      	cmp	r3, r5
 8005ea4:	d8da      	bhi.n	8005e5c <SD_read+0x14>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ea6:	f7ff fefb 	bl	8005ca0 <BSP_SD_GetCardState>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d1f6      	bne.n	8005e9c <SD_read+0x54>
 8005eae:	e7d6      	b.n	8005e5e <SD_read+0x16>
 8005eb0:	20001080 	.word	0x20001080

08005eb4 <SD_initialize>:
{
 8005eb4:	b510      	push	{r4, lr}
  if(BSP_SD_Init() == MSD_OK)
 8005eb6:	f7ff ff1f 	bl	8005cf8 <BSP_SD_Init>
 8005eba:	4c08      	ldr	r4, [pc, #32]	; (8005edc <SD_initialize+0x28>)
 8005ebc:	b958      	cbnz	r0, 8005ed6 <SD_initialize+0x22>
  Stat = STA_NOINIT;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005ec2:	f7ff feed 	bl	8005ca0 <BSP_SD_GetCardState>
 8005ec6:	b918      	cbnz	r0, 8005ed0 <SD_initialize+0x1c>
    Stat &= ~STA_NOINIT;
 8005ec8:	7823      	ldrb	r3, [r4, #0]
 8005eca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ece:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005ed0:	7823      	ldrb	r3, [r4, #0]
 8005ed2:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8005ed4:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005ed6:	7820      	ldrb	r0, [r4, #0]
}
 8005ed8:	bd10      	pop	{r4, pc}
 8005eda:	bf00      	nop
 8005edc:	20000014 	.word	0x20000014

08005ee0 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8005ee0:	4b01      	ldr	r3, [pc, #4]	; (8005ee8 <BSP_SD_WriteCpltCallback+0x8>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
}
 8005ee6:	4770      	bx	lr
 8005ee8:	20001084 	.word	0x20001084

08005eec <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <BSP_SD_ReadCpltCallback+0x8>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	4770      	bx	lr
 8005ef4:	20001080 	.word	0x20001080

08005ef8 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <USER_initialize+0xc>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005efe:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000015 	.word	0x20000015

08005f08 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8005f08:	2000      	movs	r0, #0
 8005f0a:	4770      	bx	lr

08005f0c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	4770      	bx	lr

08005f10 <USER_write>:
 8005f10:	2000      	movs	r0, #0
 8005f12:	4770      	bx	lr

08005f14 <USER_status>:
 8005f14:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <USER_status+0xc>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	7818      	ldrb	r0, [r3, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000015 	.word	0x20000015

08005f24 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <disk_status+0x10>)
 8005f26:	181a      	adds	r2, r3, r0
 8005f28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005f2c:	7b10      	ldrb	r0, [r2, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4718      	bx	r3
 8005f34:	20001094 	.word	0x20001094

08005f38 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <disk_initialize+0x1c>)
 8005f3a:	5c1a      	ldrb	r2, [r3, r0]
 8005f3c:	b942      	cbnz	r2, 8005f50 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8005f3e:	2201      	movs	r2, #1
 8005f40:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f42:	181a      	adds	r2, r3, r0
 8005f44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005f48:	7b10      	ldrb	r0, [r2, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4718      	bx	r3
  }
  return stat;
}
 8005f50:	2000      	movs	r0, #0
 8005f52:	4770      	bx	lr
 8005f54:	20001094 	.word	0x20001094

08005f58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f58:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f5a:	4c05      	ldr	r4, [pc, #20]	; (8005f70 <disk_read+0x18>)
 8005f5c:	1825      	adds	r5, r4, r0
 8005f5e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005f62:	6860      	ldr	r0, [r4, #4]
 8005f64:	6884      	ldr	r4, [r0, #8]
 8005f66:	7b28      	ldrb	r0, [r5, #12]
 8005f68:	46a4      	mov	ip, r4
  return res;
}
 8005f6a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f6c:	4760      	bx	ip
 8005f6e:	bf00      	nop
 8005f70:	20001094 	.word	0x20001094

08005f74 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8005f74:	6800      	ldr	r0, [r0, #0]
 8005f76:	4770      	bx	lr

08005f78 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f78:	6903      	ldr	r3, [r0, #16]
	clst -= 2;
 8005f7a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f7c:	3b02      	subs	r3, #2
 8005f7e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8005f80:	bf83      	ittte	hi
 8005f82:	8943      	ldrhhi	r3, [r0, #10]
 8005f84:	6a40      	ldrhi	r0, [r0, #36]	; 0x24
 8005f86:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f8a:	2000      	movls	r0, #0
}
 8005f8c:	4770      	bx	lr

08005f8e <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f8e:	6a03      	ldr	r3, [r0, #32]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f90:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f92:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f94:	8952      	ldrh	r2, [r2, #10]
 8005f96:	0a49      	lsrs	r1, r1, #9
 8005f98:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f9c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f9e:	b130      	cbz	r0, 8005fae <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8005fa0:	4281      	cmp	r1, r0
 8005fa2:	d302      	bcc.n	8005faa <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005fa4:	1a09      	subs	r1, r1, r0
 8005fa6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fa8:	e7f8      	b.n	8005f9c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005faa:	6858      	ldr	r0, [r3, #4]
 8005fac:	4408      	add	r0, r1
}
 8005fae:	4770      	bx	lr

08005fb0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005fb0:	6803      	ldr	r3, [r0, #0]
{
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	4601      	mov	r1, r0
	if (*path) {	/* If the pointer is not a null */
 8005fb6:	b153      	cbz	r3, 8005fce <get_ldnumber+0x1e>
 8005fb8:	4618      	mov	r0, r3
 8005fba:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005fbc:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005fc0:	2c1f      	cmp	r4, #31
 8005fc2:	d910      	bls.n	8005fe6 <get_ldnumber+0x36>
 8005fc4:	2c3a      	cmp	r4, #58	; 0x3a
 8005fc6:	d1f8      	bne.n	8005fba <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8005fc8:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005fca:	4282      	cmp	r2, r0
 8005fcc:	d002      	beq.n	8005fd4 <get_ldnumber+0x24>
	int vol = -1;
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	e007      	b.n	8005fe4 <get_ldnumber+0x34>
			i = *tp++ - '0';
 8005fd4:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005fd6:	3b30      	subs	r3, #48	; 0x30
 8005fd8:	b2d8      	uxtb	r0, r3
 8005fda:	2801      	cmp	r0, #1
 8005fdc:	d8f7      	bhi.n	8005fce <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 8005fde:	3201      	adds	r2, #1
			i = *tp++ - '0';
 8005fe0:	4618      	mov	r0, r3
					*path = ++tt;
 8005fe2:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8005fe4:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	e7fc      	b.n	8005fe4 <get_ldnumber+0x34>

08005fea <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005fea:	b538      	push	{r3, r4, r5, lr}
 8005fec:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005fee:	4604      	mov	r4, r0
 8005ff0:	b918      	cbnz	r0, 8005ffa <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8005ff2:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	602b      	str	r3, [r5, #0]
	return res;
}
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f8      	beq.n	8005ff2 <validate+0x8>
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	2a00      	cmp	r2, #0
 8006004:	d0f5      	beq.n	8005ff2 <validate+0x8>
 8006006:	8881      	ldrh	r1, [r0, #4]
 8006008:	88da      	ldrh	r2, [r3, #6]
 800600a:	4291      	cmp	r1, r2
 800600c:	d1f1      	bne.n	8005ff2 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800600e:	7858      	ldrb	r0, [r3, #1]
 8006010:	f7ff ff88 	bl	8005f24 <disk_status>
 8006014:	f010 0001 	ands.w	r0, r0, #1
 8006018:	d1eb      	bne.n	8005ff2 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	e7eb      	b.n	8005ff6 <validate+0xc>

0800601e <move_window>:
{
 800601e:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006020:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006022:	428b      	cmp	r3, r1
{
 8006024:	4605      	mov	r5, r0
 8006026:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006028:	d011      	beq.n	800604e <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800602a:	2301      	movs	r3, #1
 800602c:	460a      	mov	r2, r1
 800602e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8006032:	7840      	ldrb	r0, [r0, #1]
 8006034:	f7ff ff90 	bl	8005f58 <disk_read>
				res = FR_DISK_ERR;
 8006038:	2800      	cmp	r0, #0
 800603a:	bf18      	it	ne
 800603c:	f04f 34ff 	movne.w	r4, #4294967295
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006040:	4603      	mov	r3, r0
			fs->winsect = sector;
 8006042:	62ac      	str	r4, [r5, #40]	; 0x28
				res = FR_DISK_ERR;
 8006044:	bf0c      	ite	eq
 8006046:	4603      	moveq	r3, r0
 8006048:	2301      	movne	r3, #1
}
 800604a:	4618      	mov	r0, r3
 800604c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e7fb      	b.n	800604a <move_window+0x2c>
	...

08006054 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006054:	2300      	movs	r3, #0
{
 8006056:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006058:	70c3      	strb	r3, [r0, #3]
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	6283      	str	r3, [r0, #40]	; 0x28
{
 8006060:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006062:	f7ff ffdc 	bl	800601e <move_window>
 8006066:	4603      	mov	r3, r0
 8006068:	bb18      	cbnz	r0, 80060b2 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800606a:	f8b4 122a 	ldrh.w	r1, [r4, #554]	; 0x22a
 800606e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006072:	4291      	cmp	r1, r2
 8006074:	d11f      	bne.n	80060b6 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006076:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800607a:	2ae9      	cmp	r2, #233	; 0xe9
 800607c:	d005      	beq.n	800608a <check_fs+0x36>
 800607e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006080:	490f      	ldr	r1, [pc, #60]	; (80060c0 <check_fs+0x6c>)
 8006082:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8006086:	428a      	cmp	r2, r1
 8006088:	d117      	bne.n	80060ba <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800608a:	f104 0062 	add.w	r0, r4, #98	; 0x62
 800608e:	f7ff ff71 	bl	8005f74 <ld_dword>
 8006092:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <check_fs+0x70>)
 8006094:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006098:	4290      	cmp	r0, r2
 800609a:	d008      	beq.n	80060ae <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800609c:	f104 007e 	add.w	r0, r4, #126	; 0x7e
 80060a0:	f7ff ff68 	bl	8005f74 <ld_dword>
	return 2;
 80060a4:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
 80060a8:	4290      	cmp	r0, r2
 80060aa:	bf18      	it	ne
 80060ac:	2302      	movne	r3, #2
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060b2:	2304      	movs	r3, #4
 80060b4:	e7fb      	b.n	80060ae <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060b6:	2303      	movs	r3, #3
 80060b8:	e7f9      	b.n	80060ae <check_fs+0x5a>
	return 2;
 80060ba:	2302      	movs	r3, #2
 80060bc:	e7f7      	b.n	80060ae <check_fs+0x5a>
 80060be:	bf00      	nop
 80060c0:	009000eb 	.word	0x009000eb
 80060c4:	00544146 	.word	0x00544146

080060c8 <find_volume.constprop.0>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80060c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80060cc:	2300      	movs	r3, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80060ce:	b085      	sub	sp, #20
	*rfs = 0;
 80060d0:	600b      	str	r3, [r1, #0]
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80060d2:	460d      	mov	r5, r1
	vol = get_ldnumber(path);
 80060d4:	f7ff ff6c 	bl	8005fb0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80060d8:	1e06      	subs	r6, r0, #0
 80060da:	f2c0 80d3 	blt.w	8006284 <find_volume.constprop.0+0x1bc>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80060de:	4b6b      	ldr	r3, [pc, #428]	; (800628c <find_volume.constprop.0+0x1c4>)
 80060e0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060e4:	2c00      	cmp	r4, #0
 80060e6:	f000 80cf 	beq.w	8006288 <find_volume.constprop.0+0x1c0>
	*rfs = fs;							/* Return pointer to the file system object */
 80060ea:	602c      	str	r4, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80060ec:	7823      	ldrb	r3, [r4, #0]
 80060ee:	b953      	cbnz	r3, 8006106 <find_volume.constprop.0+0x3e>
	fs->fs_type = 0;					/* Clear the file system object */
 80060f0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060f2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80060f4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060f6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060f8:	f7ff ff1e 	bl	8005f38 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80060fc:	f010 0501 	ands.w	r5, r0, #1
 8006100:	d00b      	beq.n	800611a <find_volume.constprop.0+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006102:	2503      	movs	r5, #3
 8006104:	e005      	b.n	8006112 <find_volume.constprop.0+0x4a>
		stat = disk_status(fs->drv);
 8006106:	7860      	ldrb	r0, [r4, #1]
 8006108:	f7ff ff0c 	bl	8005f24 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800610c:	f010 0501 	ands.w	r5, r0, #1
 8006110:	d1ee      	bne.n	80060f0 <find_volume.constprop.0+0x28>
}
 8006112:	4628      	mov	r0, r5
 8006114:	b005      	add	sp, #20
 8006116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800611a:	4629      	mov	r1, r5
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ff99 	bl	8006054 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006122:	2802      	cmp	r0, #2
 8006124:	f040 8093 	bne.w	800624e <find_volume.constprop.0+0x186>
 8006128:	466e      	mov	r6, sp
 800612a:	f504 73f9 	add.w	r3, r4, #498	; 0x1f2
 800612e:	f204 2132 	addw	r1, r4, #562	; 0x232
 8006132:	4632      	mov	r2, r6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006134:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8006138:	b110      	cbz	r0, 8006140 <find_volume.constprop.0+0x78>
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff ff1a 	bl	8005f74 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006140:	3310      	adds	r3, #16
 8006142:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006144:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006148:	d1f4      	bne.n	8006134 <find_volume.constprop.0+0x6c>
 800614a:	2700      	movs	r7, #0
			bsect = br[i];
 800614c:	f856 9b04 	ldr.w	r9, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006150:	f1b9 0f00 	cmp.w	r9, #0
 8006154:	d073      	beq.n	800623e <find_volume.constprop.0+0x176>
 8006156:	4649      	mov	r1, r9
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ff7b 	bl	8006054 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800615e:	2801      	cmp	r0, #1
 8006160:	d86e      	bhi.n	8006240 <find_volume.constprop.0+0x178>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006162:	f8b4 3037 	ldrh.w	r3, [r4, #55]	; 0x37
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d174      	bne.n	8006256 <find_volume.constprop.0+0x18e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800616c:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006170:	b926      	cbnz	r6, 800617c <find_volume.constprop.0+0xb4>
 8006172:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006176:	f7ff fefd 	bl	8005f74 <ld_dword>
 800617a:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800617c:	f894 703c 	ldrb.w	r7, [r4, #60]	; 0x3c
		fs->fsize = fasize;
 8006180:	6166      	str	r6, [r4, #20]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006182:	1e7b      	subs	r3, r7, #1
 8006184:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006186:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006188:	d865      	bhi.n	8006256 <find_volume.constprop.0+0x18e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800618a:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
 800618e:	f8a4 800a 	strh.w	r8, [r4, #10]
 8006192:	4643      	mov	r3, r8
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05e      	beq.n	8006256 <find_volume.constprop.0+0x18e>
 8006198:	f108 33ff 	add.w	r3, r8, #4294967295
 800619c:	ea13 0f08 	tst.w	r3, r8
 80061a0:	d159      	bne.n	8006256 <find_volume.constprop.0+0x18e>
	rv = ptr[1];
 80061a2:	f8b4 103d 	ldrh.w	r1, [r4, #61]	; 0x3d
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80061a6:	8121      	strh	r1, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80061a8:	070b      	lsls	r3, r1, #28
 80061aa:	d154      	bne.n	8006256 <find_volume.constprop.0+0x18e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80061ac:	f8b4 003f 	ldrh.w	r0, [r4, #63]	; 0x3f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061b0:	b918      	cbnz	r0, 80061ba <find_volume.constprop.0+0xf2>
 80061b2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80061b6:	f7ff fedd 	bl	8005f74 <ld_dword>
	rv = ptr[1];
 80061ba:	f8b4 e03a 	ldrh.w	lr, [r4, #58]	; 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061be:	f1be 0f00 	cmp.w	lr, #0
 80061c2:	d048      	beq.n	8006256 <find_volume.constprop.0+0x18e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80061c4:	4377      	muls	r7, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061c6:	eb0e 1c11 	add.w	ip, lr, r1, lsr #4
 80061ca:	44bc      	add	ip, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061cc:	4584      	cmp	ip, r0
 80061ce:	d842      	bhi.n	8006256 <find_volume.constprop.0+0x18e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061d0:	eba0 020c 	sub.w	r2, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061d4:	4542      	cmp	r2, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061d6:	fbb2 f3f8 	udiv	r3, r2, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061da:	d33c      	bcc.n	8006256 <find_volume.constprop.0+0x18e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80061dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d83c      	bhi.n	800625e <find_volume.constprop.0+0x196>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80061e4:	f640 78f5 	movw	r8, #4085	; 0xff5
 80061e8:	4543      	cmp	r3, r8
 80061ea:	bf8c      	ite	hi
 80061ec:	f04f 0802 	movhi.w	r8, #2
 80061f0:	f04f 0801 	movls.w	r8, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80061f4:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80061f6:	eb0e 0209 	add.w	r2, lr, r9
		fs->database = bsect + sysect;					/* Data start sector */
 80061fa:	eb0c 0009 	add.w	r0, ip, r9
		if (fmt == FS_FAT32) {
 80061fe:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006202:	6123      	str	r3, [r4, #16]
		fs->volbase = bsect;							/* Volume start sector */
 8006204:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006208:	61e2      	str	r2, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800620a:	6260      	str	r0, [r4, #36]	; 0x24
		if (fmt == FS_FAT32) {
 800620c:	d12a      	bne.n	8006264 <find_volume.constprop.0+0x19c>
	rv = rv << 8 | ptr[0];
 800620e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006212:	430a      	orrs	r2, r1
 8006214:	d11f      	bne.n	8006256 <find_volume.constprop.0+0x18e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800621a:	f7ff feab 	bl	8005f74 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800621e:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006220:	6220      	str	r0, [r4, #32]
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006222:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006226:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 800622a:	d314      	bcc.n	8006256 <find_volume.constprop.0+0x18e>
	fs->id = ++Fsid;		/* File system mount ID */
 800622c:	4a18      	ldr	r2, [pc, #96]	; (8006290 <find_volume.constprop.0+0x1c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800622e:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006232:	8813      	ldrh	r3, [r2, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
 800623a:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800623c:	e769      	b.n	8006112 <find_volume.constprop.0+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800623e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006240:	3701      	adds	r7, #1
 8006242:	2f04      	cmp	r7, #4
 8006244:	d182      	bne.n	800614c <find_volume.constprop.0+0x84>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006246:	2804      	cmp	r0, #4
 8006248:	d105      	bne.n	8006256 <find_volume.constprop.0+0x18e>
 800624a:	2501      	movs	r5, #1
 800624c:	e761      	b.n	8006112 <find_volume.constprop.0+0x4a>
 800624e:	2804      	cmp	r0, #4
 8006250:	d0fb      	beq.n	800624a <find_volume.constprop.0+0x182>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006252:	2801      	cmp	r0, #1
 8006254:	d901      	bls.n	800625a <find_volume.constprop.0+0x192>
 8006256:	250d      	movs	r5, #13
 8006258:	e75b      	b.n	8006112 <find_volume.constprop.0+0x4a>
	bsect = 0;
 800625a:	46a9      	mov	r9, r5
 800625c:	e781      	b.n	8006162 <find_volume.constprop.0+0x9a>
		fmt = FS_FAT32;
 800625e:	f04f 0803 	mov.w	r8, #3
 8006262:	e7c7      	b.n	80061f4 <find_volume.constprop.0+0x12c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006264:	2900      	cmp	r1, #0
 8006266:	d0f6      	beq.n	8006256 <find_volume.constprop.0+0x18e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006268:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800626a:	f1b8 0f02 	cmp.w	r8, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800626e:	6222      	str	r2, [r4, #32]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006270:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006274:	bf1b      	ittet	ne
 8006276:	18d2      	addne	r2, r2, r3
 8006278:	f003 0301 	andne.w	r3, r3, #1
 800627c:	4613      	moveq	r3, r2
 800627e:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8006282:	e7ce      	b.n	8006222 <find_volume.constprop.0+0x15a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006284:	250b      	movs	r5, #11
 8006286:	e744      	b.n	8006112 <find_volume.constprop.0+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006288:	250c      	movs	r5, #12
 800628a:	e742      	b.n	8006112 <find_volume.constprop.0+0x4a>
 800628c:	20001088 	.word	0x20001088
 8006290:	20001090 	.word	0x20001090

08006294 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006294:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8006296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006298:	4606      	mov	r6, r0
 800629a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800629c:	d94e      	bls.n	800633c <get_fat.isra.0+0xa8>
 800629e:	6903      	ldr	r3, [r0, #16]
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d24b      	bcs.n	800633c <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 80062a4:	7803      	ldrb	r3, [r0, #0]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d029      	beq.n	80062fe <get_fat.isra.0+0x6a>
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d034      	beq.n	8006318 <get_fat.isra.0+0x84>
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d144      	bne.n	800633c <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 80062b2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062b6:	69c1      	ldr	r1, [r0, #28]
 80062b8:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80062bc:	f7ff feaf 	bl	800601e <move_window>
 80062c0:	b110      	cbz	r0, 80062c8 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80062c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80062c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80062c8:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062ca:	69f1      	ldr	r1, [r6, #28]
			wc = fs->win[bc++ % SS(fs)];
 80062cc:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80062d0:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062d2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80062d6:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80062d8:	f895 502c 	ldrb.w	r5, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062dc:	f7ff fe9f 	bl	800601e <move_window>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d1ee      	bne.n	80062c2 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80062e4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80062e8:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062ea:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80062ec:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
 80062f0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062f4:	bf4c      	ite	mi
 80062f6:	0900      	lsrmi	r0, r0, #4
 80062f8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80062fc:	e7e3      	b.n	80062c6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062fe:	69c1      	ldr	r1, [r0, #28]
 8006300:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006304:	f7ff fe8b 	bl	800601e <move_window>
 8006308:	2800      	cmp	r0, #0
 800630a:	d1da      	bne.n	80062c2 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800630c:	0064      	lsls	r4, r4, #1
 800630e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006312:	4426      	add	r6, r4
 8006314:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
			break;
 8006316:	e7d6      	b.n	80062c6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006318:	69c1      	ldr	r1, [r0, #28]
 800631a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800631e:	f7ff fe7e 	bl	800601e <move_window>
 8006322:	2800      	cmp	r0, #0
 8006324:	d1cd      	bne.n	80062c2 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006326:	00a4      	lsls	r4, r4, #2
 8006328:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 800632c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006330:	4420      	add	r0, r4
 8006332:	f7ff fe1f 	bl	8005f74 <ld_dword>
 8006336:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800633a:	e7c4      	b.n	80062c6 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 800633c:	2001      	movs	r0, #1
	return val;
 800633e:	e7c2      	b.n	80062c6 <get_fat.isra.0+0x32>

08006340 <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006340:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8006342:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8006344:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 8006346:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8006348:	6103      	str	r3, [r0, #16]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800634a:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800634c:	b99a      	cbnz	r2, 8006376 <dir_sdi.constprop.0+0x36>
 800634e:	782b      	ldrb	r3, [r5, #0]
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 8006354:	6a2b      	ldr	r3, [r5, #32]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006356:	b96b      	cbnz	r3, 8006374 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006358:	892b      	ldrh	r3, [r5, #8]
 800635a:	b90b      	cbnz	r3, 8006360 <dir_sdi.constprop.0+0x20>
 800635c:	2002      	movs	r0, #2
}
 800635e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8006360:	6a2b      	ldr	r3, [r5, #32]
 8006362:	61a3      	str	r3, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006364:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
 8006366:	6162      	str	r2, [r4, #20]
	if (!dp->sect) return FR_INT_ERR;
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f7      	beq.n	800635c <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800636c:	352c      	adds	r5, #44	; 0x2c
 800636e:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8006370:	2000      	movs	r0, #0
 8006372:	e7f4      	b.n	800635e <dir_sdi.constprop.0+0x1e>
 8006374:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006376:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006378:	b963      	cbnz	r3, 8006394 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800637a:	4611      	mov	r1, r2
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	f7ff ff89 	bl	8006294 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006382:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006384:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006386:	d00b      	beq.n	80063a0 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006388:	2801      	cmp	r0, #1
 800638a:	d9e7      	bls.n	800635c <dir_sdi.constprop.0+0x1c>
 800638c:	692b      	ldr	r3, [r5, #16]
 800638e:	4298      	cmp	r0, r3
 8006390:	d3f3      	bcc.n	800637a <dir_sdi.constprop.0+0x3a>
 8006392:	e7e3      	b.n	800635c <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 8006394:	4611      	mov	r1, r2
 8006396:	4628      	mov	r0, r5
 8006398:	f7ff fdee 	bl	8005f78 <clust2sect>
 800639c:	61a0      	str	r0, [r4, #24]
 800639e:	e7e1      	b.n	8006364 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063a0:	2001      	movs	r0, #1
 80063a2:	e7dc      	b.n	800635e <dir_sdi.constprop.0+0x1e>

080063a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80063a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063a6:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063aa:	a803      	add	r0, sp, #12
{
 80063ac:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 80063ae:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80063b0:	f7ff fdfe 	bl	8005fb0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80063b4:	1e03      	subs	r3, r0, #0
 80063b6:	db14      	blt.n	80063e2 <f_mount+0x3e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063b8:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <f_mount+0x48>)
 80063ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

	if (cfs) {
 80063be:	b109      	cbz	r1, 80063c4 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063c0:	2000      	movs	r0, #0
 80063c2:	7008      	strb	r0, [r1, #0]
	}

	if (fs) {
 80063c4:	9801      	ldr	r0, [sp, #4]
 80063c6:	b108      	cbz	r0, 80063cc <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 80063c8:	2100      	movs	r1, #0
 80063ca:	7001      	strb	r1, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063d0:	b128      	cbz	r0, 80063de <f_mount+0x3a>
 80063d2:	2c01      	cmp	r4, #1
 80063d4:	d107      	bne.n	80063e6 <f_mount+0x42>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063d6:	a901      	add	r1, sp, #4
 80063d8:	4668      	mov	r0, sp
 80063da:	f7ff fe75 	bl	80060c8 <find_volume.constprop.0>
	LEAVE_FF(fs, res);
}
 80063de:	b004      	add	sp, #16
 80063e0:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80063e2:	200b      	movs	r0, #11
 80063e4:	e7fb      	b.n	80063de <f_mount+0x3a>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063e6:	2000      	movs	r0, #0
 80063e8:	e7f9      	b.n	80063de <f_mount+0x3a>
 80063ea:	bf00      	nop
 80063ec:	20001088 	.word	0x20001088

080063f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	b0b7      	sub	sp, #220	; 0xdc
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063f6:	4606      	mov	r6, r0
{
 80063f8:	9107      	str	r1, [sp, #28]
 80063fa:	9203      	str	r2, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f000 8243 	beq.w	8006888 <f_open+0x498>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
 8006402:	a908      	add	r1, sp, #32
 8006404:	a807      	add	r0, sp, #28
 8006406:	f7ff fe5f 	bl	80060c8 <find_volume.constprop.0>
	if (res == FR_OK) {
 800640a:	2800      	cmp	r0, #0
 800640c:	f040 823a 	bne.w	8006884 <f_open+0x494>
		dj.obj.fs = fs;
 8006410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006414:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		INIT_NAMBUF(fs);
 8006418:	ab15      	add	r3, sp, #84	; 0x54
 800641a:	f8c9 300c 	str.w	r3, [r9, #12]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800641e:	9b07      	ldr	r3, [sp, #28]
 8006420:	4698      	mov	r8, r3
 8006422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006426:	2a2f      	cmp	r2, #47	; 0x2f
 8006428:	d0fa      	beq.n	8006420 <f_open+0x30>
 800642a:	2a5c      	cmp	r2, #92	; 0x5c
 800642c:	d0f8      	beq.n	8006420 <f_open+0x30>
		obj->sclust = 0;					/* Start from root directory */
 800642e:	2300      	movs	r3, #0
 8006430:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006432:	f898 3000 	ldrb.w	r3, [r8]
 8006436:	2b1f      	cmp	r3, #31
 8006438:	f200 81a6 	bhi.w	8006788 <f_open+0x398>
		dp->fn[NSFLAG] = NS_NONAME;
 800643c:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800643e:	a809      	add	r0, sp, #36	; 0x24
		dp->fn[NSFLAG] = NS_NONAME;
 8006440:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
		res = dir_sdi(dp, 0);
 8006444:	f7ff ff7c 	bl	8006340 <dir_sdi.constprop.0>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			if (!fp->obj.lockid) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 8006448:	4603      	mov	r3, r0
 800644a:	2800      	cmp	r0, #0
 800644c:	f000 81f1 	beq.w	8006832 <f_open+0x442>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006450:	2200      	movs	r2, #0
 8006452:	6032      	str	r2, [r6, #0]
 8006454:	e212      	b.n	800687c <f_open+0x48c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006456:	3401      	adds	r4, #1
 8006458:	e1a8      	b.n	80067ac <f_open+0x3bc>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800645a:	2c41      	cmp	r4, #65	; 0x41
 800645c:	d101      	bne.n	8006462 <f_open+0x72>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800645e:	2306      	movs	r3, #6
 8006460:	e7f6      	b.n	8006450 <f_open+0x60>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006462:	2101      	movs	r1, #1
 8006464:	9201      	str	r2, [sp, #4]
 8006466:	f000 fbad 	bl	8006bc4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800646a:	2800      	cmp	r0, #0
 800646c:	d0f7      	beq.n	800645e <f_open+0x6e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800646e:	287f      	cmp	r0, #127	; 0x7f
 8006470:	9a01      	ldr	r2, [sp, #4]
 8006472:	d806      	bhi.n	8006482 <f_open+0x92>
 8006474:	49a5      	ldr	r1, [pc, #660]	; (800670c <f_open+0x31c>)
	while (*str && *str != chr) str++;
 8006476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647a:	b113      	cbz	r3, 8006482 <f_open+0x92>
 800647c:	4298      	cmp	r0, r3
 800647e:	d1fa      	bne.n	8006476 <f_open+0x86>
 8006480:	e7ed      	b.n	800645e <f_open+0x6e>
		lfn[di++] = w;					/* Store the Unicode character */
 8006482:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8006486:	4627      	mov	r7, r4
 8006488:	e185      	b.n	8006796 <f_open+0x3a6>
		w = lfn[di - 1];
 800648a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 800648e:	2b20      	cmp	r3, #32
 8006490:	d002      	beq.n	8006498 <f_open+0xa8>
 8006492:	2b2e      	cmp	r3, #46	; 0x2e
 8006494:	f040 819a 	bne.w	80067cc <f_open+0x3dc>
		di--;
 8006498:	3f01      	subs	r7, #1
 800649a:	e194      	b.n	80067c6 <f_open+0x3d6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800649c:	3101      	adds	r1, #1
 800649e:	e1a1      	b.n	80067e4 <f_open+0x3f4>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80064a0:	45d3      	cmp	fp, sl
 80064a2:	d205      	bcs.n	80064b0 <f_open+0xc0>
 80064a4:	42bb      	cmp	r3, r7
 80064a6:	d15d      	bne.n	8006564 <f_open+0x174>
			if (ni == 11) {				/* Long extension */
 80064a8:	f1ba 0f0b 	cmp.w	sl, #11
 80064ac:	d152      	bne.n	8006554 <f_open+0x164>
 80064ae:	e002      	b.n	80064b6 <f_open+0xc6>
 80064b0:	f1ba 0f0b 	cmp.w	sl, #11
 80064b4:	d149      	bne.n	800654a <f_open+0x15a>
				cf |= NS_LOSS | NS_LFN; break;
 80064b6:	f044 0403 	orr.w	r4, r4, #3
 80064ba:	f04f 0a0b 	mov.w	sl, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064be:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80064c2:	2be5      	cmp	r3, #229	; 0xe5
 80064c4:	bf04      	itt	eq
 80064c6:	2305      	moveq	r3, #5
 80064c8:	f88d 3044 	strbeq.w	r3, [sp, #68]	; 0x44
	if (ni == 8) b <<= 2;
 80064cc:	f1ba 0f08 	cmp.w	sl, #8
 80064d0:	bf04      	itt	eq
 80064d2:	00ad      	lsleq	r5, r5, #2
 80064d4:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80064d6:	f005 030c 	and.w	r3, r5, #12
 80064da:	2b0c      	cmp	r3, #12
 80064dc:	d003      	beq.n	80064e6 <f_open+0xf6>
 80064de:	f005 0203 	and.w	r2, r5, #3
 80064e2:	2a03      	cmp	r2, #3
 80064e4:	d101      	bne.n	80064ea <f_open+0xfa>
 80064e6:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80064ea:	07a0      	lsls	r0, r4, #30
 80064ec:	d409      	bmi.n	8006502 <f_open+0x112>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80064ee:	f005 0503 	and.w	r5, r5, #3
 80064f2:	2d01      	cmp	r5, #1
 80064f4:	bf08      	it	eq
 80064f6:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	bf08      	it	eq
 80064fe:	f044 0408 	orreq.w	r4, r4, #8
	FATFS *fs = dp->obj.fs;
 8006502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006504:	9301      	str	r3, [sp, #4]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006506:	a809      	add	r0, sp, #36	; 0x24
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006508:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800650c:	f7ff ff18 	bl	8006340 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8006510:	4603      	mov	r3, r0
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 80f3 	bne.w	80066fe <f_open+0x30e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8006520:	9314      	str	r3, [sp, #80]	; 0x50
 8006522:	4654      	mov	r4, sl
		res = move_window(fs, dp->sect);
 8006524:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006526:	9801      	ldr	r0, [sp, #4]
 8006528:	f7ff fd79 	bl	800601e <move_window>
		if (res != FR_OK) break;
 800652c:	4603      	mov	r3, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	f040 80e5 	bne.w	80066fe <f_open+0x30e>
		c = dp->dir[DIR_Name];
 8006534:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006536:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006538:	2b00      	cmp	r3, #0
 800653a:	d13b      	bne.n	80065b4 <f_open+0x1c4>
			ns = dp->fn[NSFLAG];
 800653c:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006540:	0751      	lsls	r1, r2, #29
 8006542:	f140 810a 	bpl.w	800675a <f_open+0x36a>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006546:	2304      	movs	r3, #4
 8006548:	e782      	b.n	8006450 <f_open+0x60>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800654a:	42bb      	cmp	r3, r7
 800654c:	d002      	beq.n	8006554 <f_open+0x164>
 800654e:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8006552:	d8b4      	bhi.n	80064be <f_open+0xce>
			b <<= 2; continue;
 8006554:	00ad      	lsls	r5, r5, #2
 8006556:	b2ed      	uxtb	r5, r5
 8006558:	463b      	mov	r3, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800655a:	f04f 0a0b 	mov.w	sl, #11
 800655e:	f04f 0b08 	mov.w	fp, #8
			b <<= 2; continue;
 8006562:	e164      	b.n	800682e <f_open+0x43e>
		if (w >= 0x80) {				/* Non ASCII character */
 8006564:	287f      	cmp	r0, #127	; 0x7f
 8006566:	d90e      	bls.n	8006586 <f_open+0x196>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006568:	2100      	movs	r1, #0
 800656a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800656e:	f000 fb29 	bl	8006bc4 <ff_convert>
			cf |= NS_LFN;				/* Force create LFN entry */
 8006572:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006576:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800657a:	b168      	cbz	r0, 8006598 <f_open+0x1a8>
 800657c:	4964      	ldr	r1, [pc, #400]	; (8006710 <f_open+0x320>)
 800657e:	4408      	add	r0, r1
 8006580:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006584:	b140      	cbz	r0, 8006598 <f_open+0x1a8>
	while (*str && *str != chr) str++;
 8006586:	f8df c190 	ldr.w	ip, [pc, #400]	; 8006718 <f_open+0x328>
 800658a:	f81c 1b01 	ldrb.w	r1, [ip], #1
 800658e:	2900      	cmp	r1, #0
 8006590:	f000 817c 	beq.w	800688c <f_open+0x49c>
 8006594:	4281      	cmp	r1, r0
 8006596:	d1f8      	bne.n	800658a <f_open+0x19a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006598:	f044 0403 	orr.w	r4, r4, #3
 800659c:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800659e:	f10b 01d8 	add.w	r1, fp, #216	; 0xd8
 80065a2:	4469      	add	r1, sp
 80065a4:	f10b 0b01 	add.w	fp, fp, #1
 80065a8:	f801 0c94 	strb.w	r0, [r1, #-148]
 80065ac:	e13f      	b.n	800682e <f_open+0x43e>
					b |= 2;
 80065ae:	f045 0502 	orr.w	r5, r5, #2
 80065b2:	e7f4      	b.n	800659e <f_open+0x1ae>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80065b4:	7ae9      	ldrb	r1, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80065b6:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80065b8:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80065bc:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80065c0:	d003      	beq.n	80065ca <f_open+0x1da>
 80065c2:	0709      	lsls	r1, r1, #28
 80065c4:	d505      	bpl.n	80065d2 <f_open+0x1e2>
 80065c6:	2a0f      	cmp	r2, #15
 80065c8:	d005      	beq.n	80065d6 <f_open+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	9314      	str	r3, [sp, #80]	; 0x50
 80065d0:	e067      	b.n	80066a2 <f_open+0x2b2>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80065d2:	2a0f      	cmp	r2, #15
 80065d4:	d16c      	bne.n	80066b0 <f_open+0x2c0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80065d6:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 80065da:	0652      	lsls	r2, r2, #25
 80065dc:	d440      	bmi.n	8006660 <f_open+0x270>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80065de:	065f      	lsls	r7, r3, #25
 80065e0:	d55d      	bpl.n	800669e <f_open+0x2ae>
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80065e2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80065e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
						sum = dp->dir[LDIR_Chksum];
 80065e8:	f895 a00d 	ldrb.w	sl, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80065ec:	9314      	str	r3, [sp, #80]	; 0x50
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065ee:	7b6b      	ldrb	r3, [r5, #13]
 80065f0:	4553      	cmp	r3, sl
 80065f2:	d156      	bne.n	80066a2 <f_open+0x2b2>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80065f4:	8b6b      	ldrh	r3, [r5, #26]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d153      	bne.n	80066a2 <f_open+0x2b2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065fa:	9b01      	ldr	r3, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80065fc:	782f      	ldrb	r7, [r5, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	9302      	str	r3, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006602:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8006606:	3f01      	subs	r7, #1
 8006608:	230d      	movs	r3, #13
 800660a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800671c <f_open+0x32c>
 800660e:	435f      	muls	r7, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006610:	2201      	movs	r2, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006612:	f81b 3b01 	ldrb.w	r3, [fp], #1
	rv = ptr[1];
 8006616:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
 8006618:	2a00      	cmp	r2, #0
 800661a:	d044      	beq.n	80066a6 <f_open+0x2b6>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800661c:	2f3f      	cmp	r7, #63	; 0x3f
 800661e:	d840      	bhi.n	80066a2 <f_open+0x2b2>
 8006620:	4618      	mov	r0, r3
 8006622:	9306      	str	r3, [sp, #24]
 8006624:	f000 faec 	bl	8006c00 <ff_wtoupper>
 8006628:	9b02      	ldr	r3, [sp, #8]
 800662a:	9005      	str	r0, [sp, #20]
 800662c:	1c79      	adds	r1, r7, #1
 800662e:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8006632:	9104      	str	r1, [sp, #16]
 8006634:	f000 fae4 	bl	8006c00 <ff_wtoupper>
 8006638:	9a05      	ldr	r2, [sp, #20]
 800663a:	4282      	cmp	r2, r0
 800663c:	d131      	bne.n	80066a2 <f_open+0x2b2>
 800663e:	9b06      	ldr	r3, [sp, #24]
 8006640:	9904      	ldr	r1, [sp, #16]
 8006642:	461a      	mov	r2, r3
 8006644:	460f      	mov	r7, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006646:	4b33      	ldr	r3, [pc, #204]	; (8006714 <f_open+0x324>)
 8006648:	459b      	cmp	fp, r3
 800664a:	d1e2      	bne.n	8006612 <f_open+0x222>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800664c:	782b      	ldrb	r3, [r5, #0]
 800664e:	065d      	lsls	r5, r3, #25
 8006650:	d504      	bpl.n	800665c <f_open+0x26c>
 8006652:	b11a      	cbz	r2, 800665c <f_open+0x26c>
 8006654:	9b02      	ldr	r3, [sp, #8]
 8006656:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800665a:	bb13      	cbnz	r3, 80066a2 <f_open+0x2b2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800665c:	3c01      	subs	r4, #1
 800665e:	b2e4      	uxtb	r4, r4
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006662:	f103 0b20 	add.w	fp, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	f43f af67 	beq.w	800653c <f_open+0x14c>
 800666e:	f5bb 1f00 	cmp.w	fp, #2097152	; 0x200000
 8006672:	f4bf af63 	bcs.w	800653c <f_open+0x14c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006676:	f3cb 0508 	ubfx	r5, fp, #0, #9
	FATFS *fs = dp->obj.fs;
 800667a:	9f09      	ldr	r7, [sp, #36]	; 0x24
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800667c:	b94d      	cbnz	r5, 8006692 <f_open+0x2a2>
		if (!dp->clust) {		/* Static table */
 800667e:	990e      	ldr	r1, [sp, #56]	; 0x38
		dp->sect++;				/* Next sector */
 8006680:	3301      	adds	r3, #1
 8006682:	930f      	str	r3, [sp, #60]	; 0x3c
		if (!dp->clust) {		/* Static table */
 8006684:	2900      	cmp	r1, #0
 8006686:	d14b      	bne.n	8006720 <f_open+0x330>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006688:	893b      	ldrh	r3, [r7, #8]
 800668a:	ebb3 1f5b 	cmp.w	r3, fp, lsr #5
 800668e:	f67f af55 	bls.w	800653c <f_open+0x14c>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006692:	372c      	adds	r7, #44	; 0x2c
 8006694:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 8006696:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800669a:	9510      	str	r5, [sp, #64]	; 0x40
	} while (res == FR_OK);
 800669c:	e742      	b.n	8006524 <f_open+0x134>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800669e:	42a3      	cmp	r3, r4
 80066a0:	d0a5      	beq.n	80065ee <f_open+0x1fe>
 80066a2:	24ff      	movs	r4, #255	; 0xff
 80066a4:	e7dc      	b.n	8006660 <f_open+0x270>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80066a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80066aa:	428b      	cmp	r3, r1
 80066ac:	d0cb      	beq.n	8006646 <f_open+0x256>
 80066ae:	e7f8      	b.n	80066a2 <f_open+0x2b2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066b0:	b974      	cbnz	r4, 80066d0 <f_open+0x2e0>
 80066b2:	f105 020b 	add.w	r2, r5, #11
 80066b6:	4629      	mov	r1, r5
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80066b8:	01e3      	lsls	r3, r4, #7
 80066ba:	ea43 0454 	orr.w	r4, r3, r4, lsr #1
 80066be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c2:	fa53 f484 	uxtab	r4, r3, r4
	} while (--n);
 80066c6:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80066c8:	b2e4      	uxtb	r4, r4
	} while (--n);
 80066ca:	d1f5      	bne.n	80066b8 <f_open+0x2c8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066cc:	45a2      	cmp	sl, r4
 80066ce:	d03e      	beq.n	800674e <f_open+0x35e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80066d0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80066d4:	f013 0301 	ands.w	r3, r3, #1
 80066d8:	f47f af77 	bne.w	80065ca <f_open+0x1da>
 80066dc:	f105 000b 	add.w	r0, r5, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80066e0:	a911      	add	r1, sp, #68	; 0x44
		r = *d++ - *s++;
 80066e2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80066e6:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 80066ea:	42a8      	cmp	r0, r5
		r = *d++ - *s++;
 80066ec:	eba2 0204 	sub.w	r2, r2, r4
	} while (--cnt && r == 0);
 80066f0:	d002      	beq.n	80066f8 <f_open+0x308>
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	d0f5      	beq.n	80066e2 <f_open+0x2f2>
 80066f6:	e768      	b.n	80065ca <f_open+0x1da>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	f47f af66 	bne.w	80065ca <f_open+0x1da>
			ns = dp->fn[NSFLAG];
 80066fe:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
			if (res != FR_OK) {				/* Failed to find the object */
 8006702:	b363      	cbz	r3, 800675e <f_open+0x36e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006704:	2b04      	cmp	r3, #4
 8006706:	f47f aea3 	bne.w	8006450 <f_open+0x60>
 800670a:	e719      	b.n	8006540 <f_open+0x150>
 800670c:	0800c5c4 	.word	0x0800c5c4
 8006710:	0800c5d4 	.word	0x0800c5d4
 8006714:	0800c661 	.word	0x0800c661
 8006718:	0800c5cd 	.word	0x0800c5cd
 800671c:	0800c654 	.word	0x0800c654
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006720:	897b      	ldrh	r3, [r7, #10]
 8006722:	3b01      	subs	r3, #1
 8006724:	ea13 235b 	ands.w	r3, r3, fp, lsr #9
 8006728:	d1b3      	bne.n	8006692 <f_open+0x2a2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800672a:	4638      	mov	r0, r7
 800672c:	f7ff fdb2 	bl	8006294 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006730:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006732:	4601      	mov	r1, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006734:	d90d      	bls.n	8006752 <f_open+0x362>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006736:	1c48      	adds	r0, r1, #1
 8006738:	d00d      	beq.n	8006756 <f_open+0x366>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4299      	cmp	r1, r3
 800673e:	f4bf aefd 	bcs.w	800653c <f_open+0x14c>
				dp->sect = clust2sect(fs, clst);
 8006742:	4638      	mov	r0, r7
				dp->clust = clst;		/* Initialize data for new cluster */
 8006744:	910e      	str	r1, [sp, #56]	; 0x38
				dp->sect = clust2sect(fs, clst);
 8006746:	f7ff fc17 	bl	8005f78 <clust2sect>
 800674a:	900f      	str	r0, [sp, #60]	; 0x3c
 800674c:	e7a1      	b.n	8006692 <f_open+0x2a2>
		res = move_window(fs, dp->sect);
 800674e:	2300      	movs	r3, #0
 8006750:	e7d5      	b.n	80066fe <f_open+0x30e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006752:	2302      	movs	r3, #2
 8006754:	e7d3      	b.n	80066fe <f_open+0x30e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006756:	2301      	movs	r3, #1
 8006758:	e7d1      	b.n	80066fe <f_open+0x30e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800675a:	2305      	movs	r3, #5
 800675c:	e678      	b.n	8006450 <f_open+0x60>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800675e:	0752      	lsls	r2, r2, #29
 8006760:	d467      	bmi.n	8006832 <f_open+0x442>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006762:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8006766:	06db      	lsls	r3, r3, #27
 8006768:	d5f7      	bpl.n	800675a <f_open+0x36a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800676a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800676c:	f899 1000 	ldrb.w	r1, [r9]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006774:	f109 032c 	add.w	r3, r9, #44	; 0x2c
 8006778:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 800677a:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800677c:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800677e:	bf04      	itt	eq
 8006780:	8a9b      	ldrheq	r3, [r3, #20]
 8006782:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006786:	920b      	str	r2, [sp, #44]	; 0x2c
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	1e95      	subs	r5, r2, #2
 800678e:	f108 3bff 	add.w	fp, r8, #4294967295
 8006792:	46aa      	mov	sl, r5
 8006794:	2700      	movs	r7, #0
		w = p[si++];					/* Get a character */
 8006796:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800679a:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 800679c:	f107 0401 	add.w	r4, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 80067a0:	d90c      	bls.n	80067bc <f_open+0x3cc>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80067a2:	282f      	cmp	r0, #47	; 0x2f
 80067a4:	d002      	beq.n	80067ac <f_open+0x3bc>
 80067a6:	285c      	cmp	r0, #92	; 0x5c
 80067a8:	f47f ae57 	bne.w	800645a <f_open+0x6a>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80067ac:	f818 3004 	ldrb.w	r3, [r8, r4]
 80067b0:	2b2f      	cmp	r3, #47	; 0x2f
 80067b2:	f43f ae50 	beq.w	8006456 <f_open+0x66>
 80067b6:	2b5c      	cmp	r3, #92	; 0x5c
 80067b8:	f43f ae4d 	beq.w	8006456 <f_open+0x66>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067bc:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 80067be:	44a0      	add	r8, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067c0:	bf34      	ite	cc
 80067c2:	2404      	movcc	r4, #4
 80067c4:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80067c6:	2f00      	cmp	r7, #0
 80067c8:	f47f ae5f 	bne.w	800648a <f_open+0x9a>
	lfn[di] = 0;						/* LFN is created */
 80067cc:	2100      	movs	r1, #0
 80067ce:	f822 1017 	strh.w	r1, [r2, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	f43f ae43 	beq.w	800645e <f_open+0x6e>
		*d++ = (BYTE)val;
 80067d8:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 80067dc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80067e0:	f8cd 304b 	str.w	r3, [sp, #75]	; 0x4b
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80067e4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	f43f ae57 	beq.w	800649c <f_open+0xac>
 80067ee:	2b2e      	cmp	r3, #46	; 0x2e
 80067f0:	f43f ae54 	beq.w	800649c <f_open+0xac>
	if (si) cf |= NS_LOSS | NS_LFN;
 80067f4:	b109      	cbz	r1, 80067fa <f_open+0x40a>
 80067f6:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80067fa:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 80067fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006800:	d001      	beq.n	8006806 <f_open+0x416>
 8006802:	3f01      	subs	r7, #1
 8006804:	d1f9      	bne.n	80067fa <f_open+0x40a>
		dp->fn[i++] = (BYTE)w;
 8006806:	2500      	movs	r5, #0
 8006808:	f04f 0a08 	mov.w	sl, #8
 800680c:	46ab      	mov	fp, r5
		w = lfn[si++];					/* Get an LFN character */
 800680e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 8006812:	1c4b      	adds	r3, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8006814:	2800      	cmp	r0, #0
 8006816:	f43f ae52 	beq.w	80064be <f_open+0xce>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800681a:	2820      	cmp	r0, #32
 800681c:	d005      	beq.n	800682a <f_open+0x43a>
 800681e:	282e      	cmp	r0, #46	; 0x2e
 8006820:	f47f ae3e 	bne.w	80064a0 <f_open+0xb0>
 8006824:	42bb      	cmp	r3, r7
 8006826:	f43f ae3f 	beq.w	80064a8 <f_open+0xb8>
			cf |= NS_LOSS | NS_LFN; continue;
 800682a:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 800682e:	4619      	mov	r1, r3
 8006830:	e7ed      	b.n	800680e <f_open+0x41e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006832:	f99d 304f 	ldrsb.w	r3, [sp, #79]	; 0x4f
 8006836:	2b00      	cmp	r3, #0
 8006838:	f6ff ae11 	blt.w	800645e <f_open+0x6e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800683c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8006840:	f013 0310 	ands.w	r3, r3, #16
 8006844:	f47f ae7f 	bne.w	8006546 <f_open+0x156>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006848:	9a08      	ldr	r2, [sp, #32]
 800684a:	9810      	ldr	r0, [sp, #64]	; 0x40
	if (fs->fs_type == FS_FAT32) {
 800684c:	7814      	ldrb	r4, [r2, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 800684e:	8b41      	ldrh	r1, [r0, #26]
	if (fs->fs_type == FS_FAT32) {
 8006850:	2c03      	cmp	r4, #3
 8006852:	d102      	bne.n	800685a <f_open+0x46a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006854:	8a84      	ldrh	r4, [r0, #20]
 8006856:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800685a:	60b1      	str	r1, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800685c:	301c      	adds	r0, #28
 800685e:	f7ff fb89 	bl	8005f74 <ld_dword>
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006862:	6032      	str	r2, [r6, #0]
			fp->obj.id = fs->id;
 8006864:	88d2      	ldrh	r2, [r2, #6]
 8006866:	80b2      	strh	r2, [r6, #4]
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006868:	9a03      	ldr	r2, [sp, #12]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800686a:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800686c:	2100      	movs	r1, #0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800686e:	f002 0201 	and.w	r2, r2, #1
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006872:	6231      	str	r1, [r6, #32]
			fp->flag = mode;		/* Set file access mode */
 8006874:	7432      	strb	r2, [r6, #16]
			fp->err = 0;			/* Clear error flag */
 8006876:	7471      	strb	r1, [r6, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8006878:	61f1      	str	r1, [r6, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800687a:	6171      	str	r1, [r6, #20]

	LEAVE_FF(fs, res);
}
 800687c:	4618      	mov	r0, r3
 800687e:	b037      	add	sp, #220	; 0xdc
 8006880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006884:	4603      	mov	r3, r0
 8006886:	e5e3      	b.n	8006450 <f_open+0x60>
	if (!fp) return FR_INVALID_OBJECT;
 8006888:	2309      	movs	r3, #9
 800688a:	e7f7      	b.n	800687c <f_open+0x48c>
				if (IsUpper(w)) {		/* ASCII large capital */
 800688c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006890:	2919      	cmp	r1, #25
 8006892:	f67f ae8c 	bls.w	80065ae <f_open+0x1be>
					if (IsLower(w)) {	/* ASCII small capital */
 8006896:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800689a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800689c:	bf9e      	ittt	ls
 800689e:	3820      	subls	r0, #32
 80068a0:	f045 0501 	orrls.w	r5, r5, #1
 80068a4:	b280      	uxthls	r0, r0
 80068a6:	e67a      	b.n	800659e <f_open+0x1ae>

080068a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	4699      	mov	r9, r3
 80068ae:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80068b0:	2300      	movs	r3, #0
{
 80068b2:	4688      	mov	r8, r1
	*br = 0;	/* Clear read byte counter */
 80068b4:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80068b8:	a903      	add	r1, sp, #12
{
 80068ba:	4604      	mov	r4, r0
 80068bc:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80068be:	f7ff fb94 	bl	8005fea <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068c2:	4605      	mov	r5, r0
 80068c4:	bb00      	cbnz	r0, 8006908 <f_read+0x60>
 80068c6:	7c65      	ldrb	r5, [r4, #17]
 80068c8:	b9f5      	cbnz	r5, 8006908 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80068ca:	7c23      	ldrb	r3, [r4, #16]
 80068cc:	f013 0301 	ands.w	r3, r3, #1
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	d07b      	beq.n	80069cc <f_read+0x124>
	remain = fp->obj.objsize - fp->fptr;
 80068d4:	68e2      	ldr	r2, [r4, #12]
 80068d6:	6963      	ldr	r3, [r4, #20]
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	4296      	cmp	r6, r2
 80068dc:	bf28      	it	cs
 80068de:	4616      	movcs	r6, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80068e0:	f104 0b24 	add.w	fp, r4, #36	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 80068e4:	b186      	cbz	r6, 8006908 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80068e6:	6961      	ldr	r1, [r4, #20]
 80068e8:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d15a      	bne.n	80069a6 <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	895f      	ldrh	r7, [r3, #10]
 80068f4:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80068f6:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 80068fa:	d11b      	bne.n	8006934 <f_read+0x8c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80068fc:	b941      	cbnz	r1, 8006910 <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80068fe:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006900:	2801      	cmp	r0, #1
 8006902:	d810      	bhi.n	8006926 <f_read+0x7e>
 8006904:	2502      	movs	r5, #2
 8006906:	7465      	strb	r5, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006908:	4628      	mov	r0, r5
 800690a:	b005      	add	sp, #20
 800690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8006910:	6a23      	ldr	r3, [r4, #32]
 8006912:	b11b      	cbz	r3, 800691c <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff fb3a 	bl	8005f8e <clmt_clust>
 800691a:	e7f1      	b.n	8006900 <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800691c:	69a1      	ldr	r1, [r4, #24]
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	f7ff fcb8 	bl	8006294 <get_fat.isra.0>
 8006924:	e7ec      	b.n	8006900 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d103      	bne.n	8006932 <f_read+0x8a>
 800692a:	2301      	movs	r3, #1
 800692c:	9d00      	ldr	r5, [sp, #0]
 800692e:	7463      	strb	r3, [r4, #17]
 8006930:	e7ea      	b.n	8006908 <f_read+0x60>
				fp->clust = clst;				/* Update current cluster */
 8006932:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006934:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006938:	69a1      	ldr	r1, [r4, #24]
 800693a:	4650      	mov	r0, sl
 800693c:	f7ff fb1c 	bl	8005f78 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006940:	2800      	cmp	r0, #0
 8006942:	d0df      	beq.n	8006904 <f_read+0x5c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006944:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8006948:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800694c:	d31d      	bcc.n	800698a <f_read+0xe2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800694e:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8006952:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 8006956:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006958:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800695c:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 8006960:	bf88      	it	hi
 8006962:	1bcb      	subhi	r3, r1, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006964:	4641      	mov	r1, r8
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	f7ff faf6 	bl	8005f58 <disk_read>
 800696c:	2800      	cmp	r0, #0
 800696e:	d1dc      	bne.n	800692a <f_read+0x82>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	025b      	lsls	r3, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006974:	6962      	ldr	r2, [r4, #20]
 8006976:	441a      	add	r2, r3
 8006978:	6162      	str	r2, [r4, #20]
 800697a:	f8d9 2000 	ldr.w	r2, [r9]
 800697e:	441a      	add	r2, r3
 8006980:	4498      	add	r8, r3
 8006982:	f8c9 2000 	str.w	r2, [r9]
 8006986:	1af6      	subs	r6, r6, r3
 8006988:	e7ac      	b.n	80068e4 <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800698a:	69e3      	ldr	r3, [r4, #28]
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <f_read+0xfc>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006990:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006994:	9201      	str	r2, [sp, #4]
 8006996:	2301      	movs	r3, #1
 8006998:	4659      	mov	r1, fp
 800699a:	f7ff fadd 	bl	8005f58 <disk_read>
 800699e:	9a01      	ldr	r2, [sp, #4]
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1c2      	bne.n	800692a <f_read+0x82>
			fp->sect = sect;
 80069a4:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069a6:	6962      	ldr	r2, [r4, #20]
 80069a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ac:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80069b0:	42b3      	cmp	r3, r6
 80069b2:	bf28      	it	cs
 80069b4:	4633      	movcs	r3, r6
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80069b6:	445a      	add	r2, fp
	if (cnt) {
 80069b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80069bc:	18d0      	adds	r0, r2, r3
			*d++ = *s++;
 80069be:	f812 7b01 	ldrb.w	r7, [r2], #1
 80069c2:	f801 7f01 	strb.w	r7, [r1, #1]!
		} while (--cnt);
 80069c6:	4282      	cmp	r2, r0
 80069c8:	d1f9      	bne.n	80069be <f_read+0x116>
 80069ca:	e7d3      	b.n	8006974 <f_read+0xcc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80069cc:	2507      	movs	r5, #7
 80069ce:	e79b      	b.n	8006908 <f_read+0x60>

080069d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80069d0:	b513      	push	{r0, r1, r4, lr}
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80069d2:	a901      	add	r1, sp, #4
{
 80069d4:	4604      	mov	r4, r0
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80069d6:	f7ff fb08 	bl	8005fea <validate>
		if (res == FR_OK) {
 80069da:	b900      	cbnz	r0, 80069de <f_close+0xe>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80069dc:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80069de:	b002      	add	sp, #8
 80069e0:	bd10      	pop	{r4, pc}

080069e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80069e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e6:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80069e8:	a901      	add	r1, sp, #4
{
 80069ea:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80069ec:	f7ff fafd 	bl	8005fea <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80069f0:	4605      	mov	r5, r0
 80069f2:	b9e8      	cbnz	r0, 8006a30 <f_lseek+0x4e>
 80069f4:	7c65      	ldrb	r5, [r4, #17]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80069f6:	b9dd      	cbnz	r5, 8006a30 <f_lseek+0x4e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80069f8:	6a23      	ldr	r3, [r4, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d068      	beq.n	8006ad0 <f_lseek+0xee>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80069fe:	1c71      	adds	r1, r6, #1
 8006a00:	d139      	bne.n	8006a76 <f_lseek+0x94>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006a02:	461e      	mov	r6, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006a04:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006a08:	f856 bb04 	ldr.w	fp, [r6], #4
 8006a0c:	2702      	movs	r7, #2
			if (cl) {
 8006a0e:	f1b8 0f00 	cmp.w	r8, #0
 8006a12:	d028      	beq.n	8006a66 <f_lseek+0x84>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006a14:	4640      	mov	r0, r8
 8006a16:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	4681      	mov	r9, r0
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	f7ff fc38 	bl	8006294 <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006a24:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8006a26:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006a2a:	d807      	bhi.n	8006a3c <f_lseek+0x5a>
 8006a2c:	2502      	movs	r5, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a2e:	7465      	strb	r5, [r4, #17]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8006a30:	4628      	mov	r0, r5
 8006a32:	b003      	add	sp, #12
 8006a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a38:	4680      	mov	r8, r0
 8006a3a:	e7eb      	b.n	8006a14 <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a3c:	1c42      	adds	r2, r0, #1
 8006a3e:	d101      	bne.n	8006a44 <f_lseek+0x62>
 8006a40:	2501      	movs	r5, #1
 8006a42:	e7f4      	b.n	8006a2e <f_lseek+0x4c>
					} while (cl == pcl + 1);
 8006a44:	f109 0901 	add.w	r9, r9, #1
 8006a48:	4581      	cmp	r9, r0
 8006a4a:	d0e6      	beq.n	8006a1a <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006a4c:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006a4e:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
 8006a50:	bf21      	itttt	cs
 8006a52:	4633      	movcs	r3, r6
 8006a54:	f843 ab08 	strcs.w	sl, [r3], #8
 8006a58:	f8c6 8004 	strcs.w	r8, [r6, #4]
 8006a5c:	461e      	movcs	r6, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	4283      	cmp	r3, r0
 8006a64:	d8e8      	bhi.n	8006a38 <f_lseek+0x56>
			*fp->cltbl = ulen;	/* Number of items used */
 8006a66:	6a23      	ldr	r3, [r4, #32]
			if (ulen <= tlen) {
 8006a68:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8006a6a:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
 8006a6c:	f200 8082 	bhi.w	8006b74 <f_lseek+0x192>
				*tbl = 0;		/* Terminate table */
 8006a70:	2300      	movs	r3, #0
 8006a72:	6033      	str	r3, [r6, #0]
 8006a74:	e7dc      	b.n	8006a30 <f_lseek+0x4e>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006a76:	68e1      	ldr	r1, [r4, #12]
 8006a78:	428e      	cmp	r6, r1
 8006a7a:	bf28      	it	cs
 8006a7c:	460e      	movcs	r6, r1
			fp->fptr = ofs;				/* Set file pointer */
 8006a7e:	6166      	str	r6, [r4, #20]
			if (ofs) {
 8006a80:	2e00      	cmp	r6, #0
 8006a82:	d0d5      	beq.n	8006a30 <f_lseek+0x4e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006a84:	f106 38ff 	add.w	r8, r6, #4294967295
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fa7f 	bl	8005f8e <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8006a90:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8006a92:	61a0      	str	r0, [r4, #24]
 8006a94:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 8006a96:	4638      	mov	r0, r7
 8006a98:	f7ff fa6e 	bl	8005f78 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d0c5      	beq.n	8006a2c <f_lseek+0x4a>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006aa0:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006aa4:	2e00      	cmp	r6, #0
 8006aa6:	d0c3      	beq.n	8006a30 <f_lseek+0x4e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006aa8:	897a      	ldrh	r2, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006aaa:	69e3      	ldr	r3, [r4, #28]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006aac:	3a01      	subs	r2, #1
 8006aae:	ea02 2258 	and.w	r2, r2, r8, lsr #9
 8006ab2:	1816      	adds	r6, r2, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006ab4:	42b3      	cmp	r3, r6
 8006ab6:	d0bb      	beq.n	8006a30 <f_lseek+0x4e>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006ab8:	7878      	ldrb	r0, [r7, #1]
 8006aba:	2301      	movs	r3, #1
 8006abc:	4632      	mov	r2, r6
 8006abe:	f104 0124 	add.w	r1, r4, #36	; 0x24
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006ac2:	f7ff fa49 	bl	8005f58 <disk_read>
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d1b9      	bne.n	8006a40 <f_lseek+0x5e>
			fp->sect = nsect;
 8006acc:	61e6      	str	r6, [r4, #28]
 8006ace:	e7af      	b.n	8006a30 <f_lseek+0x4e>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006ad0:	68e2      	ldr	r2, [r4, #12]
		ifptr = fp->fptr;
 8006ad2:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8006ad4:	6165      	str	r5, [r4, #20]
 8006ad6:	4296      	cmp	r6, r2
 8006ad8:	bf28      	it	cs
 8006ada:	4616      	movcs	r6, r2
		if (ofs) {
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	d0a7      	beq.n	8006a30 <f_lseek+0x4e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006ae0:	9a01      	ldr	r2, [sp, #4]
 8006ae2:	8957      	ldrh	r7, [r2, #10]
 8006ae4:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8006ae6:	b1eb      	cbz	r3, 8006b24 <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	1e72      	subs	r2, r6, #1
 8006aec:	fbb3 f1f7 	udiv	r1, r3, r7
 8006af0:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8006af4:	428a      	cmp	r2, r1
 8006af6:	d315      	bcc.n	8006b24 <f_lseek+0x142>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006af8:	427a      	negs	r2, r7
 8006afa:	4013      	ands	r3, r2
				clst = fp->clust;
 8006afc:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006afe:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8006b00:	1af6      	subs	r6, r6, r3
			if (clst != 0) {
 8006b02:	bb29      	cbnz	r1, 8006b50 <f_lseek+0x16e>
		fp->fptr = nsect = 0;
 8006b04:	2600      	movs	r6, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006b06:	6963      	ldr	r3, [r4, #20]
 8006b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d08f      	beq.n	8006a30 <f_lseek+0x4e>
 8006b10:	69e3      	ldr	r3, [r4, #28]
 8006b12:	42b3      	cmp	r3, r6
 8006b14:	d08c      	beq.n	8006a30 <f_lseek+0x4e>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006b16:	9801      	ldr	r0, [sp, #4]
 8006b18:	2301      	movs	r3, #1
 8006b1a:	7840      	ldrb	r0, [r0, #1]
 8006b1c:	4632      	mov	r2, r6
 8006b1e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8006b22:	e7ce      	b.n	8006ac2 <f_lseek+0xe0>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006b24:	68a1      	ldr	r1, [r4, #8]
				fp->clust = clst;
 8006b26:	61a1      	str	r1, [r4, #24]
 8006b28:	e7eb      	b.n	8006b02 <f_lseek+0x120>
					ofs -= bcs; fp->fptr += bcs;
 8006b2a:	443b      	add	r3, r7
 8006b2c:	6163      	str	r3, [r4, #20]
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	f7ff fbb0 	bl	8006294 <get_fat.isra.0>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b34:	1c43      	adds	r3, r0, #1
					ofs -= bcs; fp->fptr += bcs;
 8006b36:	eba6 0607 	sub.w	r6, r6, r7
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006b3a:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b3c:	d080      	beq.n	8006a40 <f_lseek+0x5e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006b3e:	2801      	cmp	r0, #1
 8006b40:	f67f af74 	bls.w	8006a2c <f_lseek+0x4a>
 8006b44:	9b01      	ldr	r3, [sp, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	4283      	cmp	r3, r0
 8006b4a:	f67f af6f 	bls.w	8006a2c <f_lseek+0x4a>
					fp->clust = clst;
 8006b4e:	61a0      	str	r0, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 8006b50:	42be      	cmp	r6, r7
					ofs -= bcs; fp->fptr += bcs;
 8006b52:	6963      	ldr	r3, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 8006b54:	d8e9      	bhi.n	8006b2a <f_lseek+0x148>
				fp->fptr += ofs;
 8006b56:	4433      	add	r3, r6
 8006b58:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8006b5a:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0d0      	beq.n	8006b04 <f_lseek+0x122>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006b62:	9801      	ldr	r0, [sp, #4]
 8006b64:	f7ff fa08 	bl	8005f78 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f43f af5f 	beq.w	8006a2c <f_lseek+0x4a>
					nsect += (DWORD)(ofs / SS(fs));
 8006b6e:	eb00 2656 	add.w	r6, r0, r6, lsr #9
 8006b72:	e7c8      	b.n	8006b06 <f_lseek+0x124>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006b74:	2511      	movs	r5, #17
 8006b76:	e75b      	b.n	8006a30 <f_lseek+0x4e>

08006b78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b78:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <FATFS_LinkDriverEx+0x40>)
 8006b7c:	7b9c      	ldrb	r4, [r3, #14]
 8006b7e:	2c01      	cmp	r4, #1
 8006b80:	d817      	bhi.n	8006bb2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b82:	7b9d      	ldrb	r5, [r3, #14]
 8006b84:	b2ed      	uxtb	r5, r5
 8006b86:	2400      	movs	r4, #0
 8006b88:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006b8a:	7b9d      	ldrb	r5, [r3, #14]
 8006b8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006b90:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8006b92:	7b98      	ldrb	r0, [r3, #14]
 8006b94:	4418      	add	r0, r3
 8006b96:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8006b98:	7b9a      	ldrb	r2, [r3, #14]
 8006b9a:	1c50      	adds	r0, r2, #1
 8006b9c:	b2c0      	uxtb	r0, r0
 8006b9e:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8006ba0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006ba2:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006ba4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006ba6:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8006ba8:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8006baa:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006bac:	70cc      	strb	r4, [r1, #3]
 8006bae:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8006bb0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	e7fc      	b.n	8006bb0 <FATFS_LinkDriverEx+0x38>
 8006bb6:	bf00      	nop
 8006bb8:	20001094 	.word	0x20001094

08006bbc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f7ff bfdb 	b.w	8006b78 <FATFS_LinkDriverEx>
	...

08006bc4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006bc4:	287f      	cmp	r0, #127	; 0x7f
{
 8006bc6:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8006bc8:	d906      	bls.n	8006bd8 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006bca:	b131      	cbz	r1, 8006bda <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006bcc:	28ff      	cmp	r0, #255	; 0xff
 8006bce:	d812      	bhi.n	8006bf6 <ff_convert+0x32>
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <ff_convert+0x38>)
 8006bd2:	3880      	subs	r0, #128	; 0x80
 8006bd4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 8006bdc:	f832 4b02 	ldrh.w	r4, [r2], #2
 8006be0:	4284      	cmp	r4, r0
 8006be2:	b28b      	uxth	r3, r1
 8006be4:	d003      	beq.n	8006bee <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8006be6:	3101      	adds	r1, #1
 8006be8:	2980      	cmp	r1, #128	; 0x80
 8006bea:	d1f7      	bne.n	8006bdc <ff_convert+0x18>
 8006bec:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8006bee:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8006bf2:	b2c0      	uxtb	r0, r0
 8006bf4:	e7f0      	b.n	8006bd8 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e7ee      	b.n	8006bd8 <ff_convert+0x14>
 8006bfa:	bf00      	nop
 8006bfc:	0800c662 	.word	0x0800c662

08006c00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006c02:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <ff_wtoupper+0x7c>)
 8006c04:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <ff_wtoupper+0x80>)
 8006c06:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006c0a:	bf28      	it	cs
 8006c0c:	4613      	movcs	r3, r2
 8006c0e:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8006c10:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 8006c14:	460a      	mov	r2, r1
 8006c16:	b1ab      	cbz	r3, 8006c44 <ff_wtoupper+0x44>
 8006c18:	4298      	cmp	r0, r3
 8006c1a:	d313      	bcc.n	8006c44 <ff_wtoupper+0x44>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006c1c:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8006c20:	0a25      	lsrs	r5, r4, #8
 8006c22:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 8006c24:	fa53 f484 	uxtab	r4, r3, r4
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	da21      	bge.n	8006c70 <ff_wtoupper+0x70>
			switch (cmd) {
 8006c2c:	2d08      	cmp	r5, #8
 8006c2e:	d809      	bhi.n	8006c44 <ff_wtoupper+0x44>
 8006c30:	e8df f005 	tbb	[pc, r5]
 8006c34:	110f0905 	.word	0x110f0905
 8006c38:	19171513 	.word	0x19171513
 8006c3c:	1b          	.byte	0x1b
 8006c3d:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006c3e:	1ac0      	subs	r0, r0, r3
 8006c40:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8006c44:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006c46:	1ac3      	subs	r3, r0, r3
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006c4e:	b280      	uxth	r0, r0
 8006c50:	e7f8      	b.n	8006c44 <ff_wtoupper+0x44>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006c52:	3810      	subs	r0, #16
 8006c54:	e7fb      	b.n	8006c4e <ff_wtoupper+0x4e>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006c56:	3820      	subs	r0, #32
 8006c58:	e7f9      	b.n	8006c4e <ff_wtoupper+0x4e>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006c5a:	3830      	subs	r0, #48	; 0x30
 8006c5c:	e7f7      	b.n	8006c4e <ff_wtoupper+0x4e>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006c5e:	381a      	subs	r0, #26
 8006c60:	e7f5      	b.n	8006c4e <ff_wtoupper+0x4e>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006c62:	3008      	adds	r0, #8
 8006c64:	e7f3      	b.n	8006c4e <ff_wtoupper+0x4e>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006c66:	3850      	subs	r0, #80	; 0x50
 8006c68:	e7f1      	b.n	8006c4e <ff_wtoupper+0x4e>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006c6a:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8006c6e:	e7ee      	b.n	8006c4e <ff_wtoupper+0x4e>
		if (!cmd) p += nc;
 8006c70:	3104      	adds	r1, #4
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	d1cc      	bne.n	8006c10 <ff_wtoupper+0x10>
 8006c76:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8006c7a:	e7c8      	b.n	8006c0e <ff_wtoupper+0xe>
 8006c7c:	0800c762 	.word	0x0800c762
 8006c80:	0800c954 	.word	0x0800c954

08006c84 <Get_ADCChannelValue>:
 */

#include "InternalADC.h"

uint16_t Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8006c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ADC_ChannelConfTypeDef ADC_ChanConf;

	ADC_ChanConf.Channel = channel;
	ADC_ChanConf.Rank = 1;
 8006c86:	2301      	movs	r3, #1
{
 8006c88:	4604      	mov	r4, r0
	ADC_ChanConf.Channel = channel;
 8006c8a:	9100      	str	r1, [sp, #0]
	ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_15CYCLES;

	HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 8006c8c:	4669      	mov	r1, sp
	ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8006c8e:	e9cd 3301 	strd	r3, r3, [sp, #4]
	HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 8006c92:	f7fb fded 	bl	8002870 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(hadc);
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7fb fd10 	bl	80026bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 10);   //等待转换完成，50为最大等待时间，单位为ms
 8006c9c:	210a      	movs	r1, #10
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7fb fd90 	bl	80027c4 <HAL_ADC_PollForConversion>
	return (uint16_t) HAL_ADC_GetValue(hadc);
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f7fb fde0 	bl	800286a <HAL_ADC_GetValue>
}
 8006caa:	b280      	uxth	r0, r0
 8006cac:	b004      	add	sp, #16
 8006cae:	bd10      	pop	{r4, pc}

08006cb0 <delay_us>:
 */

#include "delay.h"

void delay_us(uint32_t us)
{
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4604      	mov	r4, r0
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 1000000 * us);
 8006cb4:	f7fc fc36 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <delay_us+0x1c>)
 8006cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cbe:	4363      	muls	r3, r4
	while (delay--)
 8006cc0:	b903      	cbnz	r3, 8006cc4 <delay_us+0x14>
		__NOP();
}
 8006cc2:	bd10      	pop	{r4, pc}
		__NOP();
 8006cc4:	bf00      	nop
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	e7fa      	b.n	8006cc0 <delay_us+0x10>
 8006cca:	bf00      	nop
 8006ccc:	000f4240 	.word	0x000f4240

08006cd0 <Clean_Dormancy_Count>:

//休眠计数 -1 进入预休眠模式
int16_t Dormancy_Count = -1;

void Clean_Dormancy_Count()
{
 8006cd0:	b510      	push	{r4, lr}
	if (Dormancy_Count == -1)
 8006cd2:	4c05      	ldr	r4, [pc, #20]	; (8006ce8 <Clean_Dormancy_Count+0x18>)
 8006cd4:	f9b4 3000 	ldrsh.w	r3, [r4]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	d102      	bne.n	8006ce2 <Clean_Dormancy_Count+0x12>
	{
		//已经进入预休眠状态 重新启动定时器
		HAL_TIM_Base_Start_IT(&htim7);
 8006cdc:	4803      	ldr	r0, [pc, #12]	; (8006cec <Clean_Dormancy_Count+0x1c>)
 8006cde:	f7fd fcab 	bl	8004638 <HAL_TIM_Base_Start_IT>
	}
	Dormancy_Count = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	8023      	strh	r3, [r4, #0]
}
 8006ce6:	bd10      	pop	{r4, pc}
 8006ce8:	2000002c 	.word	0x2000002c
 8006cec:	20000f58 	.word	0x20000f58

08006cf0 <PreHibernate>:

void PreHibernate()
{
 8006cf0:	b570      	push	{r4, r5, r6, lr}
	Screen_Clear();
 8006cf2:	f000 fe27 	bl	8007944 <Screen_Clear>
	{
		Screen_ShowPicture_Num(1, (var % 70) + 1);
		HAL_Delay(40);
		//HAL_Delay(1000);
		//判断是否中途退出预休眠模式
		if (Dormancy_Count != -1)
 8006cf6:	4e0e      	ldr	r6, [pc, #56]	; (8006d30 <PreHibernate+0x40>)
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 8006cf8:	2401      	movs	r4, #1
		Screen_ShowPicture_Num(1, (var % 70) + 1);
 8006cfa:	2546      	movs	r5, #70	; 0x46
 8006cfc:	fbb4 f1f5 	udiv	r1, r4, r5
 8006d00:	fb05 4111 	mls	r1, r5, r1, r4
 8006d04:	3101      	adds	r1, #1
 8006d06:	b2c9      	uxtb	r1, r1
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f000 fecb 	bl	8007aa4 <Screen_ShowPicture_Num>
		HAL_Delay(40);
 8006d0e:	2028      	movs	r0, #40	; 0x28
 8006d10:	f7fb fc1a 	bl	8002548 <HAL_Delay>
		if (Dormancy_Count != -1)
 8006d14:	f9b6 3000 	ldrsh.w	r3, [r6]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	d003      	beq.n	8006d24 <PreHibernate+0x34>
			return;
		}

	}
	//Screen_Clear();
}
 8006d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Screen_Clear();
 8006d20:	f000 be10 	b.w	8007944 <Screen_Clear>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 8006d24:	3401      	adds	r4, #1
 8006d26:	f5b4 7f0e 	cmp.w	r4, #568	; 0x238
 8006d2a:	d1e7      	bne.n	8006cfc <PreHibernate+0xc>
}
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	bf00      	nop
 8006d30:	2000002c 	.word	0x2000002c

08006d34 <Hibernate>:

void Hibernate()
{
 8006d34:	b508      	push	{r3, lr}
	Screen_Close();
 8006d36:	f000 fe08 	bl	800794a <Screen_Close>
	HAL_PWR_EnterSTANDBYMode();
}
 8006d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_PWR_EnterSTANDBYMode();
 8006d3e:	f7fc b967 	b.w	8003010 <HAL_PWR_EnterSTANDBYMode>
	...

08006d44 <Periodic_Dormancy_Counter>:

void Periodic_Dormancy_Counter()
{
 8006d44:	b510      	push	{r4, lr}
	Dormancy_Count++;
 8006d46:	4c0c      	ldr	r4, [pc, #48]	; (8006d78 <Periodic_Dormancy_Counter+0x34>)
 8006d48:	8823      	ldrh	r3, [r4, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	b21b      	sxth	r3, r3

	if (Dormancy_Count > Dormancy_Count_Max)
 8006d4e:	2b06      	cmp	r3, #6
	Dormancy_Count++;
 8006d50:	8023      	strh	r3, [r4, #0]
	if (Dormancy_Count > Dormancy_Count_Max)
 8006d52:	dd0f      	ble.n	8006d74 <Periodic_Dormancy_Counter+0x30>
	{
		//停止定时器
		HAL_TIM_Base_Stop_IT(&htim7);
 8006d54:	4809      	ldr	r0, [pc, #36]	; (8006d7c <Periodic_Dormancy_Counter+0x38>)
 8006d56:	f7fd fca9 	bl	80046ac <HAL_TIM_Base_Stop_IT>
		Dormancy_Count = -1;
 8006d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d5e:	8023      	strh	r3, [r4, #0]
		//进入预休眠模式
		PreHibernate();
 8006d60:	f7ff ffc6 	bl	8006cf0 <PreHibernate>
		if (Dormancy_Count != -1)
 8006d64:	f9b4 3000 	ldrsh.w	r3, [r4]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	d103      	bne.n	8006d74 <Periodic_Dormancy_Counter+0x30>
			return;
		}
		//执行完成任务 进入休眠模式
		Hibernate();
	}
}
 8006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Hibernate();
 8006d70:	f7ff bfe0 	b.w	8006d34 <Hibernate>
}
 8006d74:	bd10      	pop	{r4, pc}
 8006d76:	bf00      	nop
 8006d78:	2000002c 	.word	0x2000002c
 8006d7c:	20000f58 	.word	0x20000f58

08006d80 <GetBatteryLevel>:
uint8_t ID[4];          //设备ID缓存数组
uint32_t i;

//获取电量
float GetBatteryLevel()
{
 8006d80:	b508      	push	{r3, lr}
	return Get_ADCChannelValue(&hadc1, ADC_CHANNEL_4) * 3.3 * 11 / 4096;
 8006d82:	2104      	movs	r1, #4
 8006d84:	480e      	ldr	r0, [pc, #56]	; (8006dc0 <GetBatteryLevel+0x40>)
 8006d86:	f7ff ff7d 	bl	8006c84 <Get_ADCChannelValue>
 8006d8a:	f7f9 fbcb 	bl	8000524 <__aeabi_i2d>
 8006d8e:	a30a      	add	r3, pc, #40	; (adr r3, 8006db8 <GetBatteryLevel+0x38>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <GetBatteryLevel+0x44>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f7f9 fc2c 	bl	80005f8 <__aeabi_dmul>
 8006da0:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <GetBatteryLevel+0x48>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	f7f9 ff1e 	bl	8000be8 <__aeabi_d2f>
}
 8006dac:	ee00 0a10 	vmov	s0, r0
 8006db0:	bd08      	pop	{r3, pc}
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
 8006db8:	66666666 	.word	0x66666666
 8006dbc:	400a6666 	.word	0x400a6666
 8006dc0:	20000298 	.word	0x20000298
 8006dc4:	40260000 	.word	0x40260000
 8006dc8:	3f300000 	.word	0x3f300000
 8006dcc:	00000000 	.word	0x00000000

08006dd0 <GetInternalTemperature>:

//获取内部温度
float GetInternalTemperature()
{
 8006dd0:	b508      	push	{r3, lr}
	return ((Get_ADCChannelValue(&hadc1, ADC_CHANNEL_TEMPSENSOR) * 3.3 / 4096) - 0.76) / 0.0025 + 25;
 8006dd2:	2110      	movs	r1, #16
 8006dd4:	4816      	ldr	r0, [pc, #88]	; (8006e30 <GetInternalTemperature+0x60>)
 8006dd6:	f7ff ff55 	bl	8006c84 <Get_ADCChannelValue>
 8006dda:	f7f9 fba3 	bl	8000524 <__aeabi_i2d>
 8006dde:	a30e      	add	r3, pc, #56	; (adr r3, 8006e18 <GetInternalTemperature+0x48>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fc08 	bl	80005f8 <__aeabi_dmul>
 8006de8:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <GetInternalTemperature+0x64>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	a30b      	add	r3, pc, #44	; (adr r3, 8006e20 <GetInternalTemperature+0x50>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fa47 	bl	8000288 <__aeabi_dsub>
 8006dfa:	a30b      	add	r3, pc, #44	; (adr r3, 8006e28 <GetInternalTemperature+0x58>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fd24 	bl	800084c <__aeabi_ddiv>
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <GetInternalTemperature+0x68>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f7f9 fa40 	bl	800028c <__adddf3>
 8006e0c:	f7f9 feec 	bl	8000be8 <__aeabi_d2f>
}
 8006e10:	ee00 0a10 	vmov	s0, r0
 8006e14:	bd08      	pop	{r3, pc}
 8006e16:	bf00      	nop
 8006e18:	66666666 	.word	0x66666666
 8006e1c:	400a6666 	.word	0x400a6666
 8006e20:	851eb852 	.word	0x851eb852
 8006e24:	3fe851eb 	.word	0x3fe851eb
 8006e28:	47ae147b 	.word	0x47ae147b
 8006e2c:	3f647ae1 	.word	0x3f647ae1
 8006e30:	20000298 	.word	0x20000298
 8006e34:	3f300000 	.word	0x3f300000
 8006e38:	40390000 	.word	0x40390000

08006e3c <EnableAllMotorEncoders>:

TIM_HandleTypeDef *Motor_Encoders[4] = { &htim1, &htim8, &htim5, &htim4 };

//开启全部编码器
void EnableAllMotorEncoders()
{
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d05      	ldr	r5, [pc, #20]	; (8006e54 <EnableAllMotorEncoders+0x18>)
	for (int var = 0; var < Motor_Number; ++var)
 8006e40:	2400      	movs	r4, #0
	{
		HAL_TIM_Encoder_Start(Motor_Encoders[var], TIM_CHANNEL_ALL);
 8006e42:	f855 0b04 	ldr.w	r0, [r5], #4
 8006e46:	213c      	movs	r1, #60	; 0x3c
	for (int var = 0; var < Motor_Number; ++var)
 8006e48:	3401      	adds	r4, #1
		HAL_TIM_Encoder_Start(Motor_Encoders[var], TIM_CHANNEL_ALL);
 8006e4a:	f7fd fc48 	bl	80046de <HAL_TIM_Encoder_Start>
	for (int var = 0; var < Motor_Number; ++var)
 8006e4e:	2c04      	cmp	r4, #4
 8006e50:	d1f7      	bne.n	8006e42 <EnableAllMotorEncoders+0x6>
	}
}
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	20000040 	.word	0x20000040

08006e58 <UpdateAllMotorSpeed>:

//

void UpdateAllMotorSpeed()
{
 8006e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006eb8 <UpdateAllMotorSpeed+0x60>
 8006e60:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006ebc <UpdateAllMotorSpeed+0x64>
 8006e64:	4d12      	ldr	r5, [pc, #72]	; (8006eb0 <UpdateAllMotorSpeed+0x58>)
 8006e66:	2404      	movs	r4, #4
	float speed_duty;

	for (int var = 0; var < Motor_Number; ++var)
	{
		speed_count = (short) __HAL_TIM_GET_COUNTER(Motor_Encoders[var]);
		__HAL_TIM_SET_COUNTER(Motor_Encoders[var], 0);
 8006e68:	f04f 0b00 	mov.w	fp, #0
		speed_count = (short) __HAL_TIM_GET_COUNTER(Motor_Encoders[var]);
 8006e6c:	f859 3b04 	ldr.w	r3, [r9], #4

		//计算速度
		speed_duty = speed_count * 100.0 / Motor_Encoder_Max_Counts[var];
 8006e70:	f858 ab04 	ldr.w	sl, [r8], #4
		speed_count = (short) __HAL_TIM_GET_COUNTER(Motor_Encoders[var]);
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a58      	ldr	r0, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(Motor_Encoders[var], 0);
 8006e78:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
		speed_duty = speed_count * 100.0 / Motor_Encoder_Max_Counts[var];
 8006e7c:	b200      	sxth	r0, r0
 8006e7e:	f7f9 fb51 	bl	8000524 <__aeabi_i2d>
 8006e82:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <UpdateAllMotorSpeed+0x5c>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	f7f9 fbb7 	bl	80005f8 <__aeabi_dmul>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	460f      	mov	r7, r1
 8006e90:	f7f9 fb5a 	bl	8000548 <__aeabi_f2d>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 fcd6 	bl	800084c <__aeabi_ddiv>
 8006ea0:	f7f9 fea2 	bl	8000be8 <__aeabi_d2f>
	for (int var = 0; var < Motor_Number; ++var)
 8006ea4:	3c01      	subs	r4, #1
		speed_duty = speed_count * 100.0 / Motor_Encoder_Max_Counts[var];
 8006ea6:	f845 0b04 	str.w	r0, [r5], #4
	for (int var = 0; var < Motor_Number; ++var)
 8006eaa:	d1df      	bne.n	8006e6c <UpdateAllMotorSpeed+0x14>
		Motor_Actual_Speeds[var] = speed_duty;
	}

}
 8006eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb0:	20001874 	.word	0x20001874
 8006eb4:	40590000 	.word	0x40590000
 8006eb8:	20000040 	.word	0x20000040
 8006ebc:	20000030 	.word	0x20000030

08006ec0 <InitMotorPID>:
struct _pid Motor_PID[4];

//初始化PID
void InitMotorPID()
{
	for (uint8_t i = 0; i < Motor_Number; i++)
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <InitMotorPID+0x2c>)
{
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	2100      	movs	r1, #0
	{
		Motor_PID[i].SetSpeed = 0.0;
 8006ec6:	2200      	movs	r2, #0
		Motor_PID[i].ActualSpeed = 0.0;
		Motor_PID[i].err = 0.0;
		Motor_PID[i].err_next = 0.0;
		Motor_PID[i].err_last = 0.0;
		Motor_PID[i].Kp = 2;
 8006ec8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		Motor_PID[i].Ki = 4;
 8006ecc:	f04f 4481 	mov.w	r4, #1082130432	; 0x40800000
	for (uint8_t i = 0; i < Motor_Number; i++)
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	2904      	cmp	r1, #4
		Motor_PID[i].SetSpeed = 0.0;
 8006ed4:	601a      	str	r2, [r3, #0]
		Motor_PID[i].ActualSpeed = 0.0;
 8006ed6:	605a      	str	r2, [r3, #4]
		Motor_PID[i].err = 0.0;
 8006ed8:	609a      	str	r2, [r3, #8]
		Motor_PID[i].err_next = 0.0;
 8006eda:	60da      	str	r2, [r3, #12]
		Motor_PID[i].err_last = 0.0;
 8006edc:	611a      	str	r2, [r3, #16]
		Motor_PID[i].Kp = 2;
 8006ede:	6158      	str	r0, [r3, #20]
		Motor_PID[i].Ki = 4;
 8006ee0:	619c      	str	r4, [r3, #24]
		Motor_PID[i].Kd = 2;
 8006ee2:	61d8      	str	r0, [r3, #28]
	for (uint8_t i = 0; i < Motor_Number; i++)
 8006ee4:	f103 0320 	add.w	r3, r3, #32
 8006ee8:	d1f2      	bne.n	8006ed0 <InitMotorPID+0x10>
	}
}
 8006eea:	bd10      	pop	{r4, pc}
 8006eec:	20001884 	.word	0x20001884

08006ef0 <PID_realize>:
	float incrementSpeed;
	//设置当前值
	pid->SetSpeed = speed;
	pid->ActualSpeed = actualSpeed;
	//特殊处理 0 速度
	if (speed == 0)
 8006ef0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->SetSpeed = speed;
 8006ef8:	ed80 0a00 	vstr	s0, [r0]
	pid->ActualSpeed = actualSpeed;
 8006efc:	edc0 0a01 	vstr	s1, [r0, #4]
	if (speed == 0)
 8006f00:	d026      	beq.n	8006f50 <PID_realize+0x60>
	{
		return 0;
	}

	pid->err = pid->SetSpeed - pid->ActualSpeed;
 8006f02:	ee70 7a60 	vsub.f32	s15, s0, s1
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 8006f06:	ed90 7a03 	vldr	s14, [r0, #12]
 8006f0a:	ed90 0a06 	vldr	s0, [r0, #24]
 8006f0e:	ed90 6a05 	vldr	s12, [r0, #20]
	pid->err = pid->SetSpeed - pid->ActualSpeed;
 8006f12:	edc0 7a02 	vstr	s15, [r0, #8]
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 8006f16:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006f1a:	ee27 0a80 	vmul.f32	s0, s15, s0

	pid->ActualSpeed += incrementSpeed;
	pid->err_last = pid->err_next;
	pid->err_next = pid->err;
 8006f1e:	edc0 7a03 	vstr	s15, [r0, #12]
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 8006f22:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006f26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8006f2a:	eef0 6a67 	vmov.f32	s13, s15
 8006f2e:	eee7 6a46 	vfms.f32	s13, s14, s12
 8006f32:	ed90 6a04 	vldr	s12, [r0, #16]
	pid->err_last = pid->err_next;
 8006f36:	ed80 7a04 	vstr	s14, [r0, #16]
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 8006f3a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006f3e:	ed90 6a07 	vldr	s12, [r0, #28]
 8006f42:	eea6 0a26 	vfma.f32	s0, s12, s13
	pid->ActualSpeed += incrementSpeed;
 8006f46:	ee30 0a80 	vadd.f32	s0, s1, s0
 8006f4a:	ed80 0a01 	vstr	s0, [r0, #4]
	return pid->ActualSpeed;
 8006f4e:	4770      	bx	lr
		return 0;
 8006f50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f58 <PID_realize+0x68>
}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	00000000 	.word	0x00000000

08006f5c <UpdateMotorSpeedPID>:
//依照PID算法更新电机速度
float UpdateMotorSpeedPID(Motor_Name motor, float speed, float actualSpeed)
{
	//下一轮应用值
	float ac = 0;
	ac = PID_realize(&Motor_PID[motor], speed, actualSpeed);
 8006f5c:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <UpdateMotorSpeedPID+0xc>)
 8006f5e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8006f62:	f7ff bfc5 	b.w	8006ef0 <PID_realize>
 8006f66:	bf00      	nop
 8006f68:	20001884 	.word	0x20001884

08006f6c <Set_TB6612_State>:
//电机状态缓存
Motor_State Motor_States[] = { Motor_Stop, Motor_Stop, Motor_Stop, Motor_Stop };

//设置驱动板状态
void Set_TB6612_State()
{
 8006f6c:	b510      	push	{r4, lr}
	if (Motor_States[0] != Motor_Stop || Motor_States[1] != Motor_Stop)
 8006f6e:	4c0e      	ldr	r4, [pc, #56]	; (8006fa8 <Set_TB6612_State+0x3c>)
 8006f70:	7823      	ldrb	r3, [r4, #0]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d102      	bne.n	8006f7c <Set_TB6612_State+0x10>
 8006f76:	7863      	ldrb	r3, [r4, #1]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d011      	beq.n	8006fa0 <Set_TB6612_State+0x34>
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_SET);
 8006f7c:	2201      	movs	r2, #1
	}
	else
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_RESET);
 8006f7e:	480b      	ldr	r0, [pc, #44]	; (8006fac <Set_TB6612_State+0x40>)
 8006f80:	2104      	movs	r1, #4
 8006f82:	f7fc f833 	bl	8002fec <HAL_GPIO_WritePin>
	}

	if (Motor_States[2] != Motor_Stop || Motor_States[3] != Motor_Stop)
 8006f86:	78a3      	ldrb	r3, [r4, #2]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d102      	bne.n	8006f92 <Set_TB6612_State+0x26>
 8006f8c:	78e3      	ldrb	r3, [r4, #3]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d008      	beq.n	8006fa4 <Set_TB6612_State+0x38>
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_SET);
 8006f92:	2201      	movs	r2, #1
	}
	else
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_RESET);
	}
}
 8006f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_RESET);
 8006f98:	4804      	ldr	r0, [pc, #16]	; (8006fac <Set_TB6612_State+0x40>)
 8006f9a:	2108      	movs	r1, #8
 8006f9c:	f7fc b826 	b.w	8002fec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_RESET);
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	e7ec      	b.n	8006f7e <Set_TB6612_State+0x12>
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_RESET);
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	e7f5      	b.n	8006f94 <Set_TB6612_State+0x28>
 8006fa8:	20000090 	.word	0x20000090
 8006fac:	40021800 	.word	0x40021800

08006fb0 <SetMotorState>:

//设置单个电机状态
void SetMotorState(Motor_Name motor, Motor_State state)
{
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//缓存
	Motor_States[motor] = state;
 8006fb2:	4b22      	ldr	r3, [pc, #136]	; (800703c <SetMotorState+0x8c>)

	switch (state)
 8006fb4:	2901      	cmp	r1, #1
	Motor_States[motor] = state;
 8006fb6:	5419      	strb	r1, [r3, r0]
{
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460d      	mov	r5, r1
	switch (state)
 8006fbc:	d01e      	beq.n	8006ffc <SetMotorState+0x4c>
 8006fbe:	2902      	cmp	r1, #2
 8006fc0:	d026      	beq.n	8007010 <SetMotorState+0x60>
 8006fc2:	b9b9      	cbnz	r1, 8006ff4 <SetMotorState+0x44>
	{
		case Motor_Forward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8006fc4:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <SetMotorState+0x90>)
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_SET);
 8006fc6:	4f1f      	ldr	r7, [pc, #124]	; (8007044 <SetMotorState+0x94>)
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8006fc8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_SET);
 8006fcc:	4e1e      	ldr	r6, [pc, #120]	; (8007048 <SetMotorState+0x98>)
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8006fce:	481f      	ldr	r0, [pc, #124]	; (800704c <SetMotorState+0x9c>)
 8006fd0:	f7fd ff48 	bl	8004e64 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_SET);
 8006fd4:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
			break;
		case Motor_Backward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8006fd6:	f837 1024 	ldrh.w	r1, [r7, r4, lsl #2]
 8006fda:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_SET);
 8006fde:	eb07 0784 	add.w	r7, r7, r4, lsl #2
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8006fe2:	f7fc f803 	bl	8002fec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_SET);
 8006fe6:	8879      	ldrh	r1, [r7, #2]
 8006fe8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8006fec:	462a      	mov	r2, r5
			break;
		case Motor_Stop:
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 8006fee:	6860      	ldr	r0, [r4, #4]
 8006ff0:	f7fb fffc 	bl	8002fec <HAL_GPIO_WritePin>
			break;
	}

	//设置驱动板状态
	Set_TB6612_State();
}
 8006ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Set_TB6612_State();
 8006ff8:	f7ff bfb8 	b.w	8006f6c <Set_TB6612_State>
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8006ffc:	4b10      	ldr	r3, [pc, #64]	; (8007040 <SetMotorState+0x90>)
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8006ffe:	4f11      	ldr	r7, [pc, #68]	; (8007044 <SetMotorState+0x94>)
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8007000:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8007004:	4811      	ldr	r0, [pc, #68]	; (800704c <SetMotorState+0x9c>)
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8007006:	4e10      	ldr	r6, [pc, #64]	; (8007048 <SetMotorState+0x98>)
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8007008:	f7fd ff2c 	bl	8004e64 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 800700c:	2200      	movs	r2, #0
 800700e:	e7e2      	b.n	8006fd6 <SetMotorState+0x26>
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <SetMotorState+0x90>)
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8007012:	4e0c      	ldr	r6, [pc, #48]	; (8007044 <SetMotorState+0x94>)
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 8007014:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8007018:	4d0b      	ldr	r5, [pc, #44]	; (8007048 <SetMotorState+0x98>)
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 800701a:	480c      	ldr	r0, [pc, #48]	; (800704c <SetMotorState+0x9c>)
 800701c:	f7fd ff64 	bl	8004ee8 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 8007020:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
 8007024:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 8007028:	eb06 0684 	add.w	r6, r6, r4, lsl #2
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 800702c:	2200      	movs	r2, #0
 800702e:	f7fb ffdd 	bl	8002fec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 8007032:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8007036:	8871      	ldrh	r1, [r6, #2]
 8007038:	2200      	movs	r2, #0
 800703a:	e7d8      	b.n	8006fee <SetMotorState+0x3e>
 800703c:	20000090 	.word	0x20000090
 8007040:	20000080 	.word	0x20000080
 8007044:	20000070 	.word	0x20000070
 8007048:	20000050 	.word	0x20000050
 800704c:	20000e38 	.word	0x20000e38

08007050 <SetMotorSpeed>:

//设置单个电机速度
//速度取值 -100 ~ 100 对应占空比 0% - 100%
void SetMotorSpeed(Motor_Name motor, float speed)
{
 8007050:	b510      	push	{r4, lr}
	uint8_t state = 0;
	//设置状态
	if (speed == 0)
 8007052:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800705a:	ed2d 8b02 	vpush	{d8}
 800705e:	4604      	mov	r4, r0
 8007060:	eeb0 8a40 	vmov.f32	s16, s0
	if (speed == 0)
 8007064:	d035      	beq.n	80070d2 <SetMotorSpeed+0x82>
	{
		state = Motor_Stop;
	}
	else if (speed > 0)
 8007066:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		state = Motor_Stop;
 800706e:	bfd4      	ite	le
 8007070:	2101      	movle	r1, #1
 8007072:	2100      	movgt	r1, #0
	{
		state = Motor_Backward;
	}

	//检查电机状态
	if (Motor_States[motor] != state)
 8007074:	4b46      	ldr	r3, [pc, #280]	; (8007190 <SetMotorSpeed+0x140>)
 8007076:	5d1b      	ldrb	r3, [r3, r4]
 8007078:	428b      	cmp	r3, r1
 800707a:	d002      	beq.n	8007082 <SetMotorSpeed+0x32>
	{
		SetMotorState(motor, state);
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff ff97 	bl	8006fb0 <SetMotorState>
	{
		speed = -speed;
	}

	//设置PWM
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 8007082:	4b44      	ldr	r3, [pc, #272]	; (8007194 <SetMotorSpeed+0x144>)
 8007084:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007198 <SetMotorSpeed+0x148>
 8007088:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800708c:	4c43      	ldr	r4, [pc, #268]	; (800719c <SetMotorSpeed+0x14c>)
	if (speed < 0)
 800708e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		speed = -speed;
 8007096:	bf48      	it	mi
 8007098:	eeb1 8a48 	vnegmi.f32	s16, s16
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 800709c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80070a0:	b9e3      	cbnz	r3, 80070dc <SetMotorSpeed+0x8c>
 80070a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a6:	dc16      	bgt.n	80070d6 <SetMotorSpeed+0x86>
 80070a8:	ee18 0a10 	vmov	r0, s16
 80070ac:	f7f9 fa4c 	bl	8000548 <__aeabi_f2d>
 80070b0:	a333      	add	r3, pc, #204	; (adr r3, 8007180 <SetMotorSpeed+0x130>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 fa9f 	bl	80005f8 <__aeabi_dmul>
 80070ba:	a333      	add	r3, pc, #204	; (adr r3, 8007188 <SetMotorSpeed+0x138>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f7f9 fa9a 	bl	80005f8 <__aeabi_dmul>
 80070c4:	f7f9 fd70 	bl	8000ba8 <__aeabi_d2uiz>
 80070c8:	6824      	ldr	r4, [r4, #0]
 80070ca:	6360      	str	r0, [r4, #52]	; 0x34
}
 80070cc:	ecbd 8b02 	vpop	{d8}
 80070d0:	bd10      	pop	{r4, pc}
		state = Motor_Stop;
 80070d2:	2102      	movs	r1, #2
 80070d4:	e7ce      	b.n	8007074 <SetMotorSpeed+0x24>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 80070d6:	4932      	ldr	r1, [pc, #200]	; (80071a0 <SetMotorSpeed+0x150>)
 80070d8:	2000      	movs	r0, #0
 80070da:	e7e9      	b.n	80070b0 <SetMotorSpeed+0x60>
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d118      	bne.n	8007112 <SetMotorSpeed+0xc2>
 80070e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e4:	dc12      	bgt.n	800710c <SetMotorSpeed+0xbc>
 80070e6:	ee18 0a10 	vmov	r0, s16
 80070ea:	f7f9 fa2d 	bl	8000548 <__aeabi_f2d>
 80070ee:	a324      	add	r3, pc, #144	; (adr r3, 8007180 <SetMotorSpeed+0x130>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 fa80 	bl	80005f8 <__aeabi_dmul>
 80070f8:	a323      	add	r3, pc, #140	; (adr r3, 8007188 <SetMotorSpeed+0x138>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f7f9 fa7b 	bl	80005f8 <__aeabi_dmul>
 8007102:	f7f9 fd51 	bl	8000ba8 <__aeabi_d2uiz>
 8007106:	6824      	ldr	r4, [r4, #0]
 8007108:	63a0      	str	r0, [r4, #56]	; 0x38
 800710a:	e7df      	b.n	80070cc <SetMotorSpeed+0x7c>
 800710c:	4924      	ldr	r1, [pc, #144]	; (80071a0 <SetMotorSpeed+0x150>)
 800710e:	2000      	movs	r0, #0
 8007110:	e7ed      	b.n	80070ee <SetMotorSpeed+0x9e>
 8007112:	2b08      	cmp	r3, #8
 8007114:	d118      	bne.n	8007148 <SetMotorSpeed+0xf8>
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	dc12      	bgt.n	8007142 <SetMotorSpeed+0xf2>
 800711c:	ee18 0a10 	vmov	r0, s16
 8007120:	f7f9 fa12 	bl	8000548 <__aeabi_f2d>
 8007124:	a316      	add	r3, pc, #88	; (adr r3, 8007180 <SetMotorSpeed+0x130>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 fa65 	bl	80005f8 <__aeabi_dmul>
 800712e:	a316      	add	r3, pc, #88	; (adr r3, 8007188 <SetMotorSpeed+0x138>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f7f9 fa60 	bl	80005f8 <__aeabi_dmul>
 8007138:	f7f9 fd36 	bl	8000ba8 <__aeabi_d2uiz>
 800713c:	6824      	ldr	r4, [r4, #0]
 800713e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007140:	e7c4      	b.n	80070cc <SetMotorSpeed+0x7c>
 8007142:	4917      	ldr	r1, [pc, #92]	; (80071a0 <SetMotorSpeed+0x150>)
 8007144:	2000      	movs	r0, #0
 8007146:	e7ed      	b.n	8007124 <SetMotorSpeed+0xd4>
 8007148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714c:	dc12      	bgt.n	8007174 <SetMotorSpeed+0x124>
 800714e:	ee18 0a10 	vmov	r0, s16
 8007152:	f7f9 f9f9 	bl	8000548 <__aeabi_f2d>
 8007156:	a30a      	add	r3, pc, #40	; (adr r3, 8007180 <SetMotorSpeed+0x130>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	a309      	add	r3, pc, #36	; (adr r3, 8007188 <SetMotorSpeed+0x138>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 fa47 	bl	80005f8 <__aeabi_dmul>
 800716a:	f7f9 fd1d 	bl	8000ba8 <__aeabi_d2uiz>
 800716e:	6824      	ldr	r4, [r4, #0]
 8007170:	6420      	str	r0, [r4, #64]	; 0x40
}
 8007172:	e7ab      	b.n	80070cc <SetMotorSpeed+0x7c>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 8007174:	490a      	ldr	r1, [pc, #40]	; (80071a0 <SetMotorSpeed+0x150>)
 8007176:	2000      	movs	r0, #0
 8007178:	e7ed      	b.n	8007156 <SetMotorSpeed+0x106>
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w
 8007180:	47ae147b 	.word	0x47ae147b
 8007184:	3f847ae1 	.word	0x3f847ae1
 8007188:	00000000 	.word	0x00000000
 800718c:	40d067c0 	.word	0x40d067c0
 8007190:	20000090 	.word	0x20000090
 8007194:	20000080 	.word	0x20000080
 8007198:	42c80000 	.word	0x42c80000
 800719c:	20000e38 	.word	0x20000e38
 80071a0:	40590000 	.word	0x40590000

080071a4 <InitCar>:

//转弯步进
#define StepLength 2.5

void InitCar()
{
 80071a4:	b508      	push	{r3, lr}
	//初始化PID
	InitMotorPID();
 80071a6:	f7ff fe8b 	bl	8006ec0 <InitMotorPID>
	//使能小车速度监控
	EnableAllMotorEncoders();
}
 80071aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	EnableAllMotorEncoders();
 80071ae:	f7ff be45 	b.w	8006e3c <EnableAllMotorEncoders>
	...

080071b4 <Periodic_UpdateAndSet_Car_ExpectedSpeed>:
	AddCarSpeed(0, 0, z);
}

//周期更新设置值并应用
void Periodic_UpdateAndSet_Car_ExpectedSpeed()
{
 80071b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b6:	4d09      	ldr	r5, [pc, #36]	; (80071dc <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x28>)
 80071b8:	4e09      	ldr	r6, [pc, #36]	; (80071e0 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x2c>)
	//CorrectCarDirection();
	//级联更新计算PID
	for (int motor = 0; motor < Motor_Number; ++motor)
 80071ba:	2400      	movs	r4, #0
	{
		SetMotorSpeed(motor, UpdateMotorSpeedPID(motor, Motor_Expected_Speeds[motor], Motor_Actual_Speeds[motor]));
 80071bc:	b2e0      	uxtb	r0, r4
 80071be:	ecf6 0a01 	vldmia	r6!, {s1}
 80071c2:	ecb5 0a01 	vldmia	r5!, {s0}
 80071c6:	9001      	str	r0, [sp, #4]
	for (int motor = 0; motor < Motor_Number; ++motor)
 80071c8:	3401      	adds	r4, #1
		SetMotorSpeed(motor, UpdateMotorSpeedPID(motor, Motor_Expected_Speeds[motor], Motor_Actual_Speeds[motor]));
 80071ca:	f7ff fec7 	bl	8006f5c <UpdateMotorSpeedPID>
 80071ce:	9801      	ldr	r0, [sp, #4]
 80071d0:	f7ff ff3e 	bl	8007050 <SetMotorSpeed>
	for (int motor = 0; motor < Motor_Number; ++motor)
 80071d4:	2c04      	cmp	r4, #4
 80071d6:	d1f1      	bne.n	80071bc <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x8>
	}
}
 80071d8:	b002      	add	sp, #8
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	20001910 	.word	0x20001910
 80071e0:	20001874 	.word	0x20001874

080071e4 <Is_Car_Runing>:

//判断是否停止
uint8_t Is_Car_Runing()
{
	uint8_t flag = 0;
	for (int var = 0; var < Motor_Number; ++var)
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <Is_Car_Runing+0x1c>)
{
 80071e6:	2004      	movs	r0, #4
	{
		if (Motor_Expected_Speeds[var] != 0)
 80071e8:	ecf3 7a01 	vldmia	r3!, {s15}
 80071ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f4:	d102      	bne.n	80071fc <Is_Car_Runing+0x18>
	for (int var = 0; var < Motor_Number; ++var)
 80071f6:	3801      	subs	r0, #1
 80071f8:	d1f6      	bne.n	80071e8 <Is_Car_Runing+0x4>
 80071fa:	4770      	bx	lr
		{
			flag = 1;
 80071fc:	2001      	movs	r0, #1
			break;
		}
	}
	return flag;
}
 80071fe:	4770      	bx	lr
 8007200:	20001910 	.word	0x20001910

08007204 <Periodic_Update_Car_ActualSpeed>:

//周期更新实际值
void Periodic_Update_Car_ActualSpeed()
{
 8007204:	b510      	push	{r4, lr}
	UpdateAllMotorSpeed();
 8007206:	f7ff fe27 	bl	8006e58 <UpdateAllMotorSpeed>

	//根据电机状态 修正已停止电机的速度
	for (int motor = 0; motor < Motor_Number; ++motor)
 800720a:	490b      	ldr	r1, [pc, #44]	; (8007238 <Periodic_Update_Car_ActualSpeed+0x34>)
 800720c:	4b0b      	ldr	r3, [pc, #44]	; (800723c <Periodic_Update_Car_ActualSpeed+0x38>)
 800720e:	2200      	movs	r2, #0
	{
		if (Motor_States[motor] == Motor_Stop && Motor_Actual_Speeds[motor] != 0)
 8007210:	2000      	movs	r0, #0
 8007212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007216:	2c02      	cmp	r4, #2
 8007218:	d107      	bne.n	800722a <Periodic_Update_Car_ActualSpeed+0x26>
 800721a:	edd3 7a00 	vldr	s15, [r3]
 800721e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			Motor_Actual_Speeds[motor] = 0;
 8007226:	bf18      	it	ne
 8007228:	6018      	strne	r0, [r3, #0]
	for (int motor = 0; motor < Motor_Number; ++motor)
 800722a:	3201      	adds	r2, #1
 800722c:	2a04      	cmp	r2, #4
 800722e:	f103 0304 	add.w	r3, r3, #4
 8007232:	d1ee      	bne.n	8007212 <Periodic_Update_Car_ActualSpeed+0xe>
		}
	}
}
 8007234:	bd10      	pop	{r4, pc}
 8007236:	bf00      	nop
 8007238:	20000090 	.word	0x20000090
 800723c:	20001874 	.word	0x20001874

08007240 <Set_Motor_ExpectedSpeed>:

//跳过计算 直接设置某个轮子速度
//只有关闭巡线才能生效
void Set_Motor_ExpectedSpeed(Motor_Name motor, float speed)
{
	Motor_Expected_Speeds[motor] = speed;
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <Set_Motor_ExpectedSpeed+0xc>)
 8007242:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007246:	ed80 0a00 	vstr	s0, [r0]
}
 800724a:	4770      	bx	lr
 800724c:	20001910 	.word	0x20001910

08007250 <Transform_AxisSpeed>:

//计算速度并保存
void Transform_AxisSpeed()
{
	Motor_Expected_Speeds[2] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <Transform_AxisSpeed+0x28>)
 8007252:	edd3 7a00 	vldr	s15, [r3]
 8007256:	ed93 7a02 	vldr	s14, [r3, #8]
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <Transform_AxisSpeed+0x2c>)
 800725c:	ee77 6ac7 	vsub.f32	s13, s15, s14
	Motor_Expected_Speeds[0] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
	Motor_Expected_Speeds[1] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 8007260:	ee77 7a87 	vadd.f32	s15, s15, s14
	Motor_Expected_Speeds[2] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 8007264:	edc3 6a02 	vstr	s13, [r3, #8]
	Motor_Expected_Speeds[0] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 8007268:	edc3 6a00 	vstr	s13, [r3]
	Motor_Expected_Speeds[1] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 800726c:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Speeds[3] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 8007270:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20001904 	.word	0x20001904
 800727c:	20001910 	.word	0x20001910

08007280 <AddCarSpeed>:

//在当前速度的基础上添加 速度
void AddCarSpeed(float vx, float vy, float vz)
{
	Motor_Expected_Axis_Speeds[Axis_X] += vx;
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <AddCarSpeed+0x2c>)
 8007282:	edd3 6a00 	vldr	s13, [r3]
	Motor_Expected_Axis_Speeds[Axis_Y] += vy;
 8007286:	ed93 7a01 	vldr	s14, [r3, #4]
	Motor_Expected_Axis_Speeds[Axis_Z] += vz;
 800728a:	edd3 7a02 	vldr	s15, [r3, #8]
	Motor_Expected_Axis_Speeds[Axis_X] += vx;
 800728e:	ee36 0a80 	vadd.f32	s0, s13, s0
	Motor_Expected_Axis_Speeds[Axis_Y] += vy;
 8007292:	ee77 0a20 	vadd.f32	s1, s14, s1
	Motor_Expected_Axis_Speeds[Axis_Z] += vz;
 8007296:	ee37 1a81 	vadd.f32	s2, s15, s2
	Motor_Expected_Axis_Speeds[Axis_X] += vx;
 800729a:	ed83 0a00 	vstr	s0, [r3]
	Motor_Expected_Axis_Speeds[Axis_Y] += vy;
 800729e:	edc3 0a01 	vstr	s1, [r3, #4]
	Motor_Expected_Axis_Speeds[Axis_Z] += vz;
 80072a2:	ed83 1a02 	vstr	s2, [r3, #8]

	Transform_AxisSpeed();
 80072a6:	f7ff bfd3 	b.w	8007250 <Transform_AxisSpeed>
 80072aa:	bf00      	nop
 80072ac:	20001904 	.word	0x20001904

080072b0 <SetCarSpeed>:
}

//设置速度
void SetCarSpeed(float vx, float vy, float vz)
{
	Motor_Expected_Axis_Speeds[0] = vx;
 80072b0:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <SetCarSpeed+0x14>)
 80072b2:	ed83 0a00 	vstr	s0, [r3]
	Motor_Expected_Axis_Speeds[1] = vy;
 80072b6:	edc3 0a01 	vstr	s1, [r3, #4]
	Motor_Expected_Axis_Speeds[2] = vz;
 80072ba:	ed83 1a02 	vstr	s2, [r3, #8]

	Transform_AxisSpeed();
 80072be:	f7ff bfc7 	b.w	8007250 <Transform_AxisSpeed>
 80072c2:	bf00      	nop
 80072c4:	20001904 	.word	0x20001904

080072c8 <printf_fatfs_error>:
 * @brief  打印输出信息
 * @param  无
 * @retval 无
 */
void printf_fatfs_error(FRESULT fresult)
{
 80072c8:	b508      	push	{r3, lr}
	switch (fresult)
 80072ca:	2813      	cmp	r0, #19
 80072cc:	d838      	bhi.n	8007340 <printf_fatfs_error+0x78>
 80072ce:	e8df f000 	tbb	[pc, r0]
 80072d2:	130a      	.short	0x130a
 80072d4:	1b191715 	.word	0x1b191715
 80072d8:	211f1f1d 	.word	0x211f1f1d
 80072dc:	29272523 	.word	0x29272523
 80072e0:	312f2d2b 	.word	0x312f2d2b
 80072e4:	3533      	.short	0x3533
	{
		case FR_OK:
			printfX("》操作成功。\r\n");
 80072e6:	4917      	ldr	r1, [pc, #92]	; (8007344 <printf_fatfs_error+0x7c>)
			break;
		case FR_TOO_MANY_OPEN_FILES:
			printfX("！！打开太多文件。\r\n");
			break;
		case FR_INVALID_PARAMETER:
			printfX("！！参数无效。\r\n");
 80072e8:	4817      	ldr	r0, [pc, #92]	; (8007348 <printf_fatfs_error+0x80>)
 80072ea:	f001 fb43 	bl	8008974 <strcpy>
			break;
	}
}
 80072ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printfX("！！参数无效。\r\n");
 80072f2:	4815      	ldr	r0, [pc, #84]	; (8007348 <printf_fatfs_error+0x80>)
 80072f4:	f000 bc5a 	b.w	8007bac <printf_Base>
			printfX("！！硬件输入输出驱动出错。\r\n");
 80072f8:	4914      	ldr	r1, [pc, #80]	; (800734c <printf_fatfs_error+0x84>)
 80072fa:	e7f5      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！断言错误。\r\n");
 80072fc:	4914      	ldr	r1, [pc, #80]	; (8007350 <printf_fatfs_error+0x88>)
 80072fe:	e7f3      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！物理设备无法工作。\r\n");
 8007300:	4914      	ldr	r1, [pc, #80]	; (8007354 <printf_fatfs_error+0x8c>)
 8007302:	e7f1      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无法找到文件。\r\n");
 8007304:	4914      	ldr	r1, [pc, #80]	; (8007358 <printf_fatfs_error+0x90>)
 8007306:	e7ef      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无法找到路径。\r\n");
 8007308:	4914      	ldr	r1, [pc, #80]	; (800735c <printf_fatfs_error+0x94>)
 800730a:	e7ed      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无效的路径名。\r\n");
 800730c:	4914      	ldr	r1, [pc, #80]	; (8007360 <printf_fatfs_error+0x98>)
 800730e:	e7eb      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！拒绝访问。\r\n");
 8007310:	4914      	ldr	r1, [pc, #80]	; (8007364 <printf_fatfs_error+0x9c>)
 8007312:	e7e9      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无效的文件或路径。\r\n");
 8007314:	4914      	ldr	r1, [pc, #80]	; (8007368 <printf_fatfs_error+0xa0>)
 8007316:	e7e7      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！逻辑设备写保护。\r\n");
 8007318:	4914      	ldr	r1, [pc, #80]	; (800736c <printf_fatfs_error+0xa4>)
 800731a:	e7e5      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无效的逻辑设备。\r\n");
 800731c:	4914      	ldr	r1, [pc, #80]	; (8007370 <printf_fatfs_error+0xa8>)
 800731e:	e7e3      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无效的工作区。\r\n");
 8007320:	4914      	ldr	r1, [pc, #80]	; (8007374 <printf_fatfs_error+0xac>)
 8007322:	e7e1      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！无效的文件系统。\r\n");
 8007324:	4914      	ldr	r1, [pc, #80]	; (8007378 <printf_fatfs_error+0xb0>)
 8007326:	e7df      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！因函数参数问题导致f_mkfs函数操作失败。\r\n");
 8007328:	4914      	ldr	r1, [pc, #80]	; (800737c <printf_fatfs_error+0xb4>)
 800732a:	e7dd      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！操作超时。\r\n");
 800732c:	4914      	ldr	r1, [pc, #80]	; (8007380 <printf_fatfs_error+0xb8>)
 800732e:	e7db      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！文件被保护。\r\n");
 8007330:	4914      	ldr	r1, [pc, #80]	; (8007384 <printf_fatfs_error+0xbc>)
 8007332:	e7d9      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！长文件名支持获取堆空间失败。\r\n");
 8007334:	4914      	ldr	r1, [pc, #80]	; (8007388 <printf_fatfs_error+0xc0>)
 8007336:	e7d7      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！打开太多文件。\r\n");
 8007338:	4914      	ldr	r1, [pc, #80]	; (800738c <printf_fatfs_error+0xc4>)
 800733a:	e7d5      	b.n	80072e8 <printf_fatfs_error+0x20>
			printfX("！！参数无效。\r\n");
 800733c:	4914      	ldr	r1, [pc, #80]	; (8007390 <printf_fatfs_error+0xc8>)
 800733e:	e7d3      	b.n	80072e8 <printf_fatfs_error+0x20>
}
 8007340:	bd08      	pop	{r3, pc}
 8007342:	bf00      	nop
 8007344:	0800ca10 	.word	0x0800ca10
 8007348:	200010a4 	.word	0x200010a4
 800734c:	0800ca25 	.word	0x0800ca25
 8007350:	0800ca4f 	.word	0x0800ca4f
 8007354:	0800ca67 	.word	0x0800ca67
 8007358:	0800ca8b 	.word	0x0800ca8b
 800735c:	0800caa9 	.word	0x0800caa9
 8007360:	0800cac7 	.word	0x0800cac7
 8007364:	0800cae5 	.word	0x0800cae5
 8007368:	0800cafd 	.word	0x0800cafd
 800736c:	0800cb21 	.word	0x0800cb21
 8007370:	0800cb42 	.word	0x0800cb42
 8007374:	0800cb63 	.word	0x0800cb63
 8007378:	0800cb81 	.word	0x0800cb81
 800737c:	0800cba2 	.word	0x0800cba2
 8007380:	0800cbe1 	.word	0x0800cbe1
 8007384:	0800cbf9 	.word	0x0800cbf9
 8007388:	0800cc14 	.word	0x0800cc14
 800738c:	0800cc47 	.word	0x0800cc47
 8007390:	0800cc65 	.word	0x0800cc65

08007394 <Init_FATFS>:
{
 8007394:	b508      	push	{r3, lr}
	FATFS_LinkDriver(&SD_Driver, SDPath);
 8007396:	4907      	ldr	r1, [pc, #28]	; (80073b4 <Init_FATFS+0x20>)
 8007398:	4807      	ldr	r0, [pc, #28]	; (80073b8 <Init_FATFS+0x24>)
 800739a:	f7ff fc0f 	bl	8006bbc <FATFS_LinkDriver>
	f_res = f_mount(&fs, (TCHAR const*) SDPath, 1);
 800739e:	4905      	ldr	r1, [pc, #20]	; (80073b4 <Init_FATFS+0x20>)
 80073a0:	4806      	ldr	r0, [pc, #24]	; (80073bc <Init_FATFS+0x28>)
 80073a2:	2201      	movs	r2, #1
 80073a4:	f7fe fffe 	bl	80063a4 <f_mount>
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <Init_FATFS+0x2c>)
 80073aa:	7018      	strb	r0, [r3, #0]
}
 80073ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf_fatfs_error(f_res);
 80073b0:	f7ff bf8a 	b.w	80072c8 <printf_fatfs_error>
 80073b4:	20001074 	.word	0x20001074
 80073b8:	0800c5b0 	.word	0x0800c5b0
 80073bc:	20001b4c 	.word	0x20001b4c
 80073c0:	20001924 	.word	0x20001924

080073c4 <Periodic_Update_BreathingLights>:
uint16_t LED1_Pulsewidth;

//周期调用 更新呼吸灯
void Periodic_Update_BreathingLights()
{
	if (LED1_DirInc == 0) //脉宽递增
 80073c4:	490c      	ldr	r1, [pc, #48]	; (80073f8 <Periodic_Update_BreathingLights+0x34>)
	{
		LED1_Pulsewidth++;
 80073c6:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <Periodic_Update_BreathingLights+0x38>)
	if (LED1_DirInc == 0) //脉宽递增
 80073c8:	7808      	ldrb	r0, [r1, #0]
		LED1_Pulsewidth++;
 80073ca:	8813      	ldrh	r3, [r2, #0]
	if (LED1_DirInc == 0) //脉宽递增
 80073cc:	b968      	cbnz	r0, 80073ea <Periodic_Update_BreathingLights+0x26>
		LED1_Pulsewidth++;
 80073ce:	3301      	adds	r3, #1
 80073d0:	b29b      	uxth	r3, r3
		if (LED1_Pulsewidth >= 999)
 80073d2:	f240 30e6 	movw	r0, #998	; 0x3e6
 80073d6:	4283      	cmp	r3, r0
		LED1_Pulsewidth++;
 80073d8:	8013      	strh	r3, [r2, #0]
		if (LED1_Pulsewidth >= 999)
 80073da:	d901      	bls.n	80073e0 <Periodic_Update_BreathingLights+0x1c>
		{
			LED1_DirInc = 1; //脉宽递减
 80073dc:	2301      	movs	r3, #1
	else
	{
		LED1_Pulsewidth--;
		if (LED1_Pulsewidth <= 1)
		{
			LED1_DirInc = 0; //脉宽递增
 80073de:	700b      	strb	r3, [r1, #0]
		}
	}

	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, LED1_Pulsewidth); //设置CCR的
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <Periodic_Update_BreathingLights+0x3c>)
 80073e2:	8812      	ldrh	r2, [r2, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80073e8:	4770      	bx	lr
		LED1_Pulsewidth--;
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29b      	uxth	r3, r3
		if (LED1_Pulsewidth <= 1)
 80073ee:	2b01      	cmp	r3, #1
		LED1_Pulsewidth--;
 80073f0:	8013      	strh	r3, [r2, #0]
		if (LED1_Pulsewidth <= 1)
 80073f2:	d8f5      	bhi.n	80073e0 <Periodic_Update_BreathingLights+0x1c>
			LED1_DirInc = 0; //脉宽递增
 80073f4:	2300      	movs	r3, #0
 80073f6:	e7f2      	b.n	80073de <Periodic_Update_BreathingLights+0x1a>
 80073f8:	20001d78 	.word	0x20001d78
 80073fc:	20001d7a 	.word	0x20001d7a
 8007400:	20000df0 	.word	0x20000df0

08007404 <SPI_WriteByte>:
 * @param    TxData 要发送的数据
 * @param    size   发送数据的字节大小
 * @return  0:写入成功,其他:写入失败
 */
uint8_t SPI_WriteByte(uint8_t *TxData, uint16_t size)
{
 8007404:	460a      	mov	r2, r1
	return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
 8007406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800740a:	4601      	mov	r1, r0
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <SPI_WriteByte+0x10>)
 800740e:	f7fc bf25 	b.w	800425c <HAL_SPI_Transmit>
 8007412:	bf00      	nop
 8007414:	20000d04 	.word	0x20000d04

08007418 <LCD_Write_Data>:
 * @brief   写数据到LCD
 * @param   dat —— 需要发送的数据
 * @return  none
 */
static void LCD_Write_Data(uint8_t dat)
{
 8007418:	b507      	push	{r0, r1, r2, lr}
	LCD_WR_RS(1);
 800741a:	2201      	movs	r2, #1
{
 800741c:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_WR_RS(1);
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	4805      	ldr	r0, [pc, #20]	; (8007438 <LCD_Write_Data+0x20>)
 8007424:	f7fb fde2 	bl	8002fec <HAL_GPIO_WritePin>
	SPI_WriteByte(&dat, 1);
 8007428:	2101      	movs	r1, #1
 800742a:	f10d 0007 	add.w	r0, sp, #7
 800742e:	f7ff ffe9 	bl	8007404 <SPI_WriteByte>
}
 8007432:	b003      	add	sp, #12
 8007434:	f85d fb04 	ldr.w	pc, [sp], #4
 8007438:	40021800 	.word	0x40021800

0800743c <LCD_Write_Cmd>:
{
 800743c:	b507      	push	{r0, r1, r2, lr}
	LCD_WR_RS(0);
 800743e:	2200      	movs	r2, #0
{
 8007440:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_WR_RS(0);
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	4805      	ldr	r0, [pc, #20]	; (800745c <LCD_Write_Cmd+0x20>)
 8007448:	f7fb fdd0 	bl	8002fec <HAL_GPIO_WritePin>
	SPI_WriteByte(&cmd, 1);
 800744c:	2101      	movs	r1, #1
 800744e:	f10d 0007 	add.w	r0, sp, #7
 8007452:	f7ff ffd7 	bl	8007404 <SPI_WriteByte>
}
 8007456:	b003      	add	sp, #12
 8007458:	f85d fb04 	ldr.w	pc, [sp], #4
 800745c:	40021800 	.word	0x40021800

08007460 <SPI_WriteByte_DMA>:
{
 8007460:	460a      	mov	r2, r1
	HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);
 8007462:	4601      	mov	r1, r0
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <SPI_WriteByte_DMA+0xc>)
 8007466:	f7fc bfa7 	b.w	80043b8 <HAL_SPI_Transmit_DMA>
 800746a:	bf00      	nop
 800746c:	20000d04 	.word	0x20000d04

08007470 <LCD_Write_2Bytes>:
 * @brief  写16位的数据（两个字节）到LCD
 * @param   dat —— 需要发送的16bit数据
 * @return  none
 */
void LCD_Write_2Bytes(const uint16_t dat)
{
 8007470:	b510      	push	{r4, lr}
 8007472:	4604      	mov	r4, r0
	uint8_t data[2] = { 0 };

	data[0] = dat >> 8;
	LCD_Write_Data(data[0]);
 8007474:	0a00      	lsrs	r0, r0, #8
 8007476:	f7ff ffcf 	bl	8007418 <LCD_Write_Data>
	data[1] = dat;
	LCD_Write_Data(data[1]);
 800747a:	b2e0      	uxtb	r0, r4

	//SPI_WriteByte((uint8_t*) data, 2);
}
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_Write_Data(data[1]);
 8007480:	f7ff bfca 	b.w	8007418 <LCD_Write_Data>

08007484 <LCD_Address_Set>:
 * @param   x1,y1   —— 起点坐标
 * @param   x2,y2   —— 终点坐标
 * @return  none
 */
void LCD_Address_Set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	4607      	mov	r7, r0
	/* 指定X方向操作区域 */
	LCD_Write_Cmd(0x2a);
 8007488:	202a      	movs	r0, #42	; 0x2a
{
 800748a:	460d      	mov	r5, r1
 800748c:	4616      	mov	r6, r2
 800748e:	461c      	mov	r4, r3
	LCD_Write_Cmd(0x2a);
 8007490:	f7ff ffd4 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(x1 >> 8);
 8007494:	0a38      	lsrs	r0, r7, #8
 8007496:	f7ff ffbf 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(x1);
 800749a:	b2f8      	uxtb	r0, r7
 800749c:	f7ff ffbc 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(x2 >> 8);
 80074a0:	0a30      	lsrs	r0, r6, #8
 80074a2:	f7ff ffb9 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(x2);
 80074a6:	b2f0      	uxtb	r0, r6
 80074a8:	f7ff ffb6 	bl	8007418 <LCD_Write_Data>

	/* 指定Y方向操作区域 */
	LCD_Write_Cmd(0x2b);
 80074ac:	202b      	movs	r0, #43	; 0x2b
 80074ae:	f7ff ffc5 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(y1 >> 8);
 80074b2:	0a28      	lsrs	r0, r5, #8
 80074b4:	f7ff ffb0 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(y1);
 80074b8:	b2e8      	uxtb	r0, r5
 80074ba:	f7ff ffad 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(y2 >> 8);
 80074be:	0a20      	lsrs	r0, r4, #8
 80074c0:	f7ff ffaa 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(y2);
 80074c4:	b2e0      	uxtb	r0, r4
 80074c6:	f7ff ffa7 	bl	8007418 <LCD_Write_Data>

	/* 发送该命令，LCD开始等待接收显存数据 */
	LCD_Write_Cmd(0x2C);
}
 80074ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	LCD_Write_Cmd(0x2C);
 80074ce:	202c      	movs	r0, #44	; 0x2c
 80074d0:	f7ff bfb4 	b.w	800743c <LCD_Write_Cmd>

080074d4 <LCD_Clear>:
 * @brief   以一种颜色清空LCD屏
 * @param   color —— 清屏颜色(16bit)
 * @return  none
 */
void LCD_Clear(uint16_t color)
{
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4b11      	ldr	r3, [pc, #68]	; (800751c <LCD_Clear+0x48>)
	uint16_t i, j;
	uint8_t data[2] = { 0 };  //color是16bit的，每个像素点需要两个字节的显存

	/* 将16bit的color值分开为两个单独的字节 */
	data[0] = color >> 8;
 80074d8:	0a01      	lsrs	r1, r0, #8
	data[1] = color;
 80074da:	2200      	movs	r2, #0
 80074dc:	b2c0      	uxtb	r0, r0

	/* 显存的值需要逐字节写入 */
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 80074de:	3201      	adds	r2, #1
 80074e0:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
	{
		lcd_buf[j * 2] = data[0];
 80074e4:	7019      	strb	r1, [r3, #0]
		lcd_buf[j * 2 + 1] = data[1];
 80074e6:	7058      	strb	r0, [r3, #1]
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 80074e8:	f103 0302 	add.w	r3, r3, #2
 80074ec:	d1f7      	bne.n	80074de <LCD_Clear+0xa>
	}
	/* 指定显存操作地址为全屏幕 */
	LCD_Address_Set(0, 0, LCD_Width - 1, LCD_Height - 1);
 80074ee:	23ef      	movs	r3, #239	; 0xef
 80074f0:	2100      	movs	r1, #0
 80074f2:	461a      	mov	r2, r3
 80074f4:	4608      	mov	r0, r1
 80074f6:	f7ff ffc5 	bl	8007484 <LCD_Address_Set>
	/* 指定接下来的数据为数据 */
	LCD_WR_RS(1);
 80074fa:	4809      	ldr	r0, [pc, #36]	; (8007520 <LCD_Clear+0x4c>)
	/* 将显存缓冲区的数据全部写入缓冲区 */
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
	{
		SPI_WriteByte(lcd_buf, (uint16_t) LCD_Buf_Size);
 80074fc:	4d07      	ldr	r5, [pc, #28]	; (800751c <LCD_Clear+0x48>)
	LCD_WR_RS(1);
 80074fe:	2201      	movs	r2, #1
 8007500:	2140      	movs	r1, #64	; 0x40
 8007502:	f7fb fd73 	bl	8002fec <HAL_GPIO_WritePin>
 8007506:	2464      	movs	r4, #100	; 0x64
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 8007508:	3c01      	subs	r4, #1
		SPI_WriteByte(lcd_buf, (uint16_t) LCD_Buf_Size);
 800750a:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800750e:	4628      	mov	r0, r5
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 8007510:	b2a4      	uxth	r4, r4
		SPI_WriteByte(lcd_buf, (uint16_t) LCD_Buf_Size);
 8007512:	f7ff ff77 	bl	8007404 <SPI_WriteByte>
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 8007516:	2c00      	cmp	r4, #0
 8007518:	d1f6      	bne.n	8007508 <LCD_Clear+0x34>
	}
}
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	20001d7e 	.word	0x20001d7e
 8007520:	40021800 	.word	0x40021800

08007524 <LCD_Init>:
 * @brief   LCD初始化
 * @param   none
 * @return  none
 */
void LCD_Init(void)
{
 8007524:	b510      	push	{r4, lr}
	/* 初始化和LCD通信的引脚 */
	/* 复位LCD */
	LCD_PWR(0);
 8007526:	4c6c      	ldr	r4, [pc, #432]	; (80076d8 <LCD_Init+0x1b4>)
 8007528:	2200      	movs	r2, #0
 800752a:	4620      	mov	r0, r4
 800752c:	2110      	movs	r1, #16
 800752e:	f7fb fd5d 	bl	8002fec <HAL_GPIO_WritePin>
	LCD_RST(0);
 8007532:	2200      	movs	r2, #0
 8007534:	2120      	movs	r1, #32
 8007536:	4620      	mov	r0, r4
 8007538:	f7fb fd58 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800753c:	2064      	movs	r0, #100	; 0x64
 800753e:	f7fb f803 	bl	8002548 <HAL_Delay>
	LCD_RST(1);
 8007542:	2201      	movs	r2, #1
 8007544:	2120      	movs	r1, #32
 8007546:	4620      	mov	r0, r4
 8007548:	f7fb fd50 	bl	8002fec <HAL_GPIO_WritePin>

	HAL_Delay(120);
 800754c:	2078      	movs	r0, #120	; 0x78
 800754e:	f7fa fffb 	bl	8002548 <HAL_Delay>

	/* 关闭睡眠模式 */
	LCD_Write_Cmd(0x11);
 8007552:	2011      	movs	r0, #17
 8007554:	f7ff ff72 	bl	800743c <LCD_Write_Cmd>
	HAL_Delay(120);
 8007558:	2078      	movs	r0, #120	; 0x78
 800755a:	f7fa fff5 	bl	8002548 <HAL_Delay>

	/* 开始设置显存扫描模式，数据格式等 */
	LCD_Write_Cmd(0x36);
 800755e:	2036      	movs	r0, #54	; 0x36
 8007560:	f7ff ff6c 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8007564:	2000      	movs	r0, #0
 8007566:	f7ff ff57 	bl	8007418 <LCD_Write_Data>
	/* RGB 5-6-5-bit格式  */
	LCD_Write_Cmd(0x3A);
 800756a:	203a      	movs	r0, #58	; 0x3a
 800756c:	f7ff ff66 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x65);
 8007570:	2065      	movs	r0, #101	; 0x65
 8007572:	f7ff ff51 	bl	8007418 <LCD_Write_Data>
	/* porch 设置 */
	LCD_Write_Cmd(0xB2);
 8007576:	20b2      	movs	r0, #178	; 0xb2
 8007578:	f7ff ff60 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x0C);
 800757c:	200c      	movs	r0, #12
 800757e:	f7ff ff4b 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8007582:	200c      	movs	r0, #12
 8007584:	f7ff ff48 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8007588:	2000      	movs	r0, #0
 800758a:	f7ff ff45 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 800758e:	2033      	movs	r0, #51	; 0x33
 8007590:	f7ff ff42 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 8007594:	2033      	movs	r0, #51	; 0x33
 8007596:	f7ff ff3f 	bl	8007418 <LCD_Write_Data>
	/* VGH设置 */
	LCD_Write_Cmd(0xB7);
 800759a:	20b7      	movs	r0, #183	; 0xb7
 800759c:	f7ff ff4e 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x72);
 80075a0:	2072      	movs	r0, #114	; 0x72
 80075a2:	f7ff ff39 	bl	8007418 <LCD_Write_Data>
	/* VCOM 设置 */
	LCD_Write_Cmd(0xBB);
 80075a6:	20bb      	movs	r0, #187	; 0xbb
 80075a8:	f7ff ff48 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x3D);
 80075ac:	203d      	movs	r0, #61	; 0x3d
 80075ae:	f7ff ff33 	bl	8007418 <LCD_Write_Data>
	/* LCM 设置 */
	LCD_Write_Cmd(0xC0);
 80075b2:	20c0      	movs	r0, #192	; 0xc0
 80075b4:	f7ff ff42 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x2C);
 80075b8:	202c      	movs	r0, #44	; 0x2c
 80075ba:	f7ff ff2d 	bl	8007418 <LCD_Write_Data>
	/* VDV and VRH 设置 */
	LCD_Write_Cmd(0xC2);
 80075be:	20c2      	movs	r0, #194	; 0xc2
 80075c0:	f7ff ff3c 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 80075c4:	2001      	movs	r0, #1
 80075c6:	f7ff ff27 	bl	8007418 <LCD_Write_Data>
	/* VRH 设置 */
	LCD_Write_Cmd(0xC3);
 80075ca:	20c3      	movs	r0, #195	; 0xc3
 80075cc:	f7ff ff36 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x19);
 80075d0:	2019      	movs	r0, #25
 80075d2:	f7ff ff21 	bl	8007418 <LCD_Write_Data>
	/* VDV 设置 */
	LCD_Write_Cmd(0xC4);
 80075d6:	20c4      	movs	r0, #196	; 0xc4
 80075d8:	f7ff ff30 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 80075dc:	2020      	movs	r0, #32
 80075de:	f7ff ff1b 	bl	8007418 <LCD_Write_Data>
	/* 普通模式下显存速率设置 60Mhz */
	LCD_Write_Cmd(0xC6);
 80075e2:	20c6      	movs	r0, #198	; 0xc6
 80075e4:	f7ff ff2a 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 80075e8:	200f      	movs	r0, #15
 80075ea:	f7ff ff15 	bl	8007418 <LCD_Write_Data>
	/* 电源控制 */
	LCD_Write_Cmd(0xD0);
 80075ee:	20d0      	movs	r0, #208	; 0xd0
 80075f0:	f7ff ff24 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0xA4);
 80075f4:	20a4      	movs	r0, #164	; 0xa4
 80075f6:	f7ff ff0f 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0xA1);
 80075fa:	20a1      	movs	r0, #161	; 0xa1
 80075fc:	f7ff ff0c 	bl	8007418 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE0);
 8007600:	20e0      	movs	r0, #224	; 0xe0
 8007602:	f7ff ff1b 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 8007606:	20d0      	movs	r0, #208	; 0xd0
 8007608:	f7ff ff06 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 800760c:	2004      	movs	r0, #4
 800760e:	f7ff ff03 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 8007612:	200d      	movs	r0, #13
 8007614:	f7ff ff00 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 8007618:	2011      	movs	r0, #17
 800761a:	f7ff fefd 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 800761e:	2013      	movs	r0, #19
 8007620:	f7ff fefa 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x2B);
 8007624:	202b      	movs	r0, #43	; 0x2b
 8007626:	f7ff fef7 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 800762a:	203f      	movs	r0, #63	; 0x3f
 800762c:	f7ff fef4 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x54);
 8007630:	2054      	movs	r0, #84	; 0x54
 8007632:	f7ff fef1 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x4C);
 8007636:	204c      	movs	r0, #76	; 0x4c
 8007638:	f7ff feee 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x18);
 800763c:	2018      	movs	r0, #24
 800763e:	f7ff feeb 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 8007642:	200d      	movs	r0, #13
 8007644:	f7ff fee8 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 8007648:	200b      	movs	r0, #11
 800764a:	f7ff fee5 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 800764e:	201f      	movs	r0, #31
 8007650:	f7ff fee2 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 8007654:	2023      	movs	r0, #35	; 0x23
 8007656:	f7ff fedf 	bl	8007418 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE1);
 800765a:	20e1      	movs	r0, #225	; 0xe1
 800765c:	f7ff feee 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 8007660:	20d0      	movs	r0, #208	; 0xd0
 8007662:	f7ff fed9 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 8007666:	2004      	movs	r0, #4
 8007668:	f7ff fed6 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 800766c:	200c      	movs	r0, #12
 800766e:	f7ff fed3 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 8007672:	2011      	movs	r0, #17
 8007674:	f7ff fed0 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 8007678:	2013      	movs	r0, #19
 800767a:	f7ff fecd 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 800767e:	202c      	movs	r0, #44	; 0x2c
 8007680:	f7ff feca 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8007684:	203f      	movs	r0, #63	; 0x3f
 8007686:	f7ff fec7 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x44);
 800768a:	2044      	movs	r0, #68	; 0x44
 800768c:	f7ff fec4 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x51);
 8007690:	2051      	movs	r0, #81	; 0x51
 8007692:	f7ff fec1 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x2F);
 8007696:	202f      	movs	r0, #47	; 0x2f
 8007698:	f7ff febe 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 800769c:	201f      	movs	r0, #31
 800769e:	f7ff febb 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 80076a2:	201f      	movs	r0, #31
 80076a4:	f7ff feb8 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x20);
 80076a8:	2020      	movs	r0, #32
 80076aa:	f7ff feb5 	bl	8007418 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 80076ae:	2023      	movs	r0, #35	; 0x23
 80076b0:	f7ff feb2 	bl	8007418 <LCD_Write_Data>
	/* 显示开 */
	LCD_Write_Cmd(0x21);
 80076b4:	2021      	movs	r0, #33	; 0x21
 80076b6:	f7ff fec1 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Cmd(0x29);
 80076ba:	2029      	movs	r0, #41	; 0x29
 80076bc:	f7ff febe 	bl	800743c <LCD_Write_Cmd>

	/* 清屏为白色 */
	LCD_Clear(WHITE);
 80076c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076c4:	f7ff ff06 	bl	80074d4 <LCD_Clear>

	/*打开显示*/
	LCD_PWR(1);
 80076c8:	4620      	mov	r0, r4
 80076ca:	2201      	movs	r2, #1
}
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_PWR(1);
 80076d0:	2110      	movs	r1, #16
 80076d2:	f7fb bc8b 	b.w	8002fec <HAL_GPIO_WritePin>
 80076d6:	bf00      	nop
 80076d8:	40021800 	.word	0x40021800

080076dc <LCD_ShowChar>:
 * @param   size	字体大小(支持16/24/32号字体)
 * @return  none
 * @note		需要font.h字库文件的支持
 */
void LCD_ShowChar(uint16_t x, uint16_t y, char ch, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 80076dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80076e4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	uint8_t temp = 0;
	uint8_t size = 0;
	uint8_t t = 0;

	/* 检测显示是否会越界 */
	if ((x > (LCD_Width - font_size / 2)) || (y > (LCD_Height - font_size)))
 80076e8:	ea4f 0857 	mov.w	r8, r7, lsr #1
{
 80076ec:	461d      	mov	r5, r3
	if ((x > (LCD_Width - font_size / 2)) || (y > (LCD_Height - font_size)))
 80076ee:	f1c8 03f0 	rsb	r3, r8, #240	; 0xf0
 80076f2:	4298      	cmp	r0, r3
{
 80076f4:	468e      	mov	lr, r1
 80076f6:	4614      	mov	r4, r2
	if ((x > (LCD_Width - font_size / 2)) || (y > (LCD_Height - font_size)))
 80076f8:	dc28      	bgt.n	800774c <LCD_ShowChar+0x70>
 80076fa:	f1c7 03f0 	rsb	r3, r7, #240	; 0xf0
 80076fe:	4299      	cmp	r1, r3
 8007700:	dc24      	bgt.n	800774c <LCD_ShowChar+0x70>
		return;

	/* 根据字符大小设置显存操作区域 */
	LCD_Address_Set(x, y, x + font_size / 2 - 1, y + font_size - 1);
 8007702:	1e4b      	subs	r3, r1, #1
 8007704:	1e42      	subs	r2, r0, #1
 8007706:	443b      	add	r3, r7
 8007708:	4442      	add	r2, r8
 800770a:	b292      	uxth	r2, r2
 800770c:	b29b      	uxth	r3, r3
 800770e:	f7ff feb9 	bl	8007484 <LCD_Address_Set>

	/* 计算字符在字库中的偏移值*/
	uint8_t charIndex = ch - ' ';
 8007712:	f1a4 0220 	sub.w	r2, r4, #32

	/* 显示16号/32号字体 */
	if ((font_size == 16) || (font_size == 32))
 8007716:	2f10      	cmp	r7, #16
	uint8_t charIndex = ch - ' ';
 8007718:	b2d2      	uxtb	r2, r2
	if ((font_size == 16) || (font_size == 32))
 800771a:	d001      	beq.n	8007720 <LCD_ShowChar+0x44>
 800771c:	2f20      	cmp	r7, #32
 800771e:	d134      	bne.n	800778a <LCD_ShowChar+0xae>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 8007720:	f017 0307 	ands.w	r3, r7, #7
 8007724:	bf18      	it	ne
 8007726:	2301      	movne	r3, #1
 8007728:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 800772c:	4c37      	ldr	r4, [pc, #220]	; (800780c <LCD_ShowChar+0x130>)
 800772e:	fb13 f808 	smulbb	r8, r3, r8
 8007732:	4b37      	ldr	r3, [pc, #220]	; (8007810 <LCD_ShowChar+0x134>)
 8007734:	ebc2 1a02 	rsb	sl, r2, r2, lsl #4
 8007738:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800773c:	eb04 1302 	add.w	r3, r4, r2, lsl #4
 8007740:	fa5f f888 	uxtb.w	r8, r8

		for (i = 0; i < size; i++)
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	2400      	movs	r4, #0
 8007748:	45a0      	cmp	r8, r4
 800774a:	d802      	bhi.n	8007752 <LCD_ShowChar+0x76>
		}
	}
	/* 其余字体 */
	else
		return;
}
 800774c:	b003      	add	sp, #12
 800774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (font_size == 16)
 8007752:	2f10      	cmp	r7, #16
 8007754:	d114      	bne.n	8007780 <LCD_ShowChar+0xa4>
				temp = F16X8[charIndex][i];	//调用1608字体
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	f813 9004 	ldrb.w	r9, [r3, r4]
{
 800775c:	f04f 0b08 	mov.w	fp, #8
				if (temp & 0x80)
 8007760:	f019 0f80 	tst.w	r9, #128	; 0x80
					LCD_Write_2Bytes(font_color);
 8007764:	bf14      	ite	ne
 8007766:	4630      	movne	r0, r6
					LCD_Write_2Bytes(back_color);
 8007768:	4628      	moveq	r0, r5
 800776a:	f7ff fe81 	bl	8007470 <LCD_Write_2Bytes>
				temp <<= 1;
 800776e:	ea4f 0949 	mov.w	r9, r9, lsl #1
			for (j = 0; j < 8; j++)
 8007772:	f1bb 0b01 	subs.w	fp, fp, #1
				temp <<= 1;
 8007776:	fa5f f989 	uxtb.w	r9, r9
			for (j = 0; j < 8; j++)
 800777a:	d1f1      	bne.n	8007760 <LCD_ShowChar+0x84>
		for (i = 0; i < size; i++)
 800777c:	3401      	adds	r4, #1
 800777e:	e7e3      	b.n	8007748 <LCD_ShowChar+0x6c>
			else if (font_size == 32)
 8007780:	2f20      	cmp	r7, #32
 8007782:	d1e3      	bne.n	800774c <LCD_ShowChar+0x70>
				temp = F32X16[charIndex][i];	//调用3216字体
 8007784:	f81a 9004 	ldrb.w	r9, [sl, r4]
 8007788:	e7e8      	b.n	800775c <LCD_ShowChar+0x80>
	else if (font_size == 12)
 800778a:	2f0c      	cmp	r7, #12
 800778c:	d11b      	bne.n	80077c6 <LCD_ShowChar+0xea>
 800778e:	4f21      	ldr	r7, [pc, #132]	; (8007814 <LCD_ShowChar+0x138>)
 8007790:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007794:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		for (i = 0; i < size; i++)
 8007798:	f04f 0800 	mov.w	r8, #0
			temp = F12X6[charIndex][i];
 800779c:	f817 4b01 	ldrb.w	r4, [r7], #1
 80077a0:	f04f 0906 	mov.w	r9, #6
				if (temp & 0x80)
 80077a4:	0622      	lsls	r2, r4, #24
					LCD_Write_2Bytes(font_color);
 80077a6:	bf4c      	ite	mi
 80077a8:	4630      	movmi	r0, r6
					LCD_Write_2Bytes(back_color);
 80077aa:	4628      	movpl	r0, r5
 80077ac:	f7ff fe60 	bl	8007470 <LCD_Write_2Bytes>
				temp <<= 1;
 80077b0:	0064      	lsls	r4, r4, #1
			for (j = 0; j < 6; j++)
 80077b2:	f1b9 0901 	subs.w	r9, r9, #1
				temp <<= 1;
 80077b6:	b2e4      	uxtb	r4, r4
			for (j = 0; j < 6; j++)
 80077b8:	d1f4      	bne.n	80077a4 <LCD_ShowChar+0xc8>
		for (i = 0; i < size; i++)
 80077ba:	f108 0801 	add.w	r8, r8, #1
 80077be:	f1b8 0f0c 	cmp.w	r8, #12
 80077c2:	d1eb      	bne.n	800779c <LCD_ShowChar+0xc0>
 80077c4:	e7c2      	b.n	800774c <LCD_ShowChar+0x70>
	else if (font_size == 24)
 80077c6:	2f18      	cmp	r7, #24
 80077c8:	d1c0      	bne.n	800774c <LCD_ShowChar+0x70>
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <LCD_ShowChar+0x13c>)
 80077cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80077d0:	eb03 1802 	add.w	r8, r3, r2, lsl #4
		for (i = 0; i < size; i++)
 80077d4:	2700      	movs	r7, #0
				t = 4;
 80077d6:	f017 0f01 	tst.w	r7, #1
			temp = F24X12[charIndex][i];
 80077da:	f818 4b01 	ldrb.w	r4, [r8], #1
				t = 4;
 80077de:	bf0c      	ite	eq
 80077e0:	f04f 0a08 	moveq.w	sl, #8
 80077e4:	f04f 0a04 	movne.w	sl, #4
			for (j = 0; j < t; j++)
 80077e8:	f04f 0900 	mov.w	r9, #0
				if (temp & 0x80)
 80077ec:	0623      	lsls	r3, r4, #24
					LCD_Write_2Bytes(font_color);
 80077ee:	bf4c      	ite	mi
 80077f0:	4630      	movmi	r0, r6
					LCD_Write_2Bytes(back_color);
 80077f2:	4628      	movpl	r0, r5
			for (j = 0; j < t; j++)
 80077f4:	f109 0901 	add.w	r9, r9, #1
					LCD_Write_2Bytes(back_color);
 80077f8:	f7ff fe3a 	bl	8007470 <LCD_Write_2Bytes>
				temp <<= 1;
 80077fc:	0064      	lsls	r4, r4, #1
			for (j = 0; j < t; j++)
 80077fe:	45ca      	cmp	sl, r9
				temp <<= 1;
 8007800:	b2e4      	uxtb	r4, r4
			for (j = 0; j < t; j++)
 8007802:	d8f3      	bhi.n	80077ec <LCD_ShowChar+0x110>
		for (i = 0; i < size; i++)
 8007804:	3701      	adds	r7, #1
 8007806:	2f30      	cmp	r7, #48	; 0x30
 8007808:	d1e5      	bne.n	80077d6 <LCD_ShowChar+0xfa>
 800780a:	e79f      	b.n	800774c <LCD_ShowChar+0x70>
 800780c:	0800d0f1 	.word	0x0800d0f1
 8007810:	0800e8b1 	.word	0x0800e8b1
 8007814:	0800cc7d 	.word	0x0800cc7d
 8007818:	0800d6e1 	.word	0x0800d6e1

0800781c <LCD_ShowCharStr>:
 * @return  none
 * @note		1. 需要font.h字库文件的支持
 * 					2. 超过指定width不显示超过的字符
 */
void LCD_ShowCharStr(uint16_t x, uint16_t y, uint8_t max_width, char *str, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 800781c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8007824:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8007828:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34

	max_width += x;
 800782c:	4402      	add	r2, r0
{
 800782e:	4604      	mov	r4, r0
 8007830:	468b      	mov	fp, r1
			//x方向越界，结束
			break;
		}

		LCD_ShowChar(x, y, *str, back_color, font_color, font_size);
		x += font_size / 2;
 8007832:	ea4f 0857 	mov.w	r8, r7, lsr #1
 8007836:	1e5e      	subs	r6, r3, #1
		if (x >= max_width)
 8007838:	b2d5      	uxtb	r5, r2
	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 800783a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800783e:	f1a2 0320 	sub.w	r3, r2, #32
 8007842:	2b5e      	cmp	r3, #94	; 0x5e
 8007844:	d902      	bls.n	800784c <LCD_ShowCharStr+0x30>
		str++;
	}
}
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x >= max_width)
 800784c:	42a5      	cmp	r5, r4
 800784e:	d9fa      	bls.n	8007846 <LCD_ShowCharStr+0x2a>
		LCD_ShowChar(x, y, *str, back_color, font_color, font_size);
 8007850:	4620      	mov	r0, r4
 8007852:	e9cd 9700 	strd	r9, r7, [sp]
 8007856:	4653      	mov	r3, sl
 8007858:	4659      	mov	r1, fp
		x += font_size / 2;
 800785a:	4444      	add	r4, r8
		LCD_ShowChar(x, y, *str, back_color, font_color, font_size);
 800785c:	f7ff ff3e 	bl	80076dc <LCD_ShowChar>
		x += font_size / 2;
 8007860:	b2a4      	uxth	r4, r4
		str++;
 8007862:	e7ea      	b.n	800783a <LCD_ShowCharStr+0x1e>

08007864 <LCD_Show_Image>:
 * @param   p —— 图片缓存数据起始地址
 * @note		Image2Lcd取模方式：C语言数据/水平扫描/16位真彩色(RGB565)/高位在前		其他的不要选
 * @return  none
 */
void LCD_Show_Image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint8_t *p)
{
 8007864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remain_size = img_size;									//图片每次发送后剩余的字节数
	uint8_t i = 0;
	uint8_t flag = 0;

	/* 错误检测 */
	if (x + width > LCD_Width || y + height > LCD_Height)
 8007868:	1884      	adds	r4, r0, r2
 800786a:	2cf0      	cmp	r4, #240	; 0xf0
{
 800786c:	9d06      	ldr	r5, [sp, #24]
	if (x + width > LCD_Width || y + height > LCD_Height)
 800786e:	dc27      	bgt.n	80078c0 <LCD_Show_Image+0x5c>
 8007870:	18cc      	adds	r4, r1, r3
 8007872:	2cf0      	cmp	r4, #240	; 0xf0
 8007874:	dc24      	bgt.n	80078c0 <LCD_Show_Image+0x5c>
	{
		return;
	}

	LCD_Address_Set(x, y, x + width - 1, y + height - 1);
 8007876:	1e4e      	subs	r6, r1, #1
 8007878:	1e47      	subs	r7, r0, #1
	uint32_t img_size = width * height * 2;		//图片所占字节数
 800787a:	fb03 f402 	mul.w	r4, r3, r2
	LCD_Address_Set(x, y, x + width - 1, y + height - 1);
 800787e:	4433      	add	r3, r6
 8007880:	443a      	add	r2, r7
 8007882:	b29b      	uxth	r3, r3
 8007884:	b292      	uxth	r2, r2
 8007886:	f7ff fdfd 	bl	8007484 <LCD_Address_Set>

	LCD_WR_RS(1);
 800788a:	4815      	ldr	r0, [pc, #84]	; (80078e0 <LCD_Show_Image+0x7c>)
 800788c:	2201      	movs	r2, #1
 800788e:	2140      	movs	r1, #64	; 0x40
 8007890:	f7fb fbac 	bl	8002fec <HAL_GPIO_WritePin>
	uint32_t img_size = width * height * 2;		//图片所占字节数
 8007894:	0064      	lsls	r4, r4, #1

	/* SPI每次最大发送2^16 = 65536个数据,图片最大大小为240*240*2 = 115200，会超过此大小，所以设计循环发送算法 */
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 8007896:	ea4f 38d4 	mov.w	r8, r4, lsr #15
 800789a:	2600      	movs	r6, #0
 800789c:	f647 77ff 	movw	r7, #32767	; 0x7fff
		if (flag != 0)
		{
			//非首次进入 等待传输完成
			delay_us(SPI_DMA_Delay_us);
		}
		if (remain_size / SPI_DMA_Max_Length >= 1)
 80078a0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80078a4:	d312      	bcc.n	80078cc <LCD_Show_Image+0x68>
		{
			SPI_WriteByte_DMA((uint8_t*) p, SPI_DMA_Max_Length - 1);
 80078a6:	4628      	mov	r0, r5
 80078a8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80078ac:	f7ff fdd8 	bl	8007460 <SPI_WriteByte_DMA>
			p += SPI_DMA_Max_Length - 1;
			remain_size -= SPI_DMA_Max_Length - 1;
 80078b0:	f5a4 44ff 	sub.w	r4, r4, #32640	; 0x7f80
			p += SPI_DMA_Max_Length - 1;
 80078b4:	443d      	add	r5, r7
			remain_size -= SPI_DMA_Max_Length - 1;
 80078b6:	3c7f      	subs	r4, #127	; 0x7f
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 80078b8:	3601      	adds	r6, #1
 80078ba:	b2f6      	uxtb	r6, r6
 80078bc:	4546      	cmp	r6, r8
 80078be:	d901      	bls.n	80078c4 <LCD_Show_Image+0x60>
			SPI_WriteByte_DMA((uint8_t*) p, remain_size % (SPI_DMA_Max_Length - 1));
		}

		flag = 1;
	}
}
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			delay_us(SPI_DMA_Delay_us);
 80078c4:	20b4      	movs	r0, #180	; 0xb4
 80078c6:	f7ff f9f3 	bl	8006cb0 <delay_us>
 80078ca:	e7e9      	b.n	80078a0 <LCD_Show_Image+0x3c>
			SPI_WriteByte_DMA((uint8_t*) p, remain_size % (SPI_DMA_Max_Length - 1));
 80078cc:	fbb4 f1f7 	udiv	r1, r4, r7
 80078d0:	ebc1 31c1 	rsb	r1, r1, r1, lsl #15
 80078d4:	1a61      	subs	r1, r4, r1
 80078d6:	b289      	uxth	r1, r1
 80078d8:	4628      	mov	r0, r5
 80078da:	f7ff fdc1 	bl	8007460 <SPI_WriteByte_DMA>
 80078de:	e7eb      	b.n	80078b8 <LCD_Show_Image+0x54>
 80078e0:	40021800 	.word	0x40021800

080078e4 <LCD_ShowStringLineX>:
uint16_t LCD_FontColor = WHITE;
uint16_t LCD_BackgroundColor = BLACK;

//显示一行字符串
void LCD_ShowStringLineX(uint8_t line, char *chr, uint8_t size)
{
 80078e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e6:	460b      	mov	r3, r1
	LCD_ShowCharStr(0, line * size, LCD_Width, chr, LCD_BackgroundColor, LCD_FontColor, size);
 80078e8:	9202      	str	r2, [sp, #8]
{
 80078ea:	4611      	mov	r1, r2
	LCD_ShowCharStr(0, line * size, LCD_Width, chr, LCD_BackgroundColor, LCD_FontColor, size);
 80078ec:	4a06      	ldr	r2, [pc, #24]	; (8007908 <LCD_ShowStringLineX+0x24>)
 80078ee:	8812      	ldrh	r2, [r2, #0]
 80078f0:	9201      	str	r2, [sp, #4]
 80078f2:	4a06      	ldr	r2, [pc, #24]	; (800790c <LCD_ShowStringLineX+0x28>)
 80078f4:	8812      	ldrh	r2, [r2, #0]
 80078f6:	9200      	str	r2, [sp, #0]
 80078f8:	4341      	muls	r1, r0
 80078fa:	22f0      	movs	r2, #240	; 0xf0
 80078fc:	2000      	movs	r0, #0
 80078fe:	f7ff ff8d 	bl	800781c <LCD_ShowCharStr>
}
 8007902:	b005      	add	sp, #20
 8007904:	f85d fb04 	ldr.w	pc, [sp], #4
 8007908:	20000094 	.word	0x20000094
 800790c:	20001d7c 	.word	0x20001d7c

08007910 <LCD_Close>:
//	HAL_Delay(2000);
//	LCD_Clear(BLACK);
}

void LCD_Close()
{
 8007910:	b508      	push	{r3, lr}
	LCD_PWR(0);
 8007912:	480a      	ldr	r0, [pc, #40]	; (800793c <LCD_Close+0x2c>)
 8007914:	2200      	movs	r2, #0
 8007916:	2110      	movs	r1, #16
 8007918:	f7fb fb68 	bl	8002fec <HAL_GPIO_WritePin>
	LCD_RST(0);
 800791c:	2200      	movs	r2, #0
 800791e:	2120      	movs	r1, #32
 8007920:	4806      	ldr	r0, [pc, #24]	; (800793c <LCD_Close+0x2c>)
 8007922:	f7fb fb63 	bl	8002fec <HAL_GPIO_WritePin>
	LCD_Write_Cmd(0x53);
 8007926:	2053      	movs	r0, #83	; 0x53
 8007928:	f7ff fd88 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Cmd(0x28);
 800792c:	2028      	movs	r0, #40	; 0x28
 800792e:	f7ff fd85 	bl	800743c <LCD_Write_Cmd>
	LCD_Write_Cmd(0x10);
}
 8007932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_Write_Cmd(0x10);
 8007936:	2010      	movs	r0, #16
 8007938:	f7ff bd80 	b.w	800743c <LCD_Write_Cmd>
 800793c:	40021800 	.word	0x40021800

08007940 <Screen_ShowStringLine>:
void Screen_ShowStringLine(uint8_t line, char *chr, uint8_t size)
{
#if defined USE_OLED
	OLED_ShowStringLine(line, chr);
#else
	LCD_ShowStringLineX(line, chr, size);
 8007940:	f7ff bfd0 	b.w	80078e4 <LCD_ShowStringLineX>

08007944 <Screen_Clear>:
void Screen_Clear()
{
#if defined USE_OLED
	OLED_Clear();
#else
	LCD_Clear(BLACK);
 8007944:	2000      	movs	r0, #0
 8007946:	f7ff bdc5 	b.w	80074d4 <LCD_Clear>

0800794a <Screen_Close>:
void Screen_Close()
{
#if defined USE_OLED

#else
	LCD_Close();
 800794a:	f7ff bfe1 	b.w	8007910 <LCD_Close>
	...

08007950 <Screen_ShowFileImage>:
#define  readRowNum 15
BYTE pColorData[960 * readRowNum]; /* 一行真彩色数据缓存 240 * 2 = 480 */
uint8_t ImageTransform_Buffer[480 * readRowNum];

void Screen_ShowFileImage(const char *fileName)
{
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	4601      	mov	r1, r0

	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	WORD fileType;
	unsigned int read_num;
	f_res = f_open(&file, fileName, FA_OPEN_EXISTING | FA_READ);
 8007956:	2201      	movs	r2, #1
 8007958:	484a      	ldr	r0, [pc, #296]	; (8007a84 <Screen_ShowFileImage+0x134>)
{
 800795a:	b092      	sub	sp, #72	; 0x48
	f_res = f_open(&file, fileName, FA_OPEN_EXISTING | FA_READ);
 800795c:	f7fe fd48 	bl	80063f0 <f_open>
 8007960:	4b49      	ldr	r3, [pc, #292]	; (8007a88 <Screen_ShowFileImage+0x138>)
 8007962:	4602      	mov	r2, r0
 8007964:	7018      	strb	r0, [r3, #0]
	/*-------------------------------------------------------------------------------------------------------*/
	if (f_res == FR_OK)
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8083 	bne.w	8007a72 <Screen_ShowFileImage+0x122>
	{
		//printfX("打开文件成功\r\n");

		/* 读取文件头信息  两个字节*/
		f_read(&file, &fileType, sizeof(WORD), &read_num);
 800796c:	ab04      	add	r3, sp, #16
 800796e:	2202      	movs	r2, #2
 8007970:	4844      	ldr	r0, [pc, #272]	; (8007a84 <Screen_ShowFileImage+0x134>)
 8007972:	f10d 010e 	add.w	r1, sp, #14
 8007976:	f7fe ff97 	bl	80068a8 <f_read>

		/* 判断是不是bmp文件 "BM"*/
		if (fileType != 0x4d42)
 800797a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800797e:	f644 5342 	movw	r3, #19778	; 0x4d42
 8007982:	429a      	cmp	r2, r3
 8007984:	d006      	beq.n	8007994 <Screen_ShowFileImage+0x44>
		{
			printfX("这不是一个 .bmp 文件!\r\n");
 8007986:	4941      	ldr	r1, [pc, #260]	; (8007a8c <Screen_ShowFileImage+0x13c>)
 8007988:	4841      	ldr	r0, [pc, #260]	; (8007a90 <Screen_ShowFileImage+0x140>)
 800798a:	f000 fff3 	bl	8008974 <strcpy>
 800798e:	4840      	ldr	r0, [pc, #256]	; (8007a90 <Screen_ShowFileImage+0x140>)
 8007990:	f000 f90c 	bl	8007bac <printf_Base>
		{
			//printfX("这是一个 .bmp 文件\r\n");
		}

		/* 读取BMP文件头信息*/
		f_read(&file, &bitHead, sizeof(tagBITMAPFILEHEADER), &read_num);
 8007994:	ab04      	add	r3, sp, #16
 8007996:	220c      	movs	r2, #12
 8007998:	a905      	add	r1, sp, #20
 800799a:	483a      	ldr	r0, [pc, #232]	; (8007a84 <Screen_ShowFileImage+0x134>)
 800799c:	f7fe ff84 	bl	80068a8 <f_read>
		//showBmpHead(&bitHead);

		/* 读取位图信息头信息 */
		f_read(&file, &bitInfoHead, sizeof(BITMAPINFOHEADER), &read_num);
 80079a0:	4838      	ldr	r0, [pc, #224]	; (8007a84 <Screen_ShowFileImage+0x134>)
 80079a2:	ab04      	add	r3, sp, #16
 80079a4:	2228      	movs	r2, #40	; 0x28
 80079a6:	a908      	add	r1, sp, #32
 80079a8:	f7fe ff7e 	bl	80068a8 <f_read>
	width = 240;
	height = 240;
	uint16_t temp = 0;
	int row, m;
	/* 计算位图的实际宽度并确保它为32的倍数	*/
	l_width = WIDTHBYTES(width * bitInfoHead.biBitCount);
 80079ac:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80079b0:	23f0      	movs	r3, #240	; 0xf0
 80079b2:	435c      	muls	r4, r3
 80079b4:	341f      	adds	r4, #31
 80079b6:	1164      	asrs	r4, r4, #5

	if (l_width > 720)
 80079b8:	2cb4      	cmp	r4, #180	; 0xb4
	l_width = WIDTHBYTES(width * bitInfoHead.biBitCount);
 80079ba:	ea4f 0284 	mov.w	r2, r4, lsl #2
	if (l_width > 720)
 80079be:	dd06      	ble.n	80079ce <Screen_ShowFileImage+0x7e>
	{
		printfX("\n 本图片太大(%d)，无法在液晶屏上显示 (<=240)\n", l_width);
 80079c0:	4934      	ldr	r1, [pc, #208]	; (8007a94 <Screen_ShowFileImage+0x144>)
 80079c2:	4833      	ldr	r0, [pc, #204]	; (8007a90 <Screen_ShowFileImage+0x140>)
 80079c4:	f000 ffb6 	bl	8008934 <siprintf>
 80079c8:	4831      	ldr	r0, [pc, #196]	; (8007a90 <Screen_ShowFileImage+0x140>)
 80079ca:	f000 f8ef 	bl	8007bac <printf_Base>
	for (i = 0; i < height / readRowNum; i++)
	{
		/*从文件的后面读起，BMP文件的原始图像方向为右下角到左上角*/
		f_lseek(&file, bitHead.bfOffBits + (height - (i + 1) * readRowNum) * l_width);
		/* 读取一行bmp的数据到数组pColorData里面 */
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 80079ce:	273c      	movs	r7, #60	; 0x3c
 80079d0:	f06f 063b 	mvn.w	r6, #59	; 0x3b
 80079d4:	f44f 7361 	mov.w	r3, #900	; 0x384
		f_lseek(&file, bitHead.bfOffBits + (height - (i + 1) * readRowNum) * l_width);
 80079d8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8007a84 <Screen_ShowFileImage+0x134>
 80079dc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007aa0 <Screen_ShowFileImage+0x150>
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 80079e0:	4367      	muls	r7, r4
 80079e2:	4366      	muls	r6, r4
 80079e4:	2500      	movs	r5, #0
 80079e6:	435c      	muls	r4, r3
		f_lseek(&file, bitHead.bfOffBits + (height - (i + 1) * readRowNum) * l_width);
 80079e8:	9907      	ldr	r1, [sp, #28]
 80079ea:	4648      	mov	r0, r9
 80079ec:	4421      	add	r1, r4
 80079ee:	f7fe fff8 	bl	80069e2 <f_lseek>
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 80079f2:	4929      	ldr	r1, [pc, #164]	; (8007a98 <Screen_ShowFileImage+0x148>)
 80079f4:	ab04      	add	r3, sp, #16
 80079f6:	463a      	mov	r2, r7
 80079f8:	4648      	mov	r0, r9
 80079fa:	f7fe ff55 	bl	80068a8 <f_read>

		for (m = 0; m < readRowNum; m++)
 80079fe:	f8df e098 	ldr.w	lr, [pc, #152]	; 8007a98 <Screen_ShowFileImage+0x148>
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 8007a02:	f44f 6c52 	mov.w	ip, #3360	; 0xd20
		{
			for (j = 0; j < width; j++) 											   //一行有效信息
 8007a06:	eb08 004c 	add.w	r0, r8, ip, lsl #1
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 8007a0a:	4671      	mov	r1, lr
			for (j = 0; j < width; j++) 											   //一行有效信息
 8007a0c:	2200      	movs	r2, #0
			{
				k = j * 3 + m * width * 3;																	 //一行中第K个像素的起点
				row = readRowNum - m - 1;
				temp = RGB24TORGB16(pColorData[k + 2], pColorData[k + 1], pColorData[k]);
 8007a0e:	788b      	ldrb	r3, [r1, #2]
 8007a10:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8007a14:	784b      	ldrb	r3, [r1, #1]
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	015b      	lsls	r3, r3, #5
 8007a1a:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
 8007a1e:	f811 ab03 	ldrb.w	sl, [r1], #3
			for (j = 0; j < width; j++) 											   //一行有效信息
 8007a22:	3201      	adds	r2, #1
				temp = RGB24TORGB16(pColorData[k + 2], pColorData[k + 1], pColorData[k]);
 8007a24:	ea43 0ada 	orr.w	sl, r3, sl, lsr #3
			for (j = 0; j < width; j++) 											   //一行有效信息
 8007a28:	2af0      	cmp	r2, #240	; 0xf0
				ImageTransform_Buffer[row * 480 + j * 2] = temp >> 8;
 8007a2a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8007a2e:	7003      	strb	r3, [r0, #0]
				ImageTransform_Buffer[row * 480 + j * 2 + 1] = temp;
 8007a30:	f880 a001 	strb.w	sl, [r0, #1]
			for (j = 0; j < width; j++) 											   //一行有效信息
 8007a34:	f100 0002 	add.w	r0, r0, #2
 8007a38:	d1e9      	bne.n	8007a0e <Screen_ShowFileImage+0xbe>
		for (m = 0; m < readRowNum; m++)
 8007a3a:	f1ac 0cf0 	sub.w	ip, ip, #240	; 0xf0
 8007a3e:	f11c 0ff0 	cmn.w	ip, #240	; 0xf0
 8007a42:	f50e 7e34 	add.w	lr, lr, #720	; 0x2d0
 8007a46:	d1de      	bne.n	8007a06 <Screen_ShowFileImage+0xb6>
//				ImageTransform_Buffer[row * 480 + j * 2] = ((pColorData[k + 1] << 1) | pColorData[k] >> 7);
//				ImageTransform_Buffer[row * 480 + j * 2 + 1] = (pColorData[k] & 0x1F) | ((pColorData[k] & 0xE0) << 1);
			}
		}

		LCD_Show_Image(0, i * readRowNum, 240, readRowNum, ImageTransform_Buffer);
 8007a48:	4629      	mov	r1, r5
 8007a4a:	230f      	movs	r3, #15
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f8cd 8000 	str.w	r8, [sp]
	for (i = 0; i < height / readRowNum; i++)
 8007a52:	350f      	adds	r5, #15
		LCD_Show_Image(0, i * readRowNum, 240, readRowNum, ImageTransform_Buffer);
 8007a54:	f7ff ff06 	bl	8007864 <LCD_Show_Image>
	for (i = 0; i < height / readRowNum; i++)
 8007a58:	b2ad      	uxth	r5, r5
		delay_us(LCD_File_Disp_Delay_us);
 8007a5a:	2028      	movs	r0, #40	; 0x28
 8007a5c:	f7ff f928 	bl	8006cb0 <delay_us>
	for (i = 0; i < height / readRowNum; i++)
 8007a60:	2df0      	cmp	r5, #240	; 0xf0
 8007a62:	4434      	add	r4, r6
 8007a64:	d1c0      	bne.n	80079e8 <Screen_ShowFileImage+0x98>
	}
	// 不再读写，关闭文件 //
	f_close(&file);
 8007a66:	4807      	ldr	r0, [pc, #28]	; (8007a84 <Screen_ShowFileImage+0x134>)
 8007a68:	f7fe ffb2 	bl	80069d0 <f_close>

	// 注销一个FatFS设备：SD卡 //
	//FATFS_UnLinkDriver(SDPath);

	//printfX("总耗时：%.d ms\n\n", (int )(uwTick - time));
}
 8007a6c:	b012      	add	sp, #72	; 0x48
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printfX("打开文件失败!错误代码：f_res = %d \r\n", f_res);
 8007a72:	490a      	ldr	r1, [pc, #40]	; (8007a9c <Screen_ShowFileImage+0x14c>)
 8007a74:	4806      	ldr	r0, [pc, #24]	; (8007a90 <Screen_ShowFileImage+0x140>)
 8007a76:	f000 ff5d 	bl	8008934 <siprintf>
 8007a7a:	4805      	ldr	r0, [pc, #20]	; (8007a90 <Screen_ShowFileImage+0x140>)
 8007a7c:	f000 f896 	bl	8007bac <printf_Base>
 8007a80:	e794      	b.n	80079ac <Screen_ShowFileImage+0x5c>
 8007a82:	bf00      	nop
 8007a84:	20001928 	.word	0x20001928
 8007a88:	20001924 	.word	0x20001924
 8007a8c:	0800fef5 	.word	0x0800fef5
 8007a90:	200010a4 	.word	0x200010a4
 8007a94:	0800ff44 	.word	0x0800ff44
 8007a98:	20003e46 	.word	0x20003e46
 8007a9c:	0800ff14 	.word	0x0800ff14
 8007aa0:	20002226 	.word	0x20002226

08007aa4 <Screen_ShowPicture_Num>:
{
 8007aa4:	b508      	push	{r3, lr}
 8007aa6:	460a      	mov	r2, r1
	switch (a)
 8007aa8:	b110      	cbz	r0, 8007ab0 <Screen_ShowPicture_Num+0xc>
 8007aaa:	2801      	cmp	r0, #1
 8007aac:	d005      	beq.n	8007aba <Screen_ShowPicture_Num+0x16>
}
 8007aae:	bd08      	pop	{r3, pc}
			Screen_ShowFileImage("Images/PuppySauce.bmp");
 8007ab0:	4805      	ldr	r0, [pc, #20]	; (8007ac8 <Screen_ShowPicture_Num+0x24>)
}
 8007ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Screen_ShowFileImage(ImageNameString);
 8007ab6:	f7ff bf4b 	b.w	8007950 <Screen_ShowFileImage>
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
 8007aba:	4904      	ldr	r1, [pc, #16]	; (8007acc <Screen_ShowPicture_Num+0x28>)
 8007abc:	4804      	ldr	r0, [pc, #16]	; (8007ad0 <Screen_ShowPicture_Num+0x2c>)
 8007abe:	f000 ff39 	bl	8008934 <siprintf>
			Screen_ShowFileImage(ImageNameString);
 8007ac2:	4803      	ldr	r0, [pc, #12]	; (8007ad0 <Screen_ShowPicture_Num+0x2c>)
 8007ac4:	e7f5      	b.n	8007ab2 <Screen_ShowPicture_Num+0xe>
 8007ac6:	bf00      	nop
 8007ac8:	0800ff81 	.word	0x0800ff81
 8007acc:	0800ff97 	.word	0x0800ff97
 8007ad0:	200021fe 	.word	0x200021fe

08007ad4 <Screen_Init>:
{
 8007ad4:	b508      	push	{r3, lr}
	LCD_Init();
 8007ad6:	f7ff fd25 	bl	8007524 <LCD_Init>
			Screen_ShowFileImage("Images/PuppySauce.bmp");
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <Screen_Init+0x1c>)
 8007adc:	f7ff ff38 	bl	8007950 <Screen_ShowFileImage>
	HAL_Delay(2000);
 8007ae0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007ae4:	f7fa fd30 	bl	8002548 <HAL_Delay>
}
 8007ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Screen_Clear();
 8007aec:	f7ff bf2a 	b.w	8007944 <Screen_Clear>
 8007af0:	0800ff81 	.word	0x0800ff81

08007af4 <Init_USART>:
uint8_t RxData_Index[UART_Number];
//1 未读 0 已读
uint8_t RxData_Flag[UART_Number];

void Init_USART()
{
 8007af4:	b538      	push	{r3, r4, r5, lr}
	//打开串口接收中断
	for (int var = 0; var < UART_Number; ++var)
	{
		HAL_UART_Receive_IT(UART_Handles[var], &RxData_Buffer[var], 1);
 8007af6:	4d07      	ldr	r5, [pc, #28]	; (8007b14 <Init_USART+0x20>)
 8007af8:	4c07      	ldr	r4, [pc, #28]	; (8007b18 <Init_USART+0x24>)
 8007afa:	4629      	mov	r1, r5
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f7fd fd45 	bl	800558e <HAL_UART_Receive_IT>
 8007b04:	2201      	movs	r2, #1
 8007b06:	6860      	ldr	r0, [r4, #4]
 8007b08:	18a9      	adds	r1, r5, r2
	}
}
 8007b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(UART_Handles[var], &RxData_Buffer[var], 1);
 8007b0e:	f7fd bd3e 	b.w	800558e <HAL_UART_Receive_IT>
 8007b12:	bf00      	nop
 8007b14:	200076d6 	.word	0x200076d6
 8007b18:	20000098 	.word	0x20000098

08007b1c <HAL_UART_RxCpltCallback>:
{
	uint8_t index = 0;
	//判断串口序号
	for (int var = 0; var < UART_Number; ++var)
	{
		if (huart->Instance == UART_Types[var])
 8007b1c:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <HAL_UART_RxCpltCallback+0x64>)
 8007b1e:	6802      	ldr	r2, [r0, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
			index = var;
		}
	}

	//判断结束字符
	if (RxData_Buffer[index] == '\0' || RxData_Buffer[index] == '#' || RxData_Buffer[index] == '\n')
 8007b22:	4918      	ldr	r1, [pc, #96]	; (8007b84 <HAL_UART_RxCpltCallback+0x68>)
 8007b24:	4818      	ldr	r0, [pc, #96]	; (8007b88 <HAL_UART_RxCpltCallback+0x6c>)
{
 8007b26:	b470      	push	{r4, r5, r6}
		if (huart->Instance == UART_Types[var])
 8007b28:	1ad2      	subs	r2, r2, r3
 8007b2a:	4253      	negs	r3, r2
 8007b2c:	4153      	adcs	r3, r2
	if (RxData_Buffer[index] == '\0' || RxData_Buffer[index] == '#' || RxData_Buffer[index] == '\n')
 8007b2e:	4d17      	ldr	r5, [pc, #92]	; (8007b8c <HAL_UART_RxCpltCallback+0x70>)
 8007b30:	5ccc      	ldrb	r4, [r1, r3]
 8007b32:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <HAL_UART_RxCpltCallback+0x74>)
 8007b34:	b11c      	cbz	r4, 8007b3e <HAL_UART_RxCpltCallback+0x22>
 8007b36:	2c23      	cmp	r4, #35	; 0x23
 8007b38:	d001      	beq.n	8007b3e <HAL_UART_RxCpltCallback+0x22>
 8007b3a:	2c0a      	cmp	r4, #10
 8007b3c:	d111      	bne.n	8007b62 <HAL_UART_RxCpltCallback+0x46>
	{
		RxData[index][RxData_Index[index]++] = '\0';
 8007b3e:	5cc4      	ldrb	r4, [r0, r3]
 8007b40:	1c66      	adds	r6, r4, #1
 8007b42:	54c6      	strb	r6, [r0, r3]
 8007b44:	2028      	movs	r0, #40	; 0x28
 8007b46:	fb00 2203 	mla	r2, r0, r3, r2
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	5510      	strb	r0, [r2, r4]
		RxData_Flag[index] = RX_UnRead;
 8007b4e:	2201      	movs	r2, #1
 8007b50:	54ea      	strb	r2, [r5, r3]
		//复制数据
		RxData[index][RxData_Index[index]++] = RxData_Buffer[index];
	}

	//打开串口接收中断
	HAL_UART_Receive_IT(UART_Handles[index], &RxData_Buffer[index], 1);
 8007b52:	4810      	ldr	r0, [pc, #64]	; (8007b94 <HAL_UART_RxCpltCallback+0x78>)
}
 8007b54:	bc70      	pop	{r4, r5, r6}
	HAL_UART_Receive_IT(UART_Handles[index], &RxData_Buffer[index], 1);
 8007b56:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4419      	add	r1, r3
 8007b5e:	f7fd bd16 	b.w	800558e <HAL_UART_Receive_IT>
		if (RxData_Flag[index] == RX_UnRead)
 8007b62:	5cee      	ldrb	r6, [r5, r3]
 8007b64:	2e01      	cmp	r6, #1
			RxData_Flag[index] = RX_NoData;
 8007b66:	bf02      	ittt	eq
 8007b68:	2600      	moveq	r6, #0
			RxData_Index[index] = RX_NoData;
 8007b6a:	54c6      	strbeq	r6, [r0, r3]
			RxData_Flag[index] = RX_NoData;
 8007b6c:	54ee      	strbeq	r6, [r5, r3]
		RxData[index][RxData_Index[index]++] = RxData_Buffer[index];
 8007b6e:	5cc5      	ldrb	r5, [r0, r3]
 8007b70:	1c6e      	adds	r6, r5, #1
 8007b72:	54c6      	strb	r6, [r0, r3]
 8007b74:	2028      	movs	r0, #40	; 0x28
 8007b76:	fb00 2203 	mla	r2, r0, r3, r2
 8007b7a:	5554      	strb	r4, [r2, r5]
 8007b7c:	e7e9      	b.n	8007b52 <HAL_UART_RxCpltCallback+0x36>
 8007b7e:	bf00      	nop
 8007b80:	200000a0 	.word	0x200000a0
 8007b84:	200076d6 	.word	0x200076d6
 8007b88:	200076da 	.word	0x200076da
 8007b8c:	200076d8 	.word	0x200076d8
 8007b90:	20007686 	.word	0x20007686
 8007b94:	20000098 	.word	0x20000098

08007b98 <CleanRxData>:

//清除未读标志
void CleanRxData(uint8_t index)
{

	RxData_Flag[index] = 0;
 8007b98:	4a02      	ldr	r2, [pc, #8]	; (8007ba4 <CleanRxData+0xc>)
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	5413      	strb	r3, [r2, r0]
	RxData_Index[index] = 0;
 8007b9e:	4a02      	ldr	r2, [pc, #8]	; (8007ba8 <CleanRxData+0x10>)
 8007ba0:	5413      	strb	r3, [r2, r0]
}
 8007ba2:	4770      	bx	lr
 8007ba4:	200076d8 	.word	0x200076d8
 8007ba8:	200076da 	.word	0x200076da

08007bac <printf_Base>:

void printf_Base(const char *TX_String)
{
 8007bac:	b507      	push	{r0, r1, r2, lr}
 8007bae:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(UART_Handles[Printf_UART], (uint8_t*) TX_String, strlen(TX_String), 0xFFFF);
 8007bb0:	f7f8 fb0e 	bl	80001d0 <strlen>
 8007bb4:	b282      	uxth	r2, r0
 8007bb6:	4805      	ldr	r0, [pc, #20]	; (8007bcc <printf_Base+0x20>)
 8007bb8:	9901      	ldr	r1, [sp, #4]
 8007bba:	6840      	ldr	r0, [r0, #4]
 8007bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bc0:	b003      	add	sp, #12
 8007bc2:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_UART_Transmit(UART_Handles[Printf_UART], (uint8_t*) TX_String, strlen(TX_String), 0xFFFF);
 8007bc6:	f7fd bac1 	b.w	800514c <HAL_UART_Transmit>
 8007bca:	bf00      	nop
 8007bcc:	20000098 	.word	0x20000098

08007bd0 <__errno>:
 8007bd0:	4b01      	ldr	r3, [pc, #4]	; (8007bd8 <__errno+0x8>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	200000a8 	.word	0x200000a8

08007bdc <__libc_init_array>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4d0d      	ldr	r5, [pc, #52]	; (8007c14 <__libc_init_array+0x38>)
 8007be0:	4c0d      	ldr	r4, [pc, #52]	; (8007c18 <__libc_init_array+0x3c>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	2600      	movs	r6, #0
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d109      	bne.n	8007c00 <__libc_init_array+0x24>
 8007bec:	4d0b      	ldr	r5, [pc, #44]	; (8007c1c <__libc_init_array+0x40>)
 8007bee:	4c0c      	ldr	r4, [pc, #48]	; (8007c20 <__libc_init_array+0x44>)
 8007bf0:	f004 fc9a 	bl	800c528 <_init>
 8007bf4:	1b64      	subs	r4, r4, r5
 8007bf6:	10a4      	asrs	r4, r4, #2
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	d105      	bne.n	8007c0a <__libc_init_array+0x2e>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c04:	4798      	blx	r3
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7ee      	b.n	8007be8 <__libc_init_array+0xc>
 8007c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0e:	4798      	blx	r3
 8007c10:	3601      	adds	r6, #1
 8007c12:	e7f2      	b.n	8007bfa <__libc_init_array+0x1e>
 8007c14:	08010464 	.word	0x08010464
 8007c18:	08010464 	.word	0x08010464
 8007c1c:	08010464 	.word	0x08010464
 8007c20:	08010468 	.word	0x08010468

08007c24 <memset>:
 8007c24:	4402      	add	r2, r0
 8007c26:	4603      	mov	r3, r0
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d100      	bne.n	8007c2e <memset+0xa>
 8007c2c:	4770      	bx	lr
 8007c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c32:	e7f9      	b.n	8007c28 <memset+0x4>

08007c34 <__cvt>:
 8007c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	ec55 4b10 	vmov	r4, r5, d0
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	460e      	mov	r6, r1
 8007c40:	4619      	mov	r1, r3
 8007c42:	462b      	mov	r3, r5
 8007c44:	bfbb      	ittet	lt
 8007c46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c4a:	461d      	movlt	r5, r3
 8007c4c:	2300      	movge	r3, #0
 8007c4e:	232d      	movlt	r3, #45	; 0x2d
 8007c50:	700b      	strb	r3, [r1, #0]
 8007c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c58:	4691      	mov	r9, r2
 8007c5a:	f023 0820 	bic.w	r8, r3, #32
 8007c5e:	bfbc      	itt	lt
 8007c60:	4622      	movlt	r2, r4
 8007c62:	4614      	movlt	r4, r2
 8007c64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c68:	d005      	beq.n	8007c76 <__cvt+0x42>
 8007c6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c6e:	d100      	bne.n	8007c72 <__cvt+0x3e>
 8007c70:	3601      	adds	r6, #1
 8007c72:	2102      	movs	r1, #2
 8007c74:	e000      	b.n	8007c78 <__cvt+0x44>
 8007c76:	2103      	movs	r1, #3
 8007c78:	ab03      	add	r3, sp, #12
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	ab02      	add	r3, sp, #8
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	ec45 4b10 	vmov	d0, r4, r5
 8007c84:	4653      	mov	r3, sl
 8007c86:	4632      	mov	r2, r6
 8007c88:	f001 fdb6 	bl	80097f8 <_dtoa_r>
 8007c8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c90:	4607      	mov	r7, r0
 8007c92:	d102      	bne.n	8007c9a <__cvt+0x66>
 8007c94:	f019 0f01 	tst.w	r9, #1
 8007c98:	d022      	beq.n	8007ce0 <__cvt+0xac>
 8007c9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c9e:	eb07 0906 	add.w	r9, r7, r6
 8007ca2:	d110      	bne.n	8007cc6 <__cvt+0x92>
 8007ca4:	783b      	ldrb	r3, [r7, #0]
 8007ca6:	2b30      	cmp	r3, #48	; 0x30
 8007ca8:	d10a      	bne.n	8007cc0 <__cvt+0x8c>
 8007caa:	2200      	movs	r2, #0
 8007cac:	2300      	movs	r3, #0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7f8 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb6:	b918      	cbnz	r0, 8007cc0 <__cvt+0x8c>
 8007cb8:	f1c6 0601 	rsb	r6, r6, #1
 8007cbc:	f8ca 6000 	str.w	r6, [sl]
 8007cc0:	f8da 3000 	ldr.w	r3, [sl]
 8007cc4:	4499      	add	r9, r3
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd2:	b108      	cbz	r0, 8007cd8 <__cvt+0xa4>
 8007cd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cd8:	2230      	movs	r2, #48	; 0x30
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	454b      	cmp	r3, r9
 8007cde:	d307      	bcc.n	8007cf0 <__cvt+0xbc>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ce4:	1bdb      	subs	r3, r3, r7
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	b004      	add	sp, #16
 8007cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf0:	1c59      	adds	r1, r3, #1
 8007cf2:	9103      	str	r1, [sp, #12]
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e7f0      	b.n	8007cda <__cvt+0xa6>

08007cf8 <__exponent>:
 8007cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	bfb8      	it	lt
 8007d00:	4249      	neglt	r1, r1
 8007d02:	f803 2b02 	strb.w	r2, [r3], #2
 8007d06:	bfb4      	ite	lt
 8007d08:	222d      	movlt	r2, #45	; 0x2d
 8007d0a:	222b      	movge	r2, #43	; 0x2b
 8007d0c:	2909      	cmp	r1, #9
 8007d0e:	7042      	strb	r2, [r0, #1]
 8007d10:	dd2a      	ble.n	8007d68 <__exponent+0x70>
 8007d12:	f10d 0407 	add.w	r4, sp, #7
 8007d16:	46a4      	mov	ip, r4
 8007d18:	270a      	movs	r7, #10
 8007d1a:	46a6      	mov	lr, r4
 8007d1c:	460a      	mov	r2, r1
 8007d1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d22:	fb07 1516 	mls	r5, r7, r6, r1
 8007d26:	3530      	adds	r5, #48	; 0x30
 8007d28:	2a63      	cmp	r2, #99	; 0x63
 8007d2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d32:	4631      	mov	r1, r6
 8007d34:	dcf1      	bgt.n	8007d1a <__exponent+0x22>
 8007d36:	3130      	adds	r1, #48	; 0x30
 8007d38:	f1ae 0502 	sub.w	r5, lr, #2
 8007d3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d40:	1c44      	adds	r4, r0, #1
 8007d42:	4629      	mov	r1, r5
 8007d44:	4561      	cmp	r1, ip
 8007d46:	d30a      	bcc.n	8007d5e <__exponent+0x66>
 8007d48:	f10d 0209 	add.w	r2, sp, #9
 8007d4c:	eba2 020e 	sub.w	r2, r2, lr
 8007d50:	4565      	cmp	r5, ip
 8007d52:	bf88      	it	hi
 8007d54:	2200      	movhi	r2, #0
 8007d56:	4413      	add	r3, r2
 8007d58:	1a18      	subs	r0, r3, r0
 8007d5a:	b003      	add	sp, #12
 8007d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d66:	e7ed      	b.n	8007d44 <__exponent+0x4c>
 8007d68:	2330      	movs	r3, #48	; 0x30
 8007d6a:	3130      	adds	r1, #48	; 0x30
 8007d6c:	7083      	strb	r3, [r0, #2]
 8007d6e:	70c1      	strb	r1, [r0, #3]
 8007d70:	1d03      	adds	r3, r0, #4
 8007d72:	e7f1      	b.n	8007d58 <__exponent+0x60>

08007d74 <_printf_float>:
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	ed2d 8b02 	vpush	{d8}
 8007d7c:	b08d      	sub	sp, #52	; 0x34
 8007d7e:	460c      	mov	r4, r1
 8007d80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d84:	4616      	mov	r6, r2
 8007d86:	461f      	mov	r7, r3
 8007d88:	4605      	mov	r5, r0
 8007d8a:	f002 fe93 	bl	800aab4 <_localeconv_r>
 8007d8e:	f8d0 a000 	ldr.w	sl, [r0]
 8007d92:	4650      	mov	r0, sl
 8007d94:	f7f8 fa1c 	bl	80001d0 <strlen>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	9305      	str	r3, [sp, #20]
 8007da0:	f8d8 3000 	ldr.w	r3, [r8]
 8007da4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007da8:	3307      	adds	r3, #7
 8007daa:	f023 0307 	bic.w	r3, r3, #7
 8007dae:	f103 0208 	add.w	r2, r3, #8
 8007db2:	f8c8 2000 	str.w	r2, [r8]
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dc6:	9307      	str	r3, [sp, #28]
 8007dc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dcc:	ee08 0a10 	vmov	s16, r0
 8007dd0:	4b9f      	ldr	r3, [pc, #636]	; (8008050 <_printf_float+0x2dc>)
 8007dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	f7f8 fea7 	bl	8000b2c <__aeabi_dcmpun>
 8007dde:	bb88      	cbnz	r0, 8007e44 <_printf_float+0xd0>
 8007de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de4:	4b9a      	ldr	r3, [pc, #616]	; (8008050 <_printf_float+0x2dc>)
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	f7f8 fe81 	bl	8000af0 <__aeabi_dcmple>
 8007dee:	bb48      	cbnz	r0, 8007e44 <_printf_float+0xd0>
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 fe70 	bl	8000adc <__aeabi_dcmplt>
 8007dfc:	b110      	cbz	r0, 8007e04 <_printf_float+0x90>
 8007dfe:	232d      	movs	r3, #45	; 0x2d
 8007e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e04:	4b93      	ldr	r3, [pc, #588]	; (8008054 <_printf_float+0x2e0>)
 8007e06:	4894      	ldr	r0, [pc, #592]	; (8008058 <_printf_float+0x2e4>)
 8007e08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e0c:	bf94      	ite	ls
 8007e0e:	4698      	movls	r8, r3
 8007e10:	4680      	movhi	r8, r0
 8007e12:	2303      	movs	r3, #3
 8007e14:	6123      	str	r3, [r4, #16]
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	f023 0204 	bic.w	r2, r3, #4
 8007e1c:	6022      	str	r2, [r4, #0]
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	9700      	str	r7, [sp, #0]
 8007e24:	4633      	mov	r3, r6
 8007e26:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f000 f9d8 	bl	80081e0 <_printf_common>
 8007e30:	3001      	adds	r0, #1
 8007e32:	f040 8090 	bne.w	8007f56 <_printf_float+0x1e2>
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	b00d      	add	sp, #52	; 0x34
 8007e3c:	ecbd 8b02 	vpop	{d8}
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7f8 fe6e 	bl	8000b2c <__aeabi_dcmpun>
 8007e50:	b140      	cbz	r0, 8007e64 <_printf_float+0xf0>
 8007e52:	464b      	mov	r3, r9
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bfbc      	itt	lt
 8007e58:	232d      	movlt	r3, #45	; 0x2d
 8007e5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e5e:	487f      	ldr	r0, [pc, #508]	; (800805c <_printf_float+0x2e8>)
 8007e60:	4b7f      	ldr	r3, [pc, #508]	; (8008060 <_printf_float+0x2ec>)
 8007e62:	e7d1      	b.n	8007e08 <_printf_float+0x94>
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e6a:	9206      	str	r2, [sp, #24]
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	d13f      	bne.n	8007ef0 <_printf_float+0x17c>
 8007e70:	2306      	movs	r3, #6
 8007e72:	6063      	str	r3, [r4, #4]
 8007e74:	9b05      	ldr	r3, [sp, #20]
 8007e76:	6861      	ldr	r1, [r4, #4]
 8007e78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	ab0a      	add	r3, sp, #40	; 0x28
 8007e82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e86:	ab09      	add	r3, sp, #36	; 0x24
 8007e88:	ec49 8b10 	vmov	d0, r8, r9
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	6022      	str	r2, [r4, #0]
 8007e90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e94:	4628      	mov	r0, r5
 8007e96:	f7ff fecd 	bl	8007c34 <__cvt>
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e9e:	2b47      	cmp	r3, #71	; 0x47
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	d108      	bne.n	8007eb6 <_printf_float+0x142>
 8007ea4:	1cc8      	adds	r0, r1, #3
 8007ea6:	db02      	blt.n	8007eae <_printf_float+0x13a>
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	dd41      	ble.n	8007f32 <_printf_float+0x1be>
 8007eae:	f1ab 0b02 	sub.w	fp, fp, #2
 8007eb2:	fa5f fb8b 	uxtb.w	fp, fp
 8007eb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007eba:	d820      	bhi.n	8007efe <_printf_float+0x18a>
 8007ebc:	3901      	subs	r1, #1
 8007ebe:	465a      	mov	r2, fp
 8007ec0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ec4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ec6:	f7ff ff17 	bl	8007cf8 <__exponent>
 8007eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ecc:	1813      	adds	r3, r2, r0
 8007ece:	2a01      	cmp	r2, #1
 8007ed0:	4681      	mov	r9, r0
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	dc02      	bgt.n	8007edc <_printf_float+0x168>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	07d2      	lsls	r2, r2, #31
 8007eda:	d501      	bpl.n	8007ee0 <_printf_float+0x16c>
 8007edc:	3301      	adds	r3, #1
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d09c      	beq.n	8007e22 <_printf_float+0xae>
 8007ee8:	232d      	movs	r3, #45	; 0x2d
 8007eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eee:	e798      	b.n	8007e22 <_printf_float+0xae>
 8007ef0:	9a06      	ldr	r2, [sp, #24]
 8007ef2:	2a47      	cmp	r2, #71	; 0x47
 8007ef4:	d1be      	bne.n	8007e74 <_printf_float+0x100>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1bc      	bne.n	8007e74 <_printf_float+0x100>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7b9      	b.n	8007e72 <_printf_float+0xfe>
 8007efe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f02:	d118      	bne.n	8007f36 <_printf_float+0x1c2>
 8007f04:	2900      	cmp	r1, #0
 8007f06:	6863      	ldr	r3, [r4, #4]
 8007f08:	dd0b      	ble.n	8007f22 <_printf_float+0x1ae>
 8007f0a:	6121      	str	r1, [r4, #16]
 8007f0c:	b913      	cbnz	r3, 8007f14 <_printf_float+0x1a0>
 8007f0e:	6822      	ldr	r2, [r4, #0]
 8007f10:	07d0      	lsls	r0, r2, #31
 8007f12:	d502      	bpl.n	8007f1a <_printf_float+0x1a6>
 8007f14:	3301      	adds	r3, #1
 8007f16:	440b      	add	r3, r1
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f1c:	f04f 0900 	mov.w	r9, #0
 8007f20:	e7de      	b.n	8007ee0 <_printf_float+0x16c>
 8007f22:	b913      	cbnz	r3, 8007f2a <_printf_float+0x1b6>
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	07d2      	lsls	r2, r2, #31
 8007f28:	d501      	bpl.n	8007f2e <_printf_float+0x1ba>
 8007f2a:	3302      	adds	r3, #2
 8007f2c:	e7f4      	b.n	8007f18 <_printf_float+0x1a4>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e7f2      	b.n	8007f18 <_printf_float+0x1a4>
 8007f32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	db05      	blt.n	8007f48 <_printf_float+0x1d4>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	6121      	str	r1, [r4, #16]
 8007f40:	07d8      	lsls	r0, r3, #31
 8007f42:	d5ea      	bpl.n	8007f1a <_printf_float+0x1a6>
 8007f44:	1c4b      	adds	r3, r1, #1
 8007f46:	e7e7      	b.n	8007f18 <_printf_float+0x1a4>
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	bfd4      	ite	le
 8007f4c:	f1c1 0202 	rsble	r2, r1, #2
 8007f50:	2201      	movgt	r2, #1
 8007f52:	4413      	add	r3, r2
 8007f54:	e7e0      	b.n	8007f18 <_printf_float+0x1a4>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	055a      	lsls	r2, r3, #21
 8007f5a:	d407      	bmi.n	8007f6c <_printf_float+0x1f8>
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	4642      	mov	r2, r8
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	d12c      	bne.n	8007fc4 <_printf_float+0x250>
 8007f6a:	e764      	b.n	8007e36 <_printf_float+0xc2>
 8007f6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f70:	f240 80e0 	bls.w	8008134 <_printf_float+0x3c0>
 8007f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f7f8 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d034      	beq.n	8007fee <_printf_float+0x27a>
 8007f84:	4a37      	ldr	r2, [pc, #220]	; (8008064 <_printf_float+0x2f0>)
 8007f86:	2301      	movs	r3, #1
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af51 	beq.w	8007e36 <_printf_float+0xc2>
 8007f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	db02      	blt.n	8007fa2 <_printf_float+0x22e>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	07d8      	lsls	r0, r3, #31
 8007fa0:	d510      	bpl.n	8007fc4 <_printf_float+0x250>
 8007fa2:	ee18 3a10 	vmov	r3, s16
 8007fa6:	4652      	mov	r2, sl
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f af41 	beq.w	8007e36 <_printf_float+0xc2>
 8007fb4:	f04f 0800 	mov.w	r8, #0
 8007fb8:	f104 091a 	add.w	r9, r4, #26
 8007fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	4543      	cmp	r3, r8
 8007fc2:	dc09      	bgt.n	8007fd8 <_printf_float+0x264>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	079b      	lsls	r3, r3, #30
 8007fc8:	f100 8105 	bmi.w	80081d6 <_printf_float+0x462>
 8007fcc:	68e0      	ldr	r0, [r4, #12]
 8007fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd0:	4298      	cmp	r0, r3
 8007fd2:	bfb8      	it	lt
 8007fd4:	4618      	movlt	r0, r3
 8007fd6:	e730      	b.n	8007e3a <_printf_float+0xc6>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	464a      	mov	r2, r9
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4628      	mov	r0, r5
 8007fe0:	47b8      	blx	r7
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f43f af27 	beq.w	8007e36 <_printf_float+0xc2>
 8007fe8:	f108 0801 	add.w	r8, r8, #1
 8007fec:	e7e6      	b.n	8007fbc <_printf_float+0x248>
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dc39      	bgt.n	8008068 <_printf_float+0x2f4>
 8007ff4:	4a1b      	ldr	r2, [pc, #108]	; (8008064 <_printf_float+0x2f0>)
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f af19 	beq.w	8007e36 <_printf_float+0xc2>
 8008004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008008:	4313      	orrs	r3, r2
 800800a:	d102      	bne.n	8008012 <_printf_float+0x29e>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	07d9      	lsls	r1, r3, #31
 8008010:	d5d8      	bpl.n	8007fc4 <_printf_float+0x250>
 8008012:	ee18 3a10 	vmov	r3, s16
 8008016:	4652      	mov	r2, sl
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f af09 	beq.w	8007e36 <_printf_float+0xc2>
 8008024:	f04f 0900 	mov.w	r9, #0
 8008028:	f104 0a1a 	add.w	sl, r4, #26
 800802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802e:	425b      	negs	r3, r3
 8008030:	454b      	cmp	r3, r9
 8008032:	dc01      	bgt.n	8008038 <_printf_float+0x2c4>
 8008034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008036:	e792      	b.n	8007f5e <_printf_float+0x1ea>
 8008038:	2301      	movs	r3, #1
 800803a:	4652      	mov	r2, sl
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f aef7 	beq.w	8007e36 <_printf_float+0xc2>
 8008048:	f109 0901 	add.w	r9, r9, #1
 800804c:	e7ee      	b.n	800802c <_printf_float+0x2b8>
 800804e:	bf00      	nop
 8008050:	7fefffff 	.word	0x7fefffff
 8008054:	0800ffb8 	.word	0x0800ffb8
 8008058:	0800ffbc 	.word	0x0800ffbc
 800805c:	0800ffc4 	.word	0x0800ffc4
 8008060:	0800ffc0 	.word	0x0800ffc0
 8008064:	0800ffc8 	.word	0x0800ffc8
 8008068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800806a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800806c:	429a      	cmp	r2, r3
 800806e:	bfa8      	it	ge
 8008070:	461a      	movge	r2, r3
 8008072:	2a00      	cmp	r2, #0
 8008074:	4691      	mov	r9, r2
 8008076:	dc37      	bgt.n	80080e8 <_printf_float+0x374>
 8008078:	f04f 0b00 	mov.w	fp, #0
 800807c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008080:	f104 021a 	add.w	r2, r4, #26
 8008084:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008086:	9305      	str	r3, [sp, #20]
 8008088:	eba3 0309 	sub.w	r3, r3, r9
 800808c:	455b      	cmp	r3, fp
 800808e:	dc33      	bgt.n	80080f8 <_printf_float+0x384>
 8008090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008094:	429a      	cmp	r2, r3
 8008096:	db3b      	blt.n	8008110 <_printf_float+0x39c>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	07da      	lsls	r2, r3, #31
 800809c:	d438      	bmi.n	8008110 <_printf_float+0x39c>
 800809e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a0:	9a05      	ldr	r2, [sp, #20]
 80080a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a4:	1a9a      	subs	r2, r3, r2
 80080a6:	eba3 0901 	sub.w	r9, r3, r1
 80080aa:	4591      	cmp	r9, r2
 80080ac:	bfa8      	it	ge
 80080ae:	4691      	movge	r9, r2
 80080b0:	f1b9 0f00 	cmp.w	r9, #0
 80080b4:	dc35      	bgt.n	8008122 <_printf_float+0x3ae>
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080be:	f104 0a1a 	add.w	sl, r4, #26
 80080c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	eba3 0309 	sub.w	r3, r3, r9
 80080cc:	4543      	cmp	r3, r8
 80080ce:	f77f af79 	ble.w	8007fc4 <_printf_float+0x250>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4652      	mov	r2, sl
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f aeaa 	beq.w	8007e36 <_printf_float+0xc2>
 80080e2:	f108 0801 	add.w	r8, r8, #1
 80080e6:	e7ec      	b.n	80080c2 <_printf_float+0x34e>
 80080e8:	4613      	mov	r3, r2
 80080ea:	4631      	mov	r1, r6
 80080ec:	4642      	mov	r2, r8
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	d1c0      	bne.n	8008078 <_printf_float+0x304>
 80080f6:	e69e      	b.n	8007e36 <_printf_float+0xc2>
 80080f8:	2301      	movs	r3, #1
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	9205      	str	r2, [sp, #20]
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	f43f ae97 	beq.w	8007e36 <_printf_float+0xc2>
 8008108:	9a05      	ldr	r2, [sp, #20]
 800810a:	f10b 0b01 	add.w	fp, fp, #1
 800810e:	e7b9      	b.n	8008084 <_printf_float+0x310>
 8008110:	ee18 3a10 	vmov	r3, s16
 8008114:	4652      	mov	r2, sl
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	d1be      	bne.n	800809e <_printf_float+0x32a>
 8008120:	e689      	b.n	8007e36 <_printf_float+0xc2>
 8008122:	9a05      	ldr	r2, [sp, #20]
 8008124:	464b      	mov	r3, r9
 8008126:	4442      	add	r2, r8
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	d1c1      	bne.n	80080b6 <_printf_float+0x342>
 8008132:	e680      	b.n	8007e36 <_printf_float+0xc2>
 8008134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008136:	2a01      	cmp	r2, #1
 8008138:	dc01      	bgt.n	800813e <_printf_float+0x3ca>
 800813a:	07db      	lsls	r3, r3, #31
 800813c:	d538      	bpl.n	80081b0 <_printf_float+0x43c>
 800813e:	2301      	movs	r3, #1
 8008140:	4642      	mov	r2, r8
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	f43f ae74 	beq.w	8007e36 <_printf_float+0xc2>
 800814e:	ee18 3a10 	vmov	r3, s16
 8008152:	4652      	mov	r2, sl
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f ae6b 	beq.w	8007e36 <_printf_float+0xc2>
 8008160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	f7f8 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800816c:	b9d8      	cbnz	r0, 80081a6 <_printf_float+0x432>
 800816e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008170:	f108 0201 	add.w	r2, r8, #1
 8008174:	3b01      	subs	r3, #1
 8008176:	4631      	mov	r1, r6
 8008178:	4628      	mov	r0, r5
 800817a:	47b8      	blx	r7
 800817c:	3001      	adds	r0, #1
 800817e:	d10e      	bne.n	800819e <_printf_float+0x42a>
 8008180:	e659      	b.n	8007e36 <_printf_float+0xc2>
 8008182:	2301      	movs	r3, #1
 8008184:	4652      	mov	r2, sl
 8008186:	4631      	mov	r1, r6
 8008188:	4628      	mov	r0, r5
 800818a:	47b8      	blx	r7
 800818c:	3001      	adds	r0, #1
 800818e:	f43f ae52 	beq.w	8007e36 <_printf_float+0xc2>
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008198:	3b01      	subs	r3, #1
 800819a:	4543      	cmp	r3, r8
 800819c:	dcf1      	bgt.n	8008182 <_printf_float+0x40e>
 800819e:	464b      	mov	r3, r9
 80081a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081a4:	e6dc      	b.n	8007f60 <_printf_float+0x1ec>
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	f104 0a1a 	add.w	sl, r4, #26
 80081ae:	e7f2      	b.n	8008196 <_printf_float+0x422>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4642      	mov	r2, r8
 80081b4:	e7df      	b.n	8008176 <_printf_float+0x402>
 80081b6:	2301      	movs	r3, #1
 80081b8:	464a      	mov	r2, r9
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	f43f ae38 	beq.w	8007e36 <_printf_float+0xc2>
 80081c6:	f108 0801 	add.w	r8, r8, #1
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081ce:	1a5b      	subs	r3, r3, r1
 80081d0:	4543      	cmp	r3, r8
 80081d2:	dcf0      	bgt.n	80081b6 <_printf_float+0x442>
 80081d4:	e6fa      	b.n	8007fcc <_printf_float+0x258>
 80081d6:	f04f 0800 	mov.w	r8, #0
 80081da:	f104 0919 	add.w	r9, r4, #25
 80081de:	e7f4      	b.n	80081ca <_printf_float+0x456>

080081e0 <_printf_common>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	4616      	mov	r6, r2
 80081e6:	4699      	mov	r9, r3
 80081e8:	688a      	ldr	r2, [r1, #8]
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bfb8      	it	lt
 80081f4:	4613      	movlt	r3, r2
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081fc:	4607      	mov	r7, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	b10a      	cbz	r2, 8008206 <_printf_common+0x26>
 8008202:	3301      	adds	r3, #1
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	6833      	ldrmi	r3, [r6, #0]
 800820e:	3302      	addmi	r3, #2
 8008210:	6033      	strmi	r3, [r6, #0]
 8008212:	6825      	ldr	r5, [r4, #0]
 8008214:	f015 0506 	ands.w	r5, r5, #6
 8008218:	d106      	bne.n	8008228 <_printf_common+0x48>
 800821a:	f104 0a19 	add.w	sl, r4, #25
 800821e:	68e3      	ldr	r3, [r4, #12]
 8008220:	6832      	ldr	r2, [r6, #0]
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	42ab      	cmp	r3, r5
 8008226:	dc26      	bgt.n	8008276 <_printf_common+0x96>
 8008228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800822c:	1e13      	subs	r3, r2, #0
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	bf18      	it	ne
 8008232:	2301      	movne	r3, #1
 8008234:	0692      	lsls	r2, r2, #26
 8008236:	d42b      	bmi.n	8008290 <_printf_common+0xb0>
 8008238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800823c:	4649      	mov	r1, r9
 800823e:	4638      	mov	r0, r7
 8008240:	47c0      	blx	r8
 8008242:	3001      	adds	r0, #1
 8008244:	d01e      	beq.n	8008284 <_printf_common+0xa4>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	68e5      	ldr	r5, [r4, #12]
 800824a:	6832      	ldr	r2, [r6, #0]
 800824c:	f003 0306 	and.w	r3, r3, #6
 8008250:	2b04      	cmp	r3, #4
 8008252:	bf08      	it	eq
 8008254:	1aad      	subeq	r5, r5, r2
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	6922      	ldr	r2, [r4, #16]
 800825a:	bf0c      	ite	eq
 800825c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008260:	2500      	movne	r5, #0
 8008262:	4293      	cmp	r3, r2
 8008264:	bfc4      	itt	gt
 8008266:	1a9b      	subgt	r3, r3, r2
 8008268:	18ed      	addgt	r5, r5, r3
 800826a:	2600      	movs	r6, #0
 800826c:	341a      	adds	r4, #26
 800826e:	42b5      	cmp	r5, r6
 8008270:	d11a      	bne.n	80082a8 <_printf_common+0xc8>
 8008272:	2000      	movs	r0, #0
 8008274:	e008      	b.n	8008288 <_printf_common+0xa8>
 8008276:	2301      	movs	r3, #1
 8008278:	4652      	mov	r2, sl
 800827a:	4649      	mov	r1, r9
 800827c:	4638      	mov	r0, r7
 800827e:	47c0      	blx	r8
 8008280:	3001      	adds	r0, #1
 8008282:	d103      	bne.n	800828c <_printf_common+0xac>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	3501      	adds	r5, #1
 800828e:	e7c6      	b.n	800821e <_printf_common+0x3e>
 8008290:	18e1      	adds	r1, r4, r3
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	2030      	movs	r0, #48	; 0x30
 8008296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800829a:	4422      	add	r2, r4
 800829c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082a4:	3302      	adds	r3, #2
 80082a6:	e7c7      	b.n	8008238 <_printf_common+0x58>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4622      	mov	r2, r4
 80082ac:	4649      	mov	r1, r9
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c0      	blx	r8
 80082b2:	3001      	adds	r0, #1
 80082b4:	d0e6      	beq.n	8008284 <_printf_common+0xa4>
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7d9      	b.n	800826e <_printf_common+0x8e>
	...

080082bc <_printf_i>:
 80082bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	7e0f      	ldrb	r7, [r1, #24]
 80082c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082c4:	2f78      	cmp	r7, #120	; 0x78
 80082c6:	4691      	mov	r9, r2
 80082c8:	4680      	mov	r8, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	469a      	mov	sl, r3
 80082ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082d2:	d807      	bhi.n	80082e4 <_printf_i+0x28>
 80082d4:	2f62      	cmp	r7, #98	; 0x62
 80082d6:	d80a      	bhi.n	80082ee <_printf_i+0x32>
 80082d8:	2f00      	cmp	r7, #0
 80082da:	f000 80d8 	beq.w	800848e <_printf_i+0x1d2>
 80082de:	2f58      	cmp	r7, #88	; 0x58
 80082e0:	f000 80a3 	beq.w	800842a <_printf_i+0x16e>
 80082e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082ec:	e03a      	b.n	8008364 <_printf_i+0xa8>
 80082ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082f2:	2b15      	cmp	r3, #21
 80082f4:	d8f6      	bhi.n	80082e4 <_printf_i+0x28>
 80082f6:	a101      	add	r1, pc, #4	; (adr r1, 80082fc <_printf_i+0x40>)
 80082f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008369 	.word	0x08008369
 8008304:	080082e5 	.word	0x080082e5
 8008308:	080082e5 	.word	0x080082e5
 800830c:	080082e5 	.word	0x080082e5
 8008310:	080082e5 	.word	0x080082e5
 8008314:	08008369 	.word	0x08008369
 8008318:	080082e5 	.word	0x080082e5
 800831c:	080082e5 	.word	0x080082e5
 8008320:	080082e5 	.word	0x080082e5
 8008324:	080082e5 	.word	0x080082e5
 8008328:	08008475 	.word	0x08008475
 800832c:	08008399 	.word	0x08008399
 8008330:	08008457 	.word	0x08008457
 8008334:	080082e5 	.word	0x080082e5
 8008338:	080082e5 	.word	0x080082e5
 800833c:	08008497 	.word	0x08008497
 8008340:	080082e5 	.word	0x080082e5
 8008344:	08008399 	.word	0x08008399
 8008348:	080082e5 	.word	0x080082e5
 800834c:	080082e5 	.word	0x080082e5
 8008350:	0800845f 	.word	0x0800845f
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	602a      	str	r2, [r5, #0]
 800835c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008364:	2301      	movs	r3, #1
 8008366:	e0a3      	b.n	80084b0 <_printf_i+0x1f4>
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	6829      	ldr	r1, [r5, #0]
 800836c:	0606      	lsls	r6, r0, #24
 800836e:	f101 0304 	add.w	r3, r1, #4
 8008372:	d50a      	bpl.n	800838a <_printf_i+0xce>
 8008374:	680e      	ldr	r6, [r1, #0]
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	2e00      	cmp	r6, #0
 800837a:	da03      	bge.n	8008384 <_printf_i+0xc8>
 800837c:	232d      	movs	r3, #45	; 0x2d
 800837e:	4276      	negs	r6, r6
 8008380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008384:	485e      	ldr	r0, [pc, #376]	; (8008500 <_printf_i+0x244>)
 8008386:	230a      	movs	r3, #10
 8008388:	e019      	b.n	80083be <_printf_i+0x102>
 800838a:	680e      	ldr	r6, [r1, #0]
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008392:	bf18      	it	ne
 8008394:	b236      	sxthne	r6, r6
 8008396:	e7ef      	b.n	8008378 <_printf_i+0xbc>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	6820      	ldr	r0, [r4, #0]
 800839c:	1d19      	adds	r1, r3, #4
 800839e:	6029      	str	r1, [r5, #0]
 80083a0:	0601      	lsls	r1, r0, #24
 80083a2:	d501      	bpl.n	80083a8 <_printf_i+0xec>
 80083a4:	681e      	ldr	r6, [r3, #0]
 80083a6:	e002      	b.n	80083ae <_printf_i+0xf2>
 80083a8:	0646      	lsls	r6, r0, #25
 80083aa:	d5fb      	bpl.n	80083a4 <_printf_i+0xe8>
 80083ac:	881e      	ldrh	r6, [r3, #0]
 80083ae:	4854      	ldr	r0, [pc, #336]	; (8008500 <_printf_i+0x244>)
 80083b0:	2f6f      	cmp	r7, #111	; 0x6f
 80083b2:	bf0c      	ite	eq
 80083b4:	2308      	moveq	r3, #8
 80083b6:	230a      	movne	r3, #10
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083be:	6865      	ldr	r5, [r4, #4]
 80083c0:	60a5      	str	r5, [r4, #8]
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	bfa2      	ittt	ge
 80083c6:	6821      	ldrge	r1, [r4, #0]
 80083c8:	f021 0104 	bicge.w	r1, r1, #4
 80083cc:	6021      	strge	r1, [r4, #0]
 80083ce:	b90e      	cbnz	r6, 80083d4 <_printf_i+0x118>
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	d04d      	beq.n	8008470 <_printf_i+0x1b4>
 80083d4:	4615      	mov	r5, r2
 80083d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80083da:	fb03 6711 	mls	r7, r3, r1, r6
 80083de:	5dc7      	ldrb	r7, [r0, r7]
 80083e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083e4:	4637      	mov	r7, r6
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	460e      	mov	r6, r1
 80083ea:	d9f4      	bls.n	80083d6 <_printf_i+0x11a>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d10b      	bne.n	8008408 <_printf_i+0x14c>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07de      	lsls	r6, r3, #31
 80083f4:	d508      	bpl.n	8008408 <_printf_i+0x14c>
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	6861      	ldr	r1, [r4, #4]
 80083fa:	4299      	cmp	r1, r3
 80083fc:	bfde      	ittt	le
 80083fe:	2330      	movle	r3, #48	; 0x30
 8008400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008408:	1b52      	subs	r2, r2, r5
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	f8cd a000 	str.w	sl, [sp]
 8008410:	464b      	mov	r3, r9
 8008412:	aa03      	add	r2, sp, #12
 8008414:	4621      	mov	r1, r4
 8008416:	4640      	mov	r0, r8
 8008418:	f7ff fee2 	bl	80081e0 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	d14c      	bne.n	80084ba <_printf_i+0x1fe>
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	b004      	add	sp, #16
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	4835      	ldr	r0, [pc, #212]	; (8008500 <_printf_i+0x244>)
 800842c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	f851 6b04 	ldr.w	r6, [r1], #4
 8008438:	6029      	str	r1, [r5, #0]
 800843a:	061d      	lsls	r5, r3, #24
 800843c:	d514      	bpl.n	8008468 <_printf_i+0x1ac>
 800843e:	07df      	lsls	r7, r3, #31
 8008440:	bf44      	itt	mi
 8008442:	f043 0320 	orrmi.w	r3, r3, #32
 8008446:	6023      	strmi	r3, [r4, #0]
 8008448:	b91e      	cbnz	r6, 8008452 <_printf_i+0x196>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f023 0320 	bic.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	2310      	movs	r3, #16
 8008454:	e7b0      	b.n	80083b8 <_printf_i+0xfc>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f043 0320 	orr.w	r3, r3, #32
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	2378      	movs	r3, #120	; 0x78
 8008460:	4828      	ldr	r0, [pc, #160]	; (8008504 <_printf_i+0x248>)
 8008462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008466:	e7e3      	b.n	8008430 <_printf_i+0x174>
 8008468:	0659      	lsls	r1, r3, #25
 800846a:	bf48      	it	mi
 800846c:	b2b6      	uxthmi	r6, r6
 800846e:	e7e6      	b.n	800843e <_printf_i+0x182>
 8008470:	4615      	mov	r5, r2
 8008472:	e7bb      	b.n	80083ec <_printf_i+0x130>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	6826      	ldr	r6, [r4, #0]
 8008478:	6961      	ldr	r1, [r4, #20]
 800847a:	1d18      	adds	r0, r3, #4
 800847c:	6028      	str	r0, [r5, #0]
 800847e:	0635      	lsls	r5, r6, #24
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	d501      	bpl.n	8008488 <_printf_i+0x1cc>
 8008484:	6019      	str	r1, [r3, #0]
 8008486:	e002      	b.n	800848e <_printf_i+0x1d2>
 8008488:	0670      	lsls	r0, r6, #25
 800848a:	d5fb      	bpl.n	8008484 <_printf_i+0x1c8>
 800848c:	8019      	strh	r1, [r3, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	4615      	mov	r5, r2
 8008494:	e7ba      	b.n	800840c <_printf_i+0x150>
 8008496:	682b      	ldr	r3, [r5, #0]
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	602a      	str	r2, [r5, #0]
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	6862      	ldr	r2, [r4, #4]
 80084a0:	2100      	movs	r1, #0
 80084a2:	4628      	mov	r0, r5
 80084a4:	f7f7 fe9c 	bl	80001e0 <memchr>
 80084a8:	b108      	cbz	r0, 80084ae <_printf_i+0x1f2>
 80084aa:	1b40      	subs	r0, r0, r5
 80084ac:	6060      	str	r0, [r4, #4]
 80084ae:	6863      	ldr	r3, [r4, #4]
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	2300      	movs	r3, #0
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b8:	e7a8      	b.n	800840c <_printf_i+0x150>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	462a      	mov	r2, r5
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	47d0      	blx	sl
 80084c4:	3001      	adds	r0, #1
 80084c6:	d0ab      	beq.n	8008420 <_printf_i+0x164>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	079b      	lsls	r3, r3, #30
 80084cc:	d413      	bmi.n	80084f6 <_printf_i+0x23a>
 80084ce:	68e0      	ldr	r0, [r4, #12]
 80084d0:	9b03      	ldr	r3, [sp, #12]
 80084d2:	4298      	cmp	r0, r3
 80084d4:	bfb8      	it	lt
 80084d6:	4618      	movlt	r0, r3
 80084d8:	e7a4      	b.n	8008424 <_printf_i+0x168>
 80084da:	2301      	movs	r3, #1
 80084dc:	4632      	mov	r2, r6
 80084de:	4649      	mov	r1, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	47d0      	blx	sl
 80084e4:	3001      	adds	r0, #1
 80084e6:	d09b      	beq.n	8008420 <_printf_i+0x164>
 80084e8:	3501      	adds	r5, #1
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	9903      	ldr	r1, [sp, #12]
 80084ee:	1a5b      	subs	r3, r3, r1
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	dcf2      	bgt.n	80084da <_printf_i+0x21e>
 80084f4:	e7eb      	b.n	80084ce <_printf_i+0x212>
 80084f6:	2500      	movs	r5, #0
 80084f8:	f104 0619 	add.w	r6, r4, #25
 80084fc:	e7f5      	b.n	80084ea <_printf_i+0x22e>
 80084fe:	bf00      	nop
 8008500:	0800ffca 	.word	0x0800ffca
 8008504:	0800ffdb 	.word	0x0800ffdb

08008508 <_scanf_float>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	b087      	sub	sp, #28
 800850e:	4617      	mov	r7, r2
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	688b      	ldr	r3, [r1, #8]
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800851a:	bf83      	ittte	hi
 800851c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008520:	195b      	addhi	r3, r3, r5
 8008522:	9302      	strhi	r3, [sp, #8]
 8008524:	2300      	movls	r3, #0
 8008526:	bf86      	itte	hi
 8008528:	f240 135d 	movwhi	r3, #349	; 0x15d
 800852c:	608b      	strhi	r3, [r1, #8]
 800852e:	9302      	strls	r3, [sp, #8]
 8008530:	680b      	ldr	r3, [r1, #0]
 8008532:	468b      	mov	fp, r1
 8008534:	2500      	movs	r5, #0
 8008536:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800853a:	f84b 3b1c 	str.w	r3, [fp], #28
 800853e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008542:	4680      	mov	r8, r0
 8008544:	460c      	mov	r4, r1
 8008546:	465e      	mov	r6, fp
 8008548:	46aa      	mov	sl, r5
 800854a:	46a9      	mov	r9, r5
 800854c:	9501      	str	r5, [sp, #4]
 800854e:	68a2      	ldr	r2, [r4, #8]
 8008550:	b152      	cbz	r2, 8008568 <_scanf_float+0x60>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b4e      	cmp	r3, #78	; 0x4e
 8008558:	d864      	bhi.n	8008624 <_scanf_float+0x11c>
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d83c      	bhi.n	80085d8 <_scanf_float+0xd0>
 800855e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008562:	b2c8      	uxtb	r0, r1
 8008564:	280e      	cmp	r0, #14
 8008566:	d93a      	bls.n	80085de <_scanf_float+0xd6>
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	d003      	beq.n	8008576 <_scanf_float+0x6e>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800857a:	f1ba 0f01 	cmp.w	sl, #1
 800857e:	f200 8113 	bhi.w	80087a8 <_scanf_float+0x2a0>
 8008582:	455e      	cmp	r6, fp
 8008584:	f200 8105 	bhi.w	8008792 <_scanf_float+0x28a>
 8008588:	2501      	movs	r5, #1
 800858a:	4628      	mov	r0, r5
 800858c:	b007      	add	sp, #28
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008596:	2a0d      	cmp	r2, #13
 8008598:	d8e6      	bhi.n	8008568 <_scanf_float+0x60>
 800859a:	a101      	add	r1, pc, #4	; (adr r1, 80085a0 <_scanf_float+0x98>)
 800859c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085a0:	080086df 	.word	0x080086df
 80085a4:	08008569 	.word	0x08008569
 80085a8:	08008569 	.word	0x08008569
 80085ac:	08008569 	.word	0x08008569
 80085b0:	0800873f 	.word	0x0800873f
 80085b4:	08008717 	.word	0x08008717
 80085b8:	08008569 	.word	0x08008569
 80085bc:	08008569 	.word	0x08008569
 80085c0:	080086ed 	.word	0x080086ed
 80085c4:	08008569 	.word	0x08008569
 80085c8:	08008569 	.word	0x08008569
 80085cc:	08008569 	.word	0x08008569
 80085d0:	08008569 	.word	0x08008569
 80085d4:	080086a5 	.word	0x080086a5
 80085d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085dc:	e7db      	b.n	8008596 <_scanf_float+0x8e>
 80085de:	290e      	cmp	r1, #14
 80085e0:	d8c2      	bhi.n	8008568 <_scanf_float+0x60>
 80085e2:	a001      	add	r0, pc, #4	; (adr r0, 80085e8 <_scanf_float+0xe0>)
 80085e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085e8:	08008697 	.word	0x08008697
 80085ec:	08008569 	.word	0x08008569
 80085f0:	08008697 	.word	0x08008697
 80085f4:	0800872b 	.word	0x0800872b
 80085f8:	08008569 	.word	0x08008569
 80085fc:	08008645 	.word	0x08008645
 8008600:	08008681 	.word	0x08008681
 8008604:	08008681 	.word	0x08008681
 8008608:	08008681 	.word	0x08008681
 800860c:	08008681 	.word	0x08008681
 8008610:	08008681 	.word	0x08008681
 8008614:	08008681 	.word	0x08008681
 8008618:	08008681 	.word	0x08008681
 800861c:	08008681 	.word	0x08008681
 8008620:	08008681 	.word	0x08008681
 8008624:	2b6e      	cmp	r3, #110	; 0x6e
 8008626:	d809      	bhi.n	800863c <_scanf_float+0x134>
 8008628:	2b60      	cmp	r3, #96	; 0x60
 800862a:	d8b2      	bhi.n	8008592 <_scanf_float+0x8a>
 800862c:	2b54      	cmp	r3, #84	; 0x54
 800862e:	d077      	beq.n	8008720 <_scanf_float+0x218>
 8008630:	2b59      	cmp	r3, #89	; 0x59
 8008632:	d199      	bne.n	8008568 <_scanf_float+0x60>
 8008634:	2d07      	cmp	r5, #7
 8008636:	d197      	bne.n	8008568 <_scanf_float+0x60>
 8008638:	2508      	movs	r5, #8
 800863a:	e029      	b.n	8008690 <_scanf_float+0x188>
 800863c:	2b74      	cmp	r3, #116	; 0x74
 800863e:	d06f      	beq.n	8008720 <_scanf_float+0x218>
 8008640:	2b79      	cmp	r3, #121	; 0x79
 8008642:	e7f6      	b.n	8008632 <_scanf_float+0x12a>
 8008644:	6821      	ldr	r1, [r4, #0]
 8008646:	05c8      	lsls	r0, r1, #23
 8008648:	d51a      	bpl.n	8008680 <_scanf_float+0x178>
 800864a:	9b02      	ldr	r3, [sp, #8]
 800864c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008650:	6021      	str	r1, [r4, #0]
 8008652:	f109 0901 	add.w	r9, r9, #1
 8008656:	b11b      	cbz	r3, 8008660 <_scanf_float+0x158>
 8008658:	3b01      	subs	r3, #1
 800865a:	3201      	adds	r2, #1
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	60a2      	str	r2, [r4, #8]
 8008660:	68a3      	ldr	r3, [r4, #8]
 8008662:	3b01      	subs	r3, #1
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	6123      	str	r3, [r4, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3b01      	subs	r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	607b      	str	r3, [r7, #4]
 8008674:	f340 8084 	ble.w	8008780 <_scanf_float+0x278>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	e766      	b.n	800854e <_scanf_float+0x46>
 8008680:	eb1a 0f05 	cmn.w	sl, r5
 8008684:	f47f af70 	bne.w	8008568 <_scanf_float+0x60>
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	f806 3b01 	strb.w	r3, [r6], #1
 8008694:	e7e4      	b.n	8008660 <_scanf_float+0x158>
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	0610      	lsls	r0, r2, #24
 800869a:	f57f af65 	bpl.w	8008568 <_scanf_float+0x60>
 800869e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a2:	e7f4      	b.n	800868e <_scanf_float+0x186>
 80086a4:	f1ba 0f00 	cmp.w	sl, #0
 80086a8:	d10e      	bne.n	80086c8 <_scanf_float+0x1c0>
 80086aa:	f1b9 0f00 	cmp.w	r9, #0
 80086ae:	d10e      	bne.n	80086ce <_scanf_float+0x1c6>
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086ba:	d108      	bne.n	80086ce <_scanf_float+0x1c6>
 80086bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	f04f 0a01 	mov.w	sl, #1
 80086c6:	e7e3      	b.n	8008690 <_scanf_float+0x188>
 80086c8:	f1ba 0f02 	cmp.w	sl, #2
 80086cc:	d055      	beq.n	800877a <_scanf_float+0x272>
 80086ce:	2d01      	cmp	r5, #1
 80086d0:	d002      	beq.n	80086d8 <_scanf_float+0x1d0>
 80086d2:	2d04      	cmp	r5, #4
 80086d4:	f47f af48 	bne.w	8008568 <_scanf_float+0x60>
 80086d8:	3501      	adds	r5, #1
 80086da:	b2ed      	uxtb	r5, r5
 80086dc:	e7d8      	b.n	8008690 <_scanf_float+0x188>
 80086de:	f1ba 0f01 	cmp.w	sl, #1
 80086e2:	f47f af41 	bne.w	8008568 <_scanf_float+0x60>
 80086e6:	f04f 0a02 	mov.w	sl, #2
 80086ea:	e7d1      	b.n	8008690 <_scanf_float+0x188>
 80086ec:	b97d      	cbnz	r5, 800870e <_scanf_float+0x206>
 80086ee:	f1b9 0f00 	cmp.w	r9, #0
 80086f2:	f47f af3c 	bne.w	800856e <_scanf_float+0x66>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008700:	f47f af39 	bne.w	8008576 <_scanf_float+0x6e>
 8008704:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008708:	6022      	str	r2, [r4, #0]
 800870a:	2501      	movs	r5, #1
 800870c:	e7c0      	b.n	8008690 <_scanf_float+0x188>
 800870e:	2d03      	cmp	r5, #3
 8008710:	d0e2      	beq.n	80086d8 <_scanf_float+0x1d0>
 8008712:	2d05      	cmp	r5, #5
 8008714:	e7de      	b.n	80086d4 <_scanf_float+0x1cc>
 8008716:	2d02      	cmp	r5, #2
 8008718:	f47f af26 	bne.w	8008568 <_scanf_float+0x60>
 800871c:	2503      	movs	r5, #3
 800871e:	e7b7      	b.n	8008690 <_scanf_float+0x188>
 8008720:	2d06      	cmp	r5, #6
 8008722:	f47f af21 	bne.w	8008568 <_scanf_float+0x60>
 8008726:	2507      	movs	r5, #7
 8008728:	e7b2      	b.n	8008690 <_scanf_float+0x188>
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	0591      	lsls	r1, r2, #22
 800872e:	f57f af1b 	bpl.w	8008568 <_scanf_float+0x60>
 8008732:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	f8cd 9004 	str.w	r9, [sp, #4]
 800873c:	e7a8      	b.n	8008690 <_scanf_float+0x188>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008744:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008748:	d006      	beq.n	8008758 <_scanf_float+0x250>
 800874a:	0550      	lsls	r0, r2, #21
 800874c:	f57f af0c 	bpl.w	8008568 <_scanf_float+0x60>
 8008750:	f1b9 0f00 	cmp.w	r9, #0
 8008754:	f43f af0f 	beq.w	8008576 <_scanf_float+0x6e>
 8008758:	0591      	lsls	r1, r2, #22
 800875a:	bf58      	it	pl
 800875c:	9901      	ldrpl	r1, [sp, #4]
 800875e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008762:	bf58      	it	pl
 8008764:	eba9 0101 	subpl.w	r1, r9, r1
 8008768:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800876c:	bf58      	it	pl
 800876e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	f04f 0900 	mov.w	r9, #0
 8008778:	e78a      	b.n	8008690 <_scanf_float+0x188>
 800877a:	f04f 0a03 	mov.w	sl, #3
 800877e:	e787      	b.n	8008690 <_scanf_float+0x188>
 8008780:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008784:	4639      	mov	r1, r7
 8008786:	4640      	mov	r0, r8
 8008788:	4798      	blx	r3
 800878a:	2800      	cmp	r0, #0
 800878c:	f43f aedf 	beq.w	800854e <_scanf_float+0x46>
 8008790:	e6ea      	b.n	8008568 <_scanf_float+0x60>
 8008792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800879a:	463a      	mov	r2, r7
 800879c:	4640      	mov	r0, r8
 800879e:	4798      	blx	r3
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	e6ec      	b.n	8008582 <_scanf_float+0x7a>
 80087a8:	1e6b      	subs	r3, r5, #1
 80087aa:	2b06      	cmp	r3, #6
 80087ac:	d825      	bhi.n	80087fa <_scanf_float+0x2f2>
 80087ae:	2d02      	cmp	r5, #2
 80087b0:	d836      	bhi.n	8008820 <_scanf_float+0x318>
 80087b2:	455e      	cmp	r6, fp
 80087b4:	f67f aee8 	bls.w	8008588 <_scanf_float+0x80>
 80087b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087c0:	463a      	mov	r2, r7
 80087c2:	4640      	mov	r0, r8
 80087c4:	4798      	blx	r3
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	e7f1      	b.n	80087b2 <_scanf_float+0x2aa>
 80087ce:	9802      	ldr	r0, [sp, #8]
 80087d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087d8:	9002      	str	r0, [sp, #8]
 80087da:	463a      	mov	r2, r7
 80087dc:	4640      	mov	r0, r8
 80087de:	4798      	blx	r3
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ea:	fa5f fa8a 	uxtb.w	sl, sl
 80087ee:	f1ba 0f02 	cmp.w	sl, #2
 80087f2:	d1ec      	bne.n	80087ce <_scanf_float+0x2c6>
 80087f4:	3d03      	subs	r5, #3
 80087f6:	b2ed      	uxtb	r5, r5
 80087f8:	1b76      	subs	r6, r6, r5
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	05da      	lsls	r2, r3, #23
 80087fe:	d52f      	bpl.n	8008860 <_scanf_float+0x358>
 8008800:	055b      	lsls	r3, r3, #21
 8008802:	d510      	bpl.n	8008826 <_scanf_float+0x31e>
 8008804:	455e      	cmp	r6, fp
 8008806:	f67f aebf 	bls.w	8008588 <_scanf_float+0x80>
 800880a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800880e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008812:	463a      	mov	r2, r7
 8008814:	4640      	mov	r0, r8
 8008816:	4798      	blx	r3
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	3b01      	subs	r3, #1
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	e7f1      	b.n	8008804 <_scanf_float+0x2fc>
 8008820:	46aa      	mov	sl, r5
 8008822:	9602      	str	r6, [sp, #8]
 8008824:	e7df      	b.n	80087e6 <_scanf_float+0x2de>
 8008826:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	2965      	cmp	r1, #101	; 0x65
 800882e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008832:	f106 35ff 	add.w	r5, r6, #4294967295
 8008836:	6123      	str	r3, [r4, #16]
 8008838:	d00c      	beq.n	8008854 <_scanf_float+0x34c>
 800883a:	2945      	cmp	r1, #69	; 0x45
 800883c:	d00a      	beq.n	8008854 <_scanf_float+0x34c>
 800883e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008842:	463a      	mov	r2, r7
 8008844:	4640      	mov	r0, r8
 8008846:	4798      	blx	r3
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800884e:	3b01      	subs	r3, #1
 8008850:	1eb5      	subs	r5, r6, #2
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008858:	463a      	mov	r2, r7
 800885a:	4640      	mov	r0, r8
 800885c:	4798      	blx	r3
 800885e:	462e      	mov	r6, r5
 8008860:	6825      	ldr	r5, [r4, #0]
 8008862:	f015 0510 	ands.w	r5, r5, #16
 8008866:	d159      	bne.n	800891c <_scanf_float+0x414>
 8008868:	7035      	strb	r5, [r6, #0]
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008874:	d11b      	bne.n	80088ae <_scanf_float+0x3a6>
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	454b      	cmp	r3, r9
 800887a:	eba3 0209 	sub.w	r2, r3, r9
 800887e:	d123      	bne.n	80088c8 <_scanf_float+0x3c0>
 8008880:	2200      	movs	r2, #0
 8008882:	4659      	mov	r1, fp
 8008884:	4640      	mov	r0, r8
 8008886:	f000 fea1 	bl	80095cc <_strtod_r>
 800888a:	6822      	ldr	r2, [r4, #0]
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	f012 0f02 	tst.w	r2, #2
 8008892:	ec57 6b10 	vmov	r6, r7, d0
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	d021      	beq.n	80088de <_scanf_float+0x3d6>
 800889a:	9903      	ldr	r1, [sp, #12]
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	600a      	str	r2, [r1, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	e9c3 6700 	strd	r6, r7, [r3]
 80088a6:	68e3      	ldr	r3, [r4, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60e3      	str	r3, [r4, #12]
 80088ac:	e66d      	b.n	800858a <_scanf_float+0x82>
 80088ae:	9b04      	ldr	r3, [sp, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0e5      	beq.n	8008880 <_scanf_float+0x378>
 80088b4:	9905      	ldr	r1, [sp, #20]
 80088b6:	230a      	movs	r3, #10
 80088b8:	462a      	mov	r2, r5
 80088ba:	3101      	adds	r1, #1
 80088bc:	4640      	mov	r0, r8
 80088be:	f000 ff0d 	bl	80096dc <_strtol_r>
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	9e05      	ldr	r6, [sp, #20]
 80088c6:	1ac2      	subs	r2, r0, r3
 80088c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088cc:	429e      	cmp	r6, r3
 80088ce:	bf28      	it	cs
 80088d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088d4:	4912      	ldr	r1, [pc, #72]	; (8008920 <_scanf_float+0x418>)
 80088d6:	4630      	mov	r0, r6
 80088d8:	f000 f82c 	bl	8008934 <siprintf>
 80088dc:	e7d0      	b.n	8008880 <_scanf_float+0x378>
 80088de:	9903      	ldr	r1, [sp, #12]
 80088e0:	f012 0f04 	tst.w	r2, #4
 80088e4:	f103 0204 	add.w	r2, r3, #4
 80088e8:	600a      	str	r2, [r1, #0]
 80088ea:	d1d9      	bne.n	80088a0 <_scanf_float+0x398>
 80088ec:	f8d3 8000 	ldr.w	r8, [r3]
 80088f0:	ee10 2a10 	vmov	r2, s0
 80088f4:	ee10 0a10 	vmov	r0, s0
 80088f8:	463b      	mov	r3, r7
 80088fa:	4639      	mov	r1, r7
 80088fc:	f7f8 f916 	bl	8000b2c <__aeabi_dcmpun>
 8008900:	b128      	cbz	r0, 800890e <_scanf_float+0x406>
 8008902:	4808      	ldr	r0, [pc, #32]	; (8008924 <_scanf_float+0x41c>)
 8008904:	f000 f810 	bl	8008928 <nanf>
 8008908:	ed88 0a00 	vstr	s0, [r8]
 800890c:	e7cb      	b.n	80088a6 <_scanf_float+0x39e>
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f8 f969 	bl	8000be8 <__aeabi_d2f>
 8008916:	f8c8 0000 	str.w	r0, [r8]
 800891a:	e7c4      	b.n	80088a6 <_scanf_float+0x39e>
 800891c:	2500      	movs	r5, #0
 800891e:	e634      	b.n	800858a <_scanf_float+0x82>
 8008920:	0800ffec 	.word	0x0800ffec
 8008924:	0800ff43 	.word	0x0800ff43

08008928 <nanf>:
 8008928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008930 <nanf+0x8>
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	7fc00000 	.word	0x7fc00000

08008934 <siprintf>:
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b500      	push	{lr}
 8008938:	b09c      	sub	sp, #112	; 0x70
 800893a:	ab1d      	add	r3, sp, #116	; 0x74
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	9006      	str	r0, [sp, #24]
 8008940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008944:	4809      	ldr	r0, [pc, #36]	; (800896c <siprintf+0x38>)
 8008946:	9107      	str	r1, [sp, #28]
 8008948:	9104      	str	r1, [sp, #16]
 800894a:	4909      	ldr	r1, [pc, #36]	; (8008970 <siprintf+0x3c>)
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	a902      	add	r1, sp, #8
 8008958:	f002 feec 	bl	800b734 <_svfiprintf_r>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	b01c      	add	sp, #112	; 0x70
 8008964:	f85d eb04 	ldr.w	lr, [sp], #4
 8008968:	b003      	add	sp, #12
 800896a:	4770      	bx	lr
 800896c:	200000a8 	.word	0x200000a8
 8008970:	ffff0208 	.word	0xffff0208

08008974 <strcpy>:
 8008974:	4603      	mov	r3, r0
 8008976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800897a:	f803 2b01 	strb.w	r2, [r3], #1
 800897e:	2a00      	cmp	r2, #0
 8008980:	d1f9      	bne.n	8008976 <strcpy+0x2>
 8008982:	4770      	bx	lr

08008984 <sulp>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	460d      	mov	r5, r1
 800898a:	ec45 4b10 	vmov	d0, r4, r5
 800898e:	4616      	mov	r6, r2
 8008990:	f002 fc2e 	bl	800b1f0 <__ulp>
 8008994:	ec51 0b10 	vmov	r0, r1, d0
 8008998:	b17e      	cbz	r6, 80089ba <sulp+0x36>
 800899a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800899e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dd09      	ble.n	80089ba <sulp+0x36>
 80089a6:	051b      	lsls	r3, r3, #20
 80089a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089ac:	2400      	movs	r4, #0
 80089ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089b2:	4622      	mov	r2, r4
 80089b4:	462b      	mov	r3, r5
 80089b6:	f7f7 fe1f 	bl	80005f8 <__aeabi_dmul>
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_strtod_l>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	ed2d 8b02 	vpush	{d8}
 80089c8:	b09d      	sub	sp, #116	; 0x74
 80089ca:	461f      	mov	r7, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	9318      	str	r3, [sp, #96]	; 0x60
 80089d0:	4ba2      	ldr	r3, [pc, #648]	; (8008c5c <_strtod_l+0x29c>)
 80089d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	9305      	str	r3, [sp, #20]
 80089d8:	4604      	mov	r4, r0
 80089da:	4618      	mov	r0, r3
 80089dc:	4688      	mov	r8, r1
 80089de:	f7f7 fbf7 	bl	80001d0 <strlen>
 80089e2:	f04f 0a00 	mov.w	sl, #0
 80089e6:	4605      	mov	r5, r0
 80089e8:	f04f 0b00 	mov.w	fp, #0
 80089ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80089f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	2a2b      	cmp	r2, #43	; 0x2b
 80089f6:	d04e      	beq.n	8008a96 <_strtod_l+0xd6>
 80089f8:	d83b      	bhi.n	8008a72 <_strtod_l+0xb2>
 80089fa:	2a0d      	cmp	r2, #13
 80089fc:	d834      	bhi.n	8008a68 <_strtod_l+0xa8>
 80089fe:	2a08      	cmp	r2, #8
 8008a00:	d834      	bhi.n	8008a6c <_strtod_l+0xac>
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	d03e      	beq.n	8008a84 <_strtod_l+0xc4>
 8008a06:	2300      	movs	r3, #0
 8008a08:	930a      	str	r3, [sp, #40]	; 0x28
 8008a0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a0c:	7833      	ldrb	r3, [r6, #0]
 8008a0e:	2b30      	cmp	r3, #48	; 0x30
 8008a10:	f040 80b0 	bne.w	8008b74 <_strtod_l+0x1b4>
 8008a14:	7873      	ldrb	r3, [r6, #1]
 8008a16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a1a:	2b58      	cmp	r3, #88	; 0x58
 8008a1c:	d168      	bne.n	8008af0 <_strtod_l+0x130>
 8008a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	ab18      	add	r3, sp, #96	; 0x60
 8008a24:	9702      	str	r7, [sp, #8]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4a8d      	ldr	r2, [pc, #564]	; (8008c60 <_strtod_l+0x2a0>)
 8008a2a:	ab19      	add	r3, sp, #100	; 0x64
 8008a2c:	a917      	add	r1, sp, #92	; 0x5c
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f001 fd38 	bl	800a4a4 <__gethex>
 8008a34:	f010 0707 	ands.w	r7, r0, #7
 8008a38:	4605      	mov	r5, r0
 8008a3a:	d005      	beq.n	8008a48 <_strtod_l+0x88>
 8008a3c:	2f06      	cmp	r7, #6
 8008a3e:	d12c      	bne.n	8008a9a <_strtod_l+0xda>
 8008a40:	3601      	adds	r6, #1
 8008a42:	2300      	movs	r3, #0
 8008a44:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a46:	930a      	str	r3, [sp, #40]	; 0x28
 8008a48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f040 8590 	bne.w	8009570 <_strtod_l+0xbb0>
 8008a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a52:	b1eb      	cbz	r3, 8008a90 <_strtod_l+0xd0>
 8008a54:	4652      	mov	r2, sl
 8008a56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a5a:	ec43 2b10 	vmov	d0, r2, r3
 8008a5e:	b01d      	add	sp, #116	; 0x74
 8008a60:	ecbd 8b02 	vpop	{d8}
 8008a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a68:	2a20      	cmp	r2, #32
 8008a6a:	d1cc      	bne.n	8008a06 <_strtod_l+0x46>
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a70:	e7be      	b.n	80089f0 <_strtod_l+0x30>
 8008a72:	2a2d      	cmp	r2, #45	; 0x2d
 8008a74:	d1c7      	bne.n	8008a06 <_strtod_l+0x46>
 8008a76:	2201      	movs	r2, #1
 8008a78:	920a      	str	r2, [sp, #40]	; 0x28
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1c2      	bne.n	8008a0a <_strtod_l+0x4a>
 8008a84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f040 856e 	bne.w	800956c <_strtod_l+0xbac>
 8008a90:	4652      	mov	r2, sl
 8008a92:	465b      	mov	r3, fp
 8008a94:	e7e1      	b.n	8008a5a <_strtod_l+0x9a>
 8008a96:	2200      	movs	r2, #0
 8008a98:	e7ee      	b.n	8008a78 <_strtod_l+0xb8>
 8008a9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a9c:	b13a      	cbz	r2, 8008aae <_strtod_l+0xee>
 8008a9e:	2135      	movs	r1, #53	; 0x35
 8008aa0:	a81a      	add	r0, sp, #104	; 0x68
 8008aa2:	f002 fcb0 	bl	800b406 <__copybits>
 8008aa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f002 f86f 	bl	800ab8c <_Bfree>
 8008aae:	3f01      	subs	r7, #1
 8008ab0:	2f04      	cmp	r7, #4
 8008ab2:	d806      	bhi.n	8008ac2 <_strtod_l+0x102>
 8008ab4:	e8df f007 	tbb	[pc, r7]
 8008ab8:	1714030a 	.word	0x1714030a
 8008abc:	0a          	.byte	0x0a
 8008abd:	00          	.byte	0x00
 8008abe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008ac2:	0728      	lsls	r0, r5, #28
 8008ac4:	d5c0      	bpl.n	8008a48 <_strtod_l+0x88>
 8008ac6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008aca:	e7bd      	b.n	8008a48 <_strtod_l+0x88>
 8008acc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008ad0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ad6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ada:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ade:	e7f0      	b.n	8008ac2 <_strtod_l+0x102>
 8008ae0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c64 <_strtod_l+0x2a4>
 8008ae4:	e7ed      	b.n	8008ac2 <_strtod_l+0x102>
 8008ae6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008aea:	f04f 3aff 	mov.w	sl, #4294967295
 8008aee:	e7e8      	b.n	8008ac2 <_strtod_l+0x102>
 8008af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008af6:	785b      	ldrb	r3, [r3, #1]
 8008af8:	2b30      	cmp	r3, #48	; 0x30
 8008afa:	d0f9      	beq.n	8008af0 <_strtod_l+0x130>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0a3      	beq.n	8008a48 <_strtod_l+0x88>
 8008b00:	2301      	movs	r3, #1
 8008b02:	f04f 0900 	mov.w	r9, #0
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b0a:	9308      	str	r3, [sp, #32]
 8008b0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b10:	464f      	mov	r7, r9
 8008b12:	220a      	movs	r2, #10
 8008b14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b16:	7806      	ldrb	r6, [r0, #0]
 8008b18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b1c:	b2d9      	uxtb	r1, r3
 8008b1e:	2909      	cmp	r1, #9
 8008b20:	d92a      	bls.n	8008b78 <_strtod_l+0x1b8>
 8008b22:	9905      	ldr	r1, [sp, #20]
 8008b24:	462a      	mov	r2, r5
 8008b26:	f002 ff1f 	bl	800b968 <strncmp>
 8008b2a:	b398      	cbz	r0, 8008b94 <_strtod_l+0x1d4>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	4632      	mov	r2, r6
 8008b30:	463d      	mov	r5, r7
 8008b32:	9005      	str	r0, [sp, #20]
 8008b34:	4603      	mov	r3, r0
 8008b36:	2a65      	cmp	r2, #101	; 0x65
 8008b38:	d001      	beq.n	8008b3e <_strtod_l+0x17e>
 8008b3a:	2a45      	cmp	r2, #69	; 0x45
 8008b3c:	d118      	bne.n	8008b70 <_strtod_l+0x1b0>
 8008b3e:	b91d      	cbnz	r5, 8008b48 <_strtod_l+0x188>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	4302      	orrs	r2, r0
 8008b44:	d09e      	beq.n	8008a84 <_strtod_l+0xc4>
 8008b46:	2500      	movs	r5, #0
 8008b48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b4c:	f108 0201 	add.w	r2, r8, #1
 8008b50:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b56:	2a2b      	cmp	r2, #43	; 0x2b
 8008b58:	d075      	beq.n	8008c46 <_strtod_l+0x286>
 8008b5a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b5c:	d07b      	beq.n	8008c56 <_strtod_l+0x296>
 8008b5e:	f04f 0c00 	mov.w	ip, #0
 8008b62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b66:	2909      	cmp	r1, #9
 8008b68:	f240 8082 	bls.w	8008c70 <_strtod_l+0x2b0>
 8008b6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b70:	2600      	movs	r6, #0
 8008b72:	e09d      	b.n	8008cb0 <_strtod_l+0x2f0>
 8008b74:	2300      	movs	r3, #0
 8008b76:	e7c4      	b.n	8008b02 <_strtod_l+0x142>
 8008b78:	2f08      	cmp	r7, #8
 8008b7a:	bfd8      	it	le
 8008b7c:	9907      	ldrle	r1, [sp, #28]
 8008b7e:	f100 0001 	add.w	r0, r0, #1
 8008b82:	bfda      	itte	le
 8008b84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b88:	9307      	strle	r3, [sp, #28]
 8008b8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b8e:	3701      	adds	r7, #1
 8008b90:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b92:	e7bf      	b.n	8008b14 <_strtod_l+0x154>
 8008b94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b96:	195a      	adds	r2, r3, r5
 8008b98:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b9a:	5d5a      	ldrb	r2, [r3, r5]
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	d037      	beq.n	8008c10 <_strtod_l+0x250>
 8008ba0:	9005      	str	r0, [sp, #20]
 8008ba2:	463d      	mov	r5, r7
 8008ba4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ba8:	2b09      	cmp	r3, #9
 8008baa:	d912      	bls.n	8008bd2 <_strtod_l+0x212>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e7c2      	b.n	8008b36 <_strtod_l+0x176>
 8008bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bb6:	785a      	ldrb	r2, [r3, #1]
 8008bb8:	3001      	adds	r0, #1
 8008bba:	2a30      	cmp	r2, #48	; 0x30
 8008bbc:	d0f8      	beq.n	8008bb0 <_strtod_l+0x1f0>
 8008bbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	f200 84d9 	bhi.w	800957a <_strtod_l+0xbba>
 8008bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bca:	9005      	str	r0, [sp, #20]
 8008bcc:	2000      	movs	r0, #0
 8008bce:	9308      	str	r3, [sp, #32]
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	3a30      	subs	r2, #48	; 0x30
 8008bd4:	f100 0301 	add.w	r3, r0, #1
 8008bd8:	d014      	beq.n	8008c04 <_strtod_l+0x244>
 8008bda:	9905      	ldr	r1, [sp, #20]
 8008bdc:	4419      	add	r1, r3
 8008bde:	9105      	str	r1, [sp, #20]
 8008be0:	462b      	mov	r3, r5
 8008be2:	eb00 0e05 	add.w	lr, r0, r5
 8008be6:	210a      	movs	r1, #10
 8008be8:	4573      	cmp	r3, lr
 8008bea:	d113      	bne.n	8008c14 <_strtod_l+0x254>
 8008bec:	182b      	adds	r3, r5, r0
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	f105 0501 	add.w	r5, r5, #1
 8008bf4:	4405      	add	r5, r0
 8008bf6:	dc1c      	bgt.n	8008c32 <_strtod_l+0x272>
 8008bf8:	9907      	ldr	r1, [sp, #28]
 8008bfa:	230a      	movs	r3, #10
 8008bfc:	fb03 2301 	mla	r3, r3, r1, r2
 8008c00:	9307      	str	r3, [sp, #28]
 8008c02:	2300      	movs	r3, #0
 8008c04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c06:	1c51      	adds	r1, r2, #1
 8008c08:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c0a:	7852      	ldrb	r2, [r2, #1]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	e7c9      	b.n	8008ba4 <_strtod_l+0x1e4>
 8008c10:	4638      	mov	r0, r7
 8008c12:	e7d2      	b.n	8008bba <_strtod_l+0x1fa>
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	dc04      	bgt.n	8008c22 <_strtod_l+0x262>
 8008c18:	9e07      	ldr	r6, [sp, #28]
 8008c1a:	434e      	muls	r6, r1
 8008c1c:	9607      	str	r6, [sp, #28]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	e7e2      	b.n	8008be8 <_strtod_l+0x228>
 8008c22:	f103 0c01 	add.w	ip, r3, #1
 8008c26:	f1bc 0f10 	cmp.w	ip, #16
 8008c2a:	bfd8      	it	le
 8008c2c:	fb01 f909 	mulle.w	r9, r1, r9
 8008c30:	e7f5      	b.n	8008c1e <_strtod_l+0x25e>
 8008c32:	2d10      	cmp	r5, #16
 8008c34:	bfdc      	itt	le
 8008c36:	230a      	movle	r3, #10
 8008c38:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c3c:	e7e1      	b.n	8008c02 <_strtod_l+0x242>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	2301      	movs	r3, #1
 8008c44:	e77c      	b.n	8008b40 <_strtod_l+0x180>
 8008c46:	f04f 0c00 	mov.w	ip, #0
 8008c4a:	f108 0202 	add.w	r2, r8, #2
 8008c4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c54:	e785      	b.n	8008b62 <_strtod_l+0x1a2>
 8008c56:	f04f 0c01 	mov.w	ip, #1
 8008c5a:	e7f6      	b.n	8008c4a <_strtod_l+0x28a>
 8008c5c:	08010240 	.word	0x08010240
 8008c60:	0800fff4 	.word	0x0800fff4
 8008c64:	7ff00000 	.word	0x7ff00000
 8008c68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c6a:	1c51      	adds	r1, r2, #1
 8008c6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c6e:	7852      	ldrb	r2, [r2, #1]
 8008c70:	2a30      	cmp	r2, #48	; 0x30
 8008c72:	d0f9      	beq.n	8008c68 <_strtod_l+0x2a8>
 8008c74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c78:	2908      	cmp	r1, #8
 8008c7a:	f63f af79 	bhi.w	8008b70 <_strtod_l+0x1b0>
 8008c7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c84:	9206      	str	r2, [sp, #24]
 8008c86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c88:	1c51      	adds	r1, r2, #1
 8008c8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c8c:	7852      	ldrb	r2, [r2, #1]
 8008c8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c92:	2e09      	cmp	r6, #9
 8008c94:	d937      	bls.n	8008d06 <_strtod_l+0x346>
 8008c96:	9e06      	ldr	r6, [sp, #24]
 8008c98:	1b89      	subs	r1, r1, r6
 8008c9a:	2908      	cmp	r1, #8
 8008c9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ca0:	dc02      	bgt.n	8008ca8 <_strtod_l+0x2e8>
 8008ca2:	4576      	cmp	r6, lr
 8008ca4:	bfa8      	it	ge
 8008ca6:	4676      	movge	r6, lr
 8008ca8:	f1bc 0f00 	cmp.w	ip, #0
 8008cac:	d000      	beq.n	8008cb0 <_strtod_l+0x2f0>
 8008cae:	4276      	negs	r6, r6
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	d14d      	bne.n	8008d50 <_strtod_l+0x390>
 8008cb4:	9904      	ldr	r1, [sp, #16]
 8008cb6:	4301      	orrs	r1, r0
 8008cb8:	f47f aec6 	bne.w	8008a48 <_strtod_l+0x88>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f aee1 	bne.w	8008a84 <_strtod_l+0xc4>
 8008cc2:	2a69      	cmp	r2, #105	; 0x69
 8008cc4:	d027      	beq.n	8008d16 <_strtod_l+0x356>
 8008cc6:	dc24      	bgt.n	8008d12 <_strtod_l+0x352>
 8008cc8:	2a49      	cmp	r2, #73	; 0x49
 8008cca:	d024      	beq.n	8008d16 <_strtod_l+0x356>
 8008ccc:	2a4e      	cmp	r2, #78	; 0x4e
 8008cce:	f47f aed9 	bne.w	8008a84 <_strtod_l+0xc4>
 8008cd2:	499f      	ldr	r1, [pc, #636]	; (8008f50 <_strtod_l+0x590>)
 8008cd4:	a817      	add	r0, sp, #92	; 0x5c
 8008cd6:	f001 fe3d 	bl	800a954 <__match>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f43f aed2 	beq.w	8008a84 <_strtod_l+0xc4>
 8008ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b28      	cmp	r3, #40	; 0x28
 8008ce6:	d12d      	bne.n	8008d44 <_strtod_l+0x384>
 8008ce8:	499a      	ldr	r1, [pc, #616]	; (8008f54 <_strtod_l+0x594>)
 8008cea:	aa1a      	add	r2, sp, #104	; 0x68
 8008cec:	a817      	add	r0, sp, #92	; 0x5c
 8008cee:	f001 fe45 	bl	800a97c <__hexnan>
 8008cf2:	2805      	cmp	r0, #5
 8008cf4:	d126      	bne.n	8008d44 <_strtod_l+0x384>
 8008cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cf8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008cfc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d04:	e6a0      	b.n	8008a48 <_strtod_l+0x88>
 8008d06:	210a      	movs	r1, #10
 8008d08:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d10:	e7b9      	b.n	8008c86 <_strtod_l+0x2c6>
 8008d12:	2a6e      	cmp	r2, #110	; 0x6e
 8008d14:	e7db      	b.n	8008cce <_strtod_l+0x30e>
 8008d16:	4990      	ldr	r1, [pc, #576]	; (8008f58 <_strtod_l+0x598>)
 8008d18:	a817      	add	r0, sp, #92	; 0x5c
 8008d1a:	f001 fe1b 	bl	800a954 <__match>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	f43f aeb0 	beq.w	8008a84 <_strtod_l+0xc4>
 8008d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d26:	498d      	ldr	r1, [pc, #564]	; (8008f5c <_strtod_l+0x59c>)
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	a817      	add	r0, sp, #92	; 0x5c
 8008d2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d2e:	f001 fe11 	bl	800a954 <__match>
 8008d32:	b910      	cbnz	r0, 8008d3a <_strtod_l+0x37a>
 8008d34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d36:	3301      	adds	r3, #1
 8008d38:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f6c <_strtod_l+0x5ac>
 8008d3e:	f04f 0a00 	mov.w	sl, #0
 8008d42:	e681      	b.n	8008a48 <_strtod_l+0x88>
 8008d44:	4886      	ldr	r0, [pc, #536]	; (8008f60 <_strtod_l+0x5a0>)
 8008d46:	f002 fdf7 	bl	800b938 <nan>
 8008d4a:	ec5b ab10 	vmov	sl, fp, d0
 8008d4e:	e67b      	b.n	8008a48 <_strtod_l+0x88>
 8008d50:	9b05      	ldr	r3, [sp, #20]
 8008d52:	9807      	ldr	r0, [sp, #28]
 8008d54:	1af3      	subs	r3, r6, r3
 8008d56:	2f00      	cmp	r7, #0
 8008d58:	bf08      	it	eq
 8008d5a:	462f      	moveq	r7, r5
 8008d5c:	2d10      	cmp	r5, #16
 8008d5e:	9306      	str	r3, [sp, #24]
 8008d60:	46a8      	mov	r8, r5
 8008d62:	bfa8      	it	ge
 8008d64:	f04f 0810 	movge.w	r8, #16
 8008d68:	f7f7 fbcc 	bl	8000504 <__aeabi_ui2d>
 8008d6c:	2d09      	cmp	r5, #9
 8008d6e:	4682      	mov	sl, r0
 8008d70:	468b      	mov	fp, r1
 8008d72:	dd13      	ble.n	8008d9c <_strtod_l+0x3dc>
 8008d74:	4b7b      	ldr	r3, [pc, #492]	; (8008f64 <_strtod_l+0x5a4>)
 8008d76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	4682      	mov	sl, r0
 8008d84:	4648      	mov	r0, r9
 8008d86:	468b      	mov	fp, r1
 8008d88:	f7f7 fbbc 	bl	8000504 <__aeabi_ui2d>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4650      	mov	r0, sl
 8008d92:	4659      	mov	r1, fp
 8008d94:	f7f7 fa7a 	bl	800028c <__adddf3>
 8008d98:	4682      	mov	sl, r0
 8008d9a:	468b      	mov	fp, r1
 8008d9c:	2d0f      	cmp	r5, #15
 8008d9e:	dc38      	bgt.n	8008e12 <_strtod_l+0x452>
 8008da0:	9b06      	ldr	r3, [sp, #24]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f43f ae50 	beq.w	8008a48 <_strtod_l+0x88>
 8008da8:	dd24      	ble.n	8008df4 <_strtod_l+0x434>
 8008daa:	2b16      	cmp	r3, #22
 8008dac:	dc0b      	bgt.n	8008dc6 <_strtod_l+0x406>
 8008dae:	496d      	ldr	r1, [pc, #436]	; (8008f64 <_strtod_l+0x5a4>)
 8008db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db8:	4652      	mov	r2, sl
 8008dba:	465b      	mov	r3, fp
 8008dbc:	f7f7 fc1c 	bl	80005f8 <__aeabi_dmul>
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	468b      	mov	fp, r1
 8008dc4:	e640      	b.n	8008a48 <_strtod_l+0x88>
 8008dc6:	9a06      	ldr	r2, [sp, #24]
 8008dc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	db20      	blt.n	8008e12 <_strtod_l+0x452>
 8008dd0:	4c64      	ldr	r4, [pc, #400]	; (8008f64 <_strtod_l+0x5a4>)
 8008dd2:	f1c5 050f 	rsb	r5, r5, #15
 8008dd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dda:	4652      	mov	r2, sl
 8008ddc:	465b      	mov	r3, fp
 8008dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de2:	f7f7 fc09 	bl	80005f8 <__aeabi_dmul>
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	1b5d      	subs	r5, r3, r5
 8008dea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008df2:	e7e3      	b.n	8008dbc <_strtod_l+0x3fc>
 8008df4:	9b06      	ldr	r3, [sp, #24]
 8008df6:	3316      	adds	r3, #22
 8008df8:	db0b      	blt.n	8008e12 <_strtod_l+0x452>
 8008dfa:	9b05      	ldr	r3, [sp, #20]
 8008dfc:	1b9e      	subs	r6, r3, r6
 8008dfe:	4b59      	ldr	r3, [pc, #356]	; (8008f64 <_strtod_l+0x5a4>)
 8008e00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	f7f7 fd1e 	bl	800084c <__aeabi_ddiv>
 8008e10:	e7d6      	b.n	8008dc0 <_strtod_l+0x400>
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	eba5 0808 	sub.w	r8, r5, r8
 8008e18:	4498      	add	r8, r3
 8008e1a:	f1b8 0f00 	cmp.w	r8, #0
 8008e1e:	dd74      	ble.n	8008f0a <_strtod_l+0x54a>
 8008e20:	f018 030f 	ands.w	r3, r8, #15
 8008e24:	d00a      	beq.n	8008e3c <_strtod_l+0x47c>
 8008e26:	494f      	ldr	r1, [pc, #316]	; (8008f64 <_strtod_l+0x5a4>)
 8008e28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	465b      	mov	r3, fp
 8008e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e34:	f7f7 fbe0 	bl	80005f8 <__aeabi_dmul>
 8008e38:	4682      	mov	sl, r0
 8008e3a:	468b      	mov	fp, r1
 8008e3c:	f038 080f 	bics.w	r8, r8, #15
 8008e40:	d04f      	beq.n	8008ee2 <_strtod_l+0x522>
 8008e42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e46:	dd22      	ble.n	8008e8e <_strtod_l+0x4ce>
 8008e48:	2500      	movs	r5, #0
 8008e4a:	462e      	mov	r6, r5
 8008e4c:	9507      	str	r5, [sp, #28]
 8008e4e:	9505      	str	r5, [sp, #20]
 8008e50:	2322      	movs	r3, #34	; 0x22
 8008e52:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f6c <_strtod_l+0x5ac>
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	f04f 0a00 	mov.w	sl, #0
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f43f adf2 	beq.w	8008a48 <_strtod_l+0x88>
 8008e64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e66:	4620      	mov	r0, r4
 8008e68:	f001 fe90 	bl	800ab8c <_Bfree>
 8008e6c:	9905      	ldr	r1, [sp, #20]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f001 fe8c 	bl	800ab8c <_Bfree>
 8008e74:	4631      	mov	r1, r6
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 fe88 	bl	800ab8c <_Bfree>
 8008e7c:	9907      	ldr	r1, [sp, #28]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f001 fe84 	bl	800ab8c <_Bfree>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4620      	mov	r0, r4
 8008e88:	f001 fe80 	bl	800ab8c <_Bfree>
 8008e8c:	e5dc      	b.n	8008a48 <_strtod_l+0x88>
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <_strtod_l+0x5a8>)
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	2300      	movs	r3, #0
 8008e94:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e98:	4650      	mov	r0, sl
 8008e9a:	4659      	mov	r1, fp
 8008e9c:	4699      	mov	r9, r3
 8008e9e:	f1b8 0f01 	cmp.w	r8, #1
 8008ea2:	dc21      	bgt.n	8008ee8 <_strtod_l+0x528>
 8008ea4:	b10b      	cbz	r3, 8008eaa <_strtod_l+0x4ea>
 8008ea6:	4682      	mov	sl, r0
 8008ea8:	468b      	mov	fp, r1
 8008eaa:	4b2f      	ldr	r3, [pc, #188]	; (8008f68 <_strtod_l+0x5a8>)
 8008eac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008eb0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008eb4:	4652      	mov	r2, sl
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ebc:	f7f7 fb9c 	bl	80005f8 <__aeabi_dmul>
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	; (8008f6c <_strtod_l+0x5ac>)
 8008ec2:	460a      	mov	r2, r1
 8008ec4:	400b      	ands	r3, r1
 8008ec6:	492a      	ldr	r1, [pc, #168]	; (8008f70 <_strtod_l+0x5b0>)
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	4682      	mov	sl, r0
 8008ecc:	d8bc      	bhi.n	8008e48 <_strtod_l+0x488>
 8008ece:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ed2:	428b      	cmp	r3, r1
 8008ed4:	bf86      	itte	hi
 8008ed6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f74 <_strtod_l+0x5b4>
 8008eda:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ede:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	e084      	b.n	8008ff2 <_strtod_l+0x632>
 8008ee8:	f018 0f01 	tst.w	r8, #1
 8008eec:	d005      	beq.n	8008efa <_strtod_l+0x53a>
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	9a04      	ldr	r2, [sp, #16]
 8008efc:	3208      	adds	r2, #8
 8008efe:	f109 0901 	add.w	r9, r9, #1
 8008f02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f06:	9204      	str	r2, [sp, #16]
 8008f08:	e7c9      	b.n	8008e9e <_strtod_l+0x4de>
 8008f0a:	d0ea      	beq.n	8008ee2 <_strtod_l+0x522>
 8008f0c:	f1c8 0800 	rsb	r8, r8, #0
 8008f10:	f018 020f 	ands.w	r2, r8, #15
 8008f14:	d00a      	beq.n	8008f2c <_strtod_l+0x56c>
 8008f16:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <_strtod_l+0x5a4>)
 8008f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f7f7 fc92 	bl	800084c <__aeabi_ddiv>
 8008f28:	4682      	mov	sl, r0
 8008f2a:	468b      	mov	fp, r1
 8008f2c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f30:	d0d7      	beq.n	8008ee2 <_strtod_l+0x522>
 8008f32:	f1b8 0f1f 	cmp.w	r8, #31
 8008f36:	dd1f      	ble.n	8008f78 <_strtod_l+0x5b8>
 8008f38:	2500      	movs	r5, #0
 8008f3a:	462e      	mov	r6, r5
 8008f3c:	9507      	str	r5, [sp, #28]
 8008f3e:	9505      	str	r5, [sp, #20]
 8008f40:	2322      	movs	r3, #34	; 0x22
 8008f42:	f04f 0a00 	mov.w	sl, #0
 8008f46:	f04f 0b00 	mov.w	fp, #0
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	e786      	b.n	8008e5c <_strtod_l+0x49c>
 8008f4e:	bf00      	nop
 8008f50:	0800ffc5 	.word	0x0800ffc5
 8008f54:	08010008 	.word	0x08010008
 8008f58:	0800ffbd 	.word	0x0800ffbd
 8008f5c:	0801014c 	.word	0x0801014c
 8008f60:	0800ff43 	.word	0x0800ff43
 8008f64:	080102d8 	.word	0x080102d8
 8008f68:	080102b0 	.word	0x080102b0
 8008f6c:	7ff00000 	.word	0x7ff00000
 8008f70:	7ca00000 	.word	0x7ca00000
 8008f74:	7fefffff 	.word	0x7fefffff
 8008f78:	f018 0310 	ands.w	r3, r8, #16
 8008f7c:	bf18      	it	ne
 8008f7e:	236a      	movne	r3, #106	; 0x6a
 8008f80:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009330 <_strtod_l+0x970>
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	4650      	mov	r0, sl
 8008f88:	4659      	mov	r1, fp
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f018 0f01 	tst.w	r8, #1
 8008f90:	d004      	beq.n	8008f9c <_strtod_l+0x5dc>
 8008f92:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f96:	f7f7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008fa0:	f109 0908 	add.w	r9, r9, #8
 8008fa4:	d1f2      	bne.n	8008f8c <_strtod_l+0x5cc>
 8008fa6:	b10b      	cbz	r3, 8008fac <_strtod_l+0x5ec>
 8008fa8:	4682      	mov	sl, r0
 8008faa:	468b      	mov	fp, r1
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	b1c3      	cbz	r3, 8008fe2 <_strtod_l+0x622>
 8008fb0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	4659      	mov	r1, fp
 8008fbc:	dd11      	ble.n	8008fe2 <_strtod_l+0x622>
 8008fbe:	2b1f      	cmp	r3, #31
 8008fc0:	f340 8124 	ble.w	800920c <_strtod_l+0x84c>
 8008fc4:	2b34      	cmp	r3, #52	; 0x34
 8008fc6:	bfde      	ittt	le
 8008fc8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fcc:	f04f 33ff 	movle.w	r3, #4294967295
 8008fd0:	fa03 f202 	lslle.w	r2, r3, r2
 8008fd4:	f04f 0a00 	mov.w	sl, #0
 8008fd8:	bfcc      	ite	gt
 8008fda:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008fde:	ea02 0b01 	andle.w	fp, r2, r1
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	f7f7 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d1a2      	bne.n	8008f38 <_strtod_l+0x578>
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	9908      	ldr	r1, [sp, #32]
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	463a      	mov	r2, r7
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f001 fe2d 	bl	800ac5c <__s2b>
 8009002:	9007      	str	r0, [sp, #28]
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f af1f 	beq.w	8008e48 <_strtod_l+0x488>
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	1b9e      	subs	r6, r3, r6
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb4      	ite	lt
 8009014:	4633      	movlt	r3, r6
 8009016:	2300      	movge	r3, #0
 8009018:	930c      	str	r3, [sp, #48]	; 0x30
 800901a:	9b06      	ldr	r3, [sp, #24]
 800901c:	2500      	movs	r5, #0
 800901e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009022:	9312      	str	r3, [sp, #72]	; 0x48
 8009024:	462e      	mov	r6, r5
 8009026:	9b07      	ldr	r3, [sp, #28]
 8009028:	4620      	mov	r0, r4
 800902a:	6859      	ldr	r1, [r3, #4]
 800902c:	f001 fd6e 	bl	800ab0c <_Balloc>
 8009030:	9005      	str	r0, [sp, #20]
 8009032:	2800      	cmp	r0, #0
 8009034:	f43f af0c 	beq.w	8008e50 <_strtod_l+0x490>
 8009038:	9b07      	ldr	r3, [sp, #28]
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	3202      	adds	r2, #2
 800903e:	f103 010c 	add.w	r1, r3, #12
 8009042:	0092      	lsls	r2, r2, #2
 8009044:	300c      	adds	r0, #12
 8009046:	f001 fd53 	bl	800aaf0 <memcpy>
 800904a:	ec4b ab10 	vmov	d0, sl, fp
 800904e:	aa1a      	add	r2, sp, #104	; 0x68
 8009050:	a919      	add	r1, sp, #100	; 0x64
 8009052:	4620      	mov	r0, r4
 8009054:	f002 f948 	bl	800b2e8 <__d2b>
 8009058:	ec4b ab18 	vmov	d8, sl, fp
 800905c:	9018      	str	r0, [sp, #96]	; 0x60
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f aef6 	beq.w	8008e50 <_strtod_l+0x490>
 8009064:	2101      	movs	r1, #1
 8009066:	4620      	mov	r0, r4
 8009068:	f001 fe92 	bl	800ad90 <__i2b>
 800906c:	4606      	mov	r6, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f aeee 	beq.w	8008e50 <_strtod_l+0x490>
 8009074:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009076:	9904      	ldr	r1, [sp, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	bfab      	itete	ge
 800907c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800907e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009080:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009082:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009086:	bfac      	ite	ge
 8009088:	eb03 0902 	addge.w	r9, r3, r2
 800908c:	1ad7      	sublt	r7, r2, r3
 800908e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009090:	eba3 0801 	sub.w	r8, r3, r1
 8009094:	4490      	add	r8, r2
 8009096:	4ba1      	ldr	r3, [pc, #644]	; (800931c <_strtod_l+0x95c>)
 8009098:	f108 38ff 	add.w	r8, r8, #4294967295
 800909c:	4598      	cmp	r8, r3
 800909e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090a2:	f280 80c7 	bge.w	8009234 <_strtod_l+0x874>
 80090a6:	eba3 0308 	sub.w	r3, r3, r8
 80090aa:	2b1f      	cmp	r3, #31
 80090ac:	eba2 0203 	sub.w	r2, r2, r3
 80090b0:	f04f 0101 	mov.w	r1, #1
 80090b4:	f300 80b1 	bgt.w	800921a <_strtod_l+0x85a>
 80090b8:	fa01 f303 	lsl.w	r3, r1, r3
 80090bc:	930d      	str	r3, [sp, #52]	; 0x34
 80090be:	2300      	movs	r3, #0
 80090c0:	9308      	str	r3, [sp, #32]
 80090c2:	eb09 0802 	add.w	r8, r9, r2
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	45c1      	cmp	r9, r8
 80090ca:	4417      	add	r7, r2
 80090cc:	441f      	add	r7, r3
 80090ce:	464b      	mov	r3, r9
 80090d0:	bfa8      	it	ge
 80090d2:	4643      	movge	r3, r8
 80090d4:	42bb      	cmp	r3, r7
 80090d6:	bfa8      	it	ge
 80090d8:	463b      	movge	r3, r7
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bfc2      	ittt	gt
 80090de:	eba8 0803 	subgt.w	r8, r8, r3
 80090e2:	1aff      	subgt	r7, r7, r3
 80090e4:	eba9 0903 	subgt.w	r9, r9, r3
 80090e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	dd17      	ble.n	800911e <_strtod_l+0x75e>
 80090ee:	4631      	mov	r1, r6
 80090f0:	461a      	mov	r2, r3
 80090f2:	4620      	mov	r0, r4
 80090f4:	f001 ff0c 	bl	800af10 <__pow5mult>
 80090f8:	4606      	mov	r6, r0
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f43f aea8 	beq.w	8008e50 <_strtod_l+0x490>
 8009100:	4601      	mov	r1, r0
 8009102:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009104:	4620      	mov	r0, r4
 8009106:	f001 fe59 	bl	800adbc <__multiply>
 800910a:	900b      	str	r0, [sp, #44]	; 0x2c
 800910c:	2800      	cmp	r0, #0
 800910e:	f43f ae9f 	beq.w	8008e50 <_strtod_l+0x490>
 8009112:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009114:	4620      	mov	r0, r4
 8009116:	f001 fd39 	bl	800ab8c <_Bfree>
 800911a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800911c:	9318      	str	r3, [sp, #96]	; 0x60
 800911e:	f1b8 0f00 	cmp.w	r8, #0
 8009122:	f300 808c 	bgt.w	800923e <_strtod_l+0x87e>
 8009126:	9b06      	ldr	r3, [sp, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	dd08      	ble.n	800913e <_strtod_l+0x77e>
 800912c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800912e:	9905      	ldr	r1, [sp, #20]
 8009130:	4620      	mov	r0, r4
 8009132:	f001 feed 	bl	800af10 <__pow5mult>
 8009136:	9005      	str	r0, [sp, #20]
 8009138:	2800      	cmp	r0, #0
 800913a:	f43f ae89 	beq.w	8008e50 <_strtod_l+0x490>
 800913e:	2f00      	cmp	r7, #0
 8009140:	dd08      	ble.n	8009154 <_strtod_l+0x794>
 8009142:	9905      	ldr	r1, [sp, #20]
 8009144:	463a      	mov	r2, r7
 8009146:	4620      	mov	r0, r4
 8009148:	f001 ff3c 	bl	800afc4 <__lshift>
 800914c:	9005      	str	r0, [sp, #20]
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f ae7e 	beq.w	8008e50 <_strtod_l+0x490>
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	dd08      	ble.n	800916c <_strtod_l+0x7ac>
 800915a:	4631      	mov	r1, r6
 800915c:	464a      	mov	r2, r9
 800915e:	4620      	mov	r0, r4
 8009160:	f001 ff30 	bl	800afc4 <__lshift>
 8009164:	4606      	mov	r6, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f ae72 	beq.w	8008e50 <_strtod_l+0x490>
 800916c:	9a05      	ldr	r2, [sp, #20]
 800916e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009170:	4620      	mov	r0, r4
 8009172:	f001 ffb3 	bl	800b0dc <__mdiff>
 8009176:	4605      	mov	r5, r0
 8009178:	2800      	cmp	r0, #0
 800917a:	f43f ae69 	beq.w	8008e50 <_strtod_l+0x490>
 800917e:	68c3      	ldr	r3, [r0, #12]
 8009180:	930b      	str	r3, [sp, #44]	; 0x2c
 8009182:	2300      	movs	r3, #0
 8009184:	60c3      	str	r3, [r0, #12]
 8009186:	4631      	mov	r1, r6
 8009188:	f001 ff8c 	bl	800b0a4 <__mcmp>
 800918c:	2800      	cmp	r0, #0
 800918e:	da60      	bge.n	8009252 <_strtod_l+0x892>
 8009190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009192:	ea53 030a 	orrs.w	r3, r3, sl
 8009196:	f040 8082 	bne.w	800929e <_strtod_l+0x8de>
 800919a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d17d      	bne.n	800929e <_strtod_l+0x8de>
 80091a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091a6:	0d1b      	lsrs	r3, r3, #20
 80091a8:	051b      	lsls	r3, r3, #20
 80091aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091ae:	d976      	bls.n	800929e <_strtod_l+0x8de>
 80091b0:	696b      	ldr	r3, [r5, #20]
 80091b2:	b913      	cbnz	r3, 80091ba <_strtod_l+0x7fa>
 80091b4:	692b      	ldr	r3, [r5, #16]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	dd71      	ble.n	800929e <_strtod_l+0x8de>
 80091ba:	4629      	mov	r1, r5
 80091bc:	2201      	movs	r2, #1
 80091be:	4620      	mov	r0, r4
 80091c0:	f001 ff00 	bl	800afc4 <__lshift>
 80091c4:	4631      	mov	r1, r6
 80091c6:	4605      	mov	r5, r0
 80091c8:	f001 ff6c 	bl	800b0a4 <__mcmp>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	dd66      	ble.n	800929e <_strtod_l+0x8de>
 80091d0:	9904      	ldr	r1, [sp, #16]
 80091d2:	4a53      	ldr	r2, [pc, #332]	; (8009320 <_strtod_l+0x960>)
 80091d4:	465b      	mov	r3, fp
 80091d6:	2900      	cmp	r1, #0
 80091d8:	f000 8081 	beq.w	80092de <_strtod_l+0x91e>
 80091dc:	ea02 010b 	and.w	r1, r2, fp
 80091e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091e4:	dc7b      	bgt.n	80092de <_strtod_l+0x91e>
 80091e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091ea:	f77f aea9 	ble.w	8008f40 <_strtod_l+0x580>
 80091ee:	4b4d      	ldr	r3, [pc, #308]	; (8009324 <_strtod_l+0x964>)
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	2200      	movs	r2, #0
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	460b      	mov	r3, r1
 80091fc:	4303      	orrs	r3, r0
 80091fe:	bf08      	it	eq
 8009200:	2322      	moveq	r3, #34	; 0x22
 8009202:	4682      	mov	sl, r0
 8009204:	468b      	mov	fp, r1
 8009206:	bf08      	it	eq
 8009208:	6023      	streq	r3, [r4, #0]
 800920a:	e62b      	b.n	8008e64 <_strtod_l+0x4a4>
 800920c:	f04f 32ff 	mov.w	r2, #4294967295
 8009210:	fa02 f303 	lsl.w	r3, r2, r3
 8009214:	ea03 0a0a 	and.w	sl, r3, sl
 8009218:	e6e3      	b.n	8008fe2 <_strtod_l+0x622>
 800921a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800921e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009222:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009226:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800922a:	fa01 f308 	lsl.w	r3, r1, r8
 800922e:	9308      	str	r3, [sp, #32]
 8009230:	910d      	str	r1, [sp, #52]	; 0x34
 8009232:	e746      	b.n	80090c2 <_strtod_l+0x702>
 8009234:	2300      	movs	r3, #0
 8009236:	9308      	str	r3, [sp, #32]
 8009238:	2301      	movs	r3, #1
 800923a:	930d      	str	r3, [sp, #52]	; 0x34
 800923c:	e741      	b.n	80090c2 <_strtod_l+0x702>
 800923e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009240:	4642      	mov	r2, r8
 8009242:	4620      	mov	r0, r4
 8009244:	f001 febe 	bl	800afc4 <__lshift>
 8009248:	9018      	str	r0, [sp, #96]	; 0x60
 800924a:	2800      	cmp	r0, #0
 800924c:	f47f af6b 	bne.w	8009126 <_strtod_l+0x766>
 8009250:	e5fe      	b.n	8008e50 <_strtod_l+0x490>
 8009252:	465f      	mov	r7, fp
 8009254:	d16e      	bne.n	8009334 <_strtod_l+0x974>
 8009256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800925c:	b342      	cbz	r2, 80092b0 <_strtod_l+0x8f0>
 800925e:	4a32      	ldr	r2, [pc, #200]	; (8009328 <_strtod_l+0x968>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d128      	bne.n	80092b6 <_strtod_l+0x8f6>
 8009264:	9b04      	ldr	r3, [sp, #16]
 8009266:	4651      	mov	r1, sl
 8009268:	b1eb      	cbz	r3, 80092a6 <_strtod_l+0x8e6>
 800926a:	4b2d      	ldr	r3, [pc, #180]	; (8009320 <_strtod_l+0x960>)
 800926c:	403b      	ands	r3, r7
 800926e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	d819      	bhi.n	80092ac <_strtod_l+0x8ec>
 8009278:	0d1b      	lsrs	r3, r3, #20
 800927a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800927e:	fa02 f303 	lsl.w	r3, r2, r3
 8009282:	4299      	cmp	r1, r3
 8009284:	d117      	bne.n	80092b6 <_strtod_l+0x8f6>
 8009286:	4b29      	ldr	r3, [pc, #164]	; (800932c <_strtod_l+0x96c>)
 8009288:	429f      	cmp	r7, r3
 800928a:	d102      	bne.n	8009292 <_strtod_l+0x8d2>
 800928c:	3101      	adds	r1, #1
 800928e:	f43f addf 	beq.w	8008e50 <_strtod_l+0x490>
 8009292:	4b23      	ldr	r3, [pc, #140]	; (8009320 <_strtod_l+0x960>)
 8009294:	403b      	ands	r3, r7
 8009296:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800929a:	f04f 0a00 	mov.w	sl, #0
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1a4      	bne.n	80091ee <_strtod_l+0x82e>
 80092a4:	e5de      	b.n	8008e64 <_strtod_l+0x4a4>
 80092a6:	f04f 33ff 	mov.w	r3, #4294967295
 80092aa:	e7ea      	b.n	8009282 <_strtod_l+0x8c2>
 80092ac:	4613      	mov	r3, r2
 80092ae:	e7e8      	b.n	8009282 <_strtod_l+0x8c2>
 80092b0:	ea53 030a 	orrs.w	r3, r3, sl
 80092b4:	d08c      	beq.n	80091d0 <_strtod_l+0x810>
 80092b6:	9b08      	ldr	r3, [sp, #32]
 80092b8:	b1db      	cbz	r3, 80092f2 <_strtod_l+0x932>
 80092ba:	423b      	tst	r3, r7
 80092bc:	d0ef      	beq.n	800929e <_strtod_l+0x8de>
 80092be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c0:	9a04      	ldr	r2, [sp, #16]
 80092c2:	4650      	mov	r0, sl
 80092c4:	4659      	mov	r1, fp
 80092c6:	b1c3      	cbz	r3, 80092fa <_strtod_l+0x93a>
 80092c8:	f7ff fb5c 	bl	8008984 <sulp>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	ec51 0b18 	vmov	r0, r1, d8
 80092d4:	f7f6 ffda 	bl	800028c <__adddf3>
 80092d8:	4682      	mov	sl, r0
 80092da:	468b      	mov	fp, r1
 80092dc:	e7df      	b.n	800929e <_strtod_l+0x8de>
 80092de:	4013      	ands	r3, r2
 80092e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092ec:	f04f 3aff 	mov.w	sl, #4294967295
 80092f0:	e7d5      	b.n	800929e <_strtod_l+0x8de>
 80092f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f4:	ea13 0f0a 	tst.w	r3, sl
 80092f8:	e7e0      	b.n	80092bc <_strtod_l+0x8fc>
 80092fa:	f7ff fb43 	bl	8008984 <sulp>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	ec51 0b18 	vmov	r0, r1, d8
 8009306:	f7f6 ffbf 	bl	8000288 <__aeabi_dsub>
 800930a:	2200      	movs	r2, #0
 800930c:	2300      	movs	r3, #0
 800930e:	4682      	mov	sl, r0
 8009310:	468b      	mov	fp, r1
 8009312:	f7f7 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009316:	2800      	cmp	r0, #0
 8009318:	d0c1      	beq.n	800929e <_strtod_l+0x8de>
 800931a:	e611      	b.n	8008f40 <_strtod_l+0x580>
 800931c:	fffffc02 	.word	0xfffffc02
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	39500000 	.word	0x39500000
 8009328:	000fffff 	.word	0x000fffff
 800932c:	7fefffff 	.word	0x7fefffff
 8009330:	08010020 	.word	0x08010020
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	f002 f832 	bl	800b3a0 <__ratio>
 800933c:	ec59 8b10 	vmov	r8, r9, d0
 8009340:	ee10 0a10 	vmov	r0, s0
 8009344:	2200      	movs	r2, #0
 8009346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800934a:	4649      	mov	r1, r9
 800934c:	f7f7 fbd0 	bl	8000af0 <__aeabi_dcmple>
 8009350:	2800      	cmp	r0, #0
 8009352:	d07a      	beq.n	800944a <_strtod_l+0xa8a>
 8009354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d04a      	beq.n	80093f0 <_strtod_l+0xa30>
 800935a:	4b95      	ldr	r3, [pc, #596]	; (80095b0 <_strtod_l+0xbf0>)
 800935c:	2200      	movs	r2, #0
 800935e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009362:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095b0 <_strtod_l+0xbf0>
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	4b92      	ldr	r3, [pc, #584]	; (80095b4 <_strtod_l+0xbf4>)
 800936c:	403b      	ands	r3, r7
 800936e:	930d      	str	r3, [sp, #52]	; 0x34
 8009370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009372:	4b91      	ldr	r3, [pc, #580]	; (80095b8 <_strtod_l+0xbf8>)
 8009374:	429a      	cmp	r2, r3
 8009376:	f040 80b0 	bne.w	80094da <_strtod_l+0xb1a>
 800937a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800937e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009382:	ec4b ab10 	vmov	d0, sl, fp
 8009386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800938a:	f001 ff31 	bl	800b1f0 <__ulp>
 800938e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009392:	ec53 2b10 	vmov	r2, r3, d0
 8009396:	f7f7 f92f 	bl	80005f8 <__aeabi_dmul>
 800939a:	4652      	mov	r2, sl
 800939c:	465b      	mov	r3, fp
 800939e:	f7f6 ff75 	bl	800028c <__adddf3>
 80093a2:	460b      	mov	r3, r1
 80093a4:	4983      	ldr	r1, [pc, #524]	; (80095b4 <_strtod_l+0xbf4>)
 80093a6:	4a85      	ldr	r2, [pc, #532]	; (80095bc <_strtod_l+0xbfc>)
 80093a8:	4019      	ands	r1, r3
 80093aa:	4291      	cmp	r1, r2
 80093ac:	4682      	mov	sl, r0
 80093ae:	d960      	bls.n	8009472 <_strtod_l+0xab2>
 80093b0:	ee18 3a90 	vmov	r3, s17
 80093b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d104      	bne.n	80093c6 <_strtod_l+0xa06>
 80093bc:	ee18 3a10 	vmov	r3, s16
 80093c0:	3301      	adds	r3, #1
 80093c2:	f43f ad45 	beq.w	8008e50 <_strtod_l+0x490>
 80093c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80095c8 <_strtod_l+0xc08>
 80093ca:	f04f 3aff 	mov.w	sl, #4294967295
 80093ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093d0:	4620      	mov	r0, r4
 80093d2:	f001 fbdb 	bl	800ab8c <_Bfree>
 80093d6:	9905      	ldr	r1, [sp, #20]
 80093d8:	4620      	mov	r0, r4
 80093da:	f001 fbd7 	bl	800ab8c <_Bfree>
 80093de:	4631      	mov	r1, r6
 80093e0:	4620      	mov	r0, r4
 80093e2:	f001 fbd3 	bl	800ab8c <_Bfree>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4620      	mov	r0, r4
 80093ea:	f001 fbcf 	bl	800ab8c <_Bfree>
 80093ee:	e61a      	b.n	8009026 <_strtod_l+0x666>
 80093f0:	f1ba 0f00 	cmp.w	sl, #0
 80093f4:	d11b      	bne.n	800942e <_strtod_l+0xa6e>
 80093f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093fa:	b9f3      	cbnz	r3, 800943a <_strtod_l+0xa7a>
 80093fc:	4b6c      	ldr	r3, [pc, #432]	; (80095b0 <_strtod_l+0xbf0>)
 80093fe:	2200      	movs	r2, #0
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f7 fb6a 	bl	8000adc <__aeabi_dcmplt>
 8009408:	b9d0      	cbnz	r0, 8009440 <_strtod_l+0xa80>
 800940a:	4640      	mov	r0, r8
 800940c:	4649      	mov	r1, r9
 800940e:	4b6c      	ldr	r3, [pc, #432]	; (80095c0 <_strtod_l+0xc00>)
 8009410:	2200      	movs	r2, #0
 8009412:	f7f7 f8f1 	bl	80005f8 <__aeabi_dmul>
 8009416:	4680      	mov	r8, r0
 8009418:	4689      	mov	r9, r1
 800941a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800941e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009422:	9315      	str	r3, [sp, #84]	; 0x54
 8009424:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009428:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800942c:	e79d      	b.n	800936a <_strtod_l+0x9aa>
 800942e:	f1ba 0f01 	cmp.w	sl, #1
 8009432:	d102      	bne.n	800943a <_strtod_l+0xa7a>
 8009434:	2f00      	cmp	r7, #0
 8009436:	f43f ad83 	beq.w	8008f40 <_strtod_l+0x580>
 800943a:	4b62      	ldr	r3, [pc, #392]	; (80095c4 <_strtod_l+0xc04>)
 800943c:	2200      	movs	r2, #0
 800943e:	e78e      	b.n	800935e <_strtod_l+0x99e>
 8009440:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095c0 <_strtod_l+0xc00>
 8009444:	f04f 0800 	mov.w	r8, #0
 8009448:	e7e7      	b.n	800941a <_strtod_l+0xa5a>
 800944a:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <_strtod_l+0xc00>)
 800944c:	4640      	mov	r0, r8
 800944e:	4649      	mov	r1, r9
 8009450:	2200      	movs	r2, #0
 8009452:	f7f7 f8d1 	bl	80005f8 <__aeabi_dmul>
 8009456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009458:	4680      	mov	r8, r0
 800945a:	4689      	mov	r9, r1
 800945c:	b933      	cbnz	r3, 800946c <_strtod_l+0xaac>
 800945e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009462:	900e      	str	r0, [sp, #56]	; 0x38
 8009464:	930f      	str	r3, [sp, #60]	; 0x3c
 8009466:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800946a:	e7dd      	b.n	8009428 <_strtod_l+0xa68>
 800946c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009470:	e7f9      	b.n	8009466 <_strtod_l+0xaa6>
 8009472:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1a8      	bne.n	80093ce <_strtod_l+0xa0e>
 800947c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009482:	0d1b      	lsrs	r3, r3, #20
 8009484:	051b      	lsls	r3, r3, #20
 8009486:	429a      	cmp	r2, r3
 8009488:	d1a1      	bne.n	80093ce <_strtod_l+0xa0e>
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f7 fc13 	bl	8000cb8 <__aeabi_d2lz>
 8009492:	f7f7 f883 	bl	800059c <__aeabi_l2d>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4640      	mov	r0, r8
 800949c:	4649      	mov	r1, r9
 800949e:	f7f6 fef3 	bl	8000288 <__aeabi_dsub>
 80094a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094a8:	ea43 030a 	orr.w	r3, r3, sl
 80094ac:	4313      	orrs	r3, r2
 80094ae:	4680      	mov	r8, r0
 80094b0:	4689      	mov	r9, r1
 80094b2:	d055      	beq.n	8009560 <_strtod_l+0xba0>
 80094b4:	a336      	add	r3, pc, #216	; (adr r3, 8009590 <_strtod_l+0xbd0>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f7f7 fb0f 	bl	8000adc <__aeabi_dcmplt>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f47f acd0 	bne.w	8008e64 <_strtod_l+0x4a4>
 80094c4:	a334      	add	r3, pc, #208	; (adr r3, 8009598 <_strtod_l+0xbd8>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f7 fb23 	bl	8000b18 <__aeabi_dcmpgt>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f43f af7b 	beq.w	80093ce <_strtod_l+0xa0e>
 80094d8:	e4c4      	b.n	8008e64 <_strtod_l+0x4a4>
 80094da:	9b04      	ldr	r3, [sp, #16]
 80094dc:	b333      	cbz	r3, 800952c <_strtod_l+0xb6c>
 80094de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094e4:	d822      	bhi.n	800952c <_strtod_l+0xb6c>
 80094e6:	a32e      	add	r3, pc, #184	; (adr r3, 80095a0 <_strtod_l+0xbe0>)
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	4640      	mov	r0, r8
 80094ee:	4649      	mov	r1, r9
 80094f0:	f7f7 fafe 	bl	8000af0 <__aeabi_dcmple>
 80094f4:	b1a0      	cbz	r0, 8009520 <_strtod_l+0xb60>
 80094f6:	4649      	mov	r1, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	f7f7 fb55 	bl	8000ba8 <__aeabi_d2uiz>
 80094fe:	2801      	cmp	r0, #1
 8009500:	bf38      	it	cc
 8009502:	2001      	movcc	r0, #1
 8009504:	f7f6 fffe 	bl	8000504 <__aeabi_ui2d>
 8009508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800950a:	4680      	mov	r8, r0
 800950c:	4689      	mov	r9, r1
 800950e:	bb23      	cbnz	r3, 800955a <_strtod_l+0xb9a>
 8009510:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009514:	9010      	str	r0, [sp, #64]	; 0x40
 8009516:	9311      	str	r3, [sp, #68]	; 0x44
 8009518:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800951c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009522:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009524:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	9309      	str	r3, [sp, #36]	; 0x24
 800952c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009530:	eeb0 0a48 	vmov.f32	s0, s16
 8009534:	eef0 0a68 	vmov.f32	s1, s17
 8009538:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800953c:	f001 fe58 	bl	800b1f0 <__ulp>
 8009540:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009544:	ec53 2b10 	vmov	r2, r3, d0
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	ec53 2b18 	vmov	r2, r3, d8
 8009550:	f7f6 fe9c 	bl	800028c <__adddf3>
 8009554:	4682      	mov	sl, r0
 8009556:	468b      	mov	fp, r1
 8009558:	e78d      	b.n	8009476 <_strtod_l+0xab6>
 800955a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800955e:	e7db      	b.n	8009518 <_strtod_l+0xb58>
 8009560:	a311      	add	r3, pc, #68	; (adr r3, 80095a8 <_strtod_l+0xbe8>)
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f7f7 fab9 	bl	8000adc <__aeabi_dcmplt>
 800956a:	e7b2      	b.n	80094d2 <_strtod_l+0xb12>
 800956c:	2300      	movs	r3, #0
 800956e:	930a      	str	r3, [sp, #40]	; 0x28
 8009570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009572:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	f7ff ba6b 	b.w	8008a50 <_strtod_l+0x90>
 800957a:	2a65      	cmp	r2, #101	; 0x65
 800957c:	f43f ab5f 	beq.w	8008c3e <_strtod_l+0x27e>
 8009580:	2a45      	cmp	r2, #69	; 0x45
 8009582:	f43f ab5c 	beq.w	8008c3e <_strtod_l+0x27e>
 8009586:	2301      	movs	r3, #1
 8009588:	f7ff bb94 	b.w	8008cb4 <_strtod_l+0x2f4>
 800958c:	f3af 8000 	nop.w
 8009590:	94a03595 	.word	0x94a03595
 8009594:	3fdfffff 	.word	0x3fdfffff
 8009598:	35afe535 	.word	0x35afe535
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	ffc00000 	.word	0xffc00000
 80095a4:	41dfffff 	.word	0x41dfffff
 80095a8:	94a03595 	.word	0x94a03595
 80095ac:	3fcfffff 	.word	0x3fcfffff
 80095b0:	3ff00000 	.word	0x3ff00000
 80095b4:	7ff00000 	.word	0x7ff00000
 80095b8:	7fe00000 	.word	0x7fe00000
 80095bc:	7c9fffff 	.word	0x7c9fffff
 80095c0:	3fe00000 	.word	0x3fe00000
 80095c4:	bff00000 	.word	0xbff00000
 80095c8:	7fefffff 	.word	0x7fefffff

080095cc <_strtod_r>:
 80095cc:	4b01      	ldr	r3, [pc, #4]	; (80095d4 <_strtod_r+0x8>)
 80095ce:	f7ff b9f7 	b.w	80089c0 <_strtod_l>
 80095d2:	bf00      	nop
 80095d4:	20000110 	.word	0x20000110

080095d8 <_strtol_l.constprop.0>:
 80095d8:	2b01      	cmp	r3, #1
 80095da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095de:	d001      	beq.n	80095e4 <_strtol_l.constprop.0+0xc>
 80095e0:	2b24      	cmp	r3, #36	; 0x24
 80095e2:	d906      	bls.n	80095f2 <_strtol_l.constprop.0+0x1a>
 80095e4:	f7fe faf4 	bl	8007bd0 <__errno>
 80095e8:	2316      	movs	r3, #22
 80095ea:	6003      	str	r3, [r0, #0]
 80095ec:	2000      	movs	r0, #0
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80096d8 <_strtol_l.constprop.0+0x100>
 80095f6:	460d      	mov	r5, r1
 80095f8:	462e      	mov	r6, r5
 80095fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009602:	f017 0708 	ands.w	r7, r7, #8
 8009606:	d1f7      	bne.n	80095f8 <_strtol_l.constprop.0+0x20>
 8009608:	2c2d      	cmp	r4, #45	; 0x2d
 800960a:	d132      	bne.n	8009672 <_strtol_l.constprop.0+0x9a>
 800960c:	782c      	ldrb	r4, [r5, #0]
 800960e:	2701      	movs	r7, #1
 8009610:	1cb5      	adds	r5, r6, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d05b      	beq.n	80096ce <_strtol_l.constprop.0+0xf6>
 8009616:	2b10      	cmp	r3, #16
 8009618:	d109      	bne.n	800962e <_strtol_l.constprop.0+0x56>
 800961a:	2c30      	cmp	r4, #48	; 0x30
 800961c:	d107      	bne.n	800962e <_strtol_l.constprop.0+0x56>
 800961e:	782c      	ldrb	r4, [r5, #0]
 8009620:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009624:	2c58      	cmp	r4, #88	; 0x58
 8009626:	d14d      	bne.n	80096c4 <_strtol_l.constprop.0+0xec>
 8009628:	786c      	ldrb	r4, [r5, #1]
 800962a:	2310      	movs	r3, #16
 800962c:	3502      	adds	r5, #2
 800962e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009632:	f108 38ff 	add.w	r8, r8, #4294967295
 8009636:	f04f 0c00 	mov.w	ip, #0
 800963a:	fbb8 f9f3 	udiv	r9, r8, r3
 800963e:	4666      	mov	r6, ip
 8009640:	fb03 8a19 	mls	sl, r3, r9, r8
 8009644:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009648:	f1be 0f09 	cmp.w	lr, #9
 800964c:	d816      	bhi.n	800967c <_strtol_l.constprop.0+0xa4>
 800964e:	4674      	mov	r4, lr
 8009650:	42a3      	cmp	r3, r4
 8009652:	dd24      	ble.n	800969e <_strtol_l.constprop.0+0xc6>
 8009654:	f1bc 0f00 	cmp.w	ip, #0
 8009658:	db1e      	blt.n	8009698 <_strtol_l.constprop.0+0xc0>
 800965a:	45b1      	cmp	r9, r6
 800965c:	d31c      	bcc.n	8009698 <_strtol_l.constprop.0+0xc0>
 800965e:	d101      	bne.n	8009664 <_strtol_l.constprop.0+0x8c>
 8009660:	45a2      	cmp	sl, r4
 8009662:	db19      	blt.n	8009698 <_strtol_l.constprop.0+0xc0>
 8009664:	fb06 4603 	mla	r6, r6, r3, r4
 8009668:	f04f 0c01 	mov.w	ip, #1
 800966c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009670:	e7e8      	b.n	8009644 <_strtol_l.constprop.0+0x6c>
 8009672:	2c2b      	cmp	r4, #43	; 0x2b
 8009674:	bf04      	itt	eq
 8009676:	782c      	ldrbeq	r4, [r5, #0]
 8009678:	1cb5      	addeq	r5, r6, #2
 800967a:	e7ca      	b.n	8009612 <_strtol_l.constprop.0+0x3a>
 800967c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009680:	f1be 0f19 	cmp.w	lr, #25
 8009684:	d801      	bhi.n	800968a <_strtol_l.constprop.0+0xb2>
 8009686:	3c37      	subs	r4, #55	; 0x37
 8009688:	e7e2      	b.n	8009650 <_strtol_l.constprop.0+0x78>
 800968a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800968e:	f1be 0f19 	cmp.w	lr, #25
 8009692:	d804      	bhi.n	800969e <_strtol_l.constprop.0+0xc6>
 8009694:	3c57      	subs	r4, #87	; 0x57
 8009696:	e7db      	b.n	8009650 <_strtol_l.constprop.0+0x78>
 8009698:	f04f 3cff 	mov.w	ip, #4294967295
 800969c:	e7e6      	b.n	800966c <_strtol_l.constprop.0+0x94>
 800969e:	f1bc 0f00 	cmp.w	ip, #0
 80096a2:	da05      	bge.n	80096b0 <_strtol_l.constprop.0+0xd8>
 80096a4:	2322      	movs	r3, #34	; 0x22
 80096a6:	6003      	str	r3, [r0, #0]
 80096a8:	4646      	mov	r6, r8
 80096aa:	b942      	cbnz	r2, 80096be <_strtol_l.constprop.0+0xe6>
 80096ac:	4630      	mov	r0, r6
 80096ae:	e79e      	b.n	80095ee <_strtol_l.constprop.0+0x16>
 80096b0:	b107      	cbz	r7, 80096b4 <_strtol_l.constprop.0+0xdc>
 80096b2:	4276      	negs	r6, r6
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	d0f9      	beq.n	80096ac <_strtol_l.constprop.0+0xd4>
 80096b8:	f1bc 0f00 	cmp.w	ip, #0
 80096bc:	d000      	beq.n	80096c0 <_strtol_l.constprop.0+0xe8>
 80096be:	1e69      	subs	r1, r5, #1
 80096c0:	6011      	str	r1, [r2, #0]
 80096c2:	e7f3      	b.n	80096ac <_strtol_l.constprop.0+0xd4>
 80096c4:	2430      	movs	r4, #48	; 0x30
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1b1      	bne.n	800962e <_strtol_l.constprop.0+0x56>
 80096ca:	2308      	movs	r3, #8
 80096cc:	e7af      	b.n	800962e <_strtol_l.constprop.0+0x56>
 80096ce:	2c30      	cmp	r4, #48	; 0x30
 80096d0:	d0a5      	beq.n	800961e <_strtol_l.constprop.0+0x46>
 80096d2:	230a      	movs	r3, #10
 80096d4:	e7ab      	b.n	800962e <_strtol_l.constprop.0+0x56>
 80096d6:	bf00      	nop
 80096d8:	08010049 	.word	0x08010049

080096dc <_strtol_r>:
 80096dc:	f7ff bf7c 	b.w	80095d8 <_strtol_l.constprop.0>

080096e0 <quorem>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	690c      	ldr	r4, [r1, #16]
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	4607      	mov	r7, r0
 80096ec:	f2c0 8081 	blt.w	80097f2 <quorem+0x112>
 80096f0:	3c01      	subs	r4, #1
 80096f2:	f101 0814 	add.w	r8, r1, #20
 80096f6:	f100 0514 	add.w	r5, r0, #20
 80096fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009708:	3301      	adds	r3, #1
 800970a:	429a      	cmp	r2, r3
 800970c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009714:	fbb2 f6f3 	udiv	r6, r2, r3
 8009718:	d331      	bcc.n	800977e <quorem+0x9e>
 800971a:	f04f 0e00 	mov.w	lr, #0
 800971e:	4640      	mov	r0, r8
 8009720:	46ac      	mov	ip, r5
 8009722:	46f2      	mov	sl, lr
 8009724:	f850 2b04 	ldr.w	r2, [r0], #4
 8009728:	b293      	uxth	r3, r2
 800972a:	fb06 e303 	mla	r3, r6, r3, lr
 800972e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009732:	b29b      	uxth	r3, r3
 8009734:	ebaa 0303 	sub.w	r3, sl, r3
 8009738:	f8dc a000 	ldr.w	sl, [ip]
 800973c:	0c12      	lsrs	r2, r2, #16
 800973e:	fa13 f38a 	uxtah	r3, r3, sl
 8009742:	fb06 e202 	mla	r2, r6, r2, lr
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	9b00      	ldr	r3, [sp, #0]
 800974a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800974e:	b292      	uxth	r2, r2
 8009750:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009758:	f8bd 3000 	ldrh.w	r3, [sp]
 800975c:	4581      	cmp	r9, r0
 800975e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009762:	f84c 3b04 	str.w	r3, [ip], #4
 8009766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800976a:	d2db      	bcs.n	8009724 <quorem+0x44>
 800976c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009770:	b92b      	cbnz	r3, 800977e <quorem+0x9e>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	3b04      	subs	r3, #4
 8009776:	429d      	cmp	r5, r3
 8009778:	461a      	mov	r2, r3
 800977a:	d32e      	bcc.n	80097da <quorem+0xfa>
 800977c:	613c      	str	r4, [r7, #16]
 800977e:	4638      	mov	r0, r7
 8009780:	f001 fc90 	bl	800b0a4 <__mcmp>
 8009784:	2800      	cmp	r0, #0
 8009786:	db24      	blt.n	80097d2 <quorem+0xf2>
 8009788:	3601      	adds	r6, #1
 800978a:	4628      	mov	r0, r5
 800978c:	f04f 0c00 	mov.w	ip, #0
 8009790:	f858 2b04 	ldr.w	r2, [r8], #4
 8009794:	f8d0 e000 	ldr.w	lr, [r0]
 8009798:	b293      	uxth	r3, r2
 800979a:	ebac 0303 	sub.w	r3, ip, r3
 800979e:	0c12      	lsrs	r2, r2, #16
 80097a0:	fa13 f38e 	uxtah	r3, r3, lr
 80097a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b2:	45c1      	cmp	r9, r8
 80097b4:	f840 3b04 	str.w	r3, [r0], #4
 80097b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097bc:	d2e8      	bcs.n	8009790 <quorem+0xb0>
 80097be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c6:	b922      	cbnz	r2, 80097d2 <quorem+0xf2>
 80097c8:	3b04      	subs	r3, #4
 80097ca:	429d      	cmp	r5, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	d30a      	bcc.n	80097e6 <quorem+0x106>
 80097d0:	613c      	str	r4, [r7, #16]
 80097d2:	4630      	mov	r0, r6
 80097d4:	b003      	add	sp, #12
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	6812      	ldr	r2, [r2, #0]
 80097dc:	3b04      	subs	r3, #4
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d1cc      	bne.n	800977c <quorem+0x9c>
 80097e2:	3c01      	subs	r4, #1
 80097e4:	e7c7      	b.n	8009776 <quorem+0x96>
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	3b04      	subs	r3, #4
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d1f0      	bne.n	80097d0 <quorem+0xf0>
 80097ee:	3c01      	subs	r4, #1
 80097f0:	e7eb      	b.n	80097ca <quorem+0xea>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e7ee      	b.n	80097d4 <quorem+0xf4>
	...

080097f8 <_dtoa_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	ed2d 8b04 	vpush	{d8-d9}
 8009800:	ec57 6b10 	vmov	r6, r7, d0
 8009804:	b093      	sub	sp, #76	; 0x4c
 8009806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800980c:	9106      	str	r1, [sp, #24]
 800980e:	ee10 aa10 	vmov	sl, s0
 8009812:	4604      	mov	r4, r0
 8009814:	9209      	str	r2, [sp, #36]	; 0x24
 8009816:	930c      	str	r3, [sp, #48]	; 0x30
 8009818:	46bb      	mov	fp, r7
 800981a:	b975      	cbnz	r5, 800983a <_dtoa_r+0x42>
 800981c:	2010      	movs	r0, #16
 800981e:	f001 f94d 	bl	800aabc <malloc>
 8009822:	4602      	mov	r2, r0
 8009824:	6260      	str	r0, [r4, #36]	; 0x24
 8009826:	b920      	cbnz	r0, 8009832 <_dtoa_r+0x3a>
 8009828:	4ba7      	ldr	r3, [pc, #668]	; (8009ac8 <_dtoa_r+0x2d0>)
 800982a:	21ea      	movs	r1, #234	; 0xea
 800982c:	48a7      	ldr	r0, [pc, #668]	; (8009acc <_dtoa_r+0x2d4>)
 800982e:	f002 f8bd 	bl	800b9ac <__assert_func>
 8009832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009836:	6005      	str	r5, [r0, #0]
 8009838:	60c5      	str	r5, [r0, #12]
 800983a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983c:	6819      	ldr	r1, [r3, #0]
 800983e:	b151      	cbz	r1, 8009856 <_dtoa_r+0x5e>
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	604a      	str	r2, [r1, #4]
 8009844:	2301      	movs	r3, #1
 8009846:	4093      	lsls	r3, r2
 8009848:	608b      	str	r3, [r1, #8]
 800984a:	4620      	mov	r0, r4
 800984c:	f001 f99e 	bl	800ab8c <_Bfree>
 8009850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	1e3b      	subs	r3, r7, #0
 8009858:	bfaa      	itet	ge
 800985a:	2300      	movge	r3, #0
 800985c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009860:	f8c8 3000 	strge.w	r3, [r8]
 8009864:	4b9a      	ldr	r3, [pc, #616]	; (8009ad0 <_dtoa_r+0x2d8>)
 8009866:	bfbc      	itt	lt
 8009868:	2201      	movlt	r2, #1
 800986a:	f8c8 2000 	strlt.w	r2, [r8]
 800986e:	ea33 030b 	bics.w	r3, r3, fp
 8009872:	d11b      	bne.n	80098ac <_dtoa_r+0xb4>
 8009874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009876:	f242 730f 	movw	r3, #9999	; 0x270f
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009880:	4333      	orrs	r3, r6
 8009882:	f000 8592 	beq.w	800a3aa <_dtoa_r+0xbb2>
 8009886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009888:	b963      	cbnz	r3, 80098a4 <_dtoa_r+0xac>
 800988a:	4b92      	ldr	r3, [pc, #584]	; (8009ad4 <_dtoa_r+0x2dc>)
 800988c:	e022      	b.n	80098d4 <_dtoa_r+0xdc>
 800988e:	4b92      	ldr	r3, [pc, #584]	; (8009ad8 <_dtoa_r+0x2e0>)
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	3308      	adds	r3, #8
 8009894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	9801      	ldr	r0, [sp, #4]
 800989a:	b013      	add	sp, #76	; 0x4c
 800989c:	ecbd 8b04 	vpop	{d8-d9}
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	4b8b      	ldr	r3, [pc, #556]	; (8009ad4 <_dtoa_r+0x2dc>)
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	3303      	adds	r3, #3
 80098aa:	e7f3      	b.n	8009894 <_dtoa_r+0x9c>
 80098ac:	2200      	movs	r2, #0
 80098ae:	2300      	movs	r3, #0
 80098b0:	4650      	mov	r0, sl
 80098b2:	4659      	mov	r1, fp
 80098b4:	f7f7 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80098b8:	ec4b ab19 	vmov	d9, sl, fp
 80098bc:	4680      	mov	r8, r0
 80098be:	b158      	cbz	r0, 80098d8 <_dtoa_r+0xe0>
 80098c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098c2:	2301      	movs	r3, #1
 80098c4:	6013      	str	r3, [r2, #0]
 80098c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 856b 	beq.w	800a3a4 <_dtoa_r+0xbac>
 80098ce:	4883      	ldr	r0, [pc, #524]	; (8009adc <_dtoa_r+0x2e4>)
 80098d0:	6018      	str	r0, [r3, #0]
 80098d2:	1e43      	subs	r3, r0, #1
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	e7df      	b.n	8009898 <_dtoa_r+0xa0>
 80098d8:	ec4b ab10 	vmov	d0, sl, fp
 80098dc:	aa10      	add	r2, sp, #64	; 0x40
 80098de:	a911      	add	r1, sp, #68	; 0x44
 80098e0:	4620      	mov	r0, r4
 80098e2:	f001 fd01 	bl	800b2e8 <__d2b>
 80098e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098ea:	ee08 0a10 	vmov	s16, r0
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	f000 8084 	beq.w	80099fc <_dtoa_r+0x204>
 80098f4:	ee19 3a90 	vmov	r3, s19
 80098f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009900:	4656      	mov	r6, sl
 8009902:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800990a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800990e:	4b74      	ldr	r3, [pc, #464]	; (8009ae0 <_dtoa_r+0x2e8>)
 8009910:	2200      	movs	r2, #0
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f7f6 fcb7 	bl	8000288 <__aeabi_dsub>
 800991a:	a365      	add	r3, pc, #404	; (adr r3, 8009ab0 <_dtoa_r+0x2b8>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fe6a 	bl	80005f8 <__aeabi_dmul>
 8009924:	a364      	add	r3, pc, #400	; (adr r3, 8009ab8 <_dtoa_r+0x2c0>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fcaf 	bl	800028c <__adddf3>
 800992e:	4606      	mov	r6, r0
 8009930:	4628      	mov	r0, r5
 8009932:	460f      	mov	r7, r1
 8009934:	f7f6 fdf6 	bl	8000524 <__aeabi_i2d>
 8009938:	a361      	add	r3, pc, #388	; (adr r3, 8009ac0 <_dtoa_r+0x2c8>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4630      	mov	r0, r6
 8009948:	4639      	mov	r1, r7
 800994a:	f7f6 fc9f 	bl	800028c <__adddf3>
 800994e:	4606      	mov	r6, r0
 8009950:	460f      	mov	r7, r1
 8009952:	f7f7 f901 	bl	8000b58 <__aeabi_d2iz>
 8009956:	2200      	movs	r2, #0
 8009958:	9000      	str	r0, [sp, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	4630      	mov	r0, r6
 800995e:	4639      	mov	r1, r7
 8009960:	f7f7 f8bc 	bl	8000adc <__aeabi_dcmplt>
 8009964:	b150      	cbz	r0, 800997c <_dtoa_r+0x184>
 8009966:	9800      	ldr	r0, [sp, #0]
 8009968:	f7f6 fddc 	bl	8000524 <__aeabi_i2d>
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	f7f7 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009974:	b910      	cbnz	r0, 800997c <_dtoa_r+0x184>
 8009976:	9b00      	ldr	r3, [sp, #0]
 8009978:	3b01      	subs	r3, #1
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	2b16      	cmp	r3, #22
 8009980:	d85a      	bhi.n	8009a38 <_dtoa_r+0x240>
 8009982:	9a00      	ldr	r2, [sp, #0]
 8009984:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <_dtoa_r+0x2ec>)
 8009986:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	ec51 0b19 	vmov	r0, r1, d9
 8009992:	f7f7 f8a3 	bl	8000adc <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d050      	beq.n	8009a3c <_dtoa_r+0x244>
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	3b01      	subs	r3, #1
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80099a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099a6:	1b5d      	subs	r5, r3, r5
 80099a8:	1e6b      	subs	r3, r5, #1
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	bf45      	ittet	mi
 80099ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80099b2:	9304      	strmi	r3, [sp, #16]
 80099b4:	2300      	movpl	r3, #0
 80099b6:	2300      	movmi	r3, #0
 80099b8:	bf4c      	ite	mi
 80099ba:	9305      	strmi	r3, [sp, #20]
 80099bc:	9304      	strpl	r3, [sp, #16]
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db3d      	blt.n	8009a40 <_dtoa_r+0x248>
 80099c4:	9b05      	ldr	r3, [sp, #20]
 80099c6:	9a00      	ldr	r2, [sp, #0]
 80099c8:	920a      	str	r2, [sp, #40]	; 0x28
 80099ca:	4413      	add	r3, r2
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	2300      	movs	r3, #0
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	2b09      	cmp	r3, #9
 80099d6:	f200 8089 	bhi.w	8009aec <_dtoa_r+0x2f4>
 80099da:	2b05      	cmp	r3, #5
 80099dc:	bfc4      	itt	gt
 80099de:	3b04      	subgt	r3, #4
 80099e0:	9306      	strgt	r3, [sp, #24]
 80099e2:	9b06      	ldr	r3, [sp, #24]
 80099e4:	f1a3 0302 	sub.w	r3, r3, #2
 80099e8:	bfcc      	ite	gt
 80099ea:	2500      	movgt	r5, #0
 80099ec:	2501      	movle	r5, #1
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	f200 8087 	bhi.w	8009b02 <_dtoa_r+0x30a>
 80099f4:	e8df f003 	tbb	[pc, r3]
 80099f8:	59383a2d 	.word	0x59383a2d
 80099fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a00:	441d      	add	r5, r3
 8009a02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	bfc1      	itttt	gt
 8009a0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a12:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a1a:	bfda      	itte	le
 8009a1c:	f1c3 0320 	rsble	r3, r3, #32
 8009a20:	fa06 f003 	lslle.w	r0, r6, r3
 8009a24:	4318      	orrgt	r0, r3
 8009a26:	f7f6 fd6d 	bl	8000504 <__aeabi_ui2d>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a32:	3d01      	subs	r5, #1
 8009a34:	930e      	str	r3, [sp, #56]	; 0x38
 8009a36:	e76a      	b.n	800990e <_dtoa_r+0x116>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e7b2      	b.n	80099a2 <_dtoa_r+0x1aa>
 8009a3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a3e:	e7b1      	b.n	80099a4 <_dtoa_r+0x1ac>
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	9a00      	ldr	r2, [sp, #0]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	4253      	negs	r3, r2
 8009a4a:	9307      	str	r3, [sp, #28]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a50:	e7bf      	b.n	80099d2 <_dtoa_r+0x1da>
 8009a52:	2300      	movs	r3, #0
 8009a54:	9308      	str	r3, [sp, #32]
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dc55      	bgt.n	8009b08 <_dtoa_r+0x310>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a62:	461a      	mov	r2, r3
 8009a64:	9209      	str	r2, [sp, #36]	; 0x24
 8009a66:	e00c      	b.n	8009a82 <_dtoa_r+0x28a>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f3      	b.n	8009a54 <_dtoa_r+0x25c>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a70:	9308      	str	r3, [sp, #32]
 8009a72:	9b00      	ldr	r3, [sp, #0]
 8009a74:	4413      	add	r3, r2
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	bfb8      	it	lt
 8009a80:	2301      	movlt	r3, #1
 8009a82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a84:	2200      	movs	r2, #0
 8009a86:	6042      	str	r2, [r0, #4]
 8009a88:	2204      	movs	r2, #4
 8009a8a:	f102 0614 	add.w	r6, r2, #20
 8009a8e:	429e      	cmp	r6, r3
 8009a90:	6841      	ldr	r1, [r0, #4]
 8009a92:	d93d      	bls.n	8009b10 <_dtoa_r+0x318>
 8009a94:	4620      	mov	r0, r4
 8009a96:	f001 f839 	bl	800ab0c <_Balloc>
 8009a9a:	9001      	str	r0, [sp, #4]
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d13b      	bne.n	8009b18 <_dtoa_r+0x320>
 8009aa0:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <_dtoa_r+0x2f0>)
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009aa8:	e6c0      	b.n	800982c <_dtoa_r+0x34>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e7df      	b.n	8009a6e <_dtoa_r+0x276>
 8009aae:	bf00      	nop
 8009ab0:	636f4361 	.word	0x636f4361
 8009ab4:	3fd287a7 	.word	0x3fd287a7
 8009ab8:	8b60c8b3 	.word	0x8b60c8b3
 8009abc:	3fc68a28 	.word	0x3fc68a28
 8009ac0:	509f79fb 	.word	0x509f79fb
 8009ac4:	3fd34413 	.word	0x3fd34413
 8009ac8:	08010156 	.word	0x08010156
 8009acc:	0801016d 	.word	0x0801016d
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	08010152 	.word	0x08010152
 8009ad8:	08010149 	.word	0x08010149
 8009adc:	0800ffc9 	.word	0x0800ffc9
 8009ae0:	3ff80000 	.word	0x3ff80000
 8009ae4:	080102d8 	.word	0x080102d8
 8009ae8:	080101c8 	.word	0x080101c8
 8009aec:	2501      	movs	r5, #1
 8009aee:	2300      	movs	r3, #0
 8009af0:	9306      	str	r3, [sp, #24]
 8009af2:	9508      	str	r5, [sp, #32]
 8009af4:	f04f 33ff 	mov.w	r3, #4294967295
 8009af8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009afc:	2200      	movs	r2, #0
 8009afe:	2312      	movs	r3, #18
 8009b00:	e7b0      	b.n	8009a64 <_dtoa_r+0x26c>
 8009b02:	2301      	movs	r3, #1
 8009b04:	9308      	str	r3, [sp, #32]
 8009b06:	e7f5      	b.n	8009af4 <_dtoa_r+0x2fc>
 8009b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b0e:	e7b8      	b.n	8009a82 <_dtoa_r+0x28a>
 8009b10:	3101      	adds	r1, #1
 8009b12:	6041      	str	r1, [r0, #4]
 8009b14:	0052      	lsls	r2, r2, #1
 8009b16:	e7b8      	b.n	8009a8a <_dtoa_r+0x292>
 8009b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b1a:	9a01      	ldr	r2, [sp, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	2b0e      	cmp	r3, #14
 8009b22:	f200 809d 	bhi.w	8009c60 <_dtoa_r+0x468>
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	f000 809a 	beq.w	8009c60 <_dtoa_r+0x468>
 8009b2c:	9b00      	ldr	r3, [sp, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dd32      	ble.n	8009b98 <_dtoa_r+0x3a0>
 8009b32:	4ab7      	ldr	r2, [pc, #732]	; (8009e10 <_dtoa_r+0x618>)
 8009b34:	f003 030f 	and.w	r3, r3, #15
 8009b38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b40:	9b00      	ldr	r3, [sp, #0]
 8009b42:	05d8      	lsls	r0, r3, #23
 8009b44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b48:	d516      	bpl.n	8009b78 <_dtoa_r+0x380>
 8009b4a:	4bb2      	ldr	r3, [pc, #712]	; (8009e14 <_dtoa_r+0x61c>)
 8009b4c:	ec51 0b19 	vmov	r0, r1, d9
 8009b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b54:	f7f6 fe7a 	bl	800084c <__aeabi_ddiv>
 8009b58:	f007 070f 	and.w	r7, r7, #15
 8009b5c:	4682      	mov	sl, r0
 8009b5e:	468b      	mov	fp, r1
 8009b60:	2503      	movs	r5, #3
 8009b62:	4eac      	ldr	r6, [pc, #688]	; (8009e14 <_dtoa_r+0x61c>)
 8009b64:	b957      	cbnz	r7, 8009b7c <_dtoa_r+0x384>
 8009b66:	4642      	mov	r2, r8
 8009b68:	464b      	mov	r3, r9
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	f7f6 fe6d 	bl	800084c <__aeabi_ddiv>
 8009b72:	4682      	mov	sl, r0
 8009b74:	468b      	mov	fp, r1
 8009b76:	e028      	b.n	8009bca <_dtoa_r+0x3d2>
 8009b78:	2502      	movs	r5, #2
 8009b7a:	e7f2      	b.n	8009b62 <_dtoa_r+0x36a>
 8009b7c:	07f9      	lsls	r1, r7, #31
 8009b7e:	d508      	bpl.n	8009b92 <_dtoa_r+0x39a>
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b88:	f7f6 fd36 	bl	80005f8 <__aeabi_dmul>
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	4680      	mov	r8, r0
 8009b90:	4689      	mov	r9, r1
 8009b92:	107f      	asrs	r7, r7, #1
 8009b94:	3608      	adds	r6, #8
 8009b96:	e7e5      	b.n	8009b64 <_dtoa_r+0x36c>
 8009b98:	f000 809b 	beq.w	8009cd2 <_dtoa_r+0x4da>
 8009b9c:	9b00      	ldr	r3, [sp, #0]
 8009b9e:	4f9d      	ldr	r7, [pc, #628]	; (8009e14 <_dtoa_r+0x61c>)
 8009ba0:	425e      	negs	r6, r3
 8009ba2:	4b9b      	ldr	r3, [pc, #620]	; (8009e10 <_dtoa_r+0x618>)
 8009ba4:	f006 020f 	and.w	r2, r6, #15
 8009ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	ec51 0b19 	vmov	r0, r1, d9
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	1136      	asrs	r6, r6, #4
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2502      	movs	r5, #2
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	d17a      	bne.n	8009cbc <_dtoa_r+0x4c4>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1d3      	bne.n	8009b72 <_dtoa_r+0x37a>
 8009bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8082 	beq.w	8009cd6 <_dtoa_r+0x4de>
 8009bd2:	4b91      	ldr	r3, [pc, #580]	; (8009e18 <_dtoa_r+0x620>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	f7f6 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d079      	beq.n	8009cd6 <_dtoa_r+0x4de>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d076      	beq.n	8009cd6 <_dtoa_r+0x4de>
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dd36      	ble.n	8009c5c <_dtoa_r+0x464>
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	4650      	mov	r0, sl
 8009bf2:	4659      	mov	r1, fp
 8009bf4:	1e5f      	subs	r7, r3, #1
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	4b88      	ldr	r3, [pc, #544]	; (8009e1c <_dtoa_r+0x624>)
 8009bfa:	f7f6 fcfd 	bl	80005f8 <__aeabi_dmul>
 8009bfe:	9e02      	ldr	r6, [sp, #8]
 8009c00:	4682      	mov	sl, r0
 8009c02:	468b      	mov	fp, r1
 8009c04:	3501      	adds	r5, #1
 8009c06:	4628      	mov	r0, r5
 8009c08:	f7f6 fc8c 	bl	8000524 <__aeabi_i2d>
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	465b      	mov	r3, fp
 8009c10:	f7f6 fcf2 	bl	80005f8 <__aeabi_dmul>
 8009c14:	4b82      	ldr	r3, [pc, #520]	; (8009e20 <_dtoa_r+0x628>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	f7f6 fb38 	bl	800028c <__adddf3>
 8009c1c:	46d0      	mov	r8, sl
 8009c1e:	46d9      	mov	r9, fp
 8009c20:	4682      	mov	sl, r0
 8009c22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	d158      	bne.n	8009cdc <_dtoa_r+0x4e4>
 8009c2a:	4b7e      	ldr	r3, [pc, #504]	; (8009e24 <_dtoa_r+0x62c>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 fb29 	bl	8000288 <__aeabi_dsub>
 8009c36:	4652      	mov	r2, sl
 8009c38:	465b      	mov	r3, fp
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	4689      	mov	r9, r1
 8009c3e:	f7f6 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f040 8295 	bne.w	800a172 <_dtoa_r+0x97a>
 8009c48:	4652      	mov	r2, sl
 8009c4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c4e:	4640      	mov	r0, r8
 8009c50:	4649      	mov	r1, r9
 8009c52:	f7f6 ff43 	bl	8000adc <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 8289 	bne.w	800a16e <_dtoa_r+0x976>
 8009c5c:	ec5b ab19 	vmov	sl, fp, d9
 8009c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f2c0 8148 	blt.w	8009ef8 <_dtoa_r+0x700>
 8009c68:	9a00      	ldr	r2, [sp, #0]
 8009c6a:	2a0e      	cmp	r2, #14
 8009c6c:	f300 8144 	bgt.w	8009ef8 <_dtoa_r+0x700>
 8009c70:	4b67      	ldr	r3, [pc, #412]	; (8009e10 <_dtoa_r+0x618>)
 8009c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f280 80d5 	bge.w	8009e2c <_dtoa_r+0x634>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f300 80d1 	bgt.w	8009e2c <_dtoa_r+0x634>
 8009c8a:	f040 826f 	bne.w	800a16c <_dtoa_r+0x974>
 8009c8e:	4b65      	ldr	r3, [pc, #404]	; (8009e24 <_dtoa_r+0x62c>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	f7f6 fcaf 	bl	80005f8 <__aeabi_dmul>
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	f7f6 ff31 	bl	8000b04 <__aeabi_dcmpge>
 8009ca2:	9e03      	ldr	r6, [sp, #12]
 8009ca4:	4637      	mov	r7, r6
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	f040 8245 	bne.w	800a136 <_dtoa_r+0x93e>
 8009cac:	9d01      	ldr	r5, [sp, #4]
 8009cae:	2331      	movs	r3, #49	; 0x31
 8009cb0:	f805 3b01 	strb.w	r3, [r5], #1
 8009cb4:	9b00      	ldr	r3, [sp, #0]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	e240      	b.n	800a13e <_dtoa_r+0x946>
 8009cbc:	07f2      	lsls	r2, r6, #31
 8009cbe:	d505      	bpl.n	8009ccc <_dtoa_r+0x4d4>
 8009cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc4:	f7f6 fc98 	bl	80005f8 <__aeabi_dmul>
 8009cc8:	3501      	adds	r5, #1
 8009cca:	2301      	movs	r3, #1
 8009ccc:	1076      	asrs	r6, r6, #1
 8009cce:	3708      	adds	r7, #8
 8009cd0:	e777      	b.n	8009bc2 <_dtoa_r+0x3ca>
 8009cd2:	2502      	movs	r5, #2
 8009cd4:	e779      	b.n	8009bca <_dtoa_r+0x3d2>
 8009cd6:	9f00      	ldr	r7, [sp, #0]
 8009cd8:	9e03      	ldr	r6, [sp, #12]
 8009cda:	e794      	b.n	8009c06 <_dtoa_r+0x40e>
 8009cdc:	9901      	ldr	r1, [sp, #4]
 8009cde:	4b4c      	ldr	r3, [pc, #304]	; (8009e10 <_dtoa_r+0x618>)
 8009ce0:	4431      	add	r1, r6
 8009ce2:	910d      	str	r1, [sp, #52]	; 0x34
 8009ce4:	9908      	ldr	r1, [sp, #32]
 8009ce6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d043      	beq.n	8009d7a <_dtoa_r+0x582>
 8009cf2:	494d      	ldr	r1, [pc, #308]	; (8009e28 <_dtoa_r+0x630>)
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	f7f6 fda9 	bl	800084c <__aeabi_ddiv>
 8009cfa:	4652      	mov	r2, sl
 8009cfc:	465b      	mov	r3, fp
 8009cfe:	f7f6 fac3 	bl	8000288 <__aeabi_dsub>
 8009d02:	9d01      	ldr	r5, [sp, #4]
 8009d04:	4682      	mov	sl, r0
 8009d06:	468b      	mov	fp, r1
 8009d08:	4649      	mov	r1, r9
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7f6 ff24 	bl	8000b58 <__aeabi_d2iz>
 8009d10:	4606      	mov	r6, r0
 8009d12:	f7f6 fc07 	bl	8000524 <__aeabi_i2d>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	f7f6 fab3 	bl	8000288 <__aeabi_dsub>
 8009d22:	3630      	adds	r6, #48	; 0x30
 8009d24:	f805 6b01 	strb.w	r6, [r5], #1
 8009d28:	4652      	mov	r2, sl
 8009d2a:	465b      	mov	r3, fp
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	f7f6 fed4 	bl	8000adc <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d163      	bne.n	8009e00 <_dtoa_r+0x608>
 8009d38:	4642      	mov	r2, r8
 8009d3a:	464b      	mov	r3, r9
 8009d3c:	4936      	ldr	r1, [pc, #216]	; (8009e18 <_dtoa_r+0x620>)
 8009d3e:	2000      	movs	r0, #0
 8009d40:	f7f6 faa2 	bl	8000288 <__aeabi_dsub>
 8009d44:	4652      	mov	r2, sl
 8009d46:	465b      	mov	r3, fp
 8009d48:	f7f6 fec8 	bl	8000adc <__aeabi_dcmplt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	f040 80b5 	bne.w	8009ebc <_dtoa_r+0x6c4>
 8009d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d54:	429d      	cmp	r5, r3
 8009d56:	d081      	beq.n	8009c5c <_dtoa_r+0x464>
 8009d58:	4b30      	ldr	r3, [pc, #192]	; (8009e1c <_dtoa_r+0x624>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4650      	mov	r0, sl
 8009d5e:	4659      	mov	r1, fp
 8009d60:	f7f6 fc4a 	bl	80005f8 <__aeabi_dmul>
 8009d64:	4b2d      	ldr	r3, [pc, #180]	; (8009e1c <_dtoa_r+0x624>)
 8009d66:	4682      	mov	sl, r0
 8009d68:	468b      	mov	fp, r1
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f7f6 fc42 	bl	80005f8 <__aeabi_dmul>
 8009d74:	4680      	mov	r8, r0
 8009d76:	4689      	mov	r9, r1
 8009d78:	e7c6      	b.n	8009d08 <_dtoa_r+0x510>
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	4659      	mov	r1, fp
 8009d7e:	f7f6 fc3b 	bl	80005f8 <__aeabi_dmul>
 8009d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d84:	9d01      	ldr	r5, [sp, #4]
 8009d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d88:	4682      	mov	sl, r0
 8009d8a:	468b      	mov	fp, r1
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7f6 fee2 	bl	8000b58 <__aeabi_d2iz>
 8009d94:	4606      	mov	r6, r0
 8009d96:	f7f6 fbc5 	bl	8000524 <__aeabi_i2d>
 8009d9a:	3630      	adds	r6, #48	; 0x30
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4640      	mov	r0, r8
 8009da2:	4649      	mov	r1, r9
 8009da4:	f7f6 fa70 	bl	8000288 <__aeabi_dsub>
 8009da8:	f805 6b01 	strb.w	r6, [r5], #1
 8009dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dae:	429d      	cmp	r5, r3
 8009db0:	4680      	mov	r8, r0
 8009db2:	4689      	mov	r9, r1
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	d124      	bne.n	8009e04 <_dtoa_r+0x60c>
 8009dba:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <_dtoa_r+0x630>)
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	f7f6 fa64 	bl	800028c <__adddf3>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fea4 	bl	8000b18 <__aeabi_dcmpgt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d173      	bne.n	8009ebc <_dtoa_r+0x6c4>
 8009dd4:	4652      	mov	r2, sl
 8009dd6:	465b      	mov	r3, fp
 8009dd8:	4913      	ldr	r1, [pc, #76]	; (8009e28 <_dtoa_r+0x630>)
 8009dda:	2000      	movs	r0, #0
 8009ddc:	f7f6 fa54 	bl	8000288 <__aeabi_dsub>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4640      	mov	r0, r8
 8009de6:	4649      	mov	r1, r9
 8009de8:	f7f6 fe78 	bl	8000adc <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f af35 	beq.w	8009c5c <_dtoa_r+0x464>
 8009df2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009df4:	1e6b      	subs	r3, r5, #1
 8009df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dfc:	2b30      	cmp	r3, #48	; 0x30
 8009dfe:	d0f8      	beq.n	8009df2 <_dtoa_r+0x5fa>
 8009e00:	9700      	str	r7, [sp, #0]
 8009e02:	e049      	b.n	8009e98 <_dtoa_r+0x6a0>
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <_dtoa_r+0x624>)
 8009e06:	f7f6 fbf7 	bl	80005f8 <__aeabi_dmul>
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	4689      	mov	r9, r1
 8009e0e:	e7bd      	b.n	8009d8c <_dtoa_r+0x594>
 8009e10:	080102d8 	.word	0x080102d8
 8009e14:	080102b0 	.word	0x080102b0
 8009e18:	3ff00000 	.word	0x3ff00000
 8009e1c:	40240000 	.word	0x40240000
 8009e20:	401c0000 	.word	0x401c0000
 8009e24:	40140000 	.word	0x40140000
 8009e28:	3fe00000 	.word	0x3fe00000
 8009e2c:	9d01      	ldr	r5, [sp, #4]
 8009e2e:	4656      	mov	r6, sl
 8009e30:	465f      	mov	r7, fp
 8009e32:	4642      	mov	r2, r8
 8009e34:	464b      	mov	r3, r9
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	f7f6 fd07 	bl	800084c <__aeabi_ddiv>
 8009e3e:	f7f6 fe8b 	bl	8000b58 <__aeabi_d2iz>
 8009e42:	4682      	mov	sl, r0
 8009e44:	f7f6 fb6e 	bl	8000524 <__aeabi_i2d>
 8009e48:	4642      	mov	r2, r8
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	f7f6 fbd4 	bl	80005f8 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e5c:	f7f6 fa14 	bl	8000288 <__aeabi_dsub>
 8009e60:	f805 6b01 	strb.w	r6, [r5], #1
 8009e64:	9e01      	ldr	r6, [sp, #4]
 8009e66:	9f03      	ldr	r7, [sp, #12]
 8009e68:	1bae      	subs	r6, r5, r6
 8009e6a:	42b7      	cmp	r7, r6
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	d135      	bne.n	8009ede <_dtoa_r+0x6e6>
 8009e72:	f7f6 fa0b 	bl	800028c <__adddf3>
 8009e76:	4642      	mov	r2, r8
 8009e78:	464b      	mov	r3, r9
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	f7f6 fe4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e82:	b9d0      	cbnz	r0, 8009eba <_dtoa_r+0x6c2>
 8009e84:	4642      	mov	r2, r8
 8009e86:	464b      	mov	r3, r9
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e90:	b110      	cbz	r0, 8009e98 <_dtoa_r+0x6a0>
 8009e92:	f01a 0f01 	tst.w	sl, #1
 8009e96:	d110      	bne.n	8009eba <_dtoa_r+0x6c2>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	ee18 1a10 	vmov	r1, s16
 8009e9e:	f000 fe75 	bl	800ab8c <_Bfree>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9800      	ldr	r0, [sp, #0]
 8009ea6:	702b      	strb	r3, [r5, #0]
 8009ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eaa:	3001      	adds	r0, #1
 8009eac:	6018      	str	r0, [r3, #0]
 8009eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f43f acf1 	beq.w	8009898 <_dtoa_r+0xa0>
 8009eb6:	601d      	str	r5, [r3, #0]
 8009eb8:	e4ee      	b.n	8009898 <_dtoa_r+0xa0>
 8009eba:	9f00      	ldr	r7, [sp, #0]
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ec4:	2a39      	cmp	r2, #57	; 0x39
 8009ec6:	d106      	bne.n	8009ed6 <_dtoa_r+0x6de>
 8009ec8:	9a01      	ldr	r2, [sp, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d1f7      	bne.n	8009ebe <_dtoa_r+0x6c6>
 8009ece:	9901      	ldr	r1, [sp, #4]
 8009ed0:	2230      	movs	r2, #48	; 0x30
 8009ed2:	3701      	adds	r7, #1
 8009ed4:	700a      	strb	r2, [r1, #0]
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	3201      	adds	r2, #1
 8009eda:	701a      	strb	r2, [r3, #0]
 8009edc:	e790      	b.n	8009e00 <_dtoa_r+0x608>
 8009ede:	4ba6      	ldr	r3, [pc, #664]	; (800a178 <_dtoa_r+0x980>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f7f6 fb89 	bl	80005f8 <__aeabi_dmul>
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	f7f6 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d09d      	beq.n	8009e32 <_dtoa_r+0x63a>
 8009ef6:	e7cf      	b.n	8009e98 <_dtoa_r+0x6a0>
 8009ef8:	9a08      	ldr	r2, [sp, #32]
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	f000 80d7 	beq.w	800a0ae <_dtoa_r+0x8b6>
 8009f00:	9a06      	ldr	r2, [sp, #24]
 8009f02:	2a01      	cmp	r2, #1
 8009f04:	f300 80ba 	bgt.w	800a07c <_dtoa_r+0x884>
 8009f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	f000 80b2 	beq.w	800a074 <_dtoa_r+0x87c>
 8009f10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f14:	9e07      	ldr	r6, [sp, #28]
 8009f16:	9d04      	ldr	r5, [sp, #16]
 8009f18:	9a04      	ldr	r2, [sp, #16]
 8009f1a:	441a      	add	r2, r3
 8009f1c:	9204      	str	r2, [sp, #16]
 8009f1e:	9a05      	ldr	r2, [sp, #20]
 8009f20:	2101      	movs	r1, #1
 8009f22:	441a      	add	r2, r3
 8009f24:	4620      	mov	r0, r4
 8009f26:	9205      	str	r2, [sp, #20]
 8009f28:	f000 ff32 	bl	800ad90 <__i2b>
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	dd0c      	ble.n	8009f4c <_dtoa_r+0x754>
 8009f32:	9b05      	ldr	r3, [sp, #20]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dd09      	ble.n	8009f4c <_dtoa_r+0x754>
 8009f38:	42ab      	cmp	r3, r5
 8009f3a:	9a04      	ldr	r2, [sp, #16]
 8009f3c:	bfa8      	it	ge
 8009f3e:	462b      	movge	r3, r5
 8009f40:	1ad2      	subs	r2, r2, r3
 8009f42:	9204      	str	r2, [sp, #16]
 8009f44:	9a05      	ldr	r2, [sp, #20]
 8009f46:	1aed      	subs	r5, r5, r3
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	9b07      	ldr	r3, [sp, #28]
 8009f4e:	b31b      	cbz	r3, 8009f98 <_dtoa_r+0x7a0>
 8009f50:	9b08      	ldr	r3, [sp, #32]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80af 	beq.w	800a0b6 <_dtoa_r+0x8be>
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	dd13      	ble.n	8009f84 <_dtoa_r+0x78c>
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	4632      	mov	r2, r6
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 ffd5 	bl	800af10 <__pow5mult>
 8009f66:	ee18 2a10 	vmov	r2, s16
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 ff24 	bl	800adbc <__multiply>
 8009f74:	ee18 1a10 	vmov	r1, s16
 8009f78:	4680      	mov	r8, r0
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fe06 	bl	800ab8c <_Bfree>
 8009f80:	ee08 8a10 	vmov	s16, r8
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	1b9a      	subs	r2, r3, r6
 8009f88:	d006      	beq.n	8009f98 <_dtoa_r+0x7a0>
 8009f8a:	ee18 1a10 	vmov	r1, s16
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 ffbe 	bl	800af10 <__pow5mult>
 8009f94:	ee08 0a10 	vmov	s16, r0
 8009f98:	2101      	movs	r1, #1
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 fef8 	bl	800ad90 <__i2b>
 8009fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	f340 8088 	ble.w	800a0ba <_dtoa_r+0x8c2>
 8009faa:	461a      	mov	r2, r3
 8009fac:	4601      	mov	r1, r0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 ffae 	bl	800af10 <__pow5mult>
 8009fb4:	9b06      	ldr	r3, [sp, #24]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	4606      	mov	r6, r0
 8009fba:	f340 8081 	ble.w	800a0c0 <_dtoa_r+0x8c8>
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	6933      	ldr	r3, [r6, #16]
 8009fc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fc8:	6918      	ldr	r0, [r3, #16]
 8009fca:	f000 fe91 	bl	800acf0 <__hi0bits>
 8009fce:	f1c0 0020 	rsb	r0, r0, #32
 8009fd2:	9b05      	ldr	r3, [sp, #20]
 8009fd4:	4418      	add	r0, r3
 8009fd6:	f010 001f 	ands.w	r0, r0, #31
 8009fda:	f000 8092 	beq.w	800a102 <_dtoa_r+0x90a>
 8009fde:	f1c0 0320 	rsb	r3, r0, #32
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	f340 808a 	ble.w	800a0fc <_dtoa_r+0x904>
 8009fe8:	f1c0 001c 	rsb	r0, r0, #28
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	4403      	add	r3, r0
 8009ff0:	9304      	str	r3, [sp, #16]
 8009ff2:	9b05      	ldr	r3, [sp, #20]
 8009ff4:	4403      	add	r3, r0
 8009ff6:	4405      	add	r5, r0
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dd07      	ble.n	800a010 <_dtoa_r+0x818>
 800a000:	ee18 1a10 	vmov	r1, s16
 800a004:	461a      	mov	r2, r3
 800a006:	4620      	mov	r0, r4
 800a008:	f000 ffdc 	bl	800afc4 <__lshift>
 800a00c:	ee08 0a10 	vmov	s16, r0
 800a010:	9b05      	ldr	r3, [sp, #20]
 800a012:	2b00      	cmp	r3, #0
 800a014:	dd05      	ble.n	800a022 <_dtoa_r+0x82a>
 800a016:	4631      	mov	r1, r6
 800a018:	461a      	mov	r2, r3
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 ffd2 	bl	800afc4 <__lshift>
 800a020:	4606      	mov	r6, r0
 800a022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d06e      	beq.n	800a106 <_dtoa_r+0x90e>
 800a028:	ee18 0a10 	vmov	r0, s16
 800a02c:	4631      	mov	r1, r6
 800a02e:	f001 f839 	bl	800b0a4 <__mcmp>
 800a032:	2800      	cmp	r0, #0
 800a034:	da67      	bge.n	800a106 <_dtoa_r+0x90e>
 800a036:	9b00      	ldr	r3, [sp, #0]
 800a038:	3b01      	subs	r3, #1
 800a03a:	ee18 1a10 	vmov	r1, s16
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	220a      	movs	r2, #10
 800a042:	2300      	movs	r3, #0
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fdc3 	bl	800abd0 <__multadd>
 800a04a:	9b08      	ldr	r3, [sp, #32]
 800a04c:	ee08 0a10 	vmov	s16, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 81b1 	beq.w	800a3b8 <_dtoa_r+0xbc0>
 800a056:	2300      	movs	r3, #0
 800a058:	4639      	mov	r1, r7
 800a05a:	220a      	movs	r2, #10
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 fdb7 	bl	800abd0 <__multadd>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	4607      	mov	r7, r0
 800a068:	f300 808e 	bgt.w	800a188 <_dtoa_r+0x990>
 800a06c:	9b06      	ldr	r3, [sp, #24]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	dc51      	bgt.n	800a116 <_dtoa_r+0x91e>
 800a072:	e089      	b.n	800a188 <_dtoa_r+0x990>
 800a074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a07a:	e74b      	b.n	8009f14 <_dtoa_r+0x71c>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	1e5e      	subs	r6, r3, #1
 800a080:	9b07      	ldr	r3, [sp, #28]
 800a082:	42b3      	cmp	r3, r6
 800a084:	bfbf      	itttt	lt
 800a086:	9b07      	ldrlt	r3, [sp, #28]
 800a088:	9607      	strlt	r6, [sp, #28]
 800a08a:	1af2      	sublt	r2, r6, r3
 800a08c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a08e:	bfb6      	itet	lt
 800a090:	189b      	addlt	r3, r3, r2
 800a092:	1b9e      	subge	r6, r3, r6
 800a094:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	bfb8      	it	lt
 800a09a:	2600      	movlt	r6, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfb7      	itett	lt
 800a0a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a0a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a0a8:	1a9d      	sublt	r5, r3, r2
 800a0aa:	2300      	movlt	r3, #0
 800a0ac:	e734      	b.n	8009f18 <_dtoa_r+0x720>
 800a0ae:	9e07      	ldr	r6, [sp, #28]
 800a0b0:	9d04      	ldr	r5, [sp, #16]
 800a0b2:	9f08      	ldr	r7, [sp, #32]
 800a0b4:	e73b      	b.n	8009f2e <_dtoa_r+0x736>
 800a0b6:	9a07      	ldr	r2, [sp, #28]
 800a0b8:	e767      	b.n	8009f8a <_dtoa_r+0x792>
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	dc18      	bgt.n	800a0f2 <_dtoa_r+0x8fa>
 800a0c0:	f1ba 0f00 	cmp.w	sl, #0
 800a0c4:	d115      	bne.n	800a0f2 <_dtoa_r+0x8fa>
 800a0c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ca:	b993      	cbnz	r3, 800a0f2 <_dtoa_r+0x8fa>
 800a0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0d0:	0d1b      	lsrs	r3, r3, #20
 800a0d2:	051b      	lsls	r3, r3, #20
 800a0d4:	b183      	cbz	r3, 800a0f8 <_dtoa_r+0x900>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	9b05      	ldr	r3, [sp, #20]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	f04f 0801 	mov.w	r8, #1
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f47f af6a 	bne.w	8009fc2 <_dtoa_r+0x7ca>
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e76f      	b.n	8009fd2 <_dtoa_r+0x7da>
 800a0f2:	f04f 0800 	mov.w	r8, #0
 800a0f6:	e7f6      	b.n	800a0e6 <_dtoa_r+0x8ee>
 800a0f8:	4698      	mov	r8, r3
 800a0fa:	e7f4      	b.n	800a0e6 <_dtoa_r+0x8ee>
 800a0fc:	f43f af7d 	beq.w	8009ffa <_dtoa_r+0x802>
 800a100:	4618      	mov	r0, r3
 800a102:	301c      	adds	r0, #28
 800a104:	e772      	b.n	8009fec <_dtoa_r+0x7f4>
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dc37      	bgt.n	800a17c <_dtoa_r+0x984>
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	dd34      	ble.n	800a17c <_dtoa_r+0x984>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	9b02      	ldr	r3, [sp, #8]
 800a118:	b96b      	cbnz	r3, 800a136 <_dtoa_r+0x93e>
 800a11a:	4631      	mov	r1, r6
 800a11c:	2205      	movs	r2, #5
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 fd56 	bl	800abd0 <__multadd>
 800a124:	4601      	mov	r1, r0
 800a126:	4606      	mov	r6, r0
 800a128:	ee18 0a10 	vmov	r0, s16
 800a12c:	f000 ffba 	bl	800b0a4 <__mcmp>
 800a130:	2800      	cmp	r0, #0
 800a132:	f73f adbb 	bgt.w	8009cac <_dtoa_r+0x4b4>
 800a136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a138:	9d01      	ldr	r5, [sp, #4]
 800a13a:	43db      	mvns	r3, r3
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	4631      	mov	r1, r6
 800a144:	4620      	mov	r0, r4
 800a146:	f000 fd21 	bl	800ab8c <_Bfree>
 800a14a:	2f00      	cmp	r7, #0
 800a14c:	f43f aea4 	beq.w	8009e98 <_dtoa_r+0x6a0>
 800a150:	f1b8 0f00 	cmp.w	r8, #0
 800a154:	d005      	beq.n	800a162 <_dtoa_r+0x96a>
 800a156:	45b8      	cmp	r8, r7
 800a158:	d003      	beq.n	800a162 <_dtoa_r+0x96a>
 800a15a:	4641      	mov	r1, r8
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fd15 	bl	800ab8c <_Bfree>
 800a162:	4639      	mov	r1, r7
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fd11 	bl	800ab8c <_Bfree>
 800a16a:	e695      	b.n	8009e98 <_dtoa_r+0x6a0>
 800a16c:	2600      	movs	r6, #0
 800a16e:	4637      	mov	r7, r6
 800a170:	e7e1      	b.n	800a136 <_dtoa_r+0x93e>
 800a172:	9700      	str	r7, [sp, #0]
 800a174:	4637      	mov	r7, r6
 800a176:	e599      	b.n	8009cac <_dtoa_r+0x4b4>
 800a178:	40240000 	.word	0x40240000
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 80ca 	beq.w	800a318 <_dtoa_r+0xb20>
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	9302      	str	r3, [sp, #8]
 800a188:	2d00      	cmp	r5, #0
 800a18a:	dd05      	ble.n	800a198 <_dtoa_r+0x9a0>
 800a18c:	4639      	mov	r1, r7
 800a18e:	462a      	mov	r2, r5
 800a190:	4620      	mov	r0, r4
 800a192:	f000 ff17 	bl	800afc4 <__lshift>
 800a196:	4607      	mov	r7, r0
 800a198:	f1b8 0f00 	cmp.w	r8, #0
 800a19c:	d05b      	beq.n	800a256 <_dtoa_r+0xa5e>
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fcb3 	bl	800ab0c <_Balloc>
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	b928      	cbnz	r0, 800a1b6 <_dtoa_r+0x9be>
 800a1aa:	4b87      	ldr	r3, [pc, #540]	; (800a3c8 <_dtoa_r+0xbd0>)
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1b2:	f7ff bb3b 	b.w	800982c <_dtoa_r+0x34>
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	0092      	lsls	r2, r2, #2
 800a1bc:	f107 010c 	add.w	r1, r7, #12
 800a1c0:	300c      	adds	r0, #12
 800a1c2:	f000 fc95 	bl	800aaf0 <memcpy>
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fefa 	bl	800afc4 <__lshift>
 800a1d0:	9b01      	ldr	r3, [sp, #4]
 800a1d2:	f103 0901 	add.w	r9, r3, #1
 800a1d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1da:	4413      	add	r3, r2
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	f00a 0301 	and.w	r3, sl, #1
 800a1e2:	46b8      	mov	r8, r7
 800a1e4:	9304      	str	r3, [sp, #16]
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	ee18 0a10 	vmov	r0, s16
 800a1ee:	f7ff fa77 	bl	80096e0 <quorem>
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	9002      	str	r0, [sp, #8]
 800a1f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1fa:	ee18 0a10 	vmov	r0, s16
 800a1fe:	f000 ff51 	bl	800b0a4 <__mcmp>
 800a202:	463a      	mov	r2, r7
 800a204:	9003      	str	r0, [sp, #12]
 800a206:	4631      	mov	r1, r6
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 ff67 	bl	800b0dc <__mdiff>
 800a20e:	68c2      	ldr	r2, [r0, #12]
 800a210:	f109 3bff 	add.w	fp, r9, #4294967295
 800a214:	4605      	mov	r5, r0
 800a216:	bb02      	cbnz	r2, 800a25a <_dtoa_r+0xa62>
 800a218:	4601      	mov	r1, r0
 800a21a:	ee18 0a10 	vmov	r0, s16
 800a21e:	f000 ff41 	bl	800b0a4 <__mcmp>
 800a222:	4602      	mov	r2, r0
 800a224:	4629      	mov	r1, r5
 800a226:	4620      	mov	r0, r4
 800a228:	9207      	str	r2, [sp, #28]
 800a22a:	f000 fcaf 	bl	800ab8c <_Bfree>
 800a22e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a232:	ea43 0102 	orr.w	r1, r3, r2
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	430b      	orrs	r3, r1
 800a23a:	464d      	mov	r5, r9
 800a23c:	d10f      	bne.n	800a25e <_dtoa_r+0xa66>
 800a23e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a242:	d02a      	beq.n	800a29a <_dtoa_r+0xaa2>
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dd02      	ble.n	800a250 <_dtoa_r+0xa58>
 800a24a:	9b02      	ldr	r3, [sp, #8]
 800a24c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a250:	f88b a000 	strb.w	sl, [fp]
 800a254:	e775      	b.n	800a142 <_dtoa_r+0x94a>
 800a256:	4638      	mov	r0, r7
 800a258:	e7ba      	b.n	800a1d0 <_dtoa_r+0x9d8>
 800a25a:	2201      	movs	r2, #1
 800a25c:	e7e2      	b.n	800a224 <_dtoa_r+0xa2c>
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	db04      	blt.n	800a26e <_dtoa_r+0xa76>
 800a264:	9906      	ldr	r1, [sp, #24]
 800a266:	430b      	orrs	r3, r1
 800a268:	9904      	ldr	r1, [sp, #16]
 800a26a:	430b      	orrs	r3, r1
 800a26c:	d122      	bne.n	800a2b4 <_dtoa_r+0xabc>
 800a26e:	2a00      	cmp	r2, #0
 800a270:	ddee      	ble.n	800a250 <_dtoa_r+0xa58>
 800a272:	ee18 1a10 	vmov	r1, s16
 800a276:	2201      	movs	r2, #1
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fea3 	bl	800afc4 <__lshift>
 800a27e:	4631      	mov	r1, r6
 800a280:	ee08 0a10 	vmov	s16, r0
 800a284:	f000 ff0e 	bl	800b0a4 <__mcmp>
 800a288:	2800      	cmp	r0, #0
 800a28a:	dc03      	bgt.n	800a294 <_dtoa_r+0xa9c>
 800a28c:	d1e0      	bne.n	800a250 <_dtoa_r+0xa58>
 800a28e:	f01a 0f01 	tst.w	sl, #1
 800a292:	d0dd      	beq.n	800a250 <_dtoa_r+0xa58>
 800a294:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a298:	d1d7      	bne.n	800a24a <_dtoa_r+0xa52>
 800a29a:	2339      	movs	r3, #57	; 0x39
 800a29c:	f88b 3000 	strb.w	r3, [fp]
 800a2a0:	462b      	mov	r3, r5
 800a2a2:	461d      	mov	r5, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2aa:	2a39      	cmp	r2, #57	; 0x39
 800a2ac:	d071      	beq.n	800a392 <_dtoa_r+0xb9a>
 800a2ae:	3201      	adds	r2, #1
 800a2b0:	701a      	strb	r2, [r3, #0]
 800a2b2:	e746      	b.n	800a142 <_dtoa_r+0x94a>
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	dd07      	ble.n	800a2c8 <_dtoa_r+0xad0>
 800a2b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2bc:	d0ed      	beq.n	800a29a <_dtoa_r+0xaa2>
 800a2be:	f10a 0301 	add.w	r3, sl, #1
 800a2c2:	f88b 3000 	strb.w	r3, [fp]
 800a2c6:	e73c      	b.n	800a142 <_dtoa_r+0x94a>
 800a2c8:	9b05      	ldr	r3, [sp, #20]
 800a2ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2ce:	4599      	cmp	r9, r3
 800a2d0:	d047      	beq.n	800a362 <_dtoa_r+0xb6a>
 800a2d2:	ee18 1a10 	vmov	r1, s16
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	220a      	movs	r2, #10
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fc78 	bl	800abd0 <__multadd>
 800a2e0:	45b8      	cmp	r8, r7
 800a2e2:	ee08 0a10 	vmov	s16, r0
 800a2e6:	f04f 0300 	mov.w	r3, #0
 800a2ea:	f04f 020a 	mov.w	r2, #10
 800a2ee:	4641      	mov	r1, r8
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	d106      	bne.n	800a302 <_dtoa_r+0xb0a>
 800a2f4:	f000 fc6c 	bl	800abd0 <__multadd>
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	f109 0901 	add.w	r9, r9, #1
 800a300:	e772      	b.n	800a1e8 <_dtoa_r+0x9f0>
 800a302:	f000 fc65 	bl	800abd0 <__multadd>
 800a306:	4639      	mov	r1, r7
 800a308:	4680      	mov	r8, r0
 800a30a:	2300      	movs	r3, #0
 800a30c:	220a      	movs	r2, #10
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 fc5e 	bl	800abd0 <__multadd>
 800a314:	4607      	mov	r7, r0
 800a316:	e7f1      	b.n	800a2fc <_dtoa_r+0xb04>
 800a318:	9b03      	ldr	r3, [sp, #12]
 800a31a:	9302      	str	r3, [sp, #8]
 800a31c:	9d01      	ldr	r5, [sp, #4]
 800a31e:	ee18 0a10 	vmov	r0, s16
 800a322:	4631      	mov	r1, r6
 800a324:	f7ff f9dc 	bl	80096e0 <quorem>
 800a328:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a32c:	9b01      	ldr	r3, [sp, #4]
 800a32e:	f805 ab01 	strb.w	sl, [r5], #1
 800a332:	1aea      	subs	r2, r5, r3
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	4293      	cmp	r3, r2
 800a338:	dd09      	ble.n	800a34e <_dtoa_r+0xb56>
 800a33a:	ee18 1a10 	vmov	r1, s16
 800a33e:	2300      	movs	r3, #0
 800a340:	220a      	movs	r2, #10
 800a342:	4620      	mov	r0, r4
 800a344:	f000 fc44 	bl	800abd0 <__multadd>
 800a348:	ee08 0a10 	vmov	s16, r0
 800a34c:	e7e7      	b.n	800a31e <_dtoa_r+0xb26>
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	bfc8      	it	gt
 800a354:	461d      	movgt	r5, r3
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	bfd8      	it	le
 800a35a:	2501      	movle	r5, #1
 800a35c:	441d      	add	r5, r3
 800a35e:	f04f 0800 	mov.w	r8, #0
 800a362:	ee18 1a10 	vmov	r1, s16
 800a366:	2201      	movs	r2, #1
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 fe2b 	bl	800afc4 <__lshift>
 800a36e:	4631      	mov	r1, r6
 800a370:	ee08 0a10 	vmov	s16, r0
 800a374:	f000 fe96 	bl	800b0a4 <__mcmp>
 800a378:	2800      	cmp	r0, #0
 800a37a:	dc91      	bgt.n	800a2a0 <_dtoa_r+0xaa8>
 800a37c:	d102      	bne.n	800a384 <_dtoa_r+0xb8c>
 800a37e:	f01a 0f01 	tst.w	sl, #1
 800a382:	d18d      	bne.n	800a2a0 <_dtoa_r+0xaa8>
 800a384:	462b      	mov	r3, r5
 800a386:	461d      	mov	r5, r3
 800a388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a38c:	2a30      	cmp	r2, #48	; 0x30
 800a38e:	d0fa      	beq.n	800a386 <_dtoa_r+0xb8e>
 800a390:	e6d7      	b.n	800a142 <_dtoa_r+0x94a>
 800a392:	9a01      	ldr	r2, [sp, #4]
 800a394:	429a      	cmp	r2, r3
 800a396:	d184      	bne.n	800a2a2 <_dtoa_r+0xaaa>
 800a398:	9b00      	ldr	r3, [sp, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2331      	movs	r3, #49	; 0x31
 800a3a0:	7013      	strb	r3, [r2, #0]
 800a3a2:	e6ce      	b.n	800a142 <_dtoa_r+0x94a>
 800a3a4:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <_dtoa_r+0xbd4>)
 800a3a6:	f7ff ba95 	b.w	80098d4 <_dtoa_r+0xdc>
 800a3aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f47f aa6e 	bne.w	800988e <_dtoa_r+0x96>
 800a3b2:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <_dtoa_r+0xbd8>)
 800a3b4:	f7ff ba8e 	b.w	80098d4 <_dtoa_r+0xdc>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dcae      	bgt.n	800a31c <_dtoa_r+0xb24>
 800a3be:	9b06      	ldr	r3, [sp, #24]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	f73f aea8 	bgt.w	800a116 <_dtoa_r+0x91e>
 800a3c6:	e7a9      	b.n	800a31c <_dtoa_r+0xb24>
 800a3c8:	080101c8 	.word	0x080101c8
 800a3cc:	0800ffc8 	.word	0x0800ffc8
 800a3d0:	08010149 	.word	0x08010149

0800a3d4 <rshift>:
 800a3d4:	6903      	ldr	r3, [r0, #16]
 800a3d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3e2:	f100 0414 	add.w	r4, r0, #20
 800a3e6:	dd45      	ble.n	800a474 <rshift+0xa0>
 800a3e8:	f011 011f 	ands.w	r1, r1, #31
 800a3ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3f4:	d10c      	bne.n	800a410 <rshift+0x3c>
 800a3f6:	f100 0710 	add.w	r7, r0, #16
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	42b1      	cmp	r1, r6
 800a3fe:	d334      	bcc.n	800a46a <rshift+0x96>
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	1eea      	subs	r2, r5, #3
 800a406:	4296      	cmp	r6, r2
 800a408:	bf38      	it	cc
 800a40a:	2300      	movcc	r3, #0
 800a40c:	4423      	add	r3, r4
 800a40e:	e015      	b.n	800a43c <rshift+0x68>
 800a410:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a414:	f1c1 0820 	rsb	r8, r1, #32
 800a418:	40cf      	lsrs	r7, r1
 800a41a:	f105 0e04 	add.w	lr, r5, #4
 800a41e:	46a1      	mov	r9, r4
 800a420:	4576      	cmp	r6, lr
 800a422:	46f4      	mov	ip, lr
 800a424:	d815      	bhi.n	800a452 <rshift+0x7e>
 800a426:	1a9a      	subs	r2, r3, r2
 800a428:	0092      	lsls	r2, r2, #2
 800a42a:	3a04      	subs	r2, #4
 800a42c:	3501      	adds	r5, #1
 800a42e:	42ae      	cmp	r6, r5
 800a430:	bf38      	it	cc
 800a432:	2200      	movcc	r2, #0
 800a434:	18a3      	adds	r3, r4, r2
 800a436:	50a7      	str	r7, [r4, r2]
 800a438:	b107      	cbz	r7, 800a43c <rshift+0x68>
 800a43a:	3304      	adds	r3, #4
 800a43c:	1b1a      	subs	r2, r3, r4
 800a43e:	42a3      	cmp	r3, r4
 800a440:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a444:	bf08      	it	eq
 800a446:	2300      	moveq	r3, #0
 800a448:	6102      	str	r2, [r0, #16]
 800a44a:	bf08      	it	eq
 800a44c:	6143      	streq	r3, [r0, #20]
 800a44e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a452:	f8dc c000 	ldr.w	ip, [ip]
 800a456:	fa0c fc08 	lsl.w	ip, ip, r8
 800a45a:	ea4c 0707 	orr.w	r7, ip, r7
 800a45e:	f849 7b04 	str.w	r7, [r9], #4
 800a462:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a466:	40cf      	lsrs	r7, r1
 800a468:	e7da      	b.n	800a420 <rshift+0x4c>
 800a46a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a46e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a472:	e7c3      	b.n	800a3fc <rshift+0x28>
 800a474:	4623      	mov	r3, r4
 800a476:	e7e1      	b.n	800a43c <rshift+0x68>

0800a478 <__hexdig_fun>:
 800a478:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a47c:	2b09      	cmp	r3, #9
 800a47e:	d802      	bhi.n	800a486 <__hexdig_fun+0xe>
 800a480:	3820      	subs	r0, #32
 800a482:	b2c0      	uxtb	r0, r0
 800a484:	4770      	bx	lr
 800a486:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d801      	bhi.n	800a492 <__hexdig_fun+0x1a>
 800a48e:	3847      	subs	r0, #71	; 0x47
 800a490:	e7f7      	b.n	800a482 <__hexdig_fun+0xa>
 800a492:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a496:	2b05      	cmp	r3, #5
 800a498:	d801      	bhi.n	800a49e <__hexdig_fun+0x26>
 800a49a:	3827      	subs	r0, #39	; 0x27
 800a49c:	e7f1      	b.n	800a482 <__hexdig_fun+0xa>
 800a49e:	2000      	movs	r0, #0
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <__gethex>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	ed2d 8b02 	vpush	{d8}
 800a4ac:	b089      	sub	sp, #36	; 0x24
 800a4ae:	ee08 0a10 	vmov	s16, r0
 800a4b2:	9304      	str	r3, [sp, #16]
 800a4b4:	4bb4      	ldr	r3, [pc, #720]	; (800a788 <__gethex+0x2e4>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	468b      	mov	fp, r1
 800a4be:	4690      	mov	r8, r2
 800a4c0:	f7f5 fe86 	bl	80001d0 <strlen>
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	f8db 2000 	ldr.w	r2, [fp]
 800a4ca:	4403      	add	r3, r0
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4d2:	9305      	str	r3, [sp, #20]
 800a4d4:	1c93      	adds	r3, r2, #2
 800a4d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4de:	32fe      	adds	r2, #254	; 0xfe
 800a4e0:	18d1      	adds	r1, r2, r3
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4e8:	9100      	str	r1, [sp, #0]
 800a4ea:	2830      	cmp	r0, #48	; 0x30
 800a4ec:	d0f8      	beq.n	800a4e0 <__gethex+0x3c>
 800a4ee:	f7ff ffc3 	bl	800a478 <__hexdig_fun>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d13a      	bne.n	800a56e <__gethex+0xca>
 800a4f8:	9901      	ldr	r1, [sp, #4]
 800a4fa:	4652      	mov	r2, sl
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	f001 fa33 	bl	800b968 <strncmp>
 800a502:	4605      	mov	r5, r0
 800a504:	2800      	cmp	r0, #0
 800a506:	d168      	bne.n	800a5da <__gethex+0x136>
 800a508:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a50c:	eb07 060a 	add.w	r6, r7, sl
 800a510:	f7ff ffb2 	bl	800a478 <__hexdig_fun>
 800a514:	2800      	cmp	r0, #0
 800a516:	d062      	beq.n	800a5de <__gethex+0x13a>
 800a518:	4633      	mov	r3, r6
 800a51a:	7818      	ldrb	r0, [r3, #0]
 800a51c:	2830      	cmp	r0, #48	; 0x30
 800a51e:	461f      	mov	r7, r3
 800a520:	f103 0301 	add.w	r3, r3, #1
 800a524:	d0f9      	beq.n	800a51a <__gethex+0x76>
 800a526:	f7ff ffa7 	bl	800a478 <__hexdig_fun>
 800a52a:	2301      	movs	r3, #1
 800a52c:	fab0 f480 	clz	r4, r0
 800a530:	0964      	lsrs	r4, r4, #5
 800a532:	4635      	mov	r5, r6
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	463a      	mov	r2, r7
 800a538:	4616      	mov	r6, r2
 800a53a:	3201      	adds	r2, #1
 800a53c:	7830      	ldrb	r0, [r6, #0]
 800a53e:	f7ff ff9b 	bl	800a478 <__hexdig_fun>
 800a542:	2800      	cmp	r0, #0
 800a544:	d1f8      	bne.n	800a538 <__gethex+0x94>
 800a546:	9901      	ldr	r1, [sp, #4]
 800a548:	4652      	mov	r2, sl
 800a54a:	4630      	mov	r0, r6
 800a54c:	f001 fa0c 	bl	800b968 <strncmp>
 800a550:	b980      	cbnz	r0, 800a574 <__gethex+0xd0>
 800a552:	b94d      	cbnz	r5, 800a568 <__gethex+0xc4>
 800a554:	eb06 050a 	add.w	r5, r6, sl
 800a558:	462a      	mov	r2, r5
 800a55a:	4616      	mov	r6, r2
 800a55c:	3201      	adds	r2, #1
 800a55e:	7830      	ldrb	r0, [r6, #0]
 800a560:	f7ff ff8a 	bl	800a478 <__hexdig_fun>
 800a564:	2800      	cmp	r0, #0
 800a566:	d1f8      	bne.n	800a55a <__gethex+0xb6>
 800a568:	1bad      	subs	r5, r5, r6
 800a56a:	00ad      	lsls	r5, r5, #2
 800a56c:	e004      	b.n	800a578 <__gethex+0xd4>
 800a56e:	2400      	movs	r4, #0
 800a570:	4625      	mov	r5, r4
 800a572:	e7e0      	b.n	800a536 <__gethex+0x92>
 800a574:	2d00      	cmp	r5, #0
 800a576:	d1f7      	bne.n	800a568 <__gethex+0xc4>
 800a578:	7833      	ldrb	r3, [r6, #0]
 800a57a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a57e:	2b50      	cmp	r3, #80	; 0x50
 800a580:	d13b      	bne.n	800a5fa <__gethex+0x156>
 800a582:	7873      	ldrb	r3, [r6, #1]
 800a584:	2b2b      	cmp	r3, #43	; 0x2b
 800a586:	d02c      	beq.n	800a5e2 <__gethex+0x13e>
 800a588:	2b2d      	cmp	r3, #45	; 0x2d
 800a58a:	d02e      	beq.n	800a5ea <__gethex+0x146>
 800a58c:	1c71      	adds	r1, r6, #1
 800a58e:	f04f 0900 	mov.w	r9, #0
 800a592:	7808      	ldrb	r0, [r1, #0]
 800a594:	f7ff ff70 	bl	800a478 <__hexdig_fun>
 800a598:	1e43      	subs	r3, r0, #1
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b18      	cmp	r3, #24
 800a59e:	d82c      	bhi.n	800a5fa <__gethex+0x156>
 800a5a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a5a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5a8:	f7ff ff66 	bl	800a478 <__hexdig_fun>
 800a5ac:	1e43      	subs	r3, r0, #1
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b18      	cmp	r3, #24
 800a5b2:	d91d      	bls.n	800a5f0 <__gethex+0x14c>
 800a5b4:	f1b9 0f00 	cmp.w	r9, #0
 800a5b8:	d000      	beq.n	800a5bc <__gethex+0x118>
 800a5ba:	4252      	negs	r2, r2
 800a5bc:	4415      	add	r5, r2
 800a5be:	f8cb 1000 	str.w	r1, [fp]
 800a5c2:	b1e4      	cbz	r4, 800a5fe <__gethex+0x15a>
 800a5c4:	9b00      	ldr	r3, [sp, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	bf14      	ite	ne
 800a5ca:	2700      	movne	r7, #0
 800a5cc:	2706      	moveq	r7, #6
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	b009      	add	sp, #36	; 0x24
 800a5d2:	ecbd 8b02 	vpop	{d8}
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	463e      	mov	r6, r7
 800a5dc:	4625      	mov	r5, r4
 800a5de:	2401      	movs	r4, #1
 800a5e0:	e7ca      	b.n	800a578 <__gethex+0xd4>
 800a5e2:	f04f 0900 	mov.w	r9, #0
 800a5e6:	1cb1      	adds	r1, r6, #2
 800a5e8:	e7d3      	b.n	800a592 <__gethex+0xee>
 800a5ea:	f04f 0901 	mov.w	r9, #1
 800a5ee:	e7fa      	b.n	800a5e6 <__gethex+0x142>
 800a5f0:	230a      	movs	r3, #10
 800a5f2:	fb03 0202 	mla	r2, r3, r2, r0
 800a5f6:	3a10      	subs	r2, #16
 800a5f8:	e7d4      	b.n	800a5a4 <__gethex+0x100>
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	e7df      	b.n	800a5be <__gethex+0x11a>
 800a5fe:	1bf3      	subs	r3, r6, r7
 800a600:	3b01      	subs	r3, #1
 800a602:	4621      	mov	r1, r4
 800a604:	2b07      	cmp	r3, #7
 800a606:	dc0b      	bgt.n	800a620 <__gethex+0x17c>
 800a608:	ee18 0a10 	vmov	r0, s16
 800a60c:	f000 fa7e 	bl	800ab0c <_Balloc>
 800a610:	4604      	mov	r4, r0
 800a612:	b940      	cbnz	r0, 800a626 <__gethex+0x182>
 800a614:	4b5d      	ldr	r3, [pc, #372]	; (800a78c <__gethex+0x2e8>)
 800a616:	4602      	mov	r2, r0
 800a618:	21de      	movs	r1, #222	; 0xde
 800a61a:	485d      	ldr	r0, [pc, #372]	; (800a790 <__gethex+0x2ec>)
 800a61c:	f001 f9c6 	bl	800b9ac <__assert_func>
 800a620:	3101      	adds	r1, #1
 800a622:	105b      	asrs	r3, r3, #1
 800a624:	e7ee      	b.n	800a604 <__gethex+0x160>
 800a626:	f100 0914 	add.w	r9, r0, #20
 800a62a:	f04f 0b00 	mov.w	fp, #0
 800a62e:	f1ca 0301 	rsb	r3, sl, #1
 800a632:	f8cd 9008 	str.w	r9, [sp, #8]
 800a636:	f8cd b000 	str.w	fp, [sp]
 800a63a:	9306      	str	r3, [sp, #24]
 800a63c:	42b7      	cmp	r7, r6
 800a63e:	d340      	bcc.n	800a6c2 <__gethex+0x21e>
 800a640:	9802      	ldr	r0, [sp, #8]
 800a642:	9b00      	ldr	r3, [sp, #0]
 800a644:	f840 3b04 	str.w	r3, [r0], #4
 800a648:	eba0 0009 	sub.w	r0, r0, r9
 800a64c:	1080      	asrs	r0, r0, #2
 800a64e:	0146      	lsls	r6, r0, #5
 800a650:	6120      	str	r0, [r4, #16]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fb4c 	bl	800acf0 <__hi0bits>
 800a658:	1a30      	subs	r0, r6, r0
 800a65a:	f8d8 6000 	ldr.w	r6, [r8]
 800a65e:	42b0      	cmp	r0, r6
 800a660:	dd63      	ble.n	800a72a <__gethex+0x286>
 800a662:	1b87      	subs	r7, r0, r6
 800a664:	4639      	mov	r1, r7
 800a666:	4620      	mov	r0, r4
 800a668:	f000 fef0 	bl	800b44c <__any_on>
 800a66c:	4682      	mov	sl, r0
 800a66e:	b1a8      	cbz	r0, 800a69c <__gethex+0x1f8>
 800a670:	1e7b      	subs	r3, r7, #1
 800a672:	1159      	asrs	r1, r3, #5
 800a674:	f003 021f 	and.w	r2, r3, #31
 800a678:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a67c:	f04f 0a01 	mov.w	sl, #1
 800a680:	fa0a f202 	lsl.w	r2, sl, r2
 800a684:	420a      	tst	r2, r1
 800a686:	d009      	beq.n	800a69c <__gethex+0x1f8>
 800a688:	4553      	cmp	r3, sl
 800a68a:	dd05      	ble.n	800a698 <__gethex+0x1f4>
 800a68c:	1eb9      	subs	r1, r7, #2
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 fedc 	bl	800b44c <__any_on>
 800a694:	2800      	cmp	r0, #0
 800a696:	d145      	bne.n	800a724 <__gethex+0x280>
 800a698:	f04f 0a02 	mov.w	sl, #2
 800a69c:	4639      	mov	r1, r7
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7ff fe98 	bl	800a3d4 <rshift>
 800a6a4:	443d      	add	r5, r7
 800a6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6aa:	42ab      	cmp	r3, r5
 800a6ac:	da4c      	bge.n	800a748 <__gethex+0x2a4>
 800a6ae:	ee18 0a10 	vmov	r0, s16
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	f000 fa6a 	bl	800ab8c <_Bfree>
 800a6b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6013      	str	r3, [r2, #0]
 800a6be:	27a3      	movs	r7, #163	; 0xa3
 800a6c0:	e785      	b.n	800a5ce <__gethex+0x12a>
 800a6c2:	1e73      	subs	r3, r6, #1
 800a6c4:	9a05      	ldr	r2, [sp, #20]
 800a6c6:	9303      	str	r3, [sp, #12]
 800a6c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d019      	beq.n	800a704 <__gethex+0x260>
 800a6d0:	f1bb 0f20 	cmp.w	fp, #32
 800a6d4:	d107      	bne.n	800a6e6 <__gethex+0x242>
 800a6d6:	9b02      	ldr	r3, [sp, #8]
 800a6d8:	9a00      	ldr	r2, [sp, #0]
 800a6da:	f843 2b04 	str.w	r2, [r3], #4
 800a6de:	9302      	str	r3, [sp, #8]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	469b      	mov	fp, r3
 800a6e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6ea:	f7ff fec5 	bl	800a478 <__hexdig_fun>
 800a6ee:	9b00      	ldr	r3, [sp, #0]
 800a6f0:	f000 000f 	and.w	r0, r0, #15
 800a6f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6f8:	4303      	orrs	r3, r0
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	f10b 0b04 	add.w	fp, fp, #4
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	e00d      	b.n	800a720 <__gethex+0x27c>
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	9a06      	ldr	r2, [sp, #24]
 800a708:	4413      	add	r3, r2
 800a70a:	42bb      	cmp	r3, r7
 800a70c:	d3e0      	bcc.n	800a6d0 <__gethex+0x22c>
 800a70e:	4618      	mov	r0, r3
 800a710:	9901      	ldr	r1, [sp, #4]
 800a712:	9307      	str	r3, [sp, #28]
 800a714:	4652      	mov	r2, sl
 800a716:	f001 f927 	bl	800b968 <strncmp>
 800a71a:	9b07      	ldr	r3, [sp, #28]
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d1d7      	bne.n	800a6d0 <__gethex+0x22c>
 800a720:	461e      	mov	r6, r3
 800a722:	e78b      	b.n	800a63c <__gethex+0x198>
 800a724:	f04f 0a03 	mov.w	sl, #3
 800a728:	e7b8      	b.n	800a69c <__gethex+0x1f8>
 800a72a:	da0a      	bge.n	800a742 <__gethex+0x29e>
 800a72c:	1a37      	subs	r7, r6, r0
 800a72e:	4621      	mov	r1, r4
 800a730:	ee18 0a10 	vmov	r0, s16
 800a734:	463a      	mov	r2, r7
 800a736:	f000 fc45 	bl	800afc4 <__lshift>
 800a73a:	1bed      	subs	r5, r5, r7
 800a73c:	4604      	mov	r4, r0
 800a73e:	f100 0914 	add.w	r9, r0, #20
 800a742:	f04f 0a00 	mov.w	sl, #0
 800a746:	e7ae      	b.n	800a6a6 <__gethex+0x202>
 800a748:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a74c:	42a8      	cmp	r0, r5
 800a74e:	dd72      	ble.n	800a836 <__gethex+0x392>
 800a750:	1b45      	subs	r5, r0, r5
 800a752:	42ae      	cmp	r6, r5
 800a754:	dc36      	bgt.n	800a7c4 <__gethex+0x320>
 800a756:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d02a      	beq.n	800a7b4 <__gethex+0x310>
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d02c      	beq.n	800a7bc <__gethex+0x318>
 800a762:	2b01      	cmp	r3, #1
 800a764:	d11c      	bne.n	800a7a0 <__gethex+0x2fc>
 800a766:	42ae      	cmp	r6, r5
 800a768:	d11a      	bne.n	800a7a0 <__gethex+0x2fc>
 800a76a:	2e01      	cmp	r6, #1
 800a76c:	d112      	bne.n	800a794 <__gethex+0x2f0>
 800a76e:	9a04      	ldr	r2, [sp, #16]
 800a770:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	2301      	movs	r3, #1
 800a778:	6123      	str	r3, [r4, #16]
 800a77a:	f8c9 3000 	str.w	r3, [r9]
 800a77e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a780:	2762      	movs	r7, #98	; 0x62
 800a782:	601c      	str	r4, [r3, #0]
 800a784:	e723      	b.n	800a5ce <__gethex+0x12a>
 800a786:	bf00      	nop
 800a788:	08010240 	.word	0x08010240
 800a78c:	080101c8 	.word	0x080101c8
 800a790:	080101d9 	.word	0x080101d9
 800a794:	1e71      	subs	r1, r6, #1
 800a796:	4620      	mov	r0, r4
 800a798:	f000 fe58 	bl	800b44c <__any_on>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d1e6      	bne.n	800a76e <__gethex+0x2ca>
 800a7a0:	ee18 0a10 	vmov	r0, s16
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f000 f9f1 	bl	800ab8c <_Bfree>
 800a7aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	2750      	movs	r7, #80	; 0x50
 800a7b2:	e70c      	b.n	800a5ce <__gethex+0x12a>
 800a7b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f2      	bne.n	800a7a0 <__gethex+0x2fc>
 800a7ba:	e7d8      	b.n	800a76e <__gethex+0x2ca>
 800a7bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1d5      	bne.n	800a76e <__gethex+0x2ca>
 800a7c2:	e7ed      	b.n	800a7a0 <__gethex+0x2fc>
 800a7c4:	1e6f      	subs	r7, r5, #1
 800a7c6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ca:	d131      	bne.n	800a830 <__gethex+0x38c>
 800a7cc:	b127      	cbz	r7, 800a7d8 <__gethex+0x334>
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fe3b 	bl	800b44c <__any_on>
 800a7d6:	4682      	mov	sl, r0
 800a7d8:	117b      	asrs	r3, r7, #5
 800a7da:	2101      	movs	r1, #1
 800a7dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7e0:	f007 071f 	and.w	r7, r7, #31
 800a7e4:	fa01 f707 	lsl.w	r7, r1, r7
 800a7e8:	421f      	tst	r7, r3
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	bf18      	it	ne
 800a7f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7f4:	1b76      	subs	r6, r6, r5
 800a7f6:	f7ff fded 	bl	800a3d4 <rshift>
 800a7fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7fe:	2702      	movs	r7, #2
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	d048      	beq.n	800a898 <__gethex+0x3f4>
 800a806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d015      	beq.n	800a83a <__gethex+0x396>
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d017      	beq.n	800a842 <__gethex+0x39e>
 800a812:	2b01      	cmp	r3, #1
 800a814:	d109      	bne.n	800a82a <__gethex+0x386>
 800a816:	f01a 0f02 	tst.w	sl, #2
 800a81a:	d006      	beq.n	800a82a <__gethex+0x386>
 800a81c:	f8d9 0000 	ldr.w	r0, [r9]
 800a820:	ea4a 0a00 	orr.w	sl, sl, r0
 800a824:	f01a 0f01 	tst.w	sl, #1
 800a828:	d10e      	bne.n	800a848 <__gethex+0x3a4>
 800a82a:	f047 0710 	orr.w	r7, r7, #16
 800a82e:	e033      	b.n	800a898 <__gethex+0x3f4>
 800a830:	f04f 0a01 	mov.w	sl, #1
 800a834:	e7d0      	b.n	800a7d8 <__gethex+0x334>
 800a836:	2701      	movs	r7, #1
 800a838:	e7e2      	b.n	800a800 <__gethex+0x35c>
 800a83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83c:	f1c3 0301 	rsb	r3, r3, #1
 800a840:	9315      	str	r3, [sp, #84]	; 0x54
 800a842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0f0      	beq.n	800a82a <__gethex+0x386>
 800a848:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a84c:	f104 0314 	add.w	r3, r4, #20
 800a850:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a854:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a858:	f04f 0c00 	mov.w	ip, #0
 800a85c:	4618      	mov	r0, r3
 800a85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a862:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a866:	d01c      	beq.n	800a8a2 <__gethex+0x3fe>
 800a868:	3201      	adds	r2, #1
 800a86a:	6002      	str	r2, [r0, #0]
 800a86c:	2f02      	cmp	r7, #2
 800a86e:	f104 0314 	add.w	r3, r4, #20
 800a872:	d13f      	bne.n	800a8f4 <__gethex+0x450>
 800a874:	f8d8 2000 	ldr.w	r2, [r8]
 800a878:	3a01      	subs	r2, #1
 800a87a:	42b2      	cmp	r2, r6
 800a87c:	d10a      	bne.n	800a894 <__gethex+0x3f0>
 800a87e:	1171      	asrs	r1, r6, #5
 800a880:	2201      	movs	r2, #1
 800a882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a886:	f006 061f 	and.w	r6, r6, #31
 800a88a:	fa02 f606 	lsl.w	r6, r2, r6
 800a88e:	421e      	tst	r6, r3
 800a890:	bf18      	it	ne
 800a892:	4617      	movne	r7, r2
 800a894:	f047 0720 	orr.w	r7, r7, #32
 800a898:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a89a:	601c      	str	r4, [r3, #0]
 800a89c:	9b04      	ldr	r3, [sp, #16]
 800a89e:	601d      	str	r5, [r3, #0]
 800a8a0:	e695      	b.n	800a5ce <__gethex+0x12a>
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8a8:	d8d8      	bhi.n	800a85c <__gethex+0x3b8>
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	459b      	cmp	fp, r3
 800a8ae:	db19      	blt.n	800a8e4 <__gethex+0x440>
 800a8b0:	6861      	ldr	r1, [r4, #4]
 800a8b2:	ee18 0a10 	vmov	r0, s16
 800a8b6:	3101      	adds	r1, #1
 800a8b8:	f000 f928 	bl	800ab0c <_Balloc>
 800a8bc:	4681      	mov	r9, r0
 800a8be:	b918      	cbnz	r0, 800a8c8 <__gethex+0x424>
 800a8c0:	4b1a      	ldr	r3, [pc, #104]	; (800a92c <__gethex+0x488>)
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	2184      	movs	r1, #132	; 0x84
 800a8c6:	e6a8      	b.n	800a61a <__gethex+0x176>
 800a8c8:	6922      	ldr	r2, [r4, #16]
 800a8ca:	3202      	adds	r2, #2
 800a8cc:	f104 010c 	add.w	r1, r4, #12
 800a8d0:	0092      	lsls	r2, r2, #2
 800a8d2:	300c      	adds	r0, #12
 800a8d4:	f000 f90c 	bl	800aaf0 <memcpy>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	ee18 0a10 	vmov	r0, s16
 800a8de:	f000 f955 	bl	800ab8c <_Bfree>
 800a8e2:	464c      	mov	r4, r9
 800a8e4:	6923      	ldr	r3, [r4, #16]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8ec:	6122      	str	r2, [r4, #16]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	615a      	str	r2, [r3, #20]
 800a8f2:	e7bb      	b.n	800a86c <__gethex+0x3c8>
 800a8f4:	6922      	ldr	r2, [r4, #16]
 800a8f6:	455a      	cmp	r2, fp
 800a8f8:	dd0b      	ble.n	800a912 <__gethex+0x46e>
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7ff fd69 	bl	800a3d4 <rshift>
 800a902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a906:	3501      	adds	r5, #1
 800a908:	42ab      	cmp	r3, r5
 800a90a:	f6ff aed0 	blt.w	800a6ae <__gethex+0x20a>
 800a90e:	2701      	movs	r7, #1
 800a910:	e7c0      	b.n	800a894 <__gethex+0x3f0>
 800a912:	f016 061f 	ands.w	r6, r6, #31
 800a916:	d0fa      	beq.n	800a90e <__gethex+0x46a>
 800a918:	4453      	add	r3, sl
 800a91a:	f1c6 0620 	rsb	r6, r6, #32
 800a91e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a922:	f000 f9e5 	bl	800acf0 <__hi0bits>
 800a926:	42b0      	cmp	r0, r6
 800a928:	dbe7      	blt.n	800a8fa <__gethex+0x456>
 800a92a:	e7f0      	b.n	800a90e <__gethex+0x46a>
 800a92c:	080101c8 	.word	0x080101c8

0800a930 <L_shift>:
 800a930:	f1c2 0208 	rsb	r2, r2, #8
 800a934:	0092      	lsls	r2, r2, #2
 800a936:	b570      	push	{r4, r5, r6, lr}
 800a938:	f1c2 0620 	rsb	r6, r2, #32
 800a93c:	6843      	ldr	r3, [r0, #4]
 800a93e:	6804      	ldr	r4, [r0, #0]
 800a940:	fa03 f506 	lsl.w	r5, r3, r6
 800a944:	432c      	orrs	r4, r5
 800a946:	40d3      	lsrs	r3, r2
 800a948:	6004      	str	r4, [r0, #0]
 800a94a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a94e:	4288      	cmp	r0, r1
 800a950:	d3f4      	bcc.n	800a93c <L_shift+0xc>
 800a952:	bd70      	pop	{r4, r5, r6, pc}

0800a954 <__match>:
 800a954:	b530      	push	{r4, r5, lr}
 800a956:	6803      	ldr	r3, [r0, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a95e:	b914      	cbnz	r4, 800a966 <__match+0x12>
 800a960:	6003      	str	r3, [r0, #0]
 800a962:	2001      	movs	r0, #1
 800a964:	bd30      	pop	{r4, r5, pc}
 800a966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a96a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a96e:	2d19      	cmp	r5, #25
 800a970:	bf98      	it	ls
 800a972:	3220      	addls	r2, #32
 800a974:	42a2      	cmp	r2, r4
 800a976:	d0f0      	beq.n	800a95a <__match+0x6>
 800a978:	2000      	movs	r0, #0
 800a97a:	e7f3      	b.n	800a964 <__match+0x10>

0800a97c <__hexnan>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	680b      	ldr	r3, [r1, #0]
 800a982:	115e      	asrs	r6, r3, #5
 800a984:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a988:	f013 031f 	ands.w	r3, r3, #31
 800a98c:	b087      	sub	sp, #28
 800a98e:	bf18      	it	ne
 800a990:	3604      	addne	r6, #4
 800a992:	2500      	movs	r5, #0
 800a994:	1f37      	subs	r7, r6, #4
 800a996:	4690      	mov	r8, r2
 800a998:	6802      	ldr	r2, [r0, #0]
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	4682      	mov	sl, r0
 800a99e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9a2:	46b9      	mov	r9, r7
 800a9a4:	463c      	mov	r4, r7
 800a9a6:	9502      	str	r5, [sp, #8]
 800a9a8:	46ab      	mov	fp, r5
 800a9aa:	7851      	ldrb	r1, [r2, #1]
 800a9ac:	1c53      	adds	r3, r2, #1
 800a9ae:	9303      	str	r3, [sp, #12]
 800a9b0:	b341      	cbz	r1, 800aa04 <__hexnan+0x88>
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	9205      	str	r2, [sp, #20]
 800a9b6:	9104      	str	r1, [sp, #16]
 800a9b8:	f7ff fd5e 	bl	800a478 <__hexdig_fun>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d14f      	bne.n	800aa60 <__hexnan+0xe4>
 800a9c0:	9904      	ldr	r1, [sp, #16]
 800a9c2:	9a05      	ldr	r2, [sp, #20]
 800a9c4:	2920      	cmp	r1, #32
 800a9c6:	d818      	bhi.n	800a9fa <__hexnan+0x7e>
 800a9c8:	9b02      	ldr	r3, [sp, #8]
 800a9ca:	459b      	cmp	fp, r3
 800a9cc:	dd13      	ble.n	800a9f6 <__hexnan+0x7a>
 800a9ce:	454c      	cmp	r4, r9
 800a9d0:	d206      	bcs.n	800a9e0 <__hexnan+0x64>
 800a9d2:	2d07      	cmp	r5, #7
 800a9d4:	dc04      	bgt.n	800a9e0 <__hexnan+0x64>
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4649      	mov	r1, r9
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff ffa8 	bl	800a930 <L_shift>
 800a9e0:	4544      	cmp	r4, r8
 800a9e2:	d950      	bls.n	800aa86 <__hexnan+0x10a>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f1a4 0904 	sub.w	r9, r4, #4
 800a9ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ee:	f8cd b008 	str.w	fp, [sp, #8]
 800a9f2:	464c      	mov	r4, r9
 800a9f4:	461d      	mov	r5, r3
 800a9f6:	9a03      	ldr	r2, [sp, #12]
 800a9f8:	e7d7      	b.n	800a9aa <__hexnan+0x2e>
 800a9fa:	2929      	cmp	r1, #41	; 0x29
 800a9fc:	d156      	bne.n	800aaac <__hexnan+0x130>
 800a9fe:	3202      	adds	r2, #2
 800aa00:	f8ca 2000 	str.w	r2, [sl]
 800aa04:	f1bb 0f00 	cmp.w	fp, #0
 800aa08:	d050      	beq.n	800aaac <__hexnan+0x130>
 800aa0a:	454c      	cmp	r4, r9
 800aa0c:	d206      	bcs.n	800aa1c <__hexnan+0xa0>
 800aa0e:	2d07      	cmp	r5, #7
 800aa10:	dc04      	bgt.n	800aa1c <__hexnan+0xa0>
 800aa12:	462a      	mov	r2, r5
 800aa14:	4649      	mov	r1, r9
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7ff ff8a 	bl	800a930 <L_shift>
 800aa1c:	4544      	cmp	r4, r8
 800aa1e:	d934      	bls.n	800aa8a <__hexnan+0x10e>
 800aa20:	f1a8 0204 	sub.w	r2, r8, #4
 800aa24:	4623      	mov	r3, r4
 800aa26:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa2a:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa2e:	429f      	cmp	r7, r3
 800aa30:	d2f9      	bcs.n	800aa26 <__hexnan+0xaa>
 800aa32:	1b3b      	subs	r3, r7, r4
 800aa34:	f023 0303 	bic.w	r3, r3, #3
 800aa38:	3304      	adds	r3, #4
 800aa3a:	3401      	adds	r4, #1
 800aa3c:	3e03      	subs	r6, #3
 800aa3e:	42b4      	cmp	r4, r6
 800aa40:	bf88      	it	hi
 800aa42:	2304      	movhi	r3, #4
 800aa44:	4443      	add	r3, r8
 800aa46:	2200      	movs	r2, #0
 800aa48:	f843 2b04 	str.w	r2, [r3], #4
 800aa4c:	429f      	cmp	r7, r3
 800aa4e:	d2fb      	bcs.n	800aa48 <__hexnan+0xcc>
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	b91b      	cbnz	r3, 800aa5c <__hexnan+0xe0>
 800aa54:	4547      	cmp	r7, r8
 800aa56:	d127      	bne.n	800aaa8 <__hexnan+0x12c>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	2005      	movs	r0, #5
 800aa5e:	e026      	b.n	800aaae <__hexnan+0x132>
 800aa60:	3501      	adds	r5, #1
 800aa62:	2d08      	cmp	r5, #8
 800aa64:	f10b 0b01 	add.w	fp, fp, #1
 800aa68:	dd06      	ble.n	800aa78 <__hexnan+0xfc>
 800aa6a:	4544      	cmp	r4, r8
 800aa6c:	d9c3      	bls.n	800a9f6 <__hexnan+0x7a>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa74:	2501      	movs	r5, #1
 800aa76:	3c04      	subs	r4, #4
 800aa78:	6822      	ldr	r2, [r4, #0]
 800aa7a:	f000 000f 	and.w	r0, r0, #15
 800aa7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa82:	6022      	str	r2, [r4, #0]
 800aa84:	e7b7      	b.n	800a9f6 <__hexnan+0x7a>
 800aa86:	2508      	movs	r5, #8
 800aa88:	e7b5      	b.n	800a9f6 <__hexnan+0x7a>
 800aa8a:	9b01      	ldr	r3, [sp, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0df      	beq.n	800aa50 <__hexnan+0xd4>
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	f1c3 0320 	rsb	r3, r3, #32
 800aa98:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aaa0:	401a      	ands	r2, r3
 800aaa2:	f846 2c04 	str.w	r2, [r6, #-4]
 800aaa6:	e7d3      	b.n	800aa50 <__hexnan+0xd4>
 800aaa8:	3f04      	subs	r7, #4
 800aaaa:	e7d1      	b.n	800aa50 <__hexnan+0xd4>
 800aaac:	2004      	movs	r0, #4
 800aaae:	b007      	add	sp, #28
 800aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aab4 <_localeconv_r>:
 800aab4:	4800      	ldr	r0, [pc, #0]	; (800aab8 <_localeconv_r+0x4>)
 800aab6:	4770      	bx	lr
 800aab8:	20000200 	.word	0x20000200

0800aabc <malloc>:
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <malloc+0xc>)
 800aabe:	4601      	mov	r1, r0
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f000 bd67 	b.w	800b594 <_malloc_r>
 800aac6:	bf00      	nop
 800aac8:	200000a8 	.word	0x200000a8

0800aacc <__ascii_mbtowc>:
 800aacc:	b082      	sub	sp, #8
 800aace:	b901      	cbnz	r1, 800aad2 <__ascii_mbtowc+0x6>
 800aad0:	a901      	add	r1, sp, #4
 800aad2:	b142      	cbz	r2, 800aae6 <__ascii_mbtowc+0x1a>
 800aad4:	b14b      	cbz	r3, 800aaea <__ascii_mbtowc+0x1e>
 800aad6:	7813      	ldrb	r3, [r2, #0]
 800aad8:	600b      	str	r3, [r1, #0]
 800aada:	7812      	ldrb	r2, [r2, #0]
 800aadc:	1e10      	subs	r0, r2, #0
 800aade:	bf18      	it	ne
 800aae0:	2001      	movne	r0, #1
 800aae2:	b002      	add	sp, #8
 800aae4:	4770      	bx	lr
 800aae6:	4610      	mov	r0, r2
 800aae8:	e7fb      	b.n	800aae2 <__ascii_mbtowc+0x16>
 800aaea:	f06f 0001 	mvn.w	r0, #1
 800aaee:	e7f8      	b.n	800aae2 <__ascii_mbtowc+0x16>

0800aaf0 <memcpy>:
 800aaf0:	440a      	add	r2, r1
 800aaf2:	4291      	cmp	r1, r2
 800aaf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaf8:	d100      	bne.n	800aafc <memcpy+0xc>
 800aafa:	4770      	bx	lr
 800aafc:	b510      	push	{r4, lr}
 800aafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab06:	4291      	cmp	r1, r2
 800ab08:	d1f9      	bne.n	800aafe <memcpy+0xe>
 800ab0a:	bd10      	pop	{r4, pc}

0800ab0c <_Balloc>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	b976      	cbnz	r6, 800ab34 <_Balloc+0x28>
 800ab16:	2010      	movs	r0, #16
 800ab18:	f7ff ffd0 	bl	800aabc <malloc>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ab20:	b920      	cbnz	r0, 800ab2c <_Balloc+0x20>
 800ab22:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <_Balloc+0x78>)
 800ab24:	4818      	ldr	r0, [pc, #96]	; (800ab88 <_Balloc+0x7c>)
 800ab26:	2166      	movs	r1, #102	; 0x66
 800ab28:	f000 ff40 	bl	800b9ac <__assert_func>
 800ab2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab30:	6006      	str	r6, [r0, #0]
 800ab32:	60c6      	str	r6, [r0, #12]
 800ab34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab36:	68f3      	ldr	r3, [r6, #12]
 800ab38:	b183      	cbz	r3, 800ab5c <_Balloc+0x50>
 800ab3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab42:	b9b8      	cbnz	r0, 800ab74 <_Balloc+0x68>
 800ab44:	2101      	movs	r1, #1
 800ab46:	fa01 f605 	lsl.w	r6, r1, r5
 800ab4a:	1d72      	adds	r2, r6, #5
 800ab4c:	0092      	lsls	r2, r2, #2
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 fc9d 	bl	800b48e <_calloc_r>
 800ab54:	b160      	cbz	r0, 800ab70 <_Balloc+0x64>
 800ab56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab5a:	e00e      	b.n	800ab7a <_Balloc+0x6e>
 800ab5c:	2221      	movs	r2, #33	; 0x21
 800ab5e:	2104      	movs	r1, #4
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fc94 	bl	800b48e <_calloc_r>
 800ab66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab68:	60f0      	str	r0, [r6, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e4      	bne.n	800ab3a <_Balloc+0x2e>
 800ab70:	2000      	movs	r0, #0
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	6802      	ldr	r2, [r0, #0]
 800ab76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab80:	e7f7      	b.n	800ab72 <_Balloc+0x66>
 800ab82:	bf00      	nop
 800ab84:	08010156 	.word	0x08010156
 800ab88:	08010254 	.word	0x08010254

0800ab8c <_Bfree>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b976      	cbnz	r6, 800abb4 <_Bfree+0x28>
 800ab96:	2010      	movs	r0, #16
 800ab98:	f7ff ff90 	bl	800aabc <malloc>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	6268      	str	r0, [r5, #36]	; 0x24
 800aba0:	b920      	cbnz	r0, 800abac <_Bfree+0x20>
 800aba2:	4b09      	ldr	r3, [pc, #36]	; (800abc8 <_Bfree+0x3c>)
 800aba4:	4809      	ldr	r0, [pc, #36]	; (800abcc <_Bfree+0x40>)
 800aba6:	218a      	movs	r1, #138	; 0x8a
 800aba8:	f000 ff00 	bl	800b9ac <__assert_func>
 800abac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb0:	6006      	str	r6, [r0, #0]
 800abb2:	60c6      	str	r6, [r0, #12]
 800abb4:	b13c      	cbz	r4, 800abc6 <_Bfree+0x3a>
 800abb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abb8:	6862      	ldr	r2, [r4, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc0:	6021      	str	r1, [r4, #0]
 800abc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	08010156 	.word	0x08010156
 800abcc:	08010254 	.word	0x08010254

0800abd0 <__multadd>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	690d      	ldr	r5, [r1, #16]
 800abd6:	4607      	mov	r7, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	461e      	mov	r6, r3
 800abdc:	f101 0c14 	add.w	ip, r1, #20
 800abe0:	2000      	movs	r0, #0
 800abe2:	f8dc 3000 	ldr.w	r3, [ip]
 800abe6:	b299      	uxth	r1, r3
 800abe8:	fb02 6101 	mla	r1, r2, r1, r6
 800abec:	0c1e      	lsrs	r6, r3, #16
 800abee:	0c0b      	lsrs	r3, r1, #16
 800abf0:	fb02 3306 	mla	r3, r2, r6, r3
 800abf4:	b289      	uxth	r1, r1
 800abf6:	3001      	adds	r0, #1
 800abf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abfc:	4285      	cmp	r5, r0
 800abfe:	f84c 1b04 	str.w	r1, [ip], #4
 800ac02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac06:	dcec      	bgt.n	800abe2 <__multadd+0x12>
 800ac08:	b30e      	cbz	r6, 800ac4e <__multadd+0x7e>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc19      	bgt.n	800ac44 <__multadd+0x74>
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4638      	mov	r0, r7
 800ac14:	3101      	adds	r1, #1
 800ac16:	f7ff ff79 	bl	800ab0c <_Balloc>
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	b928      	cbnz	r0, 800ac2a <__multadd+0x5a>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <__multadd+0x84>)
 800ac22:	480d      	ldr	r0, [pc, #52]	; (800ac58 <__multadd+0x88>)
 800ac24:	21b5      	movs	r1, #181	; 0xb5
 800ac26:	f000 fec1 	bl	800b9ac <__assert_func>
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	3202      	adds	r2, #2
 800ac2e:	f104 010c 	add.w	r1, r4, #12
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	300c      	adds	r0, #12
 800ac36:	f7ff ff5b 	bl	800aaf0 <memcpy>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f7ff ffa5 	bl	800ab8c <_Bfree>
 800ac42:	4644      	mov	r4, r8
 800ac44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac48:	3501      	adds	r5, #1
 800ac4a:	615e      	str	r6, [r3, #20]
 800ac4c:	6125      	str	r5, [r4, #16]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	080101c8 	.word	0x080101c8
 800ac58:	08010254 	.word	0x08010254

0800ac5c <__s2b>:
 800ac5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac60:	460c      	mov	r4, r1
 800ac62:	4615      	mov	r5, r2
 800ac64:	461f      	mov	r7, r3
 800ac66:	2209      	movs	r2, #9
 800ac68:	3308      	adds	r3, #8
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac70:	2100      	movs	r1, #0
 800ac72:	2201      	movs	r2, #1
 800ac74:	429a      	cmp	r2, r3
 800ac76:	db09      	blt.n	800ac8c <__s2b+0x30>
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ff47 	bl	800ab0c <_Balloc>
 800ac7e:	b940      	cbnz	r0, 800ac92 <__s2b+0x36>
 800ac80:	4602      	mov	r2, r0
 800ac82:	4b19      	ldr	r3, [pc, #100]	; (800ace8 <__s2b+0x8c>)
 800ac84:	4819      	ldr	r0, [pc, #100]	; (800acec <__s2b+0x90>)
 800ac86:	21ce      	movs	r1, #206	; 0xce
 800ac88:	f000 fe90 	bl	800b9ac <__assert_func>
 800ac8c:	0052      	lsls	r2, r2, #1
 800ac8e:	3101      	adds	r1, #1
 800ac90:	e7f0      	b.n	800ac74 <__s2b+0x18>
 800ac92:	9b08      	ldr	r3, [sp, #32]
 800ac94:	6143      	str	r3, [r0, #20]
 800ac96:	2d09      	cmp	r5, #9
 800ac98:	f04f 0301 	mov.w	r3, #1
 800ac9c:	6103      	str	r3, [r0, #16]
 800ac9e:	dd16      	ble.n	800acce <__s2b+0x72>
 800aca0:	f104 0909 	add.w	r9, r4, #9
 800aca4:	46c8      	mov	r8, r9
 800aca6:	442c      	add	r4, r5
 800aca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acac:	4601      	mov	r1, r0
 800acae:	3b30      	subs	r3, #48	; 0x30
 800acb0:	220a      	movs	r2, #10
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ff8c 	bl	800abd0 <__multadd>
 800acb8:	45a0      	cmp	r8, r4
 800acba:	d1f5      	bne.n	800aca8 <__s2b+0x4c>
 800acbc:	f1a5 0408 	sub.w	r4, r5, #8
 800acc0:	444c      	add	r4, r9
 800acc2:	1b2d      	subs	r5, r5, r4
 800acc4:	1963      	adds	r3, r4, r5
 800acc6:	42bb      	cmp	r3, r7
 800acc8:	db04      	blt.n	800acd4 <__s2b+0x78>
 800acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acce:	340a      	adds	r4, #10
 800acd0:	2509      	movs	r5, #9
 800acd2:	e7f6      	b.n	800acc2 <__s2b+0x66>
 800acd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acd8:	4601      	mov	r1, r0
 800acda:	3b30      	subs	r3, #48	; 0x30
 800acdc:	220a      	movs	r2, #10
 800acde:	4630      	mov	r0, r6
 800ace0:	f7ff ff76 	bl	800abd0 <__multadd>
 800ace4:	e7ee      	b.n	800acc4 <__s2b+0x68>
 800ace6:	bf00      	nop
 800ace8:	080101c8 	.word	0x080101c8
 800acec:	08010254 	.word	0x08010254

0800acf0 <__hi0bits>:
 800acf0:	0c03      	lsrs	r3, r0, #16
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	b9d3      	cbnz	r3, 800ad2c <__hi0bits+0x3c>
 800acf6:	0400      	lsls	r0, r0, #16
 800acf8:	2310      	movs	r3, #16
 800acfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acfe:	bf04      	itt	eq
 800ad00:	0200      	lsleq	r0, r0, #8
 800ad02:	3308      	addeq	r3, #8
 800ad04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad08:	bf04      	itt	eq
 800ad0a:	0100      	lsleq	r0, r0, #4
 800ad0c:	3304      	addeq	r3, #4
 800ad0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad12:	bf04      	itt	eq
 800ad14:	0080      	lsleq	r0, r0, #2
 800ad16:	3302      	addeq	r3, #2
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	db05      	blt.n	800ad28 <__hi0bits+0x38>
 800ad1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad20:	f103 0301 	add.w	r3, r3, #1
 800ad24:	bf08      	it	eq
 800ad26:	2320      	moveq	r3, #32
 800ad28:	4618      	mov	r0, r3
 800ad2a:	4770      	bx	lr
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e7e4      	b.n	800acfa <__hi0bits+0xa>

0800ad30 <__lo0bits>:
 800ad30:	6803      	ldr	r3, [r0, #0]
 800ad32:	f013 0207 	ands.w	r2, r3, #7
 800ad36:	4601      	mov	r1, r0
 800ad38:	d00b      	beq.n	800ad52 <__lo0bits+0x22>
 800ad3a:	07da      	lsls	r2, r3, #31
 800ad3c:	d423      	bmi.n	800ad86 <__lo0bits+0x56>
 800ad3e:	0798      	lsls	r0, r3, #30
 800ad40:	bf49      	itett	mi
 800ad42:	085b      	lsrmi	r3, r3, #1
 800ad44:	089b      	lsrpl	r3, r3, #2
 800ad46:	2001      	movmi	r0, #1
 800ad48:	600b      	strmi	r3, [r1, #0]
 800ad4a:	bf5c      	itt	pl
 800ad4c:	600b      	strpl	r3, [r1, #0]
 800ad4e:	2002      	movpl	r0, #2
 800ad50:	4770      	bx	lr
 800ad52:	b298      	uxth	r0, r3
 800ad54:	b9a8      	cbnz	r0, 800ad82 <__lo0bits+0x52>
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	2010      	movs	r0, #16
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	b90a      	cbnz	r2, 800ad62 <__lo0bits+0x32>
 800ad5e:	3008      	adds	r0, #8
 800ad60:	0a1b      	lsrs	r3, r3, #8
 800ad62:	071a      	lsls	r2, r3, #28
 800ad64:	bf04      	itt	eq
 800ad66:	091b      	lsreq	r3, r3, #4
 800ad68:	3004      	addeq	r0, #4
 800ad6a:	079a      	lsls	r2, r3, #30
 800ad6c:	bf04      	itt	eq
 800ad6e:	089b      	lsreq	r3, r3, #2
 800ad70:	3002      	addeq	r0, #2
 800ad72:	07da      	lsls	r2, r3, #31
 800ad74:	d403      	bmi.n	800ad7e <__lo0bits+0x4e>
 800ad76:	085b      	lsrs	r3, r3, #1
 800ad78:	f100 0001 	add.w	r0, r0, #1
 800ad7c:	d005      	beq.n	800ad8a <__lo0bits+0x5a>
 800ad7e:	600b      	str	r3, [r1, #0]
 800ad80:	4770      	bx	lr
 800ad82:	4610      	mov	r0, r2
 800ad84:	e7e9      	b.n	800ad5a <__lo0bits+0x2a>
 800ad86:	2000      	movs	r0, #0
 800ad88:	4770      	bx	lr
 800ad8a:	2020      	movs	r0, #32
 800ad8c:	4770      	bx	lr
	...

0800ad90 <__i2b>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	460c      	mov	r4, r1
 800ad94:	2101      	movs	r1, #1
 800ad96:	f7ff feb9 	bl	800ab0c <_Balloc>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <__i2b+0x1a>
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <__i2b+0x24>)
 800ada0:	4805      	ldr	r0, [pc, #20]	; (800adb8 <__i2b+0x28>)
 800ada2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ada6:	f000 fe01 	bl	800b9ac <__assert_func>
 800adaa:	2301      	movs	r3, #1
 800adac:	6144      	str	r4, [r0, #20]
 800adae:	6103      	str	r3, [r0, #16]
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	bf00      	nop
 800adb4:	080101c8 	.word	0x080101c8
 800adb8:	08010254 	.word	0x08010254

0800adbc <__multiply>:
 800adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	4691      	mov	r9, r2
 800adc2:	690a      	ldr	r2, [r1, #16]
 800adc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc8:	429a      	cmp	r2, r3
 800adca:	bfb8      	it	lt
 800adcc:	460b      	movlt	r3, r1
 800adce:	460c      	mov	r4, r1
 800add0:	bfbc      	itt	lt
 800add2:	464c      	movlt	r4, r9
 800add4:	4699      	movlt	r9, r3
 800add6:	6927      	ldr	r7, [r4, #16]
 800add8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800addc:	68a3      	ldr	r3, [r4, #8]
 800adde:	6861      	ldr	r1, [r4, #4]
 800ade0:	eb07 060a 	add.w	r6, r7, sl
 800ade4:	42b3      	cmp	r3, r6
 800ade6:	b085      	sub	sp, #20
 800ade8:	bfb8      	it	lt
 800adea:	3101      	addlt	r1, #1
 800adec:	f7ff fe8e 	bl	800ab0c <_Balloc>
 800adf0:	b930      	cbnz	r0, 800ae00 <__multiply+0x44>
 800adf2:	4602      	mov	r2, r0
 800adf4:	4b44      	ldr	r3, [pc, #272]	; (800af08 <__multiply+0x14c>)
 800adf6:	4845      	ldr	r0, [pc, #276]	; (800af0c <__multiply+0x150>)
 800adf8:	f240 115d 	movw	r1, #349	; 0x15d
 800adfc:	f000 fdd6 	bl	800b9ac <__assert_func>
 800ae00:	f100 0514 	add.w	r5, r0, #20
 800ae04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae08:	462b      	mov	r3, r5
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4543      	cmp	r3, r8
 800ae0e:	d321      	bcc.n	800ae54 <__multiply+0x98>
 800ae10:	f104 0314 	add.w	r3, r4, #20
 800ae14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae18:	f109 0314 	add.w	r3, r9, #20
 800ae1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae20:	9202      	str	r2, [sp, #8]
 800ae22:	1b3a      	subs	r2, r7, r4
 800ae24:	3a15      	subs	r2, #21
 800ae26:	f022 0203 	bic.w	r2, r2, #3
 800ae2a:	3204      	adds	r2, #4
 800ae2c:	f104 0115 	add.w	r1, r4, #21
 800ae30:	428f      	cmp	r7, r1
 800ae32:	bf38      	it	cc
 800ae34:	2204      	movcc	r2, #4
 800ae36:	9201      	str	r2, [sp, #4]
 800ae38:	9a02      	ldr	r2, [sp, #8]
 800ae3a:	9303      	str	r3, [sp, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d80c      	bhi.n	800ae5a <__multiply+0x9e>
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	dd03      	ble.n	800ae4c <__multiply+0x90>
 800ae44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d05a      	beq.n	800af02 <__multiply+0x146>
 800ae4c:	6106      	str	r6, [r0, #16]
 800ae4e:	b005      	add	sp, #20
 800ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae54:	f843 2b04 	str.w	r2, [r3], #4
 800ae58:	e7d8      	b.n	800ae0c <__multiply+0x50>
 800ae5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae5e:	f1ba 0f00 	cmp.w	sl, #0
 800ae62:	d024      	beq.n	800aeae <__multiply+0xf2>
 800ae64:	f104 0e14 	add.w	lr, r4, #20
 800ae68:	46a9      	mov	r9, r5
 800ae6a:	f04f 0c00 	mov.w	ip, #0
 800ae6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae72:	f8d9 1000 	ldr.w	r1, [r9]
 800ae76:	fa1f fb82 	uxth.w	fp, r2
 800ae7a:	b289      	uxth	r1, r1
 800ae7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae84:	f8d9 2000 	ldr.w	r2, [r9]
 800ae88:	4461      	add	r1, ip
 800ae8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae96:	b289      	uxth	r1, r1
 800ae98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae9c:	4577      	cmp	r7, lr
 800ae9e:	f849 1b04 	str.w	r1, [r9], #4
 800aea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aea6:	d8e2      	bhi.n	800ae6e <__multiply+0xb2>
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	f845 c002 	str.w	ip, [r5, r2]
 800aeae:	9a03      	ldr	r2, [sp, #12]
 800aeb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	f1b9 0f00 	cmp.w	r9, #0
 800aeba:	d020      	beq.n	800aefe <__multiply+0x142>
 800aebc:	6829      	ldr	r1, [r5, #0]
 800aebe:	f104 0c14 	add.w	ip, r4, #20
 800aec2:	46ae      	mov	lr, r5
 800aec4:	f04f 0a00 	mov.w	sl, #0
 800aec8:	f8bc b000 	ldrh.w	fp, [ip]
 800aecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed0:	fb09 220b 	mla	r2, r9, fp, r2
 800aed4:	4492      	add	sl, r2
 800aed6:	b289      	uxth	r1, r1
 800aed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aedc:	f84e 1b04 	str.w	r1, [lr], #4
 800aee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee4:	f8be 1000 	ldrh.w	r1, [lr]
 800aee8:	0c12      	lsrs	r2, r2, #16
 800aeea:	fb09 1102 	mla	r1, r9, r2, r1
 800aeee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aef2:	4567      	cmp	r7, ip
 800aef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aef8:	d8e6      	bhi.n	800aec8 <__multiply+0x10c>
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	50a9      	str	r1, [r5, r2]
 800aefe:	3504      	adds	r5, #4
 800af00:	e79a      	b.n	800ae38 <__multiply+0x7c>
 800af02:	3e01      	subs	r6, #1
 800af04:	e79c      	b.n	800ae40 <__multiply+0x84>
 800af06:	bf00      	nop
 800af08:	080101c8 	.word	0x080101c8
 800af0c:	08010254 	.word	0x08010254

0800af10 <__pow5mult>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	4615      	mov	r5, r2
 800af16:	f012 0203 	ands.w	r2, r2, #3
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	d007      	beq.n	800af30 <__pow5mult+0x20>
 800af20:	4c25      	ldr	r4, [pc, #148]	; (800afb8 <__pow5mult+0xa8>)
 800af22:	3a01      	subs	r2, #1
 800af24:	2300      	movs	r3, #0
 800af26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af2a:	f7ff fe51 	bl	800abd0 <__multadd>
 800af2e:	4607      	mov	r7, r0
 800af30:	10ad      	asrs	r5, r5, #2
 800af32:	d03d      	beq.n	800afb0 <__pow5mult+0xa0>
 800af34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af36:	b97c      	cbnz	r4, 800af58 <__pow5mult+0x48>
 800af38:	2010      	movs	r0, #16
 800af3a:	f7ff fdbf 	bl	800aabc <malloc>
 800af3e:	4602      	mov	r2, r0
 800af40:	6270      	str	r0, [r6, #36]	; 0x24
 800af42:	b928      	cbnz	r0, 800af50 <__pow5mult+0x40>
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <__pow5mult+0xac>)
 800af46:	481e      	ldr	r0, [pc, #120]	; (800afc0 <__pow5mult+0xb0>)
 800af48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af4c:	f000 fd2e 	bl	800b9ac <__assert_func>
 800af50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af54:	6004      	str	r4, [r0, #0]
 800af56:	60c4      	str	r4, [r0, #12]
 800af58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af60:	b94c      	cbnz	r4, 800af76 <__pow5mult+0x66>
 800af62:	f240 2171 	movw	r1, #625	; 0x271
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ff12 	bl	800ad90 <__i2b>
 800af6c:	2300      	movs	r3, #0
 800af6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af72:	4604      	mov	r4, r0
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	07eb      	lsls	r3, r5, #31
 800af7c:	d50a      	bpl.n	800af94 <__pow5mult+0x84>
 800af7e:	4639      	mov	r1, r7
 800af80:	4622      	mov	r2, r4
 800af82:	4630      	mov	r0, r6
 800af84:	f7ff ff1a 	bl	800adbc <__multiply>
 800af88:	4639      	mov	r1, r7
 800af8a:	4680      	mov	r8, r0
 800af8c:	4630      	mov	r0, r6
 800af8e:	f7ff fdfd 	bl	800ab8c <_Bfree>
 800af92:	4647      	mov	r7, r8
 800af94:	106d      	asrs	r5, r5, #1
 800af96:	d00b      	beq.n	800afb0 <__pow5mult+0xa0>
 800af98:	6820      	ldr	r0, [r4, #0]
 800af9a:	b938      	cbnz	r0, 800afac <__pow5mult+0x9c>
 800af9c:	4622      	mov	r2, r4
 800af9e:	4621      	mov	r1, r4
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff ff0b 	bl	800adbc <__multiply>
 800afa6:	6020      	str	r0, [r4, #0]
 800afa8:	f8c0 9000 	str.w	r9, [r0]
 800afac:	4604      	mov	r4, r0
 800afae:	e7e4      	b.n	800af7a <__pow5mult+0x6a>
 800afb0:	4638      	mov	r0, r7
 800afb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb6:	bf00      	nop
 800afb8:	080103a0 	.word	0x080103a0
 800afbc:	08010156 	.word	0x08010156
 800afc0:	08010254 	.word	0x08010254

0800afc4 <__lshift>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	6849      	ldr	r1, [r1, #4]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	4607      	mov	r7, r0
 800afd6:	4691      	mov	r9, r2
 800afd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afdc:	f108 0601 	add.w	r6, r8, #1
 800afe0:	42b3      	cmp	r3, r6
 800afe2:	db0b      	blt.n	800affc <__lshift+0x38>
 800afe4:	4638      	mov	r0, r7
 800afe6:	f7ff fd91 	bl	800ab0c <_Balloc>
 800afea:	4605      	mov	r5, r0
 800afec:	b948      	cbnz	r0, 800b002 <__lshift+0x3e>
 800afee:	4602      	mov	r2, r0
 800aff0:	4b2a      	ldr	r3, [pc, #168]	; (800b09c <__lshift+0xd8>)
 800aff2:	482b      	ldr	r0, [pc, #172]	; (800b0a0 <__lshift+0xdc>)
 800aff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aff8:	f000 fcd8 	bl	800b9ac <__assert_func>
 800affc:	3101      	adds	r1, #1
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	e7ee      	b.n	800afe0 <__lshift+0x1c>
 800b002:	2300      	movs	r3, #0
 800b004:	f100 0114 	add.w	r1, r0, #20
 800b008:	f100 0210 	add.w	r2, r0, #16
 800b00c:	4618      	mov	r0, r3
 800b00e:	4553      	cmp	r3, sl
 800b010:	db37      	blt.n	800b082 <__lshift+0xbe>
 800b012:	6920      	ldr	r0, [r4, #16]
 800b014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b018:	f104 0314 	add.w	r3, r4, #20
 800b01c:	f019 091f 	ands.w	r9, r9, #31
 800b020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b028:	d02f      	beq.n	800b08a <__lshift+0xc6>
 800b02a:	f1c9 0e20 	rsb	lr, r9, #32
 800b02e:	468a      	mov	sl, r1
 800b030:	f04f 0c00 	mov.w	ip, #0
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	fa02 f209 	lsl.w	r2, r2, r9
 800b03a:	ea42 020c 	orr.w	r2, r2, ip
 800b03e:	f84a 2b04 	str.w	r2, [sl], #4
 800b042:	f853 2b04 	ldr.w	r2, [r3], #4
 800b046:	4298      	cmp	r0, r3
 800b048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b04c:	d8f2      	bhi.n	800b034 <__lshift+0x70>
 800b04e:	1b03      	subs	r3, r0, r4
 800b050:	3b15      	subs	r3, #21
 800b052:	f023 0303 	bic.w	r3, r3, #3
 800b056:	3304      	adds	r3, #4
 800b058:	f104 0215 	add.w	r2, r4, #21
 800b05c:	4290      	cmp	r0, r2
 800b05e:	bf38      	it	cc
 800b060:	2304      	movcc	r3, #4
 800b062:	f841 c003 	str.w	ip, [r1, r3]
 800b066:	f1bc 0f00 	cmp.w	ip, #0
 800b06a:	d001      	beq.n	800b070 <__lshift+0xac>
 800b06c:	f108 0602 	add.w	r6, r8, #2
 800b070:	3e01      	subs	r6, #1
 800b072:	4638      	mov	r0, r7
 800b074:	612e      	str	r6, [r5, #16]
 800b076:	4621      	mov	r1, r4
 800b078:	f7ff fd88 	bl	800ab8c <_Bfree>
 800b07c:	4628      	mov	r0, r5
 800b07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b082:	f842 0f04 	str.w	r0, [r2, #4]!
 800b086:	3301      	adds	r3, #1
 800b088:	e7c1      	b.n	800b00e <__lshift+0x4a>
 800b08a:	3904      	subs	r1, #4
 800b08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b090:	f841 2f04 	str.w	r2, [r1, #4]!
 800b094:	4298      	cmp	r0, r3
 800b096:	d8f9      	bhi.n	800b08c <__lshift+0xc8>
 800b098:	e7ea      	b.n	800b070 <__lshift+0xac>
 800b09a:	bf00      	nop
 800b09c:	080101c8 	.word	0x080101c8
 800b0a0:	08010254 	.word	0x08010254

0800b0a4 <__mcmp>:
 800b0a4:	b530      	push	{r4, r5, lr}
 800b0a6:	6902      	ldr	r2, [r0, #16]
 800b0a8:	690c      	ldr	r4, [r1, #16]
 800b0aa:	1b12      	subs	r2, r2, r4
 800b0ac:	d10e      	bne.n	800b0cc <__mcmp+0x28>
 800b0ae:	f100 0314 	add.w	r3, r0, #20
 800b0b2:	3114      	adds	r1, #20
 800b0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0c4:	42a5      	cmp	r5, r4
 800b0c6:	d003      	beq.n	800b0d0 <__mcmp+0x2c>
 800b0c8:	d305      	bcc.n	800b0d6 <__mcmp+0x32>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	bd30      	pop	{r4, r5, pc}
 800b0d0:	4283      	cmp	r3, r0
 800b0d2:	d3f3      	bcc.n	800b0bc <__mcmp+0x18>
 800b0d4:	e7fa      	b.n	800b0cc <__mcmp+0x28>
 800b0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0da:	e7f7      	b.n	800b0cc <__mcmp+0x28>

0800b0dc <__mdiff>:
 800b0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4690      	mov	r8, r2
 800b0ea:	f7ff ffdb 	bl	800b0a4 <__mcmp>
 800b0ee:	1e05      	subs	r5, r0, #0
 800b0f0:	d110      	bne.n	800b114 <__mdiff+0x38>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff fd09 	bl	800ab0c <_Balloc>
 800b0fa:	b930      	cbnz	r0, 800b10a <__mdiff+0x2e>
 800b0fc:	4b3a      	ldr	r3, [pc, #232]	; (800b1e8 <__mdiff+0x10c>)
 800b0fe:	4602      	mov	r2, r0
 800b100:	f240 2132 	movw	r1, #562	; 0x232
 800b104:	4839      	ldr	r0, [pc, #228]	; (800b1ec <__mdiff+0x110>)
 800b106:	f000 fc51 	bl	800b9ac <__assert_func>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	bfa4      	itt	ge
 800b116:	4643      	movge	r3, r8
 800b118:	46a0      	movge	r8, r4
 800b11a:	4630      	mov	r0, r6
 800b11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b120:	bfa6      	itte	ge
 800b122:	461c      	movge	r4, r3
 800b124:	2500      	movge	r5, #0
 800b126:	2501      	movlt	r5, #1
 800b128:	f7ff fcf0 	bl	800ab0c <_Balloc>
 800b12c:	b920      	cbnz	r0, 800b138 <__mdiff+0x5c>
 800b12e:	4b2e      	ldr	r3, [pc, #184]	; (800b1e8 <__mdiff+0x10c>)
 800b130:	4602      	mov	r2, r0
 800b132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b136:	e7e5      	b.n	800b104 <__mdiff+0x28>
 800b138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b13c:	6926      	ldr	r6, [r4, #16]
 800b13e:	60c5      	str	r5, [r0, #12]
 800b140:	f104 0914 	add.w	r9, r4, #20
 800b144:	f108 0514 	add.w	r5, r8, #20
 800b148:	f100 0e14 	add.w	lr, r0, #20
 800b14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b154:	f108 0210 	add.w	r2, r8, #16
 800b158:	46f2      	mov	sl, lr
 800b15a:	2100      	movs	r1, #0
 800b15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b164:	fa1f f883 	uxth.w	r8, r3
 800b168:	fa11 f18b 	uxtah	r1, r1, fp
 800b16c:	0c1b      	lsrs	r3, r3, #16
 800b16e:	eba1 0808 	sub.w	r8, r1, r8
 800b172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b17a:	fa1f f888 	uxth.w	r8, r8
 800b17e:	1419      	asrs	r1, r3, #16
 800b180:	454e      	cmp	r6, r9
 800b182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b186:	f84a 3b04 	str.w	r3, [sl], #4
 800b18a:	d8e7      	bhi.n	800b15c <__mdiff+0x80>
 800b18c:	1b33      	subs	r3, r6, r4
 800b18e:	3b15      	subs	r3, #21
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	3304      	adds	r3, #4
 800b196:	3415      	adds	r4, #21
 800b198:	42a6      	cmp	r6, r4
 800b19a:	bf38      	it	cc
 800b19c:	2304      	movcc	r3, #4
 800b19e:	441d      	add	r5, r3
 800b1a0:	4473      	add	r3, lr
 800b1a2:	469e      	mov	lr, r3
 800b1a4:	462e      	mov	r6, r5
 800b1a6:	4566      	cmp	r6, ip
 800b1a8:	d30e      	bcc.n	800b1c8 <__mdiff+0xec>
 800b1aa:	f10c 0203 	add.w	r2, ip, #3
 800b1ae:	1b52      	subs	r2, r2, r5
 800b1b0:	f022 0203 	bic.w	r2, r2, #3
 800b1b4:	3d03      	subs	r5, #3
 800b1b6:	45ac      	cmp	ip, r5
 800b1b8:	bf38      	it	cc
 800b1ba:	2200      	movcc	r2, #0
 800b1bc:	441a      	add	r2, r3
 800b1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1c2:	b17b      	cbz	r3, 800b1e4 <__mdiff+0x108>
 800b1c4:	6107      	str	r7, [r0, #16]
 800b1c6:	e7a3      	b.n	800b110 <__mdiff+0x34>
 800b1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1cc:	fa11 f288 	uxtah	r2, r1, r8
 800b1d0:	1414      	asrs	r4, r2, #16
 800b1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1d6:	b292      	uxth	r2, r2
 800b1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e0:	1421      	asrs	r1, r4, #16
 800b1e2:	e7e0      	b.n	800b1a6 <__mdiff+0xca>
 800b1e4:	3f01      	subs	r7, #1
 800b1e6:	e7ea      	b.n	800b1be <__mdiff+0xe2>
 800b1e8:	080101c8 	.word	0x080101c8
 800b1ec:	08010254 	.word	0x08010254

0800b1f0 <__ulp>:
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	ed8d 0b00 	vstr	d0, [sp]
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	4912      	ldr	r1, [pc, #72]	; (800b244 <__ulp+0x54>)
 800b1fa:	4019      	ands	r1, r3
 800b1fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b200:	2900      	cmp	r1, #0
 800b202:	dd05      	ble.n	800b210 <__ulp+0x20>
 800b204:	2200      	movs	r2, #0
 800b206:	460b      	mov	r3, r1
 800b208:	ec43 2b10 	vmov	d0, r2, r3
 800b20c:	b002      	add	sp, #8
 800b20e:	4770      	bx	lr
 800b210:	4249      	negs	r1, r1
 800b212:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b216:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	da04      	bge.n	800b22e <__ulp+0x3e>
 800b224:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b228:	fa41 f300 	asr.w	r3, r1, r0
 800b22c:	e7ec      	b.n	800b208 <__ulp+0x18>
 800b22e:	f1a0 0114 	sub.w	r1, r0, #20
 800b232:	291e      	cmp	r1, #30
 800b234:	bfda      	itte	le
 800b236:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b23a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b23e:	2101      	movgt	r1, #1
 800b240:	460a      	mov	r2, r1
 800b242:	e7e1      	b.n	800b208 <__ulp+0x18>
 800b244:	7ff00000 	.word	0x7ff00000

0800b248 <__b2d>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	6905      	ldr	r5, [r0, #16]
 800b24c:	f100 0714 	add.w	r7, r0, #20
 800b250:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b254:	1f2e      	subs	r6, r5, #4
 800b256:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f7ff fd48 	bl	800acf0 <__hi0bits>
 800b260:	f1c0 0320 	rsb	r3, r0, #32
 800b264:	280a      	cmp	r0, #10
 800b266:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2e4 <__b2d+0x9c>
 800b26a:	600b      	str	r3, [r1, #0]
 800b26c:	dc14      	bgt.n	800b298 <__b2d+0x50>
 800b26e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b272:	fa24 f10e 	lsr.w	r1, r4, lr
 800b276:	42b7      	cmp	r7, r6
 800b278:	ea41 030c 	orr.w	r3, r1, ip
 800b27c:	bf34      	ite	cc
 800b27e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b282:	2100      	movcs	r1, #0
 800b284:	3015      	adds	r0, #21
 800b286:	fa04 f000 	lsl.w	r0, r4, r0
 800b28a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b28e:	ea40 0201 	orr.w	r2, r0, r1
 800b292:	ec43 2b10 	vmov	d0, r2, r3
 800b296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b298:	42b7      	cmp	r7, r6
 800b29a:	bf3a      	itte	cc
 800b29c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2a4:	2100      	movcs	r1, #0
 800b2a6:	380b      	subs	r0, #11
 800b2a8:	d017      	beq.n	800b2da <__b2d+0x92>
 800b2aa:	f1c0 0c20 	rsb	ip, r0, #32
 800b2ae:	fa04 f500 	lsl.w	r5, r4, r0
 800b2b2:	42be      	cmp	r6, r7
 800b2b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2b8:	ea45 0504 	orr.w	r5, r5, r4
 800b2bc:	bf8c      	ite	hi
 800b2be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2c2:	2400      	movls	r4, #0
 800b2c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2c8:	fa01 f000 	lsl.w	r0, r1, r0
 800b2cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2d4:	ea40 0204 	orr.w	r2, r0, r4
 800b2d8:	e7db      	b.n	800b292 <__b2d+0x4a>
 800b2da:	ea44 030c 	orr.w	r3, r4, ip
 800b2de:	460a      	mov	r2, r1
 800b2e0:	e7d7      	b.n	800b292 <__b2d+0x4a>
 800b2e2:	bf00      	nop
 800b2e4:	3ff00000 	.word	0x3ff00000

0800b2e8 <__d2b>:
 800b2e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	ec57 6b10 	vmov	r6, r7, d0
 800b2f4:	4690      	mov	r8, r2
 800b2f6:	f7ff fc09 	bl	800ab0c <_Balloc>
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	b930      	cbnz	r0, 800b30c <__d2b+0x24>
 800b2fe:	4602      	mov	r2, r0
 800b300:	4b25      	ldr	r3, [pc, #148]	; (800b398 <__d2b+0xb0>)
 800b302:	4826      	ldr	r0, [pc, #152]	; (800b39c <__d2b+0xb4>)
 800b304:	f240 310a 	movw	r1, #778	; 0x30a
 800b308:	f000 fb50 	bl	800b9ac <__assert_func>
 800b30c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b314:	bb35      	cbnz	r5, 800b364 <__d2b+0x7c>
 800b316:	2e00      	cmp	r6, #0
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	d028      	beq.n	800b36e <__d2b+0x86>
 800b31c:	4668      	mov	r0, sp
 800b31e:	9600      	str	r6, [sp, #0]
 800b320:	f7ff fd06 	bl	800ad30 <__lo0bits>
 800b324:	9900      	ldr	r1, [sp, #0]
 800b326:	b300      	cbz	r0, 800b36a <__d2b+0x82>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	f1c0 0320 	rsb	r3, r0, #32
 800b32e:	fa02 f303 	lsl.w	r3, r2, r3
 800b332:	430b      	orrs	r3, r1
 800b334:	40c2      	lsrs	r2, r0
 800b336:	6163      	str	r3, [r4, #20]
 800b338:	9201      	str	r2, [sp, #4]
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	61a3      	str	r3, [r4, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bf14      	ite	ne
 800b342:	2202      	movne	r2, #2
 800b344:	2201      	moveq	r2, #1
 800b346:	6122      	str	r2, [r4, #16]
 800b348:	b1d5      	cbz	r5, 800b380 <__d2b+0x98>
 800b34a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b34e:	4405      	add	r5, r0
 800b350:	f8c9 5000 	str.w	r5, [r9]
 800b354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b358:	f8c8 0000 	str.w	r0, [r8]
 800b35c:	4620      	mov	r0, r4
 800b35e:	b003      	add	sp, #12
 800b360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b368:	e7d5      	b.n	800b316 <__d2b+0x2e>
 800b36a:	6161      	str	r1, [r4, #20]
 800b36c:	e7e5      	b.n	800b33a <__d2b+0x52>
 800b36e:	a801      	add	r0, sp, #4
 800b370:	f7ff fcde 	bl	800ad30 <__lo0bits>
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	6163      	str	r3, [r4, #20]
 800b378:	2201      	movs	r2, #1
 800b37a:	6122      	str	r2, [r4, #16]
 800b37c:	3020      	adds	r0, #32
 800b37e:	e7e3      	b.n	800b348 <__d2b+0x60>
 800b380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b388:	f8c9 0000 	str.w	r0, [r9]
 800b38c:	6918      	ldr	r0, [r3, #16]
 800b38e:	f7ff fcaf 	bl	800acf0 <__hi0bits>
 800b392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b396:	e7df      	b.n	800b358 <__d2b+0x70>
 800b398:	080101c8 	.word	0x080101c8
 800b39c:	08010254 	.word	0x08010254

0800b3a0 <__ratio>:
 800b3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4688      	mov	r8, r1
 800b3a6:	4669      	mov	r1, sp
 800b3a8:	4681      	mov	r9, r0
 800b3aa:	f7ff ff4d 	bl	800b248 <__b2d>
 800b3ae:	a901      	add	r1, sp, #4
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	ec55 4b10 	vmov	r4, r5, d0
 800b3b6:	f7ff ff47 	bl	800b248 <__b2d>
 800b3ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3c2:	eba3 0c02 	sub.w	ip, r3, r2
 800b3c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3d0:	ec51 0b10 	vmov	r0, r1, d0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bfd6      	itet	le
 800b3d8:	460a      	movle	r2, r1
 800b3da:	462a      	movgt	r2, r5
 800b3dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3e0:	468b      	mov	fp, r1
 800b3e2:	462f      	mov	r7, r5
 800b3e4:	bfd4      	ite	le
 800b3e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	ee10 2a10 	vmov	r2, s0
 800b3f4:	465b      	mov	r3, fp
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	f7f5 fa28 	bl	800084c <__aeabi_ddiv>
 800b3fc:	ec41 0b10 	vmov	d0, r0, r1
 800b400:	b003      	add	sp, #12
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b406 <__copybits>:
 800b406:	3901      	subs	r1, #1
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	1149      	asrs	r1, r1, #5
 800b40c:	6914      	ldr	r4, [r2, #16]
 800b40e:	3101      	adds	r1, #1
 800b410:	f102 0314 	add.w	r3, r2, #20
 800b414:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b418:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b41c:	1f05      	subs	r5, r0, #4
 800b41e:	42a3      	cmp	r3, r4
 800b420:	d30c      	bcc.n	800b43c <__copybits+0x36>
 800b422:	1aa3      	subs	r3, r4, r2
 800b424:	3b11      	subs	r3, #17
 800b426:	f023 0303 	bic.w	r3, r3, #3
 800b42a:	3211      	adds	r2, #17
 800b42c:	42a2      	cmp	r2, r4
 800b42e:	bf88      	it	hi
 800b430:	2300      	movhi	r3, #0
 800b432:	4418      	add	r0, r3
 800b434:	2300      	movs	r3, #0
 800b436:	4288      	cmp	r0, r1
 800b438:	d305      	bcc.n	800b446 <__copybits+0x40>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b440:	f845 6f04 	str.w	r6, [r5, #4]!
 800b444:	e7eb      	b.n	800b41e <__copybits+0x18>
 800b446:	f840 3b04 	str.w	r3, [r0], #4
 800b44a:	e7f4      	b.n	800b436 <__copybits+0x30>

0800b44c <__any_on>:
 800b44c:	f100 0214 	add.w	r2, r0, #20
 800b450:	6900      	ldr	r0, [r0, #16]
 800b452:	114b      	asrs	r3, r1, #5
 800b454:	4298      	cmp	r0, r3
 800b456:	b510      	push	{r4, lr}
 800b458:	db11      	blt.n	800b47e <__any_on+0x32>
 800b45a:	dd0a      	ble.n	800b472 <__any_on+0x26>
 800b45c:	f011 011f 	ands.w	r1, r1, #31
 800b460:	d007      	beq.n	800b472 <__any_on+0x26>
 800b462:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b466:	fa24 f001 	lsr.w	r0, r4, r1
 800b46a:	fa00 f101 	lsl.w	r1, r0, r1
 800b46e:	428c      	cmp	r4, r1
 800b470:	d10b      	bne.n	800b48a <__any_on+0x3e>
 800b472:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b476:	4293      	cmp	r3, r2
 800b478:	d803      	bhi.n	800b482 <__any_on+0x36>
 800b47a:	2000      	movs	r0, #0
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	4603      	mov	r3, r0
 800b480:	e7f7      	b.n	800b472 <__any_on+0x26>
 800b482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b486:	2900      	cmp	r1, #0
 800b488:	d0f5      	beq.n	800b476 <__any_on+0x2a>
 800b48a:	2001      	movs	r0, #1
 800b48c:	e7f6      	b.n	800b47c <__any_on+0x30>

0800b48e <_calloc_r>:
 800b48e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b490:	fba1 2402 	umull	r2, r4, r1, r2
 800b494:	b94c      	cbnz	r4, 800b4aa <_calloc_r+0x1c>
 800b496:	4611      	mov	r1, r2
 800b498:	9201      	str	r2, [sp, #4]
 800b49a:	f000 f87b 	bl	800b594 <_malloc_r>
 800b49e:	9a01      	ldr	r2, [sp, #4]
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	b930      	cbnz	r0, 800b4b2 <_calloc_r+0x24>
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	b003      	add	sp, #12
 800b4a8:	bd30      	pop	{r4, r5, pc}
 800b4aa:	220c      	movs	r2, #12
 800b4ac:	6002      	str	r2, [r0, #0]
 800b4ae:	2500      	movs	r5, #0
 800b4b0:	e7f8      	b.n	800b4a4 <_calloc_r+0x16>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	f7fc fbb6 	bl	8007c24 <memset>
 800b4b8:	e7f4      	b.n	800b4a4 <_calloc_r+0x16>
	...

0800b4bc <_free_r>:
 800b4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d044      	beq.n	800b54c <_free_r+0x90>
 800b4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c6:	9001      	str	r0, [sp, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ce:	bfb8      	it	lt
 800b4d0:	18e4      	addlt	r4, r4, r3
 800b4d2:	f000 fab5 	bl	800ba40 <__malloc_lock>
 800b4d6:	4a1e      	ldr	r2, [pc, #120]	; (800b550 <_free_r+0x94>)
 800b4d8:	9801      	ldr	r0, [sp, #4]
 800b4da:	6813      	ldr	r3, [r2, #0]
 800b4dc:	b933      	cbnz	r3, 800b4ec <_free_r+0x30>
 800b4de:	6063      	str	r3, [r4, #4]
 800b4e0:	6014      	str	r4, [r2, #0]
 800b4e2:	b003      	add	sp, #12
 800b4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4e8:	f000 bab0 	b.w	800ba4c <__malloc_unlock>
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	d908      	bls.n	800b502 <_free_r+0x46>
 800b4f0:	6825      	ldr	r5, [r4, #0]
 800b4f2:	1961      	adds	r1, r4, r5
 800b4f4:	428b      	cmp	r3, r1
 800b4f6:	bf01      	itttt	eq
 800b4f8:	6819      	ldreq	r1, [r3, #0]
 800b4fa:	685b      	ldreq	r3, [r3, #4]
 800b4fc:	1949      	addeq	r1, r1, r5
 800b4fe:	6021      	streq	r1, [r4, #0]
 800b500:	e7ed      	b.n	800b4de <_free_r+0x22>
 800b502:	461a      	mov	r2, r3
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	b10b      	cbz	r3, 800b50c <_free_r+0x50>
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d9fa      	bls.n	800b502 <_free_r+0x46>
 800b50c:	6811      	ldr	r1, [r2, #0]
 800b50e:	1855      	adds	r5, r2, r1
 800b510:	42a5      	cmp	r5, r4
 800b512:	d10b      	bne.n	800b52c <_free_r+0x70>
 800b514:	6824      	ldr	r4, [r4, #0]
 800b516:	4421      	add	r1, r4
 800b518:	1854      	adds	r4, r2, r1
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	6011      	str	r1, [r2, #0]
 800b51e:	d1e0      	bne.n	800b4e2 <_free_r+0x26>
 800b520:	681c      	ldr	r4, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	6053      	str	r3, [r2, #4]
 800b526:	4421      	add	r1, r4
 800b528:	6011      	str	r1, [r2, #0]
 800b52a:	e7da      	b.n	800b4e2 <_free_r+0x26>
 800b52c:	d902      	bls.n	800b534 <_free_r+0x78>
 800b52e:	230c      	movs	r3, #12
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	e7d6      	b.n	800b4e2 <_free_r+0x26>
 800b534:	6825      	ldr	r5, [r4, #0]
 800b536:	1961      	adds	r1, r4, r5
 800b538:	428b      	cmp	r3, r1
 800b53a:	bf04      	itt	eq
 800b53c:	6819      	ldreq	r1, [r3, #0]
 800b53e:	685b      	ldreq	r3, [r3, #4]
 800b540:	6063      	str	r3, [r4, #4]
 800b542:	bf04      	itt	eq
 800b544:	1949      	addeq	r1, r1, r5
 800b546:	6021      	streq	r1, [r4, #0]
 800b548:	6054      	str	r4, [r2, #4]
 800b54a:	e7ca      	b.n	800b4e2 <_free_r+0x26>
 800b54c:	b003      	add	sp, #12
 800b54e:	bd30      	pop	{r4, r5, pc}
 800b550:	200076dc 	.word	0x200076dc

0800b554 <sbrk_aligned>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4e0e      	ldr	r6, [pc, #56]	; (800b590 <sbrk_aligned+0x3c>)
 800b558:	460c      	mov	r4, r1
 800b55a:	6831      	ldr	r1, [r6, #0]
 800b55c:	4605      	mov	r5, r0
 800b55e:	b911      	cbnz	r1, 800b566 <sbrk_aligned+0x12>
 800b560:	f000 f9f2 	bl	800b948 <_sbrk_r>
 800b564:	6030      	str	r0, [r6, #0]
 800b566:	4621      	mov	r1, r4
 800b568:	4628      	mov	r0, r5
 800b56a:	f000 f9ed 	bl	800b948 <_sbrk_r>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d00a      	beq.n	800b588 <sbrk_aligned+0x34>
 800b572:	1cc4      	adds	r4, r0, #3
 800b574:	f024 0403 	bic.w	r4, r4, #3
 800b578:	42a0      	cmp	r0, r4
 800b57a:	d007      	beq.n	800b58c <sbrk_aligned+0x38>
 800b57c:	1a21      	subs	r1, r4, r0
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 f9e2 	bl	800b948 <_sbrk_r>
 800b584:	3001      	adds	r0, #1
 800b586:	d101      	bne.n	800b58c <sbrk_aligned+0x38>
 800b588:	f04f 34ff 	mov.w	r4, #4294967295
 800b58c:	4620      	mov	r0, r4
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	200076e0 	.word	0x200076e0

0800b594 <_malloc_r>:
 800b594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b598:	1ccd      	adds	r5, r1, #3
 800b59a:	f025 0503 	bic.w	r5, r5, #3
 800b59e:	3508      	adds	r5, #8
 800b5a0:	2d0c      	cmp	r5, #12
 800b5a2:	bf38      	it	cc
 800b5a4:	250c      	movcc	r5, #12
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	db01      	blt.n	800b5b0 <_malloc_r+0x1c>
 800b5ac:	42a9      	cmp	r1, r5
 800b5ae:	d905      	bls.n	800b5bc <_malloc_r+0x28>
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5bc:	4e2e      	ldr	r6, [pc, #184]	; (800b678 <_malloc_r+0xe4>)
 800b5be:	f000 fa3f 	bl	800ba40 <__malloc_lock>
 800b5c2:	6833      	ldr	r3, [r6, #0]
 800b5c4:	461c      	mov	r4, r3
 800b5c6:	bb34      	cbnz	r4, 800b616 <_malloc_r+0x82>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	f7ff ffc2 	bl	800b554 <sbrk_aligned>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	d14d      	bne.n	800b672 <_malloc_r+0xde>
 800b5d6:	6834      	ldr	r4, [r6, #0]
 800b5d8:	4626      	mov	r6, r4
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	d140      	bne.n	800b660 <_malloc_r+0xcc>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	eb04 0803 	add.w	r8, r4, r3
 800b5e8:	f000 f9ae 	bl	800b948 <_sbrk_r>
 800b5ec:	4580      	cmp	r8, r0
 800b5ee:	d13a      	bne.n	800b666 <_malloc_r+0xd2>
 800b5f0:	6821      	ldr	r1, [r4, #0]
 800b5f2:	3503      	adds	r5, #3
 800b5f4:	1a6d      	subs	r5, r5, r1
 800b5f6:	f025 0503 	bic.w	r5, r5, #3
 800b5fa:	3508      	adds	r5, #8
 800b5fc:	2d0c      	cmp	r5, #12
 800b5fe:	bf38      	it	cc
 800b600:	250c      	movcc	r5, #12
 800b602:	4629      	mov	r1, r5
 800b604:	4638      	mov	r0, r7
 800b606:	f7ff ffa5 	bl	800b554 <sbrk_aligned>
 800b60a:	3001      	adds	r0, #1
 800b60c:	d02b      	beq.n	800b666 <_malloc_r+0xd2>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	442b      	add	r3, r5
 800b612:	6023      	str	r3, [r4, #0]
 800b614:	e00e      	b.n	800b634 <_malloc_r+0xa0>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	1b52      	subs	r2, r2, r5
 800b61a:	d41e      	bmi.n	800b65a <_malloc_r+0xc6>
 800b61c:	2a0b      	cmp	r2, #11
 800b61e:	d916      	bls.n	800b64e <_malloc_r+0xba>
 800b620:	1961      	adds	r1, r4, r5
 800b622:	42a3      	cmp	r3, r4
 800b624:	6025      	str	r5, [r4, #0]
 800b626:	bf18      	it	ne
 800b628:	6059      	strne	r1, [r3, #4]
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	bf08      	it	eq
 800b62e:	6031      	streq	r1, [r6, #0]
 800b630:	5162      	str	r2, [r4, r5]
 800b632:	604b      	str	r3, [r1, #4]
 800b634:	4638      	mov	r0, r7
 800b636:	f104 060b 	add.w	r6, r4, #11
 800b63a:	f000 fa07 	bl	800ba4c <__malloc_unlock>
 800b63e:	f026 0607 	bic.w	r6, r6, #7
 800b642:	1d23      	adds	r3, r4, #4
 800b644:	1af2      	subs	r2, r6, r3
 800b646:	d0b6      	beq.n	800b5b6 <_malloc_r+0x22>
 800b648:	1b9b      	subs	r3, r3, r6
 800b64a:	50a3      	str	r3, [r4, r2]
 800b64c:	e7b3      	b.n	800b5b6 <_malloc_r+0x22>
 800b64e:	6862      	ldr	r2, [r4, #4]
 800b650:	42a3      	cmp	r3, r4
 800b652:	bf0c      	ite	eq
 800b654:	6032      	streq	r2, [r6, #0]
 800b656:	605a      	strne	r2, [r3, #4]
 800b658:	e7ec      	b.n	800b634 <_malloc_r+0xa0>
 800b65a:	4623      	mov	r3, r4
 800b65c:	6864      	ldr	r4, [r4, #4]
 800b65e:	e7b2      	b.n	800b5c6 <_malloc_r+0x32>
 800b660:	4634      	mov	r4, r6
 800b662:	6876      	ldr	r6, [r6, #4]
 800b664:	e7b9      	b.n	800b5da <_malloc_r+0x46>
 800b666:	230c      	movs	r3, #12
 800b668:	603b      	str	r3, [r7, #0]
 800b66a:	4638      	mov	r0, r7
 800b66c:	f000 f9ee 	bl	800ba4c <__malloc_unlock>
 800b670:	e7a1      	b.n	800b5b6 <_malloc_r+0x22>
 800b672:	6025      	str	r5, [r4, #0]
 800b674:	e7de      	b.n	800b634 <_malloc_r+0xa0>
 800b676:	bf00      	nop
 800b678:	200076dc 	.word	0x200076dc

0800b67c <__ssputs_r>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	688e      	ldr	r6, [r1, #8]
 800b682:	429e      	cmp	r6, r3
 800b684:	4682      	mov	sl, r0
 800b686:	460c      	mov	r4, r1
 800b688:	4690      	mov	r8, r2
 800b68a:	461f      	mov	r7, r3
 800b68c:	d838      	bhi.n	800b700 <__ssputs_r+0x84>
 800b68e:	898a      	ldrh	r2, [r1, #12]
 800b690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b694:	d032      	beq.n	800b6fc <__ssputs_r+0x80>
 800b696:	6825      	ldr	r5, [r4, #0]
 800b698:	6909      	ldr	r1, [r1, #16]
 800b69a:	eba5 0901 	sub.w	r9, r5, r1
 800b69e:	6965      	ldr	r5, [r4, #20]
 800b6a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	444b      	add	r3, r9
 800b6ac:	106d      	asrs	r5, r5, #1
 800b6ae:	429d      	cmp	r5, r3
 800b6b0:	bf38      	it	cc
 800b6b2:	461d      	movcc	r5, r3
 800b6b4:	0553      	lsls	r3, r2, #21
 800b6b6:	d531      	bpl.n	800b71c <__ssputs_r+0xa0>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7ff ff6b 	bl	800b594 <_malloc_r>
 800b6be:	4606      	mov	r6, r0
 800b6c0:	b950      	cbnz	r0, 800b6d8 <__ssputs_r+0x5c>
 800b6c2:	230c      	movs	r3, #12
 800b6c4:	f8ca 3000 	str.w	r3, [sl]
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d8:	6921      	ldr	r1, [r4, #16]
 800b6da:	464a      	mov	r2, r9
 800b6dc:	f7ff fa08 	bl	800aaf0 <memcpy>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	6126      	str	r6, [r4, #16]
 800b6ee:	6165      	str	r5, [r4, #20]
 800b6f0:	444e      	add	r6, r9
 800b6f2:	eba5 0509 	sub.w	r5, r5, r9
 800b6f6:	6026      	str	r6, [r4, #0]
 800b6f8:	60a5      	str	r5, [r4, #8]
 800b6fa:	463e      	mov	r6, r7
 800b6fc:	42be      	cmp	r6, r7
 800b6fe:	d900      	bls.n	800b702 <__ssputs_r+0x86>
 800b700:	463e      	mov	r6, r7
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	4632      	mov	r2, r6
 800b706:	4641      	mov	r1, r8
 800b708:	f000 f980 	bl	800ba0c <memmove>
 800b70c:	68a3      	ldr	r3, [r4, #8]
 800b70e:	1b9b      	subs	r3, r3, r6
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	4433      	add	r3, r6
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	2000      	movs	r0, #0
 800b71a:	e7db      	b.n	800b6d4 <__ssputs_r+0x58>
 800b71c:	462a      	mov	r2, r5
 800b71e:	f000 f99b 	bl	800ba58 <_realloc_r>
 800b722:	4606      	mov	r6, r0
 800b724:	2800      	cmp	r0, #0
 800b726:	d1e1      	bne.n	800b6ec <__ssputs_r+0x70>
 800b728:	6921      	ldr	r1, [r4, #16]
 800b72a:	4650      	mov	r0, sl
 800b72c:	f7ff fec6 	bl	800b4bc <_free_r>
 800b730:	e7c7      	b.n	800b6c2 <__ssputs_r+0x46>
	...

0800b734 <_svfiprintf_r>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	4698      	mov	r8, r3
 800b73a:	898b      	ldrh	r3, [r1, #12]
 800b73c:	061b      	lsls	r3, r3, #24
 800b73e:	b09d      	sub	sp, #116	; 0x74
 800b740:	4607      	mov	r7, r0
 800b742:	460d      	mov	r5, r1
 800b744:	4614      	mov	r4, r2
 800b746:	d50e      	bpl.n	800b766 <_svfiprintf_r+0x32>
 800b748:	690b      	ldr	r3, [r1, #16]
 800b74a:	b963      	cbnz	r3, 800b766 <_svfiprintf_r+0x32>
 800b74c:	2140      	movs	r1, #64	; 0x40
 800b74e:	f7ff ff21 	bl	800b594 <_malloc_r>
 800b752:	6028      	str	r0, [r5, #0]
 800b754:	6128      	str	r0, [r5, #16]
 800b756:	b920      	cbnz	r0, 800b762 <_svfiprintf_r+0x2e>
 800b758:	230c      	movs	r3, #12
 800b75a:	603b      	str	r3, [r7, #0]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	e0d1      	b.n	800b906 <_svfiprintf_r+0x1d2>
 800b762:	2340      	movs	r3, #64	; 0x40
 800b764:	616b      	str	r3, [r5, #20]
 800b766:	2300      	movs	r3, #0
 800b768:	9309      	str	r3, [sp, #36]	; 0x24
 800b76a:	2320      	movs	r3, #32
 800b76c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b770:	f8cd 800c 	str.w	r8, [sp, #12]
 800b774:	2330      	movs	r3, #48	; 0x30
 800b776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b920 <_svfiprintf_r+0x1ec>
 800b77a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b77e:	f04f 0901 	mov.w	r9, #1
 800b782:	4623      	mov	r3, r4
 800b784:	469a      	mov	sl, r3
 800b786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78a:	b10a      	cbz	r2, 800b790 <_svfiprintf_r+0x5c>
 800b78c:	2a25      	cmp	r2, #37	; 0x25
 800b78e:	d1f9      	bne.n	800b784 <_svfiprintf_r+0x50>
 800b790:	ebba 0b04 	subs.w	fp, sl, r4
 800b794:	d00b      	beq.n	800b7ae <_svfiprintf_r+0x7a>
 800b796:	465b      	mov	r3, fp
 800b798:	4622      	mov	r2, r4
 800b79a:	4629      	mov	r1, r5
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7ff ff6d 	bl	800b67c <__ssputs_r>
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	f000 80aa 	beq.w	800b8fc <_svfiprintf_r+0x1c8>
 800b7a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7aa:	445a      	add	r2, fp
 800b7ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 80a2 	beq.w	800b8fc <_svfiprintf_r+0x1c8>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b7be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c2:	f10a 0a01 	add.w	sl, sl, #1
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	9307      	str	r3, [sp, #28]
 800b7ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b7d0:	4654      	mov	r4, sl
 800b7d2:	2205      	movs	r2, #5
 800b7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d8:	4851      	ldr	r0, [pc, #324]	; (800b920 <_svfiprintf_r+0x1ec>)
 800b7da:	f7f4 fd01 	bl	80001e0 <memchr>
 800b7de:	9a04      	ldr	r2, [sp, #16]
 800b7e0:	b9d8      	cbnz	r0, 800b81a <_svfiprintf_r+0xe6>
 800b7e2:	06d0      	lsls	r0, r2, #27
 800b7e4:	bf44      	itt	mi
 800b7e6:	2320      	movmi	r3, #32
 800b7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ec:	0711      	lsls	r1, r2, #28
 800b7ee:	bf44      	itt	mi
 800b7f0:	232b      	movmi	r3, #43	; 0x2b
 800b7f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fc:	d015      	beq.n	800b82a <_svfiprintf_r+0xf6>
 800b7fe:	9a07      	ldr	r2, [sp, #28]
 800b800:	4654      	mov	r4, sl
 800b802:	2000      	movs	r0, #0
 800b804:	f04f 0c0a 	mov.w	ip, #10
 800b808:	4621      	mov	r1, r4
 800b80a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80e:	3b30      	subs	r3, #48	; 0x30
 800b810:	2b09      	cmp	r3, #9
 800b812:	d94e      	bls.n	800b8b2 <_svfiprintf_r+0x17e>
 800b814:	b1b0      	cbz	r0, 800b844 <_svfiprintf_r+0x110>
 800b816:	9207      	str	r2, [sp, #28]
 800b818:	e014      	b.n	800b844 <_svfiprintf_r+0x110>
 800b81a:	eba0 0308 	sub.w	r3, r0, r8
 800b81e:	fa09 f303 	lsl.w	r3, r9, r3
 800b822:	4313      	orrs	r3, r2
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	46a2      	mov	sl, r4
 800b828:	e7d2      	b.n	800b7d0 <_svfiprintf_r+0x9c>
 800b82a:	9b03      	ldr	r3, [sp, #12]
 800b82c:	1d19      	adds	r1, r3, #4
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	9103      	str	r1, [sp, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	bfbb      	ittet	lt
 800b836:	425b      	neglt	r3, r3
 800b838:	f042 0202 	orrlt.w	r2, r2, #2
 800b83c:	9307      	strge	r3, [sp, #28]
 800b83e:	9307      	strlt	r3, [sp, #28]
 800b840:	bfb8      	it	lt
 800b842:	9204      	strlt	r2, [sp, #16]
 800b844:	7823      	ldrb	r3, [r4, #0]
 800b846:	2b2e      	cmp	r3, #46	; 0x2e
 800b848:	d10c      	bne.n	800b864 <_svfiprintf_r+0x130>
 800b84a:	7863      	ldrb	r3, [r4, #1]
 800b84c:	2b2a      	cmp	r3, #42	; 0x2a
 800b84e:	d135      	bne.n	800b8bc <_svfiprintf_r+0x188>
 800b850:	9b03      	ldr	r3, [sp, #12]
 800b852:	1d1a      	adds	r2, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	9203      	str	r2, [sp, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfb8      	it	lt
 800b85c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b860:	3402      	adds	r4, #2
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b930 <_svfiprintf_r+0x1fc>
 800b868:	7821      	ldrb	r1, [r4, #0]
 800b86a:	2203      	movs	r2, #3
 800b86c:	4650      	mov	r0, sl
 800b86e:	f7f4 fcb7 	bl	80001e0 <memchr>
 800b872:	b140      	cbz	r0, 800b886 <_svfiprintf_r+0x152>
 800b874:	2340      	movs	r3, #64	; 0x40
 800b876:	eba0 000a 	sub.w	r0, r0, sl
 800b87a:	fa03 f000 	lsl.w	r0, r3, r0
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	4303      	orrs	r3, r0
 800b882:	3401      	adds	r4, #1
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88a:	4826      	ldr	r0, [pc, #152]	; (800b924 <_svfiprintf_r+0x1f0>)
 800b88c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b890:	2206      	movs	r2, #6
 800b892:	f7f4 fca5 	bl	80001e0 <memchr>
 800b896:	2800      	cmp	r0, #0
 800b898:	d038      	beq.n	800b90c <_svfiprintf_r+0x1d8>
 800b89a:	4b23      	ldr	r3, [pc, #140]	; (800b928 <_svfiprintf_r+0x1f4>)
 800b89c:	bb1b      	cbnz	r3, 800b8e6 <_svfiprintf_r+0x1b2>
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	3307      	adds	r3, #7
 800b8a2:	f023 0307 	bic.w	r3, r3, #7
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	9303      	str	r3, [sp, #12]
 800b8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ac:	4433      	add	r3, r6
 800b8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b0:	e767      	b.n	800b782 <_svfiprintf_r+0x4e>
 800b8b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	e7a5      	b.n	800b808 <_svfiprintf_r+0xd4>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	3401      	adds	r4, #1
 800b8c0:	9305      	str	r3, [sp, #20]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f04f 0c0a 	mov.w	ip, #10
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ce:	3a30      	subs	r2, #48	; 0x30
 800b8d0:	2a09      	cmp	r2, #9
 800b8d2:	d903      	bls.n	800b8dc <_svfiprintf_r+0x1a8>
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d0c5      	beq.n	800b864 <_svfiprintf_r+0x130>
 800b8d8:	9105      	str	r1, [sp, #20]
 800b8da:	e7c3      	b.n	800b864 <_svfiprintf_r+0x130>
 800b8dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e7f0      	b.n	800b8c8 <_svfiprintf_r+0x194>
 800b8e6:	ab03      	add	r3, sp, #12
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <_svfiprintf_r+0x1f8>)
 800b8ee:	a904      	add	r1, sp, #16
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	f7fc fa3f 	bl	8007d74 <_printf_float>
 800b8f6:	1c42      	adds	r2, r0, #1
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	d1d6      	bne.n	800b8aa <_svfiprintf_r+0x176>
 800b8fc:	89ab      	ldrh	r3, [r5, #12]
 800b8fe:	065b      	lsls	r3, r3, #25
 800b900:	f53f af2c 	bmi.w	800b75c <_svfiprintf_r+0x28>
 800b904:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b906:	b01d      	add	sp, #116	; 0x74
 800b908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90c:	ab03      	add	r3, sp, #12
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	462a      	mov	r2, r5
 800b912:	4b06      	ldr	r3, [pc, #24]	; (800b92c <_svfiprintf_r+0x1f8>)
 800b914:	a904      	add	r1, sp, #16
 800b916:	4638      	mov	r0, r7
 800b918:	f7fc fcd0 	bl	80082bc <_printf_i>
 800b91c:	e7eb      	b.n	800b8f6 <_svfiprintf_r+0x1c2>
 800b91e:	bf00      	nop
 800b920:	080103ac 	.word	0x080103ac
 800b924:	080103b6 	.word	0x080103b6
 800b928:	08007d75 	.word	0x08007d75
 800b92c:	0800b67d 	.word	0x0800b67d
 800b930:	080103b2 	.word	0x080103b2
 800b934:	00000000 	.word	0x00000000

0800b938 <nan>:
 800b938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b940 <nan+0x8>
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	00000000 	.word	0x00000000
 800b944:	7ff80000 	.word	0x7ff80000

0800b948 <_sbrk_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d06      	ldr	r5, [pc, #24]	; (800b964 <_sbrk_r+0x1c>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7f6 f96c 	bl	8001c30 <_sbrk>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_sbrk_r+0x1a>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_sbrk_r+0x1a>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	200076e4 	.word	0x200076e4

0800b968 <strncmp>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	b17a      	cbz	r2, 800b98c <strncmp+0x24>
 800b96c:	4603      	mov	r3, r0
 800b96e:	3901      	subs	r1, #1
 800b970:	1884      	adds	r4, r0, r2
 800b972:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b976:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b97a:	4290      	cmp	r0, r2
 800b97c:	d101      	bne.n	800b982 <strncmp+0x1a>
 800b97e:	42a3      	cmp	r3, r4
 800b980:	d101      	bne.n	800b986 <strncmp+0x1e>
 800b982:	1a80      	subs	r0, r0, r2
 800b984:	bd10      	pop	{r4, pc}
 800b986:	2800      	cmp	r0, #0
 800b988:	d1f3      	bne.n	800b972 <strncmp+0xa>
 800b98a:	e7fa      	b.n	800b982 <strncmp+0x1a>
 800b98c:	4610      	mov	r0, r2
 800b98e:	e7f9      	b.n	800b984 <strncmp+0x1c>

0800b990 <__ascii_wctomb>:
 800b990:	b149      	cbz	r1, 800b9a6 <__ascii_wctomb+0x16>
 800b992:	2aff      	cmp	r2, #255	; 0xff
 800b994:	bf85      	ittet	hi
 800b996:	238a      	movhi	r3, #138	; 0x8a
 800b998:	6003      	strhi	r3, [r0, #0]
 800b99a:	700a      	strbls	r2, [r1, #0]
 800b99c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9a0:	bf98      	it	ls
 800b9a2:	2001      	movls	r0, #1
 800b9a4:	4770      	bx	lr
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	4770      	bx	lr
	...

0800b9ac <__assert_func>:
 800b9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9ae:	4614      	mov	r4, r2
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <__assert_func+0x2c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	68d8      	ldr	r0, [r3, #12]
 800b9ba:	b14c      	cbz	r4, 800b9d0 <__assert_func+0x24>
 800b9bc:	4b07      	ldr	r3, [pc, #28]	; (800b9dc <__assert_func+0x30>)
 800b9be:	9100      	str	r1, [sp, #0]
 800b9c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9c4:	4906      	ldr	r1, [pc, #24]	; (800b9e0 <__assert_func+0x34>)
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	f000 f80e 	bl	800b9e8 <fiprintf>
 800b9cc:	f000 fa8c 	bl	800bee8 <abort>
 800b9d0:	4b04      	ldr	r3, [pc, #16]	; (800b9e4 <__assert_func+0x38>)
 800b9d2:	461c      	mov	r4, r3
 800b9d4:	e7f3      	b.n	800b9be <__assert_func+0x12>
 800b9d6:	bf00      	nop
 800b9d8:	200000a8 	.word	0x200000a8
 800b9dc:	080103bd 	.word	0x080103bd
 800b9e0:	080103ca 	.word	0x080103ca
 800b9e4:	0800ff43 	.word	0x0800ff43

0800b9e8 <fiprintf>:
 800b9e8:	b40e      	push	{r1, r2, r3}
 800b9ea:	b503      	push	{r0, r1, lr}
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	ab03      	add	r3, sp, #12
 800b9f0:	4805      	ldr	r0, [pc, #20]	; (800ba08 <fiprintf+0x20>)
 800b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f6:	6800      	ldr	r0, [r0, #0]
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	f000 f885 	bl	800bb08 <_vfiprintf_r>
 800b9fe:	b002      	add	sp, #8
 800ba00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba04:	b003      	add	sp, #12
 800ba06:	4770      	bx	lr
 800ba08:	200000a8 	.word	0x200000a8

0800ba0c <memmove>:
 800ba0c:	4288      	cmp	r0, r1
 800ba0e:	b510      	push	{r4, lr}
 800ba10:	eb01 0402 	add.w	r4, r1, r2
 800ba14:	d902      	bls.n	800ba1c <memmove+0x10>
 800ba16:	4284      	cmp	r4, r0
 800ba18:	4623      	mov	r3, r4
 800ba1a:	d807      	bhi.n	800ba2c <memmove+0x20>
 800ba1c:	1e43      	subs	r3, r0, #1
 800ba1e:	42a1      	cmp	r1, r4
 800ba20:	d008      	beq.n	800ba34 <memmove+0x28>
 800ba22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba2a:	e7f8      	b.n	800ba1e <memmove+0x12>
 800ba2c:	4402      	add	r2, r0
 800ba2e:	4601      	mov	r1, r0
 800ba30:	428a      	cmp	r2, r1
 800ba32:	d100      	bne.n	800ba36 <memmove+0x2a>
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba3e:	e7f7      	b.n	800ba30 <memmove+0x24>

0800ba40 <__malloc_lock>:
 800ba40:	4801      	ldr	r0, [pc, #4]	; (800ba48 <__malloc_lock+0x8>)
 800ba42:	f000 bc11 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800ba46:	bf00      	nop
 800ba48:	200076e8 	.word	0x200076e8

0800ba4c <__malloc_unlock>:
 800ba4c:	4801      	ldr	r0, [pc, #4]	; (800ba54 <__malloc_unlock+0x8>)
 800ba4e:	f000 bc0c 	b.w	800c26a <__retarget_lock_release_recursive>
 800ba52:	bf00      	nop
 800ba54:	200076e8 	.word	0x200076e8

0800ba58 <_realloc_r>:
 800ba58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	4614      	mov	r4, r2
 800ba60:	460e      	mov	r6, r1
 800ba62:	b921      	cbnz	r1, 800ba6e <_realloc_r+0x16>
 800ba64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba68:	4611      	mov	r1, r2
 800ba6a:	f7ff bd93 	b.w	800b594 <_malloc_r>
 800ba6e:	b92a      	cbnz	r2, 800ba7c <_realloc_r+0x24>
 800ba70:	f7ff fd24 	bl	800b4bc <_free_r>
 800ba74:	4625      	mov	r5, r4
 800ba76:	4628      	mov	r0, r5
 800ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7c:	f000 fc5c 	bl	800c338 <_malloc_usable_size_r>
 800ba80:	4284      	cmp	r4, r0
 800ba82:	4607      	mov	r7, r0
 800ba84:	d802      	bhi.n	800ba8c <_realloc_r+0x34>
 800ba86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba8a:	d812      	bhi.n	800bab2 <_realloc_r+0x5a>
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4640      	mov	r0, r8
 800ba90:	f7ff fd80 	bl	800b594 <_malloc_r>
 800ba94:	4605      	mov	r5, r0
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d0ed      	beq.n	800ba76 <_realloc_r+0x1e>
 800ba9a:	42bc      	cmp	r4, r7
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	4631      	mov	r1, r6
 800baa0:	bf28      	it	cs
 800baa2:	463a      	movcs	r2, r7
 800baa4:	f7ff f824 	bl	800aaf0 <memcpy>
 800baa8:	4631      	mov	r1, r6
 800baaa:	4640      	mov	r0, r8
 800baac:	f7ff fd06 	bl	800b4bc <_free_r>
 800bab0:	e7e1      	b.n	800ba76 <_realloc_r+0x1e>
 800bab2:	4635      	mov	r5, r6
 800bab4:	e7df      	b.n	800ba76 <_realloc_r+0x1e>

0800bab6 <__sfputc_r>:
 800bab6:	6893      	ldr	r3, [r2, #8]
 800bab8:	3b01      	subs	r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	b410      	push	{r4}
 800babe:	6093      	str	r3, [r2, #8]
 800bac0:	da08      	bge.n	800bad4 <__sfputc_r+0x1e>
 800bac2:	6994      	ldr	r4, [r2, #24]
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	db01      	blt.n	800bacc <__sfputc_r+0x16>
 800bac8:	290a      	cmp	r1, #10
 800baca:	d103      	bne.n	800bad4 <__sfputc_r+0x1e>
 800bacc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad0:	f000 b94a 	b.w	800bd68 <__swbuf_r>
 800bad4:	6813      	ldr	r3, [r2, #0]
 800bad6:	1c58      	adds	r0, r3, #1
 800bad8:	6010      	str	r0, [r2, #0]
 800bada:	7019      	strb	r1, [r3, #0]
 800badc:	4608      	mov	r0, r1
 800bade:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <__sfputs_r>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	4606      	mov	r6, r0
 800bae8:	460f      	mov	r7, r1
 800baea:	4614      	mov	r4, r2
 800baec:	18d5      	adds	r5, r2, r3
 800baee:	42ac      	cmp	r4, r5
 800baf0:	d101      	bne.n	800baf6 <__sfputs_r+0x12>
 800baf2:	2000      	movs	r0, #0
 800baf4:	e007      	b.n	800bb06 <__sfputs_r+0x22>
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	463a      	mov	r2, r7
 800bafc:	4630      	mov	r0, r6
 800bafe:	f7ff ffda 	bl	800bab6 <__sfputc_r>
 800bb02:	1c43      	adds	r3, r0, #1
 800bb04:	d1f3      	bne.n	800baee <__sfputs_r+0xa>
 800bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb08 <_vfiprintf_r>:
 800bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	b09d      	sub	sp, #116	; 0x74
 800bb10:	4614      	mov	r4, r2
 800bb12:	4698      	mov	r8, r3
 800bb14:	4606      	mov	r6, r0
 800bb16:	b118      	cbz	r0, 800bb20 <_vfiprintf_r+0x18>
 800bb18:	6983      	ldr	r3, [r0, #24]
 800bb1a:	b90b      	cbnz	r3, 800bb20 <_vfiprintf_r+0x18>
 800bb1c:	f000 fb06 	bl	800c12c <__sinit>
 800bb20:	4b89      	ldr	r3, [pc, #548]	; (800bd48 <_vfiprintf_r+0x240>)
 800bb22:	429d      	cmp	r5, r3
 800bb24:	d11b      	bne.n	800bb5e <_vfiprintf_r+0x56>
 800bb26:	6875      	ldr	r5, [r6, #4]
 800bb28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb2a:	07d9      	lsls	r1, r3, #31
 800bb2c:	d405      	bmi.n	800bb3a <_vfiprintf_r+0x32>
 800bb2e:	89ab      	ldrh	r3, [r5, #12]
 800bb30:	059a      	lsls	r2, r3, #22
 800bb32:	d402      	bmi.n	800bb3a <_vfiprintf_r+0x32>
 800bb34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb36:	f000 fb97 	bl	800c268 <__retarget_lock_acquire_recursive>
 800bb3a:	89ab      	ldrh	r3, [r5, #12]
 800bb3c:	071b      	lsls	r3, r3, #28
 800bb3e:	d501      	bpl.n	800bb44 <_vfiprintf_r+0x3c>
 800bb40:	692b      	ldr	r3, [r5, #16]
 800bb42:	b9eb      	cbnz	r3, 800bb80 <_vfiprintf_r+0x78>
 800bb44:	4629      	mov	r1, r5
 800bb46:	4630      	mov	r0, r6
 800bb48:	f000 f960 	bl	800be0c <__swsetup_r>
 800bb4c:	b1c0      	cbz	r0, 800bb80 <_vfiprintf_r+0x78>
 800bb4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb50:	07dc      	lsls	r4, r3, #31
 800bb52:	d50e      	bpl.n	800bb72 <_vfiprintf_r+0x6a>
 800bb54:	f04f 30ff 	mov.w	r0, #4294967295
 800bb58:	b01d      	add	sp, #116	; 0x74
 800bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5e:	4b7b      	ldr	r3, [pc, #492]	; (800bd4c <_vfiprintf_r+0x244>)
 800bb60:	429d      	cmp	r5, r3
 800bb62:	d101      	bne.n	800bb68 <_vfiprintf_r+0x60>
 800bb64:	68b5      	ldr	r5, [r6, #8]
 800bb66:	e7df      	b.n	800bb28 <_vfiprintf_r+0x20>
 800bb68:	4b79      	ldr	r3, [pc, #484]	; (800bd50 <_vfiprintf_r+0x248>)
 800bb6a:	429d      	cmp	r5, r3
 800bb6c:	bf08      	it	eq
 800bb6e:	68f5      	ldreq	r5, [r6, #12]
 800bb70:	e7da      	b.n	800bb28 <_vfiprintf_r+0x20>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	0598      	lsls	r0, r3, #22
 800bb76:	d4ed      	bmi.n	800bb54 <_vfiprintf_r+0x4c>
 800bb78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb7a:	f000 fb76 	bl	800c26a <__retarget_lock_release_recursive>
 800bb7e:	e7e9      	b.n	800bb54 <_vfiprintf_r+0x4c>
 800bb80:	2300      	movs	r3, #0
 800bb82:	9309      	str	r3, [sp, #36]	; 0x24
 800bb84:	2320      	movs	r3, #32
 800bb86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb8e:	2330      	movs	r3, #48	; 0x30
 800bb90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd54 <_vfiprintf_r+0x24c>
 800bb94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb98:	f04f 0901 	mov.w	r9, #1
 800bb9c:	4623      	mov	r3, r4
 800bb9e:	469a      	mov	sl, r3
 800bba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba4:	b10a      	cbz	r2, 800bbaa <_vfiprintf_r+0xa2>
 800bba6:	2a25      	cmp	r2, #37	; 0x25
 800bba8:	d1f9      	bne.n	800bb9e <_vfiprintf_r+0x96>
 800bbaa:	ebba 0b04 	subs.w	fp, sl, r4
 800bbae:	d00b      	beq.n	800bbc8 <_vfiprintf_r+0xc0>
 800bbb0:	465b      	mov	r3, fp
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f7ff ff94 	bl	800bae4 <__sfputs_r>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	f000 80aa 	beq.w	800bd16 <_vfiprintf_r+0x20e>
 800bbc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbc4:	445a      	add	r2, fp
 800bbc6:	9209      	str	r2, [sp, #36]	; 0x24
 800bbc8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 80a2 	beq.w	800bd16 <_vfiprintf_r+0x20e>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbdc:	f10a 0a01 	add.w	sl, sl, #1
 800bbe0:	9304      	str	r3, [sp, #16]
 800bbe2:	9307      	str	r3, [sp, #28]
 800bbe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbe8:	931a      	str	r3, [sp, #104]	; 0x68
 800bbea:	4654      	mov	r4, sl
 800bbec:	2205      	movs	r2, #5
 800bbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf2:	4858      	ldr	r0, [pc, #352]	; (800bd54 <_vfiprintf_r+0x24c>)
 800bbf4:	f7f4 faf4 	bl	80001e0 <memchr>
 800bbf8:	9a04      	ldr	r2, [sp, #16]
 800bbfa:	b9d8      	cbnz	r0, 800bc34 <_vfiprintf_r+0x12c>
 800bbfc:	06d1      	lsls	r1, r2, #27
 800bbfe:	bf44      	itt	mi
 800bc00:	2320      	movmi	r3, #32
 800bc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc06:	0713      	lsls	r3, r2, #28
 800bc08:	bf44      	itt	mi
 800bc0a:	232b      	movmi	r3, #43	; 0x2b
 800bc0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc10:	f89a 3000 	ldrb.w	r3, [sl]
 800bc14:	2b2a      	cmp	r3, #42	; 0x2a
 800bc16:	d015      	beq.n	800bc44 <_vfiprintf_r+0x13c>
 800bc18:	9a07      	ldr	r2, [sp, #28]
 800bc1a:	4654      	mov	r4, sl
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	f04f 0c0a 	mov.w	ip, #10
 800bc22:	4621      	mov	r1, r4
 800bc24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc28:	3b30      	subs	r3, #48	; 0x30
 800bc2a:	2b09      	cmp	r3, #9
 800bc2c:	d94e      	bls.n	800bccc <_vfiprintf_r+0x1c4>
 800bc2e:	b1b0      	cbz	r0, 800bc5e <_vfiprintf_r+0x156>
 800bc30:	9207      	str	r2, [sp, #28]
 800bc32:	e014      	b.n	800bc5e <_vfiprintf_r+0x156>
 800bc34:	eba0 0308 	sub.w	r3, r0, r8
 800bc38:	fa09 f303 	lsl.w	r3, r9, r3
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	9304      	str	r3, [sp, #16]
 800bc40:	46a2      	mov	sl, r4
 800bc42:	e7d2      	b.n	800bbea <_vfiprintf_r+0xe2>
 800bc44:	9b03      	ldr	r3, [sp, #12]
 800bc46:	1d19      	adds	r1, r3, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	9103      	str	r1, [sp, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	bfbb      	ittet	lt
 800bc50:	425b      	neglt	r3, r3
 800bc52:	f042 0202 	orrlt.w	r2, r2, #2
 800bc56:	9307      	strge	r3, [sp, #28]
 800bc58:	9307      	strlt	r3, [sp, #28]
 800bc5a:	bfb8      	it	lt
 800bc5c:	9204      	strlt	r2, [sp, #16]
 800bc5e:	7823      	ldrb	r3, [r4, #0]
 800bc60:	2b2e      	cmp	r3, #46	; 0x2e
 800bc62:	d10c      	bne.n	800bc7e <_vfiprintf_r+0x176>
 800bc64:	7863      	ldrb	r3, [r4, #1]
 800bc66:	2b2a      	cmp	r3, #42	; 0x2a
 800bc68:	d135      	bne.n	800bcd6 <_vfiprintf_r+0x1ce>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	1d1a      	adds	r2, r3, #4
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	9203      	str	r2, [sp, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bfb8      	it	lt
 800bc76:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc7a:	3402      	adds	r4, #2
 800bc7c:	9305      	str	r3, [sp, #20]
 800bc7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd64 <_vfiprintf_r+0x25c>
 800bc82:	7821      	ldrb	r1, [r4, #0]
 800bc84:	2203      	movs	r2, #3
 800bc86:	4650      	mov	r0, sl
 800bc88:	f7f4 faaa 	bl	80001e0 <memchr>
 800bc8c:	b140      	cbz	r0, 800bca0 <_vfiprintf_r+0x198>
 800bc8e:	2340      	movs	r3, #64	; 0x40
 800bc90:	eba0 000a 	sub.w	r0, r0, sl
 800bc94:	fa03 f000 	lsl.w	r0, r3, r0
 800bc98:	9b04      	ldr	r3, [sp, #16]
 800bc9a:	4303      	orrs	r3, r0
 800bc9c:	3401      	adds	r4, #1
 800bc9e:	9304      	str	r3, [sp, #16]
 800bca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca4:	482c      	ldr	r0, [pc, #176]	; (800bd58 <_vfiprintf_r+0x250>)
 800bca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcaa:	2206      	movs	r2, #6
 800bcac:	f7f4 fa98 	bl	80001e0 <memchr>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d03f      	beq.n	800bd34 <_vfiprintf_r+0x22c>
 800bcb4:	4b29      	ldr	r3, [pc, #164]	; (800bd5c <_vfiprintf_r+0x254>)
 800bcb6:	bb1b      	cbnz	r3, 800bd00 <_vfiprintf_r+0x1f8>
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	3307      	adds	r3, #7
 800bcbc:	f023 0307 	bic.w	r3, r3, #7
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	9303      	str	r3, [sp, #12]
 800bcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc6:	443b      	add	r3, r7
 800bcc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcca:	e767      	b.n	800bb9c <_vfiprintf_r+0x94>
 800bccc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	e7a5      	b.n	800bc22 <_vfiprintf_r+0x11a>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	3401      	adds	r4, #1
 800bcda:	9305      	str	r3, [sp, #20]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	f04f 0c0a 	mov.w	ip, #10
 800bce2:	4620      	mov	r0, r4
 800bce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce8:	3a30      	subs	r2, #48	; 0x30
 800bcea:	2a09      	cmp	r2, #9
 800bcec:	d903      	bls.n	800bcf6 <_vfiprintf_r+0x1ee>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0c5      	beq.n	800bc7e <_vfiprintf_r+0x176>
 800bcf2:	9105      	str	r1, [sp, #20]
 800bcf4:	e7c3      	b.n	800bc7e <_vfiprintf_r+0x176>
 800bcf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e7f0      	b.n	800bce2 <_vfiprintf_r+0x1da>
 800bd00:	ab03      	add	r3, sp, #12
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	462a      	mov	r2, r5
 800bd06:	4b16      	ldr	r3, [pc, #88]	; (800bd60 <_vfiprintf_r+0x258>)
 800bd08:	a904      	add	r1, sp, #16
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f7fc f832 	bl	8007d74 <_printf_float>
 800bd10:	4607      	mov	r7, r0
 800bd12:	1c78      	adds	r0, r7, #1
 800bd14:	d1d6      	bne.n	800bcc4 <_vfiprintf_r+0x1bc>
 800bd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd18:	07d9      	lsls	r1, r3, #31
 800bd1a:	d405      	bmi.n	800bd28 <_vfiprintf_r+0x220>
 800bd1c:	89ab      	ldrh	r3, [r5, #12]
 800bd1e:	059a      	lsls	r2, r3, #22
 800bd20:	d402      	bmi.n	800bd28 <_vfiprintf_r+0x220>
 800bd22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd24:	f000 faa1 	bl	800c26a <__retarget_lock_release_recursive>
 800bd28:	89ab      	ldrh	r3, [r5, #12]
 800bd2a:	065b      	lsls	r3, r3, #25
 800bd2c:	f53f af12 	bmi.w	800bb54 <_vfiprintf_r+0x4c>
 800bd30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd32:	e711      	b.n	800bb58 <_vfiprintf_r+0x50>
 800bd34:	ab03      	add	r3, sp, #12
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	462a      	mov	r2, r5
 800bd3a:	4b09      	ldr	r3, [pc, #36]	; (800bd60 <_vfiprintf_r+0x258>)
 800bd3c:	a904      	add	r1, sp, #16
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f7fc fabc 	bl	80082bc <_printf_i>
 800bd44:	e7e4      	b.n	800bd10 <_vfiprintf_r+0x208>
 800bd46:	bf00      	nop
 800bd48:	0801041c 	.word	0x0801041c
 800bd4c:	0801043c 	.word	0x0801043c
 800bd50:	080103fc 	.word	0x080103fc
 800bd54:	080103ac 	.word	0x080103ac
 800bd58:	080103b6 	.word	0x080103b6
 800bd5c:	08007d75 	.word	0x08007d75
 800bd60:	0800bae5 	.word	0x0800bae5
 800bd64:	080103b2 	.word	0x080103b2

0800bd68 <__swbuf_r>:
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	460e      	mov	r6, r1
 800bd6c:	4614      	mov	r4, r2
 800bd6e:	4605      	mov	r5, r0
 800bd70:	b118      	cbz	r0, 800bd7a <__swbuf_r+0x12>
 800bd72:	6983      	ldr	r3, [r0, #24]
 800bd74:	b90b      	cbnz	r3, 800bd7a <__swbuf_r+0x12>
 800bd76:	f000 f9d9 	bl	800c12c <__sinit>
 800bd7a:	4b21      	ldr	r3, [pc, #132]	; (800be00 <__swbuf_r+0x98>)
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	d12b      	bne.n	800bdd8 <__swbuf_r+0x70>
 800bd80:	686c      	ldr	r4, [r5, #4]
 800bd82:	69a3      	ldr	r3, [r4, #24]
 800bd84:	60a3      	str	r3, [r4, #8]
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	071a      	lsls	r2, r3, #28
 800bd8a:	d52f      	bpl.n	800bdec <__swbuf_r+0x84>
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	b36b      	cbz	r3, 800bdec <__swbuf_r+0x84>
 800bd90:	6923      	ldr	r3, [r4, #16]
 800bd92:	6820      	ldr	r0, [r4, #0]
 800bd94:	1ac0      	subs	r0, r0, r3
 800bd96:	6963      	ldr	r3, [r4, #20]
 800bd98:	b2f6      	uxtb	r6, r6
 800bd9a:	4283      	cmp	r3, r0
 800bd9c:	4637      	mov	r7, r6
 800bd9e:	dc04      	bgt.n	800bdaa <__swbuf_r+0x42>
 800bda0:	4621      	mov	r1, r4
 800bda2:	4628      	mov	r0, r5
 800bda4:	f000 f92e 	bl	800c004 <_fflush_r>
 800bda8:	bb30      	cbnz	r0, 800bdf8 <__swbuf_r+0x90>
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	60a3      	str	r3, [r4, #8]
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	6022      	str	r2, [r4, #0]
 800bdb6:	701e      	strb	r6, [r3, #0]
 800bdb8:	6963      	ldr	r3, [r4, #20]
 800bdba:	3001      	adds	r0, #1
 800bdbc:	4283      	cmp	r3, r0
 800bdbe:	d004      	beq.n	800bdca <__swbuf_r+0x62>
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	07db      	lsls	r3, r3, #31
 800bdc4:	d506      	bpl.n	800bdd4 <__swbuf_r+0x6c>
 800bdc6:	2e0a      	cmp	r6, #10
 800bdc8:	d104      	bne.n	800bdd4 <__swbuf_r+0x6c>
 800bdca:	4621      	mov	r1, r4
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f000 f919 	bl	800c004 <_fflush_r>
 800bdd2:	b988      	cbnz	r0, 800bdf8 <__swbuf_r+0x90>
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <__swbuf_r+0x9c>)
 800bdda:	429c      	cmp	r4, r3
 800bddc:	d101      	bne.n	800bde2 <__swbuf_r+0x7a>
 800bdde:	68ac      	ldr	r4, [r5, #8]
 800bde0:	e7cf      	b.n	800bd82 <__swbuf_r+0x1a>
 800bde2:	4b09      	ldr	r3, [pc, #36]	; (800be08 <__swbuf_r+0xa0>)
 800bde4:	429c      	cmp	r4, r3
 800bde6:	bf08      	it	eq
 800bde8:	68ec      	ldreq	r4, [r5, #12]
 800bdea:	e7ca      	b.n	800bd82 <__swbuf_r+0x1a>
 800bdec:	4621      	mov	r1, r4
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f000 f80c 	bl	800be0c <__swsetup_r>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d0cb      	beq.n	800bd90 <__swbuf_r+0x28>
 800bdf8:	f04f 37ff 	mov.w	r7, #4294967295
 800bdfc:	e7ea      	b.n	800bdd4 <__swbuf_r+0x6c>
 800bdfe:	bf00      	nop
 800be00:	0801041c 	.word	0x0801041c
 800be04:	0801043c 	.word	0x0801043c
 800be08:	080103fc 	.word	0x080103fc

0800be0c <__swsetup_r>:
 800be0c:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <__swsetup_r+0xcc>)
 800be0e:	b570      	push	{r4, r5, r6, lr}
 800be10:	681d      	ldr	r5, [r3, #0]
 800be12:	4606      	mov	r6, r0
 800be14:	460c      	mov	r4, r1
 800be16:	b125      	cbz	r5, 800be22 <__swsetup_r+0x16>
 800be18:	69ab      	ldr	r3, [r5, #24]
 800be1a:	b913      	cbnz	r3, 800be22 <__swsetup_r+0x16>
 800be1c:	4628      	mov	r0, r5
 800be1e:	f000 f985 	bl	800c12c <__sinit>
 800be22:	4b2e      	ldr	r3, [pc, #184]	; (800bedc <__swsetup_r+0xd0>)
 800be24:	429c      	cmp	r4, r3
 800be26:	d10f      	bne.n	800be48 <__swsetup_r+0x3c>
 800be28:	686c      	ldr	r4, [r5, #4]
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be30:	0719      	lsls	r1, r3, #28
 800be32:	d42c      	bmi.n	800be8e <__swsetup_r+0x82>
 800be34:	06dd      	lsls	r5, r3, #27
 800be36:	d411      	bmi.n	800be5c <__swsetup_r+0x50>
 800be38:	2309      	movs	r3, #9
 800be3a:	6033      	str	r3, [r6, #0]
 800be3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	f04f 30ff 	mov.w	r0, #4294967295
 800be46:	e03e      	b.n	800bec6 <__swsetup_r+0xba>
 800be48:	4b25      	ldr	r3, [pc, #148]	; (800bee0 <__swsetup_r+0xd4>)
 800be4a:	429c      	cmp	r4, r3
 800be4c:	d101      	bne.n	800be52 <__swsetup_r+0x46>
 800be4e:	68ac      	ldr	r4, [r5, #8]
 800be50:	e7eb      	b.n	800be2a <__swsetup_r+0x1e>
 800be52:	4b24      	ldr	r3, [pc, #144]	; (800bee4 <__swsetup_r+0xd8>)
 800be54:	429c      	cmp	r4, r3
 800be56:	bf08      	it	eq
 800be58:	68ec      	ldreq	r4, [r5, #12]
 800be5a:	e7e6      	b.n	800be2a <__swsetup_r+0x1e>
 800be5c:	0758      	lsls	r0, r3, #29
 800be5e:	d512      	bpl.n	800be86 <__swsetup_r+0x7a>
 800be60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be62:	b141      	cbz	r1, 800be76 <__swsetup_r+0x6a>
 800be64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be68:	4299      	cmp	r1, r3
 800be6a:	d002      	beq.n	800be72 <__swsetup_r+0x66>
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff fb25 	bl	800b4bc <_free_r>
 800be72:	2300      	movs	r3, #0
 800be74:	6363      	str	r3, [r4, #52]	; 0x34
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be7c:	81a3      	strh	r3, [r4, #12]
 800be7e:	2300      	movs	r3, #0
 800be80:	6063      	str	r3, [r4, #4]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	f043 0308 	orr.w	r3, r3, #8
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	b94b      	cbnz	r3, 800bea6 <__swsetup_r+0x9a>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be9c:	d003      	beq.n	800bea6 <__swsetup_r+0x9a>
 800be9e:	4621      	mov	r1, r4
 800bea0:	4630      	mov	r0, r6
 800bea2:	f000 fa09 	bl	800c2b8 <__smakebuf_r>
 800bea6:	89a0      	ldrh	r0, [r4, #12]
 800bea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beac:	f010 0301 	ands.w	r3, r0, #1
 800beb0:	d00a      	beq.n	800bec8 <__swsetup_r+0xbc>
 800beb2:	2300      	movs	r3, #0
 800beb4:	60a3      	str	r3, [r4, #8]
 800beb6:	6963      	ldr	r3, [r4, #20]
 800beb8:	425b      	negs	r3, r3
 800beba:	61a3      	str	r3, [r4, #24]
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	b943      	cbnz	r3, 800bed2 <__swsetup_r+0xc6>
 800bec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bec4:	d1ba      	bne.n	800be3c <__swsetup_r+0x30>
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	0781      	lsls	r1, r0, #30
 800beca:	bf58      	it	pl
 800becc:	6963      	ldrpl	r3, [r4, #20]
 800bece:	60a3      	str	r3, [r4, #8]
 800bed0:	e7f4      	b.n	800bebc <__swsetup_r+0xb0>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e7f7      	b.n	800bec6 <__swsetup_r+0xba>
 800bed6:	bf00      	nop
 800bed8:	200000a8 	.word	0x200000a8
 800bedc:	0801041c 	.word	0x0801041c
 800bee0:	0801043c 	.word	0x0801043c
 800bee4:	080103fc 	.word	0x080103fc

0800bee8 <abort>:
 800bee8:	b508      	push	{r3, lr}
 800beea:	2006      	movs	r0, #6
 800beec:	f000 fa54 	bl	800c398 <raise>
 800bef0:	2001      	movs	r0, #1
 800bef2:	f7f5 fe6f 	bl	8001bd4 <_exit>
	...

0800bef8 <__sflush_r>:
 800bef8:	898a      	ldrh	r2, [r1, #12]
 800befa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	4605      	mov	r5, r0
 800bf00:	0710      	lsls	r0, r2, #28
 800bf02:	460c      	mov	r4, r1
 800bf04:	d458      	bmi.n	800bfb8 <__sflush_r+0xc0>
 800bf06:	684b      	ldr	r3, [r1, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dc05      	bgt.n	800bf18 <__sflush_r+0x20>
 800bf0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dc02      	bgt.n	800bf18 <__sflush_r+0x20>
 800bf12:	2000      	movs	r0, #0
 800bf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf1a:	2e00      	cmp	r6, #0
 800bf1c:	d0f9      	beq.n	800bf12 <__sflush_r+0x1a>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf24:	682f      	ldr	r7, [r5, #0]
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	d032      	beq.n	800bf90 <__sflush_r+0x98>
 800bf2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	075a      	lsls	r2, r3, #29
 800bf30:	d505      	bpl.n	800bf3e <__sflush_r+0x46>
 800bf32:	6863      	ldr	r3, [r4, #4]
 800bf34:	1ac0      	subs	r0, r0, r3
 800bf36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf38:	b10b      	cbz	r3, 800bf3e <__sflush_r+0x46>
 800bf3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf3c:	1ac0      	subs	r0, r0, r3
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4602      	mov	r2, r0
 800bf42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf44:	6a21      	ldr	r1, [r4, #32]
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b0      	blx	r6
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	d106      	bne.n	800bf5e <__sflush_r+0x66>
 800bf50:	6829      	ldr	r1, [r5, #0]
 800bf52:	291d      	cmp	r1, #29
 800bf54:	d82c      	bhi.n	800bfb0 <__sflush_r+0xb8>
 800bf56:	4a2a      	ldr	r2, [pc, #168]	; (800c000 <__sflush_r+0x108>)
 800bf58:	40ca      	lsrs	r2, r1
 800bf5a:	07d6      	lsls	r6, r2, #31
 800bf5c:	d528      	bpl.n	800bfb0 <__sflush_r+0xb8>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	6062      	str	r2, [r4, #4]
 800bf62:	04d9      	lsls	r1, r3, #19
 800bf64:	6922      	ldr	r2, [r4, #16]
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	d504      	bpl.n	800bf74 <__sflush_r+0x7c>
 800bf6a:	1c42      	adds	r2, r0, #1
 800bf6c:	d101      	bne.n	800bf72 <__sflush_r+0x7a>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	b903      	cbnz	r3, 800bf74 <__sflush_r+0x7c>
 800bf72:	6560      	str	r0, [r4, #84]	; 0x54
 800bf74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf76:	602f      	str	r7, [r5, #0]
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	d0ca      	beq.n	800bf12 <__sflush_r+0x1a>
 800bf7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf80:	4299      	cmp	r1, r3
 800bf82:	d002      	beq.n	800bf8a <__sflush_r+0x92>
 800bf84:	4628      	mov	r0, r5
 800bf86:	f7ff fa99 	bl	800b4bc <_free_r>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf8e:	e7c1      	b.n	800bf14 <__sflush_r+0x1c>
 800bf90:	6a21      	ldr	r1, [r4, #32]
 800bf92:	2301      	movs	r3, #1
 800bf94:	4628      	mov	r0, r5
 800bf96:	47b0      	blx	r6
 800bf98:	1c41      	adds	r1, r0, #1
 800bf9a:	d1c7      	bne.n	800bf2c <__sflush_r+0x34>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d0c4      	beq.n	800bf2c <__sflush_r+0x34>
 800bfa2:	2b1d      	cmp	r3, #29
 800bfa4:	d001      	beq.n	800bfaa <__sflush_r+0xb2>
 800bfa6:	2b16      	cmp	r3, #22
 800bfa8:	d101      	bne.n	800bfae <__sflush_r+0xb6>
 800bfaa:	602f      	str	r7, [r5, #0]
 800bfac:	e7b1      	b.n	800bf12 <__sflush_r+0x1a>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	e7ad      	b.n	800bf14 <__sflush_r+0x1c>
 800bfb8:	690f      	ldr	r7, [r1, #16]
 800bfba:	2f00      	cmp	r7, #0
 800bfbc:	d0a9      	beq.n	800bf12 <__sflush_r+0x1a>
 800bfbe:	0793      	lsls	r3, r2, #30
 800bfc0:	680e      	ldr	r6, [r1, #0]
 800bfc2:	bf08      	it	eq
 800bfc4:	694b      	ldreq	r3, [r1, #20]
 800bfc6:	600f      	str	r7, [r1, #0]
 800bfc8:	bf18      	it	ne
 800bfca:	2300      	movne	r3, #0
 800bfcc:	eba6 0807 	sub.w	r8, r6, r7
 800bfd0:	608b      	str	r3, [r1, #8]
 800bfd2:	f1b8 0f00 	cmp.w	r8, #0
 800bfd6:	dd9c      	ble.n	800bf12 <__sflush_r+0x1a>
 800bfd8:	6a21      	ldr	r1, [r4, #32]
 800bfda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfdc:	4643      	mov	r3, r8
 800bfde:	463a      	mov	r2, r7
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b0      	blx	r6
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	dc06      	bgt.n	800bff6 <__sflush_r+0xfe>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	f04f 30ff 	mov.w	r0, #4294967295
 800bff4:	e78e      	b.n	800bf14 <__sflush_r+0x1c>
 800bff6:	4407      	add	r7, r0
 800bff8:	eba8 0800 	sub.w	r8, r8, r0
 800bffc:	e7e9      	b.n	800bfd2 <__sflush_r+0xda>
 800bffe:	bf00      	nop
 800c000:	20400001 	.word	0x20400001

0800c004 <_fflush_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	690b      	ldr	r3, [r1, #16]
 800c008:	4605      	mov	r5, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	b913      	cbnz	r3, 800c014 <_fflush_r+0x10>
 800c00e:	2500      	movs	r5, #0
 800c010:	4628      	mov	r0, r5
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	b118      	cbz	r0, 800c01e <_fflush_r+0x1a>
 800c016:	6983      	ldr	r3, [r0, #24]
 800c018:	b90b      	cbnz	r3, 800c01e <_fflush_r+0x1a>
 800c01a:	f000 f887 	bl	800c12c <__sinit>
 800c01e:	4b14      	ldr	r3, [pc, #80]	; (800c070 <_fflush_r+0x6c>)
 800c020:	429c      	cmp	r4, r3
 800c022:	d11b      	bne.n	800c05c <_fflush_r+0x58>
 800c024:	686c      	ldr	r4, [r5, #4]
 800c026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0ef      	beq.n	800c00e <_fflush_r+0xa>
 800c02e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c030:	07d0      	lsls	r0, r2, #31
 800c032:	d404      	bmi.n	800c03e <_fflush_r+0x3a>
 800c034:	0599      	lsls	r1, r3, #22
 800c036:	d402      	bmi.n	800c03e <_fflush_r+0x3a>
 800c038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03a:	f000 f915 	bl	800c268 <__retarget_lock_acquire_recursive>
 800c03e:	4628      	mov	r0, r5
 800c040:	4621      	mov	r1, r4
 800c042:	f7ff ff59 	bl	800bef8 <__sflush_r>
 800c046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c048:	07da      	lsls	r2, r3, #31
 800c04a:	4605      	mov	r5, r0
 800c04c:	d4e0      	bmi.n	800c010 <_fflush_r+0xc>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	059b      	lsls	r3, r3, #22
 800c052:	d4dd      	bmi.n	800c010 <_fflush_r+0xc>
 800c054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c056:	f000 f908 	bl	800c26a <__retarget_lock_release_recursive>
 800c05a:	e7d9      	b.n	800c010 <_fflush_r+0xc>
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <_fflush_r+0x70>)
 800c05e:	429c      	cmp	r4, r3
 800c060:	d101      	bne.n	800c066 <_fflush_r+0x62>
 800c062:	68ac      	ldr	r4, [r5, #8]
 800c064:	e7df      	b.n	800c026 <_fflush_r+0x22>
 800c066:	4b04      	ldr	r3, [pc, #16]	; (800c078 <_fflush_r+0x74>)
 800c068:	429c      	cmp	r4, r3
 800c06a:	bf08      	it	eq
 800c06c:	68ec      	ldreq	r4, [r5, #12]
 800c06e:	e7da      	b.n	800c026 <_fflush_r+0x22>
 800c070:	0801041c 	.word	0x0801041c
 800c074:	0801043c 	.word	0x0801043c
 800c078:	080103fc 	.word	0x080103fc

0800c07c <std>:
 800c07c:	2300      	movs	r3, #0
 800c07e:	b510      	push	{r4, lr}
 800c080:	4604      	mov	r4, r0
 800c082:	e9c0 3300 	strd	r3, r3, [r0]
 800c086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c08a:	6083      	str	r3, [r0, #8]
 800c08c:	8181      	strh	r1, [r0, #12]
 800c08e:	6643      	str	r3, [r0, #100]	; 0x64
 800c090:	81c2      	strh	r2, [r0, #14]
 800c092:	6183      	str	r3, [r0, #24]
 800c094:	4619      	mov	r1, r3
 800c096:	2208      	movs	r2, #8
 800c098:	305c      	adds	r0, #92	; 0x5c
 800c09a:	f7fb fdc3 	bl	8007c24 <memset>
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <std+0x38>)
 800c0a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c0a2:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <std+0x3c>)
 800c0a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0a6:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <std+0x40>)
 800c0a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <std+0x44>)
 800c0ac:	6224      	str	r4, [r4, #32]
 800c0ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	bf00      	nop
 800c0b4:	0800c3d1 	.word	0x0800c3d1
 800c0b8:	0800c3f3 	.word	0x0800c3f3
 800c0bc:	0800c42b 	.word	0x0800c42b
 800c0c0:	0800c44f 	.word	0x0800c44f

0800c0c4 <_cleanup_r>:
 800c0c4:	4901      	ldr	r1, [pc, #4]	; (800c0cc <_cleanup_r+0x8>)
 800c0c6:	f000 b8af 	b.w	800c228 <_fwalk_reent>
 800c0ca:	bf00      	nop
 800c0cc:	0800c005 	.word	0x0800c005

0800c0d0 <__sfmoreglue>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	2268      	movs	r2, #104	; 0x68
 800c0d4:	1e4d      	subs	r5, r1, #1
 800c0d6:	4355      	muls	r5, r2
 800c0d8:	460e      	mov	r6, r1
 800c0da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0de:	f7ff fa59 	bl	800b594 <_malloc_r>
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	b140      	cbz	r0, 800c0f8 <__sfmoreglue+0x28>
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c0ec:	300c      	adds	r0, #12
 800c0ee:	60a0      	str	r0, [r4, #8]
 800c0f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0f4:	f7fb fd96 	bl	8007c24 <memset>
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}

0800c0fc <__sfp_lock_acquire>:
 800c0fc:	4801      	ldr	r0, [pc, #4]	; (800c104 <__sfp_lock_acquire+0x8>)
 800c0fe:	f000 b8b3 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800c102:	bf00      	nop
 800c104:	200076e9 	.word	0x200076e9

0800c108 <__sfp_lock_release>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__sfp_lock_release+0x8>)
 800c10a:	f000 b8ae 	b.w	800c26a <__retarget_lock_release_recursive>
 800c10e:	bf00      	nop
 800c110:	200076e9 	.word	0x200076e9

0800c114 <__sinit_lock_acquire>:
 800c114:	4801      	ldr	r0, [pc, #4]	; (800c11c <__sinit_lock_acquire+0x8>)
 800c116:	f000 b8a7 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800c11a:	bf00      	nop
 800c11c:	200076ea 	.word	0x200076ea

0800c120 <__sinit_lock_release>:
 800c120:	4801      	ldr	r0, [pc, #4]	; (800c128 <__sinit_lock_release+0x8>)
 800c122:	f000 b8a2 	b.w	800c26a <__retarget_lock_release_recursive>
 800c126:	bf00      	nop
 800c128:	200076ea 	.word	0x200076ea

0800c12c <__sinit>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	4604      	mov	r4, r0
 800c130:	f7ff fff0 	bl	800c114 <__sinit_lock_acquire>
 800c134:	69a3      	ldr	r3, [r4, #24]
 800c136:	b11b      	cbz	r3, 800c140 <__sinit+0x14>
 800c138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c13c:	f7ff bff0 	b.w	800c120 <__sinit_lock_release>
 800c140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c144:	6523      	str	r3, [r4, #80]	; 0x50
 800c146:	4b13      	ldr	r3, [pc, #76]	; (800c194 <__sinit+0x68>)
 800c148:	4a13      	ldr	r2, [pc, #76]	; (800c198 <__sinit+0x6c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c14e:	42a3      	cmp	r3, r4
 800c150:	bf04      	itt	eq
 800c152:	2301      	moveq	r3, #1
 800c154:	61a3      	streq	r3, [r4, #24]
 800c156:	4620      	mov	r0, r4
 800c158:	f000 f820 	bl	800c19c <__sfp>
 800c15c:	6060      	str	r0, [r4, #4]
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 f81c 	bl	800c19c <__sfp>
 800c164:	60a0      	str	r0, [r4, #8]
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f818 	bl	800c19c <__sfp>
 800c16c:	2200      	movs	r2, #0
 800c16e:	60e0      	str	r0, [r4, #12]
 800c170:	2104      	movs	r1, #4
 800c172:	6860      	ldr	r0, [r4, #4]
 800c174:	f7ff ff82 	bl	800c07c <std>
 800c178:	68a0      	ldr	r0, [r4, #8]
 800c17a:	2201      	movs	r2, #1
 800c17c:	2109      	movs	r1, #9
 800c17e:	f7ff ff7d 	bl	800c07c <std>
 800c182:	68e0      	ldr	r0, [r4, #12]
 800c184:	2202      	movs	r2, #2
 800c186:	2112      	movs	r1, #18
 800c188:	f7ff ff78 	bl	800c07c <std>
 800c18c:	2301      	movs	r3, #1
 800c18e:	61a3      	str	r3, [r4, #24]
 800c190:	e7d2      	b.n	800c138 <__sinit+0xc>
 800c192:	bf00      	nop
 800c194:	0800ffb4 	.word	0x0800ffb4
 800c198:	0800c0c5 	.word	0x0800c0c5

0800c19c <__sfp>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	4607      	mov	r7, r0
 800c1a0:	f7ff ffac 	bl	800c0fc <__sfp_lock_acquire>
 800c1a4:	4b1e      	ldr	r3, [pc, #120]	; (800c220 <__sfp+0x84>)
 800c1a6:	681e      	ldr	r6, [r3, #0]
 800c1a8:	69b3      	ldr	r3, [r6, #24]
 800c1aa:	b913      	cbnz	r3, 800c1b2 <__sfp+0x16>
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f7ff ffbd 	bl	800c12c <__sinit>
 800c1b2:	3648      	adds	r6, #72	; 0x48
 800c1b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	d503      	bpl.n	800c1c4 <__sfp+0x28>
 800c1bc:	6833      	ldr	r3, [r6, #0]
 800c1be:	b30b      	cbz	r3, 800c204 <__sfp+0x68>
 800c1c0:	6836      	ldr	r6, [r6, #0]
 800c1c2:	e7f7      	b.n	800c1b4 <__sfp+0x18>
 800c1c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1c8:	b9d5      	cbnz	r5, 800c200 <__sfp+0x64>
 800c1ca:	4b16      	ldr	r3, [pc, #88]	; (800c224 <__sfp+0x88>)
 800c1cc:	60e3      	str	r3, [r4, #12]
 800c1ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c1d4:	f000 f847 	bl	800c266 <__retarget_lock_init_recursive>
 800c1d8:	f7ff ff96 	bl	800c108 <__sfp_lock_release>
 800c1dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1e4:	6025      	str	r5, [r4, #0]
 800c1e6:	61a5      	str	r5, [r4, #24]
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1f0:	f7fb fd18 	bl	8007c24 <memset>
 800c1f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c200:	3468      	adds	r4, #104	; 0x68
 800c202:	e7d9      	b.n	800c1b8 <__sfp+0x1c>
 800c204:	2104      	movs	r1, #4
 800c206:	4638      	mov	r0, r7
 800c208:	f7ff ff62 	bl	800c0d0 <__sfmoreglue>
 800c20c:	4604      	mov	r4, r0
 800c20e:	6030      	str	r0, [r6, #0]
 800c210:	2800      	cmp	r0, #0
 800c212:	d1d5      	bne.n	800c1c0 <__sfp+0x24>
 800c214:	f7ff ff78 	bl	800c108 <__sfp_lock_release>
 800c218:	230c      	movs	r3, #12
 800c21a:	603b      	str	r3, [r7, #0]
 800c21c:	e7ee      	b.n	800c1fc <__sfp+0x60>
 800c21e:	bf00      	nop
 800c220:	0800ffb4 	.word	0x0800ffb4
 800c224:	ffff0001 	.word	0xffff0001

0800c228 <_fwalk_reent>:
 800c228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c22c:	4606      	mov	r6, r0
 800c22e:	4688      	mov	r8, r1
 800c230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c234:	2700      	movs	r7, #0
 800c236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c23a:	f1b9 0901 	subs.w	r9, r9, #1
 800c23e:	d505      	bpl.n	800c24c <_fwalk_reent+0x24>
 800c240:	6824      	ldr	r4, [r4, #0]
 800c242:	2c00      	cmp	r4, #0
 800c244:	d1f7      	bne.n	800c236 <_fwalk_reent+0xe>
 800c246:	4638      	mov	r0, r7
 800c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24c:	89ab      	ldrh	r3, [r5, #12]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d907      	bls.n	800c262 <_fwalk_reent+0x3a>
 800c252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c256:	3301      	adds	r3, #1
 800c258:	d003      	beq.n	800c262 <_fwalk_reent+0x3a>
 800c25a:	4629      	mov	r1, r5
 800c25c:	4630      	mov	r0, r6
 800c25e:	47c0      	blx	r8
 800c260:	4307      	orrs	r7, r0
 800c262:	3568      	adds	r5, #104	; 0x68
 800c264:	e7e9      	b.n	800c23a <_fwalk_reent+0x12>

0800c266 <__retarget_lock_init_recursive>:
 800c266:	4770      	bx	lr

0800c268 <__retarget_lock_acquire_recursive>:
 800c268:	4770      	bx	lr

0800c26a <__retarget_lock_release_recursive>:
 800c26a:	4770      	bx	lr

0800c26c <__swhatbuf_r>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	460e      	mov	r6, r1
 800c270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c274:	2900      	cmp	r1, #0
 800c276:	b096      	sub	sp, #88	; 0x58
 800c278:	4614      	mov	r4, r2
 800c27a:	461d      	mov	r5, r3
 800c27c:	da08      	bge.n	800c290 <__swhatbuf_r+0x24>
 800c27e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	602a      	str	r2, [r5, #0]
 800c286:	061a      	lsls	r2, r3, #24
 800c288:	d410      	bmi.n	800c2ac <__swhatbuf_r+0x40>
 800c28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c28e:	e00e      	b.n	800c2ae <__swhatbuf_r+0x42>
 800c290:	466a      	mov	r2, sp
 800c292:	f000 f903 	bl	800c49c <_fstat_r>
 800c296:	2800      	cmp	r0, #0
 800c298:	dbf1      	blt.n	800c27e <__swhatbuf_r+0x12>
 800c29a:	9a01      	ldr	r2, [sp, #4]
 800c29c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2a4:	425a      	negs	r2, r3
 800c2a6:	415a      	adcs	r2, r3
 800c2a8:	602a      	str	r2, [r5, #0]
 800c2aa:	e7ee      	b.n	800c28a <__swhatbuf_r+0x1e>
 800c2ac:	2340      	movs	r3, #64	; 0x40
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	b016      	add	sp, #88	; 0x58
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2b8 <__smakebuf_r>:
 800c2b8:	898b      	ldrh	r3, [r1, #12]
 800c2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2bc:	079d      	lsls	r5, r3, #30
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	d507      	bpl.n	800c2d4 <__smakebuf_r+0x1c>
 800c2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	6123      	str	r3, [r4, #16]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	6163      	str	r3, [r4, #20]
 800c2d0:	b002      	add	sp, #8
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	ab01      	add	r3, sp, #4
 800c2d6:	466a      	mov	r2, sp
 800c2d8:	f7ff ffc8 	bl	800c26c <__swhatbuf_r>
 800c2dc:	9900      	ldr	r1, [sp, #0]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff f957 	bl	800b594 <_malloc_r>
 800c2e6:	b948      	cbnz	r0, 800c2fc <__smakebuf_r+0x44>
 800c2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ec:	059a      	lsls	r2, r3, #22
 800c2ee:	d4ef      	bmi.n	800c2d0 <__smakebuf_r+0x18>
 800c2f0:	f023 0303 	bic.w	r3, r3, #3
 800c2f4:	f043 0302 	orr.w	r3, r3, #2
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	e7e3      	b.n	800c2c4 <__smakebuf_r+0xc>
 800c2fc:	4b0d      	ldr	r3, [pc, #52]	; (800c334 <__smakebuf_r+0x7c>)
 800c2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	6020      	str	r0, [r4, #0]
 800c304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	9b00      	ldr	r3, [sp, #0]
 800c30c:	6163      	str	r3, [r4, #20]
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	6120      	str	r0, [r4, #16]
 800c312:	b15b      	cbz	r3, 800c32c <__smakebuf_r+0x74>
 800c314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c318:	4630      	mov	r0, r6
 800c31a:	f000 f8d1 	bl	800c4c0 <_isatty_r>
 800c31e:	b128      	cbz	r0, 800c32c <__smakebuf_r+0x74>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	f043 0301 	orr.w	r3, r3, #1
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	89a0      	ldrh	r0, [r4, #12]
 800c32e:	4305      	orrs	r5, r0
 800c330:	81a5      	strh	r5, [r4, #12]
 800c332:	e7cd      	b.n	800c2d0 <__smakebuf_r+0x18>
 800c334:	0800c0c5 	.word	0x0800c0c5

0800c338 <_malloc_usable_size_r>:
 800c338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c33c:	1f18      	subs	r0, r3, #4
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bfbc      	itt	lt
 800c342:	580b      	ldrlt	r3, [r1, r0]
 800c344:	18c0      	addlt	r0, r0, r3
 800c346:	4770      	bx	lr

0800c348 <_raise_r>:
 800c348:	291f      	cmp	r1, #31
 800c34a:	b538      	push	{r3, r4, r5, lr}
 800c34c:	4604      	mov	r4, r0
 800c34e:	460d      	mov	r5, r1
 800c350:	d904      	bls.n	800c35c <_raise_r+0x14>
 800c352:	2316      	movs	r3, #22
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	f04f 30ff 	mov.w	r0, #4294967295
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c35e:	b112      	cbz	r2, 800c366 <_raise_r+0x1e>
 800c360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c364:	b94b      	cbnz	r3, 800c37a <_raise_r+0x32>
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f830 	bl	800c3cc <_getpid_r>
 800c36c:	462a      	mov	r2, r5
 800c36e:	4601      	mov	r1, r0
 800c370:	4620      	mov	r0, r4
 800c372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c376:	f000 b817 	b.w	800c3a8 <_kill_r>
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d00a      	beq.n	800c394 <_raise_r+0x4c>
 800c37e:	1c59      	adds	r1, r3, #1
 800c380:	d103      	bne.n	800c38a <_raise_r+0x42>
 800c382:	2316      	movs	r3, #22
 800c384:	6003      	str	r3, [r0, #0]
 800c386:	2001      	movs	r0, #1
 800c388:	e7e7      	b.n	800c35a <_raise_r+0x12>
 800c38a:	2400      	movs	r4, #0
 800c38c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c390:	4628      	mov	r0, r5
 800c392:	4798      	blx	r3
 800c394:	2000      	movs	r0, #0
 800c396:	e7e0      	b.n	800c35a <_raise_r+0x12>

0800c398 <raise>:
 800c398:	4b02      	ldr	r3, [pc, #8]	; (800c3a4 <raise+0xc>)
 800c39a:	4601      	mov	r1, r0
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	f7ff bfd3 	b.w	800c348 <_raise_r>
 800c3a2:	bf00      	nop
 800c3a4:	200000a8 	.word	0x200000a8

0800c3a8 <_kill_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4d07      	ldr	r5, [pc, #28]	; (800c3c8 <_kill_r+0x20>)
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	4608      	mov	r0, r1
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	f7f5 fc05 	bl	8001bc4 <_kill>
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	d102      	bne.n	800c3c4 <_kill_r+0x1c>
 800c3be:	682b      	ldr	r3, [r5, #0]
 800c3c0:	b103      	cbz	r3, 800c3c4 <_kill_r+0x1c>
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	bf00      	nop
 800c3c8:	200076e4 	.word	0x200076e4

0800c3cc <_getpid_r>:
 800c3cc:	f7f5 bbf8 	b.w	8001bc0 <_getpid>

0800c3d0 <__sread>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d8:	f000 f894 	bl	800c504 <_read_r>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	bfab      	itete	ge
 800c3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c3e4:	181b      	addge	r3, r3, r0
 800c3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3ea:	bfac      	ite	ge
 800c3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3ee:	81a3      	strhlt	r3, [r4, #12]
 800c3f0:	bd10      	pop	{r4, pc}

0800c3f2 <__swrite>:
 800c3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f6:	461f      	mov	r7, r3
 800c3f8:	898b      	ldrh	r3, [r1, #12]
 800c3fa:	05db      	lsls	r3, r3, #23
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	460c      	mov	r4, r1
 800c400:	4616      	mov	r6, r2
 800c402:	d505      	bpl.n	800c410 <__swrite+0x1e>
 800c404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c408:	2302      	movs	r3, #2
 800c40a:	2200      	movs	r2, #0
 800c40c:	f000 f868 	bl	800c4e0 <_lseek_r>
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	4632      	mov	r2, r6
 800c41e:	463b      	mov	r3, r7
 800c420:	4628      	mov	r0, r5
 800c422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c426:	f000 b817 	b.w	800c458 <_write_r>

0800c42a <__sseek>:
 800c42a:	b510      	push	{r4, lr}
 800c42c:	460c      	mov	r4, r1
 800c42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c432:	f000 f855 	bl	800c4e0 <_lseek_r>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	bf15      	itete	ne
 800c43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c446:	81a3      	strheq	r3, [r4, #12]
 800c448:	bf18      	it	ne
 800c44a:	81a3      	strhne	r3, [r4, #12]
 800c44c:	bd10      	pop	{r4, pc}

0800c44e <__sclose>:
 800c44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c452:	f000 b813 	b.w	800c47c <_close_r>
	...

0800c458 <_write_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	; (800c478 <_write_r+0x20>)
 800c45c:	4604      	mov	r4, r0
 800c45e:	4608      	mov	r0, r1
 800c460:	4611      	mov	r1, r2
 800c462:	2200      	movs	r2, #0
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	f7f5 fbc8 	bl	8001bfc <_write>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_write_r+0x1e>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_write_r+0x1e>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	200076e4 	.word	0x200076e4

0800c47c <_close_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4d06      	ldr	r5, [pc, #24]	; (800c498 <_close_r+0x1c>)
 800c480:	2300      	movs	r3, #0
 800c482:	4604      	mov	r4, r0
 800c484:	4608      	mov	r0, r1
 800c486:	602b      	str	r3, [r5, #0]
 800c488:	f7f5 fbc6 	bl	8001c18 <_close>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_close_r+0x1a>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	b103      	cbz	r3, 800c496 <_close_r+0x1a>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	200076e4 	.word	0x200076e4

0800c49c <_fstat_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	; (800c4bc <_fstat_r+0x20>)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f7f5 fbb8 	bl	8001c1e <_fstat>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	d102      	bne.n	800c4b8 <_fstat_r+0x1c>
 800c4b2:	682b      	ldr	r3, [r5, #0]
 800c4b4:	b103      	cbz	r3, 800c4b8 <_fstat_r+0x1c>
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200076e4 	.word	0x200076e4

0800c4c0 <_isatty_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d06      	ldr	r5, [pc, #24]	; (800c4dc <_isatty_r+0x1c>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	f7f5 fbac 	bl	8001c28 <_isatty>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_isatty_r+0x1a>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_isatty_r+0x1a>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	200076e4 	.word	0x200076e4

0800c4e0 <_lseek_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	; (800c500 <_lseek_r+0x20>)
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f7f5 fb9c 	bl	8001c2c <_lseek>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_lseek_r+0x1e>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_lseek_r+0x1e>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	200076e4 	.word	0x200076e4

0800c504 <_read_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	; (800c524 <_read_r+0x20>)
 800c508:	4604      	mov	r4, r0
 800c50a:	4608      	mov	r0, r1
 800c50c:	4611      	mov	r1, r2
 800c50e:	2200      	movs	r2, #0
 800c510:	602a      	str	r2, [r5, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	f7f5 fb64 	bl	8001be0 <_read>
 800c518:	1c43      	adds	r3, r0, #1
 800c51a:	d102      	bne.n	800c522 <_read_r+0x1e>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	b103      	cbz	r3, 800c522 <_read_r+0x1e>
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	200076e4 	.word	0x200076e4

0800c528 <_init>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr

0800c534 <_fini>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr
