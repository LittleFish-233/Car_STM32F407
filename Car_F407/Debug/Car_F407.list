
Car_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000400c  08013ab8  08013ab8  00023ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ac4  08017ac4  000303d0  2**0
                  CONTENTS
  4 .ARM          00000008  08017ac4  08017ac4  00027ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017acc  08017acc  000303d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017acc  08017acc  00027acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ad0  08017ad0  00027ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  08017ad4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000303d0  2**0
                  CONTENTS
 10 .bss          000075e0  200003d0  200003d0  000303d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200079b0  200079b0  000303d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228a2  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f7b  00000000  00000000  00052ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c40  00000000  00000000  00058c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001920  00000000  00000000  0005a860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e48d  00000000  00000000  0005c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002da4a  00000000  00000000  0008a60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5166  00000000  00000000  000b8057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019d1bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000844c  00000000  00000000  0019d210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d0 	.word	0x200003d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013a9c 	.word	0x08013a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	08013a9c 	.word	0x08013a9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f001 ff93 	bl	8002f84 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 8001064:	f000 fd2c 	bl	8001ac0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_4;
 8001068:	2304      	movs	r3, #4
 800106a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001070:	2301      	movs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f002 f931 	bl	80032e0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 8001084:	f000 fd1c 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200003ec 	.word	0x200003ec
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
    if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
    {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
        /* ADC1 clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA4         ------> ADC1_IN4
        */
        GPIO_InitStruct.Pin = BatteryLevel_Pin;
 80010f6:	2310      	movs	r3, #16
 80010f8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(BatteryLevel_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f003 f827 	bl	800415c <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
    }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_DMA_Init+0x78>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <MX_DMA_Init+0x78>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_DMA_Init+0x78>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_DMA_Init+0x78>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_DMA_Init+0x78>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_DMA_Init+0x78>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 14, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	210e      	movs	r1, #14
 8001166:	200f      	movs	r0, #15
 8001168:	f002 fbb3 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800116c:	200f      	movs	r0, #15
 800116e:	f002 fbcc 	bl	800390a <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 14, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	210e      	movs	r1, #14
 8001176:	203b      	movs	r0, #59	; 0x3b
 8001178:	f002 fbab 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800117c:	203b      	movs	r0, #59	; 0x3b
 800117e:	f002 fbc4 	bl	800390a <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 14, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210e      	movs	r1, #14
 8001186:	2045      	movs	r0, #69	; 0x45
 8001188:	f002 fba3 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800118c:	2045      	movs	r0, #69	; 0x45
 800118e:	f002 fbbc 	bl	800390a <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <MX_GPIO_Init>:
              * Output
              * EVENT_OUT
              * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	4b75      	ldr	r3, [pc, #468]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a74      	ldr	r2, [pc, #464]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b72      	ldr	r3, [pc, #456]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a6d      	ldr	r2, [pc, #436]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	4b67      	ldr	r3, [pc, #412]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a66      	ldr	r2, [pc, #408]	; (8001390 <MX_GPIO_Init+0x1f0>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b64      	ldr	r3, [pc, #400]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <MX_GPIO_Init+0x1f0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b59      	ldr	r3, [pc, #356]	; (8001390 <MX_GPIO_Init+0x1f0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a58      	ldr	r2, [pc, #352]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b56      	ldr	r3, [pc, #344]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b52      	ldr	r3, [pc, #328]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <MX_GPIO_Init+0x1f0>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b48      	ldr	r3, [pc, #288]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a43      	ldr	r2, [pc, #268]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <MX_GPIO_Init+0x1f0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOF, Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 8001296:	2200      	movs	r2, #0
 8001298:	f240 41fc 	movw	r1, #1276	; 0x4fc
 800129c:	483d      	ldr	r0, [pc, #244]	; (8001394 <MX_GPIO_Init+0x1f4>)
 800129e:	f003 f911 	bl	80044c4 <HAL_GPIO_WritePin>
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOG, Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 80012a2:	2200      	movs	r2, #0
 80012a4:	217f      	movs	r1, #127	; 0x7f
 80012a6:	483c      	ldr	r0, [pc, #240]	; (8001398 <MX_GPIO_Init+0x1f8>)
 80012a8:	f003 f90c 	bl	80044c4 <HAL_GPIO_WritePin>
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b2:	483a      	ldr	r0, [pc, #232]	; (800139c <MX_GPIO_Init+0x1fc>)
 80012b4:	f003 f906 	bl	80044c4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = Key_Stop_Pin;
 80012b8:	2308      	movs	r3, #8
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Key_Stop_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4834      	ldr	r0, [pc, #208]	; (80013a0 <MX_GPIO_Init+0x200>)
 80012ce:	f002 ff45 	bl	800415c <HAL_GPIO_Init>

    /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                                                     PFPin PFPin PFPin */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin|Motor_2_IN1_Pin|Motor_2_IN2_Pin
 80012d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
                                                    |Motor_3_IN1_Pin|Motor_3_IN2_Pin|LED2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	482a      	ldr	r0, [pc, #168]	; (8001394 <MX_GPIO_Init+0x1f4>)
 80012ec:	f002 ff36 	bl	800415c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SIM_SD_Inser_Pin;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_SD_Inser_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4823      	ldr	r0, [pc, #140]	; (8001394 <MX_GPIO_Init+0x1f4>)
 8001306:	f002 ff29 	bl	800415c <HAL_GPIO_Init>

    /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                                                     PGPin PGPin PGPin */
    GPIO_InitStruct.Pin = Motor_4_IN1_Pin|Motor_4_IN2_Pin|Motor_F_STBY_Pin|Motor_B_STBY_Pin
 800130a:	237f      	movs	r3, #127	; 0x7f
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
                                                    |LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_RS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <MX_GPIO_Init+0x1f8>)
 8001322:	f002 ff1b 	bl	800415c <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin */
    GPIO_InitStruct.Pin = Infrared1_Pin|Infrared2_Pin;
 8001326:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <MX_GPIO_Init+0x1fc>)
 800133c:	f002 ff0e 	bl	800415c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 8001340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4810      	ldr	r0, [pc, #64]	; (800139c <MX_GPIO_Init+0x1fc>)
 800135a:	f002 feff 	bl	800415c <HAL_GPIO_Init>

    /*Configure GPIO pins : PDPin PDPin */
    GPIO_InitStruct.Pin = Infrared3_Pin|Infrared4_Pin;
 800135e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001368:	2301      	movs	r3, #1
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_GPIO_Init+0x204>)
 8001374:	f002 fef2 	bl	800415c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	2009      	movs	r0, #9
 800137e:	f002 faa8 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001382:	2009      	movs	r0, #9
 8001384:	f002 fac1 	bl	800390a <HAL_NVIC_EnableIRQ>

}
 8001388:	bf00      	nop
 800138a:	3738      	adds	r7, #56	; 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40020c00 	.word	0x40020c00

080013a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013ac:	f001 fd54 	bl	8002e58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013b0:	f000 f84c 	bl	800144c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013b4:	f7ff fef4 	bl	80011a0 <MX_GPIO_Init>
	MX_DMA_Init();
 80013b8:	f7ff feb4 	bl	8001124 <MX_DMA_Init>
	MX_TIM14_Init();
 80013bc:	f001 f9e6 	bl	800278c <MX_TIM14_Init>
	MX_TIM1_Init();
 80013c0:	f000 ff64 	bl	800228c <MX_TIM1_Init>
	MX_TIM3_Init();
 80013c4:	f000 ffba 	bl	800233c <MX_TIM3_Init>
	MX_TIM4_Init();
 80013c8:	f001 f850 	bl	800246c <MX_TIM4_Init>
	MX_TIM5_Init();
 80013cc:	f001 f8a2 	bl	8002514 <MX_TIM5_Init>
	MX_ADC1_Init();
 80013d0:	f7ff fe12 	bl	8000ff8 <MX_ADC1_Init>
	MX_TIM6_Init();
 80013d4:	f001 f8f2 	bl	80025bc <MX_TIM6_Init>
	MX_USART1_UART_Init();
 80013d8:	f001 fc3c 	bl	8002c54 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80013dc:	f001 f924 	bl	8002628 <MX_TIM7_Init>
	MX_TIM13_Init();
 80013e0:	f001 f9b0 	bl	8002744 <MX_TIM13_Init>
	MX_SPI1_Init();
 80013e4:	f000 fc84 	bl	8001cf0 <MX_SPI1_Init>
	MX_SPI2_Init();
 80013e8:	f000 fcb8 	bl	8001d5c <MX_SPI2_Init>
	MX_TIM8_Init();
 80013ec:	f001 f952 	bl	8002694 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80013f0:	f001 fc5a 	bl	8002ca8 <MX_USART2_UART_Init>
	MX_SDIO_SD_Init();
 80013f4:	f000 fb6a 	bl	8001acc <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 80013f8:	f008 fc58 	bl	8009cac <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	//初始化呼吸灯 指示运行
	HAL_TIM_Base_Start_IT(&htim14);
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <main+0x98>)
 80013fe:	f005 fcab 	bl	8006d58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <main+0x98>)
 8001406:	f005 fd9f 	bl	8006f48 <HAL_TIM_PWM_Start>
	//清空休眠计数
	Clean_Dormancy_Count();
 800140a:	f00a fd4b 	bl	800bea4 <Clean_Dormancy_Count>
	//初始化文件系统
	Init_FATFS();
 800140e:	f00c fe2d 	bl	800e06c <Init_FATFS>
	//使能定时器6中断 定期更新速度
	HAL_TIM_Base_Start_IT(&htim6);
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <main+0x9c>)
 8001414:	f005 fca0 	bl	8006d58 <HAL_TIM_Base_Start_IT>
	//初始化OLED
	Screen_Init();
 8001418:	f00d fb8a 	bl	800eb30 <Screen_Init>

	//初始化串口
	Init_USART();
 800141c:	f00d fcf0 	bl	800ee00 <Init_USART>

	//初始化小车控制系统
	InitCar();
 8001420:	f00c fbe0 	bl	800dbe4 <InitCar>
	//初始化地图
	InitMap();
 8001424:	f00b fd58 	bl	800ced8 <InitMap>
	//测试
	//SetMotorSpeed(Motor_3, 100);
	//SetCarSpeed(10, 0, 0);

	LED2_H();
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <main+0xa0>)
 8001430:	f003 f848 	bl	80044c4 <HAL_GPIO_WritePin>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		OLED_Proc();
 8001434:	f000 f874 	bl	8001520 <OLED_Proc>
		SendData_Proc();
 8001438:	f000 f95c 	bl	80016f4 <SendData_Proc>
		OLED_Proc();
 800143c:	e7fa      	b.n	8001434 <main+0x8c>
 800143e:	bf00      	nop
 8001440:	200010f4 	.word	0x200010f4
 8001444:	20000fd4 	.word	0x20000fd4
 8001448:	40021400 	.word	0x40021400

0800144c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	; 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00d fdc6 	bl	800efec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <SystemClock_Config+0xcc>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <SystemClock_Config+0xd0>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80014c0:	23a8      	movs	r3, #168	; 0xa8
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80014c8:	2307      	movs	r3, #7
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f841 	bl	8004558 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80014dc:	f000 faf0 	bl	8001ac0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2105      	movs	r1, #5
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 faa2 	bl	8004a48 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800150a:	f000 fad9 	bl	8001ac0 <Error_Handler>
	}
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <OLED_Proc>:

/* USER CODE BEGIN 4 */

//显示屏
void OLED_Proc()
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af04      	add	r7, sp, #16
	if (uwTick - uwTick_OLED < 500)
 8001526:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <OLED_Proc+0x1a8>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b68      	ldr	r3, [pc, #416]	; (80016cc <OLED_Proc+0x1ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001534:	f0c0 80c4 	bcc.w	80016c0 <OLED_Proc+0x1a0>
	{
		return;
	}
	uwTick_OLED = uwTick;
 8001538:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <OLED_Proc+0x1a8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a63      	ldr	r2, [pc, #396]	; (80016cc <OLED_Proc+0x1ac>)
 800153e:	6013      	str	r3, [r2, #0]

	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Actual_Speeds[0], Motor_Actual_Speeds[1]);
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <OLED_Proc+0x1b0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	4604      	mov	r4, r0
 800154c:	460d      	mov	r5, r1
 800154e:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <OLED_Proc+0x1b0>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fff8 	bl	8000548 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	e9cd 2300 	strd	r2, r3, [sp]
 8001560:	4622      	mov	r2, r4
 8001562:	462b      	mov	r3, r5
 8001564:	495b      	ldr	r1, [pc, #364]	; (80016d4 <OLED_Proc+0x1b4>)
 8001566:	485c      	ldr	r0, [pc, #368]	; (80016d8 <OLED_Proc+0x1b8>)
 8001568:	f00e fbc8 	bl	800fcfc <siprintf>
	Screen_ShowStringLine(0, String_Line, Font_Size);
 800156c:	2218      	movs	r2, #24
 800156e:	495a      	ldr	r1, [pc, #360]	; (80016d8 <OLED_Proc+0x1b8>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00d faed 	bl	800eb50 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Actual_Speeds[2], Motor_Actual_Speeds[3]);
 8001576:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <OLED_Proc+0x1b0>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4b52      	ldr	r3, [pc, #328]	; (80016d0 <OLED_Proc+0x1b0>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9cd 2300 	strd	r2, r3, [sp]
 8001596:	4622      	mov	r2, r4
 8001598:	462b      	mov	r3, r5
 800159a:	4950      	ldr	r1, [pc, #320]	; (80016dc <OLED_Proc+0x1bc>)
 800159c:	484e      	ldr	r0, [pc, #312]	; (80016d8 <OLED_Proc+0x1b8>)
 800159e:	f00e fbad 	bl	800fcfc <siprintf>
	Screen_ShowStringLine(1, String_Line, Font_Size);
 80015a2:	2218      	movs	r2, #24
 80015a4:	494c      	ldr	r1, [pc, #304]	; (80016d8 <OLED_Proc+0x1b8>)
 80015a6:	2001      	movs	r0, #1
 80015a8:	f00d fad2 	bl	800eb50 <Screen_ShowStringLine>

	sprintf(String_Line, "A:%5.1f   B:%5.1f", Motor_Expected_Speeds[0], Motor_Expected_Speeds[1]);
 80015ac:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <OLED_Proc+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc9 	bl	8000548 <__aeabi_f2d>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
 80015ba:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <OLED_Proc+0x1c0>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffc2 	bl	8000548 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9cd 2300 	strd	r2, r3, [sp]
 80015cc:	4622      	mov	r2, r4
 80015ce:	462b      	mov	r3, r5
 80015d0:	4940      	ldr	r1, [pc, #256]	; (80016d4 <OLED_Proc+0x1b4>)
 80015d2:	4841      	ldr	r0, [pc, #260]	; (80016d8 <OLED_Proc+0x1b8>)
 80015d4:	f00e fb92 	bl	800fcfc <siprintf>
	Screen_ShowStringLine(3, String_Line, Font_Size);
 80015d8:	2218      	movs	r2, #24
 80015da:	493f      	ldr	r1, [pc, #252]	; (80016d8 <OLED_Proc+0x1b8>)
 80015dc:	2003      	movs	r0, #3
 80015de:	f00d fab7 	bl	800eb50 <Screen_ShowStringLine>
	sprintf(String_Line, "C:%5.1f   D:%5.1f", Motor_Expected_Speeds[2], Motor_Expected_Speeds[3]);
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <OLED_Proc+0x1c0>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffae 	bl	8000548 <__aeabi_f2d>
 80015ec:	4604      	mov	r4, r0
 80015ee:	460d      	mov	r5, r1
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <OLED_Proc+0x1c0>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001602:	4622      	mov	r2, r4
 8001604:	462b      	mov	r3, r5
 8001606:	4935      	ldr	r1, [pc, #212]	; (80016dc <OLED_Proc+0x1bc>)
 8001608:	4833      	ldr	r0, [pc, #204]	; (80016d8 <OLED_Proc+0x1b8>)
 800160a:	f00e fb77 	bl	800fcfc <siprintf>
	Screen_ShowStringLine(4, String_Line, Font_Size);
 800160e:	2218      	movs	r2, #24
 8001610:	4931      	ldr	r1, [pc, #196]	; (80016d8 <OLED_Proc+0x1b8>)
 8001612:	2004      	movs	r0, #4
 8001614:	f00d fa9c 	bl	800eb50 <Screen_ShowStringLine>

	UpdateInfraredData();
 8001618:	f00c fc8c 	bl	800df34 <UpdateInfraredData>
	sprintf(String_Line, "     %c %c %c %c", Infrared_Datas[Infrared_Right] ? '#' : ' ', Infrared_Datas[Infrared_Center_Right] ? '#' : ' ', Infrared_Datas[Infrared_Center_Left] ? '#' : ' ', Infrared_Datas[Infrared_Left] ? '#' : ' ');
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <OLED_Proc+0x1c4>)
 800161e:	78db      	ldrb	r3, [r3, #3]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <OLED_Proc+0x108>
 8001624:	2123      	movs	r1, #35	; 0x23
 8001626:	e000      	b.n	800162a <OLED_Proc+0x10a>
 8001628:	2120      	movs	r1, #32
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <OLED_Proc+0x1c4>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <OLED_Proc+0x116>
 8001632:	2023      	movs	r0, #35	; 0x23
 8001634:	e000      	b.n	8001638 <OLED_Proc+0x118>
 8001636:	2020      	movs	r0, #32
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <OLED_Proc+0x1c4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <OLED_Proc+0x124>
 8001640:	2323      	movs	r3, #35	; 0x23
 8001642:	e000      	b.n	8001646 <OLED_Proc+0x126>
 8001644:	2320      	movs	r3, #32
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <OLED_Proc+0x1c4>)
 8001648:	7852      	ldrb	r2, [r2, #1]
 800164a:	2a00      	cmp	r2, #0
 800164c:	d001      	beq.n	8001652 <OLED_Proc+0x132>
 800164e:	2223      	movs	r2, #35	; 0x23
 8001650:	e000      	b.n	8001654 <OLED_Proc+0x134>
 8001652:	2220      	movs	r2, #32
 8001654:	9201      	str	r2, [sp, #4]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4603      	mov	r3, r0
 800165a:	460a      	mov	r2, r1
 800165c:	4922      	ldr	r1, [pc, #136]	; (80016e8 <OLED_Proc+0x1c8>)
 800165e:	481e      	ldr	r0, [pc, #120]	; (80016d8 <OLED_Proc+0x1b8>)
 8001660:	f00e fb4c 	bl	800fcfc <siprintf>
	Screen_ShowStringLine(6, String_Line, Font_Size);
 8001664:	2218      	movs	r2, #24
 8001666:	491c      	ldr	r1, [pc, #112]	; (80016d8 <OLED_Proc+0x1b8>)
 8001668:	2006      	movs	r0, #6
 800166a:	f00d fa71 	bl	800eb50 <Screen_ShowStringLine>

	sprintf(String_Line, "%.2f V    %.2f C    %d s", GetBatteryLevel(), GetInternalTemperature(), (int) uwTick / 1000);
 800166e:	f00b ff0f 	bl	800d490 <GetBatteryLevel>
 8001672:	ee10 3a10 	vmov	r3, s0
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff66 	bl	8000548 <__aeabi_f2d>
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
 8001680:	f00b ff42 	bl	800d508 <GetInternalTemperature>
 8001684:	ee10 3a10 	vmov	r3, s0
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff5d 	bl	8000548 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <OLED_Proc+0x1a8>)
 8001694:	6809      	ldr	r1, [r1, #0]
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <OLED_Proc+0x1cc>)
 8001698:	fb80 c001 	smull	ip, r0, r0, r1
 800169c:	1180      	asrs	r0, r0, #6
 800169e:	17c9      	asrs	r1, r1, #31
 80016a0:	1a41      	subs	r1, r0, r1
 80016a2:	9102      	str	r1, [sp, #8]
 80016a4:	e9cd 2300 	strd	r2, r3, [sp]
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	4910      	ldr	r1, [pc, #64]	; (80016f0 <OLED_Proc+0x1d0>)
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <OLED_Proc+0x1b8>)
 80016b0:	f00e fb24 	bl	800fcfc <siprintf>
	Screen_ShowStringLine(14, String_Line, Font_Size_Small);
 80016b4:	2210      	movs	r2, #16
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <OLED_Proc+0x1b8>)
 80016b8:	200e      	movs	r0, #14
 80016ba:	f00d fa49 	bl	800eb50 <Screen_ShowStringLine>
 80016be:	e000      	b.n	80016c2 <OLED_Proc+0x1a2>
		return;
 80016c0:	bf00      	nop

}
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200011c4 	.word	0x200011c4
 80016cc:	20000434 	.word	0x20000434
 80016d0:	20001b34 	.word	0x20001b34
 80016d4:	08013ab8 	.word	0x08013ab8
 80016d8:	2000043c 	.word	0x2000043c
 80016dc:	08013acc 	.word	0x08013acc
 80016e0:	20001bc4 	.word	0x20001bc4
 80016e4:	20001be0 	.word	0x20001be0
 80016e8:	08013ae0 	.word	0x08013ae0
 80016ec:	10624dd3 	.word	0x10624dd3
 80016f0:	08013af4 	.word	0x08013af4

080016f4 <SendData_Proc>:

//向上位机发送当前小车数据
void SendData_Proc()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	if (uwTick - uwTick_SendData < 500)
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <SendData_Proc+0xa8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <SendData_Proc+0xac>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001706:	d347      	bcc.n	8001798 <SendData_Proc+0xa4>
	{
		return;
	}
	uwTick_SendData = uwTick;
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <SendData_Proc+0xa8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <SendData_Proc+0xac>)
 800170e:	6013      	str	r3, [r2, #0]

//发送数据

	TX_String[0] = ((uint16_t) (int16_t) (Motor_Expected_Speeds[0] * 100));
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <SendData_Proc+0xb0>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80017a8 <SendData_Proc+0xb4>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001722:	ee17 3a90 	vmov	r3, s15
 8001726:	b21b      	sxth	r3, r3
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <SendData_Proc+0xb8>)
 800172c:	801a      	strh	r2, [r3, #0]
	TX_String[1] = ((uint16_t) (int16_t) (Motor_Expected_Speeds[1] * 100));
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <SendData_Proc+0xb0>)
 8001730:	edd3 7a01 	vldr	s15, [r3, #4]
 8001734:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80017a8 <SendData_Proc+0xb4>
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001740:	ee17 3a90 	vmov	r3, s15
 8001744:	b21b      	sxth	r3, r3
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <SendData_Proc+0xb8>)
 800174a:	805a      	strh	r2, [r3, #2]
	TX_String[2] = ((uint16_t) (int16_t) (Motor_Expected_Axis_Speeds[0] * 100));
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <SendData_Proc+0xbc>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80017a8 <SendData_Proc+0xb4>
 8001756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175e:	ee17 3a90 	vmov	r3, s15
 8001762:	b21b      	sxth	r3, r3
 8001764:	b29a      	uxth	r2, r3
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <SendData_Proc+0xb8>)
 8001768:	809a      	strh	r2, [r3, #4]
	TX_String[3] = ((uint16_t) (int16_t) (Motor_Expected_Axis_Speeds[2] * 100));
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <SendData_Proc+0xbc>)
 800176c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001770:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80017a8 <SendData_Proc+0xb4>
 8001774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177c:	ee17 3a90 	vmov	r3, s15
 8001780:	b21b      	sxth	r3, r3
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <SendData_Proc+0xb8>)
 8001786:	80da      	strh	r2, [r3, #6]

	HAL_UART_Transmit(&huart1, (uint8_t*) TX_String, Motor_Number * 2, 0xFFFF);
 8001788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178c:	2208      	movs	r2, #8
 800178e:	4907      	ldr	r1, [pc, #28]	; (80017ac <SendData_Proc+0xb8>)
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <SendData_Proc+0xc0>)
 8001792:	f006 fcec 	bl	800816e <HAL_UART_Transmit>
 8001796:	e000      	b.n	800179a <SendData_Proc+0xa6>
		return;
 8001798:	bf00      	nop
}
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200011c4 	.word	0x200011c4
 80017a0:	20000438 	.word	0x20000438
 80017a4:	20001bc4 	.word	0x20001bc4
 80017a8:	42c80000 	.word	0x42c80000
 80017ac:	20000c0c 	.word	0x20000c0c
 80017b0:	20001bd4 	.word	0x20001bd4
 80017b4:	2000113c 	.word	0x2000113c

080017b8 <ProcessReceivedData>:

//接收数据
void ProcessReceivedData()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	short speed = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	80fb      	strh	r3, [r7, #6]
	Direction dir;
	uint8_t point = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	713b      	strb	r3, [r7, #4]
	if (RxData_Flag[UART_1] == RX_UnRead)
 80017c6:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <ProcessReceivedData+0x254>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	f040 8114 	bne.w	80019f8 <ProcessReceivedData+0x240>
	{
		//清空标志位
		CleanRxData(UART_1);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f00d fbb1 	bl	800ef38 <CleanRxData>
		//清空休眠计数
		Clean_Dormancy_Count();
 80017d6:	f00a fb65 	bl	800bea4 <Clean_Dormancy_Count>

		switch (RxData[UART_1][0])
 80017da:	4b8d      	ldr	r3, [pc, #564]	; (8001a10 <ProcessReceivedData+0x258>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	3b41      	subs	r3, #65	; 0x41
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	f200 810b 	bhi.w	80019fc <ProcessReceivedData+0x244>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <ProcessReceivedData+0x34>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	0800194d 	.word	0x0800194d
 80017f4:	080019c9 	.word	0x080019c9
 80017f8:	080019e7 	.word	0x080019e7
		{
			case 'A':
				switch (RxData[UART_1][1])
 80017fc:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <ProcessReceivedData+0x258>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	3b30      	subs	r3, #48	; 0x30
 8001802:	2b09      	cmp	r3, #9
 8001804:	f200 80fc 	bhi.w	8001a00 <ProcessReceivedData+0x248>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <ProcessReceivedData+0x58>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800193f 	.word	0x0800193f
 8001814:	08001839 	.word	0x08001839
 8001818:	08001855 	.word	0x08001855
 800181c:	08001877 	.word	0x08001877
 8001820:	08001897 	.word	0x08001897
 8001824:	080018bd 	.word	0x080018bd
 8001828:	080018dd 	.word	0x080018dd
 800182c:	080018ff 	.word	0x080018ff
 8001830:	0800191b 	.word	0x0800191b
 8001834:	08001939 	.word	0x08001939
				{
					case '1':	//上
						AddCarSpeed(Speed_Step * 2, 0, 0);
 8001838:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <ProcessReceivedData+0x25c>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001842:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001a18 <ProcessReceivedData+0x260>
 8001846:	eddf 0a74 	vldr	s1, [pc, #464]	; 8001a18 <ProcessReceivedData+0x260>
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	f00c fb27 	bl	800dea0 <AddCarSpeed>
						break;
 8001852:	e07a      	b.n	800194a <ProcessReceivedData+0x192>
					case '2':	//右上
						AddCarSpeed(Speed_Step, 0, -Direction_Step);
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <ProcessReceivedData+0x25c>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <ProcessReceivedData+0x264>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eef1 7a67 	vneg.f32	s15, s15
 8001864:	eeb0 1a67 	vmov.f32	s2, s15
 8001868:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001a18 <ProcessReceivedData+0x260>
 800186c:	eeb0 0a47 	vmov.f32	s0, s14
 8001870:	f00c fb16 	bl	800dea0 <AddCarSpeed>
						break;
 8001874:	e069      	b.n	800194a <ProcessReceivedData+0x192>
					case '3':	//右
						AddCarSpeed(0, 0, -Direction_Step * 2);
 8001876:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <ProcessReceivedData+0x264>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	eef1 7a67 	vneg.f32	s15, s15
 8001880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001884:	eeb0 1a67 	vmov.f32	s2, s15
 8001888:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001a18 <ProcessReceivedData+0x260>
 800188c:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001a18 <ProcessReceivedData+0x260>
 8001890:	f00c fb06 	bl	800dea0 <AddCarSpeed>
						break;
 8001894:	e059      	b.n	800194a <ProcessReceivedData+0x192>
					case '4':	//右下
						AddCarSpeed(-Speed_Step, 0, -Direction_Step);
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <ProcessReceivedData+0x25c>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb1 7a67 	vneg.f32	s14, s15
 80018a0:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <ProcessReceivedData+0x264>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	eef1 7a67 	vneg.f32	s15, s15
 80018aa:	eeb0 1a67 	vmov.f32	s2, s15
 80018ae:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001a18 <ProcessReceivedData+0x260>
 80018b2:	eeb0 0a47 	vmov.f32	s0, s14
 80018b6:	f00c faf3 	bl	800dea0 <AddCarSpeed>

						break;
 80018ba:	e046      	b.n	800194a <ProcessReceivedData+0x192>
					case '5':	//下
						AddCarSpeed(-Speed_Step * 2, 0, 0);
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <ProcessReceivedData+0x25c>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	eef1 7a67 	vneg.f32	s15, s15
 80018c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ca:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001a18 <ProcessReceivedData+0x260>
 80018ce:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001a18 <ProcessReceivedData+0x260>
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	f00c fae3 	bl	800dea0 <AddCarSpeed>
						break;
 80018da:	e036      	b.n	800194a <ProcessReceivedData+0x192>
					case '6':	//左下
						AddCarSpeed(-Speed_Step, 0, Direction_Step);
 80018dc:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <ProcessReceivedData+0x25c>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eef1 7a67 	vneg.f32	s15, s15
 80018e6:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <ProcessReceivedData+0x264>)
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	eeb0 1a47 	vmov.f32	s2, s14
 80018f0:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001a18 <ProcessReceivedData+0x260>
 80018f4:	eeb0 0a67 	vmov.f32	s0, s15
 80018f8:	f00c fad2 	bl	800dea0 <AddCarSpeed>
						break;
 80018fc:	e025      	b.n	800194a <ProcessReceivedData+0x192>
					case '7':	//左
						AddCarSpeed(0, 0, Direction_Step * 2);
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <ProcessReceivedData+0x264>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001908:	eeb0 1a67 	vmov.f32	s2, s15
 800190c:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001a18 <ProcessReceivedData+0x260>
 8001910:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001a18 <ProcessReceivedData+0x260>
 8001914:	f00c fac4 	bl	800dea0 <AddCarSpeed>
						break;
 8001918:	e017      	b.n	800194a <ProcessReceivedData+0x192>
					case '8':	//左上
						AddCarSpeed(Speed_Step, 0, Direction_Step);
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <ProcessReceivedData+0x25c>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <ProcessReceivedData+0x264>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	eeb0 1a47 	vmov.f32	s2, s14
 800192a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001a18 <ProcessReceivedData+0x260>
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	f00c fab5 	bl	800dea0 <AddCarSpeed>
						break;
 8001936:	e008      	b.n	800194a <ProcessReceivedData+0x192>
					case '9':	//停止
						Status_Control_Clear();
 8001938:	f00b fb26 	bl	800cf88 <Status_Control_Clear>
						break;
 800193c:	e005      	b.n	800194a <ProcessReceivedData+0x192>
					case '0':	//开始
						Status_Control_Start(Command_Mode_OneTime, 15);
 800193e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001942:	2001      	movs	r0, #1
 8001944:	f00b fb48 	bl	800cfd8 <Status_Control_Start>
						break;
 8001948:	bf00      	nop
				}
				break;
 800194a:	e059      	b.n	8001a00 <ProcessReceivedData+0x248>
			case 'B':

				for (uint8_t i = 0; i < Motor_Number; i++)
 800194c:	2300      	movs	r3, #0
 800194e:	717b      	strb	r3, [r7, #5]
 8001950:	e036      	b.n	80019c0 <ProcessReceivedData+0x208>
				{
					speed = (RxData[UART_1][i * 3 + 2] - '0') * 10 + (RxData[UART_1][i * 3 + 3] - '0');
 8001952:	797a      	ldrb	r2, [r7, #5]
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <ProcessReceivedData+0x258>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	3b30      	subs	r3, #48	; 0x30
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	b299      	uxth	r1, r3
 800196e:	797b      	ldrb	r3, [r7, #5]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <ProcessReceivedData+0x258>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	b29b      	uxth	r3, r3
 800197e:	440b      	add	r3, r1
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b30      	subs	r3, #48	; 0x30
 8001984:	b29b      	uxth	r3, r3
 8001986:	80fb      	strh	r3, [r7, #6]
					if (RxData[UART_1][i * 3 + 1] == '-')
 8001988:	797a      	ldrb	r2, [r7, #5]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	3301      	adds	r3, #1
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <ProcessReceivedData+0x258>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	2b2d      	cmp	r3, #45	; 0x2d
 8001998:	d103      	bne.n	80019a2 <ProcessReceivedData+0x1ea>
					{
						speed = -speed;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	425b      	negs	r3, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	80fb      	strh	r3, [r7, #6]
					}
					//设置速度
					//只有关闭巡线才能生效
					Set_Motor_ExpectedSpeed(i, speed);
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	eeb0 0a67 	vmov.f32	s0, s15
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00c f9a9 	bl	800dd0c <Set_Motor_ExpectedSpeed>
				for (uint8_t i = 0; i < Motor_Number; i++)
 80019ba:	797b      	ldrb	r3, [r7, #5]
 80019bc:	3301      	adds	r3, #1
 80019be:	717b      	strb	r3, [r7, #5]
 80019c0:	797b      	ldrb	r3, [r7, #5]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d9c5      	bls.n	8001952 <ProcessReceivedData+0x19a>
				}

				break;
 80019c6:	e01c      	b.n	8001a02 <ProcessReceivedData+0x24a>
			case 'C':
				//设置起点 和 朝向
				dir = RxData[UART_1][1] - '0';
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <ProcessReceivedData+0x258>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	3b30      	subs	r3, #48	; 0x30
 80019ce:	70fb      	strb	r3, [r7, #3]
				point = RxData[UART_1][2] - '0';
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <ProcessReceivedData+0x258>)
 80019d2:	789b      	ldrb	r3, [r3, #2]
 80019d4:	3b30      	subs	r3, #48	; 0x30
 80019d6:	713b      	strb	r3, [r7, #4]
				SetDefaultValue(dir, point);
 80019d8:	793a      	ldrb	r2, [r7, #4]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f00b fa8c 	bl	800cefc <SetDefaultValue>

				break;
 80019e4:	e00d      	b.n	8001a02 <ProcessReceivedData+0x24a>
			case 'D':
				//设置终点并开始寻路
				point = RxData[UART_1][1] - '0';
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <ProcessReceivedData+0x258>)
 80019e8:	785b      	ldrb	r3, [r3, #1]
 80019ea:	3b30      	subs	r3, #48	; 0x30
 80019ec:	713b      	strb	r3, [r7, #4]
				StartWayFindingAndRuning(point);
 80019ee:	793b      	ldrb	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00b fa9b 	bl	800cf2c <StartWayFindingAndRuning>
				break;
 80019f6:	e004      	b.n	8001a02 <ProcessReceivedData+0x24a>
			default:
				break;
		}
	}
 80019f8:	bf00      	nop
 80019fa:	e002      	b.n	8001a02 <ProcessReceivedData+0x24a>
				break;
 80019fc:	bf00      	nop
 80019fe:	e000      	b.n	8001a02 <ProcessReceivedData+0x24a>
				break;
 8001a00:	bf00      	nop
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000799c 	.word	0x2000799c
 8001a10:	20007944 	.word	0x20007944
 8001a14:	20000000 	.word	0x20000000
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_TIM_PeriodElapsedCallback>:

//定时器中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d104      	bne.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//更新呼吸灯 PWM占空比
		Periodic_Update_BreathingLights();
 8001a32:	f00c fc31 	bl	800e298 <Periodic_Update_BreathingLights>
		//接收上位机数据
		ProcessReceivedData();
 8001a36:	f7ff febf 	bl	80017b8 <ProcessReceivedData>
 8001a3a:	e015      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x48>
	}
	else if (htim->Instance == TIM6)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d109      	bne.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		//每0.1ms

		//系统控制小车
		Periodic_Status_Control();
 8001a46:	f00b fd11 	bl	800d46c <Periodic_Status_Control>
		//更新实际值
		//Periodic_Update_Car_ActualSpeed();
		//更新理论值
		//Periodic_UpdateAndSet_Car_ExpectedSpeed();
		if (Is_Car_Runing() == 1)
 8001a4a:	f00c f909 	bl	800dc60 <Is_Car_Runing>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d109      	bne.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			//清空休眠计数
			Clean_Dormancy_Count();
 8001a54:	f00a fa26 	bl	800bea4 <Clean_Dormancy_Count>
 8001a58:	e006      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x48>
		}
	}

	else if (htim->Instance == TIM7)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		//每1s

		//休眠
		Periodic_Dormancy_Counter();
 8001a64:	f00a fa70 	bl	800bf48 <Periodic_Dormancy_Counter>
	}

	if (htim->Instance == TIM8)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//接收上位机数据
		ProcessReceivedData();
 8001a72:	f7ff fea1 	bl	80017b8 <ProcessReceivedData>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40002000 	.word	0x40002000
 8001a84:	40001000 	.word	0x40001000
 8001a88:	40001400 	.word	0x40001400
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_EXTI_Callback>:

//外部中断 按键
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
//清空休眠计数
	Clean_Dormancy_Count();
 8001a9a:	f00a fa03 	bl	800bea4 <Clean_Dormancy_Count>

	if (GPIO_Pin == Key_Stop_Pin)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d107      	bne.n	8001ab4 <HAL_GPIO_EXTI_Callback+0x24>
	{
		//紧急制动按钮

		SetCarSpeed(0, 0, 0);
 8001aa4:	ed9f 1a05 	vldr	s2, [pc, #20]	; 8001abc <HAL_GPIO_EXTI_Callback+0x2c>
 8001aa8:	eddf 0a04 	vldr	s1, [pc, #16]	; 8001abc <HAL_GPIO_EXTI_Callback+0x2c>
 8001aac:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001abc <HAL_GPIO_EXTI_Callback+0x2c>
 8001ab0:	f00c fa26 	bl	800df00 <SetCarSpeed>
	}

}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	00000000 	.word	0x00000000

08001ac0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <MX_SDIO_SD_Init+0x40>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001af0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af4:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <MX_SDIO_SD_Init+0x3c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000c5c 	.word	0x20000c5c
 8001b0c:	40012c00 	.word	0x40012c00

08001b10 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
    if(sdHandle->Instance==SDIO)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <HAL_SD_MspInit+0x1c0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	f040 80c9 	bne.w	8001cc6 <HAL_SD_MspInit+0x1b6>
    {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
        /* SDIO clock enable */
        __HAL_RCC_SDIO_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b42:	6453      	str	r3, [r2, #68]	; 0x44
 8001b44:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a5e      	ldr	r2, [pc, #376]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <HAL_SD_MspInit+0x1c4>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
        PC10         ------> SDIO_D2
        PC11         ------> SDIO_D3
        PC12         ------> SDIO_CK
        PD2         ------> SDIO_CMD
        */
        GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b8c:	617b      	str	r3, [r7, #20]
                                                    |GPIO_PIN_12;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	484c      	ldr	r0, [pc, #304]	; (8001cd8 <HAL_SD_MspInit+0x1c8>)
 8001ba6:	f002 fad9 	bl	800415c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4845      	ldr	r0, [pc, #276]	; (8001cdc <HAL_SD_MspInit+0x1cc>)
 8001bc6:	f002 fac9 	bl	800415c <HAL_GPIO_Init>

        /* SDIO DMA Init */
        /* SDIO_RX Init */
        hdma_sdio_rx.Instance = DMA2_Stream3;
 8001bca:	4b45      	ldr	r3, [pc, #276]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001bcc:	4a45      	ldr	r2, [pc, #276]	; (8001ce4 <HAL_SD_MspInit+0x1d4>)
 8001bce:	601a      	str	r2, [r3, #0]
        hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001bd0:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd6:	605a      	str	r2, [r3, #4]
        hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
        hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
        hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be4:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bea:	611a      	str	r2, [r3, #16]
        hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf2:	615a      	str	r2, [r3, #20]
        hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfa:	619a      	str	r2, [r3, #24]
        hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]
        hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
        hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c10:	2203      	movs	r2, #3
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001c24:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c26:	f001 fe8b 	bl	8003940 <HAL_DMA_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_SD_MspInit+0x124>
        {
            Error_Handler();
 8001c30:	f7ff ff46 	bl	8001ac0 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <HAL_SD_MspInit+0x1d0>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6393      	str	r3, [r2, #56]	; 0x38

        /* SDIO_TX Init */
        hdma_sdio_tx.Instance = DMA2_Stream6;
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c42:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <HAL_SD_MspInit+0x1dc>)
 8001c44:	601a      	str	r2, [r3, #0]
        hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4c:	605a      	str	r2, [r3, #4]
        hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	609a      	str	r2, [r3, #8]
        hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
        hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c60:	611a      	str	r2, [r3, #16]
        hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c68:	615a      	str	r2, [r3, #20]
        hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c70:	619a      	str	r2, [r3, #24]
        hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c74:	2220      	movs	r2, #32
 8001c76:	61da      	str	r2, [r3, #28]
        hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
        hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c86:	2203      	movs	r2, #3
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c9a:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001c9c:	f001 fe50 	bl	8003940 <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_SD_MspInit+0x19a>
        {
            Error_Handler();
 8001ca6:	f7ff ff0b 	bl	8001ac0 <Error_Handler>
        }

        __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_SD_MspInit+0x1d8>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38

        /* SDIO interrupt Init */
        HAL_NVIC_SetPriority(SDIO_IRQn, 13, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	210d      	movs	r1, #13
 8001cba:	2031      	movs	r0, #49	; 0x31
 8001cbc:	f001 fe09 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001cc0:	2031      	movs	r0, #49	; 0x31
 8001cc2:	f001 fe22 	bl	800390a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SDIO_MspInit 1 */

    /* USER CODE END SDIO_MspInit 1 */
    }
}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	20000ce0 	.word	0x20000ce0
 8001ce4:	40026458 	.word	0x40026458
 8001ce8:	20000d40 	.word	0x20000d40
 8001cec:	400264a0 	.word	0x400264a0

08001cf0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_SPI1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d00:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d24:	2238      	movs	r2, #56	; 0x38
 8001d26:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d42:	f004 fbd4 	bl	80064ee <HAL_SPI_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8001d4c:	f7ff feb8 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000da0 	.word	0x20000da0
 8001d58:	40013000 	.word	0x40013000

08001d5c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    /* USER CODE END SPI2_Init 0 */

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    hspi2.Instance = SPI2;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <MX_SPI2_Init+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d6c:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001da8:	220a      	movs	r2, #10
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <MX_SPI2_Init+0x64>)
 8001dae:	f004 fb9e 	bl	80064ee <HAL_SPI_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8001db8:	f7ff fe82 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000df8 	.word	0x20000df8
 8001dc4:	40003800 	.word	0x40003800

08001dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
    if(spiHandle->Instance==SPI1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_SPI_MspInit+0x180>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12c      	bne.n	8001e44 <HAL_SPI_MspInit+0x7c>
    {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
        /**SPI1 GPIO Configuration
        PB3         ------> SPI1_SCK
        PB4         ------> SPI1_MISO
        PB5         ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = W52QXX_SCK_Pin|W52QXX_MISO_Pin|W52QXX_MOSI_Pin;
 8001e22:	2338      	movs	r3, #56	; 0x38
 8001e24:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e32:	2305      	movs	r3, #5
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4844      	ldr	r0, [pc, #272]	; (8001f50 <HAL_SPI_MspInit+0x188>)
 8001e3e:	f002 f98d 	bl	800415c <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
    }
}
 8001e42:	e07c      	b.n	8001f3e <HAL_SPI_MspInit+0x176>
    else if(spiHandle->Instance==SPI2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_SPI_MspInit+0x18c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d177      	bne.n	8001f3e <HAL_SPI_MspInit+0x176>
        __HAL_RCC_SPI2_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a3d      	ldr	r2, [pc, #244]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_SPI_MspInit+0x184>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4826      	ldr	r0, [pc, #152]	; (8001f58 <HAL_SPI_MspInit+0x190>)
 8001ebe:	f002 f94d 	bl	800415c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = LCD_SCL_Pin;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	481c      	ldr	r0, [pc, #112]	; (8001f50 <HAL_SPI_MspInit+0x188>)
 8001ee0:	f002 f93c 	bl	800415c <HAL_GPIO_Init>
        hdma_spi2_tx.Instance = DMA1_Stream4;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <HAL_SPI_MspInit+0x198>)
 8001ee8:	601a      	str	r2, [r3, #0]
        hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
        hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	609a      	str	r2, [r3, #8]
        hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
        hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f02:	611a      	str	r2, [r3, #16]
        hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
        hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
        hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
        hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
        hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f22:	480e      	ldr	r0, [pc, #56]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f24:	f001 fd0c 	bl	8003940 <HAL_DMA_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_SPI_MspInit+0x16a>
            Error_Handler();
 8001f2e:	f7ff fdc7 	bl	8001ac0 <Error_Handler>
        __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f36:	649a      	str	r2, [r3, #72]	; 0x48
 8001f38:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_SPI_MspInit+0x194>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	; 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40003800 	.word	0x40003800
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	20000e50 	.word	0x20000e50
 8001f60:	40026070 	.word	0x40026070

08001f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
    * Initializes the Global MSP.
    */
void HAL_MspInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
    * @brief This function handles Non maskable interrupt.
    */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
    * @brief This function handles Hard fault interrupt.
    */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
    * @brief This function handles Memory management fault.
    */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
    * @brief This function handles Pre-fetch fault, memory access fault.
    */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
    * @brief This function handles Undefined instruction or illegal state.
    */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
    * @brief This function handles System service call via SWI instruction.
    */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
    * @brief This function handles Debug monitor.
    */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
    * @brief This function handles Pendable request for system service.
    */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
    * @brief This function handles System tick timer.
    */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002000:	f000 ff7c 	bl	8002efc <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <EXTI3_IRQHandler>:

/**
    * @brief This function handles EXTI line3 interrupt.
    */
void EXTI3_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(Key_Stop_Pin);
 800200c:	2008      	movs	r0, #8
 800200e:	f002 fa73 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <DMA1_Stream4_IRQHandler>:

/**
    * @brief This function handles DMA1 stream4 global interrupt.
    */
void DMA1_Stream4_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
    /* USER CODE END DMA1_Stream4_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <DMA1_Stream4_IRQHandler+0x10>)
 800201e:	f001 fe27 	bl	8003c70 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

    /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000e50 	.word	0x20000e50

0800202c <USART1_IRQHandler>:

/**
    * @brief This function handles USART1 global interrupt.
    */
void USART1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <USART1_IRQHandler+0x10>)
 8002032:	f006 f95f 	bl	80082f4 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000113c 	.word	0x2000113c

08002040 <TIM8_UP_TIM13_IRQHandler>:

/**
    * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
    */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002046:	f005 f9eb 	bl	8007420 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim13);
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800204c:	f005 f9e8 	bl	8007420 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

    /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20001064 	.word	0x20001064
 8002058:	200010ac 	.word	0x200010ac

0800205c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
    * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
    */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
    HAL_TIM_IRQHandler(&htim8);
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002062:	f005 f9dd 	bl	8007420 <HAL_TIM_IRQHandler>
    HAL_TIM_IRQHandler(&htim14);
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002068:	f005 f9da 	bl	8007420 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

    /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20001064 	.word	0x20001064
 8002074:	200010f4 	.word	0x200010f4

08002078 <SDIO_IRQHandler>:

/**
    * @brief This function handles SDIO global interrupt.
    */
void SDIO_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SDIO_IRQn 0 */

    /* USER CODE END SDIO_IRQn 0 */
    HAL_SD_IRQHandler(&hsd);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <SDIO_IRQHandler+0x10>)
 800207e:	f003 f97b 	bl	8005378 <HAL_SD_IRQHandler>
    /* USER CODE BEGIN SDIO_IRQn 1 */

    /* USER CODE END SDIO_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000c5c 	.word	0x20000c5c

0800208c <TIM6_DAC_IRQHandler>:

/**
    * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
    */
void TIM6_DAC_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

    /* USER CODE END TIM6_DAC_IRQn 0 */
    HAL_TIM_IRQHandler(&htim6);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <TIM6_DAC_IRQHandler+0x10>)
 8002092:	f005 f9c5 	bl	8007420 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

    /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000fd4 	.word	0x20000fd4

080020a0 <TIM7_IRQHandler>:

/**
    * @brief This function handles TIM7 global interrupt.
    */
void TIM7_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIM7_IRQHandler+0x10>)
 80020a6:	f005 f9bb 	bl	8007420 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM7_IRQn 1 */

    /* USER CODE END TIM7_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000101c 	.word	0x2000101c

080020b4 <DMA2_Stream3_IRQHandler>:

/**
    * @brief This function handles DMA2 stream3 global interrupt.
    */
void DMA2_Stream3_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

    /* USER CODE END DMA2_Stream3_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA2_Stream3_IRQHandler+0x10>)
 80020ba:	f001 fdd9 	bl	8003c70 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

    /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000ce0 	.word	0x20000ce0

080020c8 <DMA2_Stream6_IRQHandler>:

/**
    * @brief This function handles DMA2 stream6 global interrupt.
    */
void DMA2_Stream6_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

    /* USER CODE END DMA2_Stream6_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA2_Stream6_IRQHandler+0x10>)
 80020ce:	f001 fdcf 	bl	8003c70 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

    /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000d40 	.word	0x20000d40

080020dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
	return 1;
 80020e0:	2301      	movs	r3, #1
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_kill>:

int _kill(int pid, int sig)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020f6:	f00c ff4f 	bl	800ef98 <__errno>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2216      	movs	r2, #22
 80020fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_exit>:

void _exit (int status)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ffe7 	bl	80020ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800211e:	e7fe      	b.n	800211e <_exit+0x12>

08002120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e00a      	b.n	8002148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002132:	f3af 8000 	nop.w
 8002136:	4601      	mov	r1, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	60ba      	str	r2, [r7, #8]
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf0      	blt.n	8002132 <_read+0x12>
	}

return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e009      	b.n	8002180 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	dbf1      	blt.n	800216c <_write+0x12>
	}
	return len;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_close>:

int _close(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
	return -1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ba:	605a      	str	r2, [r3, #4]
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_isatty>:

int _isatty(int file)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
	return 1;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <_sbrk+0x5c>)
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <_sbrk+0x60>)
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <_sbrk+0x64>)
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <_sbrk+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800222c:	f00c feb4 	bl	800ef98 <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e009      	b.n	8002250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20020000 	.word	0x20020000
 800225c:	00000800 	.word	0x00000800
 8002260:	20000eb0 	.word	0x20000eb0
 8002264:	200079b0 	.word	0x200079b0

08002268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <SystemInit+0x20>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <SystemInit+0x20>)
 8002274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f00c fea6 	bl	800efec <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022aa:	4a23      	ldr	r2, [pc, #140]	; (8002338 <MX_TIM1_Init+0xac>)
 80022ac:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c0:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <MX_TIM1_Init+0xa8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022d4:	2303      	movs	r3, #3
 80022d6:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022dc:	2301      	movs	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	4619      	mov	r1, r3
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <MX_TIM1_Init+0xa8>)
 8002300:	f004 ff5a 	bl	80071b8 <HAL_TIM_Encoder_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0x82>
    {
        Error_Handler();
 800230a:	f7ff fbd9 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <MX_TIM1_Init+0xa8>)
 800231c:	f005 fe4a 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM1_Init+0x9e>
    {
        Error_Handler();
 8002326:	f7ff fbcb 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000eb4 	.word	0x20000eb4
 8002338:	40010000 	.word	0x40010000

0800233c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08e      	sub	sp, #56	; 0x38
 8002340:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	615a      	str	r2, [r3, #20]
 800236a:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 800236c:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <MX_TIM3_Init+0x128>)
 800236e:	4a3e      	ldr	r2, [pc, #248]	; (8002468 <MX_TIM3_Init+0x12c>)
 8002370:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8002372:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <MX_TIM3_Init+0x128>)
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <MX_TIM3_Init+0x128>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 16800-1;
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <MX_TIM3_Init+0x128>)
 8002380:	f244 129f 	movw	r2, #16799	; 0x419f
 8002384:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <MX_TIM3_Init+0x128>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <MX_TIM3_Init+0x128>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002392:	4834      	ldr	r0, [pc, #208]	; (8002464 <MX_TIM3_Init+0x128>)
 8002394:	f004 fc90 	bl	8006cb8 <HAL_TIM_Base_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0x66>
    {
        Error_Handler();
 800239e:	f7ff fb8f 	bl	8001ac0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ac:	4619      	mov	r1, r3
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <MX_TIM3_Init+0x128>)
 80023b0:	f005 fa00 	bl	80077b4 <HAL_TIM_ConfigClockSource>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM3_Init+0x82>
    {
        Error_Handler();
 80023ba:	f7ff fb81 	bl	8001ac0 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023be:	4829      	ldr	r0, [pc, #164]	; (8002464 <MX_TIM3_Init+0x128>)
 80023c0:	f004 fd69 	bl	8006e96 <HAL_TIM_PWM_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM3_Init+0x92>
    {
        Error_Handler();
 80023ca:	f7ff fb79 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	4619      	mov	r1, r3
 80023dc:	4821      	ldr	r0, [pc, #132]	; (8002464 <MX_TIM3_Init+0x128>)
 80023de:	f005 fde9 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM3_Init+0xb0>
    {
        Error_Handler();
 80023e8:	f7ff fb6a 	bl	8001ac0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ec:	2360      	movs	r3, #96	; 0x60
 80023ee:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	4619      	mov	r1, r3
 8002402:	4818      	ldr	r0, [pc, #96]	; (8002464 <MX_TIM3_Init+0x128>)
 8002404:	f005 f914 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0xd6>
    {
        Error_Handler();
 800240e:	f7ff fb57 	bl	8001ac0 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2204      	movs	r2, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4812      	ldr	r0, [pc, #72]	; (8002464 <MX_TIM3_Init+0x128>)
 800241a:	f005 f909 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0xec>
    {
        Error_Handler();
 8002424:	f7ff fb4c 	bl	8001ac0 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2208      	movs	r2, #8
 800242c:	4619      	mov	r1, r3
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <MX_TIM3_Init+0x128>)
 8002430:	f005 f8fe 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM3_Init+0x102>
    {
        Error_Handler();
 800243a:	f7ff fb41 	bl	8001ac0 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	220c      	movs	r2, #12
 8002442:	4619      	mov	r1, r3
 8002444:	4807      	ldr	r0, [pc, #28]	; (8002464 <MX_TIM3_Init+0x128>)
 8002446:	f005 f8f3 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM3_Init+0x118>
    {
        Error_Handler();
 8002450:	f7ff fb36 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <MX_TIM3_Init+0x128>)
 8002456:	f000 fb7b 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 800245a:	bf00      	nop
 800245c:	3738      	adds	r7, #56	; 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000efc 	.word	0x20000efc
 8002468:	40000400 	.word	0x40000400

0800246c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f00c fdb6 	bl	800efec <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <MX_TIM4_Init+0xa0>)
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <MX_TIM4_Init+0xa4>)
 800248c:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <MX_TIM4_Init+0xa0>)
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <MX_TIM4_Init+0xa0>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 65535;
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <MX_TIM4_Init+0xa0>)
 800249c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a0:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_TIM4_Init+0xa0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_TIM4_Init+0xa0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ae:	2303      	movs	r3, #3
 80024b0:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024b6:	2301      	movs	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024c6:	2301      	movs	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	4619      	mov	r1, r3
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_TIM4_Init+0xa0>)
 80024da:	f004 fe6d 	bl	80071b8 <HAL_TIM_Encoder_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM4_Init+0x7c>
    {
        Error_Handler();
 80024e4:	f7ff faec 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_TIM4_Init+0xa0>)
 80024f6:	f005 fd5d 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM4_Init+0x98>
    {
        Error_Handler();
 8002500:	f7ff fade 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	3730      	adds	r7, #48	; 0x30
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000f44 	.word	0x20000f44
 8002510:	40000800 	.word	0x40000800

08002514 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	2224      	movs	r2, #36	; 0x24
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f00c fd62 	bl	800efec <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8002530:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <MX_TIM5_Init+0xa0>)
 8002532:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <MX_TIM5_Init+0xa4>)
 8002534:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 0;
 8002536:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <MX_TIM5_Init+0xa0>)
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <MX_TIM5_Init+0xa0>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 4294967295;
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <MX_TIM5_Init+0xa0>)
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <MX_TIM5_Init+0xa0>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_TIM5_Init+0xa0>)
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002556:	2303      	movs	r3, #3
 8002558:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800255e:	2301      	movs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800256e:	2301      	movs	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <MX_TIM5_Init+0xa0>)
 8002582:	f004 fe19 	bl	80071b8 <HAL_TIM_Encoder_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM5_Init+0x7c>
    {
        Error_Handler();
 800258c:	f7ff fa98 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_TIM5_Init+0xa0>)
 800259e:	f005 fd09 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM5_Init+0x98>
    {
        Error_Handler();
 80025a8:	f7ff fa8a 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000f8c 	.word	0x20000f8c
 80025b8:	40000c00 	.word	0x40000c00

080025bc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM6_Init 0 */

    /* USER CODE END TIM6_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c2:	463b      	mov	r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM6_Init 1 */

    /* USER CODE END TIM6_Init 1 */
    htim6.Instance = TIM6;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_TIM6_Init+0x64>)
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <MX_TIM6_Init+0x68>)
 80025ce:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 168-1;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MX_TIM6_Init+0x64>)
 80025d2:	22a7      	movs	r2, #167	; 0xa7
 80025d4:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <MX_TIM6_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 1000-1;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_TIM6_Init+0x64>)
 80025de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e2:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_TIM6_Init+0x64>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ea:	480d      	ldr	r0, [pc, #52]	; (8002620 <MX_TIM6_Init+0x64>)
 80025ec:	f004 fb64 	bl	8006cb8 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM6_Init+0x3e>
    {
        Error_Handler();
 80025f6:	f7ff fa63 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	; (8002620 <MX_TIM6_Init+0x64>)
 8002608:	f005 fcd4 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM6_Init+0x5a>
    {
        Error_Handler();
 8002612:	f7ff fa55 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM6_Init 2 */

    /* USER CODE END TIM6_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000fd4 	.word	0x20000fd4
 8002624:	40001000 	.word	0x40001000

08002628 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262e:	463b      	mov	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_TIM7_Init+0x64>)
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <MX_TIM7_Init+0x68>)
 800263a:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 16800-1;
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <MX_TIM7_Init+0x64>)
 800263e:	f244 129f 	movw	r2, #16799	; 0x419f
 8002642:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_TIM7_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 10000-1;
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_TIM7_Init+0x64>)
 800264c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002650:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_TIM7_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <MX_TIM7_Init+0x64>)
 800265a:	f004 fb2d 	bl	8006cb8 <HAL_TIM_Base_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 8002664:	f7ff fa2c 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_TIM7_Init+0x64>)
 8002676:	f005 fc9d 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8002680:	f7ff fa1e 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000101c 	.word	0x2000101c
 8002690:	40001400 	.word	0x40001400

08002694 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f00c fca2 	bl	800efec <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance = TIM8;
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <MX_TIM8_Init+0xa8>)
 80026b2:	4a23      	ldr	r2, [pc, #140]	; (8002740 <MX_TIM8_Init+0xac>)
 80026b4:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = 0;
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <MX_TIM8_Init+0xa8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <MX_TIM8_Init+0xa8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = 65535;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <MX_TIM8_Init+0xa8>)
 80026c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c8:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <MX_TIM8_Init+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <MX_TIM8_Init+0xa8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <MX_TIM8_Init+0xa8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026dc:	2303      	movs	r3, #3
 80026de:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026f4:	2301      	movs	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4619      	mov	r1, r3
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <MX_TIM8_Init+0xa8>)
 8002708:	f004 fd56 	bl	80071b8 <HAL_TIM_Encoder_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM8_Init+0x82>
    {
        Error_Handler();
 8002712:	f7ff f9d5 	bl	8001ac0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4806      	ldr	r0, [pc, #24]	; (800273c <MX_TIM8_Init+0xa8>)
 8002724:	f005 fc46 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM8_Init+0x9e>
    {
        Error_Handler();
 800272e:	f7ff f9c7 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	3730      	adds	r7, #48	; 0x30
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20001064 	.word	0x20001064
 8002740:	40010400 	.word	0x40010400

08002744 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
    /* USER CODE END TIM13_Init 0 */

    /* USER CODE BEGIN TIM13_Init 1 */

    /* USER CODE END TIM13_Init 1 */
    htim13.Instance = TIM13;
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_TIM13_Init+0x40>)
 800274a:	4a0f      	ldr	r2, [pc, #60]	; (8002788 <MX_TIM13_Init+0x44>)
 800274c:	601a      	str	r2, [r3, #0]
    htim13.Init.Prescaler = 16800-1;
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <MX_TIM13_Init+0x40>)
 8002750:	f244 129f 	movw	r2, #16799	; 0x419f
 8002754:	605a      	str	r2, [r3, #4]
    htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <MX_TIM13_Init+0x40>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
    htim13.Init.Period = 5000-1;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_TIM13_Init+0x40>)
 800275e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002762:	60da      	str	r2, [r3, #12]
    htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <MX_TIM13_Init+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_TIM13_Init+0x40>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <MX_TIM13_Init+0x40>)
 8002772:	f004 faa1 	bl	8006cb8 <HAL_TIM_Base_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM13_Init+0x3c>
    {
        Error_Handler();
 800277c:	f7ff f9a0 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM13_Init 2 */

    /* USER CODE END TIM13_Init 2 */

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200010ac 	.word	0x200010ac
 8002788:	40001c00 	.word	0x40001c00

0800278c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM14_Init 0 */

    /* USER CODE END TIM14_Init 0 */

    TIM_OC_InitTypeDef sConfigOC = {0};
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
 80027a0:	615a      	str	r2, [r3, #20]
 80027a2:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM14_Init 1 */

    /* USER CODE END TIM14_Init 1 */
    htim14.Instance = TIM14;
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <MX_TIM14_Init+0x94>)
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <MX_TIM14_Init+0x98>)
 80027a8:	601a      	str	r2, [r3, #0]
    htim14.Init.Prescaler = 42-1;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <MX_TIM14_Init+0x94>)
 80027ac:	2229      	movs	r2, #41	; 0x29
 80027ae:	605a      	str	r2, [r3, #4]
    htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <MX_TIM14_Init+0x94>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    htim14.Init.Period = 1000-1;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <MX_TIM14_Init+0x94>)
 80027b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027bc:	60da      	str	r2, [r3, #12]
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_TIM14_Init+0x94>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <MX_TIM14_Init+0x94>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80027ca:	4815      	ldr	r0, [pc, #84]	; (8002820 <MX_TIM14_Init+0x94>)
 80027cc:	f004 fa74 	bl	8006cb8 <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM14_Init+0x4e>
    {
        Error_Handler();
 80027d6:	f7ff f973 	bl	8001ac0 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80027da:	4811      	ldr	r0, [pc, #68]	; (8002820 <MX_TIM14_Init+0x94>)
 80027dc:	f004 fb5b 	bl	8006e96 <HAL_TIM_PWM_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM14_Init+0x5e>
    {
        Error_Handler();
 80027e6:	f7ff f96b 	bl	8001ac0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ea:	2360      	movs	r3, #96	; 0x60
 80027ec:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 50;
 80027ee:	2332      	movs	r3, #50	; 0x32
 80027f0:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <MX_TIM14_Init+0x94>)
 8002802:	f004 ff15 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM14_Init+0x84>
    {
        Error_Handler();
 800280c:	f7ff f958 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM14_Init 2 */

    /* USER CODE END TIM14_Init 2 */
    HAL_TIM_MspPostInit(&htim14);
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <MX_TIM14_Init+0x94>)
 8002812:	f000 f99d 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200010f4 	.word	0x200010f4
 8002824:	40002000 	.word	0x40002000

08002828 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b090      	sub	sp, #64	; 0x40
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
    if(tim_encoderHandle->Instance==TIM1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6d      	ldr	r2, [pc, #436]	; (80029fc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12d      	bne.n	80028a6 <HAL_TIM_Encoder_MspInit+0x7e>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* TIM1 clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a6b      	ldr	r2, [pc, #428]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28

        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a64      	ldr	r2, [pc, #400]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        /**TIM1 GPIO Configuration
        PE9         ------> TIM1_CH1
        PE11         ------> TIM1_CH2
        */
        GPIO_InitStruct.Pin = Motor_1_Encoder_A_Pin|Motor_1_Encoder_B_Pin;
 8002882:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002894:	2301      	movs	r3, #1
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289c:	4619      	mov	r1, r3
 800289e:	4859      	ldr	r0, [pc, #356]	; (8002a04 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80028a0:	f001 fc5c 	bl	800415c <HAL_GPIO_Init>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
    }
}
 80028a4:	e0a5      	b.n	80029f2 <HAL_TIM_Encoder_MspInit+0x1ca>
    else if(tim_encoderHandle->Instance==TIM4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d12d      	bne.n	800290c <HAL_TIM_Encoder_MspInit+0xe4>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
 80028b4:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a51      	ldr	r2, [pc, #324]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4a4a      	ldr	r2, [pc, #296]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	6313      	str	r3, [r2, #48]	; 0x30
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	69fb      	ldr	r3, [r7, #28]
        GPIO_InitStruct.Pin = Motor_4_Encoder_A_Pin|Motor_4_Encoder_B_Pin;
 80028e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028fa:	2302      	movs	r3, #2
 80028fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002902:	4619      	mov	r1, r3
 8002904:	4841      	ldr	r0, [pc, #260]	; (8002a0c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002906:	f001 fc29 	bl	800415c <HAL_GPIO_Init>
}
 800290a:	e072      	b.n	80029f2 <HAL_TIM_Encoder_MspInit+0x1ca>
    else if(tim_encoderHandle->Instance==TIM5)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3f      	ldr	r2, [pc, #252]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12c      	bne.n	8002970 <HAL_TIM_Encoder_MspInit+0x148>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	69bb      	ldr	r3, [r7, #24]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a31      	ldr	r2, [pc, #196]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]
        GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800294e:	2303      	movs	r3, #3
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800295e:	2302      	movs	r3, #2
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002966:	4619      	mov	r1, r3
 8002968:	482a      	ldr	r0, [pc, #168]	; (8002a14 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800296a:	f001 fbf7 	bl	800415c <HAL_GPIO_Init>
}
 800296e:	e040      	b.n	80029f2 <HAL_TIM_Encoder_MspInit+0x1ca>
    else if(tim_encoderHandle->Instance==TIM8)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d13b      	bne.n	80029f2 <HAL_TIM_Encoder_MspInit+0x1ca>
        __HAL_RCC_TIM8_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = Motor_2_Encoder_A_Pin|Motor_2_Encoder_B_Pin;
 80029b2:	23c0      	movs	r3, #192	; 0xc0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80029c2:	2303      	movs	r3, #3
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ca:	4619      	mov	r1, r3
 80029cc:	4813      	ldr	r0, [pc, #76]	; (8002a1c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029ce:	f001 fbc5 	bl	800415c <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2102      	movs	r1, #2
 80029d6:	202c      	movs	r0, #44	; 0x2c
 80029d8:	f000 ff7b 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80029dc:	202c      	movs	r0, #44	; 0x2c
 80029de:	f000 ff94 	bl	800390a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2102      	movs	r1, #2
 80029e6:	202d      	movs	r0, #45	; 0x2d
 80029e8:	f000 ff73 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80029ec:	202d      	movs	r0, #45	; 0x2d
 80029ee:	f000 ff8c 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3740      	adds	r7, #64	; 0x40
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	40020800 	.word	0x40020800

08002a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

    if(tim_baseHandle->Instance==TIM3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_TIM_Base_MspInit+0x118>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x30>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
        /* TIM3 clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }
}
 8002a4e:	e06e      	b.n	8002b2e <HAL_TIM_Base_MspInit+0x10e>
    else if(tim_baseHandle->Instance==TIM6)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3a      	ldr	r2, [pc, #232]	; (8002b40 <HAL_TIM_Base_MspInit+0x120>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d116      	bne.n	8002a88 <HAL_TIM_Base_MspInit+0x68>
        __HAL_RCC_TIM6_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a36      	ldr	r2, [pc, #216]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a64:	f043 0310 	orr.w	r3, r3, #16
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	69bb      	ldr	r3, [r7, #24]
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	2036      	movs	r0, #54	; 0x36
 8002a7c:	f000 ff29 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a80:	2036      	movs	r0, #54	; 0x36
 8002a82:	f000 ff42 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 8002a86:	e052      	b.n	8002b2e <HAL_TIM_Base_MspInit+0x10e>
    else if(tim_baseHandle->Instance==TIM7)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_TIM_Base_MspInit+0x124>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d116      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0xa0>
        __HAL_RCC_TIM7_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
        HAL_NVIC_SetPriority(TIM7_IRQn, 15, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	210f      	movs	r1, #15
 8002ab2:	2037      	movs	r0, #55	; 0x37
 8002ab4:	f000 ff0d 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ab8:	2037      	movs	r0, #55	; 0x37
 8002aba:	f000 ff26 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 8002abe:	e036      	b.n	8002b2e <HAL_TIM_Base_MspInit+0x10e>
    else if(tim_baseHandle->Instance==TIM13)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_TIM_Base_MspInit+0x128>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d116      	bne.n	8002af8 <HAL_TIM_Base_MspInit+0xd8>
        __HAL_RCC_TIM13_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2102      	movs	r1, #2
 8002aea:	202c      	movs	r0, #44	; 0x2c
 8002aec:	f000 fef1 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002af0:	202c      	movs	r0, #44	; 0x2c
 8002af2:	f000 ff0a 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 8002af6:	e01a      	b.n	8002b2e <HAL_TIM_Base_MspInit+0x10e>
    else if(tim_baseHandle->Instance==TIM14)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_TIM_Base_MspInit+0x12c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d115      	bne.n	8002b2e <HAL_TIM_Base_MspInit+0x10e>
        __HAL_RCC_TIM14_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_TIM_Base_MspInit+0x11c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2102      	movs	r1, #2
 8002b22:	202d      	movs	r0, #45	; 0x2d
 8002b24:	f000 fed5 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b28:	202d      	movs	r0, #45	; 0x2d
 8002b2a:	f000 feee 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40001000 	.word	0x40001000
 8002b44:	40001400 	.word	0x40001400
 8002b48:	40001c00 	.word	0x40001c00
 8002b4c:	40002000 	.word	0x40002000

08002b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
    if(timHandle->Instance==TIM3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <HAL_TIM_MspPostInit+0xec>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d13c      	bne.n	8002bec <HAL_TIM_MspPostInit+0x9c>
    {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
        PA6         ------> TIM3_CH1
        PA7         ------> TIM3_CH2
        PB0         ------> TIM3_CH3
        PB1         ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8002baa:	23c0      	movs	r3, #192	; 0xc0
 8002bac:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	481f      	ldr	r0, [pc, #124]	; (8002c44 <HAL_TIM_MspPostInit+0xf4>)
 8002bc6:	f001 fac9 	bl	800415c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = Motor_3_PWM_Pin|Motor_4_PWM_Pin;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4818      	ldr	r0, [pc, #96]	; (8002c48 <HAL_TIM_MspPostInit+0xf8>)
 8002be6:	f001 fab9 	bl	800415c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
    }

}
 8002bea:	e023      	b.n	8002c34 <HAL_TIM_MspPostInit+0xe4>
    else if(timHandle->Instance==TIM14)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_TIM_MspPostInit+0xfc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d11e      	bne.n	8002c34 <HAL_TIM_MspPostInit+0xe4>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <HAL_TIM_MspPostInit+0xf0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = LED1_Pin;
 8002c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c16:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002c24:	2309      	movs	r3, #9
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4808      	ldr	r0, [pc, #32]	; (8002c50 <HAL_TIM_MspPostInit+0x100>)
 8002c30:	f001 fa94 	bl	800415c <HAL_GPIO_Init>
}
 8002c34:	bf00      	nop
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40002000 	.word	0x40002000
 8002c50:	40021400 	.word	0x40021400

08002c54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <MX_USART1_UART_Init+0x50>)
 8002c5c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c64:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c8c:	f005 fa22 	bl	80080d4 <HAL_UART_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8002c96:	f7fe ff13 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	2000113c 	.word	0x2000113c
 8002ca4:	40011000 	.word	0x40011000

08002ca8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <MX_USART2_UART_Init+0x50>)
 8002cb0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002ce0:	f005 f9f8 	bl	80080d4 <HAL_UART_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8002cea:	f7fe fee9 	bl	8001ac0 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001180 	.word	0x20001180
 8002cf8:	40004400 	.word	0x40004400

08002cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	; 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
    if(uartHandle->Instance==USART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a36      	ldr	r2, [pc, #216]	; (8002df4 <HAL_UART_MspInit+0xf8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d135      	bne.n	8002d8a <HAL_UART_MspInit+0x8e>
    {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
        /**USART1 GPIO Configuration
        PA9         ------> USART1_TX
        PA10         ------> USART1_RX
        */
        GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8002d56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d5a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d68:	2307      	movs	r3, #7
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	4822      	ldr	r0, [pc, #136]	; (8002dfc <HAL_UART_MspInit+0x100>)
 8002d74:	f001 f9f2 	bl	800415c <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	2025      	movs	r0, #37	; 0x25
 8002d7e:	f000 fda8 	bl	80038d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d82:	2025      	movs	r0, #37	; 0x25
 8002d84:	f000 fdc1 	bl	800390a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
    }
}
 8002d88:	e030      	b.n	8002dec <HAL_UART_MspInit+0xf0>
    else if(uartHandle->Instance==USART2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_UART_MspInit+0x104>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12b      	bne.n	8002dec <HAL_UART_MspInit+0xf0>
        __HAL_RCC_USART2_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da2:	6413      	str	r3, [r2, #64]	; 0x40
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_UART_MspInit+0xfc>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dcc:	230c      	movs	r3, #12
 8002dce:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	4619      	mov	r1, r3
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <HAL_UART_MspInit+0x100>)
 8002de8:	f001 f9b8 	bl	800415c <HAL_GPIO_Init>
}
 8002dec:	bf00      	nop
 8002dee:	3730      	adds	r7, #48	; 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40004400 	.word	0x40004400

08002e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e08:	480d      	ldr	r0, [pc, #52]	; (8002e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e0a:	490e      	ldr	r1, [pc, #56]	; (8002e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e10:	e002      	b.n	8002e18 <LoopCopyDataInit>

08002e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e16:	3304      	adds	r3, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e1c:	d3f9      	bcc.n	8002e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e20:	4c0b      	ldr	r4, [pc, #44]	; (8002e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e24:	e001      	b.n	8002e2a <LoopFillZerobss>

08002e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e28:	3204      	adds	r2, #4

08002e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e2c:	d3fb      	bcc.n	8002e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e2e:	f7ff fa1b 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e32:	f00c f8b7 	bl	800efa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e36:	f7fe fab7 	bl	80013a8 <main>
  bx  lr    
 8002e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e44:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 8002e48:	08017ad4 	.word	0x08017ad4
  ldr r2, =_sbss
 8002e4c:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8002e50:	200079b0 	.word	0x200079b0

08002e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC_IRQHandler>
	...

08002e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_Init+0x40>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <HAL_Init+0x40>)
 8002e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_Init+0x40>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <HAL_Init+0x40>)
 8002e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_Init+0x40>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f000 fd1b 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f000 f808 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8c:	f7ff f86a 	bl	8001f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x54>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x58>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fd33 	bl	8003926 <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00e      	b.n	8002ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f000 fcfb 	bl	80038d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <HAL_InitTick+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	20000010 	.word	0x20000010
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x20>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x24>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_IncTick+0x24>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000010 	.word	0x20000010
 8002f20:	200011c4 	.word	0x200011c4

08002f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return uwTick;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_GetTick+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	200011c4 	.word	0x200011c4

08002f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff ffee 	bl	8002f24 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d005      	beq.n	8002f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_Delay+0x44>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f62:	bf00      	nop
 8002f64:	f7ff ffde 	bl	8002f24 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8f7      	bhi.n	8002f64 <HAL_Delay+0x28>
  {
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000010 	.word	0x20000010

08002f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e033      	b.n	8003002 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe f87a 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d118      	bne.n	8002ff4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fca:	f023 0302 	bic.w	r3, r3, #2
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 faa4 	bl	8003524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff2:	e001      	b.n	8002ff8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_ADC_Start+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e0b2      	b.n	800318c <HAL_ADC_Start+0x180>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d018      	beq.n	800306e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800304c:	4b52      	ldr	r3, [pc, #328]	; (8003198 <HAL_ADC_Start+0x18c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_ADC_Start+0x190>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9a      	lsrs	r2, r3, #18
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003060:	e002      	b.n	8003068 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3b01      	subs	r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f9      	bne.n	8003062 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d17a      	bne.n	8003172 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ba:	d106      	bne.n	80030ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f023 0206 	bic.w	r2, r3, #6
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d8:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_ADC_Start+0x194>)
 80030da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d12a      	bne.n	8003148 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2b      	ldr	r2, [pc, #172]	; (80031a4 <HAL_ADC_Start+0x198>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d015      	beq.n	8003128 <HAL_ADC_Start+0x11c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <HAL_ADC_Start+0x19c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d105      	bne.n	8003112 <HAL_ADC_Start+0x106>
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_ADC_Start+0x194>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_ADC_Start+0x1a0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d136      	bne.n	800318a <HAL_ADC_Start+0x17e>
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_ADC_Start+0x194>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d130      	bne.n	800318a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d129      	bne.n	800318a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	e020      	b.n	800318a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <HAL_ADC_Start+0x198>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d11b      	bne.n	800318a <HAL_ADC_Start+0x17e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d114      	bne.n	800318a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	e00b      	b.n	800318a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	20000008 	.word	0x20000008
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	40012300 	.word	0x40012300
 80031a4:	40012000 	.word	0x40012000
 80031a8:	40012100 	.word	0x40012100
 80031ac:	40012200 	.word	0x40012200

080031b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d113      	bne.n	80031f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d10b      	bne.n	80031f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e063      	b.n	80032be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031f6:	f7ff fe95 	bl	8002f24 <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031fc:	e021      	b.n	8003242 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d01d      	beq.n	8003242 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_ADC_PollForConversion+0x6c>
 800320c:	f7ff fe8a 	bl	8002f24 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d212      	bcs.n	8003242 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d00b      	beq.n	8003242 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e03d      	b.n	80032be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d1d6      	bne.n	80031fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0212 	mvn.w	r2, #18
 8003258:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d123      	bne.n	80032bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11f      	bne.n	80032bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1c>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e105      	b.n	8003508 <HAL_ADC_ConfigChannel+0x228>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b09      	cmp	r3, #9
 800330a:	d925      	bls.n	8003358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68d9      	ldr	r1, [r3, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	3b1e      	subs	r3, #30
 8003322:	2207      	movs	r2, #7
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43da      	mvns	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	400a      	ands	r2, r1
 8003330:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68d9      	ldr	r1, [r3, #12]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	4603      	mov	r3, r0
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4403      	add	r3, r0
 800334a:	3b1e      	subs	r3, #30
 800334c:	409a      	lsls	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e022      	b.n	800339e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6919      	ldr	r1, [r3, #16]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	2207      	movs	r2, #7
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6919      	ldr	r1, [r3, #16]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4618      	mov	r0, r3
 800338e:	4603      	mov	r3, r0
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4403      	add	r3, r0
 8003394:	409a      	lsls	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d824      	bhi.n	80033f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	3b05      	subs	r3, #5
 80033b8:	221f      	movs	r2, #31
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	400a      	ands	r2, r1
 80033c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	4618      	mov	r0, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	3b05      	subs	r3, #5
 80033e2:	fa00 f203 	lsl.w	r2, r0, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34
 80033ee:	e04c      	b.n	800348a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d824      	bhi.n	8003442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b23      	subs	r3, #35	; 0x23
 800340a:	221f      	movs	r2, #31
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	4618      	mov	r0, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	3b23      	subs	r3, #35	; 0x23
 8003434:	fa00 f203 	lsl.w	r2, r0, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
 8003440:	e023      	b.n	800348a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	3b41      	subs	r3, #65	; 0x41
 8003454:	221f      	movs	r2, #31
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	4618      	mov	r0, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	3b41      	subs	r3, #65	; 0x41
 800347e:	fa00 f203 	lsl.w	r2, r0, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_ADC_ConfigChannel+0x234>)
 800348c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_ADC_ConfigChannel+0x238>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d109      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1cc>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b12      	cmp	r3, #18
 800349e:	d105      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <HAL_ADC_ConfigChannel+0x238>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d123      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x21e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d003      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x1e6>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b11      	cmp	r3, #17
 80034c4:	d11b      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d111      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_ADC_ConfigChannel+0x23c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_ADC_ConfigChannel+0x240>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0c9a      	lsrs	r2, r3, #18
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034f0:	e002      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f9      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40012300 	.word	0x40012300
 8003518:	40012000 	.word	0x40012000
 800351c:	20000008 	.word	0x20000008
 8003520:	431bde83 	.word	0x431bde83

08003524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352c:	4b79      	ldr	r3, [pc, #484]	; (8003714 <ADC_Init+0x1f0>)
 800352e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800357c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	4a58      	ldr	r2, [pc, #352]	; (8003718 <ADC_Init+0x1f4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d022      	beq.n	8003602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	e00f      	b.n	8003622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0202 	bic.w	r2, r2, #2
 8003630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7e1b      	ldrb	r3, [r3, #24]
 800363c:	005a      	lsls	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800366e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	3b01      	subs	r3, #1
 800367c:	035a      	lsls	r2, r3, #13
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	e007      	b.n	8003698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	051a      	lsls	r2, r3, #20
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036da:	025a      	lsls	r2, r3, #9
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6899      	ldr	r1, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	029a      	lsls	r2, r3, #10
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40012300 	.word	0x40012300
 8003718:	0f000001 	.word	0x0f000001

0800371c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003738:	4013      	ands	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374e:	4a04      	ldr	r2, [pc, #16]	; (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	60d3      	str	r3, [r2, #12]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <__NVIC_GetPriorityGrouping+0x18>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 0307 	and.w	r3, r3, #7
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	db0b      	blt.n	80037aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4907      	ldr	r1, [pc, #28]	; (80037b8 <__NVIC_EnableIRQ+0x38>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2001      	movs	r0, #1
 80037a2:	fa00 f202 	lsl.w	r2, r0, r2
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000e100 	.word	0xe000e100

080037bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db0a      	blt.n	80037e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <__NVIC_SetPriority+0x4c>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	440b      	add	r3, r1
 80037e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e4:	e00a      	b.n	80037fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <__NVIC_SetPriority+0x50>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3b04      	subs	r3, #4
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	761a      	strb	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f1c3 0307 	rsb	r3, r3, #7
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf28      	it	cs
 800382e:	2304      	movcs	r3, #4
 8003830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3304      	adds	r3, #4
 8003836:	2b06      	cmp	r3, #6
 8003838:	d902      	bls.n	8003840 <NVIC_EncodePriority+0x30>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3b03      	subs	r3, #3
 800383e:	e000      	b.n	8003842 <NVIC_EncodePriority+0x32>
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	401a      	ands	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003858:	f04f 31ff 	mov.w	r1, #4294967295
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43d9      	mvns	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	4313      	orrs	r3, r2
         );
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f7ff ff8e 	bl	80037bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff29 	bl	800371c <__NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff3e 	bl	8003764 <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff8e 	bl	8003810 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5d 	bl	80037bc <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff31 	bl	8003780 <__NVIC_EnableIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ffa2 	bl	8003878 <SysTick_Config>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7ff faea 	bl	8002f24 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e099      	b.n	8003a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397c:	e00f      	b.n	800399e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397e:	f7ff fad1 	bl	8002f24 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b05      	cmp	r3, #5
 800398a:	d908      	bls.n	800399e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e078      	b.n	8003a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e8      	bne.n	800397e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <HAL_DMA_Init+0x158>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4313      	orrs	r3, r2
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d117      	bne.n	8003a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb0d 	bl	8004064 <DMA_CheckFifoParam>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e016      	b.n	8003a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fac4 	bl	8003ff8 <DMA_CalcBaseAndBitshift>
 8003a70:	4603      	mov	r3, r0
 8003a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	223f      	movs	r2, #63	; 0x3f
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	f010803f 	.word	0xf010803f

08003a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_DMA_Start_IT+0x26>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e040      	b.n	8003b44 <HAL_DMA_Start_IT+0xa8>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d12f      	bne.n	8003b36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fa56 	bl	8003f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	223f      	movs	r2, #63	; 0x3f
 8003af6:	409a      	lsls	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0216 	orr.w	r2, r2, #22
 8003b0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e005      	b.n	8003b42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b5a:	f7ff f9e3 	bl	8002f24 <HAL_GetTick>
 8003b5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d008      	beq.n	8003b7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e052      	b.n	8003c24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0216 	bic.w	r2, r2, #22
 8003b8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_DMA_Abort+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0208 	bic.w	r2, r2, #8
 8003bbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bce:	e013      	b.n	8003bf8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd0:	f7ff f9a8 	bl	8002f24 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d90c      	bls.n	8003bf8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2203      	movs	r2, #3
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e015      	b.n	8003c24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e4      	bne.n	8003bd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	223f      	movs	r2, #63	; 0x3f
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d004      	beq.n	8003c4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00c      	b.n	8003c64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2205      	movs	r2, #5
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c7c:	4b8e      	ldr	r3, [pc, #568]	; (8003eb8 <HAL_DMA_IRQHandler+0x248>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a8e      	ldr	r2, [pc, #568]	; (8003ebc <HAL_DMA_IRQHandler+0x24c>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01a      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0204 	bic.w	r2, r2, #4
 8003cc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	2208      	movs	r2, #8
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	2204      	movs	r2, #4
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	2204      	movs	r2, #4
 8003d36:	409a      	lsls	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d043      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03c      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
 8003d9e:	e01f      	b.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e016      	b.n	8003de0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0208 	bic.w	r2, r2, #8
 8003dce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	2220      	movs	r2, #32
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 808f 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8087 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2220      	movs	r2, #32
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d136      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0216 	bic.w	r2, r2, #22
 8003e28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x1da>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	223f      	movs	r2, #63	; 0x3f
 8003e60:	409a      	lsls	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d07e      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
        }
        return;
 8003e86:	e079      	b.n	8003f7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
 8003eb4:	e02c      	b.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
 8003eb6:	bf00      	nop
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
 8003ed0:	e01e      	b.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0210 	bic.w	r2, r2, #16
 8003eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d032      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2205      	movs	r2, #5
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d307      	bcc.n	8003f58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f2      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x2cc>
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	e000      	b.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f7c:	bf00      	nop
    }
  }
}
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d108      	bne.n	8003fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fda:	e007      	b.n	8003fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	3b10      	subs	r3, #16
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <DMA_CalcBaseAndBitshift+0x64>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004012:	4a13      	ldr	r2, [pc, #76]	; (8004060 <DMA_CalcBaseAndBitshift+0x68>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d909      	bls.n	800403a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
 8004038:	e007      	b.n	800404a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	aaaaaaab 	.word	0xaaaaaaab
 8004060:	08013f48 	.word	0x08013f48

08004064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11f      	bne.n	80040be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d856      	bhi.n	8004132 <DMA_CheckFifoParam+0xce>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <DMA_CheckFifoParam+0x28>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040af 	.word	0x080040af
 8004094:	0800409d 	.word	0x0800409d
 8004098:	08004133 	.word	0x08004133
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d046      	beq.n	8004136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e043      	b.n	8004136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040b6:	d140      	bne.n	800413a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040bc:	e03d      	b.n	800413a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d121      	bne.n	800410c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d837      	bhi.n	800413e <DMA_CheckFifoParam+0xda>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <DMA_CheckFifoParam+0x70>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040eb 	.word	0x080040eb
 80040dc:	080040e5 	.word	0x080040e5
 80040e0:	080040fd 	.word	0x080040fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e030      	b.n	800414c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d025      	beq.n	8004142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fa:	e022      	b.n	8004142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004104:	d11f      	bne.n	8004146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800410a:	e01c      	b.n	8004146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d903      	bls.n	800411a <DMA_CheckFifoParam+0xb6>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d003      	beq.n	8004120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004118:	e018      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      break;
 800411e:	e015      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00e      	beq.n	800414a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e00b      	b.n	800414a <DMA_CheckFifoParam+0xe6>
      break;
 8004132:	bf00      	nop
 8004134:	e00a      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
 8004138:	e008      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
 800413c:	e006      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800413e:	bf00      	nop
 8004140:	e004      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;   
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800414a:	bf00      	nop
    }
  } 
  
  return status; 
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e16b      	b.n	8004450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004178:	2201      	movs	r2, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 815a 	bne.w	800444a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d005      	beq.n	80041ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d130      	bne.n	8004210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0201 	and.w	r2, r3, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b03      	cmp	r3, #3
 800421a:	d017      	beq.n	800424c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d123      	bne.n	80042a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	220f      	movs	r2, #15
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	08da      	lsrs	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3208      	adds	r2, #8
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80b4 	beq.w	800444a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b60      	ldr	r3, [pc, #384]	; (8004468 <HAL_GPIO_Init+0x30c>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a5f      	ldr	r2, [pc, #380]	; (8004468 <HAL_GPIO_Init+0x30c>)
 80042ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <HAL_GPIO_Init+0x30c>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fe:	4a5b      	ldr	r2, [pc, #364]	; (800446c <HAL_GPIO_Init+0x310>)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	3302      	adds	r3, #2
 8004306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	220f      	movs	r2, #15
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a52      	ldr	r2, [pc, #328]	; (8004470 <HAL_GPIO_Init+0x314>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02b      	beq.n	8004382 <HAL_GPIO_Init+0x226>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a51      	ldr	r2, [pc, #324]	; (8004474 <HAL_GPIO_Init+0x318>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d025      	beq.n	800437e <HAL_GPIO_Init+0x222>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a50      	ldr	r2, [pc, #320]	; (8004478 <HAL_GPIO_Init+0x31c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01f      	beq.n	800437a <HAL_GPIO_Init+0x21e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4f      	ldr	r2, [pc, #316]	; (800447c <HAL_GPIO_Init+0x320>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d019      	beq.n	8004376 <HAL_GPIO_Init+0x21a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a4e      	ldr	r2, [pc, #312]	; (8004480 <HAL_GPIO_Init+0x324>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_GPIO_Init+0x216>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a4d      	ldr	r2, [pc, #308]	; (8004484 <HAL_GPIO_Init+0x328>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00d      	beq.n	800436e <HAL_GPIO_Init+0x212>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a4c      	ldr	r2, [pc, #304]	; (8004488 <HAL_GPIO_Init+0x32c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <HAL_GPIO_Init+0x20e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a4b      	ldr	r2, [pc, #300]	; (800448c <HAL_GPIO_Init+0x330>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_GPIO_Init+0x20a>
 8004362:	2307      	movs	r3, #7
 8004364:	e00e      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004366:	2308      	movs	r3, #8
 8004368:	e00c      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800436a:	2306      	movs	r3, #6
 800436c:	e00a      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800436e:	2305      	movs	r3, #5
 8004370:	e008      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004372:	2304      	movs	r3, #4
 8004374:	e006      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004376:	2303      	movs	r3, #3
 8004378:	e004      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800437a:	2302      	movs	r3, #2
 800437c:	e002      	b.n	8004384 <HAL_GPIO_Init+0x228>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_GPIO_Init+0x228>
 8004382:	2300      	movs	r3, #0
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	f002 0203 	and.w	r2, r2, #3
 800438a:	0092      	lsls	r2, r2, #2
 800438c:	4093      	lsls	r3, r2
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004394:	4935      	ldr	r1, [pc, #212]	; (800446c <HAL_GPIO_Init+0x310>)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	3302      	adds	r3, #2
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_GPIO_Init+0x334>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <HAL_GPIO_Init+0x334>)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_GPIO_Init+0x334>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043f0:	4a27      	ldr	r2, [pc, #156]	; (8004490 <HAL_GPIO_Init+0x334>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <HAL_GPIO_Init+0x334>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_GPIO_Init+0x334>)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_GPIO_Init+0x334>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <HAL_GPIO_Init+0x334>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3301      	adds	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	f67f ae90 	bls.w	8004178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	40013800 	.word	0x40013800
 8004470:	40020000 	.word	0x40020000
 8004474:	40020400 	.word	0x40020400
 8004478:	40020800 	.word	0x40020800
 800447c:	40020c00 	.word	0x40020c00
 8004480:	40021000 	.word	0x40021000
 8004484:	40021400 	.word	0x40021400
 8004488:	40021800 	.word	0x40021800
 800448c:	40021c00 	.word	0x40021c00
 8004490:	40013c00 	.word	0x40013c00

08004494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e001      	b.n	80044b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
 80044d0:	4613      	mov	r3, r2
 80044d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d4:	787b      	ldrb	r3, [r7, #1]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044e0:	e003      	b.n	80044ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	041a      	lsls	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	619a      	str	r2, [r3, #24]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd faba 	bl	8001a90 <HAL_GPIO_EXTI_Callback>
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40013c00 	.word	0x40013c00

08004528 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004532:	f043 0302 	orr.w	r3, r3, #2
 8004536:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	4a05      	ldr	r2, [pc, #20]	; (8004554 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004544:	bf30      	wfi
}
 8004546:	bf00      	nop
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40007000 	.word	0x40007000
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e267      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d075      	beq.n	8004662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00c      	beq.n	800459c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4b85      	ldr	r3, [pc, #532]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458a:	2b08      	cmp	r3, #8
 800458c:	d112      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b82      	ldr	r3, [pc, #520]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05b      	beq.n	8004660 <HAL_RCC_OscConfig+0x108>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d157      	bne.n	8004660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e242      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x74>
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x98>
 80045d6:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6f      	ldr	r2, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6c      	ldr	r2, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045f0:	4b69      	ldr	r3, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a68      	ldr	r2, [pc, #416]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a65      	ldr	r2, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fe fc88 	bl	8002f24 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004618:	f7fe fc84 	bl	8002f24 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e207      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xc0>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fe fc74 	bl	8002f24 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004640:	f7fe fc70 	bl	8002f24 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1f3      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	4b51      	ldr	r3, [pc, #324]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0xe8>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d063      	beq.n	8004736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b44      	ldr	r3, [pc, #272]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1c7      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4937      	ldr	r1, [pc, #220]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	e03a      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d020      	beq.n	800470a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c8:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x244>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fe fc29 	bl	8002f24 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fe fc25 	bl	8002f24 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1a8      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4925      	ldr	r1, [pc, #148]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	e015      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x244>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fe fc08 	bl	8002f24 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004718:	f7fe fc04 	bl	8002f24 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e187      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d036      	beq.n	80047b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCC_OscConfig+0x248>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fe fbe8 	bl	8002f24 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7fe fbe4 	bl	8002f24 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e167      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x200>
 8004776:	e01b      	b.n	80047b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_OscConfig+0x248>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fe fbd1 	bl	8002f24 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	e00e      	b.n	80047a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004786:	f7fe fbcd 	bl	8002f24 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d907      	bls.n	80047a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e150      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 8004798:	40023800 	.word	0x40023800
 800479c:	42470000 	.word	0x42470000
 80047a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ea      	bne.n	8004786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8097 	beq.w	80048ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4b81      	ldr	r3, [pc, #516]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	4b7d      	ldr	r3, [pc, #500]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a7c      	ldr	r2, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b7a      	ldr	r3, [pc, #488]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b77      	ldr	r3, [pc, #476]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d118      	bne.n	800482c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fa:	4b74      	ldr	r3, [pc, #464]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a73      	ldr	r2, [pc, #460]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004806:	f7fe fb8d 	bl	8002f24 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7fe fb89 	bl	8002f24 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e10c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x2ea>
 8004834:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	e01c      	b.n	800487c <HAL_RCC_OscConfig+0x324>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x30c>
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a5e      	ldr	r2, [pc, #376]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0x324>
 8004864:	4b58      	ldr	r3, [pc, #352]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	4a57      	ldr	r2, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	6713      	str	r3, [r2, #112]	; 0x70
 8004870:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a54      	ldr	r2, [pc, #336]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe fb4e 	bl	8002f24 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fe fb4a 	bl	8002f24 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0cb      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	4b49      	ldr	r3, [pc, #292]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ee      	beq.n	800488c <HAL_RCC_OscConfig+0x334>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b0:	f7fe fb38 	bl	8002f24 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fe fb34 	bl	8002f24 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0b5      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ce:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ee      	bne.n	80048b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4a38      	ldr	r2, [pc, #224]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80a1 	beq.w	8004a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f6:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d05c      	beq.n	80049bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d141      	bne.n	800498e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fe fb08 	bl	8002f24 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fe fb04 	bl	8002f24 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e087      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	3b01      	subs	r3, #1
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	491b      	ldr	r1, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fe fadd 	bl	8002f24 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496e:	f7fe fad9 	bl	8002f24 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e05c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x416>
 800498c:	e054      	b.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fe fac6 	bl	8002f24 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499c:	f7fe fac2 	bl	8002f24 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e045      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x444>
 80049ba:	e03d      	b.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e038      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40007000 	.word	0x40007000
 80049d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x4ec>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d028      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d121      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d11a      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d111      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800

08004a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0cc      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d90c      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0b8      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a9c:	4b59      	ldr	r3, [pc, #356]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab4:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	494d      	ldr	r1, [pc, #308]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d044      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d119      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e067      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4934      	ldr	r1, [pc, #208]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b38:	f7fe f9f4 	bl	8002f24 <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fe f9f0 	bl	8002f24 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e04f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 020c 	and.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1eb      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d20c      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e032      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4916      	ldr	r1, [pc, #88]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	490e      	ldr	r1, [pc, #56]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bce:	f000 f821 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	490a      	ldr	r1, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	5ccb      	ldrb	r3, [r1, r3]
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe f954 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023c00 	.word	0x40023c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	08013f30 	.word	0x08013f30
 8004c0c:	20000008 	.word	0x20000008
 8004c10:	2000000c 	.word	0x2000000c

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c18:	b094      	sub	sp, #80	; 0x50
 8004c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c20:	2300      	movs	r3, #0
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c24:	2300      	movs	r3, #0
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2c:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d00d      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x40>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	f200 80e1 	bhi.w	8004e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x34>
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c46:	e0db      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b73      	ldr	r3, [pc, #460]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c4c:	e0db      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4e:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c52:	e0d8      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c54:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5e:	4b6d      	ldr	r3, [pc, #436]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d063      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	2200      	movs	r2, #0
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	0159      	lsls	r1, r3, #5
 8004c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c98:	0150      	lsls	r0, r2, #5
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	1a51      	subs	r1, r2, r1
 8004ca2:	6139      	str	r1, [r7, #16]
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb8:	4659      	mov	r1, fp
 8004cba:	018b      	lsls	r3, r1, #6
 8004cbc:	4651      	mov	r1, sl
 8004cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	018a      	lsls	r2, r1, #6
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ccc:	4659      	mov	r1, fp
 8004cce:	eb63 0901 	sbc.w	r9, r3, r1
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	eb18 0303 	adds.w	r3, r8, r3
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	462b      	mov	r3, r5
 8004cf4:	eb49 0303 	adc.w	r3, r9, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d06:	4629      	mov	r1, r5
 8004d08:	024b      	lsls	r3, r1, #9
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d10:	4621      	mov	r1, r4
 8004d12:	024a      	lsls	r2, r1, #9
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d24:	f7fb ffb0 	bl	8000c88 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	e058      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	0159      	lsls	r1, r3, #5
 8004d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5e:	0150      	lsls	r0, r2, #5
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4641      	mov	r1, r8
 8004d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d84:	ebb2 040a 	subs.w	r4, r2, sl
 8004d88:	eb63 050b 	sbc.w	r5, r3, fp
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	00eb      	lsls	r3, r5, #3
 8004d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9a:	00e2      	lsls	r2, r4, #3
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	461d      	mov	r5, r3
 8004da0:	4643      	mov	r3, r8
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	464b      	mov	r3, r9
 8004da8:	eb45 0303 	adc.w	r3, r5, r3
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	028b      	lsls	r3, r1, #10
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	028a      	lsls	r2, r1, #10
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	61fa      	str	r2, [r7, #28]
 8004dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd8:	f7fb ff56 	bl	8000c88 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4613      	mov	r3, r2
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	3301      	adds	r3, #1
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dfe:	e002      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3750      	adds	r7, #80	; 0x50
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	007a1200 	.word	0x007a1200

08004e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000008 	.word	0x20000008

08004e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e3c:	f7ff fff0 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0a9b      	lsrs	r3, r3, #10
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4903      	ldr	r1, [pc, #12]	; (8004e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	08013f40 	.word	0x08013f40

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e64:	f7ff ffdc 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0b5b      	lsrs	r3, r3, #13
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08013f40 	.word	0x08013f40

08004e88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e022      	b.n	8004ee0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fc fe2f 	bl	8001b10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f814 	bl	8004ee8 <HAL_SD_InitCard>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e00a      	b.n	8004ee0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b08e      	sub	sp, #56	; 0x38
 8004eec:	af04      	add	r7, sp, #16
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004f04:	2376      	movs	r3, #118	; 0x76
 8004f06:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681d      	ldr	r5, [r3, #0]
 8004f0c:	466c      	mov	r4, sp
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f20:	4628      	mov	r0, r5
 8004f22:	f004 f94f 	bl	80091c4 <SDIO_Init>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e04f      	b.n	8004fd8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004f38:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <HAL_SD_InitCard+0xf8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 f987 	bl	8009256 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004f48:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <HAL_SD_InitCard+0xf8>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004f4e:	2002      	movs	r0, #2
 8004f50:	f7fd fff4 	bl	8002f3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 f805 	bl	8005f64 <SD_PowerON>
 8004f5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e02e      	b.n	8004fd8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 ff24 	bl	8005dc8 <SD_InitCard>
 8004f80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01b      	b.n	8004fd8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f004 f9e6 	bl	800937a <SDMMC_CmdBlockLength>
 8004fae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00f      	beq.n	8004fd6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <HAL_SD_InitCard+0xfc>)
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe0:	422580a0 	.word	0x422580a0
 8004fe4:	004005ff 	.word	0x004005ff

08004fe8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0c0      	b.n	8005192 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 80b9 	bne.w	8005190 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	441a      	add	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502e:	429a      	cmp	r2, r3
 8005030:	d907      	bls.n	8005042 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0a7      	b.n	8005192 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2203      	movs	r2, #3
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005060:	f043 0302 	orr.w	r3, r3, #2
 8005064:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	4a4c      	ldr	r2, [pc, #304]	; (800519c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	4a4b      	ldr	r2, [pc, #300]	; (80051a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005074:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2200      	movs	r2, #0
 800507c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2200      	movs	r2, #0
 8005084:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3380      	adds	r3, #128	; 0x80
 80050ac:	4619      	mov	r1, r3
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	025b      	lsls	r3, r3, #9
 80050b4:	089b      	lsrs	r3, r3, #2
 80050b6:	f7fe fcf1 	bl	8003a9c <HAL_DMA_Start_IT>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d017      	beq.n	80050f0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e050      	b.n	8005192 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d002      	beq.n	8005104 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	025b      	lsls	r3, r3, #9
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	025b      	lsls	r3, r3, #9
 800510e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005110:	2390      	movs	r3, #144	; 0x90
 8005112:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005114:	2302      	movs	r3, #2
 8005116:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005118:	2300      	movs	r3, #0
 800511a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800511c:	2301      	movs	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f107 0210 	add.w	r2, r7, #16
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f004 f8f9 	bl	8009322 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d90a      	bls.n	800514c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2282      	movs	r2, #130	; 0x82
 800513a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005142:	4618      	mov	r0, r3
 8005144:	f004 f95d 	bl	8009402 <SDMMC_CmdReadMultiBlock>
 8005148:	62f8      	str	r0, [r7, #44]	; 0x2c
 800514a:	e009      	b.n	8005160 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2281      	movs	r2, #129	; 0x81
 8005150:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005158:	4618      	mov	r0, r3
 800515a:	f004 f930 	bl	80093be <SDMMC_CmdReadSingleBlock>
 800515e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d012      	beq.n	800518c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a0e      	ldr	r2, [pc, #56]	; (80051a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e002      	b.n	8005192 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3730      	adds	r7, #48	; 0x30
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	08005bd7 	.word	0x08005bd7
 80051a0:	08005c49 	.word	0x08005c49
 80051a4:	004005ff 	.word	0x004005ff
 80051a8:	4225858c 	.word	0x4225858c

080051ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d107      	bne.n	80051d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0c5      	b.n	8005360 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 80be 	bne.w	800535e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80051e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d907      	bls.n	8005206 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0ac      	b.n	8005360 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2203      	movs	r2, #3
 800520a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	4a4e      	ldr	r2, [pc, #312]	; (8005368 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	4a4d      	ldr	r2, [pc, #308]	; (800536c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005238:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2200      	movs	r2, #0
 8005240:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	2b01      	cmp	r3, #1
 8005248:	d002      	beq.n	8005250 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	025b      	lsls	r3, r3, #9
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d90a      	bls.n	800526c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	22a0      	movs	r2, #160	; 0xa0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005262:	4618      	mov	r0, r3
 8005264:	f004 f911 	bl	800948a <SDMMC_CmdWriteMultiBlock>
 8005268:	62f8      	str	r0, [r7, #44]	; 0x2c
 800526a:	e009      	b.n	8005280 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2290      	movs	r2, #144	; 0x90
 8005270:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005278:	4618      	mov	r0, r3
 800527a:	f004 f8e4 	bl	8009446 <SDMMC_CmdWriteSingleBlock>
 800527e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d012      	beq.n	80052ac <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a39      	ldr	r2, [pc, #228]	; (8005370 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e059      	b.n	8005360 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80052ac:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3380      	adds	r3, #128	; 0x80
 80052e2:	461a      	mov	r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	025b      	lsls	r3, r3, #9
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	f7fe fbd7 	bl	8003a9c <HAL_DMA_Start_IT>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01c      	beq.n	800532e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8005302:	f023 0302 	bic.w	r3, r3, #2
 8005306:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a18      	ldr	r2, [pc, #96]	; (8005370 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e018      	b.n	8005360 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	025b      	lsls	r3, r3, #9
 8005338:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800533a:	2390      	movs	r3, #144	; 0x90
 800533c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005342:	2300      	movs	r3, #0
 8005344:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005346:	2301      	movs	r3, #1
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f107 0210 	add.w	r2, r7, #16
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f003 ffe4 	bl	8009322 <SDIO_ConfigData>

      return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e000      	b.n	8005360 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
  }
}
 8005360:	4618      	mov	r0, r3
 8005362:	3730      	adds	r7, #48	; 0x30
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	08005bad 	.word	0x08005bad
 800536c:	08005c49 	.word	0x08005c49
 8005370:	004005ff 	.word	0x004005ff
 8005374:	4225858c 	.word	0x4225858c

08005378 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_SD_IRQHandler+0x2e>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 ffff 	bl	80063a2 <SD_Read_IT>
 80053a4:	e165      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 808f 	beq.w	80054d4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053be:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80053ce:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80053d2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d039      	beq.n	8005462 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_SD_IRQHandler+0x8a>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 f862 	bl	80094d0 <SDMMC_CmdStopTransfer>
 800540c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f92f 	bl	8005684 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f240 523a 	movw	r2, #1338	; 0x53a
 800542e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_SD_IRQHandler+0xda>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f004 fcd6 	bl	8009e04 <HAL_SD_RxCpltCallback>
 8005458:	e10b      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f004 fcc8 	bl	8009df0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005460:	e107      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8102 	beq.w	8005672 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d011      	beq.n	800549c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f004 f827 	bl	80094d0 <SDMMC_CmdStopTransfer>
 8005482:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8f4 	bl	8005684 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 80e5 	bne.w	8005672 <HAL_SD_IRQHandler+0x2fa>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 80df 	bne.w	8005672 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0208 	bic.w	r2, r2, #8
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f004 fc8f 	bl	8009df0 <HAL_SD_TxCpltCallback>
}
 80054d2:	e0ce      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_SD_IRQHandler+0x17c>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 ffa9 	bl	8006444 <SD_Write_IT>
 80054f2:	e0be      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fa:	f240 233a 	movw	r3, #570	; 0x23a
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80b6 	beq.w	8005672 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	f043 0202 	orr.w	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	f043 0208 	orr.w	r2, r3, #8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f043 0210 	orr.w	r2, r3, #16
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	f043 0208 	orr.w	r2, r3, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f240 723a 	movw	r2, #1850	; 0x73a
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80055a0:	f023 0302 	bic.w	r3, r3, #2
 80055a4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f003 ff90 	bl	80094d0 <SDMMC_CmdStopTransfer>
 80055b0:	4602      	mov	r2, r0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f855 	bl	8005684 <HAL_SD_ErrorCallback>
}
 80055da:	e04a      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d045      	beq.n	8005672 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <HAL_SD_IRQHandler+0x282>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d011      	beq.n	800561e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	4a1f      	ldr	r2, [pc, #124]	; (800567c <HAL_SD_IRQHandler+0x304>)
 8005600:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fb10 	bl	8003c2c <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02f      	beq.n	8005672 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fb68 	bl	8005cec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800561c:	e029      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <HAL_SD_IRQHandler+0x2ba>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	4a12      	ldr	r2, [pc, #72]	; (8005680 <HAL_SD_IRQHandler+0x308>)
 8005638:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe faf4 	bl	8003c2c <HAL_DMA_Abort_IT>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d013      	beq.n	8005672 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb83 	bl	8005d5a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005654:	e00d      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f004 fbb6 	bl	8009ddc <HAL_SD_AbortCallback>
}
 8005670:	e7ff      	b.n	8005672 <HAL_SD_IRQHandler+0x2fa>
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	08005ced 	.word	0x08005ced
 8005680:	08005d5b 	.word	0x08005d5b

08005684 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a6:	0f9b      	lsrs	r3, r3, #30
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056b2:	0e9b      	lsrs	r3, r3, #26
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c4:	0e1b      	lsrs	r3, r3, #24
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d6:	0c1b      	lsrs	r3, r3, #16
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f8:	0d1b      	lsrs	r3, r3, #20
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	b2da      	uxtb	r2, r3
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005716:	0bdb      	lsrs	r3, r3, #15
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	b2da      	uxtb	r2, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005728:	0b9b      	lsrs	r3, r3, #14
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800573a:	0b5b      	lsrs	r3, r3, #13
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	b2da      	uxtb	r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574c:	0b1b      	lsrs	r3, r3, #12
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	2b00      	cmp	r3, #0
 8005766:	d163      	bne.n	8005830 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576c:	009a      	lsls	r2, r3, #2
 800576e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005772:	4013      	ands	r3, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005778:	0f92      	lsrs	r2, r2, #30
 800577a:	431a      	orrs	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005784:	0edb      	lsrs	r3, r3, #27
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	b2da      	uxtb	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005796:	0e1b      	lsrs	r3, r3, #24
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a8:	0d5b      	lsrs	r3, r3, #21
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ba:	0c9b      	lsrs	r3, r3, #18
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057cc:	0bdb      	lsrs	r3, r3, #15
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	7e1b      	ldrb	r3, [r3, #24]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	3302      	adds	r3, #2
 80057f0:	2201      	movs	r2, #1
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80057fa:	fb03 f202 	mul.w	r2, r3, r2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	7a1b      	ldrb	r3, [r3, #8]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	2201      	movs	r2, #1
 800580e:	409a      	lsls	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800581c:	0a52      	lsrs	r2, r2, #9
 800581e:	fb03 f202 	mul.w	r2, r3, r2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	661a      	str	r2, [r3, #96]	; 0x60
 800582e:	e031      	b.n	8005894 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	2b01      	cmp	r3, #1
 8005836:	d11d      	bne.n	8005874 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	431a      	orrs	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	3301      	adds	r3, #1
 8005854:	029a      	lsls	r2, r3, #10
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	661a      	str	r2, [r3, #96]	; 0x60
 8005872:	e00f      	b.n	8005894 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a58      	ldr	r2, [pc, #352]	; (80059dc <HAL_SD_GetCardCSD+0x344>)
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e09d      	b.n	80059d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005898:	0b9b      	lsrs	r3, r3, #14
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	0fdb      	lsrs	r3, r3, #31
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	0f5b      	lsrs	r3, r3, #29
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	0e9b      	lsrs	r3, r3, #26
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	0d9b      	lsrs	r3, r3, #22
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	b2da      	uxtb	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	0d5b      	lsrs	r3, r3, #21
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	b2da      	uxtb	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	0bdb      	lsrs	r3, r3, #15
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	b2da      	uxtb	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	0b9b      	lsrs	r3, r3, #14
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	0b5b      	lsrs	r3, r3, #13
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	0b1b      	lsrs	r3, r3, #12
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	b2da      	uxtb	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	0a9b      	lsrs	r3, r3, #10
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	004005ff 	.word	0x004005ff

080059e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	b08e      	sub	sp, #56	; 0x38
 8005a3c:	af04      	add	r7, sp, #16
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d02e      	beq.n	8005ab6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d106      	bne.n	8005a6e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a6c:	e029      	b.n	8005ac2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a74:	d10a      	bne.n	8005a8c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fb2a 	bl	80060d0 <SD_WideBus_Enable>
 8005a7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
 8005a8a:	e01a      	b.n	8005ac2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fb67 	bl	8006166 <SD_WideBus_Disable>
 8005a98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8005aa6:	e00c      	b.n	8005ac2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ab4:	e005      	b.n	8005ac2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ae0:	e01f      	b.n	8005b22 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681d      	ldr	r5, [r3, #0]
 8005b08:	466c      	mov	r4, sp
 8005b0a:	f107 0314 	add.w	r3, r7, #20
 8005b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f003 fb51 	bl	80091c4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f003 fc25 	bl	800937a <SDMMC_CmdBlockLength>
 8005b30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00c      	beq.n	8005b52 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bdb0      	pop	{r4, r5, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	004005ff 	.word	0x004005ff

08005b6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa7e 	bl	8006080 <SD_SendStatus>
 8005b84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ba2:	693b      	ldr	r3, [r7, #16]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	2b82      	cmp	r3, #130	; 0x82
 8005bea:	d111      	bne.n	8005c10 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f003 fc6d 	bl	80094d0 <SDMMC_CmdStopTransfer>
 8005bf6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff fd3a 	bl	8005684 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0208 	bic.w	r2, r2, #8
 8005c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f004 f8e3 	bl	8009e04 <HAL_SD_RxCpltCallback>
#endif
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fe f994 	bl	8003f84 <HAL_DMA_GetError>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d03e      	beq.n	8005ce0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d002      	beq.n	8005c7e <SD_DMAError+0x36>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d12d      	bne.n	8005cda <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <SD_DMAError+0xa0>)
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005ca2:	6978      	ldr	r0, [r7, #20]
 8005ca4:	f7ff ff62 	bl	8005b6c <HAL_SD_GetCardState>
 8005ca8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b06      	cmp	r3, #6
 8005cae:	d002      	beq.n	8005cb6 <SD_DMAError+0x6e>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d10a      	bne.n	8005ccc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f003 fc08 	bl	80094d0 <SDMMC_CmdStopTransfer>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005cda:	6978      	ldr	r0, [r7, #20]
 8005cdc:	f7ff fcd2 	bl	8005684 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	004005ff 	.word	0x004005ff

08005cec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff ff31 	bl	8005b6c <HAL_SD_GetCardState>
 8005d0a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d002      	beq.n	8005d26 <SD_DMATxAbort+0x3a>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d10a      	bne.n	8005d3c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f003 fbd0 	bl	80094d0 <SDMMC_CmdStopTransfer>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f004 f849 	bl	8009ddc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005d4a:	e002      	b.n	8005d52 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff fc99 	bl	8005684 <HAL_SD_ErrorCallback>
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d70:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fefa 	bl	8005b6c <HAL_SD_GetCardState>
 8005d78:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d002      	beq.n	8005d94 <SD_DMARxAbort+0x3a>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b05      	cmp	r3, #5
 8005d92:	d10a      	bne.n	8005daa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f003 fb99 	bl	80094d0 <SDMMC_CmdStopTransfer>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f004 f812 	bl	8009ddc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005db8:	e002      	b.n	8005dc0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff fc62 	bl	8005684 <HAL_SD_ErrorCallback>
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b094      	sub	sp, #80	; 0x50
 8005dcc:	af04      	add	r7, sp, #16
 8005dce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f003 fa4a 	bl	8009272 <SDIO_GetPowerState>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005de4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005de8:	e0b8      	b.n	8005f5c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d02f      	beq.n	8005e52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fc74 	bl	80096e4 <SDMMC_CmdSendCID>
 8005dfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <SD_InitCard+0x40>
    {
      return errorstate;
 8005e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e06:	e0a9      	b.n	8005f5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f003 fa74 	bl	80092fc <SDIO_GetResponse>
 8005e14:	4602      	mov	r2, r0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2104      	movs	r1, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f003 fa6b 	bl	80092fc <SDIO_GetResponse>
 8005e26:	4602      	mov	r2, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2108      	movs	r1, #8
 8005e32:	4618      	mov	r0, r3
 8005e34:	f003 fa62 	bl	80092fc <SDIO_GetResponse>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	210c      	movs	r1, #12
 8005e44:	4618      	mov	r0, r3
 8005e46:	f003 fa59 	bl	80092fc <SDIO_GetResponse>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d00d      	beq.n	8005e76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f107 020e 	add.w	r2, r7, #14
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f003 fc7a 	bl	800975e <SDMMC_CmdSetRelAdd>
 8005e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <SD_InitCard+0xae>
    {
      return errorstate;
 8005e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e74:	e072      	b.n	8005f5c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d036      	beq.n	8005eec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8e:	041b      	lsls	r3, r3, #16
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f003 fc44 	bl	8009720 <SDMMC_CmdSendCSD>
 8005e98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	e05b      	b.n	8005f5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f003 fa26 	bl	80092fc <SDIO_GetResponse>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2104      	movs	r1, #4
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f003 fa1d 	bl	80092fc <SDIO_GetResponse>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2108      	movs	r1, #8
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f003 fa14 	bl	80092fc <SDIO_GetResponse>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	210c      	movs	r1, #12
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f003 fa0b 	bl	80092fc <SDIO_GetResponse>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2104      	movs	r1, #4
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f003 fa02 	bl	80092fc <SDIO_GetResponse>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	0d1a      	lsrs	r2, r3, #20
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005f00:	f107 0310 	add.w	r3, r7, #16
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fbc6 	bl	8005698 <HAL_SD_GetCardCSD>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f16:	e021      	b.n	8005f5c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	2200      	movs	r2, #0
 8005f24:	461c      	mov	r4, r3
 8005f26:	4615      	mov	r5, r2
 8005f28:	4622      	mov	r2, r4
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	f003 faf1 	bl	8009514 <SDMMC_CmdSelDesel>
 8005f32:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <SD_InitCard+0x176>
  {
    return errorstate;
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	e00e      	b.n	8005f5c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	466c      	mov	r4, sp
 8005f46:	f103 0210 	add.w	r2, r3, #16
 8005f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f50:	3304      	adds	r3, #4
 8005f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f54:	4628      	mov	r0, r5
 8005f56:	f003 f935 	bl	80091c4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3740      	adds	r7, #64	; 0x40
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bdb0      	pop	{r4, r5, r7, pc}

08005f64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f003 faec 	bl	800955a <SDMMC_CmdGoIdleState>
 8005f82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	e072      	b.n	8006074 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f003 faff 	bl	8009596 <SDMMC_CmdOperCond>
 8005f98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f003 fad5 	bl	800955a <SDMMC_CmdGoIdleState>
 8005fb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e05b      	b.n	8006074 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d137      	bne.n	800603a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f003 faff 	bl	80095d4 <SDMMC_CmdAppCommand>
 8005fd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02d      	beq.n	800603a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fe2:	e047      	b.n	8006074 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f003 faf2 	bl	80095d4 <SDMMC_CmdAppCommand>
 8005ff0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <SD_PowerON+0x98>
    {
      return errorstate;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	e03b      	b.n	8006074 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	491e      	ldr	r1, [pc, #120]	; (800607c <SD_PowerON+0x118>)
 8006002:	4618      	mov	r0, r3
 8006004:	f003 fb08 	bl	8009618 <SDMMC_CmdAppOperCommand>
 8006008:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006014:	e02e      	b.n	8006074 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f003 f96d 	bl	80092fc <SDIO_GetResponse>
 8006022:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	0fdb      	lsrs	r3, r3, #31
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <SD_PowerON+0xcc>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <SD_PowerON+0xce>
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]

    count++;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	3301      	adds	r3, #1
 8006038:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006040:	4293      	cmp	r3, r2
 8006042:	d802      	bhi.n	800604a <SD_PowerON+0xe6>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0cc      	beq.n	8005fe4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006050:	4293      	cmp	r3, r2
 8006052:	d902      	bls.n	800605a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006058:	e00c      	b.n	8006074 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	645a      	str	r2, [r3, #68]	; 0x44
 800606a:	e002      	b.n	8006072 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	c1100000 	.word	0xc1100000

08006080 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006090:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006094:	e018      	b.n	80060c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f003 fb7c 	bl	80097a0 <SDMMC_CmdSendStatus>
 80060a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	e009      	b.n	80060c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f003 f91e 	bl	80092fc <SDIO_GetResponse>
 80060c0:	4602      	mov	r2, r0
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f003 f908 	bl	80092fc <SDIO_GetResponse>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f6:	d102      	bne.n	80060fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80060f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060fc:	e02f      	b.n	800615e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80060fe:	f107 030c 	add.w	r3, r7, #12
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f879 	bl	80061fc <SD_FindSCR>
 800610a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	e023      	b.n	800615e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01c      	beq.n	800615a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f003 fa51 	bl	80095d4 <SDMMC_CmdAppCommand>
 8006132:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	e00f      	b.n	800615e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2102      	movs	r1, #2
 8006144:	4618      	mov	r0, r3
 8006146:	f003 fa8a 	bl	800965e <SDMMC_CmdBusWidth>
 800614a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	e003      	b.n	800615e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006156:	2300      	movs	r3, #0
 8006158:	e001      	b.n	800615e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800615a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b086      	sub	sp, #24
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f003 f8bd 	bl	80092fc <SDIO_GetResponse>
 8006182:	4603      	mov	r3, r0
 8006184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618c:	d102      	bne.n	8006194 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800618e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006192:	e02f      	b.n	80061f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006194:	f107 030c 	add.w	r3, r7, #12
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f82e 	bl	80061fc <SD_FindSCR>
 80061a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	e023      	b.n	80061f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01c      	beq.n	80061f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061be:	041b      	lsls	r3, r3, #16
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f003 fa06 	bl	80095d4 <SDMMC_CmdAppCommand>
 80061c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	e00f      	b.n	80061f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f003 fa3f 	bl	800965e <SDMMC_CmdBusWidth>
 80061e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	e003      	b.n	80061f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e001      	b.n	80061f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b08f      	sub	sp, #60	; 0x3c
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006206:	f7fc fe8d 	bl	8002f24 <HAL_GetTick>
 800620a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006210:	2300      	movs	r3, #0
 8006212:	60bb      	str	r3, [r7, #8]
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2108      	movs	r1, #8
 8006222:	4618      	mov	r0, r3
 8006224:	f003 f8a9 	bl	800937a <SDMMC_CmdBlockLength>
 8006228:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	e0b2      	b.n	800639a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f003 f9c7 	bl	80095d4 <SDMMC_CmdAppCommand>
 8006246:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <SD_FindSCR+0x56>
  {
    return errorstate;
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	e0a3      	b.n	800639a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295
 8006256:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006258:	2308      	movs	r3, #8
 800625a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800625c:	2330      	movs	r3, #48	; 0x30
 800625e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006260:	2302      	movs	r3, #2
 8006262:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006264:	2300      	movs	r3, #0
 8006266:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006268:	2301      	movs	r3, #1
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f107 0210 	add.w	r2, r7, #16
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f003 f853 	bl	8009322 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f003 fa0e 	bl	80096a2 <SDMMC_CmdSendSCR>
 8006286:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d02a      	beq.n	80062e4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	e083      	b.n	800639a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00f      	beq.n	80062c0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f107 0208 	add.w	r2, r7, #8
 80062ac:	18d4      	adds	r4, r2, r3
 80062ae:	4608      	mov	r0, r1
 80062b0:	f002 ffb3 	bl	800921a <SDIO_ReadFIFO>
 80062b4:	4603      	mov	r3, r0
 80062b6:	6023      	str	r3, [r4, #0]
      index++;
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	3301      	adds	r3, #1
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
 80062be:	e006      	b.n	80062ce <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d012      	beq.n	80062f4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80062ce:	f7fc fe29 	bl	8002f24 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d102      	bne.n	80062e4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80062de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062e2:	e05a      	b.n	800639a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0cf      	beq.n	8006292 <SD_FindSCR+0x96>
 80062f2:	e000      	b.n	80062f6 <SD_FindSCR+0xfa>
      break;
 80062f4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800630c:	2308      	movs	r3, #8
 800630e:	e044      	b.n	800639a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2202      	movs	r2, #2
 8006324:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006326:	2302      	movs	r3, #2
 8006328:	e037      	b.n	800639a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2220      	movs	r2, #32
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006340:	2320      	movs	r3, #32
 8006342:	e02a      	b.n	800639a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f240 523a 	movw	r2, #1338	; 0x53a
 800634c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	061a      	lsls	r2, r3, #24
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800635a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006364:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	0e1b      	lsrs	r3, r3, #24
 800636a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	601a      	str	r2, [r3, #0]
    scr++;
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	3304      	adds	r3, #4
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	061a      	lsls	r2, r3, #24
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006382:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800638c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	0e1b      	lsrs	r3, r3, #24
 8006392:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	373c      	adds	r7, #60	; 0x3c
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}

080063a2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d03f      	beq.n	800643c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	e033      	b.n	800642a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f002 ff27 	bl	800921a <SDIO_ReadFIFO>
 80063cc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3b01      	subs	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	0a1b      	lsrs	r3, r3, #8
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3b01      	subs	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3301      	adds	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b07      	cmp	r3, #7
 800642e:	d9c8      	bls.n	80063c2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800643c:	bf00      	nop
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d043      	beq.n	80064e6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e037      	b.n	80064d4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	60bb      	str	r3, [r7, #8]
      tmp++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	3b01      	subs	r3, #1
 8006474:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	021a      	lsls	r2, r3, #8
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4313      	orrs	r3, r2
 8006480:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3b01      	subs	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	041a      	lsls	r2, r3, #16
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4313      	orrs	r3, r2
 8006498:	60bb      	str	r3, [r7, #8]
      tmp++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	061a      	lsls	r2, r3, #24
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f107 0208 	add.w	r2, r7, #8
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f002 feb3 	bl	8009234 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	3301      	adds	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	d9c4      	bls.n	8006464 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80064e6:	bf00      	nop
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e07b      	b.n	80065f8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d108      	bne.n	800651a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006510:	d009      	beq.n	8006526 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	61da      	str	r2, [r3, #28]
 8006518:	e005      	b.n	8006526 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fb fc41 	bl	8001dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	ea42 0103 	orr.w	r1, r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	f003 0104 	and.w	r1, r3, #4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	f003 0210 	and.w	r2, r3, #16
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Transmit+0x22>
 800661e:	2302      	movs	r3, #2
 8006620:	e126      	b.n	8006870 <HAL_SPI_Transmit+0x270>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800662a:	f7fc fc7b 	bl	8002f24 <HAL_GetTick>
 800662e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006640:	2302      	movs	r3, #2
 8006642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006644:	e10b      	b.n	800685e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_Transmit+0x52>
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006656:	e102      	b.n	800685e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2203      	movs	r2, #3
 800665c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669e:	d10f      	bne.n	80066c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d007      	beq.n	80066de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e6:	d14b      	bne.n	8006780 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_SPI_Transmit+0xf6>
 80066f0:	8afb      	ldrh	r3, [r7, #22]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d13e      	bne.n	8006774 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	881a      	ldrh	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	1c9a      	adds	r2, r3, #2
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800671a:	e02b      	b.n	8006774 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d112      	bne.n	8006750 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	86da      	strh	r2, [r3, #54]	; 0x36
 800674e:	e011      	b.n	8006774 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006750:	f7fc fbe8 	bl	8002f24 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d803      	bhi.n	8006768 <HAL_SPI_Transmit+0x168>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d102      	bne.n	800676e <HAL_SPI_Transmit+0x16e>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006772:	e074      	b.n	800685e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1ce      	bne.n	800671c <HAL_SPI_Transmit+0x11c>
 800677e:	e04c      	b.n	800681a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_SPI_Transmit+0x18e>
 8006788:	8afb      	ldrh	r3, [r7, #22]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d140      	bne.n	8006810 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067b4:	e02c      	b.n	8006810 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d113      	bne.n	80067ec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80067ea:	e011      	b.n	8006810 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ec:	f7fc fb9a 	bl	8002f24 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d803      	bhi.n	8006804 <HAL_SPI_Transmit+0x204>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d102      	bne.n	800680a <HAL_SPI_Transmit+0x20a>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800680e:	e026      	b.n	800685e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1cd      	bne.n	80067b6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fa08 	bl	8006c34 <SPI_EndRxTxTransaction>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e000      	b.n	800685e <HAL_SPI_Transmit+0x25e>
  }

error:
 800685c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800686e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_SPI_Transmit_DMA+0x20>
 8006894:	2302      	movs	r3, #2
 8006896:	e09b      	b.n	80069d0 <HAL_SPI_Transmit_DMA+0x158>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
 80068ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068b0:	e089      	b.n	80069c6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_SPI_Transmit_DMA+0x46>
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068c2:	e080      	b.n	80069c6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2203      	movs	r2, #3
 80068c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	88fa      	ldrh	r2, [r7, #6]
 80068e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690a:	d10f      	bne.n	800692c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800692a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006930:	4a29      	ldr	r2, [pc, #164]	; (80069d8 <HAL_SPI_Transmit_DMA+0x160>)
 8006932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006938:	4a28      	ldr	r2, [pc, #160]	; (80069dc <HAL_SPI_Transmit_DMA+0x164>)
 800693a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006940:	4a27      	ldr	r2, [pc, #156]	; (80069e0 <HAL_SPI_Transmit_DMA+0x168>)
 8006942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006948:	2200      	movs	r2, #0
 800694a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	4619      	mov	r1, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330c      	adds	r3, #12
 800695c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006964:	f7fd f89a 	bl	8003a9c <HAL_DMA_Start_IT>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00c      	beq.n	8006988 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	f043 0210 	orr.w	r2, r3, #16
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006986:	e01e      	b.n	80069c6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d007      	beq.n	80069a6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0220 	orr.w	r2, r2, #32
 80069b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0202 	orr.w	r2, r2, #2
 80069c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	08006ac9 	.word	0x08006ac9
 80069dc:	08006a21 	.word	0x08006a21
 80069e0:	08006ae5 	.word	0x08006ae5

080069e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a2e:	f7fc fa79 	bl	8002f24 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	d03b      	beq.n	8006abc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0220 	bic.w	r2, r2, #32
 8006a52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0202 	bic.w	r2, r2, #2
 8006a62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	2164      	movs	r1, #100	; 0x64
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f000 f8e3 	bl	8006c34 <SPI_EndRxTxTransaction>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ab4:	6978      	ldr	r0, [r7, #20]
 8006ab6:	f7ff ffa9 	bl	8006a0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006aba:	e002      	b.n	8006ac2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006abc:	6978      	ldr	r0, [r7, #20]
 8006abe:	f7ff ff91 	bl	80069e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff ff8e 	bl	80069f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0203 	bic.w	r2, r2, #3
 8006b00:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	f043 0210 	orr.w	r2, r3, #16
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff ff78 	bl	8006a0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	4613      	mov	r3, r2
 8006b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b34:	f7fc f9f6 	bl	8002f24 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4413      	add	r3, r2
 8006b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b44:	f7fc f9ee 	bl	8002f24 <HAL_GetTick>
 8006b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b4a:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	015b      	lsls	r3, r3, #5
 8006b50:	0d1b      	lsrs	r3, r3, #20
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b5a:	e054      	b.n	8006c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d050      	beq.n	8006c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b64:	f7fc f9de 	bl	8002f24 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d902      	bls.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d13d      	bne.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b92:	d111      	bne.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9c:	d004      	beq.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba6:	d107      	bne.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc0:	d10f      	bne.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e017      	b.n	8006c26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d19b      	bne.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000008 	.word	0x20000008

08006c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c40:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <SPI_EndRxTxTransaction+0x7c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <SPI_EndRxTxTransaction+0x80>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	0d5b      	lsrs	r3, r3, #21
 8006c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c5e:	d112      	bne.n	8006c86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff ff5a 	bl	8006b24 <SPI_WaitFlagStateUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e00f      	b.n	8006ca6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d0f2      	beq.n	8006c86 <SPI_EndRxTxTransaction+0x52>
 8006ca0:	e000      	b.n	8006ca4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ca2:	bf00      	nop
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000008 	.word	0x20000008
 8006cb4:	165e9f81 	.word	0x165e9f81

08006cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e041      	b.n	8006d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fb fe9e 	bl	8002a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f000 fe4c 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d001      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04e      	b.n	8006e0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a23      	ldr	r2, [pc, #140]	; (8006e1c <HAL_TIM_Base_Start_IT+0xc4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d022      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d01d      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <HAL_TIM_Base_Start_IT+0xc8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d018      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <HAL_TIM_Base_Start_IT+0xcc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d013      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00e      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d009      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d111      	bne.n	8006dfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d010      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	e007      	b.n	8006e0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40010400 	.word	0x40010400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40001800 	.word	0x40001800

08006e38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10f      	bne.n	8006e80 <HAL_TIM_Base_Stop_IT+0x48>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	f240 4344 	movw	r3, #1092	; 0x444
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d107      	bne.n	8006e80 <HAL_TIM_Base_Stop_IT+0x48>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e041      	b.n	8006f2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f839 	bl	8006f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f000 fd5d 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <HAL_TIM_PWM_Start+0x24>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	bf14      	ite	ne
 8006f64:	2301      	movne	r3, #1
 8006f66:	2300      	moveq	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e022      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x6a>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d109      	bne.n	8006f86 <HAL_TIM_PWM_Start+0x3e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e015      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x6a>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d109      	bne.n	8006fa0 <HAL_TIM_PWM_Start+0x58>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	e008      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x6a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e07c      	b.n	80070b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <HAL_TIM_PWM_Start+0x82>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc8:	e013      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xaa>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d104      	bne.n	8006fda <HAL_TIM_PWM_Start+0x92>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd8:	e00b      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xaa>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_PWM_Start+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe8:	e003      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 ffb4 	bl	8007f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a2d      	ldr	r2, [pc, #180]	; (80070bc <HAL_TIM_PWM_Start+0x174>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <HAL_TIM_PWM_Start+0xcc>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2c      	ldr	r2, [pc, #176]	; (80070c0 <HAL_TIM_PWM_Start+0x178>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d101      	bne.n	8007018 <HAL_TIM_PWM_Start+0xd0>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_TIM_PWM_Start+0xd2>
 8007018:	2300      	movs	r3, #0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800702c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a22      	ldr	r2, [pc, #136]	; (80070bc <HAL_TIM_PWM_Start+0x174>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d022      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007040:	d01d      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1f      	ldr	r2, [pc, #124]	; (80070c4 <HAL_TIM_PWM_Start+0x17c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d018      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1d      	ldr	r2, [pc, #116]	; (80070c8 <HAL_TIM_PWM_Start+0x180>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <HAL_TIM_PWM_Start+0x184>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <HAL_TIM_PWM_Start+0x178>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <HAL_TIM_PWM_Start+0x188>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a16      	ldr	r2, [pc, #88]	; (80070d4 <HAL_TIM_PWM_Start+0x18c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d111      	bne.n	80070a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d010      	beq.n	80070b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	e007      	b.n	80070b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40010400 	.word	0x40010400
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40001800 	.word	0x40001800

080070d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 ff3c 	bl	8007f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a2e      	ldr	r2, [pc, #184]	; (80071b0 <HAL_TIM_PWM_Stop+0xd8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <HAL_TIM_PWM_Stop+0x2c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a2d      	ldr	r2, [pc, #180]	; (80071b4 <HAL_TIM_PWM_Stop+0xdc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d101      	bne.n	8007108 <HAL_TIM_PWM_Stop+0x30>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <HAL_TIM_PWM_Stop+0x32>
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d017      	beq.n	800713e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6a1a      	ldr	r2, [r3, #32]
 8007114:	f241 1311 	movw	r3, #4369	; 0x1111
 8007118:	4013      	ands	r3, r2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10f      	bne.n	800713e <HAL_TIM_PWM_Stop+0x66>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	f240 4344 	movw	r3, #1092	; 0x444
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d107      	bne.n	800713e <HAL_TIM_PWM_Stop+0x66>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a1a      	ldr	r2, [r3, #32]
 8007144:	f241 1311 	movw	r3, #4369	; 0x1111
 8007148:	4013      	ands	r3, r2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10f      	bne.n	800716e <HAL_TIM_PWM_Stop+0x96>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	f240 4344 	movw	r3, #1092	; 0x444
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d107      	bne.n	800716e <HAL_TIM_PWM_Stop+0x96>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d104      	bne.n	800717e <HAL_TIM_PWM_Stop+0xa6>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800717c:	e013      	b.n	80071a6 <HAL_TIM_PWM_Stop+0xce>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d104      	bne.n	800718e <HAL_TIM_PWM_Stop+0xb6>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718c:	e00b      	b.n	80071a6 <HAL_TIM_PWM_Stop+0xce>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d104      	bne.n	800719e <HAL_TIM_PWM_Stop+0xc6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800719c:	e003      	b.n	80071a6 <HAL_TIM_PWM_Stop+0xce>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40010400 	.word	0x40010400

080071b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e097      	b.n	80072fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fb fb21 	bl	8002828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071fc:	f023 0307 	bic.w	r3, r3, #7
 8007200:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f000 fbc1 	bl	8007994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	4313      	orrs	r3, r2
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007258:	f023 030c 	bic.w	r3, r3, #12
 800725c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	4313      	orrs	r3, r2
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	011a      	lsls	r2, r3, #4
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	031b      	lsls	r3, r3, #12
 8007288:	4313      	orrs	r3, r2
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007296:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	4313      	orrs	r3, r2
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800731c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800732c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d110      	bne.n	8007356 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d102      	bne.n	8007340 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800733a:	7b7b      	ldrb	r3, [r7, #13]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d001      	beq.n	8007344 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e069      	b.n	8007418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007354:	e031      	b.n	80073ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b04      	cmp	r3, #4
 800735a:	d110      	bne.n	800737e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d102      	bne.n	8007368 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007362:	7b3b      	ldrb	r3, [r7, #12]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d001      	beq.n	800736c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e055      	b.n	8007418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800737c:	e01d      	b.n	80073ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d108      	bne.n	8007396 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d105      	bne.n	8007396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800738a:	7b7b      	ldrb	r3, [r7, #13]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d102      	bne.n	8007396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007390:	7b3b      	ldrb	r3, [r7, #12]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d001      	beq.n	800739a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e03e      	b.n	8007418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_TIM_Encoder_Start+0xc4>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d008      	beq.n	80073d8 <HAL_TIM_Encoder_Start+0xd4>
 80073c6:	e00f      	b.n	80073e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2201      	movs	r2, #1
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fdc9 	bl	8007f68 <TIM_CCxChannelCmd>
      break;
 80073d6:	e016      	b.n	8007406 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2201      	movs	r2, #1
 80073de:	2104      	movs	r1, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fdc1 	bl	8007f68 <TIM_CCxChannelCmd>
      break;
 80073e6:	e00e      	b.n	8007406 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2201      	movs	r2, #1
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fdb9 	bl	8007f68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2201      	movs	r2, #1
 80073fc:	2104      	movs	r1, #4
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fdb2 	bl	8007f68 <TIM_CCxChannelCmd>
      break;
 8007404:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0201 	orr.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b02      	cmp	r3, #2
 8007434:	d122      	bne.n	800747c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b02      	cmp	r3, #2
 8007442:	d11b      	bne.n	800747c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0202 	mvn.w	r2, #2
 800744c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa77 	bl	8007956 <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa69 	bl	8007942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa7a 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	2b04      	cmp	r3, #4
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b04      	cmp	r3, #4
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0204 	mvn.w	r2, #4
 80074a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa4d 	bl	8007956 <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa3f 	bl	8007942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa50 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d122      	bne.n	8007524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d11b      	bne.n	8007524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0208 	mvn.w	r2, #8
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2204      	movs	r2, #4
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa23 	bl	8007956 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa15 	bl	8007942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fa26 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b10      	cmp	r3, #16
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b10      	cmp	r3, #16
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0210 	mvn.w	r2, #16
 8007548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2208      	movs	r2, #8
 800754e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9f9 	bl	8007956 <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9eb 	bl	8007942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f9fc 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0201 	mvn.w	r2, #1
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fa fa3e 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fd78 	bl	80080c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9c1 	bl	800797e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b20      	cmp	r3, #32
 8007608:	d10e      	bne.n	8007628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b20      	cmp	r3, #32
 8007616:	d107      	bne.n	8007628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0220 	mvn.w	r2, #32
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fd42 	bl	80080ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800764a:	2302      	movs	r3, #2
 800764c:	e0ae      	b.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b0c      	cmp	r3, #12
 800765a:	f200 809f 	bhi.w	800779c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007699 	.word	0x08007699
 8007668:	0800779d 	.word	0x0800779d
 800766c:	0800779d 	.word	0x0800779d
 8007670:	0800779d 	.word	0x0800779d
 8007674:	080076d9 	.word	0x080076d9
 8007678:	0800779d 	.word	0x0800779d
 800767c:	0800779d 	.word	0x0800779d
 8007680:	0800779d 	.word	0x0800779d
 8007684:	0800771b 	.word	0x0800771b
 8007688:	0800779d 	.word	0x0800779d
 800768c:	0800779d 	.word	0x0800779d
 8007690:	0800779d 	.word	0x0800779d
 8007694:	0800775b 	.word	0x0800775b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fa18 	bl	8007ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0208 	orr.w	r2, r2, #8
 80076b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0204 	bic.w	r2, r2, #4
 80076c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6999      	ldr	r1, [r3, #24]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	619a      	str	r2, [r3, #24]
      break;
 80076d6:	e064      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fa68 	bl	8007bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6999      	ldr	r1, [r3, #24]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	021a      	lsls	r2, r3, #8
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	619a      	str	r2, [r3, #24]
      break;
 8007718:	e043      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fabd 	bl	8007ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69da      	ldr	r2, [r3, #28]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0208 	orr.w	r2, r2, #8
 8007734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0204 	bic.w	r2, r2, #4
 8007744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69d9      	ldr	r1, [r3, #28]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	61da      	str	r2, [r3, #28]
      break;
 8007758:	e023      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68b9      	ldr	r1, [r7, #8]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fb11 	bl	8007d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69da      	ldr	r2, [r3, #28]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69da      	ldr	r2, [r3, #28]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69d9      	ldr	r1, [r3, #28]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	021a      	lsls	r2, r3, #8
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	61da      	str	r2, [r3, #28]
      break;
 800779a:	e002      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
      break;
 80077a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_TIM_ConfigClockSource+0x1c>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e0b4      	b.n	800793a <HAL_TIM_ConfigClockSource+0x186>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007808:	d03e      	beq.n	8007888 <HAL_TIM_ConfigClockSource+0xd4>
 800780a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780e:	f200 8087 	bhi.w	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007816:	f000 8086 	beq.w	8007926 <HAL_TIM_ConfigClockSource+0x172>
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781e:	d87f      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007820:	2b70      	cmp	r3, #112	; 0x70
 8007822:	d01a      	beq.n	800785a <HAL_TIM_ConfigClockSource+0xa6>
 8007824:	2b70      	cmp	r3, #112	; 0x70
 8007826:	d87b      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007828:	2b60      	cmp	r3, #96	; 0x60
 800782a:	d050      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x11a>
 800782c:	2b60      	cmp	r3, #96	; 0x60
 800782e:	d877      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007830:	2b50      	cmp	r3, #80	; 0x50
 8007832:	d03c      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0xfa>
 8007834:	2b50      	cmp	r3, #80	; 0x50
 8007836:	d873      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007838:	2b40      	cmp	r3, #64	; 0x40
 800783a:	d058      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0x13a>
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d86f      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007840:	2b30      	cmp	r3, #48	; 0x30
 8007842:	d064      	beq.n	800790e <HAL_TIM_ConfigClockSource+0x15a>
 8007844:	2b30      	cmp	r3, #48	; 0x30
 8007846:	d86b      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007848:	2b20      	cmp	r3, #32
 800784a:	d060      	beq.n	800790e <HAL_TIM_ConfigClockSource+0x15a>
 800784c:	2b20      	cmp	r3, #32
 800784e:	d867      	bhi.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d05c      	beq.n	800790e <HAL_TIM_ConfigClockSource+0x15a>
 8007854:	2b10      	cmp	r3, #16
 8007856:	d05a      	beq.n	800790e <HAL_TIM_ConfigClockSource+0x15a>
 8007858:	e062      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6899      	ldr	r1, [r3, #8]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f000 fb5d 	bl	8007f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800787c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	609a      	str	r2, [r3, #8]
      break;
 8007886:	e04f      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	6899      	ldr	r1, [r3, #8]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f000 fb46 	bl	8007f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078aa:	609a      	str	r2, [r3, #8]
      break;
 80078ac:	e03c      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6859      	ldr	r1, [r3, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f000 faba 	bl	8007e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2150      	movs	r1, #80	; 0x50
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fb13 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 80078cc:	e02c      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	6859      	ldr	r1, [r3, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	461a      	mov	r2, r3
 80078dc:	f000 fad9 	bl	8007e92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2160      	movs	r1, #96	; 0x60
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fb03 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 80078ec:	e01c      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6859      	ldr	r1, [r3, #4]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	461a      	mov	r2, r3
 80078fc:	f000 fa9a 	bl	8007e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2140      	movs	r1, #64	; 0x40
 8007906:	4618      	mov	r0, r3
 8007908:	f000 faf3 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 800790c:	e00c      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f000 faea 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 800791e:	e003      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	73fb      	strb	r3, [r7, #15]
      break;
 8007924:	e000      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a40      	ldr	r2, [pc, #256]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d00f      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3d      	ldr	r2, [pc, #244]	; (8007aac <TIM_Base_SetConfig+0x118>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a3c      	ldr	r2, [pc, #240]	; (8007ab0 <TIM_Base_SetConfig+0x11c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a3b      	ldr	r2, [pc, #236]	; (8007ab4 <TIM_Base_SetConfig+0x120>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3a      	ldr	r2, [pc, #232]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d108      	bne.n	80079e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2f      	ldr	r2, [pc, #188]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d02b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f4:	d027      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <TIM_Base_SetConfig+0x118>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d023      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2b      	ldr	r2, [pc, #172]	; (8007ab0 <TIM_Base_SetConfig+0x11c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d01f      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2a      	ldr	r2, [pc, #168]	; (8007ab4 <TIM_Base_SetConfig+0x120>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d01b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d017      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a28      	ldr	r2, [pc, #160]	; (8007abc <TIM_Base_SetConfig+0x128>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a27      	ldr	r2, [pc, #156]	; (8007ac0 <TIM_Base_SetConfig+0x12c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00f      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <TIM_Base_SetConfig+0x130>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a25      	ldr	r2, [pc, #148]	; (8007ac8 <TIM_Base_SetConfig+0x134>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d007      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a24      	ldr	r2, [pc, #144]	; (8007acc <TIM_Base_SetConfig+0x138>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <TIM_Base_SetConfig+0x13c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d108      	bne.n	8007a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a0a      	ldr	r2, [pc, #40]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0xf8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d103      	bne.n	8007a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	615a      	str	r2, [r3, #20]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40000c00 	.word	0x40000c00
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800
 8007ac8:	40001800 	.word	0x40001800
 8007acc:	40001c00 	.word	0x40001c00
 8007ad0:	40002000 	.word	0x40002000

08007ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f023 0302 	bic.w	r3, r3, #2
 8007b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a20      	ldr	r2, [pc, #128]	; (8007bac <TIM_OC1_SetConfig+0xd8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_OC1_SetConfig+0x64>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <TIM_OC1_SetConfig+0xdc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d10c      	bne.n	8007b52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0308 	bic.w	r3, r3, #8
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f023 0304 	bic.w	r3, r3, #4
 8007b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a15      	ldr	r2, [pc, #84]	; (8007bac <TIM_OC1_SetConfig+0xd8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d003      	beq.n	8007b62 <TIM_OC1_SetConfig+0x8e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a14      	ldr	r2, [pc, #80]	; (8007bb0 <TIM_OC1_SetConfig+0xdc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d111      	bne.n	8007b86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	621a      	str	r2, [r3, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40010400 	.word	0x40010400

08007bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0210 	bic.w	r2, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0320 	bic.w	r3, r3, #32
 8007bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <TIM_OC2_SetConfig+0xe4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_OC2_SetConfig+0x68>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <TIM_OC2_SetConfig+0xe8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d10d      	bne.n	8007c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <TIM_OC2_SetConfig+0xe4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_OC2_SetConfig+0x94>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <TIM_OC2_SetConfig+0xe8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d113      	bne.n	8007c70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <TIM_OC3_SetConfig+0xe0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC3_SetConfig+0x66>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <TIM_OC3_SetConfig+0xe4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10d      	bne.n	8007d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <TIM_OC3_SetConfig+0xe0>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_OC3_SetConfig+0x92>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <TIM_OC3_SetConfig+0xe4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d113      	bne.n	8007d5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	621a      	str	r2, [r3, #32]
}
 8007d74:	bf00      	nop
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40010400 	.word	0x40010400

08007d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	031b      	lsls	r3, r3, #12
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <TIM_OC4_SetConfig+0xa4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC4_SetConfig+0x68>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a11      	ldr	r2, [pc, #68]	; (8007e30 <TIM_OC4_SetConfig+0xa8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d109      	bne.n	8007e04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	019b      	lsls	r3, r3, #6
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40010400 	.word	0x40010400

08007e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f023 0201 	bic.w	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 030a 	bic.w	r3, r3, #10
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b087      	sub	sp, #28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f023 0210 	bic.w	r2, r3, #16
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	031b      	lsls	r3, r3, #12
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f043 0307 	orr.w	r3, r3, #7
 8007f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	609a      	str	r2, [r3, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	021a      	lsls	r2, r3, #8
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	609a      	str	r2, [r3, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1a      	ldr	r2, [r3, #32]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	401a      	ands	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1a      	ldr	r2, [r3, #32]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 031f 	and.w	r3, r3, #31
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e05a      	b.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a21      	ldr	r2, [pc, #132]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d022      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008018:	d01d      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d018      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1a      	ldr	r2, [pc, #104]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00e      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a18      	ldr	r2, [pc, #96]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d009      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a17      	ldr	r2, [pc, #92]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d004      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d10c      	bne.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4313      	orrs	r3, r2
 8008066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010000 	.word	0x40010000
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40010400 	.word	0x40010400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40001800 	.word	0x40001800

080080ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e03f      	b.n	8008166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fa fdfe 	bl	8002cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2224      	movs	r2, #36	; 0x24
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fddf 	bl	8008cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695a      	ldr	r2, [r3, #20]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800814c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b08a      	sub	sp, #40	; 0x28
 8008172:	af02      	add	r7, sp, #8
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b20      	cmp	r3, #32
 800818c:	d17c      	bne.n	8008288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <HAL_UART_Transmit+0x2c>
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e075      	b.n	800828a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UART_Transmit+0x3e>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e06e      	b.n	800828a <HAL_UART_Transmit+0x11c>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2221      	movs	r2, #33	; 0x21
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081c2:	f7fa feaf 	bl	8002f24 <HAL_GetTick>
 80081c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	88fa      	ldrh	r2, [r7, #6]
 80081cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081dc:	d108      	bne.n	80081f0 <HAL_UART_Transmit+0x82>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	e003      	b.n	80081f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008200:	e02a      	b.n	8008258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	2180      	movs	r1, #128	; 0x80
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fb1f 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e036      	b.n	800828a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	3302      	adds	r3, #2
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	e007      	b.n	800824a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3301      	adds	r3, #1
 8008248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1cf      	bne.n	8008202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2200      	movs	r2, #0
 800826a:	2140      	movs	r1, #64	; 0x40
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 faef 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e006      	b.n	800828a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e000      	b.n	800828a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	4613      	mov	r3, r2
 800829e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d11d      	bne.n	80082e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_UART_Receive_IT+0x26>
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e016      	b.n	80082ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Receive_IT+0x38>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e00f      	b.n	80082ea <HAL_UART_Receive_IT+0x58>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	461a      	mov	r2, r3
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fb24 	bl	800892c <UART_Start_Receive_IT>
 80082e4:	4603      	mov	r3, r0
 80082e6:	e000      	b.n	80082ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082e8:	2302      	movs	r3, #2
  }
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b0ba      	sub	sp, #232	; 0xe8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800831a:	2300      	movs	r3, #0
 800831c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10f      	bne.n	800835a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800833a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_UART_IRQHandler+0x66>
 8008346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fc07 	bl	8008b66 <UART_Receive_IT>
      return;
 8008358:	e256      	b.n	8008808 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800835a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80de 	beq.w	8008520 <HAL_UART_IRQHandler+0x22c>
 8008364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008374:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80d1 	beq.w	8008520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800837e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <HAL_UART_IRQHandler+0xae>
 800838a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800838e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	f043 0201 	orr.w	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <HAL_UART_IRQHandler+0xd2>
 80083ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f043 0202 	orr.w	r2, r3, #2
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00b      	beq.n	80083ea <HAL_UART_IRQHandler+0xf6>
 80083d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	f043 0204 	orr.w	r2, r3, #4
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <HAL_UART_IRQHandler+0x126>
 80083f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d105      	bne.n	800840e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f043 0208 	orr.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 81ed 	beq.w	80087fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <HAL_UART_IRQHandler+0x14e>
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fb92 	bl	8008b66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b40      	cmp	r3, #64	; 0x40
 800844e:	bf0c      	ite	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	2300      	movne	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <HAL_UART_IRQHandler+0x17a>
 8008466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d04f      	beq.n	800850e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa9a 	bl	80089a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d141      	bne.n	8008506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3314      	adds	r3, #20
 8008488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800849c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3314      	adds	r3, #20
 80084aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1d9      	bne.n	8008482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d013      	beq.n	80084fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	4a7d      	ldr	r2, [pc, #500]	; (80086d0 <HAL_UART_IRQHandler+0x3dc>)
 80084dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fb fba2 	bl	8003c2c <HAL_DMA_Abort_IT>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d016      	beq.n	800851c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	e00e      	b.n	800851c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f990 	bl	8008824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008504:	e00a      	b.n	800851c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f98c 	bl	8008824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850c:	e006      	b.n	800851c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f988 	bl	8008824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800851a:	e170      	b.n	80087fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851c:	bf00      	nop
    return;
 800851e:	e16e      	b.n	80087fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	2b01      	cmp	r3, #1
 8008526:	f040 814a 	bne.w	80087be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800852a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 8143 	beq.w	80087be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 813c 	beq.w	80087be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	f040 80b4 	bne.w	80086d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 8140 	beq.w	8008802 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800858a:	429a      	cmp	r2, r3
 800858c:	f080 8139 	bcs.w	8008802 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008596:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a2:	f000 8088 	beq.w	80086b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	330c      	adds	r3, #12
 80085ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	330c      	adds	r3, #12
 80085ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1d9      	bne.n	80085a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3314      	adds	r3, #20
 80085f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3314      	adds	r3, #20
 8008612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008616:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800861a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800861e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e1      	bne.n	80085f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800863e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008652:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e3      	bne.n	800862e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008686:	f023 0310 	bic.w	r3, r3, #16
 800868a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008698:	65ba      	str	r2, [r7, #88]	; 0x58
 800869a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800869e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e3      	bne.n	8008674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fb fa4b 	bl	8003b4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f8b6 	bl	8008838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086cc:	e099      	b.n	8008802 <HAL_UART_IRQHandler+0x50e>
 80086ce:	bf00      	nop
 80086d0:	08008a6f 	.word	0x08008a6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086dc:	b29b      	uxth	r3, r3
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 808b 	beq.w	8008806 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80086f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8086 	beq.w	8008806 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800871e:	647a      	str	r2, [r7, #68]	; 0x44
 8008720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800872c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e3      	bne.n	80086fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3314      	adds	r3, #20
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	623b      	str	r3, [r7, #32]
   return(result);
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3314      	adds	r3, #20
 8008752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008756:	633a      	str	r2, [r7, #48]	; 0x30
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800875c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e3      	bne.n	8008732 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	330c      	adds	r3, #12
 800877e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	60fb      	str	r3, [r7, #12]
   return(result);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0310 	bic.w	r3, r3, #16
 800878e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	330c      	adds	r3, #12
 8008798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800879c:	61fa      	str	r2, [r7, #28]
 800879e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	69b9      	ldr	r1, [r7, #24]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	617b      	str	r3, [r7, #20]
   return(result);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e3      	bne.n	8008778 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f83e 	bl	8008838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087bc:	e023      	b.n	8008806 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <HAL_UART_IRQHandler+0x4ea>
 80087ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f95d 	bl	8008a96 <UART_Transmit_IT>
    return;
 80087dc:	e014      	b.n	8008808 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00e      	beq.n	8008808 <HAL_UART_IRQHandler+0x514>
 80087ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d008      	beq.n	8008808 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f99d 	bl	8008b36 <UART_EndTransmit_IT>
    return;
 80087fc:	e004      	b.n	8008808 <HAL_UART_IRQHandler+0x514>
    return;
 80087fe:	bf00      	nop
 8008800:	e002      	b.n	8008808 <HAL_UART_IRQHandler+0x514>
      return;
 8008802:	bf00      	nop
 8008804:	e000      	b.n	8008808 <HAL_UART_IRQHandler+0x514>
      return;
 8008806:	bf00      	nop
  }
}
 8008808:	37e8      	adds	r7, #232	; 0xe8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop

08008810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b090      	sub	sp, #64	; 0x40
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	e050      	b.n	8008904 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d04c      	beq.n	8008904 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800886a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886c:	2b00      	cmp	r3, #0
 800886e:	d007      	beq.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
 8008870:	f7fa fb58 	bl	8002f24 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800887c:	429a      	cmp	r2, r3
 800887e:	d241      	bcs.n	8008904 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088a0:	637a      	str	r2, [r7, #52]	; 0x34
 80088a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	613b      	str	r3, [r7, #16]
   return(result);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d4:	623a      	str	r2, [r7, #32]
 80088d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	69f9      	ldr	r1, [r7, #28]
 80088da:	6a3a      	ldr	r2, [r7, #32]
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e00f      	b.n	8008924 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	4013      	ands	r3, r2
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	429a      	cmp	r2, r3
 8008912:	bf0c      	ite	eq
 8008914:	2301      	moveq	r3, #1
 8008916:	2300      	movne	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	429a      	cmp	r2, r3
 8008920:	d09f      	beq.n	8008862 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3740      	adds	r7, #64	; 0x40
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4613      	mov	r3, r2
 8008938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	88fa      	ldrh	r2, [r7, #6]
 800894a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2222      	movs	r2, #34	; 0x22
 8008956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d007      	beq.n	800897a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008978:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695a      	ldr	r2, [r3, #20]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0220 	orr.w	r2, r2, #32
 8008998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b095      	sub	sp, #84	; 0x54
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	330c      	adds	r3, #12
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	330c      	adds	r3, #12
 80089ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089d0:	643a      	str	r2, [r7, #64]	; 0x40
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e5      	bne.n	80089b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3314      	adds	r3, #20
 80089ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3314      	adds	r3, #20
 8008a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e5      	bne.n	80089e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d119      	bne.n	8008a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f023 0310 	bic.w	r3, r3, #16
 8008a36:	647b      	str	r3, [r7, #68]	; 0x44
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a40:	61ba      	str	r2, [r7, #24]
 8008a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6979      	ldr	r1, [r7, #20]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e5      	bne.n	8008a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a62:	bf00      	nop
 8008a64:	3754      	adds	r7, #84	; 0x54
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f7ff fecb 	bl	8008824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a8e:	bf00      	nop
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b21      	cmp	r3, #33	; 0x21
 8008aa8:	d13e      	bne.n	8008b28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab2:	d114      	bne.n	8008ade <UART_Transmit_IT+0x48>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d110      	bne.n	8008ade <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	1c9a      	adds	r2, r3, #2
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	621a      	str	r2, [r3, #32]
 8008adc:	e008      	b.n	8008af0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	1c59      	adds	r1, r3, #1
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6211      	str	r1, [r2, #32]
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4619      	mov	r1, r3
 8008afe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10f      	bne.n	8008b24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e000      	b.n	8008b2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fe5a 	bl	8008810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b08c      	sub	sp, #48	; 0x30
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b22      	cmp	r3, #34	; 0x22
 8008b78:	f040 80ab 	bne.w	8008cd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b84:	d117      	bne.n	8008bb6 <UART_Receive_IT+0x50>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d113      	bne.n	8008bb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	1c9a      	adds	r2, r3, #2
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8008bb4:	e026      	b.n	8008c04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc8:	d007      	beq.n	8008bda <UART_Receive_IT+0x74>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <UART_Receive_IT+0x82>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	e008      	b.n	8008bfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	4619      	mov	r1, r3
 8008c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d15a      	bne.n	8008cce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0220 	bic.w	r2, r2, #32
 8008c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0201 	bic.w	r2, r2, #1
 8008c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d135      	bne.n	8008cc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	330c      	adds	r3, #12
 8008c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f023 0310 	bic.w	r3, r3, #16
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7e:	623a      	str	r2, [r7, #32]
 8008c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	69f9      	ldr	r1, [r7, #28]
 8008c84:	6a3a      	ldr	r2, [r7, #32]
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e5      	bne.n	8008c5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	2b10      	cmp	r3, #16
 8008c9e:	d10a      	bne.n	8008cb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff fdbb 	bl	8008838 <HAL_UARTEx_RxEventCallback>
 8008cc2:	e002      	b.n	8008cca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f006 f8bb 	bl	800ee40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e002      	b.n	8008cd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e000      	b.n	8008cd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008cd2:	2302      	movs	r3, #2
  }
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3730      	adds	r7, #48	; 0x30
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce0:	b0c0      	sub	sp, #256	; 0x100
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf8:	68d9      	ldr	r1, [r3, #12]
 8008cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	ea40 0301 	orr.w	r3, r0, r1
 8008d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d34:	f021 010c 	bic.w	r1, r1, #12
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d42:	430b      	orrs	r3, r1
 8008d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d56:	6999      	ldr	r1, [r3, #24]
 8008d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	ea40 0301 	orr.w	r3, r0, r1
 8008d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	4b8f      	ldr	r3, [pc, #572]	; (8008fa8 <UART_SetConfig+0x2cc>)
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d005      	beq.n	8008d7c <UART_SetConfig+0xa0>
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4b8d      	ldr	r3, [pc, #564]	; (8008fac <UART_SetConfig+0x2d0>)
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d104      	bne.n	8008d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d7c:	f7fc f870 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8008d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d84:	e003      	b.n	8008d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d86:	f7fc f857 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8008d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d98:	f040 810c 	bne.w	8008fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dae:	4622      	mov	r2, r4
 8008db0:	462b      	mov	r3, r5
 8008db2:	1891      	adds	r1, r2, r2
 8008db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008db6:	415b      	adcs	r3, r3
 8008db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	eb12 0801 	adds.w	r8, r2, r1
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	eb43 0901 	adc.w	r9, r3, r1
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dde:	4690      	mov	r8, r2
 8008de0:	4699      	mov	r9, r3
 8008de2:	4623      	mov	r3, r4
 8008de4:	eb18 0303 	adds.w	r3, r8, r3
 8008de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dec:	462b      	mov	r3, r5
 8008dee:	eb49 0303 	adc.w	r3, r9, r3
 8008df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	18db      	adds	r3, r3, r3
 8008e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e10:	4613      	mov	r3, r2
 8008e12:	eb42 0303 	adc.w	r3, r2, r3
 8008e16:	657b      	str	r3, [r7, #84]	; 0x54
 8008e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e20:	f7f7 ff32 	bl	8000c88 <__aeabi_uldivmod>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4b61      	ldr	r3, [pc, #388]	; (8008fb0 <UART_SetConfig+0x2d4>)
 8008e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	011c      	lsls	r4, r3, #4
 8008e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	1891      	adds	r1, r2, r2
 8008e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e4c:	415b      	adcs	r3, r3
 8008e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e54:	4641      	mov	r1, r8
 8008e56:	eb12 0a01 	adds.w	sl, r2, r1
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e74:	4692      	mov	sl, r2
 8008e76:	469b      	mov	fp, r3
 8008e78:	4643      	mov	r3, r8
 8008e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8008e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e82:	464b      	mov	r3, r9
 8008e84:	eb4b 0303 	adc.w	r3, fp, r3
 8008e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	18db      	adds	r3, r3, r3
 8008ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	eb42 0303 	adc.w	r3, r2, r3
 8008eac:	647b      	str	r3, [r7, #68]	; 0x44
 8008eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008eb6:	f7f7 fee7 	bl	8000c88 <__aeabi_uldivmod>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4b3b      	ldr	r3, [pc, #236]	; (8008fb0 <UART_SetConfig+0x2d4>)
 8008ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ec6:	095b      	lsrs	r3, r3, #5
 8008ec8:	2264      	movs	r2, #100	; 0x64
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	1acb      	subs	r3, r1, r3
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ed6:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <UART_SetConfig+0x2d4>)
 8008ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ee4:	441c      	add	r4, r3
 8008ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	1891      	adds	r1, r2, r2
 8008efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f00:	415b      	adcs	r3, r3
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f08:	4641      	mov	r1, r8
 8008f0a:	1851      	adds	r1, r2, r1
 8008f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8008f0e:	4649      	mov	r1, r9
 8008f10:	414b      	adcs	r3, r1
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
 8008f14:	f04f 0200 	mov.w	r2, #0
 8008f18:	f04f 0300 	mov.w	r3, #0
 8008f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f20:	4659      	mov	r1, fp
 8008f22:	00cb      	lsls	r3, r1, #3
 8008f24:	4651      	mov	r1, sl
 8008f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f2a:	4651      	mov	r1, sl
 8008f2c:	00ca      	lsls	r2, r1, #3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	4619      	mov	r1, r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	4642      	mov	r2, r8
 8008f36:	189b      	adds	r3, r3, r2
 8008f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	460a      	mov	r2, r1
 8008f40:	eb42 0303 	adc.w	r3, r2, r3
 8008f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	18db      	adds	r3, r3, r3
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f62:	4613      	mov	r3, r2
 8008f64:	eb42 0303 	adc.w	r3, r2, r3
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f72:	f7f7 fe89 	bl	8000c88 <__aeabi_uldivmod>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <UART_SetConfig+0x2d4>)
 8008f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	2164      	movs	r1, #100	; 0x64
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	3332      	adds	r3, #50	; 0x32
 8008f8e:	4a08      	ldr	r2, [pc, #32]	; (8008fb0 <UART_SetConfig+0x2d4>)
 8008f90:	fba2 2303 	umull	r2, r3, r2, r3
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	f003 0207 	and.w	r2, r3, #7
 8008f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4422      	add	r2, r4
 8008fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fa4:	e105      	b.n	80091b2 <UART_SetConfig+0x4d6>
 8008fa6:	bf00      	nop
 8008fa8:	40011000 	.word	0x40011000
 8008fac:	40011400 	.word	0x40011400
 8008fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	464b      	mov	r3, r9
 8008fca:	1891      	adds	r1, r2, r2
 8008fcc:	6239      	str	r1, [r7, #32]
 8008fce:	415b      	adcs	r3, r3
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fd6:	4641      	mov	r1, r8
 8008fd8:	1854      	adds	r4, r2, r1
 8008fda:	4649      	mov	r1, r9
 8008fdc:	eb43 0501 	adc.w	r5, r3, r1
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	00eb      	lsls	r3, r5, #3
 8008fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fee:	00e2      	lsls	r2, r4, #3
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	461d      	mov	r5, r3
 8008ff4:	4643      	mov	r3, r8
 8008ff6:	18e3      	adds	r3, r4, r3
 8008ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	eb45 0303 	adc.w	r3, r5, r3
 8009002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	f04f 0300 	mov.w	r3, #0
 800901e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009022:	4629      	mov	r1, r5
 8009024:	008b      	lsls	r3, r1, #2
 8009026:	4621      	mov	r1, r4
 8009028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800902c:	4621      	mov	r1, r4
 800902e:	008a      	lsls	r2, r1, #2
 8009030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009034:	f7f7 fe28 	bl	8000c88 <__aeabi_uldivmod>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4b60      	ldr	r3, [pc, #384]	; (80091c0 <UART_SetConfig+0x4e4>)
 800903e:	fba3 2302 	umull	r2, r3, r3, r2
 8009042:	095b      	lsrs	r3, r3, #5
 8009044:	011c      	lsls	r4, r3, #4
 8009046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800904a:	2200      	movs	r2, #0
 800904c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	1891      	adds	r1, r2, r2
 800905e:	61b9      	str	r1, [r7, #24]
 8009060:	415b      	adcs	r3, r3
 8009062:	61fb      	str	r3, [r7, #28]
 8009064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009068:	4641      	mov	r1, r8
 800906a:	1851      	adds	r1, r2, r1
 800906c:	6139      	str	r1, [r7, #16]
 800906e:	4649      	mov	r1, r9
 8009070:	414b      	adcs	r3, r1
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	f04f 0200 	mov.w	r2, #0
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009080:	4659      	mov	r1, fp
 8009082:	00cb      	lsls	r3, r1, #3
 8009084:	4651      	mov	r1, sl
 8009086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800908a:	4651      	mov	r1, sl
 800908c:	00ca      	lsls	r2, r1, #3
 800908e:	4610      	mov	r0, r2
 8009090:	4619      	mov	r1, r3
 8009092:	4603      	mov	r3, r0
 8009094:	4642      	mov	r2, r8
 8009096:	189b      	adds	r3, r3, r2
 8009098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800909c:	464b      	mov	r3, r9
 800909e:	460a      	mov	r2, r1
 80090a0:	eb42 0303 	adc.w	r3, r2, r3
 80090a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80090b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	f04f 0300 	mov.w	r3, #0
 80090bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090c0:	4649      	mov	r1, r9
 80090c2:	008b      	lsls	r3, r1, #2
 80090c4:	4641      	mov	r1, r8
 80090c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ca:	4641      	mov	r1, r8
 80090cc:	008a      	lsls	r2, r1, #2
 80090ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090d2:	f7f7 fdd9 	bl	8000c88 <__aeabi_uldivmod>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4b39      	ldr	r3, [pc, #228]	; (80091c0 <UART_SetConfig+0x4e4>)
 80090dc:	fba3 1302 	umull	r1, r3, r3, r2
 80090e0:	095b      	lsrs	r3, r3, #5
 80090e2:	2164      	movs	r1, #100	; 0x64
 80090e4:	fb01 f303 	mul.w	r3, r1, r3
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	3332      	adds	r3, #50	; 0x32
 80090ee:	4a34      	ldr	r2, [pc, #208]	; (80091c0 <UART_SetConfig+0x4e4>)
 80090f0:	fba2 2303 	umull	r2, r3, r2, r3
 80090f4:	095b      	lsrs	r3, r3, #5
 80090f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090fa:	441c      	add	r4, r3
 80090fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009100:	2200      	movs	r2, #0
 8009102:	673b      	str	r3, [r7, #112]	; 0x70
 8009104:	677a      	str	r2, [r7, #116]	; 0x74
 8009106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800910a:	4642      	mov	r2, r8
 800910c:	464b      	mov	r3, r9
 800910e:	1891      	adds	r1, r2, r2
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	415b      	adcs	r3, r3
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800911a:	4641      	mov	r1, r8
 800911c:	1851      	adds	r1, r2, r1
 800911e:	6039      	str	r1, [r7, #0]
 8009120:	4649      	mov	r1, r9
 8009122:	414b      	adcs	r3, r1
 8009124:	607b      	str	r3, [r7, #4]
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	f04f 0300 	mov.w	r3, #0
 800912e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009132:	4659      	mov	r1, fp
 8009134:	00cb      	lsls	r3, r1, #3
 8009136:	4651      	mov	r1, sl
 8009138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800913c:	4651      	mov	r1, sl
 800913e:	00ca      	lsls	r2, r1, #3
 8009140:	4610      	mov	r0, r2
 8009142:	4619      	mov	r1, r3
 8009144:	4603      	mov	r3, r0
 8009146:	4642      	mov	r2, r8
 8009148:	189b      	adds	r3, r3, r2
 800914a:	66bb      	str	r3, [r7, #104]	; 0x68
 800914c:	464b      	mov	r3, r9
 800914e:	460a      	mov	r2, r1
 8009150:	eb42 0303 	adc.w	r3, r2, r3
 8009154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	663b      	str	r3, [r7, #96]	; 0x60
 8009160:	667a      	str	r2, [r7, #100]	; 0x64
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800916e:	4649      	mov	r1, r9
 8009170:	008b      	lsls	r3, r1, #2
 8009172:	4641      	mov	r1, r8
 8009174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009178:	4641      	mov	r1, r8
 800917a:	008a      	lsls	r2, r1, #2
 800917c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009180:	f7f7 fd82 	bl	8000c88 <__aeabi_uldivmod>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <UART_SetConfig+0x4e4>)
 800918a:	fba3 1302 	umull	r1, r3, r3, r2
 800918e:	095b      	lsrs	r3, r3, #5
 8009190:	2164      	movs	r1, #100	; 0x64
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	3332      	adds	r3, #50	; 0x32
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <UART_SetConfig+0x4e4>)
 800919e:	fba2 2303 	umull	r2, r3, r2, r3
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4422      	add	r2, r4
 80091b0:	609a      	str	r2, [r3, #8]
}
 80091b2:	bf00      	nop
 80091b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091b8:	46bd      	mov	sp, r7
 80091ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091be:	bf00      	nop
 80091c0:	51eb851f 	.word	0x51eb851f

080091c4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80091c4:	b084      	sub	sp, #16
 80091c6:	b480      	push	{r7}
 80091c8:	b085      	sub	sp, #20
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	f107 001c 	add.w	r0, r7, #28
 80091d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80091da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80091dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80091de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80091e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80091e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80091ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80091ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80091fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	b004      	add	sp, #16
 8009218:	4770      	bx	lr

0800921a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2203      	movs	r2, #3
 8009262:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0303 	and.w	r3, r3, #3
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800928e:	b480      	push	{r7}
 8009290:	b085      	sub	sp, #20
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80092ac:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80092b2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80092b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80092c8:	f023 030f 	bic.w	r3, r3, #15
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	b2db      	uxtb	r3, r3
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3314      	adds	r3, #20
 800930a:	461a      	mov	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	4413      	add	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
}  
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009348:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800934e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009354:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800936c:	2300      	movs	r3, #0

}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b088      	sub	sp, #32
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009388:	2310      	movs	r3, #16
 800938a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009398:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff ff74 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80093a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093aa:	2110      	movs	r1, #16
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa19 	bl	80097e4 <SDMMC_GetCmdResp1>
 80093b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093b4:	69fb      	ldr	r3, [r7, #28]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b088      	sub	sp, #32
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80093cc:	2311      	movs	r3, #17
 80093ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093d0:	2340      	movs	r3, #64	; 0x40
 80093d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093de:	f107 0308 	add.w	r3, r7, #8
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ff52 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80093ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ee:	2111      	movs	r1, #17
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f9f7 	bl	80097e4 <SDMMC_GetCmdResp1>
 80093f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093f8:	69fb      	ldr	r3, [r7, #28]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b088      	sub	sp, #32
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009410:	2312      	movs	r3, #18
 8009412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800941c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009420:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009422:	f107 0308 	add.w	r3, r7, #8
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff30 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800942e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009432:	2112      	movs	r1, #18
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9d5 	bl	80097e4 <SDMMC_GetCmdResp1>
 800943a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800943c:	69fb      	ldr	r3, [r7, #28]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3720      	adds	r7, #32
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b088      	sub	sp, #32
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009454:	2318      	movs	r3, #24
 8009456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009458:	2340      	movs	r3, #64	; 0x40
 800945a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009464:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009466:	f107 0308 	add.w	r3, r7, #8
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff ff0e 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009472:	f241 3288 	movw	r2, #5000	; 0x1388
 8009476:	2118      	movs	r1, #24
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f9b3 	bl	80097e4 <SDMMC_GetCmdResp1>
 800947e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009480:	69fb      	ldr	r3, [r7, #28]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3720      	adds	r7, #32
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b088      	sub	sp, #32
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009498:	2319      	movs	r3, #25
 800949a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800949c:	2340      	movs	r3, #64	; 0x40
 800949e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094a0:	2300      	movs	r3, #0
 80094a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094aa:	f107 0308 	add.w	r3, r7, #8
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff feec 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80094b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ba:	2119      	movs	r1, #25
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f991 	bl	80097e4 <SDMMC_GetCmdResp1>
 80094c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094c4:	69fb      	ldr	r3, [r7, #28]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80094dc:	230c      	movs	r3, #12
 80094de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094e0:	2340      	movs	r3, #64	; 0x40
 80094e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff feca 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80094fa:	4a05      	ldr	r2, [pc, #20]	; (8009510 <SDMMC_CmdStopTransfer+0x40>)
 80094fc:	210c      	movs	r1, #12
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f970 	bl	80097e4 <SDMMC_GetCmdResp1>
 8009504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009506:	69fb      	ldr	r3, [r7, #28]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3720      	adds	r7, #32
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	05f5e100 	.word	0x05f5e100

08009514 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08a      	sub	sp, #40	; 0x28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009524:	2307      	movs	r3, #7
 8009526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009528:	2340      	movs	r3, #64	; 0x40
 800952a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800952c:	2300      	movs	r3, #0
 800952e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009534:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009536:	f107 0310 	add.w	r3, r7, #16
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fea6 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009542:	f241 3288 	movw	r2, #5000	; 0x1388
 8009546:	2107      	movs	r1, #7
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f94b 	bl	80097e4 <SDMMC_GetCmdResp1>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009552:	4618      	mov	r0, r3
 8009554:	3728      	adds	r7, #40	; 0x28
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b088      	sub	sp, #32
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009578:	f107 0308 	add.w	r3, r7, #8
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fe85 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fb65 	bl	8009c54 <SDMMC_GetCmdError>
 800958a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800958c:	69fb      	ldr	r3, [r7, #28]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b088      	sub	sp, #32
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800959e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80095a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80095a4:	2308      	movs	r3, #8
 80095a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095a8:	2340      	movs	r3, #64	; 0x40
 80095aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095b6:	f107 0308 	add.w	r3, r7, #8
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fe66 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 faf8 	bl	8009bb8 <SDMMC_GetCmdResp7>
 80095c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ca:	69fb      	ldr	r3, [r7, #28]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3720      	adds	r7, #32
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80095e2:	2337      	movs	r3, #55	; 0x37
 80095e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095f4:	f107 0308 	add.w	r3, r7, #8
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fe47 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009600:	f241 3288 	movw	r2, #5000	; 0x1388
 8009604:	2137      	movs	r1, #55	; 0x37
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8ec 	bl	80097e4 <SDMMC_GetCmdResp1>
 800960c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800960e:	69fb      	ldr	r3, [r7, #28]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800962c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800962e:	2329      	movs	r3, #41	; 0x29
 8009630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009632:	2340      	movs	r3, #64	; 0x40
 8009634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800963a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff fe21 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f9ff 	bl	8009a50 <SDMMC_GetCmdResp3>
 8009652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009654:	69fb      	ldr	r3, [r7, #28]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b088      	sub	sp, #32
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800966c:	2306      	movs	r3, #6
 800966e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800967e:	f107 0308 	add.w	r3, r7, #8
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fe02 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800968a:	f241 3288 	movw	r2, #5000	; 0x1388
 800968e:	2106      	movs	r1, #6
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f8a7 	bl	80097e4 <SDMMC_GetCmdResp1>
 8009696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009698:	69fb      	ldr	r3, [r7, #28]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3720      	adds	r7, #32
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b088      	sub	sp, #32
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80096ae:	2333      	movs	r3, #51	; 0x33
 80096b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096b6:	2300      	movs	r3, #0
 80096b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fde1 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80096cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d0:	2133      	movs	r1, #51	; 0x33
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f886 	bl	80097e4 <SDMMC_GetCmdResp1>
 80096d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096da:	69fb      	ldr	r3, [r7, #28]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80096f0:	2302      	movs	r3, #2
 80096f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80096f4:	23c0      	movs	r3, #192	; 0xc0
 80096f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fdc0 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f956 	bl	80099c0 <SDMMC_GetCmdResp2>
 8009714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009716:	69fb      	ldr	r3, [r7, #28]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3720      	adds	r7, #32
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800972e:	2309      	movs	r3, #9
 8009730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009732:	23c0      	movs	r3, #192	; 0xc0
 8009734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800973a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800973e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009740:	f107 0308 	add.w	r3, r7, #8
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fda1 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f937 	bl	80099c0 <SDMMC_GetCmdResp2>
 8009752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009754:	69fb      	ldr	r3, [r7, #28]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b088      	sub	sp, #32
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800976c:	2303      	movs	r3, #3
 800976e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009770:	2340      	movs	r3, #64	; 0x40
 8009772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800977c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800977e:	f107 0308 	add.w	r3, r7, #8
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fd82 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	2103      	movs	r1, #3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f99c 	bl	8009acc <SDMMC_GetCmdResp6>
 8009794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009796:	69fb      	ldr	r3, [r7, #28]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3720      	adds	r7, #32
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80097ae:	230d      	movs	r3, #13
 80097b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097b2:	2340      	movs	r3, #64	; 0x40
 80097b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097c0:	f107 0308 	add.w	r3, r7, #8
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff fd61 	bl	800928e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80097cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d0:	210d      	movs	r1, #13
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f806 	bl	80097e4 <SDMMC_GetCmdResp1>
 80097d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097da:	69fb      	ldr	r3, [r7, #28]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	460b      	mov	r3, r1
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80097f2:	4b70      	ldr	r3, [pc, #448]	; (80099b4 <SDMMC_GetCmdResp1+0x1d0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a70      	ldr	r2, [pc, #448]	; (80099b8 <SDMMC_GetCmdResp1+0x1d4>)
 80097f8:	fba2 2303 	umull	r2, r3, r2, r3
 80097fc:	0a5a      	lsrs	r2, r3, #9
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	fb02 f303 	mul.w	r3, r2, r3
 8009804:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	1e5a      	subs	r2, r3, #1
 800980a:	61fa      	str	r2, [r7, #28]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009814:	e0c9      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0ef      	beq.n	8009806 <SDMMC_GetCmdResp1+0x22>
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1ea      	bne.n	8009806 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2204      	movs	r2, #4
 8009840:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009842:	2304      	movs	r3, #4
 8009844:	e0b1      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d004      	beq.n	800985c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009858:	2301      	movs	r3, #1
 800985a:	e0a6      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	22c5      	movs	r2, #197	; 0xc5
 8009860:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7ff fd3d 	bl	80092e2 <SDIO_GetCommandResponse>
 8009868:	4603      	mov	r3, r0
 800986a:	461a      	mov	r2, r3
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	4293      	cmp	r3, r2
 8009870:	d001      	beq.n	8009876 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009872:	2301      	movs	r3, #1
 8009874:	e099      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009876:	2100      	movs	r1, #0
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7ff fd3f 	bl	80092fc <SDIO_GetResponse>
 800987e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	4b4e      	ldr	r3, [pc, #312]	; (80099bc <SDMMC_GetCmdResp1+0x1d8>)
 8009884:	4013      	ands	r3, r2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800988a:	2300      	movs	r3, #0
 800988c:	e08d      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	da02      	bge.n	800989a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009898:	e087      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	e080      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80098b2:	2380      	movs	r3, #128	; 0x80
 80098b4:	e079      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80098c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c4:	e071      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80098d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d4:	e069      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80098e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e4:	e061      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80098f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098f4:	e059      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009904:	e051      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009914:	e049      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009924:	e041      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009934:	e039      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009944:	e031      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009954:	e029      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009960:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009964:	e021      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009974:	e019      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009980:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009984:	e011      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009994:	e009      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f003 0308 	and.w	r3, r3, #8
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80099a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80099a4:	e001      	b.n	80099aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80099a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000008 	.word	0x20000008
 80099b8:	10624dd3 	.word	0x10624dd3
 80099bc:	fdffe008 	.word	0xfdffe008

080099c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099c8:	4b1f      	ldr	r3, [pc, #124]	; (8009a48 <SDMMC_GetCmdResp2+0x88>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a1f      	ldr	r2, [pc, #124]	; (8009a4c <SDMMC_GetCmdResp2+0x8c>)
 80099ce:	fba2 2303 	umull	r2, r3, r2, r3
 80099d2:	0a5b      	lsrs	r3, r3, #9
 80099d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d8:	fb02 f303 	mul.w	r3, r2, r3
 80099dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	1e5a      	subs	r2, r3, #1
 80099e2:	60fa      	str	r2, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d102      	bne.n	80099ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099ec:	e026      	b.n	8009a3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0ef      	beq.n	80099de <SDMMC_GetCmdResp2+0x1e>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1ea      	bne.n	80099de <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2204      	movs	r2, #4
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a1a:	2304      	movs	r3, #4
 8009a1c:	e00e      	b.n	8009a3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e003      	b.n	8009a3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	22c5      	movs	r2, #197	; 0xc5
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	20000008 	.word	0x20000008
 8009a4c:	10624dd3 	.word	0x10624dd3

08009a50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a58:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <SDMMC_GetCmdResp3+0x74>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1a      	ldr	r2, [pc, #104]	; (8009ac8 <SDMMC_GetCmdResp3+0x78>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	0a5b      	lsrs	r3, r3, #9
 8009a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a68:	fb02 f303 	mul.w	r3, r2, r3
 8009a6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	1e5a      	subs	r2, r3, #1
 8009a72:	60fa      	str	r2, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a7c:	e01b      	b.n	8009ab6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0ef      	beq.n	8009a6e <SDMMC_GetCmdResp3+0x1e>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1ea      	bne.n	8009a6e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aaa:	2304      	movs	r3, #4
 8009aac:	e003      	b.n	8009ab6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	22c5      	movs	r2, #197	; 0xc5
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20000008 	.word	0x20000008
 8009ac8:	10624dd3 	.word	0x10624dd3

08009acc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ada:	4b35      	ldr	r3, [pc, #212]	; (8009bb0 <SDMMC_GetCmdResp6+0xe4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a35      	ldr	r2, [pc, #212]	; (8009bb4 <SDMMC_GetCmdResp6+0xe8>)
 8009ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae4:	0a5b      	lsrs	r3, r3, #9
 8009ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aea:	fb02 f303 	mul.w	r3, r2, r3
 8009aee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	1e5a      	subs	r2, r3, #1
 8009af4:	61fa      	str	r2, [r7, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009afe:	e052      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0ef      	beq.n	8009af0 <SDMMC_GetCmdResp6+0x24>
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1ea      	bne.n	8009af0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f003 0304 	and.w	r3, r3, #4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	e03a      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e02f      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff fbcb 	bl	80092e2 <SDIO_GetCommandResponse>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d001      	beq.n	8009b5a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e025      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	22c5      	movs	r2, #197	; 0xc5
 8009b5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009b60:	2100      	movs	r1, #0
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff fbca 	bl	80092fc <SDIO_GetResponse>
 8009b68:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e011      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b90:	e009      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ba0:	e001      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3720      	adds	r7, #32
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000008 	.word	0x20000008
 8009bb4:	10624dd3 	.word	0x10624dd3

08009bb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009bc0:	4b22      	ldr	r3, [pc, #136]	; (8009c4c <SDMMC_GetCmdResp7+0x94>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a22      	ldr	r2, [pc, #136]	; (8009c50 <SDMMC_GetCmdResp7+0x98>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	0a5b      	lsrs	r3, r3, #9
 8009bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd0:	fb02 f303 	mul.w	r3, r2, r3
 8009bd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1e5a      	subs	r2, r3, #1
 8009bda:	60fa      	str	r2, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009be4:	e02c      	b.n	8009c40 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0ef      	beq.n	8009bd6 <SDMMC_GetCmdResp7+0x1e>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1ea      	bne.n	8009bd6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2204      	movs	r2, #4
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c12:	2304      	movs	r3, #4
 8009c14:	e014      	b.n	8009c40 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e009      	b.n	8009c40 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2240      	movs	r2, #64	; 0x40
 8009c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009c3e:	2300      	movs	r3, #0
  
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	20000008 	.word	0x20000008
 8009c50:	10624dd3 	.word	0x10624dd3

08009c54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c5c:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <SDMMC_GetCmdError+0x50>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a11      	ldr	r2, [pc, #68]	; (8009ca8 <SDMMC_GetCmdError+0x54>)
 8009c62:	fba2 2303 	umull	r2, r3, r2, r3
 8009c66:	0a5b      	lsrs	r3, r3, #9
 8009c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6c:	fb02 f303 	mul.w	r3, r2, r3
 8009c70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	1e5a      	subs	r2, r3, #1
 8009c76:	60fa      	str	r2, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c80:	e009      	b.n	8009c96 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f1      	beq.n	8009c72 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	22c5      	movs	r2, #197	; 0xc5
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000008 	.word	0x20000008
 8009ca8:	10624dd3 	.word	0x10624dd3

08009cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
    /*## FatFS: Link the SD driver ###########################*/
    retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009cb0:	4908      	ldr	r1, [pc, #32]	; (8009cd4 <MX_FATFS_Init+0x28>)
 8009cb2:	4809      	ldr	r0, [pc, #36]	; (8009cd8 <MX_FATFS_Init+0x2c>)
 8009cb4:	f001 ffe0 	bl	800bc78 <FATFS_LinkDriver>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <MX_FATFS_Init+0x30>)
 8009cbe:	701a      	strb	r2, [r3, #0]
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009cc0:	4907      	ldr	r1, [pc, #28]	; (8009ce0 <MX_FATFS_Init+0x34>)
 8009cc2:	4808      	ldr	r0, [pc, #32]	; (8009ce4 <MX_FATFS_Init+0x38>)
 8009cc4:	f001 ffd8 	bl	800bc78 <FATFS_LinkDriver>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <MX_FATFS_Init+0x3c>)
 8009cce:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    /* additional user code for init */
    /* USER CODE END Init */
}
 8009cd0:	bf00      	nop
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200011cc 	.word	0x200011cc
 8009cd8:	08013f50 	.word	0x08013f50
 8009cdc:	200011c8 	.word	0x200011c8
 8009ce0:	200011d4 	.word	0x200011d4
 8009ce4:	20000014 	.word	0x20000014
 8009ce8:	200011d0 	.word	0x200011d0

08009cec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009cf6:	f000 f896 	bl	8009e26 <BSP_SD_IsDetected>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d001      	beq.n	8009d04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e012      	b.n	8009d2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009d04:	480b      	ldr	r0, [pc, #44]	; (8009d34 <BSP_SD_Init+0x48>)
 8009d06:	f7fb f8bf 	bl	8004e88 <HAL_SD_Init>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d18:	4806      	ldr	r0, [pc, #24]	; (8009d34 <BSP_SD_Init+0x48>)
 8009d1a:	f7fb fe8d 	bl	8005a38 <HAL_SD_ConfigWideBusOperation>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009d28:	79fb      	ldrb	r3, [r7, #7]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000c5c 	.word	0x20000c5c

08009d38 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	68f9      	ldr	r1, [r7, #12]
 8009d4e:	4806      	ldr	r0, [pc, #24]	; (8009d68 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009d50:	f7fb f94a 	bl	8004fe8 <HAL_SD_ReadBlocks_DMA>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	20000c5c 	.word	0x20000c5c

08009d6c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	68f9      	ldr	r1, [r7, #12]
 8009d82:	4806      	ldr	r0, [pc, #24]	; (8009d9c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009d84:	f7fb fa12 	bl	80051ac <HAL_SD_WriteBlocks_DMA>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000c5c 	.word	0x20000c5c

08009da0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009da4:	4805      	ldr	r0, [pc, #20]	; (8009dbc <BSP_SD_GetCardState+0x1c>)
 8009da6:	f7fb fee1 	bl	8005b6c <HAL_SD_GetCardState>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	bf14      	ite	ne
 8009db0:	2301      	movne	r3, #1
 8009db2:	2300      	moveq	r3, #0
 8009db4:	b2db      	uxtb	r3, r3
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20000c5c 	.word	0x20000c5c

08009dc0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	4803      	ldr	r0, [pc, #12]	; (8009dd8 <BSP_SD_GetCardInfo+0x18>)
 8009dcc:	f7fb fe08 	bl	80059e0 <HAL_SD_GetCardInfo>
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000c5c 	.word	0x20000c5c

08009ddc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009de4:	f000 f818 	bl	8009e18 <BSP_SD_AbortCallback>
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009df8:	f000 f9a8 	bl	800a14c <BSP_SD_WriteCpltCallback>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009e0c:	f000 f9aa 	bl	800a164 <BSP_SD_ReadCpltCallback>
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0

}
 8009e1c:	bf00      	nop
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b082      	sub	sp, #8
 8009e2a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009e30:	f000 f80c 	bl	8009e4c <BSP_PlatformIsDetected>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	b2db      	uxtb	r3, r3
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009e52:	2301      	movs	r3, #1
 8009e54:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e5a:	4806      	ldr	r0, [pc, #24]	; (8009e74 <BSP_PlatformIsDetected+0x28>)
 8009e5c:	f7fa fb1a 	bl	8004494 <HAL_GPIO_ReadPin>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009e66:	2300      	movs	r3, #0
 8009e68:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	40021400 	.word	0x40021400

08009e78 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009e80:	f7f9 f850 	bl	8002f24 <HAL_GetTick>
 8009e84:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009e86:	e006      	b.n	8009e96 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e88:	f7ff ff8a 	bl	8009da0 <BSP_SD_GetCardState>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e009      	b.n	8009eaa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009e96:	f7f9 f845 	bl	8002f24 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d8f0      	bhi.n	8009e88 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <SD_CheckStatus+0x38>)
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009ec4:	f7ff ff6c 	bl	8009da0 <BSP_SD_GetCardState>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d107      	bne.n	8009ede <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <SD_CheckStatus+0x38>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b04      	ldr	r3, [pc, #16]	; (8009eec <SD_CheckStatus+0x38>)
 8009edc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009ede:	4b03      	ldr	r3, [pc, #12]	; (8009eec <SD_CheckStatus+0x38>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	b2db      	uxtb	r3, r3
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000011 	.word	0x20000011

08009ef0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009efa:	f7ff fef7 	bl	8009cec <BSP_SD_Init>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d107      	bne.n	8009f14 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff ffd4 	bl	8009eb4 <SD_CheckStatus>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <SD_initialize+0x34>)
 8009f12:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009f14:	4b03      	ldr	r3, [pc, #12]	; (8009f24 <SD_initialize+0x34>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	b2db      	uxtb	r3, r3
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000011 	.word	0x20000011

08009f28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff ffbd 	bl	8009eb4 <SD_CheckStatus>
 8009f3a:	4603      	mov	r3, r0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60b9      	str	r1, [r7, #8]
 8009f4c:	607a      	str	r2, [r7, #4]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009f58:	f247 5030 	movw	r0, #30000	; 0x7530
 8009f5c:	f7ff ff8c 	bl	8009e78 <SD_CheckStatusWithTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da01      	bge.n	8009f6a <SD_read+0x26>
  {
    return res;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	e03b      	b.n	8009fe2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	68b8      	ldr	r0, [r7, #8]
 8009f70:	f7ff fee2 	bl	8009d38 <BSP_SD_ReadBlocks_DMA>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d132      	bne.n	8009fe0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009f7a:	4b1c      	ldr	r3, [pc, #112]	; (8009fec <SD_read+0xa8>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009f80:	f7f8 ffd0 	bl	8002f24 <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009f86:	bf00      	nop
 8009f88:	4b18      	ldr	r3, [pc, #96]	; (8009fec <SD_read+0xa8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d108      	bne.n	8009fa2 <SD_read+0x5e>
 8009f90:	f7f8 ffc8 	bl	8002f24 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d9f2      	bls.n	8009f88 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009fa2:	4b12      	ldr	r3, [pc, #72]	; (8009fec <SD_read+0xa8>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	75fb      	strb	r3, [r7, #23]
 8009fae:	e017      	b.n	8009fe0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009fb0:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <SD_read+0xa8>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009fb6:	f7f8 ffb5 	bl	8002f24 <HAL_GetTick>
 8009fba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009fbc:	e007      	b.n	8009fce <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009fbe:	f7ff feef 	bl	8009da0 <BSP_SD_GetCardState>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d102      	bne.n	8009fce <SD_read+0x8a>
          {
            res = RES_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009fcc:	e008      	b.n	8009fe0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009fce:	f7f8 ffa9 	bl	8002f24 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	f247 522f 	movw	r2, #29999	; 0x752f
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d9ee      	bls.n	8009fbe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200011dc 	.word	0x200011dc

08009ff0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a004:	4b24      	ldr	r3, [pc, #144]	; (800a098 <SD_write+0xa8>)
 800a006:	2200      	movs	r2, #0
 800a008:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a00a:	f247 5030 	movw	r0, #30000	; 0x7530
 800a00e:	f7ff ff33 	bl	8009e78 <SD_CheckStatusWithTimeout>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	da01      	bge.n	800a01c <SD_write+0x2c>
  {
    return res;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	e038      	b.n	800a08e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	68b8      	ldr	r0, [r7, #8]
 800a022:	f7ff fea3 	bl	8009d6c <BSP_SD_WriteBlocks_DMA>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d12f      	bne.n	800a08c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a02c:	f7f8 ff7a 	bl	8002f24 <HAL_GetTick>
 800a030:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a032:	bf00      	nop
 800a034:	4b18      	ldr	r3, [pc, #96]	; (800a098 <SD_write+0xa8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d108      	bne.n	800a04e <SD_write+0x5e>
 800a03c:	f7f8 ff72 	bl	8002f24 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	f247 522f 	movw	r2, #29999	; 0x752f
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d9f2      	bls.n	800a034 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a04e:	4b12      	ldr	r3, [pc, #72]	; (800a098 <SD_write+0xa8>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d102      	bne.n	800a05c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	75fb      	strb	r3, [r7, #23]
 800a05a:	e017      	b.n	800a08c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a05c:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <SD_write+0xa8>)
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a062:	f7f8 ff5f 	bl	8002f24 <HAL_GetTick>
 800a066:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a068:	e007      	b.n	800a07a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a06a:	f7ff fe99 	bl	8009da0 <BSP_SD_GetCardState>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <SD_write+0x8a>
          {
            res = RES_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	75fb      	strb	r3, [r7, #23]
            break;
 800a078:	e008      	b.n	800a08c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a07a:	f7f8 ff53 	bl	8002f24 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	f247 522f 	movw	r2, #29999	; 0x752f
 800a088:	4293      	cmp	r3, r2
 800a08a:	d9ee      	bls.n	800a06a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	200011d8 	.word	0x200011d8

0800a09c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08c      	sub	sp, #48	; 0x30
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	603a      	str	r2, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a0b2:	4b25      	ldr	r3, [pc, #148]	; (800a148 <SD_ioctl+0xac>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <SD_ioctl+0x28>
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e03c      	b.n	800a13e <SD_ioctl+0xa2>

  switch (cmd)
 800a0c4:	79bb      	ldrb	r3, [r7, #6]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d834      	bhi.n	800a134 <SD_ioctl+0x98>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <SD_ioctl+0x34>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e1 	.word	0x0800a0e1
 800a0d4:	0800a0e9 	.word	0x0800a0e9
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a11b 	.word	0x0800a11b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0e6:	e028      	b.n	800a13a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0e8:	f107 030c 	add.w	r3, r7, #12
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fe67 	bl	8009dc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0fe:	e01c      	b.n	800a13a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a100:	f107 030c 	add.w	r3, r7, #12
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff fe5b 	bl	8009dc0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a118:	e00f      	b.n	800a13a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a11a:	f107 030c 	add.w	r3, r7, #12
 800a11e:	4618      	mov	r0, r3
 800a120:	f7ff fe4e 	bl	8009dc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	0a5a      	lsrs	r2, r3, #9
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a132:	e002      	b.n	800a13a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a134:	2304      	movs	r3, #4
 800a136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3730      	adds	r7, #48	; 0x30
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000011 	.word	0x20000011

0800a14c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a150:	4b03      	ldr	r3, [pc, #12]	; (800a160 <BSP_SD_WriteCpltCallback+0x14>)
 800a152:	2201      	movs	r2, #1
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	200011d8 	.word	0x200011d8

0800a164 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a168:	4b03      	ldr	r3, [pc, #12]	; (800a178 <BSP_SD_ReadCpltCallback+0x14>)
 800a16a:	2201      	movs	r2, #1
 800a16c:	601a      	str	r2, [r3, #0]
}
 800a16e:	bf00      	nop
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	200011dc 	.word	0x200011dc

0800a17c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a186:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <USER_initialize+0x24>)
 800a188:	2201      	movs	r2, #1
 800a18a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a18c:	4b04      	ldr	r3, [pc, #16]	; (800a1a0 <USER_initialize+0x24>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	20000012 	.word	0x20000012

0800a1a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800a1ae:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <USER_status+0x24>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a1b4:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <USER_status+0x24>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	20000012 	.word	0x20000012

0800a1cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800a1dc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800a1fa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	603a      	str	r2, [r7, #0]
 800a212:	71fb      	strb	r3, [r7, #7]
 800a214:	460b      	mov	r3, r1
 800a216:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	73fb      	strb	r3, [r7, #15]
    return res;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a236:	79fb      	ldrb	r3, [r7, #7]
 800a238:	4a08      	ldr	r2, [pc, #32]	; (800a25c <disk_status+0x30>)
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	79fa      	ldrb	r2, [r7, #7]
 800a244:	4905      	ldr	r1, [pc, #20]	; (800a25c <disk_status+0x30>)
 800a246:	440a      	add	r2, r1
 800a248:	7b12      	ldrb	r2, [r2, #12]
 800a24a:	4610      	mov	r0, r2
 800a24c:	4798      	blx	r3
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	200011ec 	.word	0x200011ec

0800a260 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	4a0d      	ldr	r2, [pc, #52]	; (800a2a8 <disk_initialize+0x48>)
 800a272:	5cd3      	ldrb	r3, [r2, r3]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d111      	bne.n	800a29c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	4a0b      	ldr	r2, [pc, #44]	; (800a2a8 <disk_initialize+0x48>)
 800a27c:	2101      	movs	r1, #1
 800a27e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	4a09      	ldr	r2, [pc, #36]	; (800a2a8 <disk_initialize+0x48>)
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	79fa      	ldrb	r2, [r7, #7]
 800a28e:	4906      	ldr	r1, [pc, #24]	; (800a2a8 <disk_initialize+0x48>)
 800a290:	440a      	add	r2, r1
 800a292:	7b12      	ldrb	r2, [r2, #12]
 800a294:	4610      	mov	r0, r2
 800a296:	4798      	blx	r3
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200011ec 	.word	0x200011ec

0800a2ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a2ac:	b590      	push	{r4, r7, lr}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	4a0a      	ldr	r2, [pc, #40]	; (800a2e8 <disk_read+0x3c>)
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	689c      	ldr	r4, [r3, #8]
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	4a07      	ldr	r2, [pc, #28]	; (800a2e8 <disk_read+0x3c>)
 800a2cc:	4413      	add	r3, r2
 800a2ce:	7b18      	ldrb	r0, [r3, #12]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	47a0      	blx	r4
 800a2d8:	4603      	mov	r3, r0
 800a2da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd90      	pop	{r4, r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200011ec 	.word	0x200011ec

0800a2ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a2fc:	89fb      	ldrh	r3, [r7, #14]
 800a2fe:	021b      	lsls	r3, r3, #8
 800a300:	b21a      	sxth	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	b21b      	sxth	r3, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a30e:	89fb      	ldrh	r3, [r7, #14]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3303      	adds	r3, #3
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	3202      	adds	r2, #2
 800a334:	7812      	ldrb	r2, [r2, #0]
 800a336:	4313      	orrs	r3, r2
 800a338:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	3201      	adds	r2, #1
 800a342:	7812      	ldrb	r2, [r2, #0]
 800a344:	4313      	orrs	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	7812      	ldrb	r2, [r2, #0]
 800a350:	4313      	orrs	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]
	return rv;
 800a354:	68fb      	ldr	r3, [r7, #12]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a362:	b480      	push	{r7}
 800a364:	b087      	sub	sp, #28
 800a366:	af00      	add	r7, sp, #0
 800a368:	60f8      	str	r0, [r7, #12]
 800a36a:	60b9      	str	r1, [r7, #8]
 800a36c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00d      	beq.n	800a398 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	1c53      	adds	r3, r2, #1
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	1c59      	adds	r1, r3, #1
 800a386:	6179      	str	r1, [r7, #20]
 800a388:	7812      	ldrb	r2, [r2, #0]
 800a38a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3b01      	subs	r3, #1
 800a390:	607b      	str	r3, [r7, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1f1      	bne.n	800a37c <mem_cpy+0x1a>
	}
}
 800a398:	bf00      	nop
 800a39a:	371c      	adds	r7, #28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	617a      	str	r2, [r7, #20]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	607b      	str	r3, [r7, #4]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f3      	bne.n	800a3b4 <mem_set+0x10>
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a3da:	b480      	push	{r7}
 800a3dc:	b089      	sub	sp, #36	; 0x24
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	61fa      	str	r2, [r7, #28]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	61ba      	str	r2, [r7, #24]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	1acb      	subs	r3, r1, r3
 800a406:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <mem_cmp+0x40>
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0eb      	beq.n	800a3f2 <mem_cmp+0x18>

	return r;
 800a41a:	697b      	ldr	r3, [r7, #20]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3724      	adds	r7, #36	; 0x24
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a432:	e002      	b.n	800a43a <chk_chr+0x12>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3301      	adds	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d005      	beq.n	800a44e <chk_chr+0x26>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d1f2      	bne.n	800a434 <chk_chr+0xc>
	return *str;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	781b      	ldrb	r3, [r3, #0]
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d016      	beq.n	800a4a4 <move_window+0x46>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d113      	bne.n	800a4a4 <move_window+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	7858      	ldrb	r0, [r3, #1]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a486:	2301      	movs	r3, #1
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	f7ff ff0f 	bl	800a2ac <disk_read>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d004      	beq.n	800a49e <move_window+0x40>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a494:	f04f 33ff 	mov.w	r3, #4294967295
 800a498:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
	return res;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	3b02      	subs	r3, #2
 800a4bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	3b02      	subs	r3, #2
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d301      	bcc.n	800a4ce <clust2sect+0x20>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e008      	b.n	800a4e0 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	895b      	ldrh	r3, [r3, #10]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	fb03 f202 	mul.w	r2, r3, r2
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	4413      	add	r3, r2
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d904      	bls.n	800a50c <get_fat+0x20>
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d302      	bcc.n	800a512 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a50c:	2301      	movs	r3, #1
 800a50e:	617b      	str	r3, [r7, #20]
 800a510:	e08f      	b.n	800a632 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a512:	f04f 33ff 	mov.w	r3, #4294967295
 800a516:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d062      	beq.n	800a5e6 <get_fat+0xfa>
 800a520:	2b03      	cmp	r3, #3
 800a522:	dc7c      	bgt.n	800a61e <get_fat+0x132>
 800a524:	2b01      	cmp	r3, #1
 800a526:	d002      	beq.n	800a52e <get_fat+0x42>
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d042      	beq.n	800a5b2 <get_fat+0xc6>
 800a52c:	e077      	b.n	800a61e <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	085b      	lsrs	r3, r3, #1
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	69da      	ldr	r2, [r3, #28]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	4413      	add	r3, r2
 800a546:	4619      	mov	r1, r3
 800a548:	6938      	ldr	r0, [r7, #16]
 800a54a:	f7ff ff88 	bl	800a45e <move_window>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d167      	bne.n	800a624 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	60fa      	str	r2, [r7, #12]
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	4413      	add	r3, r2
 800a562:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a566:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	69da      	ldr	r2, [r3, #28]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	0a5b      	lsrs	r3, r3, #9
 800a570:	4413      	add	r3, r2
 800a572:	4619      	mov	r1, r3
 800a574:	6938      	ldr	r0, [r7, #16]
 800a576:	f7ff ff72 	bl	800a45e <move_window>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d153      	bne.n	800a628 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4413      	add	r3, r2
 800a58a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	461a      	mov	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4313      	orrs	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <get_fat+0xbc>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	091b      	lsrs	r3, r3, #4
 800a5a6:	e002      	b.n	800a5ae <get_fat+0xc2>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ae:	617b      	str	r3, [r7, #20]
			break;
 800a5b0:	e03f      	b.n	800a632 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	69da      	ldr	r2, [r3, #28]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	4413      	add	r3, r2
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6938      	ldr	r0, [r7, #16]
 800a5c0:	f7ff ff4d 	bl	800a45e <move_window>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d130      	bne.n	800a62c <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5d8:	4413      	add	r3, r2
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fe86 	bl	800a2ec <ld_word>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	617b      	str	r3, [r7, #20]
			break;
 800a5e4:	e025      	b.n	800a632 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	69da      	ldr	r2, [r3, #28]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	09db      	lsrs	r3, r3, #7
 800a5ee:	4413      	add	r3, r2
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6938      	ldr	r0, [r7, #16]
 800a5f4:	f7ff ff33 	bl	800a45e <move_window>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d118      	bne.n	800a630 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a60c:	4413      	add	r3, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fe84 	bl	800a31c <ld_dword>
 800a614:	4603      	mov	r3, r0
 800a616:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a61a:	617b      	str	r3, [r7, #20]
			break;
 800a61c:	e009      	b.n	800a632 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a61e:	2301      	movs	r3, #1
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	e006      	b.n	800a632 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a624:	bf00      	nop
 800a626:	e004      	b.n	800a632 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a628:	bf00      	nop
 800a62a:	e002      	b.n	800a632 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a62c:	bf00      	nop
 800a62e:	e000      	b.n	800a632 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a630:	bf00      	nop
		}
	}

	return val;
 800a632:	697b      	ldr	r3, [r7, #20]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a1b      	ldr	r3, [r3, #32]
 800a650:	3304      	adds	r3, #4
 800a652:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	8952      	ldrh	r2, [r2, #10]
 800a65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a660:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	1d1a      	adds	r2, r3, #4
 800a666:	613a      	str	r2, [r7, #16]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <clmt_clust+0x3a>
 800a672:	2300      	movs	r3, #0
 800a674:	e010      	b.n	800a698 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d307      	bcc.n	800a68e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	3304      	adds	r3, #4
 800a68a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a68c:	e7e9      	b.n	800a662 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a68e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	4413      	add	r3, r2
}
 800a698:	4618      	mov	r0, r3
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ba:	d204      	bcs.n	800a6c6 <dir_sdi+0x22>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e063      	b.n	800a792 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d106      	bne.n	800a6ea <dir_sdi+0x46>
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d902      	bls.n	800a6ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6a1b      	ldr	r3, [r3, #32]
 800a6e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10c      	bne.n	800a70a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	8912      	ldrh	r2, [r2, #8]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d301      	bcc.n	800a700 <dir_sdi+0x5c>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e048      	b.n	800a792 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6a1a      	ldr	r2, [r3, #32]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	619a      	str	r2, [r3, #24]
 800a708:	e029      	b.n	800a75e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	895b      	ldrh	r3, [r3, #10]
 800a70e:	025b      	lsls	r3, r3, #9
 800a710:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a712:	e019      	b.n	800a748 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6979      	ldr	r1, [r7, #20]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fee7 	bl	800a4ec <get_fat>
 800a71e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d101      	bne.n	800a72c <dir_sdi+0x88>
 800a728:	2301      	movs	r3, #1
 800a72a:	e032      	b.n	800a792 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d904      	bls.n	800a73c <dir_sdi+0x98>
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d301      	bcc.n	800a740 <dir_sdi+0x9c>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e028      	b.n	800a792 <dir_sdi+0xee>
			ofs -= csz;
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d2e1      	bcs.n	800a714 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a750:	6979      	ldr	r1, [r7, #20]
 800a752:	6938      	ldr	r0, [r7, #16]
 800a754:	f7ff feab 	bl	800a4ae <clust2sect>
 800a758:	4602      	mov	r2, r0
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <dir_sdi+0xcc>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e010      	b.n	800a792 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699a      	ldr	r2, [r3, #24]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	0a5b      	lsrs	r3, r3, #9
 800a778:	441a      	add	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78a:	441a      	add	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	617b      	str	r3, [r7, #20]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	3320      	adds	r3, #32
 800a7b0:	613b      	str	r3, [r7, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <dir_next+0x28>
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c0:	d301      	bcc.n	800a7c6 <dir_next+0x2c>
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	e05a      	b.n	800a87c <dir_next+0xe2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d148      	bne.n	800a862 <dir_next+0xc8>
		dp->sect++;				/* Next sector */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	1c5a      	adds	r2, r3, #1
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <dir_next+0x5e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	095b      	lsrs	r3, r3, #5
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	8912      	ldrh	r2, [r2, #8]
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d339      	bcc.n	800a862 <dir_next+0xc8>
				dp->sect = 0; return FR_NO_FILE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	619a      	str	r2, [r3, #24]
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	e041      	b.n	800a87c <dir_next+0xe2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	0a5b      	lsrs	r3, r3, #9
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	8952      	ldrh	r2, [r2, #10]
 800a800:	3a01      	subs	r2, #1
 800a802:	4013      	ands	r3, r2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d12c      	bne.n	800a862 <dir_next+0xc8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	4619      	mov	r1, r3
 800a810:	4610      	mov	r0, r2
 800a812:	f7ff fe6b 	bl	800a4ec <get_fat>
 800a816:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d801      	bhi.n	800a822 <dir_next+0x88>
 800a81e:	2302      	movs	r3, #2
 800a820:	e02c      	b.n	800a87c <dir_next+0xe2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d101      	bne.n	800a82e <dir_next+0x94>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e026      	b.n	800a87c <dir_next+0xe2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	429a      	cmp	r2, r3
 800a836:	d30a      	bcc.n	800a84e <dir_next+0xb4>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <dir_next+0xaa>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	619a      	str	r2, [r3, #24]
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	619a      	str	r2, [r3, #24]
 800a84a:	2304      	movs	r3, #4
 800a84c:	e016      	b.n	800a87c <dir_next+0xe2>
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 800a854:	68f9      	ldr	r1, [r7, #12]
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff fe29 	bl	800a4ae <clust2sect>
 800a85c:	4602      	mov	r2, r0
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a874:	441a      	add	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	331a      	adds	r3, #26
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fd2a 	bl	800a2ec <ld_word>
 800a898:	4603      	mov	r3, r0
 800a89a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d109      	bne.n	800a8b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	3314      	adds	r3, #20
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fd1f 	bl	800a2ec <ld_word>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	041b      	lsls	r3, r3, #16
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a8c4:	b590      	push	{r4, r7, lr}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	331a      	adds	r3, #26
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fd0a 	bl	800a2ec <ld_word>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <cmp_lfn+0x1e>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e059      	b.n	800a996 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ea:	1e5a      	subs	r2, r3, #1
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	81fb      	strh	r3, [r7, #14]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	e033      	b.n	800a96a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a902:	4a27      	ldr	r2, [pc, #156]	; (800a9a0 <cmp_lfn+0xdc>)
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	4413      	add	r3, r2
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	4413      	add	r3, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fceb 	bl	800a2ec <ld_word>
 800a916:	4603      	mov	r3, r0
 800a918:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a91a:	89fb      	ldrh	r3, [r7, #14]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01a      	beq.n	800a956 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b3f      	cmp	r3, #63	; 0x3f
 800a924:	d812      	bhi.n	800a94c <cmp_lfn+0x88>
 800a926:	89bb      	ldrh	r3, [r7, #12]
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 f9f1 	bl	800bd10 <ff_wtoupper>
 800a92e:	4603      	mov	r3, r0
 800a930:	461c      	mov	r4, r3
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	617a      	str	r2, [r7, #20]
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	4618      	mov	r0, r3
 800a942:	f001 f9e5 	bl	800bd10 <ff_wtoupper>
 800a946:	4603      	mov	r3, r0
 800a948:	429c      	cmp	r4, r3
 800a94a:	d001      	beq.n	800a950 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a94c:	2300      	movs	r3, #0
 800a94e:	e022      	b.n	800a996 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a950:	89bb      	ldrh	r3, [r7, #12]
 800a952:	81fb      	strh	r3, [r7, #14]
 800a954:	e006      	b.n	800a964 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a956:	89bb      	ldrh	r3, [r7, #12]
 800a958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d001      	beq.n	800a964 <cmp_lfn+0xa0>
 800a960:	2300      	movs	r3, #0
 800a962:	e018      	b.n	800a996 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	3301      	adds	r3, #1
 800a968:	613b      	str	r3, [r7, #16]
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2b0c      	cmp	r3, #12
 800a96e:	d9c8      	bls.n	800a902 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <cmp_lfn+0xd0>
 800a97c:	89fb      	ldrh	r3, [r7, #14]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <cmp_lfn+0xd0>
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	4413      	add	r3, r2
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <cmp_lfn+0xd0>
 800a990:	2300      	movs	r3, #0
 800a992:	e000      	b.n	800a996 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a994:	2301      	movs	r3, #1
}
 800a996:	4618      	mov	r0, r3
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd90      	pop	{r4, r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08013fe4 	.word	0x08013fe4

0800a9a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a9b0:	230b      	movs	r3, #11
 800a9b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	0852      	lsrs	r2, r2, #1
 800a9ba:	01db      	lsls	r3, r3, #7
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	1c59      	adds	r1, r3, #1
 800a9c4:	6079      	str	r1, [r7, #4]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1ed      	bne.n	800a9b4 <sum_sfn+0x10>
	return sum;
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b086      	sub	sp, #24
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fe54 	bl	800a6a4 <dir_sdi>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <dir_find+0x24>
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
 800aa08:	e0a9      	b.n	800ab5e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aa0a:	23ff      	movs	r3, #255	; 0xff
 800aa0c:	753b      	strb	r3, [r7, #20]
 800aa0e:	7d3b      	ldrb	r3, [r7, #20]
 800aa10:	757b      	strb	r3, [r7, #21]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295
 800aa18:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6938      	ldr	r0, [r7, #16]
 800aa22:	f7ff fd1c 	bl	800a45e <move_window>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f040 8090 	bne.w	800ab52 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa3a:	7dbb      	ldrb	r3, [r7, #22]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d102      	bne.n	800aa46 <dir_find+0x60>
 800aa40:	2304      	movs	r3, #4
 800aa42:	75fb      	strb	r3, [r7, #23]
 800aa44:	e08a      	b.n	800ab5c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	330b      	adds	r3, #11
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa52:	73fb      	strb	r3, [r7, #15]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	7bfa      	ldrb	r2, [r7, #15]
 800aa58:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aa5a:	7dbb      	ldrb	r3, [r7, #22]
 800aa5c:	2be5      	cmp	r3, #229	; 0xe5
 800aa5e:	d007      	beq.n	800aa70 <dir_find+0x8a>
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	f003 0308 	and.w	r3, r3, #8
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <dir_find+0x98>
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	2b0f      	cmp	r3, #15
 800aa6e:	d006      	beq.n	800aa7e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aa70:	23ff      	movs	r3, #255	; 0xff
 800aa72:	757b      	strb	r3, [r7, #21]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7a:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa7c:	e05e      	b.n	800ab3c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	2b0f      	cmp	r3, #15
 800aa82:	d136      	bne.n	800aaf2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800aa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d154      	bne.n	800ab3c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800aa92:	7dbb      	ldrb	r3, [r7, #22]
 800aa94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00d      	beq.n	800aab8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	7b5b      	ldrb	r3, [r3, #13]
 800aaa2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800aaa4:	7dbb      	ldrb	r3, [r7, #22]
 800aaa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaaa:	75bb      	strb	r3, [r7, #22]
 800aaac:	7dbb      	ldrb	r3, [r7, #22]
 800aaae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aab8:	7dba      	ldrb	r2, [r7, #22]
 800aaba:	7d7b      	ldrb	r3, [r7, #21]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d115      	bne.n	800aaec <dir_find+0x106>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	330d      	adds	r3, #13
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	7d3a      	ldrb	r2, [r7, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d10e      	bne.n	800aaec <dir_find+0x106>
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	4619      	mov	r1, r3
 800aad8:	4610      	mov	r0, r2
 800aada:	f7ff fef3 	bl	800a8c4 <cmp_lfn>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <dir_find+0x106>
 800aae4:	7d7b      	ldrb	r3, [r7, #21]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	e000      	b.n	800aaee <dir_find+0x108>
 800aaec:	23ff      	movs	r3, #255	; 0xff
 800aaee:	757b      	strb	r3, [r7, #21]
 800aaf0:	e024      	b.n	800ab3c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aaf2:	7d7b      	ldrb	r3, [r7, #21]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d109      	bne.n	800ab0c <dir_find+0x126>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff ff51 	bl	800a9a4 <sum_sfn>
 800ab02:	4603      	mov	r3, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	7d3b      	ldrb	r3, [r7, #20]
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d024      	beq.n	800ab56 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10a      	bne.n	800ab30 <dir_find+0x14a>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	69d8      	ldr	r0, [r3, #28]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3320      	adds	r3, #32
 800ab22:	220b      	movs	r2, #11
 800ab24:	4619      	mov	r1, r3
 800ab26:	f7ff fc58 	bl	800a3da <mem_cmp>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d014      	beq.n	800ab5a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ab30:	23ff      	movs	r3, #255	; 0xff
 800ab32:	757b      	strb	r3, [r7, #21]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff fe2b 	bl	800a79a <dir_next>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f43f af65 	beq.w	800aa1a <dir_find+0x34>
 800ab50:	e004      	b.n	800ab5c <dir_find+0x176>
		if (res != FR_OK) break;
 800ab52:	bf00      	nop
 800ab54:	e002      	b.n	800ab5c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ab56:	bf00      	nop
 800ab58:	e000      	b.n	800ab5c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ab5a:	bf00      	nop

	return res;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	; 0x28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	61ba      	str	r2, [r7, #24]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	4413      	add	r3, r2
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ab96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab98:	2b1f      	cmp	r3, #31
 800ab9a:	d940      	bls.n	800ac1e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ab9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab9e:	2b2f      	cmp	r3, #47	; 0x2f
 800aba0:	d006      	beq.n	800abb0 <create_name+0x48>
 800aba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aba4:	2b5c      	cmp	r3, #92	; 0x5c
 800aba6:	d110      	bne.n	800abca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aba8:	e002      	b.n	800abb0 <create_name+0x48>
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	3301      	adds	r3, #1
 800abae:	61bb      	str	r3, [r7, #24]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	4413      	add	r3, r2
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b2f      	cmp	r3, #47	; 0x2f
 800abba:	d0f6      	beq.n	800abaa <create_name+0x42>
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	4413      	add	r3, r2
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b5c      	cmp	r3, #92	; 0x5c
 800abc6:	d0f0      	beq.n	800abaa <create_name+0x42>
			break;
 800abc8:	e02a      	b.n	800ac20 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b3f      	cmp	r3, #63	; 0x3f
 800abce:	d901      	bls.n	800abd4 <create_name+0x6c>
 800abd0:	2306      	movs	r3, #6
 800abd2:	e17d      	b.n	800aed0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800abd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800abda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abdc:	2101      	movs	r1, #1
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 f85a 	bl	800bc98 <ff_convert>
 800abe4:	4603      	mov	r3, r0
 800abe6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800abe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <create_name+0x8a>
 800abee:	2306      	movs	r3, #6
 800abf0:	e16e      	b.n	800aed0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800abf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abf4:	2b7f      	cmp	r3, #127	; 0x7f
 800abf6:	d809      	bhi.n	800ac0c <create_name+0xa4>
 800abf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abfa:	4619      	mov	r1, r3
 800abfc:	488d      	ldr	r0, [pc, #564]	; (800ae34 <create_name+0x2cc>)
 800abfe:	f7ff fc13 	bl	800a428 <chk_chr>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <create_name+0xa4>
 800ac08:	2306      	movs	r3, #6
 800ac0a:	e161      	b.n	800aed0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	617a      	str	r2, [r7, #20]
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac1a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ac1c:	e7b4      	b.n	800ab88 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ac1e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	441a      	add	r2, r3
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac2c:	2b1f      	cmp	r3, #31
 800ac2e:	d801      	bhi.n	800ac34 <create_name+0xcc>
 800ac30:	2304      	movs	r3, #4
 800ac32:	e000      	b.n	800ac36 <create_name+0xce>
 800ac34:	2300      	movs	r3, #0
 800ac36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ac3a:	e011      	b.n	800ac60 <create_name+0xf8>
		w = lfn[di - 1];
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac42:	3b01      	subs	r3, #1
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ac4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d002      	beq.n	800ac5a <create_name+0xf2>
 800ac54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac56:	2b2e      	cmp	r3, #46	; 0x2e
 800ac58:	d106      	bne.n	800ac68 <create_name+0x100>
		di--;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1ea      	bne.n	800ac3c <create_name+0xd4>
 800ac66:	e000      	b.n	800ac6a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ac68:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4413      	add	r3, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <create_name+0x118>
 800ac7c:	2306      	movs	r3, #6
 800ac7e:	e127      	b.n	800aed0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3320      	adds	r3, #32
 800ac84:	220b      	movs	r2, #11
 800ac86:	2120      	movs	r1, #32
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fb8b 	bl	800a3a4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61bb      	str	r3, [r7, #24]
 800ac92:	e002      	b.n	800ac9a <create_name+0x132>
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	3301      	adds	r3, #1
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	4413      	add	r3, r2
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	2b20      	cmp	r3, #32
 800aca6:	d0f5      	beq.n	800ac94 <create_name+0x12c>
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	4413      	add	r3, r2
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	2b2e      	cmp	r3, #46	; 0x2e
 800acb4:	d0ee      	beq.n	800ac94 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d009      	beq.n	800acd0 <create_name+0x168>
 800acbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acc0:	f043 0303 	orr.w	r3, r3, #3
 800acc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800acc8:	e002      	b.n	800acd0 <create_name+0x168>
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3b01      	subs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d009      	beq.n	800acea <create_name+0x182>
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	3b01      	subs	r3, #1
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	2b2e      	cmp	r3, #46	; 0x2e
 800ace8:	d1ef      	bne.n	800acca <create_name+0x162>

	i = b = 0; ni = 8;
 800acea:	2300      	movs	r3, #0
 800acec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800acf0:	2300      	movs	r3, #0
 800acf2:	623b      	str	r3, [r7, #32]
 800acf4:	2308      	movs	r3, #8
 800acf6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	61ba      	str	r2, [r7, #24]
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4413      	add	r3, r2
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ad08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 8090 	beq.w	800ae30 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ad10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d006      	beq.n	800ad24 <create_name+0x1bc>
 800ad16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad18:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1a:	d10a      	bne.n	800ad32 <create_name+0x1ca>
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d006      	beq.n	800ad32 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ad24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad28:	f043 0303 	orr.w	r3, r3, #3
 800ad2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad30:	e07d      	b.n	800ae2e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ad32:	6a3a      	ldr	r2, [r7, #32]
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d203      	bcs.n	800ad42 <create_name+0x1da>
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d123      	bne.n	800ad8a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	2b0b      	cmp	r3, #11
 800ad46:	d106      	bne.n	800ad56 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ad48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad4c:	f043 0303 	orr.w	r3, r3, #3
 800ad50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad54:	e075      	b.n	800ae42 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d005      	beq.n	800ad6a <create_name+0x202>
 800ad5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad62:	f043 0303 	orr.w	r3, r3, #3
 800ad66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d866      	bhi.n	800ae40 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	61bb      	str	r3, [r7, #24]
 800ad76:	2308      	movs	r3, #8
 800ad78:	623b      	str	r3, [r7, #32]
 800ad7a:	230b      	movs	r3, #11
 800ad7c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ad7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ad88:	e051      	b.n	800ae2e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ad8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ad8e:	d914      	bls.n	800adba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ad90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 ff7f 	bl	800bc98 <ff_convert>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ad9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <create_name+0x246>
 800ada4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ada6:	3b80      	subs	r3, #128	; 0x80
 800ada8:	4a23      	ldr	r2, [pc, #140]	; (800ae38 <create_name+0x2d0>)
 800adaa:	5cd3      	ldrb	r3, [r2, r3]
 800adac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800adae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adb2:	f043 0302 	orr.w	r3, r3, #2
 800adb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800adba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <create_name+0x268>
 800adc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adc2:	4619      	mov	r1, r3
 800adc4:	481d      	ldr	r0, [pc, #116]	; (800ae3c <create_name+0x2d4>)
 800adc6:	f7ff fb2f 	bl	800a428 <chk_chr>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d008      	beq.n	800ade2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800add0:	235f      	movs	r3, #95	; 0x5f
 800add2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800add4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add8:	f043 0303 	orr.w	r3, r3, #3
 800addc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ade0:	e01b      	b.n	800ae1a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ade2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ade4:	2b40      	cmp	r3, #64	; 0x40
 800ade6:	d909      	bls.n	800adfc <create_name+0x294>
 800ade8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adea:	2b5a      	cmp	r3, #90	; 0x5a
 800adec:	d806      	bhi.n	800adfc <create_name+0x294>
					b |= 2;
 800adee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800adf2:	f043 0302 	orr.w	r3, r3, #2
 800adf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800adfa:	e00e      	b.n	800ae1a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800adfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adfe:	2b60      	cmp	r3, #96	; 0x60
 800ae00:	d90b      	bls.n	800ae1a <create_name+0x2b2>
 800ae02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae04:	2b7a      	cmp	r3, #122	; 0x7a
 800ae06:	d808      	bhi.n	800ae1a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ae08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ae14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae16:	3b20      	subs	r3, #32
 800ae18:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	623a      	str	r2, [r7, #32]
 800ae20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae22:	b2d1      	uxtb	r1, r2
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	4413      	add	r3, r2
 800ae28:	460a      	mov	r2, r1
 800ae2a:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 800ae2e:	e763      	b.n	800acf8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ae30:	bf00      	nop
 800ae32:	e006      	b.n	800ae42 <create_name+0x2da>
 800ae34:	08013b10 	.word	0x08013b10
 800ae38:	08013f64 	.word	0x08013f64
 800ae3c:	08013b1c 	.word	0x08013b1c
			if (si > di) break;			/* No extension */
 800ae40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae48:	2be5      	cmp	r3, #229	; 0xe5
 800ae4a:	d103      	bne.n	800ae54 <create_name+0x2ec>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2205      	movs	r2, #5
 800ae50:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	d104      	bne.n	800ae64 <create_name+0x2fc>
 800ae5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ae64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae68:	f003 030c 	and.w	r3, r3, #12
 800ae6c:	2b0c      	cmp	r3, #12
 800ae6e:	d005      	beq.n	800ae7c <create_name+0x314>
 800ae70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d105      	bne.n	800ae88 <create_name+0x320>
 800ae7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae80:	f043 0302 	orr.w	r3, r3, #2
 800ae84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ae88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d117      	bne.n	800aec4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ae94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d105      	bne.n	800aeac <create_name+0x344>
 800aea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea4:	f043 0310 	orr.w	r3, r3, #16
 800aea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800aeac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aeb0:	f003 030c 	and.w	r3, r3, #12
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d105      	bne.n	800aec4 <create_name+0x35c>
 800aeb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aebc:	f043 0308 	orr.w	r3, r3, #8
 800aec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aeca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 800aece:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3728      	adds	r7, #40	; 0x28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aeec:	e002      	b.n	800aef4 <follow_path+0x1c>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b2f      	cmp	r3, #47	; 0x2f
 800aefa:	d0f8      	beq.n	800aeee <follow_path+0x16>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b5c      	cmp	r3, #92	; 0x5c
 800af02:	d0f4      	beq.n	800aeee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	2200      	movs	r2, #0
 800af08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b1f      	cmp	r3, #31
 800af10:	d80a      	bhi.n	800af28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2280      	movs	r2, #128	; 0x80
 800af16:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800af1a:	2100      	movs	r1, #0
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff fbc1 	bl	800a6a4 <dir_sdi>
 800af22:	4603      	mov	r3, r0
 800af24:	75fb      	strb	r3, [r7, #23]
 800af26:	e043      	b.n	800afb0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af28:	463b      	mov	r3, r7
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff fe1b 	bl	800ab68 <create_name>
 800af32:	4603      	mov	r3, r0
 800af34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d134      	bne.n	800afa6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fd52 	bl	800a9e6 <dir_find>
 800af42:	4603      	mov	r3, r0
 800af44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800af4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00a      	beq.n	800af6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d127      	bne.n	800afaa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d122      	bne.n	800afaa <follow_path+0xd2>
 800af64:	2305      	movs	r3, #5
 800af66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800af68:	e01f      	b.n	800afaa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d11c      	bne.n	800afae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	799b      	ldrb	r3, [r3, #6]
 800af78:	f003 0310 	and.w	r3, r3, #16
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af80:	2305      	movs	r3, #5
 800af82:	75fb      	strb	r3, [r7, #23]
 800af84:	e014      	b.n	800afb0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af94:	4413      	add	r3, r2
 800af96:	4619      	mov	r1, r3
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff fc73 	bl	800a884 <ld_clust>
 800af9e:	4602      	mov	r2, r0
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800afa4:	e7c0      	b.n	800af28 <follow_path+0x50>
			if (res != FR_OK) break;
 800afa6:	bf00      	nop
 800afa8:	e002      	b.n	800afb0 <follow_path+0xd8>
				break;
 800afaa:	bf00      	nop
 800afac:	e000      	b.n	800afb0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afae:	bf00      	nop
			}
		}
	}

	return res;
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800afba:	b480      	push	{r7}
 800afbc:	b087      	sub	sp, #28
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
 800afc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d031      	beq.n	800b034 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	617b      	str	r3, [r7, #20]
 800afd6:	e002      	b.n	800afde <get_ldnumber+0x24>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	3301      	adds	r3, #1
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b1f      	cmp	r3, #31
 800afe4:	d903      	bls.n	800afee <get_ldnumber+0x34>
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b3a      	cmp	r3, #58	; 0x3a
 800afec:	d1f4      	bne.n	800afd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b3a      	cmp	r3, #58	; 0x3a
 800aff4:	d11c      	bne.n	800b030 <get_ldnumber+0x76>
			tp = *path;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	60fa      	str	r2, [r7, #12]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	3b30      	subs	r3, #48	; 0x30
 800b006:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d80e      	bhi.n	800b02c <get_ldnumber+0x72>
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	429a      	cmp	r2, r3
 800b014:	d10a      	bne.n	800b02c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d807      	bhi.n	800b02c <get_ldnumber+0x72>
					vol = (int)i;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	3301      	adds	r3, #1
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	e002      	b.n	800b036 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b030:	2300      	movs	r3, #0
 800b032:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b034:	693b      	ldr	r3, [r7, #16]
}
 800b036:	4618      	mov	r0, r3
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
	...

0800b044 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	70da      	strb	r2, [r3, #3]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f04f 32ff 	mov.w	r2, #4294967295
 800b05a:	629a      	str	r2, [r3, #40]	; 0x28
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff f9fd 	bl	800a45e <move_window>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <check_fs+0x2a>
 800b06a:	2304      	movs	r3, #4
 800b06c:	e038      	b.n	800b0e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	332c      	adds	r3, #44	; 0x2c
 800b072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff f938 	bl	800a2ec <ld_word>
 800b07c:	4603      	mov	r3, r0
 800b07e:	461a      	mov	r2, r3
 800b080:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b084:	429a      	cmp	r2, r3
 800b086:	d001      	beq.n	800b08c <check_fs+0x48>
 800b088:	2303      	movs	r3, #3
 800b08a:	e029      	b.n	800b0e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b092:	2be9      	cmp	r3, #233	; 0xe9
 800b094:	d009      	beq.n	800b0aa <check_fs+0x66>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b09c:	2beb      	cmp	r3, #235	; 0xeb
 800b09e:	d11e      	bne.n	800b0de <check_fs+0x9a>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b0a6:	2b90      	cmp	r3, #144	; 0x90
 800b0a8:	d119      	bne.n	800b0de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	332c      	adds	r3, #44	; 0x2c
 800b0ae:	3336      	adds	r3, #54	; 0x36
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff f933 	bl	800a31c <ld_dword>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b0bc:	4a0a      	ldr	r2, [pc, #40]	; (800b0e8 <check_fs+0xa4>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d101      	bne.n	800b0c6 <check_fs+0x82>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e00c      	b.n	800b0e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	332c      	adds	r3, #44	; 0x2c
 800b0ca:	3352      	adds	r3, #82	; 0x52
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff f925 	bl	800a31c <ld_dword>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4a05      	ldr	r2, [pc, #20]	; (800b0ec <check_fs+0xa8>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d101      	bne.n	800b0de <check_fs+0x9a>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e000      	b.n	800b0e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b0de:	2302      	movs	r3, #2
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	00544146 	.word	0x00544146
 800b0ec:	33544146 	.word	0x33544146

0800b0f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b096      	sub	sp, #88	; 0x58
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff ff58 	bl	800afba <get_ldnumber>
 800b10a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10e:	2b00      	cmp	r3, #0
 800b110:	da01      	bge.n	800b116 <find_volume+0x26>
 800b112:	230b      	movs	r3, #11
 800b114:	e1ba      	b.n	800b48c <find_volume+0x39c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b116:	4a9c      	ldr	r2, [pc, #624]	; (800b388 <find_volume+0x298>)
 800b118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b11e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <find_volume+0x3a>
 800b126:	230c      	movs	r3, #12
 800b128:	e1b0      	b.n	800b48c <find_volume+0x39c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b12e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	f023 0301 	bic.w	r3, r3, #1
 800b136:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00f      	beq.n	800b160 <find_volume+0x70>
		stat = disk_status(fs->drv);
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff f871 	bl	800a22c <disk_status>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
 800b15c:	2300      	movs	r3, #0
 800b15e:	e195      	b.n	800b48c <find_volume+0x39c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	2200      	movs	r2, #0
 800b164:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	785b      	ldrb	r3, [r3, #1]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff f874 	bl	800a260 <disk_initialize>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b17e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <find_volume+0x9e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b18a:	2303      	movs	r3, #3
 800b18c:	e17e      	b.n	800b48c <find_volume+0x39c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b192:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b196:	f7ff ff55 	bl	800b044 <check_fs>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b1a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d149      	bne.n	800b23c <find_volume+0x14c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ac:	e01e      	b.n	800b1ec <find_volume+0xfc>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b6:	011b      	lsls	r3, r3, #4
 800b1b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b1bc:	4413      	add	r3, r2
 800b1be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d006      	beq.n	800b1d8 <find_volume+0xe8>
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff f8a4 	bl	800a31c <ld_dword>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	e000      	b.n	800b1da <find_volume+0xea>
 800b1d8:	2200      	movs	r2, #0
 800b1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	3358      	adds	r3, #88	; 0x58
 800b1e0:	443b      	add	r3, r7
 800b1e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d9dd      	bls.n	800b1ae <find_volume+0xbe>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <find_volume+0x112>
 800b1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fe:	3b01      	subs	r3, #1
 800b200:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	3358      	adds	r3, #88	; 0x58
 800b208:	443b      	add	r3, r7
 800b20a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b20e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b212:	2b00      	cmp	r3, #0
 800b214:	d005      	beq.n	800b222 <find_volume+0x132>
 800b216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b21a:	f7ff ff13 	bl	800b044 <check_fs>
 800b21e:	4603      	mov	r3, r0
 800b220:	e000      	b.n	800b224 <find_volume+0x134>
 800b222:	2303      	movs	r3, #3
 800b224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d905      	bls.n	800b23c <find_volume+0x14c>
 800b230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b232:	3301      	adds	r3, #1
 800b234:	643b      	str	r3, [r7, #64]	; 0x40
 800b236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d9e2      	bls.n	800b202 <find_volume+0x112>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b23c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b240:	2b04      	cmp	r3, #4
 800b242:	d101      	bne.n	800b248 <find_volume+0x158>
 800b244:	2301      	movs	r3, #1
 800b246:	e121      	b.n	800b48c <find_volume+0x39c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d901      	bls.n	800b254 <find_volume+0x164>
 800b250:	230d      	movs	r3, #13
 800b252:	e11b      	b.n	800b48c <find_volume+0x39c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	332c      	adds	r3, #44	; 0x2c
 800b258:	330b      	adds	r3, #11
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff f846 	bl	800a2ec <ld_word>
 800b260:	4603      	mov	r3, r0
 800b262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b266:	d001      	beq.n	800b26c <find_volume+0x17c>
 800b268:	230d      	movs	r3, #13
 800b26a:	e10f      	b.n	800b48c <find_volume+0x39c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	332c      	adds	r3, #44	; 0x2c
 800b270:	3316      	adds	r3, #22
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff f83a 	bl	800a2ec <ld_word>
 800b278:	4603      	mov	r3, r0
 800b27a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <find_volume+0x1a0>
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	332c      	adds	r3, #44	; 0x2c
 800b286:	3324      	adds	r3, #36	; 0x24
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff f847 	bl	800a31c <ld_dword>
 800b28e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b294:	615a      	str	r2, [r3, #20]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	789b      	ldrb	r3, [r3, #2]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d005      	beq.n	800b2b4 <find_volume+0x1c4>
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	789b      	ldrb	r3, [r3, #2]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d001      	beq.n	800b2b4 <find_volume+0x1c4>
 800b2b0:	230d      	movs	r3, #13
 800b2b2:	e0eb      	b.n	800b48c <find_volume+0x39c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	789b      	ldrb	r3, [r3, #2]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2bc:	fb02 f303 	mul.w	r3, r2, r3
 800b2c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	895b      	ldrh	r3, [r3, #10]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d008      	beq.n	800b2e8 <find_volume+0x1f8>
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	895b      	ldrh	r3, [r3, #10]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	895b      	ldrh	r3, [r3, #10]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <find_volume+0x1fc>
 800b2e8:	230d      	movs	r3, #13
 800b2ea:	e0cf      	b.n	800b48c <find_volume+0x39c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	332c      	adds	r3, #44	; 0x2c
 800b2f0:	3311      	adds	r3, #17
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fffa 	bl	800a2ec <ld_word>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	891b      	ldrh	r3, [r3, #8]
 800b304:	f003 030f 	and.w	r3, r3, #15
 800b308:	b29b      	uxth	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <find_volume+0x222>
 800b30e:	230d      	movs	r3, #13
 800b310:	e0bc      	b.n	800b48c <find_volume+0x39c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	332c      	adds	r3, #44	; 0x2c
 800b316:	3313      	adds	r3, #19
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe ffe7 	bl	800a2ec <ld_word>
 800b31e:	4603      	mov	r3, r0
 800b320:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <find_volume+0x246>
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	332c      	adds	r3, #44	; 0x2c
 800b32c:	3320      	adds	r3, #32
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe fff4 	bl	800a31c <ld_dword>
 800b334:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	332c      	adds	r3, #44	; 0x2c
 800b33a:	330e      	adds	r3, #14
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe ffd5 	bl	800a2ec <ld_word>
 800b342:	4603      	mov	r3, r0
 800b344:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b346:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <find_volume+0x260>
 800b34c:	230d      	movs	r3, #13
 800b34e:	e09d      	b.n	800b48c <find_volume+0x39c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b350:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b354:	4413      	add	r3, r2
 800b356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b358:	8912      	ldrh	r2, [r2, #8]
 800b35a:	0912      	lsrs	r2, r2, #4
 800b35c:	b292      	uxth	r2, r2
 800b35e:	4413      	add	r3, r2
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	429a      	cmp	r2, r3
 800b368:	d201      	bcs.n	800b36e <find_volume+0x27e>
 800b36a:	230d      	movs	r3, #13
 800b36c:	e08e      	b.n	800b48c <find_volume+0x39c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b376:	8952      	ldrh	r2, [r2, #10]
 800b378:	fbb3 f3f2 	udiv	r3, r3, r2
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <find_volume+0x29c>
 800b384:	230d      	movs	r3, #13
 800b386:	e081      	b.n	800b48c <find_volume+0x39c>
 800b388:	200011e0 	.word	0x200011e0
		fmt = FS_FAT32;
 800b38c:	2303      	movs	r3, #3
 800b38e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b398:	4293      	cmp	r3, r2
 800b39a:	d802      	bhi.n	800b3a2 <find_volume+0x2b2>
 800b39c:	2302      	movs	r3, #2
 800b39e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d802      	bhi.n	800b3b2 <find_volume+0x2c2>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	1c9a      	adds	r2, r3, #2
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	611a      	str	r2, [r3, #16]
		fs->volbase = bsect;							/* Volume start sector */
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3be:	619a      	str	r2, [r3, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b3c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c4:	441a      	add	r2, r3
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	61da      	str	r2, [r3, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800b3ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ce:	441a      	add	r2, r3
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	625a      	str	r2, [r3, #36]	; 0x24
		if (fmt == FS_FAT32) {
 800b3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d11e      	bne.n	800b41a <find_volume+0x32a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	332c      	adds	r3, #44	; 0x2c
 800b3e0:	332a      	adds	r3, #42	; 0x2a
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe ff82 	bl	800a2ec <ld_word>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <find_volume+0x302>
 800b3ee:	230d      	movs	r3, #13
 800b3f0:	e04c      	b.n	800b48c <find_volume+0x39c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	891b      	ldrh	r3, [r3, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <find_volume+0x30e>
 800b3fa:	230d      	movs	r3, #13
 800b3fc:	e046      	b.n	800b48c <find_volume+0x39c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	332c      	adds	r3, #44	; 0x2c
 800b402:	332c      	adds	r3, #44	; 0x2c
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe ff89 	bl	800a31c <ld_dword>
 800b40a:	4602      	mov	r2, r0
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	621a      	str	r2, [r3, #32]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	647b      	str	r3, [r7, #68]	; 0x44
 800b418:	e01f      	b.n	800b45a <find_volume+0x36a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	891b      	ldrh	r3, [r3, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <find_volume+0x336>
 800b422:	230d      	movs	r3, #13
 800b424:	e032      	b.n	800b48c <find_volume+0x39c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	69da      	ldr	r2, [r3, #28]
 800b42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b42c:	441a      	add	r2, r3
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	621a      	str	r2, [r3, #32]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b436:	2b02      	cmp	r3, #2
 800b438:	d103      	bne.n	800b442 <find_volume+0x352>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	e00a      	b.n	800b458 <find_volume+0x368>
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	4613      	mov	r3, r2
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	4413      	add	r3, r2
 800b44c:	085a      	lsrs	r2, r3, #1
 800b44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b458:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	695a      	ldr	r2, [r3, #20]
 800b45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b460:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b464:	0a5b      	lsrs	r3, r3, #9
 800b466:	429a      	cmp	r2, r3
 800b468:	d201      	bcs.n	800b46e <find_volume+0x37e>
 800b46a:	230d      	movs	r3, #13
 800b46c:	e00e      	b.n	800b48c <find_volume+0x39c>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b474:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b476:	4b07      	ldr	r3, [pc, #28]	; (800b494 <find_volume+0x3a4>)
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <find_volume+0x3a4>)
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	4b04      	ldr	r3, [pc, #16]	; (800b494 <find_volume+0x3a4>)
 800b484:	881a      	ldrh	r2, [r3, #0]
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3758      	adds	r7, #88	; 0x58
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200011e8 	.word	0x200011e8

0800b498 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b4a2:	2309      	movs	r3, #9
 800b4a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01c      	beq.n	800b4e6 <validate+0x4e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d018      	beq.n	800b4e6 <validate+0x4e>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d013      	beq.n	800b4e6 <validate+0x4e>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	889a      	ldrh	r2, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	88db      	ldrh	r3, [r3, #6]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d10c      	bne.n	800b4e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	785b      	ldrb	r3, [r3, #1]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe feaa 	bl	800a22c <disk_status>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <validate+0x4e>
			res = FR_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d102      	bne.n	800b4f2 <validate+0x5a>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	e000      	b.n	800b4f4 <validate+0x5c>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	6013      	str	r3, [r2, #0]
	return res;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	4613      	mov	r3, r2
 800b510:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b516:	f107 0310 	add.w	r3, r7, #16
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff fd4d 	bl	800afba <get_ldnumber>
 800b520:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	2b00      	cmp	r3, #0
 800b526:	da01      	bge.n	800b52c <f_mount+0x28>
 800b528:	230b      	movs	r3, #11
 800b52a:	e028      	b.n	800b57e <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b52c:	4a16      	ldr	r2, [pc, #88]	; (800b588 <f_mount+0x84>)
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b534:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	490d      	ldr	r1, [pc, #52]	; (800b588 <f_mount+0x84>)
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <f_mount+0x60>
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d001      	beq.n	800b568 <f_mount+0x64>
 800b564:	2300      	movs	r3, #0
 800b566:	e00a      	b.n	800b57e <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b568:	f107 010c 	add.w	r1, r7, #12
 800b56c:	f107 0308 	add.w	r3, r7, #8
 800b570:	2200      	movs	r2, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fdbc 	bl	800b0f0 <find_volume>
 800b578:	4603      	mov	r3, r0
 800b57a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3720      	adds	r7, #32
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	200011e0 	.word	0x200011e0

0800b58c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b0b4      	sub	sp, #208	; 0xd0
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <f_open+0x18>
 800b5a0:	2309      	movs	r3, #9
 800b5a2:	e074      	b.n	800b68e <f_open+0x102>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b5ac:	79fa      	ldrb	r2, [r7, #7]
 800b5ae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7ff fd9a 	bl	800b0f0 <find_volume>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if (res == FR_OK) {
 800b5c2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d158      	bne.n	800b67c <f_open+0xf0>
		dj.obj.fs = fs;
 800b5ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		INIT_NAMBUF(fs);
 800b5d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5d6:	f107 0214 	add.w	r2, r7, #20
 800b5da:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff fc77 	bl	800aed8 <follow_path>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			if (!fp->obj.lockid) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 800b5f0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d111      	bne.n	800b61c <f_open+0x90>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5f8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800b5fc:	b25b      	sxtb	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	da03      	bge.n	800b60a <f_open+0x7e>
				res = FR_INVALID_NAME;
 800b602:	2306      	movs	r3, #6
 800b604:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800b608:	e008      	b.n	800b61c <f_open+0x90>
			} else {
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b60a:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800b60e:	f003 0310 	and.w	r3, r3, #16
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <f_open+0x90>
					res = FR_NO_FILE;
 800b616:	2304      	movs	r3, #4
 800b618:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b61c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800b620:	2b00      	cmp	r3, #0
 800b622:	d12b      	bne.n	800b67c <f_open+0xf0>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b628:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff f928 	bl	800a884 <ld_clust>
 800b634:	4602      	mov	r2, r0
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b63a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b63e:	331c      	adds	r3, #28
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fe6b 	bl	800a31c <ld_dword>
 800b646:	4602      	mov	r2, r0
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	621a      	str	r2, [r3, #32]
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b652:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b65a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b65e:	88da      	ldrh	r2, [r3, #6]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	79fa      	ldrb	r2, [r7, #7]
 800b668:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	615a      	str	r2, [r3, #20]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b67c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <f_open+0xfe>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b68a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800b68e:	4618      	mov	r0, r3
 800b690:	37d0      	adds	r7, #208	; 0xd0
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b08e      	sub	sp, #56	; 0x38
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
 800b6a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f107 0214 	add.w	r2, r7, #20
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff feee 	bl	800b498 <validate>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b6c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d107      	bne.n	800b6da <f_read+0x44>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	7c5b      	ldrb	r3, [r3, #17]
 800b6ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b6d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <f_read+0x4a>
 800b6da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6de:	e0dd      	b.n	800b89c <f_read+0x206>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	7c1b      	ldrb	r3, [r3, #16]
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <f_read+0x5a>
 800b6ec:	2307      	movs	r3, #7
 800b6ee:	e0d5      	b.n	800b89c <f_read+0x206>
	remain = fp->obj.objsize - fp->fptr;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	429a      	cmp	r2, r3
 800b702:	f240 80c6 	bls.w	800b892 <f_read+0x1fc>
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b70a:	e0c2      	b.n	800b892 <f_read+0x1fc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b714:	2b00      	cmp	r3, #0
 800b716:	f040 808e 	bne.w	800b836 <f_read+0x1a0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	0a5b      	lsrs	r3, r3, #9
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	8952      	ldrh	r2, [r2, #10]
 800b724:	3a01      	subs	r2, #1
 800b726:	4013      	ands	r3, r2
 800b728:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d12f      	bne.n	800b790 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	633b      	str	r3, [r7, #48]	; 0x30
 800b73e:	e013      	b.n	800b768 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	4619      	mov	r1, r3
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7fe ff74 	bl	800a63c <clmt_clust>
 800b754:	6338      	str	r0, [r7, #48]	; 0x30
 800b756:	e007      	b.n	800b768 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7fe fec3 	bl	800a4ec <get_fat>
 800b766:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d804      	bhi.n	800b778 <f_read+0xe2>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2202      	movs	r2, #2
 800b772:	745a      	strb	r2, [r3, #17]
 800b774:	2302      	movs	r3, #2
 800b776:	e091      	b.n	800b89c <f_read+0x206>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77e:	d104      	bne.n	800b78a <f_read+0xf4>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2201      	movs	r2, #1
 800b784:	745a      	strb	r2, [r3, #17]
 800b786:	2301      	movs	r3, #1
 800b788:	e088      	b.n	800b89c <f_read+0x206>
				fp->clust = clst;				/* Update current cluster */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78e:	619a      	str	r2, [r3, #24]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7fe fe88 	bl	800a4ae <clust2sect>
 800b79e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d104      	bne.n	800b7b0 <f_read+0x11a>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	745a      	strb	r2, [r3, #17]
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e075      	b.n	800b89c <f_read+0x206>
			sect += csect;
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	0a5b      	lsrs	r3, r3, #9
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d01f      	beq.n	800b804 <f_read+0x16e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b7c4:	69fa      	ldr	r2, [r7, #28]
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	4413      	add	r3, r2
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	8952      	ldrh	r2, [r2, #10]
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d905      	bls.n	800b7de <f_read+0x148>
					cc = fs->csize - csect;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	895b      	ldrh	r3, [r3, #10]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	7858      	ldrb	r0, [r3, #1]
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	69ba      	ldr	r2, [r7, #24]
 800b7e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7e8:	f7fe fd60 	bl	800a2ac <disk_read>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d004      	beq.n	800b7fc <f_read+0x166>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	745a      	strb	r2, [r3, #17]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e04f      	b.n	800b89c <f_read+0x206>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	025b      	lsls	r3, r3, #9
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b802:	e032      	b.n	800b86a <f_read+0x1d4>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	69ba      	ldr	r2, [r7, #24]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d010      	beq.n	800b830 <f_read+0x19a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	7858      	ldrb	r0, [r3, #1]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b818:	2301      	movs	r3, #1
 800b81a:	69ba      	ldr	r2, [r7, #24]
 800b81c:	f7fe fd46 	bl	800a2ac <disk_read>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <f_read+0x19a>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	745a      	strb	r2, [r3, #17]
 800b82c:	2301      	movs	r3, #1
 800b82e:	e035      	b.n	800b89c <f_read+0x206>
			}
#endif
			fp->sect = sect;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	69ba      	ldr	r2, [r7, #24]
 800b834:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b842:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d901      	bls.n	800b850 <f_read+0x1ba>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85e:	4413      	add	r3, r2
 800b860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b862:	4619      	mov	r1, r3
 800b864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b866:	f7fe fd7c 	bl	800a362 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	4413      	add	r3, r2
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	695a      	ldr	r2, [r3, #20]
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	441a      	add	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	615a      	str	r2, [r3, #20]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b884:	441a      	add	r2, r3
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f47f af39 	bne.w	800b70c <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3738      	adds	r7, #56	; 0x38
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f107 0208 	add.w	r2, r7, #8
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7ff fdef 	bl	800b498 <validate>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d102      	bne.n	800b8ca <f_close+0x26>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b090      	sub	sp, #64	; 0x40
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f107 0208 	add.w	r2, r7, #8
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fdd6 	bl	800b498 <validate>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b8f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d103      	bne.n	800b902 <f_lseek+0x2e>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7c5b      	ldrb	r3, [r3, #17]
 800b8fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <f_lseek+0x3c>
 800b90a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b90e:	e163      	b.n	800bbd8 <f_lseek+0x304>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 80b3 	beq.w	800ba80 <f_lseek+0x1ac>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b920:	d15a      	bne.n	800b9d8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	627a      	str	r2, [r7, #36]	; 0x24
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	2302      	movs	r3, #2
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d03a      	beq.n	800b9b8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	613b      	str	r3, [r7, #16]
 800b946:	2300      	movs	r3, #0
 800b948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	3302      	adds	r3, #2
 800b94e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b956:	3301      	adds	r3, #1
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe fdc4 	bl	800a4ec <get_fat>
 800b964:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d804      	bhi.n	800b976 <f_lseek+0xa2>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	745a      	strb	r2, [r3, #17]
 800b972:	2302      	movs	r3, #2
 800b974:	e130      	b.n	800bbd8 <f_lseek+0x304>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97c:	d104      	bne.n	800b988 <f_lseek+0xb4>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	745a      	strb	r2, [r3, #17]
 800b984:	2301      	movs	r3, #1
 800b986:	e127      	b.n	800bbd8 <f_lseek+0x304>
					} while (cl == pcl + 1);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3301      	adds	r3, #1
 800b98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98e:	429a      	cmp	r2, r3
 800b990:	d0de      	beq.n	800b950 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	429a      	cmp	r2, r3
 800b998:	d809      	bhi.n	800b9ae <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	1d1a      	adds	r2, r3, #4
 800b99e:	627a      	str	r2, [r7, #36]	; 0x24
 800b9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	627a      	str	r2, [r7, #36]	; 0x24
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d3c4      	bcc.n	800b942 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9be:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b9c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d803      	bhi.n	800b9d0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	e101      	b.n	800bbd4 <f_lseek+0x300>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b9d0:	2311      	movs	r3, #17
 800b9d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b9d6:	e0fd      	b.n	800bbd4 <f_lseek+0x300>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d902      	bls.n	800b9e8 <f_lseek+0x114>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	615a      	str	r2, [r3, #20]
			if (ofs) {
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 80ef 	beq.w	800bbd4 <f_lseek+0x300>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7fe fe1d 	bl	800a63c <clmt_clust>
 800ba02:	4602      	mov	r2, r0
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	619a      	str	r2, [r3, #24]
				dsc = clust2sect(fs, fp->clust);
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4610      	mov	r0, r2
 800ba12:	f7fe fd4c 	bl	800a4ae <clust2sect>
 800ba16:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d104      	bne.n	800ba28 <f_lseek+0x154>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2202      	movs	r2, #2
 800ba22:	745a      	strb	r2, [r3, #17]
 800ba24:	2302      	movs	r3, #2
 800ba26:	e0d7      	b.n	800bbd8 <f_lseek+0x304>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	0a5b      	lsrs	r3, r3, #9
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	8952      	ldrh	r2, [r2, #10]
 800ba32:	3a01      	subs	r2, #1
 800ba34:	4013      	ands	r3, r2
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	4413      	add	r3, r2
 800ba3a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 80c5 	beq.w	800bbd4 <f_lseek+0x300>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	f000 80bf 	beq.w	800bbd4 <f_lseek+0x300>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	7858      	ldrb	r0, [r3, #1]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ba60:	2301      	movs	r3, #1
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	f7fe fc22 	bl	800a2ac <disk_read>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <f_lseek+0x1a4>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	745a      	strb	r2, [r3, #17]
 800ba74:	2301      	movs	r3, #1
 800ba76:	e0af      	b.n	800bbd8 <f_lseek+0x304>
#endif
					fp->sect = dsc;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	61da      	str	r2, [r3, #28]
 800ba7e:	e0a9      	b.n	800bbd4 <f_lseek+0x300>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d902      	bls.n	800ba90 <f_lseek+0x1bc>
			ofs = fp->obj.objsize;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba9e:	615a      	str	r2, [r3, #20]
		if (ofs) {
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d077      	beq.n	800bb96 <f_lseek+0x2c2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	895b      	ldrh	r3, [r3, #10]
 800baaa:	025b      	lsls	r3, r3, #9
 800baac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01b      	beq.n	800baec <f_lseek+0x218>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	1e5a      	subs	r2, r3, #1
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	fbb2 f2f3 	udiv	r2, r2, r3
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	1e59      	subs	r1, r3, #1
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bac8:	429a      	cmp	r2, r3
 800baca:	d30f      	bcc.n	800baec <f_lseek+0x218>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	1e5a      	subs	r2, r3, #1
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	425b      	negs	r3, r3
 800bad4:	401a      	ands	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	63bb      	str	r3, [r7, #56]	; 0x38
 800baea:	e005      	b.n	800baf8 <f_lseek+0x224>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baf6:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d04b      	beq.n	800bb96 <f_lseek+0x2c2>
				while (ofs > bcs) {						/* Cluster following loop */
 800bafe:	e028      	b.n	800bb52 <f_lseek+0x27e>
					ofs -= bcs; fp->fptr += bcs;
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	603b      	str	r3, [r7, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	695a      	ldr	r2, [r3, #20]
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	441a      	add	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	615a      	str	r2, [r3, #20]
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fe fce7 	bl	800a4ec <get_fat>
 800bb1e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb26:	d104      	bne.n	800bb32 <f_lseek+0x25e>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	745a      	strb	r2, [r3, #17]
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e052      	b.n	800bbd8 <f_lseek+0x304>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d904      	bls.n	800bb42 <f_lseek+0x26e>
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d304      	bcc.n	800bb4c <f_lseek+0x278>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2202      	movs	r2, #2
 800bb46:	745a      	strb	r2, [r3, #17]
 800bb48:	2302      	movs	r3, #2
 800bb4a:	e045      	b.n	800bbd8 <f_lseek+0x304>
					fp->clust = clst;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb50:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d8d2      	bhi.n	800bb00 <f_lseek+0x22c>
				}
				fp->fptr += ofs;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	695a      	ldr	r2, [r3, #20]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	441a      	add	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d012      	beq.n	800bb96 <f_lseek+0x2c2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fe fc9a 	bl	800a4ae <clust2sect>
 800bb7a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800bb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <f_lseek+0x2b8>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2202      	movs	r2, #2
 800bb86:	745a      	strb	r2, [r3, #17]
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e025      	b.n	800bbd8 <f_lseek+0x304>
					nsect += (DWORD)(ofs / SS(fs));
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	0a5b      	lsrs	r3, r3, #9
 800bb90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb92:	4413      	add	r3, r2
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
			fp->obj.objsize = fp->fptr;
			fp->flag |= FA_MODIFIED;
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d018      	beq.n	800bbd4 <f_lseek+0x300>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d013      	beq.n	800bbd4 <f_lseek+0x300>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	7858      	ldrb	r0, [r3, #1]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbba:	f7fe fb77 	bl	800a2ac <disk_read>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <f_lseek+0x2fa>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	745a      	strb	r2, [r3, #17]
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e004      	b.n	800bbd8 <f_lseek+0x304>
#endif
			fp->sect = nsect;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbd2:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 800bbd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3740      	adds	r7, #64	; 0x40
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	4613      	mov	r3, r2
 800bbec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbf6:	4b1f      	ldr	r3, [pc, #124]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bbf8:	7b9b      	ldrb	r3, [r3, #14]
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d831      	bhi.n	800bc64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bc00:	4b1c      	ldr	r3, [pc, #112]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc02:	7b9b      	ldrb	r3, [r3, #14]
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	461a      	mov	r2, r3
 800bc08:	4b1a      	ldr	r3, [pc, #104]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bc0e:	4b19      	ldr	r3, [pc, #100]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc10:	7b9b      	ldrb	r3, [r3, #14]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	4a17      	ldr	r2, [pc, #92]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bc1e:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc20:	7b9b      	ldrb	r3, [r3, #14]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	461a      	mov	r2, r3
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc28:	4413      	add	r3, r2
 800bc2a:	79fa      	ldrb	r2, [r7, #7]
 800bc2c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800bc2e:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc30:	7b9b      	ldrb	r3, [r3, #14]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	b2d1      	uxtb	r1, r2
 800bc38:	4a0e      	ldr	r2, [pc, #56]	; (800bc74 <FATFS_LinkDriverEx+0x94>)
 800bc3a:	7391      	strb	r1, [r2, #14]
 800bc3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc3e:	7dbb      	ldrb	r3, [r7, #22]
 800bc40:	3330      	adds	r3, #48	; 0x30
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	223a      	movs	r2, #58	; 0x3a
 800bc4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	3302      	adds	r3, #2
 800bc54:	222f      	movs	r2, #47	; 0x2f
 800bc56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	3303      	adds	r3, #3
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	200011ec 	.word	0x200011ec

0800bc78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc82:	2200      	movs	r2, #0
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff ffaa 	bl	800bbe0 <FATFS_LinkDriverEx>
 800bc8c:	4603      	mov	r3, r0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
	...

0800bc98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bca4:	88fb      	ldrh	r3, [r7, #6]
 800bca6:	2b7f      	cmp	r3, #127	; 0x7f
 800bca8:	d802      	bhi.n	800bcb0 <ff_convert+0x18>
		c = chr;
 800bcaa:	88fb      	ldrh	r3, [r7, #6]
 800bcac:	81fb      	strh	r3, [r7, #14]
 800bcae:	e025      	b.n	800bcfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	2bff      	cmp	r3, #255	; 0xff
 800bcba:	d805      	bhi.n	800bcc8 <ff_convert+0x30>
 800bcbc:	88fb      	ldrh	r3, [r7, #6]
 800bcbe:	3b80      	subs	r3, #128	; 0x80
 800bcc0:	4a12      	ldr	r2, [pc, #72]	; (800bd0c <ff_convert+0x74>)
 800bcc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcc6:	e000      	b.n	800bcca <ff_convert+0x32>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	81fb      	strh	r3, [r7, #14]
 800bccc:	e016      	b.n	800bcfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bcce:	2300      	movs	r3, #0
 800bcd0:	81fb      	strh	r3, [r7, #14]
 800bcd2:	e009      	b.n	800bce8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bcd4:	89fb      	ldrh	r3, [r7, #14]
 800bcd6:	4a0d      	ldr	r2, [pc, #52]	; (800bd0c <ff_convert+0x74>)
 800bcd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcdc:	88fa      	ldrh	r2, [r7, #6]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d006      	beq.n	800bcf0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bce2:	89fb      	ldrh	r3, [r7, #14]
 800bce4:	3301      	adds	r3, #1
 800bce6:	81fb      	strh	r3, [r7, #14]
 800bce8:	89fb      	ldrh	r3, [r7, #14]
 800bcea:	2b7f      	cmp	r3, #127	; 0x7f
 800bcec:	d9f2      	bls.n	800bcd4 <ff_convert+0x3c>
 800bcee:	e000      	b.n	800bcf2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bcf0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bcf2:	89fb      	ldrh	r3, [r7, #14]
 800bcf4:	3380      	adds	r3, #128	; 0x80
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bcfc:	89fb      	ldrh	r3, [r7, #14]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	08013ff4 	.word	0x08013ff4

0800bd10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bd1a:	88fb      	ldrh	r3, [r7, #6]
 800bd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd20:	d201      	bcs.n	800bd26 <ff_wtoupper+0x16>
 800bd22:	4b3e      	ldr	r3, [pc, #248]	; (800be1c <ff_wtoupper+0x10c>)
 800bd24:	e000      	b.n	800bd28 <ff_wtoupper+0x18>
 800bd26:	4b3e      	ldr	r3, [pc, #248]	; (800be20 <ff_wtoupper+0x110>)
 800bd28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	1c9a      	adds	r2, r3, #2
 800bd2e:	617a      	str	r2, [r7, #20]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bd34:	8a7b      	ldrh	r3, [r7, #18]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d068      	beq.n	800be0c <ff_wtoupper+0xfc>
 800bd3a:	88fa      	ldrh	r2, [r7, #6]
 800bd3c:	8a7b      	ldrh	r3, [r7, #18]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d364      	bcc.n	800be0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	1c9a      	adds	r2, r3, #2
 800bd46:	617a      	str	r2, [r7, #20]
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	823b      	strh	r3, [r7, #16]
 800bd4c:	8a3b      	ldrh	r3, [r7, #16]
 800bd4e:	0a1b      	lsrs	r3, r3, #8
 800bd50:	81fb      	strh	r3, [r7, #14]
 800bd52:	8a3b      	ldrh	r3, [r7, #16]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bd58:	88fa      	ldrh	r2, [r7, #6]
 800bd5a:	8a79      	ldrh	r1, [r7, #18]
 800bd5c:	8a3b      	ldrh	r3, [r7, #16]
 800bd5e:	440b      	add	r3, r1
 800bd60:	429a      	cmp	r2, r3
 800bd62:	da49      	bge.n	800bdf8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bd64:	89fb      	ldrh	r3, [r7, #14]
 800bd66:	2b08      	cmp	r3, #8
 800bd68:	d84f      	bhi.n	800be0a <ff_wtoupper+0xfa>
 800bd6a:	a201      	add	r2, pc, #4	; (adr r2, 800bd70 <ff_wtoupper+0x60>)
 800bd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd70:	0800bd95 	.word	0x0800bd95
 800bd74:	0800bda7 	.word	0x0800bda7
 800bd78:	0800bdbd 	.word	0x0800bdbd
 800bd7c:	0800bdc5 	.word	0x0800bdc5
 800bd80:	0800bdcd 	.word	0x0800bdcd
 800bd84:	0800bdd5 	.word	0x0800bdd5
 800bd88:	0800bddd 	.word	0x0800bddd
 800bd8c:	0800bde5 	.word	0x0800bde5
 800bd90:	0800bded 	.word	0x0800bded
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bd94:	88fa      	ldrh	r2, [r7, #6]
 800bd96:	8a7b      	ldrh	r3, [r7, #18]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	4413      	add	r3, r2
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	80fb      	strh	r3, [r7, #6]
 800bda4:	e027      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	8a7b      	ldrh	r3, [r7, #18]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	88fa      	ldrh	r2, [r7, #6]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	80fb      	strh	r3, [r7, #6]
 800bdba:	e01c      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bdbc:	88fb      	ldrh	r3, [r7, #6]
 800bdbe:	3b10      	subs	r3, #16
 800bdc0:	80fb      	strh	r3, [r7, #6]
 800bdc2:	e018      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	3b20      	subs	r3, #32
 800bdc8:	80fb      	strh	r3, [r7, #6]
 800bdca:	e014      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bdcc:	88fb      	ldrh	r3, [r7, #6]
 800bdce:	3b30      	subs	r3, #48	; 0x30
 800bdd0:	80fb      	strh	r3, [r7, #6]
 800bdd2:	e010      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bdd4:	88fb      	ldrh	r3, [r7, #6]
 800bdd6:	3b1a      	subs	r3, #26
 800bdd8:	80fb      	strh	r3, [r7, #6]
 800bdda:	e00c      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	3308      	adds	r3, #8
 800bde0:	80fb      	strh	r3, [r7, #6]
 800bde2:	e008      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bde4:	88fb      	ldrh	r3, [r7, #6]
 800bde6:	3b50      	subs	r3, #80	; 0x50
 800bde8:	80fb      	strh	r3, [r7, #6]
 800bdea:	e004      	b.n	800bdf6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bdec:	88fb      	ldrh	r3, [r7, #6]
 800bdee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bdf2:	80fb      	strh	r3, [r7, #6]
 800bdf4:	bf00      	nop
			}
			break;
 800bdf6:	e008      	b.n	800be0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bdf8:	89fb      	ldrh	r3, [r7, #14]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d195      	bne.n	800bd2a <ff_wtoupper+0x1a>
 800bdfe:	8a3b      	ldrh	r3, [r7, #16]
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	4413      	add	r3, r2
 800be06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800be08:	e78f      	b.n	800bd2a <ff_wtoupper+0x1a>
			break;
 800be0a:	bf00      	nop
	}

	return chr;
 800be0c:	88fb      	ldrh	r3, [r7, #6]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	371c      	adds	r7, #28
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	080140f4 	.word	0x080140f4
 800be20:	080142e8 	.word	0x080142e8

0800be24 <Get_ADCChannelValue>:
 */

#include "InternalADC.h"

uint16_t Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef ADC_ChanConf;

	ADC_ChanConf.Channel = channel;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	60bb      	str	r3, [r7, #8]
	ADC_ChanConf.Rank = 1;
 800be32:	2301      	movs	r3, #1
 800be34:	60fb      	str	r3, [r7, #12]
	ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800be36:	2301      	movs	r3, #1
 800be38:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7f7 fa4d 	bl	80032e0 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(hadc);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7f7 f8e0 	bl	800300c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 10);   //等待转换完成，50为最大等待时间，单位为ms
 800be4c:	210a      	movs	r1, #10
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7f7 f9ae 	bl	80031b0 <HAL_ADC_PollForConversion>
	return (uint16_t) HAL_ADC_GetValue(hadc);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7f7 fa36 	bl	80032c6 <HAL_ADC_GetValue>
 800be5a:	4603      	mov	r3, r0
 800be5c:	b29b      	uxth	r3, r3
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <delay_us>:
 */

#include "delay.h"

void delay_us(uint32_t us)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 1000000 * us);
 800be70:	f7f8 ffd6 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 800be74:	4603      	mov	r3, r0
 800be76:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <delay_us+0x38>)
 800be78:	fba2 2303 	umull	r2, r3, r2, r3
 800be7c:	0c9a      	lsrs	r2, r3, #18
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	60fb      	str	r3, [r7, #12]
	while (delay--)
 800be86:	e000      	b.n	800be8a <delay_us+0x22>
		__NOP();
 800be88:	bf00      	nop
	while (delay--)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	1e5a      	subs	r2, r3, #1
 800be8e:	60fa      	str	r2, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1f9      	bne.n	800be88 <delay_us+0x20>
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	431bde83 	.word	0x431bde83

0800bea4 <Clean_Dormancy_Count>:

//休眠计数 -1 进入预休眠模式
int16_t Dormancy_Count = -1;

void Clean_Dormancy_Count()
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
	if (Dormancy_Count == -1)
 800bea8:	4b06      	ldr	r3, [pc, #24]	; (800bec4 <Clean_Dormancy_Count+0x20>)
 800beaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d102      	bne.n	800beba <Clean_Dormancy_Count+0x16>
	{
		//已经进入预休眠状态 重新启动定时器
		HAL_TIM_Base_Start_IT(&htim7);
 800beb4:	4804      	ldr	r0, [pc, #16]	; (800bec8 <Clean_Dormancy_Count+0x24>)
 800beb6:	f7fa ff4f 	bl	8006d58 <HAL_TIM_Base_Start_IT>
	}
	Dormancy_Count = 0;
 800beba:	4b02      	ldr	r3, [pc, #8]	; (800bec4 <Clean_Dormancy_Count+0x20>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	801a      	strh	r2, [r3, #0]
}
 800bec0:	bf00      	nop
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20000028 	.word	0x20000028
 800bec8:	2000101c 	.word	0x2000101c

0800becc <PreHibernate>:

void PreHibernate()
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
	Screen_Clear();
 800bed2:	f002 fe4f 	bl	800eb74 <Screen_Clear>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 800bed6:	2301      	movs	r3, #1
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	e021      	b.n	800bf20 <PreHibernate+0x54>
	{
		Screen_ShowPicture_Num(1, (var % 70) + 1);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a14      	ldr	r2, [pc, #80]	; (800bf30 <PreHibernate+0x64>)
 800bee0:	fb82 1203 	smull	r1, r2, r2, r3
 800bee4:	441a      	add	r2, r3
 800bee6:	1191      	asrs	r1, r2, #6
 800bee8:	17da      	asrs	r2, r3, #31
 800beea:	1a8a      	subs	r2, r1, r2
 800beec:	2146      	movs	r1, #70	; 0x46
 800beee:	fb01 f202 	mul.w	r2, r1, r2
 800bef2:	1a9a      	subs	r2, r3, r2
 800bef4:	b2d3      	uxtb	r3, r2
 800bef6:	3301      	adds	r3, #1
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	4619      	mov	r1, r3
 800befc:	2001      	movs	r0, #1
 800befe:	f002 fe41 	bl	800eb84 <Screen_ShowPicture_Num>
		HAL_Delay(40);
 800bf02:	2028      	movs	r0, #40	; 0x28
 800bf04:	f7f7 f81a 	bl	8002f3c <HAL_Delay>
		//HAL_Delay(1000);
		//判断是否中途退出预休眠模式
		if (Dormancy_Count != -1)
 800bf08:	4b0a      	ldr	r3, [pc, #40]	; (800bf34 <PreHibernate+0x68>)
 800bf0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf12:	d002      	beq.n	800bf1a <PreHibernate+0x4e>
		{
			Screen_Clear();
 800bf14:	f002 fe2e 	bl	800eb74 <Screen_Clear>
			return;
 800bf18:	e006      	b.n	800bf28 <PreHibernate+0x5c>
	for (int var = 1; var < Dormancy_PreHibernate_Max; ++var)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	607b      	str	r3, [r7, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f5b3 7f0e 	cmp.w	r3, #568	; 0x238
 800bf26:	dbd9      	blt.n	800bedc <PreHibernate+0x10>
		}

	}
	//Screen_Clear();
}
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	ea0ea0eb 	.word	0xea0ea0eb
 800bf34:	20000028 	.word	0x20000028

0800bf38 <Hibernate>:

void Hibernate()
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	af00      	add	r7, sp, #0
	Screen_Close();
 800bf3c:	f002 fe48 	bl	800ebd0 <Screen_Close>
	HAL_PWR_EnterSTANDBYMode();
 800bf40:	f7f8 faf2 	bl	8004528 <HAL_PWR_EnterSTANDBYMode>
}
 800bf44:	bf00      	nop
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <Periodic_Dormancy_Counter>:

void Periodic_Dormancy_Counter()
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
	Dormancy_Count++;
 800bf4c:	4b10      	ldr	r3, [pc, #64]	; (800bf90 <Periodic_Dormancy_Counter+0x48>)
 800bf4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	3301      	adds	r3, #1
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	b21a      	sxth	r2, r3
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <Periodic_Dormancy_Counter+0x48>)
 800bf5c:	801a      	strh	r2, [r3, #0]

	if (Dormancy_Count > Dormancy_Count_Max)
 800bf5e:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <Periodic_Dormancy_Counter+0x48>)
 800bf60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf64:	2b3c      	cmp	r3, #60	; 0x3c
 800bf66:	dd12      	ble.n	800bf8e <Periodic_Dormancy_Counter+0x46>
	{
		//停止定时器
		HAL_TIM_Base_Stop_IT(&htim7);
 800bf68:	480a      	ldr	r0, [pc, #40]	; (800bf94 <Periodic_Dormancy_Counter+0x4c>)
 800bf6a:	f7fa ff65 	bl	8006e38 <HAL_TIM_Base_Stop_IT>
		Dormancy_Count = -1;
 800bf6e:	4b08      	ldr	r3, [pc, #32]	; (800bf90 <Periodic_Dormancy_Counter+0x48>)
 800bf70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf74:	801a      	strh	r2, [r3, #0]
		//进入预休眠模式
		PreHibernate();
 800bf76:	f7ff ffa9 	bl	800becc <PreHibernate>
		if (Dormancy_Count != -1)
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <Periodic_Dormancy_Counter+0x48>)
 800bf7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf84:	d102      	bne.n	800bf8c <Periodic_Dormancy_Counter+0x44>
		{
			return;
		}
		//执行完成任务 进入休眠模式
		Hibernate();
 800bf86:	f7ff ffd7 	bl	800bf38 <Hibernate>
 800bf8a:	e000      	b.n	800bf8e <Periodic_Dormancy_Counter+0x46>
			return;
 800bf8c:	bf00      	nop
	}
}
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20000028 	.word	0x20000028
 800bf94:	2000101c 	.word	0x2000101c

0800bf98 <CalculateDistance>:
//起点
uint8_t StartPoint = 1;

//计算两坐标距离
uint16_t CalculateDistance(MapNodePosition *A, MapNodePosition *B)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
	uint16_t x = abs(A->X - B->X);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	bfb8      	it	lt
 800bfb2:	425b      	neglt	r3, r3
 800bfb4:	81fb      	strh	r3, [r7, #14]
	uint16_t y = abs(A->X - B->X);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	bfb8      	it	lt
 800bfc6:	425b      	neglt	r3, r3
 800bfc8:	81bb      	strh	r3, [r7, #12]

	return sqrt(x * x + y * y);
 800bfca:	89fb      	ldrh	r3, [r7, #14]
 800bfcc:	89fa      	ldrh	r2, [r7, #14]
 800bfce:	fb03 f202 	mul.w	r2, r3, r2
 800bfd2:	89bb      	ldrh	r3, [r7, #12]
 800bfd4:	89b9      	ldrh	r1, [r7, #12]
 800bfd6:	fb01 f303 	mul.w	r3, r1, r3
 800bfda:	4413      	add	r3, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7f4 faa1 	bl	8000524 <__aeabi_i2d>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	ec43 2b10 	vmov	d0, r2, r3
 800bfea:	f007 fc79 	bl	80138e0 <sqrt>
 800bfee:	ec53 2b10 	vmov	r2, r3, d0
 800bff2:	4610      	mov	r0, r2
 800bff4:	4619      	mov	r1, r3
 800bff6:	f7f4 fdd7 	bl	8000ba8 <__aeabi_d2uiz>
 800bffa:	4603      	mov	r3, r0
 800bffc:	b29b      	uxth	r3, r3
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <CalculateFGH>:

//计算 F G H
void CalculateFGH(MapNode *node, Direction direction, MapNode *EndPoint)
{
 800c008:	b590      	push	{r4, r7, lr}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	460b      	mov	r3, r1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	72fb      	strb	r3, [r7, #11]

	if (node->ParentNode == 0)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	7c9b      	ldrb	r3, [r3, #18]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d111      	bne.n	800c042 <CalculateFGH+0x3a>
	{
		node->H = CalculateDistance(&node->Position, &EndPoint->Position);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f103 020e 	add.w	r2, r3, #14
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	330e      	adds	r3, #14
 800c028:	4619      	mov	r1, r3
 800c02a:	4610      	mov	r0, r2
 800c02c:	f7ff ffb4 	bl	800bf98 <CalculateDistance>
 800c030:	4603      	mov	r3, r0
 800c032:	461a      	mov	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	831a      	strh	r2, [r3, #24]
		node->F = node->H;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	8b1a      	ldrh	r2, [r3, #24]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	829a      	strh	r2, [r3, #20]
		return;
 800c040:	e030      	b.n	800c0a4 <CalculateFGH+0x9c>
	}

	node->H = CalculateDistance(&node->Position, &EndPoint->Position);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f103 020e 	add.w	r2, r3, #14
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	330e      	adds	r3, #14
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f7ff ffa2 	bl	800bf98 <CalculateDistance>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	831a      	strh	r2, [r3, #24]
	node->G = MapList[node->ParentNode].G + MapList[node->ParentNode].ChildNodeDistances[direction];
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	7c9b      	ldrb	r3, [r3, #18]
 800c060:	4619      	mov	r1, r3
 800c062:	4a12      	ldr	r2, [pc, #72]	; (800c0ac <CalculateFGH+0xa4>)
 800c064:	231a      	movs	r3, #26
 800c066:	fb01 f303 	mul.w	r3, r1, r3
 800c06a:	4413      	add	r3, r2
 800c06c:	3316      	adds	r3, #22
 800c06e:	8819      	ldrh	r1, [r3, #0]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	7c9b      	ldrb	r3, [r3, #18]
 800c074:	461a      	mov	r2, r3
 800c076:	7af8      	ldrb	r0, [r7, #11]
 800c078:	4c0c      	ldr	r4, [pc, #48]	; (800c0ac <CalculateFGH+0xa4>)
 800c07a:	4613      	mov	r3, r2
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	4403      	add	r3, r0
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	4423      	add	r3, r4
 800c08a:	88db      	ldrh	r3, [r3, #6]
 800c08c:	440b      	add	r3, r1
 800c08e:	b29a      	uxth	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	82da      	strh	r2, [r3, #22]
	node->F = node->H + node->G;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8b1a      	ldrh	r2, [r3, #24]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8adb      	ldrh	r3, [r3, #22]
 800c09c:	4413      	add	r3, r2
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	829a      	strh	r2, [r3, #20]

	//累计父节点距离
}
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd90      	pop	{r4, r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	200019cc 	.word	0x200019cc

0800c0b0 <ClearCache>:

//清空缓存
void ClearCache()
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NodeNumber; i++)
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	e018      	b.n	800c0ee <ClearCache+0x3e>
	{
		CloseList[i] = OpenList[i] = NULL;
 800c0bc:	4a11      	ldr	r2, [pc, #68]	; (800c104 <ClearCache+0x54>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800c0c6:	4a0f      	ldr	r2, [pc, #60]	; (800c104 <ClearCache+0x54>)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c0ce:	490e      	ldr	r1, [pc, #56]	; (800c108 <ClearCache+0x58>)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		MapList[i].ParentNode = 0;
 800c0d6:	4a0d      	ldr	r2, [pc, #52]	; (800c10c <ClearCache+0x5c>)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	211a      	movs	r1, #26
 800c0dc:	fb01 f303 	mul.w	r3, r1, r3
 800c0e0:	4413      	add	r3, r2
 800c0e2:	3312      	adds	r3, #18
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NodeNumber; i++)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	607b      	str	r3, [r7, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b09      	cmp	r3, #9
 800c0f2:	dde3      	ble.n	800c0bc <ClearCache+0xc>
	}
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	20001ad0 	.word	0x20001ad0
 800c108:	20001af8 	.word	0x20001af8
 800c10c:	200019cc 	.word	0x200019cc

0800c110 <WayFinding>:

//查找路径 返回终点
MapNode* WayFinding(uint8_t end)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08e      	sub	sp, #56	; 0x38
 800c114:	af02      	add	r7, sp, #8
 800c116:	4603      	mov	r3, r0
 800c118:	71fb      	strb	r3, [r7, #7]

	MapNode *StartingNode = &MapList[StartPoint];
 800c11a:	4b79      	ldr	r3, [pc, #484]	; (800c300 <WayFinding+0x1f0>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	231a      	movs	r3, #26
 800c122:	fb02 f303 	mul.w	r3, r2, r3
 800c126:	4a77      	ldr	r2, [pc, #476]	; (800c304 <WayFinding+0x1f4>)
 800c128:	4413      	add	r3, r2
 800c12a:	613b      	str	r3, [r7, #16]
	MapNode *EndNode = &MapList[end];
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	221a      	movs	r2, #26
 800c130:	fb02 f303 	mul.w	r3, r2, r3
 800c134:	4a73      	ldr	r2, [pc, #460]	; (800c304 <WayFinding+0x1f4>)
 800c136:	4413      	add	r3, r2
 800c138:	60fb      	str	r3, [r7, #12]

	printfX("起点：%d\n终点：%d\n初始朝向：%d\n", StartingNode->Index, EndNode->Index, CurrentDirection);
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4619      	mov	r1, r3
 800c146:	4b70      	ldr	r3, [pc, #448]	; (800c308 <WayFinding+0x1f8>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	460b      	mov	r3, r1
 800c14e:	496f      	ldr	r1, [pc, #444]	; (800c30c <WayFinding+0x1fc>)
 800c150:	486f      	ldr	r0, [pc, #444]	; (800c310 <WayFinding+0x200>)
 800c152:	f003 fdd3 	bl	800fcfc <siprintf>
 800c156:	486e      	ldr	r0, [pc, #440]	; (800c310 <WayFinding+0x200>)
 800c158:	f002 ff06 	bl	800ef68 <printf_Base>

	ClearCache();
 800c15c:	f7ff ffa8 	bl	800c0b0 <ClearCache>
	// 把起点加入 open list
	OpenList[StartingNode->Index] = StartingNode;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	4619      	mov	r1, r3
 800c166:	4a6b      	ldr	r2, [pc, #428]	; (800c314 <WayFinding+0x204>)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	CalculateFGH(StartingNode, Direction_None, EndNode);
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	2104      	movs	r1, #4
 800c172:	6938      	ldr	r0, [r7, #16]
 800c174:	f7ff ff48 	bl	800c008 <CalculateFGH>

	for (int k = 1; k < NodeNumber; k++)
 800c178:	2301      	movs	r3, #1
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c17c:	e0b4      	b.n	800c2e8 <WayFinding+0x1d8>
	{
		int f_min = 99999;
 800c17e:	4b66      	ldr	r3, [pc, #408]	; (800c318 <WayFinding+0x208>)
 800c180:	62bb      	str	r3, [r7, #40]	; 0x28
		MapNode *currentNode = NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	627b      	str	r3, [r7, #36]	; 0x24

		// 遍历 open list ，查找 F 值最小的节点，把它作为当前要处理的节点
		for (int i = 1; i < NodeNumber; i++)
 800c186:	2301      	movs	r3, #1
 800c188:	623b      	str	r3, [r7, #32]
 800c18a:	e01e      	b.n	800c1ca <WayFinding+0xba>
		{
			if (OpenList[i] == NULL)
 800c18c:	4a61      	ldr	r2, [pc, #388]	; (800c314 <WayFinding+0x204>)
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d014      	beq.n	800c1c2 <WayFinding+0xb2>
			{
				continue;
			}
			if (OpenList[i]->F < f_min)
 800c198:	4a5e      	ldr	r2, [pc, #376]	; (800c314 <WayFinding+0x204>)
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1a0:	8a9b      	ldrh	r3, [r3, #20]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	dd0c      	ble.n	800c1c4 <WayFinding+0xb4>
			{
				f_min = OpenList[i]->F;
 800c1aa:	4a5a      	ldr	r2, [pc, #360]	; (800c314 <WayFinding+0x204>)
 800c1ac:	6a3b      	ldr	r3, [r7, #32]
 800c1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1b2:	8a9b      	ldrh	r3, [r3, #20]
 800c1b4:	62bb      	str	r3, [r7, #40]	; 0x28
				currentNode = OpenList[i];
 800c1b6:	4a57      	ldr	r2, [pc, #348]	; (800c314 <WayFinding+0x204>)
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1be:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c0:	e000      	b.n	800c1c4 <WayFinding+0xb4>
				continue;
 800c1c2:	bf00      	nop
		for (int i = 1; i < NodeNumber; i++)
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	623b      	str	r3, [r7, #32]
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	2b09      	cmp	r3, #9
 800c1ce:	dddd      	ble.n	800c18c <WayFinding+0x7c>
			}
		}

		//把这个节点移到 close list 。
		OpenList[currentNode->Index] = NULL;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4b4f      	ldr	r3, [pc, #316]	; (800c314 <WayFinding+0x204>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CloseList[currentNode->Index] = currentNode;
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4a4d      	ldr	r2, [pc, #308]	; (800c31c <WayFinding+0x20c>)
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		//对当前方格的 8 个相邻方格的每一个方格？
		for (int i = 0; i < DirectionNumber; i++)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	61fb      	str	r3, [r7, #28]
 800c1f0:	e06c      	b.n	800c2cc <WayFinding+0x1bc>
		{
			MapNode *childNode = &MapList[currentNode->ChildNodes[i]];
 800c1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	231a      	movs	r3, #26
 800c200:	fb02 f303 	mul.w	r3, r2, r3
 800c204:	4a3f      	ldr	r2, [pc, #252]	; (800c304 <WayFinding+0x1f4>)
 800c206:	4413      	add	r3, r2
 800c208:	60bb      	str	r3, [r7, #8]

			if (childNode == NULL)
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d057      	beq.n	800c2c0 <WayFinding+0x1b0>
			{
				continue;
			}

			//如果它是不可抵达的或者它在 close list 中，忽略它
			if (CloseList[childNode->Index] != NULL)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
 800c216:	4b41      	ldr	r3, [pc, #260]	; (800c31c <WayFinding+0x20c>)
 800c218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d151      	bne.n	800c2c4 <WayFinding+0x1b4>
			{
				continue;
			}

			if (OpenList[childNode->Index] == NULL)
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	461a      	mov	r2, r3
 800c226:	4b3b      	ldr	r3, [pc, #236]	; (800c314 <WayFinding+0x204>)
 800c228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d116      	bne.n	800c25e <WayFinding+0x14e>
			{
				//如果它不在 open list 中，把它加入 open list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值

				OpenList[childNode->Index] = childNode;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	4619      	mov	r1, r3
 800c236:	4a37      	ldr	r2, [pc, #220]	; (800c314 <WayFinding+0x204>)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				childNode->ParentNode = currentNode->Index;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	781a      	ldrb	r2, [r3, #0]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	749a      	strb	r2, [r3, #18]
				childNode->Direction = (Direction) i;
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	74da      	strb	r2, [r3, #19]
				CalculateFGH(childNode, (Direction) i, EndNode);
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	b2db      	uxtb	r3, r3
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4619      	mov	r1, r3
 800c256:	68b8      	ldr	r0, [r7, #8]
 800c258:	f7ff fed6 	bl	800c008 <CalculateFGH>
 800c25c:	e033      	b.n	800c2c6 <WayFinding+0x1b6>
			}
			else
			{
				//如果它已经在 open list 中，检查这条路径 ( 即经由当前方格到达它那里 ) 是否更好，用 G 值作参考

				uint8_t flag = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	76fb      	strb	r3, [r7, #27]
				for (int m = 1; m < NodeNumber; m++)
 800c262:	2301      	movs	r3, #1
 800c264:	617b      	str	r3, [r7, #20]
 800c266:	e015      	b.n	800c294 <WayFinding+0x184>
				{
					if (OpenList[m] == NULL)
 800c268:	4a2a      	ldr	r2, [pc, #168]	; (800c314 <WayFinding+0x204>)
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <WayFinding+0x17c>
					{
						continue;
					}
					if (OpenList[m]->G < childNode->G)
 800c274:	4a27      	ldr	r2, [pc, #156]	; (800c314 <WayFinding+0x204>)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c27c:	8ada      	ldrh	r2, [r3, #22]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	8adb      	ldrh	r3, [r3, #22]
 800c282:	429a      	cmp	r2, r3
 800c284:	d203      	bcs.n	800c28e <WayFinding+0x17e>
					{
						flag = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	76fb      	strb	r3, [r7, #27]
						break;
 800c28a:	e006      	b.n	800c29a <WayFinding+0x18a>
						continue;
 800c28c:	bf00      	nop
				for (int m = 1; m < NodeNumber; m++)
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	3301      	adds	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	2b09      	cmp	r3, #9
 800c298:	dde6      	ble.n	800c268 <WayFinding+0x158>
					}
				}

				if (flag == 1)
 800c29a:	7efb      	ldrb	r3, [r7, #27]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d112      	bne.n	800c2c6 <WayFinding+0x1b6>
				{
					childNode->ParentNode = currentNode->Index;
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	781a      	ldrb	r2, [r3, #0]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	749a      	strb	r2, [r3, #18]
					childNode->Direction = (Direction) i;
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	74da      	strb	r2, [r3, #19]
					CalculateFGH(childNode, (Direction) i, EndNode);
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	68b8      	ldr	r0, [r7, #8]
 800c2ba:	f7ff fea5 	bl	800c008 <CalculateFGH>
 800c2be:	e002      	b.n	800c2c6 <WayFinding+0x1b6>
				continue;
 800c2c0:	bf00      	nop
 800c2c2:	e000      	b.n	800c2c6 <WayFinding+0x1b6>
				continue;
 800c2c4:	bf00      	nop
		for (int i = 0; i < DirectionNumber; i++)
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	dd8f      	ble.n	800c1f2 <WayFinding+0xe2>
				}
			}
		}

		//停止，当你
		if (OpenList[EndNode->Index] != NULL)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4b0e      	ldr	r3, [pc, #56]	; (800c314 <WayFinding+0x204>)
 800c2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d107      	bne.n	800c2f2 <WayFinding+0x1e2>
	for (int k = 1; k < NodeNumber; k++)
 800c2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	2b09      	cmp	r3, #9
 800c2ec:	f77f af47 	ble.w	800c17e <WayFinding+0x6e>
 800c2f0:	e000      	b.n	800c2f4 <WayFinding+0x1e4>
		{
			// 把终点加入到了 open list 中，此时路径已经找到了，或者
			break;
 800c2f2:	bf00      	nop

		//    查找终点失败，并且 open list 是空的，此时没有路径。
		// 前提条件 一定存在路径
	}

	return EndNode;
 800c2f4:	68fb      	ldr	r3, [r7, #12]

}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3730      	adds	r7, #48	; 0x30
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20000074 	.word	0x20000074
 800c304:	200019cc 	.word	0x200019cc
 800c308:	20001b20 	.word	0x20001b20
 800c30c:	08013b24 	.word	0x08013b24
 800c310:	200011fc 	.word	0x200011fc
 800c314:	20001ad0 	.word	0x20001ad0
 800c318:	0001869f 	.word	0x0001869f
 800c31c:	20001af8 	.word	0x20001af8

0800c320 <GetDirectionDeviation>:

//获取当前朝向 向何处转弯 才能调整为目标朝向
Direction GetDirectionDeviation(Direction current, Direction object)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	460a      	mov	r2, r1
 800c32a:	71fb      	strb	r3, [r7, #7]
 800c32c:	4613      	mov	r3, r2
 800c32e:	71bb      	strb	r3, [r7, #6]
	if (current == object)
 800c330:	79fa      	ldrb	r2, [r7, #7]
 800c332:	79bb      	ldrb	r3, [r7, #6]
 800c334:	429a      	cmp	r2, r3
 800c336:	d101      	bne.n	800c33c <GetDirectionDeviation+0x1c>
	{
		return 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	e02a      	b.n	800c392 <GetDirectionDeviation+0x72>
	}
	if ((current + 1) % DirectionNumber == object)
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	3301      	adds	r3, #1
 800c340:	425a      	negs	r2, r3
 800c342:	f003 0303 	and.w	r3, r3, #3
 800c346:	f002 0203 	and.w	r2, r2, #3
 800c34a:	bf58      	it	pl
 800c34c:	4253      	negpl	r3, r2
 800c34e:	79ba      	ldrb	r2, [r7, #6]
 800c350:	4293      	cmp	r3, r2
 800c352:	d101      	bne.n	800c358 <GetDirectionDeviation+0x38>
	{
		return 1;
 800c354:	2301      	movs	r3, #1
 800c356:	e01c      	b.n	800c392 <GetDirectionDeviation+0x72>
	}
	if ((current + 2) % DirectionNumber == object)
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	3302      	adds	r3, #2
 800c35c:	425a      	negs	r2, r3
 800c35e:	f003 0303 	and.w	r3, r3, #3
 800c362:	f002 0203 	and.w	r2, r2, #3
 800c366:	bf58      	it	pl
 800c368:	4253      	negpl	r3, r2
 800c36a:	79ba      	ldrb	r2, [r7, #6]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d101      	bne.n	800c374 <GetDirectionDeviation+0x54>
	{
		return 2;
 800c370:	2302      	movs	r3, #2
 800c372:	e00e      	b.n	800c392 <GetDirectionDeviation+0x72>
	}

	if ((current + 3) % DirectionNumber == object)
 800c374:	79fb      	ldrb	r3, [r7, #7]
 800c376:	3303      	adds	r3, #3
 800c378:	425a      	negs	r2, r3
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	f002 0203 	and.w	r2, r2, #3
 800c382:	bf58      	it	pl
 800c384:	4253      	negpl	r3, r2
 800c386:	79ba      	ldrb	r2, [r7, #6]
 800c388:	4293      	cmp	r3, r2
 800c38a:	d101      	bne.n	800c390 <GetDirectionDeviation+0x70>
	{
		return 3;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e000      	b.n	800c392 <GetDirectionDeviation+0x72>
	}
	return 4;
 800c390:	2304      	movs	r3, #4

}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
	...

0800c3a0 <RoadToCommand>:

//从路线生成指令
//layer：递归层数 初始值0
//node：终点
uint8_t RoadToCommand(MapNode *node, uint8_t layer)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
	if (node->ParentNode == 0)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7c9b      	ldrb	r3, [r3, #18]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10b      	bne.n	800c3cc <RoadToCommand+0x2c>
	{
		//父节点为空即为起点
		printfX("%d", node->Index);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	497f      	ldr	r1, [pc, #508]	; (800c5b8 <RoadToCommand+0x218>)
 800c3bc:	487f      	ldr	r0, [pc, #508]	; (800c5bc <RoadToCommand+0x21c>)
 800c3be:	f003 fc9d 	bl	800fcfc <siprintf>
 800c3c2:	487e      	ldr	r0, [pc, #504]	; (800c5bc <RoadToCommand+0x21c>)
 800c3c4:	f002 fdd0 	bl	800ef68 <printf_Base>
		return 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	e0f1      	b.n	800c5b0 <RoadToCommand+0x210>
	}
	else
	{
		uint8_t reLayer = RoadToCommand(&MapList[node->ParentNode], layer + 1);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7c9b      	ldrb	r3, [r3, #18]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	231a      	movs	r3, #26
 800c3d4:	fb02 f303 	mul.w	r3, r2, r3
 800c3d8:	4a79      	ldr	r2, [pc, #484]	; (800c5c0 <RoadToCommand+0x220>)
 800c3da:	441a      	add	r2, r3
 800c3dc:	78fb      	ldrb	r3, [r7, #3]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7ff ffdb 	bl	800c3a0 <RoadToCommand>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	73fb      	strb	r3, [r7, #15]

		//需要考虑上一端点朝向偏差
		Direction dir = GetDirectionDeviation(CurrentDirection, node->Direction);
 800c3ee:	4b75      	ldr	r3, [pc, #468]	; (800c5c4 <RoadToCommand+0x224>)
 800c3f0:	781a      	ldrb	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7cdb      	ldrb	r3, [r3, #19]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	f7ff ff91 	bl	800c320 <GetDirectionDeviation>
 800c3fe:	4603      	mov	r3, r0
 800c400:	73bb      	strb	r3, [r7, #14]
		CurrentDirection = node->Direction;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7cda      	ldrb	r2, [r3, #19]
 800c406:	4b6f      	ldr	r3, [pc, #444]	; (800c5c4 <RoadToCommand+0x224>)
 800c408:	701a      	strb	r2, [r3, #0]

		printfX(" -- ");
 800c40a:	496f      	ldr	r1, [pc, #444]	; (800c5c8 <RoadToCommand+0x228>)
 800c40c:	486b      	ldr	r0, [pc, #428]	; (800c5bc <RoadToCommand+0x21c>)
 800c40e:	f003 fc75 	bl	800fcfc <siprintf>
 800c412:	486a      	ldr	r0, [pc, #424]	; (800c5bc <RoadToCommand+0x21c>)
 800c414:	f002 fda8 	bl	800ef68 <printf_Base>
		switch (dir)
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	f200 80a4 	bhi.w	800c568 <RoadToCommand+0x1c8>
 800c420:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <RoadToCommand+0x88>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c4d1 	.word	0x0800c4d1
 800c42c:	0800c485 	.word	0x0800c485
 800c430:	0800c51d 	.word	0x0800c51d
 800c434:	0800c439 	.word	0x0800c439
		{
			case Direction_Left:
				printfX("左");
 800c438:	4964      	ldr	r1, [pc, #400]	; (800c5cc <RoadToCommand+0x22c>)
 800c43a:	4860      	ldr	r0, [pc, #384]	; (800c5bc <RoadToCommand+0x21c>)
 800c43c:	f003 fc5e 	bl	800fcfc <siprintf>
 800c440:	485e      	ldr	r0, [pc, #376]	; (800c5bc <RoadToCommand+0x21c>)
 800c442:	f002 fd91 	bl	800ef68 <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 800c446:	7bfa      	ldrb	r2, [r7, #15]
 800c448:	4961      	ldr	r1, [pc, #388]	; (800c5d0 <RoadToCommand+0x230>)
 800c44a:	4613      	mov	r3, r2
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	3304      	adds	r3, #4
 800c456:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c45a:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 800c45c:	7bfa      	ldrb	r2, [r7, #15]
 800c45e:	495c      	ldr	r1, [pc, #368]	; (800c5d0 <RoadToCommand+0x230>)
 800c460:	4613      	mov	r3, r2
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	4413      	add	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	440b      	add	r3, r1
 800c46a:	3308      	adds	r3, #8
 800c46c:	2200      	movs	r2, #0
 800c46e:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Left;
 800c470:	7bfa      	ldrb	r2, [r7, #15]
 800c472:	4957      	ldr	r1, [pc, #348]	; (800c5d0 <RoadToCommand+0x230>)
 800c474:	4613      	mov	r3, r2
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	2201      	movs	r2, #1
 800c480:	701a      	strb	r2, [r3, #0]
				break;
 800c482:	e072      	b.n	800c56a <RoadToCommand+0x1ca>
			case Direction_Right:
				printfX("右");
 800c484:	4953      	ldr	r1, [pc, #332]	; (800c5d4 <RoadToCommand+0x234>)
 800c486:	484d      	ldr	r0, [pc, #308]	; (800c5bc <RoadToCommand+0x21c>)
 800c488:	f003 fc38 	bl	800fcfc <siprintf>
 800c48c:	484b      	ldr	r0, [pc, #300]	; (800c5bc <RoadToCommand+0x21c>)
 800c48e:	f002 fd6b 	bl	800ef68 <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 800c492:	7bfa      	ldrb	r2, [r7, #15]
 800c494:	494e      	ldr	r1, [pc, #312]	; (800c5d0 <RoadToCommand+0x230>)
 800c496:	4613      	mov	r3, r2
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	4413      	add	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	440b      	add	r3, r1
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c4a6:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 800c4a8:	7bfa      	ldrb	r2, [r7, #15]
 800c4aa:	4949      	ldr	r1, [pc, #292]	; (800c5d0 <RoadToCommand+0x230>)
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	440b      	add	r3, r1
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Right;
 800c4bc:	7bfa      	ldrb	r2, [r7, #15]
 800c4be:	4944      	ldr	r1, [pc, #272]	; (800c5d0 <RoadToCommand+0x230>)
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	701a      	strb	r2, [r3, #0]
				break;
 800c4ce:	e04c      	b.n	800c56a <RoadToCommand+0x1ca>
			case Direction_Top:
				printfX("上");
 800c4d0:	4941      	ldr	r1, [pc, #260]	; (800c5d8 <RoadToCommand+0x238>)
 800c4d2:	483a      	ldr	r0, [pc, #232]	; (800c5bc <RoadToCommand+0x21c>)
 800c4d4:	f003 fc12 	bl	800fcfc <siprintf>
 800c4d8:	4838      	ldr	r0, [pc, #224]	; (800c5bc <RoadToCommand+0x21c>)
 800c4da:	f002 fd45 	bl	800ef68 <printf_Base>
				Commands[reLayer].Duration = Command_Turn_Duration;
 800c4de:	7bfa      	ldrb	r2, [r7, #15]
 800c4e0:	493b      	ldr	r1, [pc, #236]	; (800c5d0 <RoadToCommand+0x230>)
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	440b      	add	r3, r1
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c4f2:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 800c4f4:	7bfa      	ldrb	r2, [r7, #15]
 800c4f6:	4936      	ldr	r1, [pc, #216]	; (800c5d0 <RoadToCommand+0x230>)
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	440b      	add	r3, r1
 800c502:	3308      	adds	r3, #8
 800c504:	2200      	movs	r2, #0
 800c506:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Forward;
 800c508:	7bfa      	ldrb	r2, [r7, #15]
 800c50a:	4931      	ldr	r1, [pc, #196]	; (800c5d0 <RoadToCommand+0x230>)
 800c50c:	4613      	mov	r3, r2
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	4413      	add	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	440b      	add	r3, r1
 800c516:	2200      	movs	r2, #0
 800c518:	701a      	strb	r2, [r3, #0]
				break;
 800c51a:	e026      	b.n	800c56a <RoadToCommand+0x1ca>
			case Direction_Bottom:		//无法后退 即调头
				printfX("下");
 800c51c:	492f      	ldr	r1, [pc, #188]	; (800c5dc <RoadToCommand+0x23c>)
 800c51e:	4827      	ldr	r0, [pc, #156]	; (800c5bc <RoadToCommand+0x21c>)
 800c520:	f003 fbec 	bl	800fcfc <siprintf>
 800c524:	4825      	ldr	r0, [pc, #148]	; (800c5bc <RoadToCommand+0x21c>)
 800c526:	f002 fd1f 	bl	800ef68 <printf_Base>
				Commands[reLayer].Duration = Command_Rotation_Duration;
 800c52a:	7bfa      	ldrb	r2, [r7, #15]
 800c52c:	4928      	ldr	r1, [pc, #160]	; (800c5d0 <RoadToCommand+0x230>)
 800c52e:	4613      	mov	r3, r2
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	440b      	add	r3, r1
 800c538:	3304      	adds	r3, #4
 800c53a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c53e:	601a      	str	r2, [r3, #0]
				Commands[reLayer].RunCommand_Time = 0;
 800c540:	7bfa      	ldrb	r2, [r7, #15]
 800c542:	4923      	ldr	r1, [pc, #140]	; (800c5d0 <RoadToCommand+0x230>)
 800c544:	4613      	mov	r3, r2
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	4413      	add	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	440b      	add	r3, r1
 800c54e:	3308      	adds	r3, #8
 800c550:	2200      	movs	r2, #0
 800c552:	601a      	str	r2, [r3, #0]
				Commands[reLayer].Type = Command_Rotation;
 800c554:	7bfa      	ldrb	r2, [r7, #15]
 800c556:	491e      	ldr	r1, [pc, #120]	; (800c5d0 <RoadToCommand+0x230>)
 800c558:	4613      	mov	r3, r2
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	440b      	add	r3, r1
 800c562:	2204      	movs	r2, #4
 800c564:	701a      	strb	r2, [r3, #0]
				break;
 800c566:	e000      	b.n	800c56a <RoadToCommand+0x1ca>
			default:
				break;
 800c568:	bf00      	nop
		}
		printfX(" --> ");
 800c56a:	491d      	ldr	r1, [pc, #116]	; (800c5e0 <RoadToCommand+0x240>)
 800c56c:	4813      	ldr	r0, [pc, #76]	; (800c5bc <RoadToCommand+0x21c>)
 800c56e:	f003 fbc5 	bl	800fcfc <siprintf>
 800c572:	4812      	ldr	r0, [pc, #72]	; (800c5bc <RoadToCommand+0x21c>)
 800c574:	f002 fcf8 	bl	800ef68 <printf_Base>
		printfX("%d", node->Index);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	461a      	mov	r2, r3
 800c57e:	490e      	ldr	r1, [pc, #56]	; (800c5b8 <RoadToCommand+0x218>)
 800c580:	480e      	ldr	r0, [pc, #56]	; (800c5bc <RoadToCommand+0x21c>)
 800c582:	f003 fbbb 	bl	800fcfc <siprintf>
 800c586:	480d      	ldr	r0, [pc, #52]	; (800c5bc <RoadToCommand+0x21c>)
 800c588:	f002 fcee 	bl	800ef68 <printf_Base>

		//判断是否结束
		if (layer == 0)
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10b      	bne.n	800c5aa <RoadToCommand+0x20a>
		{
			Command_Number = reLayer + 1;
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	3301      	adds	r3, #1
 800c596:	b2da      	uxtb	r2, r3
 800c598:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <RoadToCommand+0x244>)
 800c59a:	701a      	strb	r2, [r3, #0]
			printfX("\n");
 800c59c:	4912      	ldr	r1, [pc, #72]	; (800c5e8 <RoadToCommand+0x248>)
 800c59e:	4807      	ldr	r0, [pc, #28]	; (800c5bc <RoadToCommand+0x21c>)
 800c5a0:	f003 fbac 	bl	800fcfc <siprintf>
 800c5a4:	4805      	ldr	r0, [pc, #20]	; (800c5bc <RoadToCommand+0x21c>)
 800c5a6:	f002 fcdf 	bl	800ef68 <printf_Base>
		}
		return reLayer + 1;
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	b2db      	uxtb	r3, r3
	}

}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	08013b50 	.word	0x08013b50
 800c5bc:	200011fc 	.word	0x200011fc
 800c5c0:	200019cc 	.word	0x200019cc
 800c5c4:	20001b20 	.word	0x20001b20
 800c5c8:	08013b54 	.word	0x08013b54
 800c5cc:	08013b5c 	.word	0x08013b5c
 800c5d0:	20000078 	.word	0x20000078
 800c5d4:	08013b60 	.word	0x08013b60
 800c5d8:	08013b64 	.word	0x08013b64
 800c5dc:	08013b68 	.word	0x08013b68
 800c5e0:	08013b6c 	.word	0x08013b6c
 800c5e4:	20000075 	.word	0x20000075
 800c5e8:	08013b74 	.word	0x08013b74

0800c5ec <GenerateMap>:

//画出地图
void GenerateMap()
{
 800c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f0:	b09b      	sub	sp, #108	; 0x6c
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	466b      	mov	r3, sp
 800c5f6:	461e      	mov	r6, r3
	const int length = 20;
 800c5f8:	2314      	movs	r3, #20
 800c5fa:	63bb      	str	r3, [r7, #56]	; 0x38
	//0 空地 -1 路 1 2 3 ....节点
	int map[length][length];
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	3b01      	subs	r3, #1
 800c600:	637b      	str	r3, [r7, #52]	; 0x34
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	2200      	movs	r2, #0
 800c606:	461c      	mov	r4, r3
 800c608:	4615      	mov	r5, r2
 800c60a:	f04f 0200 	mov.w	r2, #0
 800c60e:	f04f 0300 	mov.w	r3, #0
 800c612:	016b      	lsls	r3, r5, #5
 800c614:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800c618:	0162      	lsls	r2, r4, #5
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	009c      	lsls	r4, r3, #2
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	3b01      	subs	r3, #1
 800c622:	633b      	str	r3, [r7, #48]	; 0x30
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	2200      	movs	r2, #0
 800c628:	469a      	mov	sl, r3
 800c62a:	4693      	mov	fp, r2
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	2200      	movs	r2, #0
 800c630:	613b      	str	r3, [r7, #16]
 800c632:	617a      	str	r2, [r7, #20]
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	fb03 f20b 	mul.w	r2, r3, fp
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	fb0a f303 	mul.w	r3, sl, r3
 800c640:	4413      	add	r3, r2
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	fbaa 8902 	umull	r8, r9, sl, r2
 800c648:	444b      	add	r3, r9
 800c64a:	4699      	mov	r9, r3
 800c64c:	f04f 0200 	mov.w	r2, #0
 800c650:	f04f 0300 	mov.w	r3, #0
 800c654:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800c658:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800c65c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	2200      	movs	r2, #0
 800c664:	60bb      	str	r3, [r7, #8]
 800c666:	60fa      	str	r2, [r7, #12]
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	2200      	movs	r2, #0
 800c66c:	603b      	str	r3, [r7, #0]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800c674:	464b      	mov	r3, r9
 800c676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c67a:	4652      	mov	r2, sl
 800c67c:	fb02 f203 	mul.w	r2, r2, r3
 800c680:	465b      	mov	r3, fp
 800c682:	4645      	mov	r5, r8
 800c684:	fb05 f303 	mul.w	r3, r5, r3
 800c688:	4413      	add	r3, r2
 800c68a:	4642      	mov	r2, r8
 800c68c:	4655      	mov	r5, sl
 800c68e:	fba2 0105 	umull	r0, r1, r2, r5
 800c692:	440b      	add	r3, r1
 800c694:	4619      	mov	r1, r3
 800c696:	f04f 0200 	mov.w	r2, #0
 800c69a:	f04f 0300 	mov.w	r3, #0
 800c69e:	014b      	lsls	r3, r1, #5
 800c6a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c6a4:	0142      	lsls	r2, r0, #5
 800c6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6aa:	fb02 f303 	mul.w	r3, r2, r3
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	3307      	adds	r3, #7
 800c6b2:	08db      	lsrs	r3, r3, #3
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	ebad 0d03 	sub.w	sp, sp, r3
 800c6ba:	466b      	mov	r3, sp
 800c6bc:	3303      	adds	r3, #3
 800c6be:	089b      	lsrs	r3, r3, #2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < length; i++)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	653b      	str	r3, [r7, #80]	; 0x50
 800c6c8:	e016      	b.n	800c6f8 <GenerateMap+0x10c>
	{
		for (int j = 0; j < length; j++)
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	657b      	str	r3, [r7, #84]	; 0x54
 800c6ce:	e00c      	b.n	800c6ea <GenerateMap+0xfe>
		{
			map[i][j] = 0;
 800c6d0:	08a2      	lsrs	r2, r4, #2
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c6d6:	fb02 f101 	mul.w	r1, r2, r1
 800c6da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6dc:	440a      	add	r2, r1
 800c6de:	2100      	movs	r1, #0
 800c6e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < length; j++)
 800c6e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	657b      	str	r3, [r7, #84]	; 0x54
 800c6ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	dbee      	blt.n	800c6d0 <GenerateMap+0xe4>
	for (int i = 0; i < length; i++)
 800c6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	653b      	str	r3, [r7, #80]	; 0x50
 800c6f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	dbe4      	blt.n	800c6ca <GenerateMap+0xde>
		}
	}
	int x = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	65bb      	str	r3, [r7, #88]	; 0x58
	int y = length - 1;
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	3b01      	subs	r3, #1
 800c708:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 0; i < NodeRelationshipNumber; i++)
 800c70a:	2300      	movs	r3, #0
 800c70c:	663b      	str	r3, [r7, #96]	; 0x60
 800c70e:	e34e      	b.n	800cdae <GenerateMap+0x7c2>
	{
		//查找节点是否存在
		if (MapList[NodeList[i].NodeA].Index == 0)
 800c710:	4990      	ldr	r1, [pc, #576]	; (800c954 <GenerateMap+0x368>)
 800c712:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c714:	4613      	mov	r3, r2
 800c716:	005b      	lsls	r3, r3, #1
 800c718:	4413      	add	r3, r2
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	440b      	add	r3, r1
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	4619      	mov	r1, r3
 800c722:	4a8d      	ldr	r2, [pc, #564]	; (800c958 <GenerateMap+0x36c>)
 800c724:	231a      	movs	r3, #26
 800c726:	fb01 f303 	mul.w	r3, r1, r3
 800c72a:	4413      	add	r3, r2
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d15b      	bne.n	800c7ea <GenerateMap+0x1fe>
		{
			if (i == 0)
 800c732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c734:	2b00      	cmp	r3, #0
 800c736:	d150      	bne.n	800c7da <GenerateMap+0x1ee>
			{
				MapList[NodeList[i].NodeA].Index = NodeList[i].NodeA;
 800c738:	4986      	ldr	r1, [pc, #536]	; (800c954 <GenerateMap+0x368>)
 800c73a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c73c:	4613      	mov	r3, r2
 800c73e:	005b      	lsls	r3, r3, #1
 800c740:	4413      	add	r3, r2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	440b      	add	r3, r1
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	4618      	mov	r0, r3
 800c74a:	4982      	ldr	r1, [pc, #520]	; (800c954 <GenerateMap+0x368>)
 800c74c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c74e:	4613      	mov	r3, r2
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	4413      	add	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	440b      	add	r3, r1
 800c758:	7819      	ldrb	r1, [r3, #0]
 800c75a:	4a7f      	ldr	r2, [pc, #508]	; (800c958 <GenerateMap+0x36c>)
 800c75c:	231a      	movs	r3, #26
 800c75e:	fb00 f303 	mul.w	r3, r0, r3
 800c762:	4413      	add	r3, r2
 800c764:	460a      	mov	r2, r1
 800c766:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].Position.X = x;
 800c768:	497a      	ldr	r1, [pc, #488]	; (800c954 <GenerateMap+0x368>)
 800c76a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	440b      	add	r3, r1
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	4618      	mov	r0, r3
 800c77a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c77c:	b299      	uxth	r1, r3
 800c77e:	4a76      	ldr	r2, [pc, #472]	; (800c958 <GenerateMap+0x36c>)
 800c780:	231a      	movs	r3, #26
 800c782:	fb00 f303 	mul.w	r3, r0, r3
 800c786:	4413      	add	r3, r2
 800c788:	330e      	adds	r3, #14
 800c78a:	460a      	mov	r2, r1
 800c78c:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeA].Position.Y = y;
 800c78e:	4971      	ldr	r1, [pc, #452]	; (800c954 <GenerateMap+0x368>)
 800c790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c792:	4613      	mov	r3, r2
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	4413      	add	r3, r2
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	440b      	add	r3, r1
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7a2:	b299      	uxth	r1, r3
 800c7a4:	4a6c      	ldr	r2, [pc, #432]	; (800c958 <GenerateMap+0x36c>)
 800c7a6:	231a      	movs	r3, #26
 800c7a8:	fb00 f303 	mul.w	r3, r0, r3
 800c7ac:	4413      	add	r3, r2
 800c7ae:	3310      	adds	r3, #16
 800c7b0:	460a      	mov	r2, r1
 800c7b2:	801a      	strh	r2, [r3, #0]
				//画第一个节点
				map[x][y] = NodeList[i].NodeA;
 800c7b4:	4967      	ldr	r1, [pc, #412]	; (800c954 <GenerateMap+0x368>)
 800c7b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	005b      	lsls	r3, r3, #1
 800c7bc:	4413      	add	r3, r2
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	440b      	add	r3, r1
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	08a2      	lsrs	r2, r4, #2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7cc:	fb02 f101 	mul.w	r1, r2, r1
 800c7d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c7d2:	440a      	add	r2, r1
 800c7d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c7d8:	e029      	b.n	800c82e <GenerateMap+0x242>
			}
			else
			{
				//报错 节点必须存在
				printfX("初始化地图错误，首节点必须存在\n");
 800c7da:	4960      	ldr	r1, [pc, #384]	; (800c95c <GenerateMap+0x370>)
 800c7dc:	4860      	ldr	r0, [pc, #384]	; (800c960 <GenerateMap+0x374>)
 800c7de:	f003 fa8d 	bl	800fcfc <siprintf>
 800c7e2:	485f      	ldr	r0, [pc, #380]	; (800c960 <GenerateMap+0x374>)
 800c7e4:	f002 fbc0 	bl	800ef68 <printf_Base>
 800c7e8:	e021      	b.n	800c82e <GenerateMap+0x242>
			}
		}
		else
		{
			//修改当前坐标
			x = MapList[NodeList[i].NodeA].Position.X;
 800c7ea:	495a      	ldr	r1, [pc, #360]	; (800c954 <GenerateMap+0x368>)
 800c7ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4413      	add	r3, r2
 800c7f4:	005b      	lsls	r3, r3, #1
 800c7f6:	440b      	add	r3, r1
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	4a56      	ldr	r2, [pc, #344]	; (800c958 <GenerateMap+0x36c>)
 800c7fe:	231a      	movs	r3, #26
 800c800:	fb01 f303 	mul.w	r3, r1, r3
 800c804:	4413      	add	r3, r2
 800c806:	330e      	adds	r3, #14
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	65bb      	str	r3, [r7, #88]	; 0x58
			y = MapList[NodeList[i].NodeA].Position.Y;
 800c80c:	4951      	ldr	r1, [pc, #324]	; (800c954 <GenerateMap+0x368>)
 800c80e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c810:	4613      	mov	r3, r2
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	4413      	add	r3, r2
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	440b      	add	r3, r1
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	4619      	mov	r1, r3
 800c81e:	4a4e      	ldr	r2, [pc, #312]	; (800c958 <GenerateMap+0x36c>)
 800c820:	231a      	movs	r3, #26
 800c822:	fb01 f303 	mul.w	r3, r1, r3
 800c826:	4413      	add	r3, r2
 800c828:	3310      	adds	r3, #16
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		//计算路径
		int x_s = x;
 800c82e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c830:	667b      	str	r3, [r7, #100]	; 0x64
		int y_s = y;
 800c832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c834:	64fb      	str	r3, [r7, #76]	; 0x4c
		switch (NodeList[i].Direction)
 800c836:	4947      	ldr	r1, [pc, #284]	; (800c954 <GenerateMap+0x368>)
 800c838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c83a:	4613      	mov	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	4413      	add	r3, r2
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	440b      	add	r3, r1
 800c844:	3302      	adds	r3, #2
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b03      	cmp	r3, #3
 800c84a:	f200 81f5 	bhi.w	800cc38 <GenerateMap+0x64c>
 800c84e:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <GenerateMap+0x268>)
 800c850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c854:	0800ca53 	.word	0x0800ca53
 800c858:	0800c965 	.word	0x0800c965
 800c85c:	0800cb41 	.word	0x0800cb41
 800c860:	0800c865 	.word	0x0800c865
		{
			case Direction_Left:
				x_s -= NodeList[i].Distance + 1;
 800c864:	493b      	ldr	r1, [pc, #236]	; (800c954 <GenerateMap+0x368>)
 800c866:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c868:	4613      	mov	r3, r2
 800c86a:	005b      	lsls	r3, r3, #1
 800c86c:	4413      	add	r3, r2
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	440b      	add	r3, r1
 800c872:	3304      	adds	r3, #4
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	667b      	str	r3, [r7, #100]	; 0x64
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Left] = NodeList[i].NodeB;  //将另一端节点加入方向索引
 800c87e:	4935      	ldr	r1, [pc, #212]	; (800c954 <GenerateMap+0x368>)
 800c880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c882:	4613      	mov	r3, r2
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	4413      	add	r3, r2
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	440b      	add	r3, r1
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	4618      	mov	r0, r3
 800c890:	4930      	ldr	r1, [pc, #192]	; (800c954 <GenerateMap+0x368>)
 800c892:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c894:	4613      	mov	r3, r2
 800c896:	005b      	lsls	r3, r3, #1
 800c898:	4413      	add	r3, r2
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	440b      	add	r3, r1
 800c89e:	3301      	adds	r3, #1
 800c8a0:	7819      	ldrb	r1, [r3, #0]
 800c8a2:	4a2d      	ldr	r2, [pc, #180]	; (800c958 <GenerateMap+0x36c>)
 800c8a4:	231a      	movs	r3, #26
 800c8a6:	fb00 f303 	mul.w	r3, r0, r3
 800c8aa:	4413      	add	r3, r2
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	460a      	mov	r2, r1
 800c8b0:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Left] = NodeList[i].Distance;
 800c8b2:	4928      	ldr	r1, [pc, #160]	; (800c954 <GenerateMap+0x368>)
 800c8b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	4413      	add	r3, r2
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	440b      	add	r3, r1
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	4923      	ldr	r1, [pc, #140]	; (800c954 <GenerateMap+0x368>)
 800c8c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	440b      	add	r3, r1
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	8819      	ldrh	r1, [r3, #0]
 800c8d6:	4a20      	ldr	r2, [pc, #128]	; (800c958 <GenerateMap+0x36c>)
 800c8d8:	231a      	movs	r3, #26
 800c8da:	fb00 f303 	mul.w	r3, r0, r3
 800c8de:	4413      	add	r3, r2
 800c8e0:	330c      	adds	r3, #12
 800c8e2:	460a      	mov	r2, r1
 800c8e4:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Right] = NodeList[i].NodeA;  //反向索引
 800c8e6:	491b      	ldr	r1, [pc, #108]	; (800c954 <GenerateMap+0x368>)
 800c8e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	4413      	add	r3, r2
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	4916      	ldr	r1, [pc, #88]	; (800c954 <GenerateMap+0x368>)
 800c8fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8fe:	4613      	mov	r3, r2
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	4413      	add	r3, r2
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	440b      	add	r3, r1
 800c908:	7819      	ldrb	r1, [r3, #0]
 800c90a:	4a13      	ldr	r2, [pc, #76]	; (800c958 <GenerateMap+0x36c>)
 800c90c:	231a      	movs	r3, #26
 800c90e:	fb00 f303 	mul.w	r3, r0, r3
 800c912:	4413      	add	r3, r2
 800c914:	3302      	adds	r3, #2
 800c916:	460a      	mov	r2, r1
 800c918:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Right] = NodeList[i].Distance;
 800c91a:	490e      	ldr	r1, [pc, #56]	; (800c954 <GenerateMap+0x368>)
 800c91c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c91e:	4613      	mov	r3, r2
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	4413      	add	r3, r2
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	440b      	add	r3, r1
 800c928:	3301      	adds	r3, #1
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	4909      	ldr	r1, [pc, #36]	; (800c954 <GenerateMap+0x368>)
 800c930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c932:	4613      	mov	r3, r2
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	4413      	add	r3, r2
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	440b      	add	r3, r1
 800c93c:	3304      	adds	r3, #4
 800c93e:	8819      	ldrh	r1, [r3, #0]
 800c940:	4a05      	ldr	r2, [pc, #20]	; (800c958 <GenerateMap+0x36c>)
 800c942:	231a      	movs	r3, #26
 800c944:	fb00 f303 	mul.w	r3, r0, r3
 800c948:	4413      	add	r3, r2
 800c94a:	3308      	adds	r3, #8
 800c94c:	460a      	mov	r2, r1
 800c94e:	801a      	strh	r2, [r3, #0]
				break;
 800c950:	e173      	b.n	800cc3a <GenerateMap+0x64e>
 800c952:	bf00      	nop
 800c954:	2000002c 	.word	0x2000002c
 800c958:	200019cc 	.word	0x200019cc
 800c95c:	08013b78 	.word	0x08013b78
 800c960:	200011fc 	.word	0x200011fc
			case Direction_Right:
				x_s += NodeList[i].Distance + 1;
 800c964:	49b2      	ldr	r1, [pc, #712]	; (800cc30 <GenerateMap+0x644>)
 800c966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c968:	4613      	mov	r3, r2
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	4413      	add	r3, r2
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	440b      	add	r3, r1
 800c972:	3304      	adds	r3, #4
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c97a:	4413      	add	r3, r2
 800c97c:	667b      	str	r3, [r7, #100]	; 0x64
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Right] = NodeList[i].NodeB;
 800c97e:	49ac      	ldr	r1, [pc, #688]	; (800cc30 <GenerateMap+0x644>)
 800c980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	440b      	add	r3, r1
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	49a7      	ldr	r1, [pc, #668]	; (800cc30 <GenerateMap+0x644>)
 800c992:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c994:	4613      	mov	r3, r2
 800c996:	005b      	lsls	r3, r3, #1
 800c998:	4413      	add	r3, r2
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	440b      	add	r3, r1
 800c99e:	3301      	adds	r3, #1
 800c9a0:	7819      	ldrb	r1, [r3, #0]
 800c9a2:	4aa4      	ldr	r2, [pc, #656]	; (800cc34 <GenerateMap+0x648>)
 800c9a4:	231a      	movs	r3, #26
 800c9a6:	fb00 f303 	mul.w	r3, r0, r3
 800c9aa:	4413      	add	r3, r2
 800c9ac:	3302      	adds	r3, #2
 800c9ae:	460a      	mov	r2, r1
 800c9b0:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Right] = NodeList[i].Distance;
 800c9b2:	499f      	ldr	r1, [pc, #636]	; (800cc30 <GenerateMap+0x644>)
 800c9b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	4413      	add	r3, r2
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	440b      	add	r3, r1
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	499a      	ldr	r1, [pc, #616]	; (800cc30 <GenerateMap+0x644>)
 800c9c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	4413      	add	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	440b      	add	r3, r1
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	8819      	ldrh	r1, [r3, #0]
 800c9d6:	4a97      	ldr	r2, [pc, #604]	; (800cc34 <GenerateMap+0x648>)
 800c9d8:	231a      	movs	r3, #26
 800c9da:	fb00 f303 	mul.w	r3, r0, r3
 800c9de:	4413      	add	r3, r2
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	460a      	mov	r2, r1
 800c9e4:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Left] = NodeList[i].NodeA;  //反向索引
 800c9e6:	4992      	ldr	r1, [pc, #584]	; (800cc30 <GenerateMap+0x644>)
 800c9e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4413      	add	r3, r2
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	440b      	add	r3, r1
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	498d      	ldr	r1, [pc, #564]	; (800cc30 <GenerateMap+0x644>)
 800c9fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9fe:	4613      	mov	r3, r2
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	4413      	add	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	440b      	add	r3, r1
 800ca08:	7819      	ldrb	r1, [r3, #0]
 800ca0a:	4a8a      	ldr	r2, [pc, #552]	; (800cc34 <GenerateMap+0x648>)
 800ca0c:	231a      	movs	r3, #26
 800ca0e:	fb00 f303 	mul.w	r3, r0, r3
 800ca12:	4413      	add	r3, r2
 800ca14:	3304      	adds	r3, #4
 800ca16:	460a      	mov	r2, r1
 800ca18:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Left] = NodeList[i].Distance;
 800ca1a:	4985      	ldr	r1, [pc, #532]	; (800cc30 <GenerateMap+0x644>)
 800ca1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca1e:	4613      	mov	r3, r2
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	005b      	lsls	r3, r3, #1
 800ca26:	440b      	add	r3, r1
 800ca28:	3301      	adds	r3, #1
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	4980      	ldr	r1, [pc, #512]	; (800cc30 <GenerateMap+0x644>)
 800ca30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca32:	4613      	mov	r3, r2
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	4413      	add	r3, r2
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	440b      	add	r3, r1
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	8819      	ldrh	r1, [r3, #0]
 800ca40:	4a7c      	ldr	r2, [pc, #496]	; (800cc34 <GenerateMap+0x648>)
 800ca42:	231a      	movs	r3, #26
 800ca44:	fb00 f303 	mul.w	r3, r0, r3
 800ca48:	4413      	add	r3, r2
 800ca4a:	330c      	adds	r3, #12
 800ca4c:	460a      	mov	r2, r1
 800ca4e:	801a      	strh	r2, [r3, #0]
				break;
 800ca50:	e0f3      	b.n	800cc3a <GenerateMap+0x64e>
			case Direction_Top:
				y_s -= NodeList[i].Distance + 1;
 800ca52:	4977      	ldr	r1, [pc, #476]	; (800cc30 <GenerateMap+0x644>)
 800ca54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca56:	4613      	mov	r3, r2
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	4413      	add	r3, r2
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	440b      	add	r3, r1
 800ca60:	3304      	adds	r3, #4
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	64fb      	str	r3, [r7, #76]	; 0x4c
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Top] = NodeList[i].NodeB;
 800ca6c:	4970      	ldr	r1, [pc, #448]	; (800cc30 <GenerateMap+0x644>)
 800ca6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca70:	4613      	mov	r3, r2
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	4413      	add	r3, r2
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	440b      	add	r3, r1
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	496c      	ldr	r1, [pc, #432]	; (800cc30 <GenerateMap+0x644>)
 800ca80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca82:	4613      	mov	r3, r2
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	4413      	add	r3, r2
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	440b      	add	r3, r1
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	7819      	ldrb	r1, [r3, #0]
 800ca90:	4a68      	ldr	r2, [pc, #416]	; (800cc34 <GenerateMap+0x648>)
 800ca92:	231a      	movs	r3, #26
 800ca94:	fb00 f303 	mul.w	r3, r0, r3
 800ca98:	4413      	add	r3, r2
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	460a      	mov	r2, r1
 800ca9e:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Top] = NodeList[i].Distance;
 800caa0:	4963      	ldr	r1, [pc, #396]	; (800cc30 <GenerateMap+0x644>)
 800caa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800caa4:	4613      	mov	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	005b      	lsls	r3, r3, #1
 800caac:	440b      	add	r3, r1
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	4618      	mov	r0, r3
 800cab2:	495f      	ldr	r1, [pc, #380]	; (800cc30 <GenerateMap+0x644>)
 800cab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cab6:	4613      	mov	r3, r2
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	4413      	add	r3, r2
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	440b      	add	r3, r1
 800cac0:	3304      	adds	r3, #4
 800cac2:	8819      	ldrh	r1, [r3, #0]
 800cac4:	4a5b      	ldr	r2, [pc, #364]	; (800cc34 <GenerateMap+0x648>)
 800cac6:	231a      	movs	r3, #26
 800cac8:	fb00 f303 	mul.w	r3, r0, r3
 800cacc:	4413      	add	r3, r2
 800cace:	3306      	adds	r3, #6
 800cad0:	460a      	mov	r2, r1
 800cad2:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Bottom] = NodeList[i].NodeA;  //反向索引
 800cad4:	4956      	ldr	r1, [pc, #344]	; (800cc30 <GenerateMap+0x644>)
 800cad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cad8:	4613      	mov	r3, r2
 800cada:	005b      	lsls	r3, r3, #1
 800cadc:	4413      	add	r3, r2
 800cade:	005b      	lsls	r3, r3, #1
 800cae0:	440b      	add	r3, r1
 800cae2:	3301      	adds	r3, #1
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	4618      	mov	r0, r3
 800cae8:	4951      	ldr	r1, [pc, #324]	; (800cc30 <GenerateMap+0x644>)
 800caea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800caec:	4613      	mov	r3, r2
 800caee:	005b      	lsls	r3, r3, #1
 800caf0:	4413      	add	r3, r2
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	440b      	add	r3, r1
 800caf6:	7819      	ldrb	r1, [r3, #0]
 800caf8:	4a4e      	ldr	r2, [pc, #312]	; (800cc34 <GenerateMap+0x648>)
 800cafa:	231a      	movs	r3, #26
 800cafc:	fb00 f303 	mul.w	r3, r0, r3
 800cb00:	4413      	add	r3, r2
 800cb02:	3303      	adds	r3, #3
 800cb04:	460a      	mov	r2, r1
 800cb06:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Bottom] = NodeList[i].Distance;
 800cb08:	4949      	ldr	r1, [pc, #292]	; (800cc30 <GenerateMap+0x644>)
 800cb0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	4413      	add	r3, r2
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	440b      	add	r3, r1
 800cb16:	3301      	adds	r3, #1
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	4944      	ldr	r1, [pc, #272]	; (800cc30 <GenerateMap+0x644>)
 800cb1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb20:	4613      	mov	r3, r2
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	4413      	add	r3, r2
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	440b      	add	r3, r1
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	8819      	ldrh	r1, [r3, #0]
 800cb2e:	4a41      	ldr	r2, [pc, #260]	; (800cc34 <GenerateMap+0x648>)
 800cb30:	231a      	movs	r3, #26
 800cb32:	fb00 f303 	mul.w	r3, r0, r3
 800cb36:	4413      	add	r3, r2
 800cb38:	330a      	adds	r3, #10
 800cb3a:	460a      	mov	r2, r1
 800cb3c:	801a      	strh	r2, [r3, #0]
				break;
 800cb3e:	e07c      	b.n	800cc3a <GenerateMap+0x64e>
			case Direction_Bottom:
				y_s += NodeList[i].Distance + 1;
 800cb40:	493b      	ldr	r1, [pc, #236]	; (800cc30 <GenerateMap+0x644>)
 800cb42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb44:	4613      	mov	r3, r2
 800cb46:	005b      	lsls	r3, r3, #1
 800cb48:	4413      	add	r3, r2
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	440b      	add	r3, r1
 800cb4e:	3304      	adds	r3, #4
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb56:	4413      	add	r3, r2
 800cb58:	64fb      	str	r3, [r7, #76]	; 0x4c
				MapList[NodeList[i].NodeA].ChildNodes[Direction_Bottom] = NodeList[i].NodeB;
 800cb5a:	4935      	ldr	r1, [pc, #212]	; (800cc30 <GenerateMap+0x644>)
 800cb5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb5e:	4613      	mov	r3, r2
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	4413      	add	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	440b      	add	r3, r1
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	4930      	ldr	r1, [pc, #192]	; (800cc30 <GenerateMap+0x644>)
 800cb6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb70:	4613      	mov	r3, r2
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	4413      	add	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	440b      	add	r3, r1
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	7819      	ldrb	r1, [r3, #0]
 800cb7e:	4a2d      	ldr	r2, [pc, #180]	; (800cc34 <GenerateMap+0x648>)
 800cb80:	231a      	movs	r3, #26
 800cb82:	fb00 f303 	mul.w	r3, r0, r3
 800cb86:	4413      	add	r3, r2
 800cb88:	3303      	adds	r3, #3
 800cb8a:	460a      	mov	r2, r1
 800cb8c:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeA].ChildNodeDistances[Direction_Bottom] = NodeList[i].Distance;
 800cb8e:	4928      	ldr	r1, [pc, #160]	; (800cc30 <GenerateMap+0x644>)
 800cb90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb92:	4613      	mov	r3, r2
 800cb94:	005b      	lsls	r3, r3, #1
 800cb96:	4413      	add	r3, r2
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	440b      	add	r3, r1
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	4923      	ldr	r1, [pc, #140]	; (800cc30 <GenerateMap+0x644>)
 800cba2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cba4:	4613      	mov	r3, r2
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	4413      	add	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	440b      	add	r3, r1
 800cbae:	3304      	adds	r3, #4
 800cbb0:	8819      	ldrh	r1, [r3, #0]
 800cbb2:	4a20      	ldr	r2, [pc, #128]	; (800cc34 <GenerateMap+0x648>)
 800cbb4:	231a      	movs	r3, #26
 800cbb6:	fb00 f303 	mul.w	r3, r0, r3
 800cbba:	4413      	add	r3, r2
 800cbbc:	330a      	adds	r3, #10
 800cbbe:	460a      	mov	r2, r1
 800cbc0:	801a      	strh	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodes[Direction_Top] = NodeList[i].NodeA;  //反向索引
 800cbc2:	491b      	ldr	r1, [pc, #108]	; (800cc30 <GenerateMap+0x644>)
 800cbc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	4413      	add	r3, r2
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	440b      	add	r3, r1
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	4916      	ldr	r1, [pc, #88]	; (800cc30 <GenerateMap+0x644>)
 800cbd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbda:	4613      	mov	r3, r2
 800cbdc:	005b      	lsls	r3, r3, #1
 800cbde:	4413      	add	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	440b      	add	r3, r1
 800cbe4:	7819      	ldrb	r1, [r3, #0]
 800cbe6:	4a13      	ldr	r2, [pc, #76]	; (800cc34 <GenerateMap+0x648>)
 800cbe8:	231a      	movs	r3, #26
 800cbea:	fb00 f303 	mul.w	r3, r0, r3
 800cbee:	4413      	add	r3, r2
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	460a      	mov	r2, r1
 800cbf4:	701a      	strb	r2, [r3, #0]
				MapList[NodeList[i].NodeB].ChildNodeDistances[Direction_Top] = NodeList[i].Distance;
 800cbf6:	490e      	ldr	r1, [pc, #56]	; (800cc30 <GenerateMap+0x644>)
 800cbf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	4413      	add	r3, r2
 800cc00:	005b      	lsls	r3, r3, #1
 800cc02:	440b      	add	r3, r1
 800cc04:	3301      	adds	r3, #1
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	4909      	ldr	r1, [pc, #36]	; (800cc30 <GenerateMap+0x644>)
 800cc0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc0e:	4613      	mov	r3, r2
 800cc10:	005b      	lsls	r3, r3, #1
 800cc12:	4413      	add	r3, r2
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	440b      	add	r3, r1
 800cc18:	3304      	adds	r3, #4
 800cc1a:	8819      	ldrh	r1, [r3, #0]
 800cc1c:	4a05      	ldr	r2, [pc, #20]	; (800cc34 <GenerateMap+0x648>)
 800cc1e:	231a      	movs	r3, #26
 800cc20:	fb00 f303 	mul.w	r3, r0, r3
 800cc24:	4413      	add	r3, r2
 800cc26:	3306      	adds	r3, #6
 800cc28:	460a      	mov	r2, r1
 800cc2a:	801a      	strh	r2, [r3, #0]
				break;
 800cc2c:	e005      	b.n	800cc3a <GenerateMap+0x64e>
 800cc2e:	bf00      	nop
 800cc30:	2000002c 	.word	0x2000002c
 800cc34:	200019cc 	.word	0x200019cc
			default:
				break;
 800cc38:	bf00      	nop

		}

		//比较起止大小
		int x_max = x_s > x ? x_s : x;
 800cc3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	bfb8      	it	lt
 800cc42:	4613      	movlt	r3, r2
 800cc44:	62bb      	str	r3, [r7, #40]	; 0x28
		int x_min = x_s < x ? x_s : x;
 800cc46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	bfa8      	it	ge
 800cc4e:	4613      	movge	r3, r2
 800cc50:	627b      	str	r3, [r7, #36]	; 0x24
		int y_max = y_s > y ? y_s : y;
 800cc52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc56:	4293      	cmp	r3, r2
 800cc58:	bfb8      	it	lt
 800cc5a:	4613      	movlt	r3, r2
 800cc5c:	623b      	str	r3, [r7, #32]
		int y_min = y_s < y ? y_s : y;
 800cc5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc62:	4293      	cmp	r3, r2
 800cc64:	bfa8      	it	ge
 800cc66:	4613      	movge	r3, r2
 800cc68:	61fb      	str	r3, [r7, #28]
		//画路径
		if (x == x_s)
 800cc6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d115      	bne.n	800cc9e <GenerateMap+0x6b2>
		{
			for (int y_k = y_min + 1; y_k < y_max; y_k++)
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	3301      	adds	r3, #1
 800cc76:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc78:	e00d      	b.n	800cc96 <GenerateMap+0x6aa>
			{
				map[x_s][y_k] = -1;
 800cc7a:	08a2      	lsrs	r2, r4, #2
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cc80:	fb02 f101 	mul.w	r1, r2, r1
 800cc84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc86:	440a      	add	r2, r1
 800cc88:	f04f 31ff 	mov.w	r1, #4294967295
 800cc8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int y_k = y_min + 1; y_k < y_max; y_k++)
 800cc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc92:	3301      	adds	r3, #1
 800cc94:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	dbed      	blt.n	800cc7a <GenerateMap+0x68e>
			}
		}
		if (y == y_s)
 800cc9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d115      	bne.n	800ccd2 <GenerateMap+0x6e6>
		{
			for (int x_k = x_min + 1; x_k < x_max; x_k++)
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	3301      	adds	r3, #1
 800ccaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ccac:	e00d      	b.n	800ccca <GenerateMap+0x6de>
			{
				map[x_k][y_s] = -1;
 800ccae:	08a2      	lsrs	r2, r4, #2
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccb4:	fb02 f101 	mul.w	r1, r2, r1
 800ccb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccba:	440a      	add	r2, r1
 800ccbc:	f04f 31ff 	mov.w	r1, #4294967295
 800ccc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int x_k = x_min + 1; x_k < x_max; x_k++)
 800ccc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	dbed      	blt.n	800ccae <GenerateMap+0x6c2>
			}
		}

		//画节点B
		x = x_s;
 800ccd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccd4:	65bb      	str	r3, [r7, #88]	; 0x58
		y = y_s;
 800ccd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd8:	65fb      	str	r3, [r7, #92]	; 0x5c
		map[x][y] = NodeList[i].NodeB;
 800ccda:	4977      	ldr	r1, [pc, #476]	; (800ceb8 <GenerateMap+0x8cc>)
 800ccdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccde:	4613      	mov	r3, r2
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4413      	add	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	440b      	add	r3, r1
 800cce8:	3301      	adds	r3, #1
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	08a2      	lsrs	r2, r4, #2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccf4:	fb02 f101 	mul.w	r1, r2, r1
 800ccf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccfa:	440a      	add	r2, r1
 800ccfc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

		//将节点添加到列表中
		if (MapList[NodeList[i].NodeB].Index == 0)
 800cd00:	496d      	ldr	r1, [pc, #436]	; (800ceb8 <GenerateMap+0x8cc>)
 800cd02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd04:	4613      	mov	r3, r2
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	4413      	add	r3, r2
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	440b      	add	r3, r1
 800cd0e:	3301      	adds	r3, #1
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	4619      	mov	r1, r3
 800cd14:	4a69      	ldr	r2, [pc, #420]	; (800cebc <GenerateMap+0x8d0>)
 800cd16:	231a      	movs	r3, #26
 800cd18:	fb01 f303 	mul.w	r3, r1, r3
 800cd1c:	4413      	add	r3, r2
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d141      	bne.n	800cda8 <GenerateMap+0x7bc>
		{
			MapList[NodeList[i].NodeB].Index = NodeList[i].NodeB;
 800cd24:	4964      	ldr	r1, [pc, #400]	; (800ceb8 <GenerateMap+0x8cc>)
 800cd26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd28:	4613      	mov	r3, r2
 800cd2a:	005b      	lsls	r3, r3, #1
 800cd2c:	4413      	add	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	440b      	add	r3, r1
 800cd32:	3301      	adds	r3, #1
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	4618      	mov	r0, r3
 800cd38:	495f      	ldr	r1, [pc, #380]	; (800ceb8 <GenerateMap+0x8cc>)
 800cd3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	4413      	add	r3, r2
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	440b      	add	r3, r1
 800cd46:	3301      	adds	r3, #1
 800cd48:	7819      	ldrb	r1, [r3, #0]
 800cd4a:	4a5c      	ldr	r2, [pc, #368]	; (800cebc <GenerateMap+0x8d0>)
 800cd4c:	231a      	movs	r3, #26
 800cd4e:	fb00 f303 	mul.w	r3, r0, r3
 800cd52:	4413      	add	r3, r2
 800cd54:	460a      	mov	r2, r1
 800cd56:	701a      	strb	r2, [r3, #0]
			MapList[NodeList[i].NodeB].Position.X = x;
 800cd58:	4957      	ldr	r1, [pc, #348]	; (800ceb8 <GenerateMap+0x8cc>)
 800cd5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	4413      	add	r3, r2
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	440b      	add	r3, r1
 800cd66:	3301      	adds	r3, #1
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd6e:	b299      	uxth	r1, r3
 800cd70:	4a52      	ldr	r2, [pc, #328]	; (800cebc <GenerateMap+0x8d0>)
 800cd72:	231a      	movs	r3, #26
 800cd74:	fb00 f303 	mul.w	r3, r0, r3
 800cd78:	4413      	add	r3, r2
 800cd7a:	330e      	adds	r3, #14
 800cd7c:	460a      	mov	r2, r1
 800cd7e:	801a      	strh	r2, [r3, #0]
			MapList[NodeList[i].NodeB].Position.Y = y;
 800cd80:	494d      	ldr	r1, [pc, #308]	; (800ceb8 <GenerateMap+0x8cc>)
 800cd82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd84:	4613      	mov	r3, r2
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	440b      	add	r3, r1
 800cd8e:	3301      	adds	r3, #1
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	4618      	mov	r0, r3
 800cd94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd96:	b299      	uxth	r1, r3
 800cd98:	4a48      	ldr	r2, [pc, #288]	; (800cebc <GenerateMap+0x8d0>)
 800cd9a:	231a      	movs	r3, #26
 800cd9c:	fb00 f303 	mul.w	r3, r0, r3
 800cda0:	4413      	add	r3, r2
 800cda2:	3310      	adds	r3, #16
 800cda4:	460a      	mov	r2, r1
 800cda6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NodeRelationshipNumber; i++)
 800cda8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdaa:	3301      	adds	r3, #1
 800cdac:	663b      	str	r3, [r7, #96]	; 0x60
 800cdae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdb0:	2b0b      	cmp	r3, #11
 800cdb2:	f77f acad 	ble.w	800c710 <GenerateMap+0x124>
		}
	}

	//将画好的地图显示在屏幕上
	for (int j = 0; j < length; j++)
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdba:	e073      	b.n	800cea4 <GenerateMap+0x8b8>
	{
		for (int i = 0; i < length; i++)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc0:	e062      	b.n	800ce88 <GenerateMap+0x89c>
		{
			if (map[i][j] == -1)
 800cdc2:	08a2      	lsrs	r2, r4, #2
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdc8:	fb02 f101 	mul.w	r1, r2, r1
 800cdcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdce:	440a      	add	r2, r1
 800cdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd8:	d12f      	bne.n	800ce3a <GenerateMap+0x84e>
			{
				if ((i - 1 < 0 || map[i - 1][j] == 0) && (i + 1 > length - 1 || map[i + 1][j] == 0))
 800cdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dd0b      	ble.n	800cdf8 <GenerateMap+0x80c>
 800cde0:	08a2      	lsrs	r2, r4, #2
 800cde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde4:	1e59      	subs	r1, r3, #1
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	fb02 f101 	mul.w	r1, r2, r1
 800cdec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdee:	440a      	add	r2, r1
 800cdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d118      	bne.n	800ce2a <GenerateMap+0x83e>
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	da0b      	bge.n	800ce1a <GenerateMap+0x82e>
 800ce02:	08a2      	lsrs	r2, r4, #2
 800ce04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce06:	1c59      	adds	r1, r3, #1
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	fb02 f101 	mul.w	r1, r2, r1
 800ce0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce10:	440a      	add	r2, r1
 800ce12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d107      	bne.n	800ce2a <GenerateMap+0x83e>
				{
					printfX("|  ");
 800ce1a:	4929      	ldr	r1, [pc, #164]	; (800cec0 <GenerateMap+0x8d4>)
 800ce1c:	4829      	ldr	r0, [pc, #164]	; (800cec4 <GenerateMap+0x8d8>)
 800ce1e:	f002 ff6d 	bl	800fcfc <siprintf>
 800ce22:	4828      	ldr	r0, [pc, #160]	; (800cec4 <GenerateMap+0x8d8>)
 800ce24:	f002 f8a0 	bl	800ef68 <printf_Base>
 800ce28:	e02b      	b.n	800ce82 <GenerateMap+0x896>
				}
				else
				{
					printfX("--");
 800ce2a:	4927      	ldr	r1, [pc, #156]	; (800cec8 <GenerateMap+0x8dc>)
 800ce2c:	4825      	ldr	r0, [pc, #148]	; (800cec4 <GenerateMap+0x8d8>)
 800ce2e:	f002 ff65 	bl	800fcfc <siprintf>
 800ce32:	4824      	ldr	r0, [pc, #144]	; (800cec4 <GenerateMap+0x8d8>)
 800ce34:	f002 f898 	bl	800ef68 <printf_Base>
 800ce38:	e023      	b.n	800ce82 <GenerateMap+0x896>
				}

			}
			else if (map[i][j] > 0)
 800ce3a:	08a2      	lsrs	r2, r4, #2
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce40:	fb02 f101 	mul.w	r1, r2, r1
 800ce44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce46:	440a      	add	r2, r1
 800ce48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	dd11      	ble.n	800ce74 <GenerateMap+0x888>
			{
				printfX("%d ", map[i][j]);
 800ce50:	08a2      	lsrs	r2, r4, #2
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce56:	fb02 f101 	mul.w	r1, r2, r1
 800ce5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce5c:	440a      	add	r2, r1
 800ce5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4919      	ldr	r1, [pc, #100]	; (800cecc <GenerateMap+0x8e0>)
 800ce66:	4817      	ldr	r0, [pc, #92]	; (800cec4 <GenerateMap+0x8d8>)
 800ce68:	f002 ff48 	bl	800fcfc <siprintf>
 800ce6c:	4815      	ldr	r0, [pc, #84]	; (800cec4 <GenerateMap+0x8d8>)
 800ce6e:	f002 f87b 	bl	800ef68 <printf_Base>
 800ce72:	e006      	b.n	800ce82 <GenerateMap+0x896>
			}
			else
			{
				printfX("   ");
 800ce74:	4916      	ldr	r1, [pc, #88]	; (800ced0 <GenerateMap+0x8e4>)
 800ce76:	4813      	ldr	r0, [pc, #76]	; (800cec4 <GenerateMap+0x8d8>)
 800ce78:	f002 ff40 	bl	800fcfc <siprintf>
 800ce7c:	4811      	ldr	r0, [pc, #68]	; (800cec4 <GenerateMap+0x8d8>)
 800ce7e:	f002 f873 	bl	800ef68 <printf_Base>
		for (int i = 0; i < length; i++)
 800ce82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce84:	3301      	adds	r3, #1
 800ce86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	db98      	blt.n	800cdc2 <GenerateMap+0x7d6>
			}

		}
		printfX("\n");
 800ce90:	4910      	ldr	r1, [pc, #64]	; (800ced4 <GenerateMap+0x8e8>)
 800ce92:	480c      	ldr	r0, [pc, #48]	; (800cec4 <GenerateMap+0x8d8>)
 800ce94:	f002 ff32 	bl	800fcfc <siprintf>
 800ce98:	480a      	ldr	r0, [pc, #40]	; (800cec4 <GenerateMap+0x8d8>)
 800ce9a:	f002 f865 	bl	800ef68 <printf_Base>
	for (int j = 0; j < length; j++)
 800ce9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cea0:	3301      	adds	r3, #1
 800cea2:	643b      	str	r3, [r7, #64]	; 0x40
 800cea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	db87      	blt.n	800cdbc <GenerateMap+0x7d0>
 800ceac:	46b5      	mov	sp, r6
	}
}
 800ceae:	bf00      	nop
 800ceb0:	376c      	adds	r7, #108	; 0x6c
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb8:	2000002c 	.word	0x2000002c
 800cebc:	200019cc 	.word	0x200019cc
 800cec0:	08013ba8 	.word	0x08013ba8
 800cec4:	200011fc 	.word	0x200011fc
 800cec8:	08013bac 	.word	0x08013bac
 800cecc:	08013bb0 	.word	0x08013bb0
 800ced0:	08013bb4 	.word	0x08013bb4
 800ced4:	08013b74 	.word	0x08013b74

0800ced8 <InitMap>:

//初始化地图
void InitMap()
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	af00      	add	r7, sp, #0
	printfX("初始化地图\n");
 800cedc:	4905      	ldr	r1, [pc, #20]	; (800cef4 <InitMap+0x1c>)
 800cede:	4806      	ldr	r0, [pc, #24]	; (800cef8 <InitMap+0x20>)
 800cee0:	f002 ff0c 	bl	800fcfc <siprintf>
 800cee4:	4804      	ldr	r0, [pc, #16]	; (800cef8 <InitMap+0x20>)
 800cee6:	f002 f83f 	bl	800ef68 <printf_Base>
	GenerateMap();
 800ceea:	f7ff fb7f 	bl	800c5ec <GenerateMap>
}
 800ceee:	bf00      	nop
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	08013bb8 	.word	0x08013bb8
 800cef8:	200011fc 	.word	0x200011fc

0800cefc <SetDefaultValue>:

//设置缺省值
void SetDefaultValue(Direction currentDirection, uint8_t stratPoint)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4603      	mov	r3, r0
 800cf04:	460a      	mov	r2, r1
 800cf06:	71fb      	strb	r3, [r7, #7]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	71bb      	strb	r3, [r7, #6]
	CurrentDirection = currentDirection;
 800cf0c:	4a05      	ldr	r2, [pc, #20]	; (800cf24 <SetDefaultValue+0x28>)
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	7013      	strb	r3, [r2, #0]
	StartPoint = stratPoint;
 800cf12:	4a05      	ldr	r2, [pc, #20]	; (800cf28 <SetDefaultValue+0x2c>)
 800cf14:	79bb      	ldrb	r3, [r7, #6]
 800cf16:	7013      	strb	r3, [r2, #0]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	20001b20 	.word	0x20001b20
 800cf28:	20000074 	.word	0x20000074

0800cf2c <StartWayFindingAndRuning>:

//开始寻路并向终点运动
void StartWayFindingAndRuning(uint8_t end)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	71fb      	strb	r3, [r7, #7]
	//查找终点
	MapNode *EndNode = WayFinding(end);
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7ff f8e9 	bl	800c110 <WayFinding>
 800cf3e:	60f8      	str	r0, [r7, #12]
	uint8_t layer = RoadToCommand(EndNode, 0);
 800cf40:	2100      	movs	r1, #0
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff fa2c 	bl	800c3a0 <RoadToCommand>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	72fb      	strb	r3, [r7, #11]

	if (layer == 0)
 800cf4c:	7afb      	ldrb	r3, [r7, #11]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d107      	bne.n	800cf62 <StartWayFindingAndRuning+0x36>
	{
		printfX("起点与终点重合\n\r");
 800cf52:	490a      	ldr	r1, [pc, #40]	; (800cf7c <StartWayFindingAndRuning+0x50>)
 800cf54:	480a      	ldr	r0, [pc, #40]	; (800cf80 <StartWayFindingAndRuning+0x54>)
 800cf56:	f002 fed1 	bl	800fcfc <siprintf>
 800cf5a:	4809      	ldr	r0, [pc, #36]	; (800cf80 <StartWayFindingAndRuning+0x54>)
 800cf5c:	f002 f804 	bl	800ef68 <printf_Base>
		return;
 800cf60:	e009      	b.n	800cf76 <StartWayFindingAndRuning+0x4a>
	}

	//清空状态
	Status_Control_Clear();
 800cf62:	f000 f811 	bl	800cf88 <Status_Control_Clear>
	//开始运动
	Status_Control_Start(Command_Mode_OneTime, RuningSpeed);
 800cf66:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	f000 f834 	bl	800cfd8 <Status_Control_Start>
	
	//更改当前位置 假定到达
	StartPoint = end;
 800cf70:	4a04      	ldr	r2, [pc, #16]	; (800cf84 <StartWayFindingAndRuning+0x58>)
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	7013      	strb	r3, [r2, #0]
}
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	08013bcc 	.word	0x08013bcc
 800cf80:	200011fc 	.word	0x200011fc
 800cf84:	20000074 	.word	0x20000074

0800cf88 <Status_Control_Clear>:

//转弯步进
#define StepLength 0.25

void Status_Control_Clear()
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	af00      	add	r7, sp, #0
	SetCarSpeed(0, 0, 0);
 800cf8c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800cfc0 <Status_Control_Clear+0x38>
 800cf90:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800cfc0 <Status_Control_Clear+0x38>
 800cf94:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800cfc0 <Status_Control_Clear+0x38>
 800cf98:	f000 ffb2 	bl	800df00 <SetCarSpeed>
	StatusControl_RuningFlag = 0;
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <Status_Control_Clear+0x3c>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]
	Command_Duration_Flag = 0;
 800cfa2:	4b09      	ldr	r3, [pc, #36]	; (800cfc8 <Status_Control_Clear+0x40>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	701a      	strb	r2, [r3, #0]
	Command_Index = -1;
 800cfa8:	4b08      	ldr	r3, [pc, #32]	; (800cfcc <Status_Control_Clear+0x44>)
 800cfaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cfae:	601a      	str	r2, [r3, #0]
	Last_RunCommand_Time = 0;
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <Status_Control_Clear+0x48>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]
	AbnormaldState = DriveState_Normal;
 800cfb6:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <Status_Control_Clear+0x4c>)
 800cfb8:	2203      	movs	r2, #3
 800cfba:	701a      	strb	r2, [r3, #0]
}
 800cfbc:	bf00      	nop
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	00000000 	.word	0x00000000
 800cfc4:	20001b28 	.word	0x20001b28
 800cfc8:	20001b29 	.word	0x20001b29
 800cfcc:	20000168 	.word	0x20000168
 800cfd0:	20001b24 	.word	0x20001b24
 800cfd4:	20001b31 	.word	0x20001b31

0800cfd8 <Status_Control_Start>:

void Status_Control_Start(Command_Mode mode, float default_Speed)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	ed87 0a00 	vstr	s0, [r7]
 800cfe4:	71fb      	strb	r3, [r7, #7]
	StatusControl_RuningFlag = 1;
 800cfe6:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <Status_Control_Start+0x40>)
 800cfe8:	2201      	movs	r2, #1
 800cfea:	701a      	strb	r2, [r3, #0]
	Default_Speed = default_Speed == 0 ? Motor_Expected_Axis_Speeds[Axis_X] : default_Speed;
 800cfec:	edd7 7a00 	vldr	s15, [r7]
 800cff0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff8:	d102      	bne.n	800d000 <Status_Control_Start+0x28>
 800cffa:	4b08      	ldr	r3, [pc, #32]	; (800d01c <Status_Control_Start+0x44>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	e000      	b.n	800d002 <Status_Control_Start+0x2a>
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	4a07      	ldr	r2, [pc, #28]	; (800d020 <Status_Control_Start+0x48>)
 800d004:	6013      	str	r3, [r2, #0]
	Mode = mode;
 800d006:	4a07      	ldr	r2, [pc, #28]	; (800d024 <Status_Control_Start+0x4c>)
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	7013      	strb	r3, [r2, #0]
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	20001b28 	.word	0x20001b28
 800d01c:	20001bd4 	.word	0x20001bd4
 800d020:	20001b2c 	.word	0x20001b2c
 800d024:	20001b32 	.word	0x20001b32

0800d028 <CorrectCarDirection>:

//根据外设修正小车方向
void CorrectCarDirection(DriveState state)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	4603      	mov	r3, r0
 800d030:	71fb      	strb	r3, [r7, #7]
	//判断是否停止
	if (Motor_Expected_Axis_Speeds[Axis_X] == 0 && Motor_Expected_Axis_Speeds[Axis_Z] == 0)
 800d032:	4b4b      	ldr	r3, [pc, #300]	; (800d160 <CorrectCarDirection+0x138>)
 800d034:	edd3 7a00 	vldr	s15, [r3]
 800d038:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d040:	d107      	bne.n	800d052 <CorrectCarDirection+0x2a>
 800d042:	4b47      	ldr	r3, [pc, #284]	; (800d160 <CorrectCarDirection+0x138>)
 800d044:	edd3 7a02 	vldr	s15, [r3, #8]
 800d048:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d050:	d07e      	beq.n	800d150 <CorrectCarDirection+0x128>
	{
		return;
	}

	//return;
	float k = StepLength + 0.005 * fabs(Motor_Expected_Axis_Speeds[Axis_X]);
 800d052:	4b43      	ldr	r3, [pc, #268]	; (800d160 <CorrectCarDirection+0x138>)
 800d054:	edd3 7a00 	vldr	s15, [r3]
 800d058:	eef0 7ae7 	vabs.f32	s15, s15
 800d05c:	ee17 0a90 	vmov	r0, s15
 800d060:	f7f3 fa72 	bl	8000548 <__aeabi_f2d>
 800d064:	a33c      	add	r3, pc, #240	; (adr r3, 800d158 <CorrectCarDirection+0x130>)
 800d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06a:	f7f3 fac5 	bl	80005f8 <__aeabi_dmul>
 800d06e:	4602      	mov	r2, r0
 800d070:	460b      	mov	r3, r1
 800d072:	4610      	mov	r0, r2
 800d074:	4619      	mov	r1, r3
 800d076:	f04f 0200 	mov.w	r2, #0
 800d07a:	4b3a      	ldr	r3, [pc, #232]	; (800d164 <CorrectCarDirection+0x13c>)
 800d07c:	f7f3 f906 	bl	800028c <__adddf3>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4610      	mov	r0, r2
 800d086:	4619      	mov	r1, r3
 800d088:	f7f3 fdae 	bl	8000be8 <__aeabi_d2f>
 800d08c:	4603      	mov	r3, r0
 800d08e:	613b      	str	r3, [r7, #16]

	//向另一方向转弯时清空转弯角
	float x = 0.0;
 800d090:	f04f 0300 	mov.w	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]
	float y = 0.0;
 800d096:	f04f 0300 	mov.w	r3, #0
 800d09a:	60bb      	str	r3, [r7, #8]
	float z = 0.0;
 800d09c:	f04f 0300 	mov.w	r3, #0
 800d0a0:	617b      	str	r3, [r7, #20]

	switch (state)
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	d82a      	bhi.n	800d100 <CorrectCarDirection+0xd8>
 800d0aa:	a201      	add	r2, pc, #4	; (adr r2, 800d0b0 <CorrectCarDirection+0x88>)
 800d0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b0:	0800d0c5 	.word	0x0800d0c5
 800d0b4:	0800d0d3 	.word	0x0800d0d3
 800d0b8:	0800d0f9 	.word	0x0800d0f9
 800d0bc:	0800d0d9 	.word	0x0800d0d9
 800d0c0:	0800d0eb 	.word	0x0800d0eb
	{
		case DriveState_Left:
			z = -k;
 800d0c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800d0c8:	eef1 7a67 	vneg.f32	s15, s15
 800d0cc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 800d0d0:	e017      	b.n	800d102 <CorrectCarDirection+0xda>
		case DriveState_Right:
			z = k;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	617b      	str	r3, [r7, #20]
			break;
 800d0d6:	e014      	b.n	800d102 <CorrectCarDirection+0xda>
		case DriveState_Sharp_Left:
			z = -k * 2;
 800d0d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800d0dc:	eef1 7a67 	vneg.f32	s15, s15
 800d0e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d0e4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 800d0e8:	e00b      	b.n	800d102 <CorrectCarDirection+0xda>
		case DriveState_Sharp_Right:
			z = k * 2;
 800d0ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800d0ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d0f2:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 800d0f6:	e004      	b.n	800d102 <CorrectCarDirection+0xda>
		case DriveState_Normal:
			Motor_Expected_Axis_Speeds[Axis_Z] = 0;
 800d0f8:	4b19      	ldr	r3, [pc, #100]	; (800d160 <CorrectCarDirection+0x138>)
 800d0fa:	f04f 0200 	mov.w	r2, #0
 800d0fe:	609a      	str	r2, [r3, #8]
		default:
			break;
 800d100:	bf00      	nop
	}

	if (Motor_Expected_Axis_Speeds[Axis_X] < 0)
 800d102:	4b17      	ldr	r3, [pc, #92]	; (800d160 <CorrectCarDirection+0x138>)
 800d104:	edd3 7a00 	vldr	s15, [r3]
 800d108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d110:	d505      	bpl.n	800d11e <CorrectCarDirection+0xf6>
	{
		z = -z;
 800d112:	edd7 7a05 	vldr	s15, [r7, #20]
 800d116:	eef1 7a67 	vneg.f32	s15, s15
 800d11a:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (Motor_Expected_Axis_Speeds[Axis_Z] * z < 0)
 800d11e:	4b10      	ldr	r3, [pc, #64]	; (800d160 <CorrectCarDirection+0x138>)
 800d120:	ed93 7a02 	vldr	s14, [r3, #8]
 800d124:	edd7 7a05 	vldr	s15, [r7, #20]
 800d128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d134:	d503      	bpl.n	800d13e <CorrectCarDirection+0x116>
	{
		Motor_Expected_Axis_Speeds[Axis_Z] = 0;
 800d136:	4b0a      	ldr	r3, [pc, #40]	; (800d160 <CorrectCarDirection+0x138>)
 800d138:	f04f 0200 	mov.w	r2, #0
 800d13c:	609a      	str	r2, [r3, #8]
	}

	AddCarSpeed(x, y, z);
 800d13e:	ed97 1a05 	vldr	s2, [r7, #20]
 800d142:	edd7 0a02 	vldr	s1, [r7, #8]
 800d146:	ed97 0a03 	vldr	s0, [r7, #12]
 800d14a:	f000 fea9 	bl	800dea0 <AddCarSpeed>
 800d14e:	e000      	b.n	800d152 <CorrectCarDirection+0x12a>
		return;
 800d150:	bf00      	nop
}
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	47ae147b 	.word	0x47ae147b
 800d15c:	3f747ae1 	.word	0x3f747ae1
 800d160:	20001bd4 	.word	0x20001bd4
 800d164:	3fd00000 	.word	0x3fd00000

0800d168 <UpdateCommand>:

void UpdateCommand()
{
 800d168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d16c:	b082      	sub	sp, #8
 800d16e:	af00      	add	r7, sp, #0
	//判断是否正在运行
	if (StatusControl_RuningFlag == 0)
 800d170:	4ba2      	ldr	r3, [pc, #648]	; (800d3fc <UpdateCommand+0x294>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 8137 	beq.w	800d3e8 <UpdateCommand+0x280>
	{
		return;
	}

	//判断是否在上个指令的持续时间
	if (Command_Index >= 0 && Commands[Command_Index].RunCommand_Time > 0 && uwTick - Last_RunCommand_Time < Commands[Command_Index].Duration)
 800d17a:	4ba1      	ldr	r3, [pc, #644]	; (800d400 <UpdateCommand+0x298>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	db20      	blt.n	800d1c4 <UpdateCommand+0x5c>
 800d182:	4b9f      	ldr	r3, [pc, #636]	; (800d400 <UpdateCommand+0x298>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	499f      	ldr	r1, [pc, #636]	; (800d404 <UpdateCommand+0x29c>)
 800d188:	4613      	mov	r3, r2
 800d18a:	005b      	lsls	r3, r3, #1
 800d18c:	4413      	add	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	440b      	add	r3, r1
 800d192:	3308      	adds	r3, #8
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d014      	beq.n	800d1c4 <UpdateCommand+0x5c>
 800d19a:	4b9b      	ldr	r3, [pc, #620]	; (800d408 <UpdateCommand+0x2a0>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	4b9b      	ldr	r3, [pc, #620]	; (800d40c <UpdateCommand+0x2a4>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	1ad1      	subs	r1, r2, r3
 800d1a4:	4b96      	ldr	r3, [pc, #600]	; (800d400 <UpdateCommand+0x298>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	4896      	ldr	r0, [pc, #600]	; (800d404 <UpdateCommand+0x29c>)
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	4413      	add	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4403      	add	r3, r0
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	d203      	bcs.n	800d1c4 <UpdateCommand+0x5c>
	{
		Command_Duration_Flag = 1;
 800d1bc:	4b94      	ldr	r3, [pc, #592]	; (800d410 <UpdateCommand+0x2a8>)
 800d1be:	2201      	movs	r2, #1
 800d1c0:	701a      	strb	r2, [r3, #0]
		return;
 800d1c2:	e116      	b.n	800d3f2 <UpdateCommand+0x28a>
	}

	//是否第一次结束指令持续作用
	if (Command_Duration_Flag == 1)
 800d1c4:	4b92      	ldr	r3, [pc, #584]	; (800d410 <UpdateCommand+0x2a8>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d11a      	bne.n	800d202 <UpdateCommand+0x9a>
	{

		switch (Commands[Command_Index].Type)
		{
			default:
				if (RealState == DriveState_Normal)
 800d1cc:	4b91      	ldr	r3, [pc, #580]	; (800d414 <UpdateCommand+0x2ac>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b03      	cmp	r3, #3
 800d1d2:	d112      	bne.n	800d1fa <UpdateCommand+0x92>
				{
					SetCarSpeed(Default_Speed, 0, 0);
 800d1d4:	4b90      	ldr	r3, [pc, #576]	; (800d418 <UpdateCommand+0x2b0>)
 800d1d6:	edd3 7a00 	vldr	s15, [r3]
 800d1da:	ed9f 1a90 	vldr	s2, [pc, #576]	; 800d41c <UpdateCommand+0x2b4>
 800d1de:	eddf 0a8f 	vldr	s1, [pc, #572]	; 800d41c <UpdateCommand+0x2b4>
 800d1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d1e6:	f000 fe8b 	bl	800df00 <SetCarSpeed>
					Command_Duration_Flag = 1;
					//放弃这一回合
					return;

				}
				break;
 800d1ea:	bf00      	nop
		}

		Command_Duration_Flag = 0;
 800d1ec:	4b88      	ldr	r3, [pc, #544]	; (800d410 <UpdateCommand+0x2a8>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	701a      	strb	r2, [r3, #0]

		AbnormaldState = DriveState_Normal;
 800d1f2:	4b8b      	ldr	r3, [pc, #556]	; (800d420 <UpdateCommand+0x2b8>)
 800d1f4:	2203      	movs	r2, #3
 800d1f6:	701a      	strb	r2, [r3, #0]
 800d1f8:	e003      	b.n	800d202 <UpdateCommand+0x9a>
					Command_Duration_Flag = 1;
 800d1fa:	4b85      	ldr	r3, [pc, #532]	; (800d410 <UpdateCommand+0x2a8>)
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	701a      	strb	r2, [r3, #0]
					return;
 800d200:	e0f7      	b.n	800d3f2 <UpdateCommand+0x28a>

	}

	//判断是否在冷却时间
	if (uwTick - Last_RunCommand_Time < Command_CooldownTime * (100.0 - Motor_Expected_Axis_Speeds[Axis_X]) + (Command_Index >= 0 ? Commands[Command_Index].Duration : 0))
 800d202:	4b81      	ldr	r3, [pc, #516]	; (800d408 <UpdateCommand+0x2a0>)
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	4b81      	ldr	r3, [pc, #516]	; (800d40c <UpdateCommand+0x2a4>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7f3 f979 	bl	8000504 <__aeabi_ui2d>
 800d212:	4604      	mov	r4, r0
 800d214:	460d      	mov	r5, r1
 800d216:	4b83      	ldr	r3, [pc, #524]	; (800d424 <UpdateCommand+0x2bc>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f3 f994 	bl	8000548 <__aeabi_f2d>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	f04f 0000 	mov.w	r0, #0
 800d228:	497f      	ldr	r1, [pc, #508]	; (800d428 <UpdateCommand+0x2c0>)
 800d22a:	f7f3 f82d 	bl	8000288 <__aeabi_dsub>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f04f 0200 	mov.w	r2, #0
 800d23a:	4b7c      	ldr	r3, [pc, #496]	; (800d42c <UpdateCommand+0x2c4>)
 800d23c:	f7f3 f9dc 	bl	80005f8 <__aeabi_dmul>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4690      	mov	r8, r2
 800d246:	4699      	mov	r9, r3
 800d248:	4b6d      	ldr	r3, [pc, #436]	; (800d400 <UpdateCommand+0x298>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	db0d      	blt.n	800d26c <UpdateCommand+0x104>
 800d250:	4b6b      	ldr	r3, [pc, #428]	; (800d400 <UpdateCommand+0x298>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	496b      	ldr	r1, [pc, #428]	; (800d404 <UpdateCommand+0x29c>)
 800d256:	4613      	mov	r3, r2
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	4413      	add	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	440b      	add	r3, r1
 800d260:	3304      	adds	r3, #4
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f7f3 f94d 	bl	8000504 <__aeabi_ui2d>
 800d26a:	e003      	b.n	800d274 <UpdateCommand+0x10c>
 800d26c:	f04f 0000 	mov.w	r0, #0
 800d270:	f04f 0100 	mov.w	r1, #0
 800d274:	4642      	mov	r2, r8
 800d276:	464b      	mov	r3, r9
 800d278:	f7f3 f808 	bl	800028c <__adddf3>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4620      	mov	r0, r4
 800d282:	4629      	mov	r1, r5
 800d284:	f7f3 fc2a 	bl	8000adc <__aeabi_dcmplt>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f040 80ae 	bne.w	800d3ec <UpdateCommand+0x284>
	{
		return;
	}

	//判断是否到达下一指令触发条件
	if (DriveState_Intersection != RealState && DriveState_Turn_Left != RealState && DriveState_Turn_Right != RealState)
 800d290:	4b60      	ldr	r3, [pc, #384]	; (800d414 <UpdateCommand+0x2ac>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d01f      	beq.n	800d2d8 <UpdateCommand+0x170>
 800d298:	4b5e      	ldr	r3, [pc, #376]	; (800d414 <UpdateCommand+0x2ac>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b07      	cmp	r3, #7
 800d29e:	d01b      	beq.n	800d2d8 <UpdateCommand+0x170>
 800d2a0:	4b5c      	ldr	r3, [pc, #368]	; (800d414 <UpdateCommand+0x2ac>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b08      	cmp	r3, #8
 800d2a6:	d017      	beq.n	800d2d8 <UpdateCommand+0x170>
	{
		if (Motor_Expected_Axis_Speeds[Axis_X] == 0 && Motor_Expected_Axis_Speeds[Axis_Z] == 0 && Command_Index == -1)
 800d2a8:	4b5e      	ldr	r3, [pc, #376]	; (800d424 <UpdateCommand+0x2bc>)
 800d2aa:	edd3 7a00 	vldr	s15, [r3]
 800d2ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b6:	f040 809b 	bne.w	800d3f0 <UpdateCommand+0x288>
 800d2ba:	4b5a      	ldr	r3, [pc, #360]	; (800d424 <UpdateCommand+0x2bc>)
 800d2bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800d2c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c8:	f040 8092 	bne.w	800d3f0 <UpdateCommand+0x288>
 800d2cc:	4b4c      	ldr	r3, [pc, #304]	; (800d400 <UpdateCommand+0x298>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d4:	f040 808c 	bne.w	800d3f0 <UpdateCommand+0x288>
			return;
		}

	}

	int index = Command_Index + 1;
 800d2d8:	4b49      	ldr	r3, [pc, #292]	; (800d400 <UpdateCommand+0x298>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	607b      	str	r3, [r7, #4]
	if (index > Command_Number - 1)
 800d2e0:	4b53      	ldr	r3, [pc, #332]	; (800d430 <UpdateCommand+0x2c8>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	db08      	blt.n	800d2fe <UpdateCommand+0x196>
	{
		//是否为循环模式
		if (Mode == Command_Mode_OneTime)
 800d2ec:	4b51      	ldr	r3, [pc, #324]	; (800d434 <UpdateCommand+0x2cc>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d102      	bne.n	800d2fa <UpdateCommand+0x192>
		{
			Status_Control_Clear();
 800d2f4:	f7ff fe48 	bl	800cf88 <Status_Control_Clear>
			return;
 800d2f8:	e07b      	b.n	800d3f2 <UpdateCommand+0x28a>
		}
		else
		{
			index = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	607b      	str	r3, [r7, #4]
		}
	}

	Command_Index = index;
 800d2fe:	4a40      	ldr	r2, [pc, #256]	; (800d400 <UpdateCommand+0x298>)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6013      	str	r3, [r2, #0]

	//执行触发后操作
	switch (Commands[Command_Index].Type)
 800d304:	4b3e      	ldr	r3, [pc, #248]	; (800d400 <UpdateCommand+0x298>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	493e      	ldr	r1, [pc, #248]	; (800d404 <UpdateCommand+0x29c>)
 800d30a:	4613      	mov	r3, r2
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	4413      	add	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	440b      	add	r3, r1
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b04      	cmp	r3, #4
 800d318:	d855      	bhi.n	800d3c6 <UpdateCommand+0x25e>
 800d31a:	a201      	add	r2, pc, #4	; (adr r2, 800d320 <UpdateCommand+0x1b8>)
 800d31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d320:	0800d335 	.word	0x0800d335
 800d324:	0800d34d 	.word	0x0800d34d
 800d328:	0800d379 	.word	0x0800d379
 800d32c:	0800d3c7 	.word	0x0800d3c7
 800d330:	0800d3a9 	.word	0x0800d3a9
	{
		case Command_Forward:
			SetCarSpeed(Default_Speed, 0, 0);
 800d334:	4b38      	ldr	r3, [pc, #224]	; (800d418 <UpdateCommand+0x2b0>)
 800d336:	edd3 7a00 	vldr	s15, [r3]
 800d33a:	ed9f 1a38 	vldr	s2, [pc, #224]	; 800d41c <UpdateCommand+0x2b4>
 800d33e:	eddf 0a37 	vldr	s1, [pc, #220]	; 800d41c <UpdateCommand+0x2b4>
 800d342:	eeb0 0a67 	vmov.f32	s0, s15
 800d346:	f000 fddb 	bl	800df00 <SetCarSpeed>
			break;
 800d34a:	e03c      	b.n	800d3c6 <UpdateCommand+0x25e>
		case Command_Left:
			SetCarSpeed(Default_Speed * 0.5, 0, Default_Speed);
 800d34c:	4b32      	ldr	r3, [pc, #200]	; (800d418 <UpdateCommand+0x2b0>)
 800d34e:	edd3 7a00 	vldr	s15, [r3]
 800d352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d35a:	4b2f      	ldr	r3, [pc, #188]	; (800d418 <UpdateCommand+0x2b0>)
 800d35c:	ed93 7a00 	vldr	s14, [r3]
 800d360:	eeb0 1a47 	vmov.f32	s2, s14
 800d364:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800d41c <UpdateCommand+0x2b4>
 800d368:	eeb0 0a67 	vmov.f32	s0, s15
 800d36c:	f000 fdc8 	bl	800df00 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Right;
 800d370:	4b2b      	ldr	r3, [pc, #172]	; (800d420 <UpdateCommand+0x2b8>)
 800d372:	2205      	movs	r2, #5
 800d374:	701a      	strb	r2, [r3, #0]
			break;
 800d376:	e026      	b.n	800d3c6 <UpdateCommand+0x25e>
		case Command_Right:
			SetCarSpeed(Default_Speed * 0.5, 0, -Default_Speed);
 800d378:	4b27      	ldr	r3, [pc, #156]	; (800d418 <UpdateCommand+0x2b0>)
 800d37a:	edd3 7a00 	vldr	s15, [r3]
 800d37e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d382:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d386:	4b24      	ldr	r3, [pc, #144]	; (800d418 <UpdateCommand+0x2b0>)
 800d388:	edd3 7a00 	vldr	s15, [r3]
 800d38c:	eef1 7a67 	vneg.f32	s15, s15
 800d390:	eeb0 1a67 	vmov.f32	s2, s15
 800d394:	eddf 0a21 	vldr	s1, [pc, #132]	; 800d41c <UpdateCommand+0x2b4>
 800d398:	eeb0 0a47 	vmov.f32	s0, s14
 800d39c:	f000 fdb0 	bl	800df00 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Left;
 800d3a0:	4b1f      	ldr	r3, [pc, #124]	; (800d420 <UpdateCommand+0x2b8>)
 800d3a2:	2204      	movs	r2, #4
 800d3a4:	701a      	strb	r2, [r3, #0]
			break;
 800d3a6:	e00e      	b.n	800d3c6 <UpdateCommand+0x25e>
		case Command_Rotation:
			SetCarSpeed(0, 0, Default_Speed);
 800d3a8:	4b1b      	ldr	r3, [pc, #108]	; (800d418 <UpdateCommand+0x2b0>)
 800d3aa:	edd3 7a00 	vldr	s15, [r3]
 800d3ae:	eeb0 1a67 	vmov.f32	s2, s15
 800d3b2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800d41c <UpdateCommand+0x2b4>
 800d3b6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800d41c <UpdateCommand+0x2b4>
 800d3ba:	f000 fda1 	bl	800df00 <SetCarSpeed>
			AbnormaldState = DriveState_Sharp_Right;
 800d3be:	4b18      	ldr	r3, [pc, #96]	; (800d420 <UpdateCommand+0x2b8>)
 800d3c0:	2205      	movs	r2, #5
 800d3c2:	701a      	strb	r2, [r3, #0]
			break;
 800d3c4:	bf00      	nop

			break;
	}

	//更新执行时间
	Commands[Command_Index].RunCommand_Time = Last_RunCommand_Time = uwTick;
 800d3c6:	4b10      	ldr	r3, [pc, #64]	; (800d408 <UpdateCommand+0x2a0>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a10      	ldr	r2, [pc, #64]	; (800d40c <UpdateCommand+0x2a4>)
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <UpdateCommand+0x298>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	4b0e      	ldr	r3, [pc, #56]	; (800d40c <UpdateCommand+0x2a4>)
 800d3d4:	6819      	ldr	r1, [r3, #0]
 800d3d6:	480b      	ldr	r0, [pc, #44]	; (800d404 <UpdateCommand+0x29c>)
 800d3d8:	4613      	mov	r3, r2
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4403      	add	r3, r0
 800d3e2:	3308      	adds	r3, #8
 800d3e4:	6019      	str	r1, [r3, #0]
 800d3e6:	e004      	b.n	800d3f2 <UpdateCommand+0x28a>
		return;
 800d3e8:	bf00      	nop
 800d3ea:	e002      	b.n	800d3f2 <UpdateCommand+0x28a>
		return;
 800d3ec:	bf00      	nop
 800d3ee:	e000      	b.n	800d3f2 <UpdateCommand+0x28a>
			return;
 800d3f0:	bf00      	nop
}
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20001b28 	.word	0x20001b28
 800d400:	20000168 	.word	0x20000168
 800d404:	20000078 	.word	0x20000078
 800d408:	200011c4 	.word	0x200011c4
 800d40c:	20001b24 	.word	0x20001b24
 800d410:	20001b29 	.word	0x20001b29
 800d414:	20001b30 	.word	0x20001b30
 800d418:	20001b2c 	.word	0x20001b2c
 800d41c:	00000000 	.word	0x00000000
 800d420:	20001b31 	.word	0x20001b31
 800d424:	20001bd4 	.word	0x20001bd4
 800d428:	40590000 	.word	0x40590000
 800d42c:	40260000 	.word	0x40260000
 800d430:	20000075 	.word	0x20000075
 800d434:	20001b32 	.word	0x20001b32

0800d438 <ApplyCommand>:

void ApplyCommand()
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
	DriveState state = RealState;
 800d43e:	4b09      	ldr	r3, [pc, #36]	; (800d464 <ApplyCommand+0x2c>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	71fb      	strb	r3, [r7, #7]
	//if (RealState != DriveState_Left && RealState != DriveState_Right && RealState != DriveState_Sharp_Left && RealState != DriveState_Sharp_Right && RealState != DriveState_Normal)
	if (AbnormaldState != DriveState_Normal)
 800d444:	4b08      	ldr	r3, [pc, #32]	; (800d468 <ApplyCommand+0x30>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b03      	cmp	r3, #3
 800d44a:	d001      	beq.n	800d450 <ApplyCommand+0x18>
	{
		state = DriveState_Derailment;
 800d44c:	2306      	movs	r3, #6
 800d44e:	71fb      	strb	r3, [r7, #7]
	}

	//修正实际偏差
	CorrectCarDirection(state);
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff fde8 	bl	800d028 <CorrectCarDirection>
	//将理论值应用到小车
	Periodic_UpdateAndSet_Car_ExpectedSpeed();
 800d458:	f000 fbcc 	bl	800dbf4 <Periodic_UpdateAndSet_Car_ExpectedSpeed>
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	20001b30 	.word	0x20001b30
 800d468:	20001b31 	.word	0x20001b31

0800d46c <Periodic_Status_Control>:

//周期性调用 控制小车运行
void Periodic_Status_Control()
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	af00      	add	r7, sp, #0
	//获取当前红外状态
	RealState = GetDriveState();
 800d470:	f000 fd90 	bl	800df94 <GetDriveState>
 800d474:	4603      	mov	r3, r0
 800d476:	461a      	mov	r2, r3
 800d478:	4b03      	ldr	r3, [pc, #12]	; (800d488 <Periodic_Status_Control+0x1c>)
 800d47a:	701a      	strb	r2, [r3, #0]
	//根据辅助传感器更新异常状态指令
	UpdateCommand();
 800d47c:	f7ff fe74 	bl	800d168 <UpdateCommand>
	//应用指令到实际运行
	ApplyCommand();
 800d480:	f7ff ffda 	bl	800d438 <ApplyCommand>
}
 800d484:	bf00      	nop
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20001b30 	.word	0x20001b30
 800d48c:	00000000 	.word	0x00000000

0800d490 <GetBatteryLevel>:
uint8_t ID[4];          //设备ID缓存数组
uint32_t i;

//获取电量
float GetBatteryLevel()
{
 800d490:	b580      	push	{r7, lr}
 800d492:	af00      	add	r7, sp, #0
	return Get_ADCChannelValue(&hadc1, ADC_CHANNEL_4) * 3.3 * 11 / 4096;
 800d494:	2104      	movs	r1, #4
 800d496:	4818      	ldr	r0, [pc, #96]	; (800d4f8 <GetBatteryLevel+0x68>)
 800d498:	f7fe fcc4 	bl	800be24 <Get_ADCChannelValue>
 800d49c:	4603      	mov	r3, r0
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f3 f840 	bl	8000524 <__aeabi_i2d>
 800d4a4:	a312      	add	r3, pc, #72	; (adr r3, 800d4f0 <GetBatteryLevel+0x60>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f3 f8a5 	bl	80005f8 <__aeabi_dmul>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	f04f 0200 	mov.w	r2, #0
 800d4ba:	4b10      	ldr	r3, [pc, #64]	; (800d4fc <GetBatteryLevel+0x6c>)
 800d4bc:	f7f3 f89c 	bl	80005f8 <__aeabi_dmul>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	f04f 0200 	mov.w	r2, #0
 800d4cc:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <GetBatteryLevel+0x70>)
 800d4ce:	f7f3 f9bd 	bl	800084c <__aeabi_ddiv>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	4619      	mov	r1, r3
 800d4da:	f7f3 fb85 	bl	8000be8 <__aeabi_d2f>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	ee07 3a90 	vmov	s15, r3
}
 800d4e4:	eeb0 0a67 	vmov.f32	s0, s15
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	f3af 8000 	nop.w
 800d4f0:	66666666 	.word	0x66666666
 800d4f4:	400a6666 	.word	0x400a6666
 800d4f8:	200003ec 	.word	0x200003ec
 800d4fc:	40260000 	.word	0x40260000
 800d500:	40b00000 	.word	0x40b00000
 800d504:	00000000 	.word	0x00000000

0800d508 <GetInternalTemperature>:

//获取内部温度
float GetInternalTemperature()
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	af00      	add	r7, sp, #0
	return ((Get_ADCChannelValue(&hadc1, ADC_CHANNEL_TEMPSENSOR) * 3.3 / 4096) - 0.76) / 0.0025 + 25;
 800d50c:	2110      	movs	r1, #16
 800d50e:	4824      	ldr	r0, [pc, #144]	; (800d5a0 <GetInternalTemperature+0x98>)
 800d510:	f7fe fc88 	bl	800be24 <Get_ADCChannelValue>
 800d514:	4603      	mov	r3, r0
 800d516:	4618      	mov	r0, r3
 800d518:	f7f3 f804 	bl	8000524 <__aeabi_i2d>
 800d51c:	a31a      	add	r3, pc, #104	; (adr r3, 800d588 <GetInternalTemperature+0x80>)
 800d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d522:	f7f3 f869 	bl	80005f8 <__aeabi_dmul>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	4610      	mov	r0, r2
 800d52c:	4619      	mov	r1, r3
 800d52e:	f04f 0200 	mov.w	r2, #0
 800d532:	4b1c      	ldr	r3, [pc, #112]	; (800d5a4 <GetInternalTemperature+0x9c>)
 800d534:	f7f3 f98a 	bl	800084c <__aeabi_ddiv>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4610      	mov	r0, r2
 800d53e:	4619      	mov	r1, r3
 800d540:	a313      	add	r3, pc, #76	; (adr r3, 800d590 <GetInternalTemperature+0x88>)
 800d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d546:	f7f2 fe9f 	bl	8000288 <__aeabi_dsub>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4610      	mov	r0, r2
 800d550:	4619      	mov	r1, r3
 800d552:	a311      	add	r3, pc, #68	; (adr r3, 800d598 <GetInternalTemperature+0x90>)
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	f7f3 f978 	bl	800084c <__aeabi_ddiv>
 800d55c:	4602      	mov	r2, r0
 800d55e:	460b      	mov	r3, r1
 800d560:	4610      	mov	r0, r2
 800d562:	4619      	mov	r1, r3
 800d564:	f04f 0200 	mov.w	r2, #0
 800d568:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <GetInternalTemperature+0xa0>)
 800d56a:	f7f2 fe8f 	bl	800028c <__adddf3>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	4610      	mov	r0, r2
 800d574:	4619      	mov	r1, r3
 800d576:	f7f3 fb37 	bl	8000be8 <__aeabi_d2f>
 800d57a:	4603      	mov	r3, r0
 800d57c:	ee07 3a90 	vmov	s15, r3
}
 800d580:	eeb0 0a67 	vmov.f32	s0, s15
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	66666666 	.word	0x66666666
 800d58c:	400a6666 	.word	0x400a6666
 800d590:	851eb852 	.word	0x851eb852
 800d594:	3fe851eb 	.word	0x3fe851eb
 800d598:	47ae147b 	.word	0x47ae147b
 800d59c:	3f647ae1 	.word	0x3f647ae1
 800d5a0:	200003ec 	.word	0x200003ec
 800d5a4:	40b00000 	.word	0x40b00000
 800d5a8:	40390000 	.word	0x40390000

0800d5ac <EnableAllMotorEncoders>:

TIM_HandleTypeDef *Motor_Encoders[4] = { &htim1, &htim8, &htim5, &htim4 };

//开启全部编码器
void EnableAllMotorEncoders()
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
	for (int var = 0; var < Motor_Number; ++var)
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	607b      	str	r3, [r7, #4]
 800d5b6:	e00a      	b.n	800d5ce <EnableAllMotorEncoders+0x22>
	{
		HAL_TIM_Encoder_Start(Motor_Encoders[var], TIM_CHANNEL_ALL);
 800d5b8:	4a09      	ldr	r2, [pc, #36]	; (800d5e0 <EnableAllMotorEncoders+0x34>)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c0:	213c      	movs	r1, #60	; 0x3c
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7f9 fe9e 	bl	8007304 <HAL_TIM_Encoder_Start>
	for (int var = 0; var < Motor_Number; ++var)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	607b      	str	r3, [r7, #4]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	ddf1      	ble.n	800d5b8 <EnableAllMotorEncoders+0xc>
	}
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	2000017c 	.word	0x2000017c

0800d5e4 <UpdateAllMotorSpeed>:

//

void UpdateAllMotorSpeed()
{
 800d5e4:	b5b0      	push	{r4, r5, r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
	short speed_count;
	float speed_duty;

	for (int var = 0; var < Motor_Number; ++var)
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	60fb      	str	r3, [r7, #12]
 800d5ee:	e03a      	b.n	800d666 <UpdateAllMotorSpeed+0x82>
	{
		speed_count = (short) __HAL_TIM_GET_COUNTER(Motor_Encoders[var]);
 800d5f0:	4a21      	ldr	r2, [pc, #132]	; (800d678 <UpdateAllMotorSpeed+0x94>)
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fc:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_COUNTER(Motor_Encoders[var], 0);
 800d5fe:	4a1e      	ldr	r2, [pc, #120]	; (800d678 <UpdateAllMotorSpeed+0x94>)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2200      	movs	r2, #0
 800d60a:	625a      	str	r2, [r3, #36]	; 0x24

		//计算速度
		speed_duty = speed_count * 100.0 / Motor_Encoder_Max_Counts[var];
 800d60c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d610:	4618      	mov	r0, r3
 800d612:	f7f2 ff87 	bl	8000524 <__aeabi_i2d>
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	4b18      	ldr	r3, [pc, #96]	; (800d67c <UpdateAllMotorSpeed+0x98>)
 800d61c:	f7f2 ffec 	bl	80005f8 <__aeabi_dmul>
 800d620:	4602      	mov	r2, r0
 800d622:	460b      	mov	r3, r1
 800d624:	4614      	mov	r4, r2
 800d626:	461d      	mov	r5, r3
 800d628:	4a15      	ldr	r2, [pc, #84]	; (800d680 <UpdateAllMotorSpeed+0x9c>)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4618      	mov	r0, r3
 800d634:	f7f2 ff88 	bl	8000548 <__aeabi_f2d>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 f904 	bl	800084c <__aeabi_ddiv>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	4610      	mov	r0, r2
 800d64a:	4619      	mov	r1, r3
 800d64c:	f7f3 facc 	bl	8000be8 <__aeabi_d2f>
 800d650:	4603      	mov	r3, r0
 800d652:	607b      	str	r3, [r7, #4]
		Motor_Actual_Speeds[var] = speed_duty;
 800d654:	4a0b      	ldr	r2, [pc, #44]	; (800d684 <UpdateAllMotorSpeed+0xa0>)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]
	for (int var = 0; var < Motor_Number; ++var)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	3301      	adds	r3, #1
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b03      	cmp	r3, #3
 800d66a:	ddc1      	ble.n	800d5f0 <UpdateAllMotorSpeed+0xc>
	}

}
 800d66c:	bf00      	nop
 800d66e:	bf00      	nop
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bdb0      	pop	{r4, r5, r7, pc}
 800d676:	bf00      	nop
 800d678:	2000017c 	.word	0x2000017c
 800d67c:	40590000 	.word	0x40590000
 800d680:	2000016c 	.word	0x2000016c
 800d684:	20001b34 	.word	0x20001b34

0800d688 <InitMotorPID>:

struct _pid Motor_PID[4];

//初始化PID
void InitMotorPID()
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < Motor_Number; i++)
 800d68e:	2300      	movs	r3, #0
 800d690:	71fb      	strb	r3, [r7, #7]
 800d692:	e041      	b.n	800d718 <InitMotorPID+0x90>
	{
		Motor_PID[i].SetSpeed = 0.0;
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	4a25      	ldr	r2, [pc, #148]	; (800d72c <InitMotorPID+0xa4>)
 800d698:	015b      	lsls	r3, r3, #5
 800d69a:	4413      	add	r3, r2
 800d69c:	f04f 0200 	mov.w	r2, #0
 800d6a0:	601a      	str	r2, [r3, #0]
		Motor_PID[i].ActualSpeed = 0.0;
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	4a21      	ldr	r2, [pc, #132]	; (800d72c <InitMotorPID+0xa4>)
 800d6a6:	015b      	lsls	r3, r3, #5
 800d6a8:	4413      	add	r3, r2
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	f04f 0200 	mov.w	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err = 0.0;
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	4a1d      	ldr	r2, [pc, #116]	; (800d72c <InitMotorPID+0xa4>)
 800d6b6:	015b      	lsls	r3, r3, #5
 800d6b8:	4413      	add	r3, r2
 800d6ba:	3308      	adds	r3, #8
 800d6bc:	f04f 0200 	mov.w	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err_next = 0.0;
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	4a19      	ldr	r2, [pc, #100]	; (800d72c <InitMotorPID+0xa4>)
 800d6c6:	015b      	lsls	r3, r3, #5
 800d6c8:	4413      	add	r3, r2
 800d6ca:	330c      	adds	r3, #12
 800d6cc:	f04f 0200 	mov.w	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]
		Motor_PID[i].err_last = 0.0;
 800d6d2:	79fb      	ldrb	r3, [r7, #7]
 800d6d4:	4a15      	ldr	r2, [pc, #84]	; (800d72c <InitMotorPID+0xa4>)
 800d6d6:	015b      	lsls	r3, r3, #5
 800d6d8:	4413      	add	r3, r2
 800d6da:	3310      	adds	r3, #16
 800d6dc:	f04f 0200 	mov.w	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Kp = 2;
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	4a11      	ldr	r2, [pc, #68]	; (800d72c <InitMotorPID+0xa4>)
 800d6e6:	015b      	lsls	r3, r3, #5
 800d6e8:	4413      	add	r3, r2
 800d6ea:	3314      	adds	r3, #20
 800d6ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d6f0:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Ki = 4;
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	4a0d      	ldr	r2, [pc, #52]	; (800d72c <InitMotorPID+0xa4>)
 800d6f6:	015b      	lsls	r3, r3, #5
 800d6f8:	4413      	add	r3, r2
 800d6fa:	3318      	adds	r3, #24
 800d6fc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800d700:	601a      	str	r2, [r3, #0]
		Motor_PID[i].Kd = 2;
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	4a09      	ldr	r2, [pc, #36]	; (800d72c <InitMotorPID+0xa4>)
 800d706:	015b      	lsls	r3, r3, #5
 800d708:	4413      	add	r3, r2
 800d70a:	331c      	adds	r3, #28
 800d70c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d710:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < Motor_Number; i++)
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	3301      	adds	r3, #1
 800d716:	71fb      	strb	r3, [r7, #7]
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d9ba      	bls.n	800d694 <InitMotorPID+0xc>
	}
}
 800d71e:	bf00      	nop
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	20001b44 	.word	0x20001b44

0800d730 <PID_realize>:

float PID_realize(struct _pid *pid, float speed, float actualSpeed)
{
 800d730:	b480      	push	{r7}
 800d732:	b087      	sub	sp, #28
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	ed87 0a02 	vstr	s0, [r7, #8]
 800d73c:	edc7 0a01 	vstr	s1, [r7, #4]
	float incrementSpeed;
	//设置当前值
	pid->SetSpeed = speed;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	601a      	str	r2, [r3, #0]
	pid->ActualSpeed = actualSpeed;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	605a      	str	r2, [r3, #4]
	//特殊处理 0 速度
	if (speed == 0)
 800d74c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d750:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d758:	d102      	bne.n	800d760 <PID_realize+0x30>
	{
		return 0;
 800d75a:	f04f 0300 	mov.w	r3, #0
 800d75e:	e04d      	b.n	800d7fc <PID_realize+0xcc>
	}

	pid->err = pid->SetSpeed - pid->ActualSpeed;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	ed93 7a00 	vldr	s14, [r3]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	edd3 7a01 	vldr	s15, [r3, #4]
 800d76c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	edc3 7a02 	vstr	s15, [r3, #8]
	incrementSpeed = pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last); //计算出增量
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	ed93 7a05 	vldr	s14, [r3, #20]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	edd3 6a02 	vldr	s13, [r3, #8]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	edd3 7a03 	vldr	s15, [r3, #12]
 800d788:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d78c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	edd3 6a06 	vldr	s13, [r3, #24]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	edd3 7a02 	vldr	s15, [r3, #8]
 800d79c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	edd3 6a07 	vldr	s13, [r3, #28]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	ed93 6a02 	vldr	s12, [r3, #8]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	edd3 7a03 	vldr	s15, [r3, #12]
 800d7b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d7ba:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800d7c4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d7c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7d0:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->ActualSpeed += incrementSpeed;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800d7da:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->err_last = pid->err_next;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	68da      	ldr	r2, [r3, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	611a      	str	r2, [r3, #16]
	pid->err_next = pid->err;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	689a      	ldr	r2, [r3, #8]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	60da      	str	r2, [r3, #12]
	return pid->ActualSpeed;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	685b      	ldr	r3, [r3, #4]
}
 800d7fc:	ee07 3a90 	vmov	s15, r3
 800d800:	eeb0 0a67 	vmov.f32	s0, s15
 800d804:	371c      	adds	r7, #28
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
	...

0800d810 <UpdateMotorSpeedPID>:
	return current;
}

//依照PID算法更新电机速度
float UpdateMotorSpeedPID(Motor_Name motor, float speed, float actualSpeed)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	ed87 0a02 	vstr	s0, [r7, #8]
 800d81c:	edc7 0a01 	vstr	s1, [r7, #4]
 800d820:	73fb      	strb	r3, [r7, #15]
	//下一轮应用值
	float ac = 0;
 800d822:	f04f 0300 	mov.w	r3, #0
 800d826:	617b      	str	r3, [r7, #20]
	ac = PID_realize(&Motor_PID[motor], speed, actualSpeed);
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	015b      	lsls	r3, r3, #5
 800d82c:	4a09      	ldr	r2, [pc, #36]	; (800d854 <UpdateMotorSpeedPID+0x44>)
 800d82e:	4413      	add	r3, r2
 800d830:	edd7 0a01 	vldr	s1, [r7, #4]
 800d834:	ed97 0a02 	vldr	s0, [r7, #8]
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff ff79 	bl	800d730 <PID_realize>
 800d83e:	ed87 0a05 	vstr	s0, [r7, #20]
	//判断是否在上下限内
	//ac = LimitSpeed(ac, speed);

	return ac;
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	ee07 3a90 	vmov	s15, r3
}
 800d848:	eeb0 0a67 	vmov.f32	s0, s15
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20001b44 	.word	0x20001b44

0800d858 <Set_TB6612_State>:
//电机状态缓存
Motor_State Motor_States[] = { Motor_Stop, Motor_Stop, Motor_Stop, Motor_Stop };

//设置驱动板状态
void Set_TB6612_State()
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	af00      	add	r7, sp, #0
	if (Motor_States[0] != Motor_Stop || Motor_States[1] != Motor_Stop)
 800d85c:	4b14      	ldr	r3, [pc, #80]	; (800d8b0 <Set_TB6612_State+0x58>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d103      	bne.n	800d86c <Set_TB6612_State+0x14>
 800d864:	4b12      	ldr	r3, [pc, #72]	; (800d8b0 <Set_TB6612_State+0x58>)
 800d866:	785b      	ldrb	r3, [r3, #1]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d005      	beq.n	800d878 <Set_TB6612_State+0x20>
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_SET);
 800d86c:	2201      	movs	r2, #1
 800d86e:	2104      	movs	r1, #4
 800d870:	4810      	ldr	r0, [pc, #64]	; (800d8b4 <Set_TB6612_State+0x5c>)
 800d872:	f7f6 fe27 	bl	80044c4 <HAL_GPIO_WritePin>
 800d876:	e004      	b.n	800d882 <Set_TB6612_State+0x2a>
	}
	else
	{
		HAL_GPIO_WritePin(Motor_F_STBY_GPIO_Port, Motor_F_STBY_Pin, GPIO_PIN_RESET);
 800d878:	2200      	movs	r2, #0
 800d87a:	2104      	movs	r1, #4
 800d87c:	480d      	ldr	r0, [pc, #52]	; (800d8b4 <Set_TB6612_State+0x5c>)
 800d87e:	f7f6 fe21 	bl	80044c4 <HAL_GPIO_WritePin>
	}

	if (Motor_States[2] != Motor_Stop || Motor_States[3] != Motor_Stop)
 800d882:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <Set_TB6612_State+0x58>)
 800d884:	789b      	ldrb	r3, [r3, #2]
 800d886:	2b02      	cmp	r3, #2
 800d888:	d103      	bne.n	800d892 <Set_TB6612_State+0x3a>
 800d88a:	4b09      	ldr	r3, [pc, #36]	; (800d8b0 <Set_TB6612_State+0x58>)
 800d88c:	78db      	ldrb	r3, [r3, #3]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d005      	beq.n	800d89e <Set_TB6612_State+0x46>
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_SET);
 800d892:	2201      	movs	r2, #1
 800d894:	2108      	movs	r1, #8
 800d896:	4807      	ldr	r0, [pc, #28]	; (800d8b4 <Set_TB6612_State+0x5c>)
 800d898:	f7f6 fe14 	bl	80044c4 <HAL_GPIO_WritePin>
 800d89c:	e005      	b.n	800d8aa <Set_TB6612_State+0x52>
	}
	else
	{
		HAL_GPIO_WritePin(Motor_B_STBY_GPIO_Port, Motor_B_STBY_Pin, GPIO_PIN_RESET);
 800d89e:	2200      	movs	r2, #0
 800d8a0:	2108      	movs	r1, #8
 800d8a2:	4804      	ldr	r0, [pc, #16]	; (800d8b4 <Set_TB6612_State+0x5c>)
 800d8a4:	f7f6 fe0e 	bl	80044c4 <HAL_GPIO_WritePin>
	}
}
 800d8a8:	bf00      	nop
 800d8aa:	bf00      	nop
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200001cc 	.word	0x200001cc
 800d8b4:	40021800 	.word	0x40021800

0800d8b8 <SetMotorState>:

//设置单个电机状态
void SetMotorState(Motor_Name motor, Motor_State state)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	460a      	mov	r2, r1
 800d8c2:	71fb      	strb	r3, [r7, #7]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	71bb      	strb	r3, [r7, #6]
	//缓存
	Motor_States[motor] = state;
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	493e      	ldr	r1, [pc, #248]	; (800d9c4 <SetMotorState+0x10c>)
 800d8cc:	79ba      	ldrb	r2, [r7, #6]
 800d8ce:	54ca      	strb	r2, [r1, r3]

	switch (state)
 800d8d0:	79bb      	ldrb	r3, [r7, #6]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d04c      	beq.n	800d970 <SetMotorState+0xb8>
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	dc6d      	bgt.n	800d9b6 <SetMotorState+0xfe>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <SetMotorState+0x2c>
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d023      	beq.n	800d92a <SetMotorState+0x72>
 800d8e2:	e068      	b.n	800d9b6 <SetMotorState+0xfe>
	{
		case Motor_Forward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	4a38      	ldr	r2, [pc, #224]	; (800d9c8 <SetMotorState+0x110>)
 800d8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4837      	ldr	r0, [pc, #220]	; (800d9cc <SetMotorState+0x114>)
 800d8f0:	f7f9 fb2a 	bl	8006f48 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_SET);
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	4a36      	ldr	r2, [pc, #216]	; (800d9d0 <SetMotorState+0x118>)
 800d8f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d8fc:	79fb      	ldrb	r3, [r7, #7]
 800d8fe:	4a35      	ldr	r2, [pc, #212]	; (800d9d4 <SetMotorState+0x11c>)
 800d900:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800d904:	2201      	movs	r2, #1
 800d906:	4619      	mov	r1, r3
 800d908:	f7f6 fddc 	bl	80044c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	4a30      	ldr	r2, [pc, #192]	; (800d9d0 <SetMotorState+0x118>)
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	4413      	add	r3, r2
 800d914:	6858      	ldr	r0, [r3, #4]
 800d916:	79fb      	ldrb	r3, [r7, #7]
 800d918:	4a2e      	ldr	r2, [pc, #184]	; (800d9d4 <SetMotorState+0x11c>)
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	885b      	ldrh	r3, [r3, #2]
 800d920:	2200      	movs	r2, #0
 800d922:	4619      	mov	r1, r3
 800d924:	f7f6 fdce 	bl	80044c4 <HAL_GPIO_WritePin>
			break;
 800d928:	e045      	b.n	800d9b6 <SetMotorState+0xfe>
		case Motor_Backward:
			HAL_TIM_PWM_Start(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 800d92a:	79fb      	ldrb	r3, [r7, #7]
 800d92c:	4a26      	ldr	r2, [pc, #152]	; (800d9c8 <SetMotorState+0x110>)
 800d92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d932:	4619      	mov	r1, r3
 800d934:	4825      	ldr	r0, [pc, #148]	; (800d9cc <SetMotorState+0x114>)
 800d936:	f7f9 fb07 	bl	8006f48 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 800d93a:	79fb      	ldrb	r3, [r7, #7]
 800d93c:	4a24      	ldr	r2, [pc, #144]	; (800d9d0 <SetMotorState+0x118>)
 800d93e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d942:	79fb      	ldrb	r3, [r7, #7]
 800d944:	4a23      	ldr	r2, [pc, #140]	; (800d9d4 <SetMotorState+0x11c>)
 800d946:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800d94a:	2200      	movs	r2, #0
 800d94c:	4619      	mov	r1, r3
 800d94e:	f7f6 fdb9 	bl	80044c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_SET);
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	4a1e      	ldr	r2, [pc, #120]	; (800d9d0 <SetMotorState+0x118>)
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	4413      	add	r3, r2
 800d95a:	6858      	ldr	r0, [r3, #4]
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	4a1d      	ldr	r2, [pc, #116]	; (800d9d4 <SetMotorState+0x11c>)
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	4413      	add	r3, r2
 800d964:	885b      	ldrh	r3, [r3, #2]
 800d966:	2201      	movs	r2, #1
 800d968:	4619      	mov	r1, r3
 800d96a:	f7f6 fdab 	bl	80044c4 <HAL_GPIO_WritePin>
			break;
 800d96e:	e022      	b.n	800d9b6 <SetMotorState+0xfe>
		case Motor_Stop:
			HAL_TIM_PWM_Stop(&Motor_PWM_TIM, Motor_PWM_Channels[motor]);
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	4a15      	ldr	r2, [pc, #84]	; (800d9c8 <SetMotorState+0x110>)
 800d974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d978:	4619      	mov	r1, r3
 800d97a:	4814      	ldr	r0, [pc, #80]	; (800d9cc <SetMotorState+0x114>)
 800d97c:	f7f9 fbac 	bl	80070d8 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][0], Motor_IN_Pins[motor][0], GPIO_PIN_RESET);
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	4a13      	ldr	r2, [pc, #76]	; (800d9d0 <SetMotorState+0x118>)
 800d984:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d988:	79fb      	ldrb	r3, [r7, #7]
 800d98a:	4a12      	ldr	r2, [pc, #72]	; (800d9d4 <SetMotorState+0x11c>)
 800d98c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800d990:	2200      	movs	r2, #0
 800d992:	4619      	mov	r1, r3
 800d994:	f7f6 fd96 	bl	80044c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_IN_GPIO_Ports[motor][1], Motor_IN_Pins[motor][1], GPIO_PIN_RESET);
 800d998:	79fb      	ldrb	r3, [r7, #7]
 800d99a:	4a0d      	ldr	r2, [pc, #52]	; (800d9d0 <SetMotorState+0x118>)
 800d99c:	00db      	lsls	r3, r3, #3
 800d99e:	4413      	add	r3, r2
 800d9a0:	6858      	ldr	r0, [r3, #4]
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	4a0b      	ldr	r2, [pc, #44]	; (800d9d4 <SetMotorState+0x11c>)
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	885b      	ldrh	r3, [r3, #2]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f7f6 fd88 	bl	80044c4 <HAL_GPIO_WritePin>
			break;
 800d9b4:	bf00      	nop
	}

	//设置驱动板状态
	Set_TB6612_State();
 800d9b6:	f7ff ff4f 	bl	800d858 <Set_TB6612_State>
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200001cc 	.word	0x200001cc
 800d9c8:	200001bc 	.word	0x200001bc
 800d9cc:	20000efc 	.word	0x20000efc
 800d9d0:	2000018c 	.word	0x2000018c
 800d9d4:	200001ac 	.word	0x200001ac

0800d9d8 <SetMotorSpeed>:

//设置单个电机速度
//速度取值 -100 ~ 100 对应占空比 0% - 100%
void SetMotorSpeed(Motor_Name motor, float speed)
{
 800d9d8:	b590      	push	{r4, r7, lr}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	ed87 0a00 	vstr	s0, [r7]
 800d9e4:	71fb      	strb	r3, [r7, #7]
	uint8_t state = 0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
	//设置状态
	if (speed == 0)
 800d9ea:	edd7 7a00 	vldr	s15, [r7]
 800d9ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f6:	d102      	bne.n	800d9fe <SetMotorSpeed+0x26>
	{
		state = Motor_Stop;
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	73fb      	strb	r3, [r7, #15]
 800d9fc:	e00b      	b.n	800da16 <SetMotorSpeed+0x3e>
	}
	else if (speed > 0)
 800d9fe:	edd7 7a00 	vldr	s15, [r7]
 800da02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0a:	dd02      	ble.n	800da12 <SetMotorSpeed+0x3a>
	{
		state = Motor_Forward;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73fb      	strb	r3, [r7, #15]
 800da10:	e001      	b.n	800da16 <SetMotorSpeed+0x3e>
	}
	else
	{
		state = Motor_Backward;
 800da12:	2301      	movs	r3, #1
 800da14:	73fb      	strb	r3, [r7, #15]
	}

	//检查电机状态
	if (Motor_States[motor] != state)
 800da16:	79fb      	ldrb	r3, [r7, #7]
 800da18:	4a6d      	ldr	r2, [pc, #436]	; (800dbd0 <SetMotorSpeed+0x1f8>)
 800da1a:	5cd3      	ldrb	r3, [r2, r3]
 800da1c:	7bfa      	ldrb	r2, [r7, #15]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d005      	beq.n	800da2e <SetMotorSpeed+0x56>
	{
		SetMotorState(motor, state);
 800da22:	7bfa      	ldrb	r2, [r7, #15]
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	4611      	mov	r1, r2
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff ff45 	bl	800d8b8 <SetMotorState>
	}

	//修正速度
	if (speed < 0)
 800da2e:	edd7 7a00 	vldr	s15, [r7]
 800da32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3a:	d505      	bpl.n	800da48 <SetMotorSpeed+0x70>
	{
		speed = -speed;
 800da3c:	edd7 7a00 	vldr	s15, [r7]
 800da40:	eef1 7a67 	vneg.f32	s15, s15
 800da44:	edc7 7a00 	vstr	s15, [r7]
	}

	//设置PWM
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 800da48:	79fb      	ldrb	r3, [r7, #7]
 800da4a:	4a62      	ldr	r2, [pc, #392]	; (800dbd4 <SetMotorSpeed+0x1fc>)
 800da4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d128      	bne.n	800daa6 <SetMotorSpeed+0xce>
 800da54:	edd7 7a00 	vldr	s15, [r7]
 800da58:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800dbd8 <SetMotorSpeed+0x200>
 800da5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da64:	dd03      	ble.n	800da6e <SetMotorSpeed+0x96>
 800da66:	f04f 0000 	mov.w	r0, #0
 800da6a:	495c      	ldr	r1, [pc, #368]	; (800dbdc <SetMotorSpeed+0x204>)
 800da6c:	e002      	b.n	800da74 <SetMotorSpeed+0x9c>
 800da6e:	6838      	ldr	r0, [r7, #0]
 800da70:	f7f2 fd6a 	bl	8000548 <__aeabi_f2d>
 800da74:	a352      	add	r3, pc, #328	; (adr r3, 800dbc0 <SetMotorSpeed+0x1e8>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f7f2 fdbd 	bl	80005f8 <__aeabi_dmul>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4610      	mov	r0, r2
 800da84:	4619      	mov	r1, r3
 800da86:	a350      	add	r3, pc, #320	; (adr r3, 800dbc8 <SetMotorSpeed+0x1f0>)
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	f7f2 fdb4 	bl	80005f8 <__aeabi_dmul>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	4952      	ldr	r1, [pc, #328]	; (800dbe0 <SetMotorSpeed+0x208>)
 800da96:	680c      	ldr	r4, [r1, #0]
 800da98:	4610      	mov	r0, r2
 800da9a:	4619      	mov	r1, r3
 800da9c:	f7f3 f884 	bl	8000ba8 <__aeabi_d2uiz>
 800daa0:	4603      	mov	r3, r0
 800daa2:	6363      	str	r3, [r4, #52]	; 0x34
}
 800daa4:	e085      	b.n	800dbb2 <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	4a4a      	ldr	r2, [pc, #296]	; (800dbd4 <SetMotorSpeed+0x1fc>)
 800daaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daae:	2b04      	cmp	r3, #4
 800dab0:	d128      	bne.n	800db04 <SetMotorSpeed+0x12c>
 800dab2:	edd7 7a00 	vldr	s15, [r7]
 800dab6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800dbd8 <SetMotorSpeed+0x200>
 800daba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac2:	dd03      	ble.n	800dacc <SetMotorSpeed+0xf4>
 800dac4:	f04f 0000 	mov.w	r0, #0
 800dac8:	4944      	ldr	r1, [pc, #272]	; (800dbdc <SetMotorSpeed+0x204>)
 800daca:	e002      	b.n	800dad2 <SetMotorSpeed+0xfa>
 800dacc:	6838      	ldr	r0, [r7, #0]
 800dace:	f7f2 fd3b 	bl	8000548 <__aeabi_f2d>
 800dad2:	a33b      	add	r3, pc, #236	; (adr r3, 800dbc0 <SetMotorSpeed+0x1e8>)
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4610      	mov	r0, r2
 800dae2:	4619      	mov	r1, r3
 800dae4:	a338      	add	r3, pc, #224	; (adr r3, 800dbc8 <SetMotorSpeed+0x1f0>)
 800dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daea:	f7f2 fd85 	bl	80005f8 <__aeabi_dmul>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	493b      	ldr	r1, [pc, #236]	; (800dbe0 <SetMotorSpeed+0x208>)
 800daf4:	680c      	ldr	r4, [r1, #0]
 800daf6:	4610      	mov	r0, r2
 800daf8:	4619      	mov	r1, r3
 800dafa:	f7f3 f855 	bl	8000ba8 <__aeabi_d2uiz>
 800dafe:	4603      	mov	r3, r0
 800db00:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800db02:	e056      	b.n	800dbb2 <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	4a33      	ldr	r2, [pc, #204]	; (800dbd4 <SetMotorSpeed+0x1fc>)
 800db08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db0c:	2b08      	cmp	r3, #8
 800db0e:	d128      	bne.n	800db62 <SetMotorSpeed+0x18a>
 800db10:	edd7 7a00 	vldr	s15, [r7]
 800db14:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dbd8 <SetMotorSpeed+0x200>
 800db18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db20:	dd03      	ble.n	800db2a <SetMotorSpeed+0x152>
 800db22:	f04f 0000 	mov.w	r0, #0
 800db26:	492d      	ldr	r1, [pc, #180]	; (800dbdc <SetMotorSpeed+0x204>)
 800db28:	e002      	b.n	800db30 <SetMotorSpeed+0x158>
 800db2a:	6838      	ldr	r0, [r7, #0]
 800db2c:	f7f2 fd0c 	bl	8000548 <__aeabi_f2d>
 800db30:	a323      	add	r3, pc, #140	; (adr r3, 800dbc0 <SetMotorSpeed+0x1e8>)
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fd5f 	bl	80005f8 <__aeabi_dmul>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4610      	mov	r0, r2
 800db40:	4619      	mov	r1, r3
 800db42:	a321      	add	r3, pc, #132	; (adr r3, 800dbc8 <SetMotorSpeed+0x1f0>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	f7f2 fd56 	bl	80005f8 <__aeabi_dmul>
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	4923      	ldr	r1, [pc, #140]	; (800dbe0 <SetMotorSpeed+0x208>)
 800db52:	680c      	ldr	r4, [r1, #0]
 800db54:	4610      	mov	r0, r2
 800db56:	4619      	mov	r1, r3
 800db58:	f7f3 f826 	bl	8000ba8 <__aeabi_d2uiz>
 800db5c:	4603      	mov	r3, r0
 800db5e:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800db60:	e027      	b.n	800dbb2 <SetMotorSpeed+0x1da>
	__HAL_TIM_SetCompare(&Motor_PWM_TIM, Motor_PWM_Channels[motor], (speed>100?100:speed)*0.01*PWM_Count_Max);
 800db62:	edd7 7a00 	vldr	s15, [r7]
 800db66:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800dbd8 <SetMotorSpeed+0x200>
 800db6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db72:	dd03      	ble.n	800db7c <SetMotorSpeed+0x1a4>
 800db74:	f04f 0000 	mov.w	r0, #0
 800db78:	4918      	ldr	r1, [pc, #96]	; (800dbdc <SetMotorSpeed+0x204>)
 800db7a:	e002      	b.n	800db82 <SetMotorSpeed+0x1aa>
 800db7c:	6838      	ldr	r0, [r7, #0]
 800db7e:	f7f2 fce3 	bl	8000548 <__aeabi_f2d>
 800db82:	a30f      	add	r3, pc, #60	; (adr r3, 800dbc0 <SetMotorSpeed+0x1e8>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4610      	mov	r0, r2
 800db92:	4619      	mov	r1, r3
 800db94:	a30c      	add	r3, pc, #48	; (adr r3, 800dbc8 <SetMotorSpeed+0x1f0>)
 800db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9a:	f7f2 fd2d 	bl	80005f8 <__aeabi_dmul>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	490f      	ldr	r1, [pc, #60]	; (800dbe0 <SetMotorSpeed+0x208>)
 800dba4:	680c      	ldr	r4, [r1, #0]
 800dba6:	4610      	mov	r0, r2
 800dba8:	4619      	mov	r1, r3
 800dbaa:	f7f2 fffd 	bl	8000ba8 <__aeabi_d2uiz>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	6423      	str	r3, [r4, #64]	; 0x40
}
 800dbb2:	bf00      	nop
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd90      	pop	{r4, r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	f3af 8000 	nop.w
 800dbc0:	47ae147b 	.word	0x47ae147b
 800dbc4:	3f847ae1 	.word	0x3f847ae1
 800dbc8:	00000000 	.word	0x00000000
 800dbcc:	40d067c0 	.word	0x40d067c0
 800dbd0:	200001cc 	.word	0x200001cc
 800dbd4:	200001bc 	.word	0x200001bc
 800dbd8:	42c80000 	.word	0x42c80000
 800dbdc:	40590000 	.word	0x40590000
 800dbe0:	20000efc 	.word	0x20000efc

0800dbe4 <InitCar>:
float Abnormal_Axis_Speed[3];

Abnormal_Mode StateAbnormal_Mode;

void InitCar()
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
	//初始化PID
	InitMotorPID();
 800dbe8:	f7ff fd4e 	bl	800d688 <InitMotorPID>
	//使能小车速度监控
	EnableAllMotorEncoders();
 800dbec:	f7ff fcde 	bl	800d5ac <EnableAllMotorEncoders>
}
 800dbf0:	bf00      	nop
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <Periodic_UpdateAndSet_Car_ExpectedSpeed>:
	Abnormal_Axis_Speed[2] = z;
}

//周期更新设置值并应用
void Periodic_UpdateAndSet_Car_ExpectedSpeed()
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
	//CorrectCarDirection();
	//更新实际速度
	Periodic_Update_Car_ActualSpeed();
 800dbfa:	f000 f857 	bl	800dcac <Periodic_Update_Car_ActualSpeed>
	//级联更新计算PID
	for (int motor = 0; motor < Motor_Number; ++motor)
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
 800dc02:	e020      	b.n	800dc46 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x52>
	{
		SetMotorSpeed(motor, UpdateMotorSpeedPID(motor, Motor_Expected_Speeds[motor], Motor_Actual_Speeds[motor]));
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	b2dc      	uxtb	r4, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	4912      	ldr	r1, [pc, #72]	; (800dc58 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x64>)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	440b      	add	r3, r1
 800dc14:	edd3 7a00 	vldr	s15, [r3]
 800dc18:	4910      	ldr	r1, [pc, #64]	; (800dc5c <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x68>)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	440b      	add	r3, r1
 800dc20:	ed93 7a00 	vldr	s14, [r3]
 800dc24:	eef0 0a47 	vmov.f32	s1, s14
 800dc28:	eeb0 0a67 	vmov.f32	s0, s15
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f7ff fdef 	bl	800d810 <UpdateMotorSpeedPID>
 800dc32:	eef0 7a40 	vmov.f32	s15, s0
 800dc36:	eeb0 0a67 	vmov.f32	s0, s15
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7ff fecc 	bl	800d9d8 <SetMotorSpeed>
	for (int motor = 0; motor < Motor_Number; ++motor)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3301      	adds	r3, #1
 800dc44:	607b      	str	r3, [r7, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b03      	cmp	r3, #3
 800dc4a:	dddb      	ble.n	800dc04 <Periodic_UpdateAndSet_Car_ExpectedSpeed+0x10>
	}
}
 800dc4c:	bf00      	nop
 800dc4e:	bf00      	nop
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd90      	pop	{r4, r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20001bc4 	.word	0x20001bc4
 800dc5c:	20001b34 	.word	0x20001b34

0800dc60 <Is_Car_Runing>:

//判断是否停止
uint8_t Is_Car_Runing()
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < Motor_Number; ++var)
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	603b      	str	r3, [r7, #0]
 800dc6e:	e010      	b.n	800dc92 <Is_Car_Runing+0x32>
	{
		if (Motor_Expected_Speeds[var] != 0)
 800dc70:	4a0d      	ldr	r2, [pc, #52]	; (800dca8 <Is_Car_Runing+0x48>)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	edd3 7a00 	vldr	s15, [r3]
 800dc7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc84:	d002      	beq.n	800dc8c <Is_Car_Runing+0x2c>
		{
			flag = 1;
 800dc86:	2301      	movs	r3, #1
 800dc88:	71fb      	strb	r3, [r7, #7]
			break;
 800dc8a:	e005      	b.n	800dc98 <Is_Car_Runing+0x38>
	for (int var = 0; var < Motor_Number; ++var)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	603b      	str	r3, [r7, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	ddeb      	ble.n	800dc70 <Is_Car_Runing+0x10>
		}
	}
	return flag;
 800dc98:	79fb      	ldrb	r3, [r7, #7]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	20001bc4 	.word	0x20001bc4

0800dcac <Periodic_Update_Car_ActualSpeed>:

//周期更新实际值
void Periodic_Update_Car_ActualSpeed()
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
	UpdateAllMotorSpeed();
 800dcb2:	f7ff fc97 	bl	800d5e4 <UpdateAllMotorSpeed>

	//根据电机状态 修正已停止电机的速度
	for (int motor = 0; motor < Motor_Number; ++motor)
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
 800dcba:	e01a      	b.n	800dcf2 <Periodic_Update_Car_ActualSpeed+0x46>
	{
		if (Motor_States[motor] == Motor_Stop && Motor_Actual_Speeds[motor] != 0)
 800dcbc:	4a11      	ldr	r2, [pc, #68]	; (800dd04 <Periodic_Update_Car_ActualSpeed+0x58>)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d111      	bne.n	800dcec <Periodic_Update_Car_ActualSpeed+0x40>
 800dcc8:	4a0f      	ldr	r2, [pc, #60]	; (800dd08 <Periodic_Update_Car_ActualSpeed+0x5c>)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	edd3 7a00 	vldr	s15, [r3]
 800dcd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcdc:	d006      	beq.n	800dcec <Periodic_Update_Car_ActualSpeed+0x40>
		{
			Motor_Actual_Speeds[motor] = 0;
 800dcde:	4a0a      	ldr	r2, [pc, #40]	; (800dd08 <Periodic_Update_Car_ActualSpeed+0x5c>)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	f04f 0200 	mov.w	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
	for (int motor = 0; motor < Motor_Number; ++motor)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	607b      	str	r3, [r7, #4]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	dde1      	ble.n	800dcbc <Periodic_Update_Car_ActualSpeed+0x10>
		}
	}
}
 800dcf8:	bf00      	nop
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	200001cc 	.word	0x200001cc
 800dd08:	20001b34 	.word	0x20001b34

0800dd0c <Set_Motor_ExpectedSpeed>:

//跳过计算 直接设置某个轮子速度
//只有关闭巡线才能生效
void Set_Motor_ExpectedSpeed(Motor_Name motor, float speed)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	4603      	mov	r3, r0
 800dd14:	ed87 0a00 	vstr	s0, [r7]
 800dd18:	71fb      	strb	r3, [r7, #7]
	Motor_Expected_Speeds[motor] = speed;
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	4a05      	ldr	r2, [pc, #20]	; (800dd34 <Set_Motor_ExpectedSpeed+0x28>)
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	683a      	ldr	r2, [r7, #0]
 800dd24:	601a      	str	r2, [r3, #0]
}
 800dd26:	bf00      	nop
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20001bc4 	.word	0x20001bc4

0800dd38 <Transform_AxisSpeed>:

//计算速度并保存
void Transform_AxisSpeed()
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
	Motor_Expected_Speeds[2] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 800dd3e:	4b50      	ldr	r3, [pc, #320]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd40:	ed93 7a00 	vldr	s14, [r3]
 800dd44:	4b4e      	ldr	r3, [pc, #312]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd46:	edd3 7a02 	vldr	s15, [r3, #8]
 800dd4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd4e:	4b4d      	ldr	r3, [pc, #308]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800dd50:	edc3 7a02 	vstr	s15, [r3, #8]
	Motor_Expected_Speeds[0] = (Motor_Expected_Axis_Speeds[Axis_X] - Motor_Expected_Axis_Speeds[Axis_Z]);
 800dd54:	4b4a      	ldr	r3, [pc, #296]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd56:	ed93 7a00 	vldr	s14, [r3]
 800dd5a:	4b49      	ldr	r3, [pc, #292]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd5c:	edd3 7a02 	vldr	s15, [r3, #8]
 800dd60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd64:	4b47      	ldr	r3, [pc, #284]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800dd66:	edc3 7a00 	vstr	s15, [r3]
	Motor_Expected_Speeds[1] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 800dd6a:	4b45      	ldr	r3, [pc, #276]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd6c:	ed93 7a00 	vldr	s14, [r3]
 800dd70:	4b43      	ldr	r3, [pc, #268]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd72:	edd3 7a02 	vldr	s15, [r3, #8]
 800dd76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd7a:	4b42      	ldr	r3, [pc, #264]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800dd7c:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Speeds[3] = (Motor_Expected_Axis_Speeds[Axis_X] + Motor_Expected_Axis_Speeds[Axis_Z]);
 800dd80:	4b3f      	ldr	r3, [pc, #252]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd82:	ed93 7a00 	vldr	s14, [r3]
 800dd86:	4b3e      	ldr	r3, [pc, #248]	; (800de80 <Transform_AxisSpeed+0x148>)
 800dd88:	edd3 7a02 	vldr	s15, [r3, #8]
 800dd8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd90:	4b3c      	ldr	r3, [pc, #240]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800dd92:	edc3 7a03 	vstr	s15, [r3, #12]

	//输出饱和
	for (int var = 0; var < Motor_Number; ++var)
 800dd96:	2300      	movs	r3, #0
 800dd98:	607b      	str	r3, [r7, #4]
 800dd9a:	e067      	b.n	800de6c <Transform_AxisSpeed+0x134>
	{
		if (Motor_Expected_Speeds[var] < 0)
 800dd9c:	4a39      	ldr	r2, [pc, #228]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	edd3 7a00 	vldr	s15, [r3]
 800dda8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	d527      	bpl.n	800de02 <Transform_AxisSpeed+0xca>
		{
			if (Motor_Expected_Speeds[var] < -Motor_Expected_Speed_Max)
 800ddb2:	4a34      	ldr	r2, [pc, #208]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	edd3 7a00 	vldr	s15, [r3]
 800ddbe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800de88 <Transform_AxisSpeed+0x150>
 800ddc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddca:	d506      	bpl.n	800ddda <Transform_AxisSpeed+0xa2>
			{
				Motor_Expected_Speeds[var] = -Motor_Expected_Speed_Max;
 800ddcc:	4a2d      	ldr	r2, [pc, #180]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	4a2d      	ldr	r2, [pc, #180]	; (800de8c <Transform_AxisSpeed+0x154>)
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	e045      	b.n	800de66 <Transform_AxisSpeed+0x12e>
			}
			else if (Motor_Expected_Speeds[var] > -Motor_Expected_Speed_Min)
 800ddda:	4a2a      	ldr	r2, [pc, #168]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	edd3 7a00 	vldr	s15, [r3]
 800dde6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800ddea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf2:	dd38      	ble.n	800de66 <Transform_AxisSpeed+0x12e>
			{
				Motor_Expected_Speeds[var] = -Motor_Expected_Speed_Min;
 800ddf4:	4a23      	ldr	r2, [pc, #140]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	4a24      	ldr	r2, [pc, #144]	; (800de90 <Transform_AxisSpeed+0x158>)
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	e031      	b.n	800de66 <Transform_AxisSpeed+0x12e>
			}
		}
		else if (Motor_Expected_Speeds[var] > 0)
 800de02:	4a20      	ldr	r2, [pc, #128]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	edd3 7a00 	vldr	s15, [r3]
 800de0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de16:	dd26      	ble.n	800de66 <Transform_AxisSpeed+0x12e>
		{
			if (Motor_Expected_Speeds[var] > Motor_Expected_Speed_Max)
 800de18:	4a1a      	ldr	r2, [pc, #104]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	edd3 7a00 	vldr	s15, [r3]
 800de24:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800de94 <Transform_AxisSpeed+0x15c>
 800de28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de30:	dd06      	ble.n	800de40 <Transform_AxisSpeed+0x108>
			{
				Motor_Expected_Speeds[var] = Motor_Expected_Speed_Max;
 800de32:	4a14      	ldr	r2, [pc, #80]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <Transform_AxisSpeed+0x160>)
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	e012      	b.n	800de66 <Transform_AxisSpeed+0x12e>
			}
			else if (Motor_Expected_Speeds[var] < Motor_Expected_Speed_Min)
 800de40:	4a10      	ldr	r2, [pc, #64]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	edd3 7a00 	vldr	s15, [r3]
 800de4c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800de50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de58:	d505      	bpl.n	800de66 <Transform_AxisSpeed+0x12e>
			{
				Motor_Expected_Speeds[var] = Motor_Expected_Speed_Min;
 800de5a:	4a0a      	ldr	r2, [pc, #40]	; (800de84 <Transform_AxisSpeed+0x14c>)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	4413      	add	r3, r2
 800de62:	4a0e      	ldr	r2, [pc, #56]	; (800de9c <Transform_AxisSpeed+0x164>)
 800de64:	601a      	str	r2, [r3, #0]
	for (int var = 0; var < Motor_Number; ++var)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3301      	adds	r3, #1
 800de6a:	607b      	str	r3, [r7, #4]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b03      	cmp	r3, #3
 800de70:	dd94      	ble.n	800dd9c <Transform_AxisSpeed+0x64>
			}
		}
	}
}
 800de72:	bf00      	nop
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	20001bd4 	.word	0x20001bd4
 800de84:	20001bc4 	.word	0x20001bc4
 800de88:	c2a00000 	.word	0xc2a00000
 800de8c:	c2a00000 	.word	0xc2a00000
 800de90:	c0a00000 	.word	0xc0a00000
 800de94:	42a00000 	.word	0x42a00000
 800de98:	42a00000 	.word	0x42a00000
 800de9c:	40a00000 	.word	0x40a00000

0800dea0 <AddCarSpeed>:

//在当前速度的基础上添加 速度
void AddCarSpeed(float vx, float vy, float vz)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	ed87 0a03 	vstr	s0, [r7, #12]
 800deaa:	edc7 0a02 	vstr	s1, [r7, #8]
 800deae:	ed87 1a01 	vstr	s2, [r7, #4]
	Motor_Expected_Axis_Speeds[Axis_X] += vx;
 800deb2:	4b12      	ldr	r3, [pc, #72]	; (800defc <AddCarSpeed+0x5c>)
 800deb4:	ed93 7a00 	vldr	s14, [r3]
 800deb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800debc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dec0:	4b0e      	ldr	r3, [pc, #56]	; (800defc <AddCarSpeed+0x5c>)
 800dec2:	edc3 7a00 	vstr	s15, [r3]
	Motor_Expected_Axis_Speeds[Axis_Y] += vy;
 800dec6:	4b0d      	ldr	r3, [pc, #52]	; (800defc <AddCarSpeed+0x5c>)
 800dec8:	ed93 7a01 	vldr	s14, [r3, #4]
 800decc:	edd7 7a02 	vldr	s15, [r7, #8]
 800ded0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ded4:	4b09      	ldr	r3, [pc, #36]	; (800defc <AddCarSpeed+0x5c>)
 800ded6:	edc3 7a01 	vstr	s15, [r3, #4]
	Motor_Expected_Axis_Speeds[Axis_Z] += vz;
 800deda:	4b08      	ldr	r3, [pc, #32]	; (800defc <AddCarSpeed+0x5c>)
 800dedc:	ed93 7a02 	vldr	s14, [r3, #8]
 800dee0:	edd7 7a01 	vldr	s15, [r7, #4]
 800dee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dee8:	4b04      	ldr	r3, [pc, #16]	; (800defc <AddCarSpeed+0x5c>)
 800deea:	edc3 7a02 	vstr	s15, [r3, #8]

	Transform_AxisSpeed();
 800deee:	f7ff ff23 	bl	800dd38 <Transform_AxisSpeed>
}
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20001bd4 	.word	0x20001bd4

0800df00 <SetCarSpeed>:

//设置速度
void SetCarSpeed(float vx, float vy, float vz)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	ed87 0a03 	vstr	s0, [r7, #12]
 800df0a:	edc7 0a02 	vstr	s1, [r7, #8]
 800df0e:	ed87 1a01 	vstr	s2, [r7, #4]
	Motor_Expected_Axis_Speeds[0] = vx;
 800df12:	4a07      	ldr	r2, [pc, #28]	; (800df30 <SetCarSpeed+0x30>)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6013      	str	r3, [r2, #0]
	Motor_Expected_Axis_Speeds[1] = vy;
 800df18:	4a05      	ldr	r2, [pc, #20]	; (800df30 <SetCarSpeed+0x30>)
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6053      	str	r3, [r2, #4]
	Motor_Expected_Axis_Speeds[2] = vz;
 800df1e:	4a04      	ldr	r2, [pc, #16]	; (800df30 <SetCarSpeed+0x30>)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6093      	str	r3, [r2, #8]

	Transform_AxisSpeed();
 800df24:	f7ff ff08 	bl	800dd38 <Transform_AxisSpeed>
}
 800df28:	bf00      	nop
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	20001bd4 	.word	0x20001bd4

0800df34 <UpdateInfraredData>:
GPIO_TypeDef *Infrared_GPIO_Ports[Infrared_Number] = { Infrared1_GPIO_Port, Infrared2_GPIO_Port, Infrared3_GPIO_Port, Infrared4_GPIO_Port };
uint16_t Infrared_Pins[Infrared_Number] = { Infrared1_Pin, Infrared2_Pin, Infrared3_Pin, Infrared4_Pin };

//获取红外数据
void UpdateInfraredData()
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
	for (int var = 0; var < Infrared_Number; ++var)
 800df3a:	2300      	movs	r3, #0
 800df3c:	607b      	str	r3, [r7, #4]
 800df3e:	e01a      	b.n	800df76 <UpdateInfraredData+0x42>
	{
		Infrared_Datas[var] = HAL_GPIO_ReadPin(Infrared_GPIO_Ports[var], Infrared_Pins[var]) == GPIO_PIN_RESET;
 800df40:	4a11      	ldr	r2, [pc, #68]	; (800df88 <UpdateInfraredData+0x54>)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800df48:	4910      	ldr	r1, [pc, #64]	; (800df8c <UpdateInfraredData+0x58>)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800df50:	4619      	mov	r1, r3
 800df52:	4610      	mov	r0, r2
 800df54:	f7f6 fa9e 	bl	8004494 <HAL_GPIO_ReadPin>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	bf0c      	ite	eq
 800df5e:	2301      	moveq	r3, #1
 800df60:	2300      	movne	r3, #0
 800df62:	b2db      	uxtb	r3, r3
 800df64:	4619      	mov	r1, r3
 800df66:	4a0a      	ldr	r2, [pc, #40]	; (800df90 <UpdateInfraredData+0x5c>)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4413      	add	r3, r2
 800df6c:	460a      	mov	r2, r1
 800df6e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < Infrared_Number; ++var)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	3301      	adds	r3, #1
 800df74:	607b      	str	r3, [r7, #4]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b03      	cmp	r3, #3
 800df7a:	dde1      	ble.n	800df40 <UpdateInfraredData+0xc>
	}
}
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	200001d0 	.word	0x200001d0
 800df8c:	200001e0 	.word	0x200001e0
 800df90:	20001be0 	.word	0x20001be0

0800df94 <GetDriveState>:

//获取当前行驶状态
DriveState GetDriveState()
{
 800df94:	b580      	push	{r7, lr}
 800df96:	af00      	add	r7, sp, #0
	UpdateInfraredData();
 800df98:	f7ff ffcc 	bl	800df34 <UpdateInfraredData>

	//判断
	if (Infrared_Datas[Infrared_Left] && Infrared_Datas[Infrared_Right] && Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Center_Right])
 800df9c:	4b32      	ldr	r3, [pc, #200]	; (800e068 <GetDriveState+0xd4>)
 800df9e:	785b      	ldrb	r3, [r3, #1]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00d      	beq.n	800dfc0 <GetDriveState+0x2c>
 800dfa4:	4b30      	ldr	r3, [pc, #192]	; (800e068 <GetDriveState+0xd4>)
 800dfa6:	78db      	ldrb	r3, [r3, #3]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d009      	beq.n	800dfc0 <GetDriveState+0x2c>
 800dfac:	4b2e      	ldr	r3, [pc, #184]	; (800e068 <GetDriveState+0xd4>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d005      	beq.n	800dfc0 <GetDriveState+0x2c>
 800dfb4:	4b2c      	ldr	r3, [pc, #176]	; (800e068 <GetDriveState+0xd4>)
 800dfb6:	789b      	ldrb	r3, [r3, #2]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <GetDriveState+0x2c>
	{
		return DriveState_Intersection;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e050      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Right])
 800dfc0:	4b29      	ldr	r3, [pc, #164]	; (800e068 <GetDriveState+0xd4>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d009      	beq.n	800dfdc <GetDriveState+0x48>
 800dfc8:	4b27      	ldr	r3, [pc, #156]	; (800e068 <GetDriveState+0xd4>)
 800dfca:	789b      	ldrb	r3, [r3, #2]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d005      	beq.n	800dfdc <GetDriveState+0x48>
 800dfd0:	4b25      	ldr	r3, [pc, #148]	; (800e068 <GetDriveState+0xd4>)
 800dfd2:	78db      	ldrb	r3, [r3, #3]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <GetDriveState+0x48>
	{
		return DriveState_Turn_Right;
 800dfd8:	2308      	movs	r3, #8
 800dfda:	e042      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Center_Left] && Infrared_Datas[Infrared_Left])
 800dfdc:	4b22      	ldr	r3, [pc, #136]	; (800e068 <GetDriveState+0xd4>)
 800dfde:	789b      	ldrb	r3, [r3, #2]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d009      	beq.n	800dff8 <GetDriveState+0x64>
 800dfe4:	4b20      	ldr	r3, [pc, #128]	; (800e068 <GetDriveState+0xd4>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d005      	beq.n	800dff8 <GetDriveState+0x64>
 800dfec:	4b1e      	ldr	r3, [pc, #120]	; (800e068 <GetDriveState+0xd4>)
 800dfee:	785b      	ldrb	r3, [r3, #1]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <GetDriveState+0x64>
	{
		return DriveState_Turn_Left;
 800dff4:	2307      	movs	r3, #7
 800dff6:	e034      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Right])
 800dff8:	4b1b      	ldr	r3, [pc, #108]	; (800e068 <GetDriveState+0xd4>)
 800dffa:	78db      	ldrb	r3, [r3, #3]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <GetDriveState+0x70>
	{
		return DriveState_Sharp_Left;
 800e000:	2304      	movs	r3, #4
 800e002:	e02e      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Left])
 800e004:	4b18      	ldr	r3, [pc, #96]	; (800e068 <GetDriveState+0xd4>)
 800e006:	785b      	ldrb	r3, [r3, #1]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <GetDriveState+0x7c>
	{
		return DriveState_Sharp_Right;
 800e00c:	2305      	movs	r3, #5
 800e00e:	e028      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] == 0 && Infrared_Datas[Infrared_Center_Right] == 0 && Infrared_Datas[Infrared_Left] == 0 && Infrared_Datas[Infrared_Right] == 0)
 800e010:	4b15      	ldr	r3, [pc, #84]	; (800e068 <GetDriveState+0xd4>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10d      	bne.n	800e034 <GetDriveState+0xa0>
 800e018:	4b13      	ldr	r3, [pc, #76]	; (800e068 <GetDriveState+0xd4>)
 800e01a:	789b      	ldrb	r3, [r3, #2]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d109      	bne.n	800e034 <GetDriveState+0xa0>
 800e020:	4b11      	ldr	r3, [pc, #68]	; (800e068 <GetDriveState+0xd4>)
 800e022:	785b      	ldrb	r3, [r3, #1]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d105      	bne.n	800e034 <GetDriveState+0xa0>
 800e028:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <GetDriveState+0xd4>)
 800e02a:	78db      	ldrb	r3, [r3, #3]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <GetDriveState+0xa0>
	{
		return DriveState_Derailment;
 800e030:	2306      	movs	r3, #6
 800e032:	e016      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Left] == 0)
 800e034:	4b0c      	ldr	r3, [pc, #48]	; (800e068 <GetDriveState+0xd4>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <GetDriveState+0xac>
	{
		return DriveState_Left;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e010      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] == 0)
 800e040:	4b09      	ldr	r3, [pc, #36]	; (800e068 <GetDriveState+0xd4>)
 800e042:	789b      	ldrb	r3, [r3, #2]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d101      	bne.n	800e04c <GetDriveState+0xb8>
	{
		return DriveState_Right;
 800e048:	2302      	movs	r3, #2
 800e04a:	e00a      	b.n	800e062 <GetDriveState+0xce>
	}
	else if (Infrared_Datas[Infrared_Center_Right] && Infrared_Datas[Infrared_Center_Left])
 800e04c:	4b06      	ldr	r3, [pc, #24]	; (800e068 <GetDriveState+0xd4>)
 800e04e:	789b      	ldrb	r3, [r3, #2]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d005      	beq.n	800e060 <GetDriveState+0xcc>
 800e054:	4b04      	ldr	r3, [pc, #16]	; (800e068 <GetDriveState+0xd4>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <GetDriveState+0xcc>
	{
		return DriveState_Normal;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e000      	b.n	800e062 <GetDriveState+0xce>
	}
	else
	{
		return DriveState_Undefined;
 800e060:	2309      	movs	r3, #9
	}
}
 800e062:	4618      	mov	r0, r3
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	20001be0 	.word	0x20001be0

0800e06c <Init_FATFS>:
FATFS fs; /* FatFs文件系统对象 */
FIL file; /* 文件对象 */
FRESULT f_res; /* 文件操作结果 */

void Init_FATFS()
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
	FATFS_LinkDriver(&SD_Driver, SDPath);
 800e070:	4909      	ldr	r1, [pc, #36]	; (800e098 <Init_FATFS+0x2c>)
 800e072:	480a      	ldr	r0, [pc, #40]	; (800e09c <Init_FATFS+0x30>)
 800e074:	f7fd fe00 	bl	800bc78 <FATFS_LinkDriver>

	//在SD卡挂载文件系统，文件系统挂载时会对SD卡初始化
	f_res = f_mount(&fs, (TCHAR const*) SDPath, 1);
 800e078:	2201      	movs	r2, #1
 800e07a:	4907      	ldr	r1, [pc, #28]	; (800e098 <Init_FATFS+0x2c>)
 800e07c:	4808      	ldr	r0, [pc, #32]	; (800e0a0 <Init_FATFS+0x34>)
 800e07e:	f7fd fa41 	bl	800b504 <f_mount>
 800e082:	4603      	mov	r3, r0
 800e084:	461a      	mov	r2, r3
 800e086:	4b07      	ldr	r3, [pc, #28]	; (800e0a4 <Init_FATFS+0x38>)
 800e088:	701a      	strb	r2, [r3, #0]
	printf_fatfs_error(f_res);
 800e08a:	4b06      	ldr	r3, [pc, #24]	; (800e0a4 <Init_FATFS+0x38>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 f80a 	bl	800e0a8 <printf_fatfs_error>
}
 800e094:	bf00      	nop
 800e096:	bd80      	pop	{r7, pc}
 800e098:	200011cc 	.word	0x200011cc
 800e09c:	08013f50 	.word	0x08013f50
 800e0a0:	20001be4 	.word	0x20001be4
 800e0a4:	20002034 	.word	0x20002034

0800e0a8 <printf_fatfs_error>:
 * @brief  打印输出信息
 * @param  无
 * @retval 无
 */
void printf_fatfs_error(FRESULT fresult)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	71fb      	strb	r3, [r7, #7]
	switch (fresult)
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	2b13      	cmp	r3, #19
 800e0b6:	f200 80c3 	bhi.w	800e240 <printf_fatfs_error+0x198>
 800e0ba:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <printf_fatfs_error+0x18>)
 800e0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c0:	0800e111 	.word	0x0800e111
 800e0c4:	0800e121 	.word	0x0800e121
 800e0c8:	0800e131 	.word	0x0800e131
 800e0cc:	0800e141 	.word	0x0800e141
 800e0d0:	0800e151 	.word	0x0800e151
 800e0d4:	0800e161 	.word	0x0800e161
 800e0d8:	0800e171 	.word	0x0800e171
 800e0dc:	0800e181 	.word	0x0800e181
 800e0e0:	0800e181 	.word	0x0800e181
 800e0e4:	0800e191 	.word	0x0800e191
 800e0e8:	0800e1a1 	.word	0x0800e1a1
 800e0ec:	0800e1b1 	.word	0x0800e1b1
 800e0f0:	0800e1c1 	.word	0x0800e1c1
 800e0f4:	0800e1d1 	.word	0x0800e1d1
 800e0f8:	0800e1e1 	.word	0x0800e1e1
 800e0fc:	0800e1f1 	.word	0x0800e1f1
 800e100:	0800e201 	.word	0x0800e201
 800e104:	0800e211 	.word	0x0800e211
 800e108:	0800e221 	.word	0x0800e221
 800e10c:	0800e231 	.word	0x0800e231
	{
		case FR_OK:
			printfX("》操作成功。\r\n");
 800e110:	494d      	ldr	r1, [pc, #308]	; (800e248 <printf_fatfs_error+0x1a0>)
 800e112:	484e      	ldr	r0, [pc, #312]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e114:	f001 fdf2 	bl	800fcfc <siprintf>
 800e118:	484c      	ldr	r0, [pc, #304]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e11a:	f000 ff25 	bl	800ef68 <printf_Base>
			break;
 800e11e:	e08f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_DISK_ERR:
			printfX("！！硬件输入输出驱动出错。\r\n");
 800e120:	494b      	ldr	r1, [pc, #300]	; (800e250 <printf_fatfs_error+0x1a8>)
 800e122:	484a      	ldr	r0, [pc, #296]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e124:	f001 fdea 	bl	800fcfc <siprintf>
 800e128:	4848      	ldr	r0, [pc, #288]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e12a:	f000 ff1d 	bl	800ef68 <printf_Base>
			break;
 800e12e:	e087      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_INT_ERR:
			printfX("！！断言错误。\r\n");
 800e130:	4948      	ldr	r1, [pc, #288]	; (800e254 <printf_fatfs_error+0x1ac>)
 800e132:	4846      	ldr	r0, [pc, #280]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e134:	f001 fde2 	bl	800fcfc <siprintf>
 800e138:	4844      	ldr	r0, [pc, #272]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e13a:	f000 ff15 	bl	800ef68 <printf_Base>
			break;
 800e13e:	e07f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_NOT_READY:
			printfX("！！物理设备无法工作。\r\n");
 800e140:	4945      	ldr	r1, [pc, #276]	; (800e258 <printf_fatfs_error+0x1b0>)
 800e142:	4842      	ldr	r0, [pc, #264]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e144:	f001 fdda 	bl	800fcfc <siprintf>
 800e148:	4840      	ldr	r0, [pc, #256]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e14a:	f000 ff0d 	bl	800ef68 <printf_Base>
			break;
 800e14e:	e077      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_NO_FILE:
			printfX("！！无法找到文件。\r\n");
 800e150:	4942      	ldr	r1, [pc, #264]	; (800e25c <printf_fatfs_error+0x1b4>)
 800e152:	483e      	ldr	r0, [pc, #248]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e154:	f001 fdd2 	bl	800fcfc <siprintf>
 800e158:	483c      	ldr	r0, [pc, #240]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e15a:	f000 ff05 	bl	800ef68 <printf_Base>
			break;
 800e15e:	e06f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_NO_PATH:
			printfX("！！无法找到路径。\r\n");
 800e160:	493f      	ldr	r1, [pc, #252]	; (800e260 <printf_fatfs_error+0x1b8>)
 800e162:	483a      	ldr	r0, [pc, #232]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e164:	f001 fdca 	bl	800fcfc <siprintf>
 800e168:	4838      	ldr	r0, [pc, #224]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e16a:	f000 fefd 	bl	800ef68 <printf_Base>
			break;
 800e16e:	e067      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_INVALID_NAME:
			printfX("！！无效的路径名。\r\n");
 800e170:	493c      	ldr	r1, [pc, #240]	; (800e264 <printf_fatfs_error+0x1bc>)
 800e172:	4836      	ldr	r0, [pc, #216]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e174:	f001 fdc2 	bl	800fcfc <siprintf>
 800e178:	4834      	ldr	r0, [pc, #208]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e17a:	f000 fef5 	bl	800ef68 <printf_Base>
			break;
 800e17e:	e05f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_DENIED:
		case FR_EXIST:
			printfX("！！拒绝访问。\r\n");
 800e180:	4939      	ldr	r1, [pc, #228]	; (800e268 <printf_fatfs_error+0x1c0>)
 800e182:	4832      	ldr	r0, [pc, #200]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e184:	f001 fdba 	bl	800fcfc <siprintf>
 800e188:	4830      	ldr	r0, [pc, #192]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e18a:	f000 feed 	bl	800ef68 <printf_Base>
			break;
 800e18e:	e057      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_INVALID_OBJECT:
			printfX("！！无效的文件或路径。\r\n");
 800e190:	4936      	ldr	r1, [pc, #216]	; (800e26c <printf_fatfs_error+0x1c4>)
 800e192:	482e      	ldr	r0, [pc, #184]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e194:	f001 fdb2 	bl	800fcfc <siprintf>
 800e198:	482c      	ldr	r0, [pc, #176]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e19a:	f000 fee5 	bl	800ef68 <printf_Base>
			break;
 800e19e:	e04f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_WRITE_PROTECTED:
			printfX("！！逻辑设备写保护。\r\n");
 800e1a0:	4933      	ldr	r1, [pc, #204]	; (800e270 <printf_fatfs_error+0x1c8>)
 800e1a2:	482a      	ldr	r0, [pc, #168]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1a4:	f001 fdaa 	bl	800fcfc <siprintf>
 800e1a8:	4828      	ldr	r0, [pc, #160]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1aa:	f000 fedd 	bl	800ef68 <printf_Base>
			break;
 800e1ae:	e047      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_INVALID_DRIVE:
			printfX("！！无效的逻辑设备。\r\n");
 800e1b0:	4930      	ldr	r1, [pc, #192]	; (800e274 <printf_fatfs_error+0x1cc>)
 800e1b2:	4826      	ldr	r0, [pc, #152]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1b4:	f001 fda2 	bl	800fcfc <siprintf>
 800e1b8:	4824      	ldr	r0, [pc, #144]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1ba:	f000 fed5 	bl	800ef68 <printf_Base>
			break;
 800e1be:	e03f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_NOT_ENABLED:
			printfX("！！无效的工作区。\r\n");
 800e1c0:	492d      	ldr	r1, [pc, #180]	; (800e278 <printf_fatfs_error+0x1d0>)
 800e1c2:	4822      	ldr	r0, [pc, #136]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1c4:	f001 fd9a 	bl	800fcfc <siprintf>
 800e1c8:	4820      	ldr	r0, [pc, #128]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1ca:	f000 fecd 	bl	800ef68 <printf_Base>
			break;
 800e1ce:	e037      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_NO_FILESYSTEM:
			printfX("！！无效的文件系统。\r\n");
 800e1d0:	492a      	ldr	r1, [pc, #168]	; (800e27c <printf_fatfs_error+0x1d4>)
 800e1d2:	481e      	ldr	r0, [pc, #120]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1d4:	f001 fd92 	bl	800fcfc <siprintf>
 800e1d8:	481c      	ldr	r0, [pc, #112]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1da:	f000 fec5 	bl	800ef68 <printf_Base>
			break;
 800e1de:	e02f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_MKFS_ABORTED:
			printfX("！！因函数参数问题导致f_mkfs函数操作失败。\r\n");
 800e1e0:	4927      	ldr	r1, [pc, #156]	; (800e280 <printf_fatfs_error+0x1d8>)
 800e1e2:	481a      	ldr	r0, [pc, #104]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1e4:	f001 fd8a 	bl	800fcfc <siprintf>
 800e1e8:	4818      	ldr	r0, [pc, #96]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1ea:	f000 febd 	bl	800ef68 <printf_Base>
			break;
 800e1ee:	e027      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_TIMEOUT:
			printfX("！！操作超时。\r\n");
 800e1f0:	4924      	ldr	r1, [pc, #144]	; (800e284 <printf_fatfs_error+0x1dc>)
 800e1f2:	4816      	ldr	r0, [pc, #88]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1f4:	f001 fd82 	bl	800fcfc <siprintf>
 800e1f8:	4814      	ldr	r0, [pc, #80]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e1fa:	f000 feb5 	bl	800ef68 <printf_Base>
			break;
 800e1fe:	e01f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_LOCKED:
			printfX("！！文件被保护。\r\n");
 800e200:	4921      	ldr	r1, [pc, #132]	; (800e288 <printf_fatfs_error+0x1e0>)
 800e202:	4812      	ldr	r0, [pc, #72]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e204:	f001 fd7a 	bl	800fcfc <siprintf>
 800e208:	4810      	ldr	r0, [pc, #64]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e20a:	f000 fead 	bl	800ef68 <printf_Base>
			break;
 800e20e:	e017      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_NOT_ENOUGH_CORE:
			printfX("！！长文件名支持获取堆空间失败。\r\n");
 800e210:	491e      	ldr	r1, [pc, #120]	; (800e28c <printf_fatfs_error+0x1e4>)
 800e212:	480e      	ldr	r0, [pc, #56]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e214:	f001 fd72 	bl	800fcfc <siprintf>
 800e218:	480c      	ldr	r0, [pc, #48]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e21a:	f000 fea5 	bl	800ef68 <printf_Base>
			break;
 800e21e:	e00f      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_TOO_MANY_OPEN_FILES:
			printfX("！！打开太多文件。\r\n");
 800e220:	491b      	ldr	r1, [pc, #108]	; (800e290 <printf_fatfs_error+0x1e8>)
 800e222:	480a      	ldr	r0, [pc, #40]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e224:	f001 fd6a 	bl	800fcfc <siprintf>
 800e228:	4808      	ldr	r0, [pc, #32]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e22a:	f000 fe9d 	bl	800ef68 <printf_Base>
			break;
 800e22e:	e007      	b.n	800e240 <printf_fatfs_error+0x198>
		case FR_INVALID_PARAMETER:
			printfX("！！参数无效。\r\n");
 800e230:	4918      	ldr	r1, [pc, #96]	; (800e294 <printf_fatfs_error+0x1ec>)
 800e232:	4806      	ldr	r0, [pc, #24]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e234:	f001 fd62 	bl	800fcfc <siprintf>
 800e238:	4804      	ldr	r0, [pc, #16]	; (800e24c <printf_fatfs_error+0x1a4>)
 800e23a:	f000 fe95 	bl	800ef68 <printf_Base>
			break;
 800e23e:	bf00      	nop
	}
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	08013be4 	.word	0x08013be4
 800e24c:	200011fc 	.word	0x200011fc
 800e250:	08013bfc 	.word	0x08013bfc
 800e254:	08013c28 	.word	0x08013c28
 800e258:	08013c40 	.word	0x08013c40
 800e25c:	08013c64 	.word	0x08013c64
 800e260:	08013c84 	.word	0x08013c84
 800e264:	08013ca4 	.word	0x08013ca4
 800e268:	08013cc4 	.word	0x08013cc4
 800e26c:	08013cdc 	.word	0x08013cdc
 800e270:	08013d00 	.word	0x08013d00
 800e274:	08013d24 	.word	0x08013d24
 800e278:	08013d48 	.word	0x08013d48
 800e27c:	08013d68 	.word	0x08013d68
 800e280:	08013d8c 	.word	0x08013d8c
 800e284:	08013dcc 	.word	0x08013dcc
 800e288:	08013de4 	.word	0x08013de4
 800e28c:	08013e00 	.word	0x08013e00
 800e290:	08013e34 	.word	0x08013e34
 800e294:	08013e54 	.word	0x08013e54

0800e298 <Periodic_Update_BreathingLights>:
uint8_t LED1_DirInc;
uint16_t LED1_Pulsewidth;

//周期调用 更新呼吸灯
void Periodic_Update_BreathingLights()
{
 800e298:	b480      	push	{r7}
 800e29a:	af00      	add	r7, sp, #0
	if (LED1_DirInc == 0) //脉宽递增
 800e29c:	4b15      	ldr	r3, [pc, #84]	; (800e2f4 <Periodic_Update_BreathingLights+0x5c>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10f      	bne.n	800e2c4 <Periodic_Update_BreathingLights+0x2c>
	{
		LED1_Pulsewidth++;
 800e2a4:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2a6:	881b      	ldrh	r3, [r3, #0]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	4b12      	ldr	r3, [pc, #72]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2ae:	801a      	strh	r2, [r3, #0]
		if (LED1_Pulsewidth >= 999)
 800e2b0:	4b11      	ldr	r3, [pc, #68]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	f240 32e6 	movw	r2, #998	; 0x3e6
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d910      	bls.n	800e2de <Periodic_Update_BreathingLights+0x46>
		{
			LED1_DirInc = 1; //脉宽递减
 800e2bc:	4b0d      	ldr	r3, [pc, #52]	; (800e2f4 <Periodic_Update_BreathingLights+0x5c>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	701a      	strb	r2, [r3, #0]
 800e2c2:	e00c      	b.n	800e2de <Periodic_Update_BreathingLights+0x46>
		}
	}
	else
	{
		LED1_Pulsewidth--;
 800e2c4:	4b0c      	ldr	r3, [pc, #48]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2ce:	801a      	strh	r2, [r3, #0]
		if (LED1_Pulsewidth <= 1)
 800e2d0:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2d2:	881b      	ldrh	r3, [r3, #0]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d802      	bhi.n	800e2de <Periodic_Update_BreathingLights+0x46>
		{
			LED1_DirInc = 0; //脉宽递增
 800e2d8:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <Periodic_Update_BreathingLights+0x5c>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, LED1_Pulsewidth); //设置CCR的
 800e2de:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <Periodic_Update_BreathingLights+0x60>)
 800e2e0:	881a      	ldrh	r2, [r3, #0]
 800e2e2:	4b06      	ldr	r3, [pc, #24]	; (800e2fc <Periodic_Update_BreathingLights+0x64>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e2e8:	bf00      	nop
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	20002035 	.word	0x20002035
 800e2f8:	20002036 	.word	0x20002036
 800e2fc:	200010f4 	.word	0x200010f4

0800e300 <SPI_WriteByte>:
 * @param    TxData 要发送的数据
 * @param    size   发送数据的字节大小
 * @return  0:写入成功,其他:写入失败
 */
uint8_t SPI_WriteByte(uint8_t *TxData, uint16_t size)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	460b      	mov	r3, r1
 800e30a:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
 800e30c:	887a      	ldrh	r2, [r7, #2]
 800e30e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e312:	6879      	ldr	r1, [r7, #4]
 800e314:	4803      	ldr	r0, [pc, #12]	; (800e324 <SPI_WriteByte+0x24>)
 800e316:	f7f8 f973 	bl	8006600 <HAL_SPI_Transmit>
 800e31a:	4603      	mov	r3, r0
	//return HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);

}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20000df8 	.word	0x20000df8

0800e328 <SPI_WriteByte_DMA>:
void SPI_WriteByte_DMA(uint8_t *TxData, uint16_t size)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	807b      	strh	r3, [r7, #2]
	//return HAL_SPI_Transmit(LCD_SPI, TxData, size, 1000);
	HAL_SPI_Transmit_DMA(LCD_SPI, TxData, size);
 800e334:	887b      	ldrh	r3, [r7, #2]
 800e336:	461a      	mov	r2, r3
 800e338:	6879      	ldr	r1, [r7, #4]
 800e33a:	4803      	ldr	r0, [pc, #12]	; (800e348 <SPI_WriteByte_DMA+0x20>)
 800e33c:	f7f8 fa9c 	bl	8006878 <HAL_SPI_Transmit_DMA>

}
 800e340:	bf00      	nop
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	20000df8 	.word	0x20000df8

0800e34c <LCD_Write_Cmd>:
 * @brief   写命令到LCD
 * @param   cmd —— 需要发送的命令
 * @return  none
 */
static void LCD_Write_Cmd(uint8_t cmd)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	4603      	mov	r3, r0
 800e354:	71fb      	strb	r3, [r7, #7]
	LCD_WR_RS(0);
 800e356:	2200      	movs	r2, #0
 800e358:	2140      	movs	r1, #64	; 0x40
 800e35a:	4806      	ldr	r0, [pc, #24]	; (800e374 <LCD_Write_Cmd+0x28>)
 800e35c:	f7f6 f8b2 	bl	80044c4 <HAL_GPIO_WritePin>
	SPI_WriteByte(&cmd, 1);
 800e360:	1dfb      	adds	r3, r7, #7
 800e362:	2101      	movs	r1, #1
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff ffcb 	bl	800e300 <SPI_WriteByte>
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	40021800 	.word	0x40021800

0800e378 <LCD_Write_Data>:
 * @brief   写数据到LCD
 * @param   dat —— 需要发送的数据
 * @return  none
 */
static void LCD_Write_Data(uint8_t dat)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	71fb      	strb	r3, [r7, #7]
	LCD_WR_RS(1);
 800e382:	2201      	movs	r2, #1
 800e384:	2140      	movs	r1, #64	; 0x40
 800e386:	4806      	ldr	r0, [pc, #24]	; (800e3a0 <LCD_Write_Data+0x28>)
 800e388:	f7f6 f89c 	bl	80044c4 <HAL_GPIO_WritePin>
	SPI_WriteByte(&dat, 1);
 800e38c:	1dfb      	adds	r3, r7, #7
 800e38e:	2101      	movs	r1, #1
 800e390:	4618      	mov	r0, r3
 800e392:	f7ff ffb5 	bl	800e300 <SPI_WriteByte>
}
 800e396:	bf00      	nop
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	40021800 	.word	0x40021800

0800e3a4 <LCD_Write_2Bytes>:
 * @brief  写16位的数据（两个字节）到LCD
 * @param   dat —— 需要发送的16bit数据
 * @return  none
 */
void LCD_Write_2Bytes(const uint16_t dat)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2] = { 0 };
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	81bb      	strh	r3, [r7, #12]

	data[0] = dat >> 8;
 800e3b2:	88fb      	ldrh	r3, [r7, #6]
 800e3b4:	0a1b      	lsrs	r3, r3, #8
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	733b      	strb	r3, [r7, #12]
	LCD_Write_Data(data[0]);
 800e3bc:	7b3b      	ldrb	r3, [r7, #12]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7ff ffda 	bl	800e378 <LCD_Write_Data>
	data[1] = dat;
 800e3c4:	88fb      	ldrh	r3, [r7, #6]
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	737b      	strb	r3, [r7, #13]
	LCD_Write_Data(data[1]);
 800e3ca:	7b7b      	ldrb	r3, [r7, #13]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7ff ffd3 	bl	800e378 <LCD_Write_Data>

	//SPI_WriteByte((uint8_t*) data, 2);
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <LCD_Address_Set>:
 * @param   x1,y1   —— 起点坐标
 * @param   x2,y2   —— 终点坐标
 * @return  none
 */
void LCD_Address_Set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800e3da:	b590      	push	{r4, r7, lr}
 800e3dc:	b083      	sub	sp, #12
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	4608      	mov	r0, r1
 800e3e4:	4611      	mov	r1, r2
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	4623      	mov	r3, r4
 800e3ea:	80fb      	strh	r3, [r7, #6]
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	80bb      	strh	r3, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	807b      	strh	r3, [r7, #2]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	803b      	strh	r3, [r7, #0]
	/* 指定X方向操作区域 */
	LCD_Write_Cmd(0x2a);
 800e3f8:	202a      	movs	r0, #42	; 0x2a
 800e3fa:	f7ff ffa7 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(x1 >> 8);
 800e3fe:	88fb      	ldrh	r3, [r7, #6]
 800e400:	0a1b      	lsrs	r3, r3, #8
 800e402:	b29b      	uxth	r3, r3
 800e404:	b2db      	uxtb	r3, r3
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff ffb6 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(x1);
 800e40c:	88fb      	ldrh	r3, [r7, #6]
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff ffb1 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(x2 >> 8);
 800e416:	887b      	ldrh	r3, [r7, #2]
 800e418:	0a1b      	lsrs	r3, r3, #8
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff ffaa 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(x2);
 800e424:	887b      	ldrh	r3, [r7, #2]
 800e426:	b2db      	uxtb	r3, r3
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff ffa5 	bl	800e378 <LCD_Write_Data>

	/* 指定Y方向操作区域 */
	LCD_Write_Cmd(0x2b);
 800e42e:	202b      	movs	r0, #43	; 0x2b
 800e430:	f7ff ff8c 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(y1 >> 8);
 800e434:	88bb      	ldrh	r3, [r7, #4]
 800e436:	0a1b      	lsrs	r3, r3, #8
 800e438:	b29b      	uxth	r3, r3
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7ff ff9b 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(y1);
 800e442:	88bb      	ldrh	r3, [r7, #4]
 800e444:	b2db      	uxtb	r3, r3
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff ff96 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(y2 >> 8);
 800e44c:	883b      	ldrh	r3, [r7, #0]
 800e44e:	0a1b      	lsrs	r3, r3, #8
 800e450:	b29b      	uxth	r3, r3
 800e452:	b2db      	uxtb	r3, r3
 800e454:	4618      	mov	r0, r3
 800e456:	f7ff ff8f 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(y2);
 800e45a:	883b      	ldrh	r3, [r7, #0]
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff ff8a 	bl	800e378 <LCD_Write_Data>

	/* 发送该命令，LCD开始等待接收显存数据 */
	LCD_Write_Cmd(0x2C);
 800e464:	202c      	movs	r0, #44	; 0x2c
 800e466:	f7ff ff71 	bl	800e34c <LCD_Write_Cmd>
}
 800e46a:	bf00      	nop
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd90      	pop	{r4, r7, pc}
	...

0800e474 <LCD_Clear>:
 * @brief   以一种颜色清空LCD屏
 * @param   color —— 清屏颜色(16bit)
 * @return  none
 */
void LCD_Clear(uint16_t color)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	uint8_t data[2] = { 0 };  //color是16bit的，每个像素点需要两个字节的显存
 800e47e:	2300      	movs	r3, #0
 800e480:	813b      	strh	r3, [r7, #8]

	/* 将16bit的color值分开为两个单独的字节 */
	data[0] = color >> 8;
 800e482:	88fb      	ldrh	r3, [r7, #6]
 800e484:	0a1b      	lsrs	r3, r3, #8
 800e486:	b29b      	uxth	r3, r3
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	723b      	strb	r3, [r7, #8]
	data[1] = color;
 800e48c:	88fb      	ldrh	r3, [r7, #6]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	727b      	strb	r3, [r7, #9]

	/* 显存的值需要逐字节写入 */
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 800e492:	2300      	movs	r3, #0
 800e494:	81bb      	strh	r3, [r7, #12]
 800e496:	e00d      	b.n	800e4b4 <LCD_Clear+0x40>
	{
		lcd_buf[j * 2] = data[0];
 800e498:	89bb      	ldrh	r3, [r7, #12]
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	7a39      	ldrb	r1, [r7, #8]
 800e49e:	4a16      	ldr	r2, [pc, #88]	; (800e4f8 <LCD_Clear+0x84>)
 800e4a0:	54d1      	strb	r1, [r2, r3]
		lcd_buf[j * 2 + 1] = data[1];
 800e4a2:	89bb      	ldrh	r3, [r7, #12]
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	7a79      	ldrb	r1, [r7, #9]
 800e4aa:	4a13      	ldr	r2, [pc, #76]	; (800e4f8 <LCD_Clear+0x84>)
 800e4ac:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j < LCD_Buf_Size / 2; j++)
 800e4ae:	89bb      	ldrh	r3, [r7, #12]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	81bb      	strh	r3, [r7, #12]
 800e4b4:	89bb      	ldrh	r3, [r7, #12]
 800e4b6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e4ba:	d3ed      	bcc.n	800e498 <LCD_Clear+0x24>
	}
	/* 指定显存操作地址为全屏幕 */
	LCD_Address_Set(0, 0, LCD_Width - 1, LCD_Height - 1);
 800e4bc:	23ef      	movs	r3, #239	; 0xef
 800e4be:	22ef      	movs	r2, #239	; 0xef
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	f7ff ff89 	bl	800e3da <LCD_Address_Set>
	/* 指定接下来的数据为数据 */
	LCD_WR_RS(1);
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	2140      	movs	r1, #64	; 0x40
 800e4cc:	480b      	ldr	r0, [pc, #44]	; (800e4fc <LCD_Clear+0x88>)
 800e4ce:	f7f5 fff9 	bl	80044c4 <HAL_GPIO_WritePin>
	/* 将显存缓冲区的数据全部写入缓冲区 */
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	81fb      	strh	r3, [r7, #14]
 800e4d6:	e007      	b.n	800e4e8 <LCD_Clear+0x74>
	{
		SPI_WriteByte(lcd_buf, (uint16_t) LCD_Buf_Size);
 800e4d8:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800e4dc:	4806      	ldr	r0, [pc, #24]	; (800e4f8 <LCD_Clear+0x84>)
 800e4de:	f7ff ff0f 	bl	800e300 <SPI_WriteByte>
	for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_Buf_Size); i++)
 800e4e2:	89fb      	ldrh	r3, [r7, #14]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	81fb      	strh	r3, [r7, #14]
 800e4e8:	89fb      	ldrh	r3, [r7, #14]
 800e4ea:	2b63      	cmp	r3, #99	; 0x63
 800e4ec:	d9f4      	bls.n	800e4d8 <LCD_Clear+0x64>
	}
}
 800e4ee:	bf00      	nop
 800e4f0:	bf00      	nop
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	20002038 	.word	0x20002038
 800e4fc:	40021800 	.word	0x40021800

0800e500 <LCD_Init>:
 * @brief   LCD初始化
 * @param   none
 * @return  none
 */
void LCD_Init(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	af00      	add	r7, sp, #0
	/* 初始化和LCD通信的引脚 */
	/* 复位LCD */
	LCD_PWR(0);
 800e504:	2200      	movs	r2, #0
 800e506:	2110      	movs	r1, #16
 800e508:	486a      	ldr	r0, [pc, #424]	; (800e6b4 <LCD_Init+0x1b4>)
 800e50a:	f7f5 ffdb 	bl	80044c4 <HAL_GPIO_WritePin>
	LCD_RST(0);
 800e50e:	2200      	movs	r2, #0
 800e510:	2120      	movs	r1, #32
 800e512:	4868      	ldr	r0, [pc, #416]	; (800e6b4 <LCD_Init+0x1b4>)
 800e514:	f7f5 ffd6 	bl	80044c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800e518:	2064      	movs	r0, #100	; 0x64
 800e51a:	f7f4 fd0f 	bl	8002f3c <HAL_Delay>
	LCD_RST(1);
 800e51e:	2201      	movs	r2, #1
 800e520:	2120      	movs	r1, #32
 800e522:	4864      	ldr	r0, [pc, #400]	; (800e6b4 <LCD_Init+0x1b4>)
 800e524:	f7f5 ffce 	bl	80044c4 <HAL_GPIO_WritePin>

	HAL_Delay(120);
 800e528:	2078      	movs	r0, #120	; 0x78
 800e52a:	f7f4 fd07 	bl	8002f3c <HAL_Delay>

	/* 关闭睡眠模式 */
	LCD_Write_Cmd(0x11);
 800e52e:	2011      	movs	r0, #17
 800e530:	f7ff ff0c 	bl	800e34c <LCD_Write_Cmd>
	HAL_Delay(120);
 800e534:	2078      	movs	r0, #120	; 0x78
 800e536:	f7f4 fd01 	bl	8002f3c <HAL_Delay>

	/* 开始设置显存扫描模式，数据格式等 */
	LCD_Write_Cmd(0x36);
 800e53a:	2036      	movs	r0, #54	; 0x36
 800e53c:	f7ff ff06 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 800e540:	2000      	movs	r0, #0
 800e542:	f7ff ff19 	bl	800e378 <LCD_Write_Data>
	/* RGB 5-6-5-bit格式  */
	LCD_Write_Cmd(0x3A);
 800e546:	203a      	movs	r0, #58	; 0x3a
 800e548:	f7ff ff00 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x65);
 800e54c:	2065      	movs	r0, #101	; 0x65
 800e54e:	f7ff ff13 	bl	800e378 <LCD_Write_Data>
	/* porch 设置 */
	LCD_Write_Cmd(0xB2);
 800e552:	20b2      	movs	r0, #178	; 0xb2
 800e554:	f7ff fefa 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x0C);
 800e558:	200c      	movs	r0, #12
 800e55a:	f7ff ff0d 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 800e55e:	200c      	movs	r0, #12
 800e560:	f7ff ff0a 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 800e564:	2000      	movs	r0, #0
 800e566:	f7ff ff07 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 800e56a:	2033      	movs	r0, #51	; 0x33
 800e56c:	f7ff ff04 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x33);
 800e570:	2033      	movs	r0, #51	; 0x33
 800e572:	f7ff ff01 	bl	800e378 <LCD_Write_Data>
	/* VGH设置 */
	LCD_Write_Cmd(0xB7);
 800e576:	20b7      	movs	r0, #183	; 0xb7
 800e578:	f7ff fee8 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x72);
 800e57c:	2072      	movs	r0, #114	; 0x72
 800e57e:	f7ff fefb 	bl	800e378 <LCD_Write_Data>
	/* VCOM 设置 */
	LCD_Write_Cmd(0xBB);
 800e582:	20bb      	movs	r0, #187	; 0xbb
 800e584:	f7ff fee2 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x3D);
 800e588:	203d      	movs	r0, #61	; 0x3d
 800e58a:	f7ff fef5 	bl	800e378 <LCD_Write_Data>
	/* LCM 设置 */
	LCD_Write_Cmd(0xC0);
 800e58e:	20c0      	movs	r0, #192	; 0xc0
 800e590:	f7ff fedc 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x2C);
 800e594:	202c      	movs	r0, #44	; 0x2c
 800e596:	f7ff feef 	bl	800e378 <LCD_Write_Data>
	/* VDV and VRH 设置 */
	LCD_Write_Cmd(0xC2);
 800e59a:	20c2      	movs	r0, #194	; 0xc2
 800e59c:	f7ff fed6 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	f7ff fee9 	bl	800e378 <LCD_Write_Data>
	/* VRH 设置 */
	LCD_Write_Cmd(0xC3);
 800e5a6:	20c3      	movs	r0, #195	; 0xc3
 800e5a8:	f7ff fed0 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x19);
 800e5ac:	2019      	movs	r0, #25
 800e5ae:	f7ff fee3 	bl	800e378 <LCD_Write_Data>
	/* VDV 设置 */
	LCD_Write_Cmd(0xC4);
 800e5b2:	20c4      	movs	r0, #196	; 0xc4
 800e5b4:	f7ff feca 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 800e5b8:	2020      	movs	r0, #32
 800e5ba:	f7ff fedd 	bl	800e378 <LCD_Write_Data>
	/* 普通模式下显存速率设置 60Mhz */
	LCD_Write_Cmd(0xC6);
 800e5be:	20c6      	movs	r0, #198	; 0xc6
 800e5c0:	f7ff fec4 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 800e5c4:	200f      	movs	r0, #15
 800e5c6:	f7ff fed7 	bl	800e378 <LCD_Write_Data>
	/* 电源控制 */
	LCD_Write_Cmd(0xD0);
 800e5ca:	20d0      	movs	r0, #208	; 0xd0
 800e5cc:	f7ff febe 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0xA4);
 800e5d0:	20a4      	movs	r0, #164	; 0xa4
 800e5d2:	f7ff fed1 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0xA1);
 800e5d6:	20a1      	movs	r0, #161	; 0xa1
 800e5d8:	f7ff fece 	bl	800e378 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE0);
 800e5dc:	20e0      	movs	r0, #224	; 0xe0
 800e5de:	f7ff feb5 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 800e5e2:	20d0      	movs	r0, #208	; 0xd0
 800e5e4:	f7ff fec8 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 800e5e8:	2004      	movs	r0, #4
 800e5ea:	f7ff fec5 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 800e5ee:	200d      	movs	r0, #13
 800e5f0:	f7ff fec2 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 800e5f4:	2011      	movs	r0, #17
 800e5f6:	f7ff febf 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 800e5fa:	2013      	movs	r0, #19
 800e5fc:	f7ff febc 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x2B);
 800e600:	202b      	movs	r0, #43	; 0x2b
 800e602:	f7ff feb9 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 800e606:	203f      	movs	r0, #63	; 0x3f
 800e608:	f7ff feb6 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x54);
 800e60c:	2054      	movs	r0, #84	; 0x54
 800e60e:	f7ff feb3 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x4C);
 800e612:	204c      	movs	r0, #76	; 0x4c
 800e614:	f7ff feb0 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x18);
 800e618:	2018      	movs	r0, #24
 800e61a:	f7ff fead 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x0D);
 800e61e:	200d      	movs	r0, #13
 800e620:	f7ff feaa 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 800e624:	200b      	movs	r0, #11
 800e626:	f7ff fea7 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 800e62a:	201f      	movs	r0, #31
 800e62c:	f7ff fea4 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 800e630:	2023      	movs	r0, #35	; 0x23
 800e632:	f7ff fea1 	bl	800e378 <LCD_Write_Data>
	/* 电压设置 */
	LCD_Write_Cmd(0xE1);
 800e636:	20e1      	movs	r0, #225	; 0xe1
 800e638:	f7ff fe88 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Data(0xD0);
 800e63c:	20d0      	movs	r0, #208	; 0xd0
 800e63e:	f7ff fe9b 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 800e642:	2004      	movs	r0, #4
 800e644:	f7ff fe98 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 800e648:	200c      	movs	r0, #12
 800e64a:	f7ff fe95 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 800e64e:	2011      	movs	r0, #17
 800e650:	f7ff fe92 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x13);
 800e654:	2013      	movs	r0, #19
 800e656:	f7ff fe8f 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 800e65a:	202c      	movs	r0, #44	; 0x2c
 800e65c:	f7ff fe8c 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 800e660:	203f      	movs	r0, #63	; 0x3f
 800e662:	f7ff fe89 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x44);
 800e666:	2044      	movs	r0, #68	; 0x44
 800e668:	f7ff fe86 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x51);
 800e66c:	2051      	movs	r0, #81	; 0x51
 800e66e:	f7ff fe83 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x2F);
 800e672:	202f      	movs	r0, #47	; 0x2f
 800e674:	f7ff fe80 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 800e678:	201f      	movs	r0, #31
 800e67a:	f7ff fe7d 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x1F);
 800e67e:	201f      	movs	r0, #31
 800e680:	f7ff fe7a 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x20);
 800e684:	2020      	movs	r0, #32
 800e686:	f7ff fe77 	bl	800e378 <LCD_Write_Data>
	LCD_Write_Data(0x23);
 800e68a:	2023      	movs	r0, #35	; 0x23
 800e68c:	f7ff fe74 	bl	800e378 <LCD_Write_Data>
	/* 显示开 */
	LCD_Write_Cmd(0x21);
 800e690:	2021      	movs	r0, #33	; 0x21
 800e692:	f7ff fe5b 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Cmd(0x29);
 800e696:	2029      	movs	r0, #41	; 0x29
 800e698:	f7ff fe58 	bl	800e34c <LCD_Write_Cmd>

	/* 清屏为白色 */
	LCD_Clear(WHITE);
 800e69c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e6a0:	f7ff fee8 	bl	800e474 <LCD_Clear>

	/*打开显示*/
	LCD_PWR(1);
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	2110      	movs	r1, #16
 800e6a8:	4802      	ldr	r0, [pc, #8]	; (800e6b4 <LCD_Init+0x1b4>)
 800e6aa:	f7f5 ff0b 	bl	80044c4 <HAL_GPIO_WritePin>
}
 800e6ae:	bf00      	nop
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	40021800 	.word	0x40021800

0800e6b8 <LCD_ShowChar>:
 * @param   size	字体大小(支持16/24/32号字体)
 * @return  none
 * @note		需要font.h字库文件的支持
 */
void LCD_ShowChar(uint16_t x, uint16_t y, char ch, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4604      	mov	r4, r0
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4623      	mov	r3, r4
 800e6c8:	80fb      	strh	r3, [r7, #6]
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	80bb      	strh	r3, [r7, #4]
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	70fb      	strb	r3, [r7, #3]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0, j = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	617b      	str	r3, [r7, #20]
 800e6da:	2300      	movs	r3, #0
 800e6dc:	613b      	str	r3, [r7, #16]
	uint8_t temp = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	73fb      	strb	r3, [r7, #15]
	uint8_t size = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	737b      	strb	r3, [r7, #13]
	uint8_t t = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73bb      	strb	r3, [r7, #14]

	/* 检测显示是否会越界 */
	if ((x > (LCD_Width - font_size / 2)) || (y > (LCD_Height - font_size)))
 800e6ea:	88fa      	ldrh	r2, [r7, #6]
 800e6ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e6f0:	085b      	lsrs	r3, r3, #1
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	f300 8110 	bgt.w	800e91e <LCD_ShowChar+0x266>
 800e6fe:	88ba      	ldrh	r2, [r7, #4]
 800e700:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e704:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800e708:	429a      	cmp	r2, r3
 800e70a:	f300 8108 	bgt.w	800e91e <LCD_ShowChar+0x266>
		return;

	/* 根据字符大小设置显存操作区域 */
	LCD_Address_Set(x, y, x + font_size / 2 - 1, y + font_size - 1);
 800e70e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e712:	085b      	lsrs	r3, r3, #1
 800e714:	b2db      	uxtb	r3, r3
 800e716:	b29a      	uxth	r2, r3
 800e718:	88fb      	ldrh	r3, [r7, #6]
 800e71a:	4413      	add	r3, r2
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	3b01      	subs	r3, #1
 800e720:	b29c      	uxth	r4, r3
 800e722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e726:	b29a      	uxth	r2, r3
 800e728:	88bb      	ldrh	r3, [r7, #4]
 800e72a:	4413      	add	r3, r2
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	3b01      	subs	r3, #1
 800e730:	b29b      	uxth	r3, r3
 800e732:	88b9      	ldrh	r1, [r7, #4]
 800e734:	88f8      	ldrh	r0, [r7, #6]
 800e736:	4622      	mov	r2, r4
 800e738:	f7ff fe4f 	bl	800e3da <LCD_Address_Set>

	/* 计算字符在字库中的偏移值*/
	uint8_t charIndex = ch - ' ';
 800e73c:	78fb      	ldrb	r3, [r7, #3]
 800e73e:	3b20      	subs	r3, #32
 800e740:	733b      	strb	r3, [r7, #12]

	/* 显示16号/32号字体 */
	if ((font_size == 16) || (font_size == 32))
 800e742:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e746:	2b10      	cmp	r3, #16
 800e748:	d003      	beq.n	800e752 <LCD_ShowChar+0x9a>
 800e74a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e74e:	2b20      	cmp	r3, #32
 800e750:	d158      	bne.n	800e804 <LCD_ShowChar+0x14c>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 800e752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e756:	08db      	lsrs	r3, r3, #3
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	461a      	mov	r2, r3
 800e75c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e760:	f003 0307 	and.w	r3, r3, #7
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	bf14      	ite	ne
 800e76a:	2301      	movne	r3, #1
 800e76c:	2300      	moveq	r3, #0
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	4413      	add	r3, r2
 800e772:	b2da      	uxtb	r2, r3
 800e774:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e778:	085b      	lsrs	r3, r3, #1
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	fb12 f303 	smulbb	r3, r2, r3
 800e780:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 800e782:	2300      	movs	r3, #0
 800e784:	617b      	str	r3, [r7, #20]
 800e786:	e038      	b.n	800e7fa <LCD_ShowChar+0x142>
		{
			if (font_size == 16)
 800e788:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e78c:	2b10      	cmp	r3, #16
 800e78e:	d108      	bne.n	800e7a2 <LCD_ShowChar+0xea>
				temp = F16X8[charIndex][i];	//调用1608字体
 800e790:	7b3b      	ldrb	r3, [r7, #12]
 800e792:	4a67      	ldr	r2, [pc, #412]	; (800e930 <LCD_ShowChar+0x278>)
 800e794:	011b      	lsls	r3, r3, #4
 800e796:	441a      	add	r2, r3
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	4413      	add	r3, r2
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	73fb      	strb	r3, [r7, #15]
 800e7a0:	e00f      	b.n	800e7c2 <LCD_ShowChar+0x10a>
			else if (font_size == 32)
 800e7a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e7a6:	2b20      	cmp	r3, #32
 800e7a8:	f040 80bb 	bne.w	800e922 <LCD_ShowChar+0x26a>
				temp = F32X16[charIndex][i];	//调用3216字体
 800e7ac:	7b3a      	ldrb	r2, [r7, #12]
 800e7ae:	4961      	ldr	r1, [pc, #388]	; (800e934 <LCD_ShowChar+0x27c>)
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	011b      	lsls	r3, r3, #4
 800e7b4:	1a9b      	subs	r3, r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	18ca      	adds	r2, r1, r3
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	4413      	add	r3, r2
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	73fb      	strb	r3, [r7, #15]
			else
				return;			//没有的字库

			for (j = 0; j < 8; j++)
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	613b      	str	r3, [r7, #16]
 800e7c6:	e012      	b.n	800e7ee <LCD_ShowChar+0x136>
			{
				if (temp & 0x80)
 800e7c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	da04      	bge.n	800e7da <LCD_ShowChar+0x122>
					LCD_Write_2Bytes(font_color);
 800e7d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff fde6 	bl	800e3a4 <LCD_Write_2Bytes>
 800e7d8:	e003      	b.n	800e7e2 <LCD_ShowChar+0x12a>
				else
					LCD_Write_2Bytes(back_color);
 800e7da:	883b      	ldrh	r3, [r7, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7ff fde1 	bl	800e3a4 <LCD_Write_2Bytes>

				temp <<= 1;
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	613b      	str	r3, [r7, #16]
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2b07      	cmp	r3, #7
 800e7f2:	d9e9      	bls.n	800e7c8 <LCD_ShowChar+0x110>
		for (i = 0; i < size; i++)
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	617b      	str	r3, [r7, #20]
 800e7fa:	7b7b      	ldrb	r3, [r7, #13]
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d3c2      	bcc.n	800e788 <LCD_ShowChar+0xd0>
	if ((font_size == 16) || (font_size == 32))
 800e802:	e091      	b.n	800e928 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 显示12号字体 */
	else if (font_size == 12)
 800e804:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e808:	2b0c      	cmp	r3, #12
 800e80a:	d146      	bne.n	800e89a <LCD_ShowChar+0x1e2>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size / 8 + ((font_size % 8) ? 1 : 0)) * (font_size / 2);
 800e80c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e810:	08db      	lsrs	r3, r3, #3
 800e812:	b2db      	uxtb	r3, r3
 800e814:	461a      	mov	r2, r3
 800e816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e81a:	f003 0307 	and.w	r3, r3, #7
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	bf14      	ite	ne
 800e824:	2301      	movne	r3, #1
 800e826:	2300      	moveq	r3, #0
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	4413      	add	r3, r2
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e832:	085b      	lsrs	r3, r3, #1
 800e834:	b2db      	uxtb	r3, r3
 800e836:	fb12 f303 	smulbb	r3, r2, r3
 800e83a:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 800e83c:	2300      	movs	r3, #0
 800e83e:	617b      	str	r3, [r7, #20]
 800e840:	e026      	b.n	800e890 <LCD_ShowChar+0x1d8>
		{
			temp = F12X6[charIndex][i];
 800e842:	7b3a      	ldrb	r2, [r7, #12]
 800e844:	493c      	ldr	r1, [pc, #240]	; (800e938 <LCD_ShowChar+0x280>)
 800e846:	4613      	mov	r3, r2
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	4413      	add	r3, r2
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	18ca      	adds	r2, r1, r3
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	4413      	add	r3, r2
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	73fb      	strb	r3, [r7, #15]

			for (j = 0; j < 6; j++)
 800e858:	2300      	movs	r3, #0
 800e85a:	613b      	str	r3, [r7, #16]
 800e85c:	e012      	b.n	800e884 <LCD_ShowChar+0x1cc>
			{
				if (temp & 0x80)
 800e85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e862:	2b00      	cmp	r3, #0
 800e864:	da04      	bge.n	800e870 <LCD_ShowChar+0x1b8>
					LCD_Write_2Bytes(font_color);
 800e866:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff fd9b 	bl	800e3a4 <LCD_Write_2Bytes>
 800e86e:	e003      	b.n	800e878 <LCD_ShowChar+0x1c0>
				else
					LCD_Write_2Bytes(back_color);
 800e870:	883b      	ldrh	r3, [r7, #0]
 800e872:	4618      	mov	r0, r3
 800e874:	f7ff fd96 	bl	800e3a4 <LCD_Write_2Bytes>

				temp <<= 1;
 800e878:	7bfb      	ldrb	r3, [r7, #15]
 800e87a:	005b      	lsls	r3, r3, #1
 800e87c:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 6; j++)
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	3301      	adds	r3, #1
 800e882:	613b      	str	r3, [r7, #16]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	2b05      	cmp	r3, #5
 800e888:	d9e9      	bls.n	800e85e <LCD_ShowChar+0x1a6>
		for (i = 0; i < size; i++)
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	3301      	adds	r3, #1
 800e88e:	617b      	str	r3, [r7, #20]
 800e890:	7b7b      	ldrb	r3, [r7, #13]
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	429a      	cmp	r2, r3
 800e896:	d3d4      	bcc.n	800e842 <LCD_ShowChar+0x18a>
 800e898:	e046      	b.n	800e928 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 显示24号字体 */
	else if (font_size == 24)
 800e89a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e89e:	2b18      	cmp	r3, #24
 800e8a0:	d141      	bne.n	800e926 <LCD_ShowChar+0x26e>
	{
		/* 计算字体一个字符对应点阵集所占的字节数 */
		size = (font_size * 16) / 8;
 800e8a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8a6:	005b      	lsls	r3, r3, #1
 800e8a8:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < size; i++)
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	e031      	b.n	800e914 <LCD_ShowChar+0x25c>
		{
			temp = F24X12[charIndex][i];
 800e8b0:	7b3a      	ldrb	r2, [r7, #12]
 800e8b2:	4922      	ldr	r1, [pc, #136]	; (800e93c <LCD_ShowChar+0x284>)
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	005b      	lsls	r3, r3, #1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	011b      	lsls	r3, r3, #4
 800e8bc:	18ca      	adds	r2, r1, r3
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	73fb      	strb	r3, [r7, #15]
			if (i % 2 == 0)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d102      	bne.n	800e8d6 <LCD_ShowChar+0x21e>
				t = 8;
 800e8d0:	2308      	movs	r3, #8
 800e8d2:	73bb      	strb	r3, [r7, #14]
 800e8d4:	e001      	b.n	800e8da <LCD_ShowChar+0x222>
			else
				t = 4;
 800e8d6:	2304      	movs	r3, #4
 800e8d8:	73bb      	strb	r3, [r7, #14]
			for (j = 0; j < t; j++)
 800e8da:	2300      	movs	r3, #0
 800e8dc:	613b      	str	r3, [r7, #16]
 800e8de:	e012      	b.n	800e906 <LCD_ShowChar+0x24e>
			{
				if (temp & 0x80)
 800e8e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	da04      	bge.n	800e8f2 <LCD_ShowChar+0x23a>
					LCD_Write_2Bytes(font_color);
 800e8e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff fd5a 	bl	800e3a4 <LCD_Write_2Bytes>
 800e8f0:	e003      	b.n	800e8fa <LCD_ShowChar+0x242>
				else
					LCD_Write_2Bytes(back_color);
 800e8f2:	883b      	ldrh	r3, [r7, #0]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff fd55 	bl	800e3a4 <LCD_Write_2Bytes>

				temp <<= 1;
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < t; j++)
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	3301      	adds	r3, #1
 800e904:	613b      	str	r3, [r7, #16]
 800e906:	7bbb      	ldrb	r3, [r7, #14]
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d3e8      	bcc.n	800e8e0 <LCD_ShowChar+0x228>
		for (i = 0; i < size; i++)
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	3301      	adds	r3, #1
 800e912:	617b      	str	r3, [r7, #20]
 800e914:	7b7b      	ldrb	r3, [r7, #13]
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d3c9      	bcc.n	800e8b0 <LCD_ShowChar+0x1f8>
 800e91c:	e004      	b.n	800e928 <LCD_ShowChar+0x270>
		return;
 800e91e:	bf00      	nop
 800e920:	e002      	b.n	800e928 <LCD_ShowChar+0x270>
				return;			//没有的字库
 800e922:	bf00      	nop
 800e924:	e000      	b.n	800e928 <LCD_ShowChar+0x270>
			}
		}
	}
	/* 其余字体 */
	else
		return;
 800e926:	bf00      	nop
}
 800e928:	371c      	adds	r7, #28
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd90      	pop	{r4, r7, pc}
 800e92e:	bf00      	nop
 800e930:	08014818 	.word	0x08014818
 800e934:	08015fd8 	.word	0x08015fd8
 800e938:	080143a4 	.word	0x080143a4
 800e93c:	08014e08 	.word	0x08014e08

0800e940 <LCD_ShowCharStr>:
 * @return  none
 * @note		1. 需要font.h字库文件的支持
 * 					2. 超过指定width不显示超过的字符
 */
void LCD_ShowCharStr(uint16_t x, uint16_t y, uint8_t max_width, char *str, uint16_t back_color, uint16_t font_color, uint8_t font_size)
{
 800e940:	b590      	push	{r4, r7, lr}
 800e942:	b087      	sub	sp, #28
 800e944:	af02      	add	r7, sp, #8
 800e946:	607b      	str	r3, [r7, #4]
 800e948:	4603      	mov	r3, r0
 800e94a:	81fb      	strh	r3, [r7, #14]
 800e94c:	460b      	mov	r3, r1
 800e94e:	81bb      	strh	r3, [r7, #12]
 800e950:	4613      	mov	r3, r2
 800e952:	72fb      	strb	r3, [r7, #11]

	max_width += x;
 800e954:	89fb      	ldrh	r3, [r7, #14]
 800e956:	b2da      	uxtb	r2, r3
 800e958:	7afb      	ldrb	r3, [r7, #11]
 800e95a:	4413      	add	r3, r2
 800e95c:	72fb      	strb	r3, [r7, #11]

	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 800e95e:	e01c      	b.n	800e99a <LCD_ShowCharStr+0x5a>
	{
		if (x >= max_width)
 800e960:	7afb      	ldrb	r3, [r7, #11]
 800e962:	b29b      	uxth	r3, r3
 800e964:	89fa      	ldrh	r2, [r7, #14]
 800e966:	429a      	cmp	r2, r3
 800e968:	d220      	bcs.n	800e9ac <LCD_ShowCharStr+0x6c>
		{
			//x方向越界，结束
			break;
		}

		LCD_ShowChar(x, y, *str, back_color, font_color, font_size);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	781a      	ldrb	r2, [r3, #0]
 800e96e:	8c3c      	ldrh	r4, [r7, #32]
 800e970:	89b9      	ldrh	r1, [r7, #12]
 800e972:	89f8      	ldrh	r0, [r7, #14]
 800e974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e978:	9301      	str	r3, [sp, #4]
 800e97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	4623      	mov	r3, r4
 800e980:	f7ff fe9a 	bl	800e6b8 <LCD_ShowChar>
		x += font_size / 2;
 800e984:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e988:	085b      	lsrs	r3, r3, #1
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	89fb      	ldrh	r3, [r7, #14]
 800e990:	4413      	add	r3, r2
 800e992:	81fb      	strh	r3, [r7, #14]
		str++;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	3301      	adds	r3, #1
 800e998:	607b      	str	r3, [r7, #4]
	while ((*str <= '~') && (*str >= ' '))	//判断是否非法字符
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b7e      	cmp	r3, #126	; 0x7e
 800e9a0:	d805      	bhi.n	800e9ae <LCD_ShowCharStr+0x6e>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	2b1f      	cmp	r3, #31
 800e9a8:	d8da      	bhi.n	800e960 <LCD_ShowCharStr+0x20>
	}
}
 800e9aa:	e000      	b.n	800e9ae <LCD_ShowCharStr+0x6e>
			break;
 800e9ac:	bf00      	nop
}
 800e9ae:	bf00      	nop
 800e9b0:	3714      	adds	r7, #20
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd90      	pop	{r4, r7, pc}
	...

0800e9b8 <LCD_Show_Image>:
 * @param   p —— 图片缓存数据起始地址
 * @note		Image2Lcd取模方式：C语言数据/水平扫描/16位真彩色(RGB565)/高位在前		其他的不要选
 * @return  none
 */
void LCD_Show_Image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint8_t *p)
{
 800e9b8:	b590      	push	{r4, r7, lr}
 800e9ba:	b087      	sub	sp, #28
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4608      	mov	r0, r1
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4623      	mov	r3, r4
 800e9c8:	80fb      	strh	r3, [r7, #6]
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	80bb      	strh	r3, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	807b      	strh	r3, [r7, #2]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	803b      	strh	r3, [r7, #0]
	uint32_t img_size = width * height * 2;		//图片所占字节数
 800e9d6:	887b      	ldrh	r3, [r7, #2]
 800e9d8:	883a      	ldrh	r2, [r7, #0]
 800e9da:	fb02 f303 	mul.w	r3, r2, r3
 800e9de:	005b      	lsls	r3, r3, #1
 800e9e0:	60fb      	str	r3, [r7, #12]
	uint32_t remain_size = img_size;									//图片每次发送后剩余的字节数
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	74fb      	strb	r3, [r7, #19]
	uint8_t flag = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	74bb      	strb	r3, [r7, #18]

	/* 错误检测 */
	if (x + width > LCD_Width || y + height > LCD_Height)
 800e9ee:	88fa      	ldrh	r2, [r7, #6]
 800e9f0:	887b      	ldrh	r3, [r7, #2]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	2bf0      	cmp	r3, #240	; 0xf0
 800e9f6:	dc53      	bgt.n	800eaa0 <LCD_Show_Image+0xe8>
 800e9f8:	88ba      	ldrh	r2, [r7, #4]
 800e9fa:	883b      	ldrh	r3, [r7, #0]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	2bf0      	cmp	r3, #240	; 0xf0
 800ea00:	dc4e      	bgt.n	800eaa0 <LCD_Show_Image+0xe8>
	{
		return;
	}

	LCD_Address_Set(x, y, x + width - 1, y + height - 1);
 800ea02:	88fa      	ldrh	r2, [r7, #6]
 800ea04:	887b      	ldrh	r3, [r7, #2]
 800ea06:	4413      	add	r3, r2
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	b29c      	uxth	r4, r3
 800ea0e:	88ba      	ldrh	r2, [r7, #4]
 800ea10:	883b      	ldrh	r3, [r7, #0]
 800ea12:	4413      	add	r3, r2
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	3b01      	subs	r3, #1
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	88b9      	ldrh	r1, [r7, #4]
 800ea1c:	88f8      	ldrh	r0, [r7, #6]
 800ea1e:	4622      	mov	r2, r4
 800ea20:	f7ff fcdb 	bl	800e3da <LCD_Address_Set>

	LCD_WR_RS(1);
 800ea24:	2201      	movs	r2, #1
 800ea26:	2140      	movs	r1, #64	; 0x40
 800ea28:	481f      	ldr	r0, [pc, #124]	; (800eaa8 <LCD_Show_Image+0xf0>)
 800ea2a:	f7f5 fd4b 	bl	80044c4 <HAL_GPIO_WritePin>

	/* SPI每次最大发送2^16 = 65536个数据,图片最大大小为240*240*2 = 115200，会超过此大小，所以设计循环发送算法 */
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 800ea2e:	2300      	movs	r3, #0
 800ea30:	74fb      	strb	r3, [r7, #19]
 800ea32:	e02f      	b.n	800ea94 <LCD_Show_Image+0xdc>
	{
		if (flag != 0)
 800ea34:	7cbb      	ldrb	r3, [r7, #18]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <LCD_Show_Image+0x88>
		{
			//非首次进入 等待传输完成
			delay_us(SPI_DMA_Delay_us);
 800ea3a:	20b4      	movs	r0, #180	; 0xb4
 800ea3c:	f7fd fa14 	bl	800be68 <delay_us>
		}
		if (remain_size / SPI_DMA_Max_Length >= 1)
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea46:	d30f      	bcc.n	800ea68 <LCD_Show_Image+0xb0>
		{
			SPI_WriteByte_DMA((uint8_t*) p, SPI_DMA_Max_Length - 1);
 800ea48:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800ea4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea4e:	f7ff fc6b 	bl	800e328 <SPI_WriteByte_DMA>
			p += SPI_DMA_Max_Length - 1;
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800ea58:	337f      	adds	r3, #127	; 0x7f
 800ea5a:	62bb      	str	r3, [r7, #40]	; 0x28
			remain_size -= SPI_DMA_Max_Length - 1;
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ea62:	3b7f      	subs	r3, #127	; 0x7f
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e010      	b.n	800ea8a <LCD_Show_Image+0xd2>

		}
		else
		{
			SPI_WriteByte_DMA((uint8_t*) p, remain_size % (SPI_DMA_Max_Length - 1));
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	4b10      	ldr	r3, [pc, #64]	; (800eaac <LCD_Show_Image+0xf4>)
 800ea6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ea70:	1ad1      	subs	r1, r2, r3
 800ea72:	0849      	lsrs	r1, r1, #1
 800ea74:	440b      	add	r3, r1
 800ea76:	0b99      	lsrs	r1, r3, #14
 800ea78:	460b      	mov	r3, r1
 800ea7a:	03db      	lsls	r3, r3, #15
 800ea7c:	1a5b      	subs	r3, r3, r1
 800ea7e:	1ad1      	subs	r1, r2, r3
 800ea80:	b28b      	uxth	r3, r1
 800ea82:	4619      	mov	r1, r3
 800ea84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea86:	f7ff fc4f 	bl	800e328 <SPI_WriteByte_DMA>
		}

		flag = 1;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	74bb      	strb	r3, [r7, #18]
	for (i = 0; i <= img_size / SPI_DMA_Max_Length; i++)
 800ea8e:	7cfb      	ldrb	r3, [r7, #19]
 800ea90:	3301      	adds	r3, #1
 800ea92:	74fb      	strb	r3, [r7, #19]
 800ea94:	7cfa      	ldrb	r2, [r7, #19]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	0bdb      	lsrs	r3, r3, #15
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d9ca      	bls.n	800ea34 <LCD_Show_Image+0x7c>
 800ea9e:	e000      	b.n	800eaa2 <LCD_Show_Image+0xea>
		return;
 800eaa0:	bf00      	nop
	}
}
 800eaa2:	371c      	adds	r7, #28
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd90      	pop	{r4, r7, pc}
 800eaa8:	40021800 	.word	0x40021800
 800eaac:	00020005 	.word	0x00020005

0800eab0 <LCD_ShowStringLineX>:
uint16_t LCD_FontColor = WHITE;
uint16_t LCD_BackgroundColor = BLACK;

//显示一行字符串
void LCD_ShowStringLineX(uint8_t line, char *chr, uint8_t size)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af04      	add	r7, sp, #16
 800eab6:	4603      	mov	r3, r0
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	71fb      	strb	r3, [r7, #7]
 800eabc:	4613      	mov	r3, r2
 800eabe:	71bb      	strb	r3, [r7, #6]
	LCD_ShowCharStr(0, line * size, LCD_Width, chr, LCD_BackgroundColor, LCD_FontColor, size);
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	79bb      	ldrb	r3, [r7, #6]
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	fb12 f303 	smulbb	r3, r2, r3
 800eacc:	b298      	uxth	r0, r3
 800eace:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <LCD_ShowStringLineX+0x44>)
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	4a09      	ldr	r2, [pc, #36]	; (800eaf8 <LCD_ShowStringLineX+0x48>)
 800ead4:	8812      	ldrh	r2, [r2, #0]
 800ead6:	79b9      	ldrb	r1, [r7, #6]
 800ead8:	9102      	str	r1, [sp, #8]
 800eada:	9201      	str	r2, [sp, #4]
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	22f0      	movs	r2, #240	; 0xf0
 800eae2:	4601      	mov	r1, r0
 800eae4:	2000      	movs	r0, #0
 800eae6:	f7ff ff2b 	bl	800e940 <LCD_ShowCharStr>
}
 800eaea:	bf00      	nop
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	200024b8 	.word	0x200024b8
 800eaf8:	200001e8 	.word	0x200001e8

0800eafc <LCD_Close>:
//	HAL_Delay(2000);
//	LCD_Clear(BLACK);
}

void LCD_Close()
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0

	LCD_Write_Cmd(0x53);
 800eb00:	2053      	movs	r0, #83	; 0x53
 800eb02:	f7ff fc23 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Cmd(0x28);
 800eb06:	2028      	movs	r0, #40	; 0x28
 800eb08:	f7ff fc20 	bl	800e34c <LCD_Write_Cmd>
	LCD_Write_Cmd(0x10);
 800eb0c:	2010      	movs	r0, #16
 800eb0e:	f7ff fc1d 	bl	800e34c <LCD_Write_Cmd>
	LCD_PWR(0);
 800eb12:	2200      	movs	r2, #0
 800eb14:	2110      	movs	r1, #16
 800eb16:	4805      	ldr	r0, [pc, #20]	; (800eb2c <LCD_Close+0x30>)
 800eb18:	f7f5 fcd4 	bl	80044c4 <HAL_GPIO_WritePin>
	LCD_RST(0);
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	2120      	movs	r1, #32
 800eb20:	4802      	ldr	r0, [pc, #8]	; (800eb2c <LCD_Close+0x30>)
 800eb22:	f7f5 fccf 	bl	80044c4 <HAL_GPIO_WritePin>
}
 800eb26:	bf00      	nop
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	40021800 	.word	0x40021800

0800eb30 <Screen_Init>:
#define ImageBufferLength 115208
uint8_t ImageBuffer[ImageBufferLength];
char ImageNameString[40];

void Screen_Init()
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	af00      	add	r7, sp, #0
#if defined USE_OLED
	OLED_InitX(PuppySauce);
#else
	LCD_Init();
 800eb34:	f7ff fce4 	bl	800e500 <LCD_Init>
#if defined SCREEN_USE_FATFS

	Screen_ShowPicture_Num(0, 0);
 800eb38:	2100      	movs	r1, #0
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f000 f822 	bl	800eb84 <Screen_ShowPicture_Num>
	HAL_Delay(2000);
 800eb40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800eb44:	f7f4 f9fa 	bl	8002f3c <HAL_Delay>
#endif
	Screen_Clear();
 800eb48:	f000 f814 	bl	800eb74 <Screen_Clear>
#endif
}
 800eb4c:	bf00      	nop
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <Screen_ShowStringLine>:
	LCD_Show_Image(x0, y0, length, width, BMP);
#endif
}

void Screen_ShowStringLine(uint8_t line, char *chr, uint8_t size)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	6039      	str	r1, [r7, #0]
 800eb5a:	71fb      	strb	r3, [r7, #7]
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	71bb      	strb	r3, [r7, #6]
#if defined USE_OLED
	OLED_ShowStringLine(line, chr);
#else
	LCD_ShowStringLineX(line, chr, size);
 800eb60:	79ba      	ldrb	r2, [r7, #6]
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff ffa2 	bl	800eab0 <LCD_ShowStringLineX>
#endif
}
 800eb6c:	bf00      	nop
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <Screen_Clear>:

void Screen_Clear()
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	af00      	add	r7, sp, #0
#if defined USE_OLED
	OLED_Clear();
#else
	LCD_Clear(BLACK);
 800eb78:	2000      	movs	r0, #0
 800eb7a:	f7ff fc7b 	bl	800e474 <LCD_Clear>
#endif
}
 800eb7e:	bf00      	nop
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <Screen_ShowPicture_Num>:

void Screen_ShowPicture_Num(uint8_t a, uint8_t b)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	460a      	mov	r2, r1
 800eb8e:	71fb      	strb	r3, [r7, #7]
 800eb90:	4613      	mov	r3, r2
 800eb92:	71bb      	strb	r3, [r7, #6]
			break;
		default:
			break;
	}
#else
	switch (a)
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d002      	beq.n	800eba0 <Screen_ShowPicture_Num+0x1c>
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d004      	beq.n	800eba8 <Screen_ShowPicture_Num+0x24>
		case 1:
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
			Screen_ShowFileImage(ImageNameString);
			break;
		default:
			break;
 800eb9e:	e00d      	b.n	800ebbc <Screen_ShowPicture_Num+0x38>
			Screen_ShowFileImage("Images/PuppySauce.bmp");
 800eba0:	4808      	ldr	r0, [pc, #32]	; (800ebc4 <Screen_ShowPicture_Num+0x40>)
 800eba2:	f000 f81b 	bl	800ebdc <Screen_ShowFileImage>
			break;
 800eba6:	e009      	b.n	800ebbc <Screen_ShowPicture_Num+0x38>
			sprintf(ImageNameString, "Images/miku/image%03d.bmp", b);
 800eba8:	79bb      	ldrb	r3, [r7, #6]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	4906      	ldr	r1, [pc, #24]	; (800ebc8 <Screen_ShowPicture_Num+0x44>)
 800ebae:	4807      	ldr	r0, [pc, #28]	; (800ebcc <Screen_ShowPicture_Num+0x48>)
 800ebb0:	f001 f8a4 	bl	800fcfc <siprintf>
			Screen_ShowFileImage(ImageNameString);
 800ebb4:	4805      	ldr	r0, [pc, #20]	; (800ebcc <Screen_ShowPicture_Num+0x48>)
 800ebb6:	f000 f811 	bl	800ebdc <Screen_ShowFileImage>
			break;
 800ebba:	bf00      	nop
	}
#endif
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	08013e6c 	.word	0x08013e6c
 800ebc8:	08013e84 	.word	0x08013e84
 800ebcc:	200024bc 	.word	0x200024bc

0800ebd0 <Screen_Close>:

void Screen_Close()
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	af00      	add	r7, sp, #0
#if defined USE_OLED

#else
	LCD_Close();
 800ebd4:	f7ff ff92 	bl	800eafc <LCD_Close>
#endif
}
 800ebd8:	bf00      	nop
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <Screen_ShowFileImage>:
#define  readRowNum 15
BYTE pColorData[960 * readRowNum]; /* 一行真彩色数据缓存 240 * 2 = 480 */
uint8_t ImageTransform_Buffer[480 * readRowNum];

void Screen_ShowFileImage(const char *fileName)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b09c      	sub	sp, #112	; 0x70
 800ebe0:	af02      	add	r7, sp, #8
 800ebe2:	6078      	str	r0, [r7, #4]

	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	WORD fileType;
	unsigned int read_num;
	f_res = f_open(&file, fileName, FA_OPEN_EXISTING | FA_READ);
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	6879      	ldr	r1, [r7, #4]
 800ebe8:	487c      	ldr	r0, [pc, #496]	; (800eddc <Screen_ShowFileImage+0x200>)
 800ebea:	f7fc fccf 	bl	800b58c <f_open>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	4b7b      	ldr	r3, [pc, #492]	; (800ede0 <Screen_ShowFileImage+0x204>)
 800ebf4:	701a      	strb	r2, [r3, #0]
	/*-------------------------------------------------------------------------------------------------------*/
	if (f_res == FR_OK)
 800ebf6:	4b7a      	ldr	r3, [pc, #488]	; (800ede0 <Screen_ShowFileImage+0x204>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d124      	bne.n	800ec48 <Screen_ShowFileImage+0x6c>
	{
		//printfX("打开文件成功\r\n");

		/* 读取文件头信息  两个字节*/
		f_read(&file, &fileType, sizeof(WORD), &read_num);
 800ebfe:	f107 0308 	add.w	r3, r7, #8
 800ec02:	f107 010e 	add.w	r1, r7, #14
 800ec06:	2202      	movs	r2, #2
 800ec08:	4874      	ldr	r0, [pc, #464]	; (800eddc <Screen_ShowFileImage+0x200>)
 800ec0a:	f7fc fd44 	bl	800b696 <f_read>

		/* 判断是不是bmp文件 "BM"*/
		if (fileType != 0x4d42)
 800ec0e:	89fb      	ldrh	r3, [r7, #14]
 800ec10:	f644 5242 	movw	r2, #19778	; 0x4d42
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d006      	beq.n	800ec26 <Screen_ShowFileImage+0x4a>
		{
			printfX("这不是一个 .bmp 文件!\r\n");
 800ec18:	4972      	ldr	r1, [pc, #456]	; (800ede4 <Screen_ShowFileImage+0x208>)
 800ec1a:	4873      	ldr	r0, [pc, #460]	; (800ede8 <Screen_ShowFileImage+0x20c>)
 800ec1c:	f001 f86e 	bl	800fcfc <siprintf>
 800ec20:	4871      	ldr	r0, [pc, #452]	; (800ede8 <Screen_ShowFileImage+0x20c>)
 800ec22:	f000 f9a1 	bl	800ef68 <printf_Base>
		{
			//printfX("这是一个 .bmp 文件\r\n");
		}

		/* 读取BMP文件头信息*/
		f_read(&file, &bitHead, sizeof(tagBITMAPFILEHEADER), &read_num);
 800ec26:	f107 0308 	add.w	r3, r7, #8
 800ec2a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ec2e:	220c      	movs	r2, #12
 800ec30:	486a      	ldr	r0, [pc, #424]	; (800eddc <Screen_ShowFileImage+0x200>)
 800ec32:	f7fc fd30 	bl	800b696 <f_read>
		//showBmpHead(&bitHead);

		/* 读取位图信息头信息 */
		f_read(&file, &bitInfoHead, sizeof(BITMAPINFOHEADER), &read_num);
 800ec36:	f107 0308 	add.w	r3, r7, #8
 800ec3a:	f107 0110 	add.w	r1, r7, #16
 800ec3e:	2228      	movs	r2, #40	; 0x28
 800ec40:	4866      	ldr	r0, [pc, #408]	; (800eddc <Screen_ShowFileImage+0x200>)
 800ec42:	f7fc fd28 	bl	800b696 <f_read>
 800ec46:	e009      	b.n	800ec5c <Screen_ShowFileImage+0x80>
		//showBmpInforHead(&bitInfoHead);
	}
	else
	{
		printfX("打开文件失败!错误代码：f_res = %d \r\n", f_res);
 800ec48:	4b65      	ldr	r3, [pc, #404]	; (800ede0 <Screen_ShowFileImage+0x204>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4967      	ldr	r1, [pc, #412]	; (800edec <Screen_ShowFileImage+0x210>)
 800ec50:	4865      	ldr	r0, [pc, #404]	; (800ede8 <Screen_ShowFileImage+0x20c>)
 800ec52:	f001 f853 	bl	800fcfc <siprintf>
 800ec56:	4864      	ldr	r0, [pc, #400]	; (800ede8 <Screen_ShowFileImage+0x20c>)
 800ec58:	f000 f986 	bl	800ef68 <printf_Base>
	}
	/*-------------------------------------------------------------------------------------------------------*/
	width = 240;
 800ec5c:	23f0      	movs	r3, #240	; 0xf0
 800ec5e:	65bb      	str	r3, [r7, #88]	; 0x58
	height = 240;
 800ec60:	23f0      	movs	r3, #240	; 0xf0
 800ec62:	657b      	str	r3, [r7, #84]	; 0x54
	uint16_t temp = 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int row, m;
	/* 计算位图的实际宽度并确保它为32的倍数	*/
	l_width = WIDTHBYTES(width * bitInfoHead.biBitCount);
 800ec6a:	8bfb      	ldrh	r3, [r7, #30]
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec70:	fb02 f303 	mul.w	r3, r2, r3
 800ec74:	331f      	adds	r3, #31
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	da00      	bge.n	800ec7c <Screen_ShowFileImage+0xa0>
 800ec7a:	331f      	adds	r3, #31
 800ec7c:	115b      	asrs	r3, r3, #5
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (l_width > 720)
 800ec82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec84:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800ec88:	dd07      	ble.n	800ec9a <Screen_ShowFileImage+0xbe>
	{
		printfX("\n 本图片太大(%d)，无法在液晶屏上显示 (<=240)\n", l_width);
 800ec8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec8c:	4958      	ldr	r1, [pc, #352]	; (800edf0 <Screen_ShowFileImage+0x214>)
 800ec8e:	4856      	ldr	r0, [pc, #344]	; (800ede8 <Screen_ShowFileImage+0x20c>)
 800ec90:	f001 f834 	bl	800fcfc <siprintf>
 800ec94:	4854      	ldr	r0, [pc, #336]	; (800ede8 <Screen_ShowFileImage+0x20c>)
 800ec96:	f000 f967 	bl	800ef68 <printf_Base>
	}

	for (i = 0; i < height / readRowNum; i++)
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	667b      	str	r3, [r7, #100]	; 0x64
 800ec9e:	e08a      	b.n	800edb6 <Screen_ShowFileImage+0x1da>
	{
		/*从文件的后面读起，BMP文件的原始图像方向为右下角到左上角*/
		f_lseek(&file, bitHead.bfOffBits + (height - (i + 1) * readRowNum) * l_width);
 800eca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eca4:	3301      	adds	r3, #1
 800eca6:	4619      	mov	r1, r3
 800eca8:	011b      	lsls	r3, r3, #4
 800ecaa:	1ac9      	subs	r1, r1, r3
 800ecac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecae:	440b      	add	r3, r1
 800ecb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ecb2:	fb01 f303 	mul.w	r3, r1, r3
 800ecb6:	4413      	add	r3, r2
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4848      	ldr	r0, [pc, #288]	; (800eddc <Screen_ShowFileImage+0x200>)
 800ecbc:	f7fc fe0a 	bl	800b8d4 <f_lseek>
		/* 读取一行bmp的数据到数组pColorData里面 */
		f_read(&file, pColorData, l_width * readRowNum, &read_num);
 800ecc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	011b      	lsls	r3, r3, #4
 800ecc6:	1a9b      	subs	r3, r3, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	f107 0308 	add.w	r3, r7, #8
 800ecce:	4949      	ldr	r1, [pc, #292]	; (800edf4 <Screen_ShowFileImage+0x218>)
 800ecd0:	4842      	ldr	r0, [pc, #264]	; (800eddc <Screen_ShowFileImage+0x200>)
 800ecd2:	f7fc fce0 	bl	800b696 <f_read>

		for (m = 0; m < readRowNum; m++)
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecda:	e056      	b.n	800ed8a <Screen_ShowFileImage+0x1ae>
		{
			for (j = 0; j < width; j++) 											   //一行有效信息
 800ecdc:	2300      	movs	r3, #0
 800ecde:	663b      	str	r3, [r7, #96]	; 0x60
 800ece0:	e04c      	b.n	800ed7c <Screen_ShowFileImage+0x1a0>
			{
				k = j * 3 + m * width * 3;																	 //一行中第K个像素的起点
 800ece2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ece4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ece6:	fb03 f202 	mul.w	r2, r3, r2
 800ecea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecec:	441a      	add	r2, r3
 800ecee:	4613      	mov	r3, r2
 800ecf0:	005b      	lsls	r3, r3, #1
 800ecf2:	4413      	add	r3, r2
 800ecf4:	64bb      	str	r3, [r7, #72]	; 0x48
				row = readRowNum - m - 1;
 800ecf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecf8:	f1c3 030e 	rsb	r3, r3, #14
 800ecfc:	647b      	str	r3, [r7, #68]	; 0x44
				temp = RGB24TORGB16(pColorData[k + 2], pColorData[k + 1], pColorData[k]);
 800ecfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed00:	3302      	adds	r3, #2
 800ed02:	4a3c      	ldr	r2, [pc, #240]	; (800edf4 <Screen_ShowFileImage+0x218>)
 800ed04:	5cd3      	ldrb	r3, [r2, r3]
 800ed06:	08db      	lsrs	r3, r3, #3
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	02db      	lsls	r3, r3, #11
 800ed0c:	b21a      	sxth	r2, r3
 800ed0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed10:	3301      	adds	r3, #1
 800ed12:	4938      	ldr	r1, [pc, #224]	; (800edf4 <Screen_ShowFileImage+0x218>)
 800ed14:	5ccb      	ldrb	r3, [r1, r3]
 800ed16:	089b      	lsrs	r3, r3, #2
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	015b      	lsls	r3, r3, #5
 800ed1c:	b21b      	sxth	r3, r3
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	b21a      	sxth	r2, r3
 800ed22:	4934      	ldr	r1, [pc, #208]	; (800edf4 <Screen_ShowFileImage+0x218>)
 800ed24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed26:	440b      	add	r3, r1
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	08db      	lsrs	r3, r3, #3
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	b21b      	sxth	r3, r3
 800ed30:	4313      	orrs	r3, r2
 800ed32:	b21b      	sxth	r3, r3
 800ed34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				ImageTransform_Buffer[row * 480 + j * 2] = temp >> 8;
 800ed38:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ed3c:	0a1b      	lsrs	r3, r3, #8
 800ed3e:	b299      	uxth	r1, r3
 800ed40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed42:	4613      	mov	r3, r2
 800ed44:	011b      	lsls	r3, r3, #4
 800ed46:	1a9b      	subs	r3, r3, r2
 800ed48:	011b      	lsls	r3, r3, #4
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed4e:	4413      	add	r3, r2
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	b2c9      	uxtb	r1, r1
 800ed54:	4a28      	ldr	r2, [pc, #160]	; (800edf8 <Screen_ShowFileImage+0x21c>)
 800ed56:	54d1      	strb	r1, [r2, r3]
				ImageTransform_Buffer[row * 480 + j * 2 + 1] = temp;
 800ed58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	011b      	lsls	r3, r3, #4
 800ed5e:	1a9b      	subs	r3, r3, r2
 800ed60:	011b      	lsls	r3, r3, #4
 800ed62:	461a      	mov	r2, r3
 800ed64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed66:	4413      	add	r3, r2
 800ed68:	005b      	lsls	r3, r3, #1
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800ed70:	b2d1      	uxtb	r1, r2
 800ed72:	4a21      	ldr	r2, [pc, #132]	; (800edf8 <Screen_ShowFileImage+0x21c>)
 800ed74:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j < width; j++) 											   //一行有效信息
 800ed76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed78:	3301      	adds	r3, #1
 800ed7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ed7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed80:	429a      	cmp	r2, r3
 800ed82:	dbae      	blt.n	800ece2 <Screen_ShowFileImage+0x106>
		for (m = 0; m < readRowNum; m++)
 800ed84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed86:	3301      	adds	r3, #1
 800ed88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed8c:	2b0e      	cmp	r3, #14
 800ed8e:	dda5      	ble.n	800ecdc <Screen_ShowFileImage+0x100>
//				ImageTransform_Buffer[row * 480 + j * 2] = ((pColorData[k + 1] << 1) | pColorData[k] >> 7);
//				ImageTransform_Buffer[row * 480 + j * 2 + 1] = (pColorData[k] & 0x1F) | ((pColorData[k] & 0xE0) << 1);
			}
		}

		LCD_Show_Image(0, i * readRowNum, 240, readRowNum, ImageTransform_Buffer);
 800ed90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	461a      	mov	r2, r3
 800ed96:	0112      	lsls	r2, r2, #4
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	b299      	uxth	r1, r3
 800ed9c:	4b16      	ldr	r3, [pc, #88]	; (800edf8 <Screen_ShowFileImage+0x21c>)
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	230f      	movs	r3, #15
 800eda2:	22f0      	movs	r2, #240	; 0xf0
 800eda4:	2000      	movs	r0, #0
 800eda6:	f7ff fe07 	bl	800e9b8 <LCD_Show_Image>
		delay_us(LCD_File_Disp_Delay_us);
 800edaa:	2028      	movs	r0, #40	; 0x28
 800edac:	f7fd f85c 	bl	800be68 <delay_us>
	for (i = 0; i < height / readRowNum; i++)
 800edb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edb2:	3301      	adds	r3, #1
 800edb4:	667b      	str	r3, [r7, #100]	; 0x64
 800edb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edb8:	4a10      	ldr	r2, [pc, #64]	; (800edfc <Screen_ShowFileImage+0x220>)
 800edba:	fb82 1203 	smull	r1, r2, r2, r3
 800edbe:	441a      	add	r2, r3
 800edc0:	10d2      	asrs	r2, r2, #3
 800edc2:	17db      	asrs	r3, r3, #31
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800edc8:	429a      	cmp	r2, r3
 800edca:	f6ff af69 	blt.w	800eca0 <Screen_ShowFileImage+0xc4>
	}
	// 不再读写，关闭文件 //
	f_close(&file);
 800edce:	4803      	ldr	r0, [pc, #12]	; (800eddc <Screen_ShowFileImage+0x200>)
 800edd0:	f7fc fd68 	bl	800b8a4 <f_close>

	// 注销一个FatFS设备：SD卡 //
	//FATFS_UnLinkDriver(SDPath);

	//printfX("总耗时：%.d ms\n\n", (int )(uwTick - time));
}
 800edd4:	bf00      	nop
 800edd6:	3768      	adds	r7, #104	; 0x68
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20001e10 	.word	0x20001e10
 800ede0:	20002034 	.word	0x20002034
 800ede4:	08013ea0 	.word	0x08013ea0
 800ede8:	200011fc 	.word	0x200011fc
 800edec:	08013ec0 	.word	0x08013ec0
 800edf0:	08013ef0 	.word	0x08013ef0
 800edf4:	200024e4 	.word	0x200024e4
 800edf8:	20005d24 	.word	0x20005d24
 800edfc:	88888889 	.word	0x88888889

0800ee00 <Init_USART>:
uint8_t RxData_Index[UART_Number];
//1 未读 0 已读
uint8_t RxData_Flag[UART_Number];

void Init_USART()
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
	//打开串口接收中断
	for (int var = 0; var < UART_Number; ++var)
 800ee06:	2300      	movs	r3, #0
 800ee08:	607b      	str	r3, [r7, #4]
 800ee0a:	e00d      	b.n	800ee28 <Init_USART+0x28>
	{
		HAL_UART_Receive_IT(UART_Handles[var], &RxData_Buffer[var], 1);
 800ee0c:	4a0a      	ldr	r2, [pc, #40]	; (800ee38 <Init_USART+0x38>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a09      	ldr	r2, [pc, #36]	; (800ee3c <Init_USART+0x3c>)
 800ee18:	4413      	add	r3, r2
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	f7f9 fa38 	bl	8008292 <HAL_UART_Receive_IT>
	for (int var = 0; var < UART_Number; ++var)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3301      	adds	r3, #1
 800ee26:	607b      	str	r3, [r7, #4]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	ddee      	ble.n	800ee0c <Init_USART+0xc>
	}
}
 800ee2e:	bf00      	nop
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	200001ec 	.word	0x200001ec
 800ee3c:	20007994 	.word	0x20007994

0800ee40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73fb      	strb	r3, [r7, #15]
	//判断串口序号
	for (int var = 0; var < UART_Number; ++var)
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	60bb      	str	r3, [r7, #8]
 800ee50:	e00c      	b.n	800ee6c <HAL_UART_RxCpltCallback+0x2c>
	{
		if (huart->Instance == UART_Types[var])
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	4932      	ldr	r1, [pc, #200]	; (800ef20 <HAL_UART_RxCpltCallback+0xe0>)
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d101      	bne.n	800ee66 <HAL_UART_RxCpltCallback+0x26>
		{
			index = var;
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	73fb      	strb	r3, [r7, #15]
	for (int var = 0; var < UART_Number; ++var)
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	60bb      	str	r3, [r7, #8]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	ddef      	ble.n	800ee52 <HAL_UART_RxCpltCallback+0x12>
		}
	}

	//判断结束字符
	if (RxData_Buffer[index] == '\0' || RxData_Buffer[index] == '#' || RxData_Buffer[index] == '\n')
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	4a2b      	ldr	r2, [pc, #172]	; (800ef24 <HAL_UART_RxCpltCallback+0xe4>)
 800ee76:	5cd3      	ldrb	r3, [r2, r3]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d009      	beq.n	800ee90 <HAL_UART_RxCpltCallback+0x50>
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	4a29      	ldr	r2, [pc, #164]	; (800ef24 <HAL_UART_RxCpltCallback+0xe4>)
 800ee80:	5cd3      	ldrb	r3, [r2, r3]
 800ee82:	2b23      	cmp	r3, #35	; 0x23
 800ee84:	d004      	beq.n	800ee90 <HAL_UART_RxCpltCallback+0x50>
 800ee86:	7bfb      	ldrb	r3, [r7, #15]
 800ee88:	4a26      	ldr	r2, [pc, #152]	; (800ef24 <HAL_UART_RxCpltCallback+0xe4>)
 800ee8a:	5cd3      	ldrb	r3, [r2, r3]
 800ee8c:	2b0a      	cmp	r3, #10
 800ee8e:	d116      	bne.n	800eebe <HAL_UART_RxCpltCallback+0x7e>
	{
		RxData[index][RxData_Index[index]++] = '\0';
 800ee90:	7bfa      	ldrb	r2, [r7, #15]
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	4924      	ldr	r1, [pc, #144]	; (800ef28 <HAL_UART_RxCpltCallback+0xe8>)
 800ee96:	5cc9      	ldrb	r1, [r1, r3]
 800ee98:	1c48      	adds	r0, r1, #1
 800ee9a:	b2c4      	uxtb	r4, r0
 800ee9c:	4822      	ldr	r0, [pc, #136]	; (800ef28 <HAL_UART_RxCpltCallback+0xe8>)
 800ee9e:	54c4      	strb	r4, [r0, r3]
 800eea0:	4608      	mov	r0, r1
 800eea2:	4922      	ldr	r1, [pc, #136]	; (800ef2c <HAL_UART_RxCpltCallback+0xec>)
 800eea4:	4613      	mov	r3, r2
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4413      	add	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	440b      	add	r3, r1
 800eeae:	4403      	add	r3, r0
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	701a      	strb	r2, [r3, #0]
		RxData_Flag[index] = RX_UnRead;
 800eeb4:	7bfb      	ldrb	r3, [r7, #15]
 800eeb6:	4a1e      	ldr	r2, [pc, #120]	; (800ef30 <HAL_UART_RxCpltCallback+0xf0>)
 800eeb8:	2101      	movs	r1, #1
 800eeba:	54d1      	strb	r1, [r2, r3]
 800eebc:	e021      	b.n	800ef02 <HAL_UART_RxCpltCallback+0xc2>
	}
	else
	{
		//未读 则清零
		if (RxData_Flag[index] == RX_UnRead)
 800eebe:	7bfb      	ldrb	r3, [r7, #15]
 800eec0:	4a1b      	ldr	r2, [pc, #108]	; (800ef30 <HAL_UART_RxCpltCallback+0xf0>)
 800eec2:	5cd3      	ldrb	r3, [r2, r3]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d107      	bne.n	800eed8 <HAL_UART_RxCpltCallback+0x98>
		{
			RxData_Flag[index] = RX_NoData;
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	4a19      	ldr	r2, [pc, #100]	; (800ef30 <HAL_UART_RxCpltCallback+0xf0>)
 800eecc:	2100      	movs	r1, #0
 800eece:	54d1      	strb	r1, [r2, r3]
			RxData_Index[index] = RX_NoData;
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
 800eed2:	4a15      	ldr	r2, [pc, #84]	; (800ef28 <HAL_UART_RxCpltCallback+0xe8>)
 800eed4:	2100      	movs	r1, #0
 800eed6:	54d1      	strb	r1, [r2, r3]
		}

		//复制数据
		RxData[index][RxData_Index[index]++] = RxData_Buffer[index];
 800eed8:	7bf8      	ldrb	r0, [r7, #15]
 800eeda:	7bfa      	ldrb	r2, [r7, #15]
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
 800eede:	4912      	ldr	r1, [pc, #72]	; (800ef28 <HAL_UART_RxCpltCallback+0xe8>)
 800eee0:	5cc9      	ldrb	r1, [r1, r3]
 800eee2:	1c4c      	adds	r4, r1, #1
 800eee4:	b2e5      	uxtb	r5, r4
 800eee6:	4c10      	ldr	r4, [pc, #64]	; (800ef28 <HAL_UART_RxCpltCallback+0xe8>)
 800eee8:	54e5      	strb	r5, [r4, r3]
 800eeea:	460c      	mov	r4, r1
 800eeec:	4b0d      	ldr	r3, [pc, #52]	; (800ef24 <HAL_UART_RxCpltCallback+0xe4>)
 800eeee:	5c18      	ldrb	r0, [r3, r0]
 800eef0:	490e      	ldr	r1, [pc, #56]	; (800ef2c <HAL_UART_RxCpltCallback+0xec>)
 800eef2:	4613      	mov	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4413      	add	r3, r2
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	440b      	add	r3, r1
 800eefc:	4423      	add	r3, r4
 800eefe:	4602      	mov	r2, r0
 800ef00:	701a      	strb	r2, [r3, #0]
	}

	//打开串口接收中断
	HAL_UART_Receive_IT(UART_Handles[index], &RxData_Buffer[index], 1);
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	4a0b      	ldr	r2, [pc, #44]	; (800ef34 <HAL_UART_RxCpltCallback+0xf4>)
 800ef06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
 800ef0c:	4a05      	ldr	r2, [pc, #20]	; (800ef24 <HAL_UART_RxCpltCallback+0xe4>)
 800ef0e:	4413      	add	r3, r2
 800ef10:	2201      	movs	r2, #1
 800ef12:	4619      	mov	r1, r3
 800ef14:	f7f9 f9bd 	bl	8008292 <HAL_UART_Receive_IT>
}
 800ef18:	bf00      	nop
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef20:	200001f4 	.word	0x200001f4
 800ef24:	20007994 	.word	0x20007994
 800ef28:	20007998 	.word	0x20007998
 800ef2c:	20007944 	.word	0x20007944
 800ef30:	2000799c 	.word	0x2000799c
 800ef34:	200001ec 	.word	0x200001ec

0800ef38 <CleanRxData>:

//清除未读标志
void CleanRxData(uint8_t index)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	4603      	mov	r3, r0
 800ef40:	71fb      	strb	r3, [r7, #7]

	RxData_Flag[index] = 0;
 800ef42:	79fb      	ldrb	r3, [r7, #7]
 800ef44:	4a06      	ldr	r2, [pc, #24]	; (800ef60 <CleanRxData+0x28>)
 800ef46:	2100      	movs	r1, #0
 800ef48:	54d1      	strb	r1, [r2, r3]
	RxData_Index[index] = 0;
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	4a05      	ldr	r2, [pc, #20]	; (800ef64 <CleanRxData+0x2c>)
 800ef4e:	2100      	movs	r1, #0
 800ef50:	54d1      	strb	r1, [r2, r3]
}
 800ef52:	bf00      	nop
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	2000799c 	.word	0x2000799c
 800ef64:	20007998 	.word	0x20007998

0800ef68 <printf_Base>:

void printf_Base(const char *TX_String)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART_Handles[Printf_UART], (uint8_t*) TX_String, strlen(TX_String), 0xFFFF);
 800ef70:	4b08      	ldr	r3, [pc, #32]	; (800ef94 <printf_Base+0x2c>)
 800ef72:	685c      	ldr	r4, [r3, #4]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7f1 f92b 	bl	80001d0 <strlen>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef82:	6879      	ldr	r1, [r7, #4]
 800ef84:	4620      	mov	r0, r4
 800ef86:	f7f9 f8f2 	bl	800816e <HAL_UART_Transmit>
}
 800ef8a:	bf00      	nop
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd90      	pop	{r4, r7, pc}
 800ef92:	bf00      	nop
 800ef94:	200001ec 	.word	0x200001ec

0800ef98 <__errno>:
 800ef98:	4b01      	ldr	r3, [pc, #4]	; (800efa0 <__errno+0x8>)
 800ef9a:	6818      	ldr	r0, [r3, #0]
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	200001fc 	.word	0x200001fc

0800efa4 <__libc_init_array>:
 800efa4:	b570      	push	{r4, r5, r6, lr}
 800efa6:	4d0d      	ldr	r5, [pc, #52]	; (800efdc <__libc_init_array+0x38>)
 800efa8:	4c0d      	ldr	r4, [pc, #52]	; (800efe0 <__libc_init_array+0x3c>)
 800efaa:	1b64      	subs	r4, r4, r5
 800efac:	10a4      	asrs	r4, r4, #2
 800efae:	2600      	movs	r6, #0
 800efb0:	42a6      	cmp	r6, r4
 800efb2:	d109      	bne.n	800efc8 <__libc_init_array+0x24>
 800efb4:	4d0b      	ldr	r5, [pc, #44]	; (800efe4 <__libc_init_array+0x40>)
 800efb6:	4c0c      	ldr	r4, [pc, #48]	; (800efe8 <__libc_init_array+0x44>)
 800efb8:	f004 fd70 	bl	8013a9c <_init>
 800efbc:	1b64      	subs	r4, r4, r5
 800efbe:	10a4      	asrs	r4, r4, #2
 800efc0:	2600      	movs	r6, #0
 800efc2:	42a6      	cmp	r6, r4
 800efc4:	d105      	bne.n	800efd2 <__libc_init_array+0x2e>
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800efcc:	4798      	blx	r3
 800efce:	3601      	adds	r6, #1
 800efd0:	e7ee      	b.n	800efb0 <__libc_init_array+0xc>
 800efd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800efd6:	4798      	blx	r3
 800efd8:	3601      	adds	r6, #1
 800efda:	e7f2      	b.n	800efc2 <__libc_init_array+0x1e>
 800efdc:	08017acc 	.word	0x08017acc
 800efe0:	08017acc 	.word	0x08017acc
 800efe4:	08017acc 	.word	0x08017acc
 800efe8:	08017ad0 	.word	0x08017ad0

0800efec <memset>:
 800efec:	4402      	add	r2, r0
 800efee:	4603      	mov	r3, r0
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d100      	bne.n	800eff6 <memset+0xa>
 800eff4:	4770      	bx	lr
 800eff6:	f803 1b01 	strb.w	r1, [r3], #1
 800effa:	e7f9      	b.n	800eff0 <memset+0x4>

0800effc <__cvt>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	ec55 4b10 	vmov	r4, r5, d0
 800f004:	2d00      	cmp	r5, #0
 800f006:	460e      	mov	r6, r1
 800f008:	4619      	mov	r1, r3
 800f00a:	462b      	mov	r3, r5
 800f00c:	bfbb      	ittet	lt
 800f00e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f012:	461d      	movlt	r5, r3
 800f014:	2300      	movge	r3, #0
 800f016:	232d      	movlt	r3, #45	; 0x2d
 800f018:	700b      	strb	r3, [r1, #0]
 800f01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f01c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f020:	4691      	mov	r9, r2
 800f022:	f023 0820 	bic.w	r8, r3, #32
 800f026:	bfbc      	itt	lt
 800f028:	4622      	movlt	r2, r4
 800f02a:	4614      	movlt	r4, r2
 800f02c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f030:	d005      	beq.n	800f03e <__cvt+0x42>
 800f032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f036:	d100      	bne.n	800f03a <__cvt+0x3e>
 800f038:	3601      	adds	r6, #1
 800f03a:	2102      	movs	r1, #2
 800f03c:	e000      	b.n	800f040 <__cvt+0x44>
 800f03e:	2103      	movs	r1, #3
 800f040:	ab03      	add	r3, sp, #12
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	ab02      	add	r3, sp, #8
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	ec45 4b10 	vmov	d0, r4, r5
 800f04c:	4653      	mov	r3, sl
 800f04e:	4632      	mov	r2, r6
 800f050:	f001 fdae 	bl	8010bb0 <_dtoa_r>
 800f054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f058:	4607      	mov	r7, r0
 800f05a:	d102      	bne.n	800f062 <__cvt+0x66>
 800f05c:	f019 0f01 	tst.w	r9, #1
 800f060:	d022      	beq.n	800f0a8 <__cvt+0xac>
 800f062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f066:	eb07 0906 	add.w	r9, r7, r6
 800f06a:	d110      	bne.n	800f08e <__cvt+0x92>
 800f06c:	783b      	ldrb	r3, [r7, #0]
 800f06e:	2b30      	cmp	r3, #48	; 0x30
 800f070:	d10a      	bne.n	800f088 <__cvt+0x8c>
 800f072:	2200      	movs	r2, #0
 800f074:	2300      	movs	r3, #0
 800f076:	4620      	mov	r0, r4
 800f078:	4629      	mov	r1, r5
 800f07a:	f7f1 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800f07e:	b918      	cbnz	r0, 800f088 <__cvt+0x8c>
 800f080:	f1c6 0601 	rsb	r6, r6, #1
 800f084:	f8ca 6000 	str.w	r6, [sl]
 800f088:	f8da 3000 	ldr.w	r3, [sl]
 800f08c:	4499      	add	r9, r3
 800f08e:	2200      	movs	r2, #0
 800f090:	2300      	movs	r3, #0
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	f7f1 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800f09a:	b108      	cbz	r0, 800f0a0 <__cvt+0xa4>
 800f09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0a0:	2230      	movs	r2, #48	; 0x30
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	454b      	cmp	r3, r9
 800f0a6:	d307      	bcc.n	800f0b8 <__cvt+0xbc>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0ac:	1bdb      	subs	r3, r3, r7
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	b004      	add	sp, #16
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	1c59      	adds	r1, r3, #1
 800f0ba:	9103      	str	r1, [sp, #12]
 800f0bc:	701a      	strb	r2, [r3, #0]
 800f0be:	e7f0      	b.n	800f0a2 <__cvt+0xa6>

0800f0c0 <__exponent>:
 800f0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2900      	cmp	r1, #0
 800f0c6:	bfb8      	it	lt
 800f0c8:	4249      	neglt	r1, r1
 800f0ca:	f803 2b02 	strb.w	r2, [r3], #2
 800f0ce:	bfb4      	ite	lt
 800f0d0:	222d      	movlt	r2, #45	; 0x2d
 800f0d2:	222b      	movge	r2, #43	; 0x2b
 800f0d4:	2909      	cmp	r1, #9
 800f0d6:	7042      	strb	r2, [r0, #1]
 800f0d8:	dd2a      	ble.n	800f130 <__exponent+0x70>
 800f0da:	f10d 0407 	add.w	r4, sp, #7
 800f0de:	46a4      	mov	ip, r4
 800f0e0:	270a      	movs	r7, #10
 800f0e2:	46a6      	mov	lr, r4
 800f0e4:	460a      	mov	r2, r1
 800f0e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800f0ea:	fb07 1516 	mls	r5, r7, r6, r1
 800f0ee:	3530      	adds	r5, #48	; 0x30
 800f0f0:	2a63      	cmp	r2, #99	; 0x63
 800f0f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	dcf1      	bgt.n	800f0e2 <__exponent+0x22>
 800f0fe:	3130      	adds	r1, #48	; 0x30
 800f100:	f1ae 0502 	sub.w	r5, lr, #2
 800f104:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f108:	1c44      	adds	r4, r0, #1
 800f10a:	4629      	mov	r1, r5
 800f10c:	4561      	cmp	r1, ip
 800f10e:	d30a      	bcc.n	800f126 <__exponent+0x66>
 800f110:	f10d 0209 	add.w	r2, sp, #9
 800f114:	eba2 020e 	sub.w	r2, r2, lr
 800f118:	4565      	cmp	r5, ip
 800f11a:	bf88      	it	hi
 800f11c:	2200      	movhi	r2, #0
 800f11e:	4413      	add	r3, r2
 800f120:	1a18      	subs	r0, r3, r0
 800f122:	b003      	add	sp, #12
 800f124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f12a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f12e:	e7ed      	b.n	800f10c <__exponent+0x4c>
 800f130:	2330      	movs	r3, #48	; 0x30
 800f132:	3130      	adds	r1, #48	; 0x30
 800f134:	7083      	strb	r3, [r0, #2]
 800f136:	70c1      	strb	r1, [r0, #3]
 800f138:	1d03      	adds	r3, r0, #4
 800f13a:	e7f1      	b.n	800f120 <__exponent+0x60>

0800f13c <_printf_float>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	ed2d 8b02 	vpush	{d8}
 800f144:	b08d      	sub	sp, #52	; 0x34
 800f146:	460c      	mov	r4, r1
 800f148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f14c:	4616      	mov	r6, r2
 800f14e:	461f      	mov	r7, r3
 800f150:	4605      	mov	r5, r0
 800f152:	f002 fe8b 	bl	8011e6c <_localeconv_r>
 800f156:	f8d0 a000 	ldr.w	sl, [r0]
 800f15a:	4650      	mov	r0, sl
 800f15c:	f7f1 f838 	bl	80001d0 <strlen>
 800f160:	2300      	movs	r3, #0
 800f162:	930a      	str	r3, [sp, #40]	; 0x28
 800f164:	6823      	ldr	r3, [r4, #0]
 800f166:	9305      	str	r3, [sp, #20]
 800f168:	f8d8 3000 	ldr.w	r3, [r8]
 800f16c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f170:	3307      	adds	r3, #7
 800f172:	f023 0307 	bic.w	r3, r3, #7
 800f176:	f103 0208 	add.w	r2, r3, #8
 800f17a:	f8c8 2000 	str.w	r2, [r8]
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f186:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f18a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f18e:	9307      	str	r3, [sp, #28]
 800f190:	f8cd 8018 	str.w	r8, [sp, #24]
 800f194:	ee08 0a10 	vmov	s16, r0
 800f198:	4b9f      	ldr	r3, [pc, #636]	; (800f418 <_printf_float+0x2dc>)
 800f19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f19e:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a2:	f7f1 fcc3 	bl	8000b2c <__aeabi_dcmpun>
 800f1a6:	bb88      	cbnz	r0, 800f20c <_printf_float+0xd0>
 800f1a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ac:	4b9a      	ldr	r3, [pc, #616]	; (800f418 <_printf_float+0x2dc>)
 800f1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b2:	f7f1 fc9d 	bl	8000af0 <__aeabi_dcmple>
 800f1b6:	bb48      	cbnz	r0, 800f20c <_printf_float+0xd0>
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	4640      	mov	r0, r8
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f7f1 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800f1c4:	b110      	cbz	r0, 800f1cc <_printf_float+0x90>
 800f1c6:	232d      	movs	r3, #45	; 0x2d
 800f1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1cc:	4b93      	ldr	r3, [pc, #588]	; (800f41c <_printf_float+0x2e0>)
 800f1ce:	4894      	ldr	r0, [pc, #592]	; (800f420 <_printf_float+0x2e4>)
 800f1d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1d4:	bf94      	ite	ls
 800f1d6:	4698      	movls	r8, r3
 800f1d8:	4680      	movhi	r8, r0
 800f1da:	2303      	movs	r3, #3
 800f1dc:	6123      	str	r3, [r4, #16]
 800f1de:	9b05      	ldr	r3, [sp, #20]
 800f1e0:	f023 0204 	bic.w	r2, r3, #4
 800f1e4:	6022      	str	r2, [r4, #0]
 800f1e6:	f04f 0900 	mov.w	r9, #0
 800f1ea:	9700      	str	r7, [sp, #0]
 800f1ec:	4633      	mov	r3, r6
 800f1ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f000 f9d8 	bl	800f5a8 <_printf_common>
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	f040 8090 	bne.w	800f31e <_printf_float+0x1e2>
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f202:	b00d      	add	sp, #52	; 0x34
 800f204:	ecbd 8b02 	vpop	{d8}
 800f208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f20c:	4642      	mov	r2, r8
 800f20e:	464b      	mov	r3, r9
 800f210:	4640      	mov	r0, r8
 800f212:	4649      	mov	r1, r9
 800f214:	f7f1 fc8a 	bl	8000b2c <__aeabi_dcmpun>
 800f218:	b140      	cbz	r0, 800f22c <_printf_float+0xf0>
 800f21a:	464b      	mov	r3, r9
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	bfbc      	itt	lt
 800f220:	232d      	movlt	r3, #45	; 0x2d
 800f222:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f226:	487f      	ldr	r0, [pc, #508]	; (800f424 <_printf_float+0x2e8>)
 800f228:	4b7f      	ldr	r3, [pc, #508]	; (800f428 <_printf_float+0x2ec>)
 800f22a:	e7d1      	b.n	800f1d0 <_printf_float+0x94>
 800f22c:	6863      	ldr	r3, [r4, #4]
 800f22e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f232:	9206      	str	r2, [sp, #24]
 800f234:	1c5a      	adds	r2, r3, #1
 800f236:	d13f      	bne.n	800f2b8 <_printf_float+0x17c>
 800f238:	2306      	movs	r3, #6
 800f23a:	6063      	str	r3, [r4, #4]
 800f23c:	9b05      	ldr	r3, [sp, #20]
 800f23e:	6861      	ldr	r1, [r4, #4]
 800f240:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f244:	2300      	movs	r3, #0
 800f246:	9303      	str	r3, [sp, #12]
 800f248:	ab0a      	add	r3, sp, #40	; 0x28
 800f24a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f24e:	ab09      	add	r3, sp, #36	; 0x24
 800f250:	ec49 8b10 	vmov	d0, r8, r9
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	6022      	str	r2, [r4, #0]
 800f258:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f25c:	4628      	mov	r0, r5
 800f25e:	f7ff fecd 	bl	800effc <__cvt>
 800f262:	9b06      	ldr	r3, [sp, #24]
 800f264:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f266:	2b47      	cmp	r3, #71	; 0x47
 800f268:	4680      	mov	r8, r0
 800f26a:	d108      	bne.n	800f27e <_printf_float+0x142>
 800f26c:	1cc8      	adds	r0, r1, #3
 800f26e:	db02      	blt.n	800f276 <_printf_float+0x13a>
 800f270:	6863      	ldr	r3, [r4, #4]
 800f272:	4299      	cmp	r1, r3
 800f274:	dd41      	ble.n	800f2fa <_printf_float+0x1be>
 800f276:	f1ab 0b02 	sub.w	fp, fp, #2
 800f27a:	fa5f fb8b 	uxtb.w	fp, fp
 800f27e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f282:	d820      	bhi.n	800f2c6 <_printf_float+0x18a>
 800f284:	3901      	subs	r1, #1
 800f286:	465a      	mov	r2, fp
 800f288:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f28c:	9109      	str	r1, [sp, #36]	; 0x24
 800f28e:	f7ff ff17 	bl	800f0c0 <__exponent>
 800f292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f294:	1813      	adds	r3, r2, r0
 800f296:	2a01      	cmp	r2, #1
 800f298:	4681      	mov	r9, r0
 800f29a:	6123      	str	r3, [r4, #16]
 800f29c:	dc02      	bgt.n	800f2a4 <_printf_float+0x168>
 800f29e:	6822      	ldr	r2, [r4, #0]
 800f2a0:	07d2      	lsls	r2, r2, #31
 800f2a2:	d501      	bpl.n	800f2a8 <_printf_float+0x16c>
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	6123      	str	r3, [r4, #16]
 800f2a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d09c      	beq.n	800f1ea <_printf_float+0xae>
 800f2b0:	232d      	movs	r3, #45	; 0x2d
 800f2b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2b6:	e798      	b.n	800f1ea <_printf_float+0xae>
 800f2b8:	9a06      	ldr	r2, [sp, #24]
 800f2ba:	2a47      	cmp	r2, #71	; 0x47
 800f2bc:	d1be      	bne.n	800f23c <_printf_float+0x100>
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1bc      	bne.n	800f23c <_printf_float+0x100>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e7b9      	b.n	800f23a <_printf_float+0xfe>
 800f2c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2ca:	d118      	bne.n	800f2fe <_printf_float+0x1c2>
 800f2cc:	2900      	cmp	r1, #0
 800f2ce:	6863      	ldr	r3, [r4, #4]
 800f2d0:	dd0b      	ble.n	800f2ea <_printf_float+0x1ae>
 800f2d2:	6121      	str	r1, [r4, #16]
 800f2d4:	b913      	cbnz	r3, 800f2dc <_printf_float+0x1a0>
 800f2d6:	6822      	ldr	r2, [r4, #0]
 800f2d8:	07d0      	lsls	r0, r2, #31
 800f2da:	d502      	bpl.n	800f2e2 <_printf_float+0x1a6>
 800f2dc:	3301      	adds	r3, #1
 800f2de:	440b      	add	r3, r1
 800f2e0:	6123      	str	r3, [r4, #16]
 800f2e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2e4:	f04f 0900 	mov.w	r9, #0
 800f2e8:	e7de      	b.n	800f2a8 <_printf_float+0x16c>
 800f2ea:	b913      	cbnz	r3, 800f2f2 <_printf_float+0x1b6>
 800f2ec:	6822      	ldr	r2, [r4, #0]
 800f2ee:	07d2      	lsls	r2, r2, #31
 800f2f0:	d501      	bpl.n	800f2f6 <_printf_float+0x1ba>
 800f2f2:	3302      	adds	r3, #2
 800f2f4:	e7f4      	b.n	800f2e0 <_printf_float+0x1a4>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e7f2      	b.n	800f2e0 <_printf_float+0x1a4>
 800f2fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f300:	4299      	cmp	r1, r3
 800f302:	db05      	blt.n	800f310 <_printf_float+0x1d4>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	6121      	str	r1, [r4, #16]
 800f308:	07d8      	lsls	r0, r3, #31
 800f30a:	d5ea      	bpl.n	800f2e2 <_printf_float+0x1a6>
 800f30c:	1c4b      	adds	r3, r1, #1
 800f30e:	e7e7      	b.n	800f2e0 <_printf_float+0x1a4>
 800f310:	2900      	cmp	r1, #0
 800f312:	bfd4      	ite	le
 800f314:	f1c1 0202 	rsble	r2, r1, #2
 800f318:	2201      	movgt	r2, #1
 800f31a:	4413      	add	r3, r2
 800f31c:	e7e0      	b.n	800f2e0 <_printf_float+0x1a4>
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	055a      	lsls	r2, r3, #21
 800f322:	d407      	bmi.n	800f334 <_printf_float+0x1f8>
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	4642      	mov	r2, r8
 800f328:	4631      	mov	r1, r6
 800f32a:	4628      	mov	r0, r5
 800f32c:	47b8      	blx	r7
 800f32e:	3001      	adds	r0, #1
 800f330:	d12c      	bne.n	800f38c <_printf_float+0x250>
 800f332:	e764      	b.n	800f1fe <_printf_float+0xc2>
 800f334:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f338:	f240 80e0 	bls.w	800f4fc <_printf_float+0x3c0>
 800f33c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f340:	2200      	movs	r2, #0
 800f342:	2300      	movs	r3, #0
 800f344:	f7f1 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f348:	2800      	cmp	r0, #0
 800f34a:	d034      	beq.n	800f3b6 <_printf_float+0x27a>
 800f34c:	4a37      	ldr	r2, [pc, #220]	; (800f42c <_printf_float+0x2f0>)
 800f34e:	2301      	movs	r3, #1
 800f350:	4631      	mov	r1, r6
 800f352:	4628      	mov	r0, r5
 800f354:	47b8      	blx	r7
 800f356:	3001      	adds	r0, #1
 800f358:	f43f af51 	beq.w	800f1fe <_printf_float+0xc2>
 800f35c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f360:	429a      	cmp	r2, r3
 800f362:	db02      	blt.n	800f36a <_printf_float+0x22e>
 800f364:	6823      	ldr	r3, [r4, #0]
 800f366:	07d8      	lsls	r0, r3, #31
 800f368:	d510      	bpl.n	800f38c <_printf_float+0x250>
 800f36a:	ee18 3a10 	vmov	r3, s16
 800f36e:	4652      	mov	r2, sl
 800f370:	4631      	mov	r1, r6
 800f372:	4628      	mov	r0, r5
 800f374:	47b8      	blx	r7
 800f376:	3001      	adds	r0, #1
 800f378:	f43f af41 	beq.w	800f1fe <_printf_float+0xc2>
 800f37c:	f04f 0800 	mov.w	r8, #0
 800f380:	f104 091a 	add.w	r9, r4, #26
 800f384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f386:	3b01      	subs	r3, #1
 800f388:	4543      	cmp	r3, r8
 800f38a:	dc09      	bgt.n	800f3a0 <_printf_float+0x264>
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	079b      	lsls	r3, r3, #30
 800f390:	f100 8105 	bmi.w	800f59e <_printf_float+0x462>
 800f394:	68e0      	ldr	r0, [r4, #12]
 800f396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f398:	4298      	cmp	r0, r3
 800f39a:	bfb8      	it	lt
 800f39c:	4618      	movlt	r0, r3
 800f39e:	e730      	b.n	800f202 <_printf_float+0xc6>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	464a      	mov	r2, r9
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	47b8      	blx	r7
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	f43f af27 	beq.w	800f1fe <_printf_float+0xc2>
 800f3b0:	f108 0801 	add.w	r8, r8, #1
 800f3b4:	e7e6      	b.n	800f384 <_printf_float+0x248>
 800f3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	dc39      	bgt.n	800f430 <_printf_float+0x2f4>
 800f3bc:	4a1b      	ldr	r2, [pc, #108]	; (800f42c <_printf_float+0x2f0>)
 800f3be:	2301      	movs	r3, #1
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	47b8      	blx	r7
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	f43f af19 	beq.w	800f1fe <_printf_float+0xc2>
 800f3cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	d102      	bne.n	800f3da <_printf_float+0x29e>
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	07d9      	lsls	r1, r3, #31
 800f3d8:	d5d8      	bpl.n	800f38c <_printf_float+0x250>
 800f3da:	ee18 3a10 	vmov	r3, s16
 800f3de:	4652      	mov	r2, sl
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b8      	blx	r7
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	f43f af09 	beq.w	800f1fe <_printf_float+0xc2>
 800f3ec:	f04f 0900 	mov.w	r9, #0
 800f3f0:	f104 0a1a 	add.w	sl, r4, #26
 800f3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f6:	425b      	negs	r3, r3
 800f3f8:	454b      	cmp	r3, r9
 800f3fa:	dc01      	bgt.n	800f400 <_printf_float+0x2c4>
 800f3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3fe:	e792      	b.n	800f326 <_printf_float+0x1ea>
 800f400:	2301      	movs	r3, #1
 800f402:	4652      	mov	r2, sl
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f aef7 	beq.w	800f1fe <_printf_float+0xc2>
 800f410:	f109 0901 	add.w	r9, r9, #1
 800f414:	e7ee      	b.n	800f3f4 <_printf_float+0x2b8>
 800f416:	bf00      	nop
 800f418:	7fefffff 	.word	0x7fefffff
 800f41c:	08017620 	.word	0x08017620
 800f420:	08017624 	.word	0x08017624
 800f424:	0801762c 	.word	0x0801762c
 800f428:	08017628 	.word	0x08017628
 800f42c:	08017630 	.word	0x08017630
 800f430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f434:	429a      	cmp	r2, r3
 800f436:	bfa8      	it	ge
 800f438:	461a      	movge	r2, r3
 800f43a:	2a00      	cmp	r2, #0
 800f43c:	4691      	mov	r9, r2
 800f43e:	dc37      	bgt.n	800f4b0 <_printf_float+0x374>
 800f440:	f04f 0b00 	mov.w	fp, #0
 800f444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f448:	f104 021a 	add.w	r2, r4, #26
 800f44c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f44e:	9305      	str	r3, [sp, #20]
 800f450:	eba3 0309 	sub.w	r3, r3, r9
 800f454:	455b      	cmp	r3, fp
 800f456:	dc33      	bgt.n	800f4c0 <_printf_float+0x384>
 800f458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f45c:	429a      	cmp	r2, r3
 800f45e:	db3b      	blt.n	800f4d8 <_printf_float+0x39c>
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	07da      	lsls	r2, r3, #31
 800f464:	d438      	bmi.n	800f4d8 <_printf_float+0x39c>
 800f466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f468:	9a05      	ldr	r2, [sp, #20]
 800f46a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f46c:	1a9a      	subs	r2, r3, r2
 800f46e:	eba3 0901 	sub.w	r9, r3, r1
 800f472:	4591      	cmp	r9, r2
 800f474:	bfa8      	it	ge
 800f476:	4691      	movge	r9, r2
 800f478:	f1b9 0f00 	cmp.w	r9, #0
 800f47c:	dc35      	bgt.n	800f4ea <_printf_float+0x3ae>
 800f47e:	f04f 0800 	mov.w	r8, #0
 800f482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f486:	f104 0a1a 	add.w	sl, r4, #26
 800f48a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f48e:	1a9b      	subs	r3, r3, r2
 800f490:	eba3 0309 	sub.w	r3, r3, r9
 800f494:	4543      	cmp	r3, r8
 800f496:	f77f af79 	ble.w	800f38c <_printf_float+0x250>
 800f49a:	2301      	movs	r3, #1
 800f49c:	4652      	mov	r2, sl
 800f49e:	4631      	mov	r1, r6
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	47b8      	blx	r7
 800f4a4:	3001      	adds	r0, #1
 800f4a6:	f43f aeaa 	beq.w	800f1fe <_printf_float+0xc2>
 800f4aa:	f108 0801 	add.w	r8, r8, #1
 800f4ae:	e7ec      	b.n	800f48a <_printf_float+0x34e>
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4642      	mov	r2, r8
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	47b8      	blx	r7
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	d1c0      	bne.n	800f440 <_printf_float+0x304>
 800f4be:	e69e      	b.n	800f1fe <_printf_float+0xc2>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	4631      	mov	r1, r6
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	9205      	str	r2, [sp, #20]
 800f4c8:	47b8      	blx	r7
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	f43f ae97 	beq.w	800f1fe <_printf_float+0xc2>
 800f4d0:	9a05      	ldr	r2, [sp, #20]
 800f4d2:	f10b 0b01 	add.w	fp, fp, #1
 800f4d6:	e7b9      	b.n	800f44c <_printf_float+0x310>
 800f4d8:	ee18 3a10 	vmov	r3, s16
 800f4dc:	4652      	mov	r2, sl
 800f4de:	4631      	mov	r1, r6
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	47b8      	blx	r7
 800f4e4:	3001      	adds	r0, #1
 800f4e6:	d1be      	bne.n	800f466 <_printf_float+0x32a>
 800f4e8:	e689      	b.n	800f1fe <_printf_float+0xc2>
 800f4ea:	9a05      	ldr	r2, [sp, #20]
 800f4ec:	464b      	mov	r3, r9
 800f4ee:	4442      	add	r2, r8
 800f4f0:	4631      	mov	r1, r6
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	47b8      	blx	r7
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d1c1      	bne.n	800f47e <_printf_float+0x342>
 800f4fa:	e680      	b.n	800f1fe <_printf_float+0xc2>
 800f4fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4fe:	2a01      	cmp	r2, #1
 800f500:	dc01      	bgt.n	800f506 <_printf_float+0x3ca>
 800f502:	07db      	lsls	r3, r3, #31
 800f504:	d538      	bpl.n	800f578 <_printf_float+0x43c>
 800f506:	2301      	movs	r3, #1
 800f508:	4642      	mov	r2, r8
 800f50a:	4631      	mov	r1, r6
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b8      	blx	r7
 800f510:	3001      	adds	r0, #1
 800f512:	f43f ae74 	beq.w	800f1fe <_printf_float+0xc2>
 800f516:	ee18 3a10 	vmov	r3, s16
 800f51a:	4652      	mov	r2, sl
 800f51c:	4631      	mov	r1, r6
 800f51e:	4628      	mov	r0, r5
 800f520:	47b8      	blx	r7
 800f522:	3001      	adds	r0, #1
 800f524:	f43f ae6b 	beq.w	800f1fe <_printf_float+0xc2>
 800f528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f52c:	2200      	movs	r2, #0
 800f52e:	2300      	movs	r3, #0
 800f530:	f7f1 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 800f534:	b9d8      	cbnz	r0, 800f56e <_printf_float+0x432>
 800f536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f538:	f108 0201 	add.w	r2, r8, #1
 800f53c:	3b01      	subs	r3, #1
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	d10e      	bne.n	800f566 <_printf_float+0x42a>
 800f548:	e659      	b.n	800f1fe <_printf_float+0xc2>
 800f54a:	2301      	movs	r3, #1
 800f54c:	4652      	mov	r2, sl
 800f54e:	4631      	mov	r1, r6
 800f550:	4628      	mov	r0, r5
 800f552:	47b8      	blx	r7
 800f554:	3001      	adds	r0, #1
 800f556:	f43f ae52 	beq.w	800f1fe <_printf_float+0xc2>
 800f55a:	f108 0801 	add.w	r8, r8, #1
 800f55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f560:	3b01      	subs	r3, #1
 800f562:	4543      	cmp	r3, r8
 800f564:	dcf1      	bgt.n	800f54a <_printf_float+0x40e>
 800f566:	464b      	mov	r3, r9
 800f568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f56c:	e6dc      	b.n	800f328 <_printf_float+0x1ec>
 800f56e:	f04f 0800 	mov.w	r8, #0
 800f572:	f104 0a1a 	add.w	sl, r4, #26
 800f576:	e7f2      	b.n	800f55e <_printf_float+0x422>
 800f578:	2301      	movs	r3, #1
 800f57a:	4642      	mov	r2, r8
 800f57c:	e7df      	b.n	800f53e <_printf_float+0x402>
 800f57e:	2301      	movs	r3, #1
 800f580:	464a      	mov	r2, r9
 800f582:	4631      	mov	r1, r6
 800f584:	4628      	mov	r0, r5
 800f586:	47b8      	blx	r7
 800f588:	3001      	adds	r0, #1
 800f58a:	f43f ae38 	beq.w	800f1fe <_printf_float+0xc2>
 800f58e:	f108 0801 	add.w	r8, r8, #1
 800f592:	68e3      	ldr	r3, [r4, #12]
 800f594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f596:	1a5b      	subs	r3, r3, r1
 800f598:	4543      	cmp	r3, r8
 800f59a:	dcf0      	bgt.n	800f57e <_printf_float+0x442>
 800f59c:	e6fa      	b.n	800f394 <_printf_float+0x258>
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	f104 0919 	add.w	r9, r4, #25
 800f5a6:	e7f4      	b.n	800f592 <_printf_float+0x456>

0800f5a8 <_printf_common>:
 800f5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ac:	4616      	mov	r6, r2
 800f5ae:	4699      	mov	r9, r3
 800f5b0:	688a      	ldr	r2, [r1, #8]
 800f5b2:	690b      	ldr	r3, [r1, #16]
 800f5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	bfb8      	it	lt
 800f5bc:	4613      	movlt	r3, r2
 800f5be:	6033      	str	r3, [r6, #0]
 800f5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5c4:	4607      	mov	r7, r0
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	b10a      	cbz	r2, 800f5ce <_printf_common+0x26>
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	6033      	str	r3, [r6, #0]
 800f5ce:	6823      	ldr	r3, [r4, #0]
 800f5d0:	0699      	lsls	r1, r3, #26
 800f5d2:	bf42      	ittt	mi
 800f5d4:	6833      	ldrmi	r3, [r6, #0]
 800f5d6:	3302      	addmi	r3, #2
 800f5d8:	6033      	strmi	r3, [r6, #0]
 800f5da:	6825      	ldr	r5, [r4, #0]
 800f5dc:	f015 0506 	ands.w	r5, r5, #6
 800f5e0:	d106      	bne.n	800f5f0 <_printf_common+0x48>
 800f5e2:	f104 0a19 	add.w	sl, r4, #25
 800f5e6:	68e3      	ldr	r3, [r4, #12]
 800f5e8:	6832      	ldr	r2, [r6, #0]
 800f5ea:	1a9b      	subs	r3, r3, r2
 800f5ec:	42ab      	cmp	r3, r5
 800f5ee:	dc26      	bgt.n	800f63e <_printf_common+0x96>
 800f5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5f4:	1e13      	subs	r3, r2, #0
 800f5f6:	6822      	ldr	r2, [r4, #0]
 800f5f8:	bf18      	it	ne
 800f5fa:	2301      	movne	r3, #1
 800f5fc:	0692      	lsls	r2, r2, #26
 800f5fe:	d42b      	bmi.n	800f658 <_printf_common+0xb0>
 800f600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f604:	4649      	mov	r1, r9
 800f606:	4638      	mov	r0, r7
 800f608:	47c0      	blx	r8
 800f60a:	3001      	adds	r0, #1
 800f60c:	d01e      	beq.n	800f64c <_printf_common+0xa4>
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	68e5      	ldr	r5, [r4, #12]
 800f612:	6832      	ldr	r2, [r6, #0]
 800f614:	f003 0306 	and.w	r3, r3, #6
 800f618:	2b04      	cmp	r3, #4
 800f61a:	bf08      	it	eq
 800f61c:	1aad      	subeq	r5, r5, r2
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	bf0c      	ite	eq
 800f624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f628:	2500      	movne	r5, #0
 800f62a:	4293      	cmp	r3, r2
 800f62c:	bfc4      	itt	gt
 800f62e:	1a9b      	subgt	r3, r3, r2
 800f630:	18ed      	addgt	r5, r5, r3
 800f632:	2600      	movs	r6, #0
 800f634:	341a      	adds	r4, #26
 800f636:	42b5      	cmp	r5, r6
 800f638:	d11a      	bne.n	800f670 <_printf_common+0xc8>
 800f63a:	2000      	movs	r0, #0
 800f63c:	e008      	b.n	800f650 <_printf_common+0xa8>
 800f63e:	2301      	movs	r3, #1
 800f640:	4652      	mov	r2, sl
 800f642:	4649      	mov	r1, r9
 800f644:	4638      	mov	r0, r7
 800f646:	47c0      	blx	r8
 800f648:	3001      	adds	r0, #1
 800f64a:	d103      	bne.n	800f654 <_printf_common+0xac>
 800f64c:	f04f 30ff 	mov.w	r0, #4294967295
 800f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f654:	3501      	adds	r5, #1
 800f656:	e7c6      	b.n	800f5e6 <_printf_common+0x3e>
 800f658:	18e1      	adds	r1, r4, r3
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	2030      	movs	r0, #48	; 0x30
 800f65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f662:	4422      	add	r2, r4
 800f664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f66c:	3302      	adds	r3, #2
 800f66e:	e7c7      	b.n	800f600 <_printf_common+0x58>
 800f670:	2301      	movs	r3, #1
 800f672:	4622      	mov	r2, r4
 800f674:	4649      	mov	r1, r9
 800f676:	4638      	mov	r0, r7
 800f678:	47c0      	blx	r8
 800f67a:	3001      	adds	r0, #1
 800f67c:	d0e6      	beq.n	800f64c <_printf_common+0xa4>
 800f67e:	3601      	adds	r6, #1
 800f680:	e7d9      	b.n	800f636 <_printf_common+0x8e>
	...

0800f684 <_printf_i>:
 800f684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f688:	7e0f      	ldrb	r7, [r1, #24]
 800f68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f68c:	2f78      	cmp	r7, #120	; 0x78
 800f68e:	4691      	mov	r9, r2
 800f690:	4680      	mov	r8, r0
 800f692:	460c      	mov	r4, r1
 800f694:	469a      	mov	sl, r3
 800f696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f69a:	d807      	bhi.n	800f6ac <_printf_i+0x28>
 800f69c:	2f62      	cmp	r7, #98	; 0x62
 800f69e:	d80a      	bhi.n	800f6b6 <_printf_i+0x32>
 800f6a0:	2f00      	cmp	r7, #0
 800f6a2:	f000 80d8 	beq.w	800f856 <_printf_i+0x1d2>
 800f6a6:	2f58      	cmp	r7, #88	; 0x58
 800f6a8:	f000 80a3 	beq.w	800f7f2 <_printf_i+0x16e>
 800f6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6b4:	e03a      	b.n	800f72c <_printf_i+0xa8>
 800f6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6ba:	2b15      	cmp	r3, #21
 800f6bc:	d8f6      	bhi.n	800f6ac <_printf_i+0x28>
 800f6be:	a101      	add	r1, pc, #4	; (adr r1, 800f6c4 <_printf_i+0x40>)
 800f6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6c4:	0800f71d 	.word	0x0800f71d
 800f6c8:	0800f731 	.word	0x0800f731
 800f6cc:	0800f6ad 	.word	0x0800f6ad
 800f6d0:	0800f6ad 	.word	0x0800f6ad
 800f6d4:	0800f6ad 	.word	0x0800f6ad
 800f6d8:	0800f6ad 	.word	0x0800f6ad
 800f6dc:	0800f731 	.word	0x0800f731
 800f6e0:	0800f6ad 	.word	0x0800f6ad
 800f6e4:	0800f6ad 	.word	0x0800f6ad
 800f6e8:	0800f6ad 	.word	0x0800f6ad
 800f6ec:	0800f6ad 	.word	0x0800f6ad
 800f6f0:	0800f83d 	.word	0x0800f83d
 800f6f4:	0800f761 	.word	0x0800f761
 800f6f8:	0800f81f 	.word	0x0800f81f
 800f6fc:	0800f6ad 	.word	0x0800f6ad
 800f700:	0800f6ad 	.word	0x0800f6ad
 800f704:	0800f85f 	.word	0x0800f85f
 800f708:	0800f6ad 	.word	0x0800f6ad
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f6ad 	.word	0x0800f6ad
 800f714:	0800f6ad 	.word	0x0800f6ad
 800f718:	0800f827 	.word	0x0800f827
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	1d1a      	adds	r2, r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	602a      	str	r2, [r5, #0]
 800f724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f72c:	2301      	movs	r3, #1
 800f72e:	e0a3      	b.n	800f878 <_printf_i+0x1f4>
 800f730:	6820      	ldr	r0, [r4, #0]
 800f732:	6829      	ldr	r1, [r5, #0]
 800f734:	0606      	lsls	r6, r0, #24
 800f736:	f101 0304 	add.w	r3, r1, #4
 800f73a:	d50a      	bpl.n	800f752 <_printf_i+0xce>
 800f73c:	680e      	ldr	r6, [r1, #0]
 800f73e:	602b      	str	r3, [r5, #0]
 800f740:	2e00      	cmp	r6, #0
 800f742:	da03      	bge.n	800f74c <_printf_i+0xc8>
 800f744:	232d      	movs	r3, #45	; 0x2d
 800f746:	4276      	negs	r6, r6
 800f748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f74c:	485e      	ldr	r0, [pc, #376]	; (800f8c8 <_printf_i+0x244>)
 800f74e:	230a      	movs	r3, #10
 800f750:	e019      	b.n	800f786 <_printf_i+0x102>
 800f752:	680e      	ldr	r6, [r1, #0]
 800f754:	602b      	str	r3, [r5, #0]
 800f756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f75a:	bf18      	it	ne
 800f75c:	b236      	sxthne	r6, r6
 800f75e:	e7ef      	b.n	800f740 <_printf_i+0xbc>
 800f760:	682b      	ldr	r3, [r5, #0]
 800f762:	6820      	ldr	r0, [r4, #0]
 800f764:	1d19      	adds	r1, r3, #4
 800f766:	6029      	str	r1, [r5, #0]
 800f768:	0601      	lsls	r1, r0, #24
 800f76a:	d501      	bpl.n	800f770 <_printf_i+0xec>
 800f76c:	681e      	ldr	r6, [r3, #0]
 800f76e:	e002      	b.n	800f776 <_printf_i+0xf2>
 800f770:	0646      	lsls	r6, r0, #25
 800f772:	d5fb      	bpl.n	800f76c <_printf_i+0xe8>
 800f774:	881e      	ldrh	r6, [r3, #0]
 800f776:	4854      	ldr	r0, [pc, #336]	; (800f8c8 <_printf_i+0x244>)
 800f778:	2f6f      	cmp	r7, #111	; 0x6f
 800f77a:	bf0c      	ite	eq
 800f77c:	2308      	moveq	r3, #8
 800f77e:	230a      	movne	r3, #10
 800f780:	2100      	movs	r1, #0
 800f782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f786:	6865      	ldr	r5, [r4, #4]
 800f788:	60a5      	str	r5, [r4, #8]
 800f78a:	2d00      	cmp	r5, #0
 800f78c:	bfa2      	ittt	ge
 800f78e:	6821      	ldrge	r1, [r4, #0]
 800f790:	f021 0104 	bicge.w	r1, r1, #4
 800f794:	6021      	strge	r1, [r4, #0]
 800f796:	b90e      	cbnz	r6, 800f79c <_printf_i+0x118>
 800f798:	2d00      	cmp	r5, #0
 800f79a:	d04d      	beq.n	800f838 <_printf_i+0x1b4>
 800f79c:	4615      	mov	r5, r2
 800f79e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7a2:	fb03 6711 	mls	r7, r3, r1, r6
 800f7a6:	5dc7      	ldrb	r7, [r0, r7]
 800f7a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7ac:	4637      	mov	r7, r6
 800f7ae:	42bb      	cmp	r3, r7
 800f7b0:	460e      	mov	r6, r1
 800f7b2:	d9f4      	bls.n	800f79e <_printf_i+0x11a>
 800f7b4:	2b08      	cmp	r3, #8
 800f7b6:	d10b      	bne.n	800f7d0 <_printf_i+0x14c>
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	07de      	lsls	r6, r3, #31
 800f7bc:	d508      	bpl.n	800f7d0 <_printf_i+0x14c>
 800f7be:	6923      	ldr	r3, [r4, #16]
 800f7c0:	6861      	ldr	r1, [r4, #4]
 800f7c2:	4299      	cmp	r1, r3
 800f7c4:	bfde      	ittt	le
 800f7c6:	2330      	movle	r3, #48	; 0x30
 800f7c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7d0:	1b52      	subs	r2, r2, r5
 800f7d2:	6122      	str	r2, [r4, #16]
 800f7d4:	f8cd a000 	str.w	sl, [sp]
 800f7d8:	464b      	mov	r3, r9
 800f7da:	aa03      	add	r2, sp, #12
 800f7dc:	4621      	mov	r1, r4
 800f7de:	4640      	mov	r0, r8
 800f7e0:	f7ff fee2 	bl	800f5a8 <_printf_common>
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d14c      	bne.n	800f882 <_printf_i+0x1fe>
 800f7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ec:	b004      	add	sp, #16
 800f7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f2:	4835      	ldr	r0, [pc, #212]	; (800f8c8 <_printf_i+0x244>)
 800f7f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7f8:	6829      	ldr	r1, [r5, #0]
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f800:	6029      	str	r1, [r5, #0]
 800f802:	061d      	lsls	r5, r3, #24
 800f804:	d514      	bpl.n	800f830 <_printf_i+0x1ac>
 800f806:	07df      	lsls	r7, r3, #31
 800f808:	bf44      	itt	mi
 800f80a:	f043 0320 	orrmi.w	r3, r3, #32
 800f80e:	6023      	strmi	r3, [r4, #0]
 800f810:	b91e      	cbnz	r6, 800f81a <_printf_i+0x196>
 800f812:	6823      	ldr	r3, [r4, #0]
 800f814:	f023 0320 	bic.w	r3, r3, #32
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	2310      	movs	r3, #16
 800f81c:	e7b0      	b.n	800f780 <_printf_i+0xfc>
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	f043 0320 	orr.w	r3, r3, #32
 800f824:	6023      	str	r3, [r4, #0]
 800f826:	2378      	movs	r3, #120	; 0x78
 800f828:	4828      	ldr	r0, [pc, #160]	; (800f8cc <_printf_i+0x248>)
 800f82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f82e:	e7e3      	b.n	800f7f8 <_printf_i+0x174>
 800f830:	0659      	lsls	r1, r3, #25
 800f832:	bf48      	it	mi
 800f834:	b2b6      	uxthmi	r6, r6
 800f836:	e7e6      	b.n	800f806 <_printf_i+0x182>
 800f838:	4615      	mov	r5, r2
 800f83a:	e7bb      	b.n	800f7b4 <_printf_i+0x130>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	6826      	ldr	r6, [r4, #0]
 800f840:	6961      	ldr	r1, [r4, #20]
 800f842:	1d18      	adds	r0, r3, #4
 800f844:	6028      	str	r0, [r5, #0]
 800f846:	0635      	lsls	r5, r6, #24
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	d501      	bpl.n	800f850 <_printf_i+0x1cc>
 800f84c:	6019      	str	r1, [r3, #0]
 800f84e:	e002      	b.n	800f856 <_printf_i+0x1d2>
 800f850:	0670      	lsls	r0, r6, #25
 800f852:	d5fb      	bpl.n	800f84c <_printf_i+0x1c8>
 800f854:	8019      	strh	r1, [r3, #0]
 800f856:	2300      	movs	r3, #0
 800f858:	6123      	str	r3, [r4, #16]
 800f85a:	4615      	mov	r5, r2
 800f85c:	e7ba      	b.n	800f7d4 <_printf_i+0x150>
 800f85e:	682b      	ldr	r3, [r5, #0]
 800f860:	1d1a      	adds	r2, r3, #4
 800f862:	602a      	str	r2, [r5, #0]
 800f864:	681d      	ldr	r5, [r3, #0]
 800f866:	6862      	ldr	r2, [r4, #4]
 800f868:	2100      	movs	r1, #0
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7f0 fcb8 	bl	80001e0 <memchr>
 800f870:	b108      	cbz	r0, 800f876 <_printf_i+0x1f2>
 800f872:	1b40      	subs	r0, r0, r5
 800f874:	6060      	str	r0, [r4, #4]
 800f876:	6863      	ldr	r3, [r4, #4]
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	2300      	movs	r3, #0
 800f87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f880:	e7a8      	b.n	800f7d4 <_printf_i+0x150>
 800f882:	6923      	ldr	r3, [r4, #16]
 800f884:	462a      	mov	r2, r5
 800f886:	4649      	mov	r1, r9
 800f888:	4640      	mov	r0, r8
 800f88a:	47d0      	blx	sl
 800f88c:	3001      	adds	r0, #1
 800f88e:	d0ab      	beq.n	800f7e8 <_printf_i+0x164>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	079b      	lsls	r3, r3, #30
 800f894:	d413      	bmi.n	800f8be <_printf_i+0x23a>
 800f896:	68e0      	ldr	r0, [r4, #12]
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	4298      	cmp	r0, r3
 800f89c:	bfb8      	it	lt
 800f89e:	4618      	movlt	r0, r3
 800f8a0:	e7a4      	b.n	800f7ec <_printf_i+0x168>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	4649      	mov	r1, r9
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	47d0      	blx	sl
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d09b      	beq.n	800f7e8 <_printf_i+0x164>
 800f8b0:	3501      	adds	r5, #1
 800f8b2:	68e3      	ldr	r3, [r4, #12]
 800f8b4:	9903      	ldr	r1, [sp, #12]
 800f8b6:	1a5b      	subs	r3, r3, r1
 800f8b8:	42ab      	cmp	r3, r5
 800f8ba:	dcf2      	bgt.n	800f8a2 <_printf_i+0x21e>
 800f8bc:	e7eb      	b.n	800f896 <_printf_i+0x212>
 800f8be:	2500      	movs	r5, #0
 800f8c0:	f104 0619 	add.w	r6, r4, #25
 800f8c4:	e7f5      	b.n	800f8b2 <_printf_i+0x22e>
 800f8c6:	bf00      	nop
 800f8c8:	08017632 	.word	0x08017632
 800f8cc:	08017643 	.word	0x08017643

0800f8d0 <_scanf_float>:
 800f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	b087      	sub	sp, #28
 800f8d6:	4617      	mov	r7, r2
 800f8d8:	9303      	str	r3, [sp, #12]
 800f8da:	688b      	ldr	r3, [r1, #8]
 800f8dc:	1e5a      	subs	r2, r3, #1
 800f8de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f8e2:	bf83      	ittte	hi
 800f8e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f8e8:	195b      	addhi	r3, r3, r5
 800f8ea:	9302      	strhi	r3, [sp, #8]
 800f8ec:	2300      	movls	r3, #0
 800f8ee:	bf86      	itte	hi
 800f8f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f8f4:	608b      	strhi	r3, [r1, #8]
 800f8f6:	9302      	strls	r3, [sp, #8]
 800f8f8:	680b      	ldr	r3, [r1, #0]
 800f8fa:	468b      	mov	fp, r1
 800f8fc:	2500      	movs	r5, #0
 800f8fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f902:	f84b 3b1c 	str.w	r3, [fp], #28
 800f906:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f90a:	4680      	mov	r8, r0
 800f90c:	460c      	mov	r4, r1
 800f90e:	465e      	mov	r6, fp
 800f910:	46aa      	mov	sl, r5
 800f912:	46a9      	mov	r9, r5
 800f914:	9501      	str	r5, [sp, #4]
 800f916:	68a2      	ldr	r2, [r4, #8]
 800f918:	b152      	cbz	r2, 800f930 <_scanf_float+0x60>
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	2b4e      	cmp	r3, #78	; 0x4e
 800f920:	d864      	bhi.n	800f9ec <_scanf_float+0x11c>
 800f922:	2b40      	cmp	r3, #64	; 0x40
 800f924:	d83c      	bhi.n	800f9a0 <_scanf_float+0xd0>
 800f926:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f92a:	b2c8      	uxtb	r0, r1
 800f92c:	280e      	cmp	r0, #14
 800f92e:	d93a      	bls.n	800f9a6 <_scanf_float+0xd6>
 800f930:	f1b9 0f00 	cmp.w	r9, #0
 800f934:	d003      	beq.n	800f93e <_scanf_float+0x6e>
 800f936:	6823      	ldr	r3, [r4, #0]
 800f938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f942:	f1ba 0f01 	cmp.w	sl, #1
 800f946:	f200 8113 	bhi.w	800fb70 <_scanf_float+0x2a0>
 800f94a:	455e      	cmp	r6, fp
 800f94c:	f200 8105 	bhi.w	800fb5a <_scanf_float+0x28a>
 800f950:	2501      	movs	r5, #1
 800f952:	4628      	mov	r0, r5
 800f954:	b007      	add	sp, #28
 800f956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f95e:	2a0d      	cmp	r2, #13
 800f960:	d8e6      	bhi.n	800f930 <_scanf_float+0x60>
 800f962:	a101      	add	r1, pc, #4	; (adr r1, 800f968 <_scanf_float+0x98>)
 800f964:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f968:	0800faa7 	.word	0x0800faa7
 800f96c:	0800f931 	.word	0x0800f931
 800f970:	0800f931 	.word	0x0800f931
 800f974:	0800f931 	.word	0x0800f931
 800f978:	0800fb07 	.word	0x0800fb07
 800f97c:	0800fadf 	.word	0x0800fadf
 800f980:	0800f931 	.word	0x0800f931
 800f984:	0800f931 	.word	0x0800f931
 800f988:	0800fab5 	.word	0x0800fab5
 800f98c:	0800f931 	.word	0x0800f931
 800f990:	0800f931 	.word	0x0800f931
 800f994:	0800f931 	.word	0x0800f931
 800f998:	0800f931 	.word	0x0800f931
 800f99c:	0800fa6d 	.word	0x0800fa6d
 800f9a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f9a4:	e7db      	b.n	800f95e <_scanf_float+0x8e>
 800f9a6:	290e      	cmp	r1, #14
 800f9a8:	d8c2      	bhi.n	800f930 <_scanf_float+0x60>
 800f9aa:	a001      	add	r0, pc, #4	; (adr r0, 800f9b0 <_scanf_float+0xe0>)
 800f9ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9b0:	0800fa5f 	.word	0x0800fa5f
 800f9b4:	0800f931 	.word	0x0800f931
 800f9b8:	0800fa5f 	.word	0x0800fa5f
 800f9bc:	0800faf3 	.word	0x0800faf3
 800f9c0:	0800f931 	.word	0x0800f931
 800f9c4:	0800fa0d 	.word	0x0800fa0d
 800f9c8:	0800fa49 	.word	0x0800fa49
 800f9cc:	0800fa49 	.word	0x0800fa49
 800f9d0:	0800fa49 	.word	0x0800fa49
 800f9d4:	0800fa49 	.word	0x0800fa49
 800f9d8:	0800fa49 	.word	0x0800fa49
 800f9dc:	0800fa49 	.word	0x0800fa49
 800f9e0:	0800fa49 	.word	0x0800fa49
 800f9e4:	0800fa49 	.word	0x0800fa49
 800f9e8:	0800fa49 	.word	0x0800fa49
 800f9ec:	2b6e      	cmp	r3, #110	; 0x6e
 800f9ee:	d809      	bhi.n	800fa04 <_scanf_float+0x134>
 800f9f0:	2b60      	cmp	r3, #96	; 0x60
 800f9f2:	d8b2      	bhi.n	800f95a <_scanf_float+0x8a>
 800f9f4:	2b54      	cmp	r3, #84	; 0x54
 800f9f6:	d077      	beq.n	800fae8 <_scanf_float+0x218>
 800f9f8:	2b59      	cmp	r3, #89	; 0x59
 800f9fa:	d199      	bne.n	800f930 <_scanf_float+0x60>
 800f9fc:	2d07      	cmp	r5, #7
 800f9fe:	d197      	bne.n	800f930 <_scanf_float+0x60>
 800fa00:	2508      	movs	r5, #8
 800fa02:	e029      	b.n	800fa58 <_scanf_float+0x188>
 800fa04:	2b74      	cmp	r3, #116	; 0x74
 800fa06:	d06f      	beq.n	800fae8 <_scanf_float+0x218>
 800fa08:	2b79      	cmp	r3, #121	; 0x79
 800fa0a:	e7f6      	b.n	800f9fa <_scanf_float+0x12a>
 800fa0c:	6821      	ldr	r1, [r4, #0]
 800fa0e:	05c8      	lsls	r0, r1, #23
 800fa10:	d51a      	bpl.n	800fa48 <_scanf_float+0x178>
 800fa12:	9b02      	ldr	r3, [sp, #8]
 800fa14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fa18:	6021      	str	r1, [r4, #0]
 800fa1a:	f109 0901 	add.w	r9, r9, #1
 800fa1e:	b11b      	cbz	r3, 800fa28 <_scanf_float+0x158>
 800fa20:	3b01      	subs	r3, #1
 800fa22:	3201      	adds	r2, #1
 800fa24:	9302      	str	r3, [sp, #8]
 800fa26:	60a2      	str	r2, [r4, #8]
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	60a3      	str	r3, [r4, #8]
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	3301      	adds	r3, #1
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	3b01      	subs	r3, #1
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	607b      	str	r3, [r7, #4]
 800fa3c:	f340 8084 	ble.w	800fb48 <_scanf_float+0x278>
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	3301      	adds	r3, #1
 800fa44:	603b      	str	r3, [r7, #0]
 800fa46:	e766      	b.n	800f916 <_scanf_float+0x46>
 800fa48:	eb1a 0f05 	cmn.w	sl, r5
 800fa4c:	f47f af70 	bne.w	800f930 <_scanf_float+0x60>
 800fa50:	6822      	ldr	r2, [r4, #0]
 800fa52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fa56:	6022      	str	r2, [r4, #0]
 800fa58:	f806 3b01 	strb.w	r3, [r6], #1
 800fa5c:	e7e4      	b.n	800fa28 <_scanf_float+0x158>
 800fa5e:	6822      	ldr	r2, [r4, #0]
 800fa60:	0610      	lsls	r0, r2, #24
 800fa62:	f57f af65 	bpl.w	800f930 <_scanf_float+0x60>
 800fa66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa6a:	e7f4      	b.n	800fa56 <_scanf_float+0x186>
 800fa6c:	f1ba 0f00 	cmp.w	sl, #0
 800fa70:	d10e      	bne.n	800fa90 <_scanf_float+0x1c0>
 800fa72:	f1b9 0f00 	cmp.w	r9, #0
 800fa76:	d10e      	bne.n	800fa96 <_scanf_float+0x1c6>
 800fa78:	6822      	ldr	r2, [r4, #0]
 800fa7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa82:	d108      	bne.n	800fa96 <_scanf_float+0x1c6>
 800fa84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa88:	6022      	str	r2, [r4, #0]
 800fa8a:	f04f 0a01 	mov.w	sl, #1
 800fa8e:	e7e3      	b.n	800fa58 <_scanf_float+0x188>
 800fa90:	f1ba 0f02 	cmp.w	sl, #2
 800fa94:	d055      	beq.n	800fb42 <_scanf_float+0x272>
 800fa96:	2d01      	cmp	r5, #1
 800fa98:	d002      	beq.n	800faa0 <_scanf_float+0x1d0>
 800fa9a:	2d04      	cmp	r5, #4
 800fa9c:	f47f af48 	bne.w	800f930 <_scanf_float+0x60>
 800faa0:	3501      	adds	r5, #1
 800faa2:	b2ed      	uxtb	r5, r5
 800faa4:	e7d8      	b.n	800fa58 <_scanf_float+0x188>
 800faa6:	f1ba 0f01 	cmp.w	sl, #1
 800faaa:	f47f af41 	bne.w	800f930 <_scanf_float+0x60>
 800faae:	f04f 0a02 	mov.w	sl, #2
 800fab2:	e7d1      	b.n	800fa58 <_scanf_float+0x188>
 800fab4:	b97d      	cbnz	r5, 800fad6 <_scanf_float+0x206>
 800fab6:	f1b9 0f00 	cmp.w	r9, #0
 800faba:	f47f af3c 	bne.w	800f936 <_scanf_float+0x66>
 800fabe:	6822      	ldr	r2, [r4, #0]
 800fac0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fac4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fac8:	f47f af39 	bne.w	800f93e <_scanf_float+0x6e>
 800facc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fad0:	6022      	str	r2, [r4, #0]
 800fad2:	2501      	movs	r5, #1
 800fad4:	e7c0      	b.n	800fa58 <_scanf_float+0x188>
 800fad6:	2d03      	cmp	r5, #3
 800fad8:	d0e2      	beq.n	800faa0 <_scanf_float+0x1d0>
 800fada:	2d05      	cmp	r5, #5
 800fadc:	e7de      	b.n	800fa9c <_scanf_float+0x1cc>
 800fade:	2d02      	cmp	r5, #2
 800fae0:	f47f af26 	bne.w	800f930 <_scanf_float+0x60>
 800fae4:	2503      	movs	r5, #3
 800fae6:	e7b7      	b.n	800fa58 <_scanf_float+0x188>
 800fae8:	2d06      	cmp	r5, #6
 800faea:	f47f af21 	bne.w	800f930 <_scanf_float+0x60>
 800faee:	2507      	movs	r5, #7
 800faf0:	e7b2      	b.n	800fa58 <_scanf_float+0x188>
 800faf2:	6822      	ldr	r2, [r4, #0]
 800faf4:	0591      	lsls	r1, r2, #22
 800faf6:	f57f af1b 	bpl.w	800f930 <_scanf_float+0x60>
 800fafa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fafe:	6022      	str	r2, [r4, #0]
 800fb00:	f8cd 9004 	str.w	r9, [sp, #4]
 800fb04:	e7a8      	b.n	800fa58 <_scanf_float+0x188>
 800fb06:	6822      	ldr	r2, [r4, #0]
 800fb08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fb0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fb10:	d006      	beq.n	800fb20 <_scanf_float+0x250>
 800fb12:	0550      	lsls	r0, r2, #21
 800fb14:	f57f af0c 	bpl.w	800f930 <_scanf_float+0x60>
 800fb18:	f1b9 0f00 	cmp.w	r9, #0
 800fb1c:	f43f af0f 	beq.w	800f93e <_scanf_float+0x6e>
 800fb20:	0591      	lsls	r1, r2, #22
 800fb22:	bf58      	it	pl
 800fb24:	9901      	ldrpl	r1, [sp, #4]
 800fb26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb2a:	bf58      	it	pl
 800fb2c:	eba9 0101 	subpl.w	r1, r9, r1
 800fb30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fb34:	bf58      	it	pl
 800fb36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb3a:	6022      	str	r2, [r4, #0]
 800fb3c:	f04f 0900 	mov.w	r9, #0
 800fb40:	e78a      	b.n	800fa58 <_scanf_float+0x188>
 800fb42:	f04f 0a03 	mov.w	sl, #3
 800fb46:	e787      	b.n	800fa58 <_scanf_float+0x188>
 800fb48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	4640      	mov	r0, r8
 800fb50:	4798      	blx	r3
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f43f aedf 	beq.w	800f916 <_scanf_float+0x46>
 800fb58:	e6ea      	b.n	800f930 <_scanf_float+0x60>
 800fb5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb62:	463a      	mov	r2, r7
 800fb64:	4640      	mov	r0, r8
 800fb66:	4798      	blx	r3
 800fb68:	6923      	ldr	r3, [r4, #16]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	e6ec      	b.n	800f94a <_scanf_float+0x7a>
 800fb70:	1e6b      	subs	r3, r5, #1
 800fb72:	2b06      	cmp	r3, #6
 800fb74:	d825      	bhi.n	800fbc2 <_scanf_float+0x2f2>
 800fb76:	2d02      	cmp	r5, #2
 800fb78:	d836      	bhi.n	800fbe8 <_scanf_float+0x318>
 800fb7a:	455e      	cmp	r6, fp
 800fb7c:	f67f aee8 	bls.w	800f950 <_scanf_float+0x80>
 800fb80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb88:	463a      	mov	r2, r7
 800fb8a:	4640      	mov	r0, r8
 800fb8c:	4798      	blx	r3
 800fb8e:	6923      	ldr	r3, [r4, #16]
 800fb90:	3b01      	subs	r3, #1
 800fb92:	6123      	str	r3, [r4, #16]
 800fb94:	e7f1      	b.n	800fb7a <_scanf_float+0x2aa>
 800fb96:	9802      	ldr	r0, [sp, #8]
 800fb98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fba0:	9002      	str	r0, [sp, #8]
 800fba2:	463a      	mov	r2, r7
 800fba4:	4640      	mov	r0, r8
 800fba6:	4798      	blx	r3
 800fba8:	6923      	ldr	r3, [r4, #16]
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	6123      	str	r3, [r4, #16]
 800fbae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbb2:	fa5f fa8a 	uxtb.w	sl, sl
 800fbb6:	f1ba 0f02 	cmp.w	sl, #2
 800fbba:	d1ec      	bne.n	800fb96 <_scanf_float+0x2c6>
 800fbbc:	3d03      	subs	r5, #3
 800fbbe:	b2ed      	uxtb	r5, r5
 800fbc0:	1b76      	subs	r6, r6, r5
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	05da      	lsls	r2, r3, #23
 800fbc6:	d52f      	bpl.n	800fc28 <_scanf_float+0x358>
 800fbc8:	055b      	lsls	r3, r3, #21
 800fbca:	d510      	bpl.n	800fbee <_scanf_float+0x31e>
 800fbcc:	455e      	cmp	r6, fp
 800fbce:	f67f aebf 	bls.w	800f950 <_scanf_float+0x80>
 800fbd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbda:	463a      	mov	r2, r7
 800fbdc:	4640      	mov	r0, r8
 800fbde:	4798      	blx	r3
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	3b01      	subs	r3, #1
 800fbe4:	6123      	str	r3, [r4, #16]
 800fbe6:	e7f1      	b.n	800fbcc <_scanf_float+0x2fc>
 800fbe8:	46aa      	mov	sl, r5
 800fbea:	9602      	str	r6, [sp, #8]
 800fbec:	e7df      	b.n	800fbae <_scanf_float+0x2de>
 800fbee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fbf2:	6923      	ldr	r3, [r4, #16]
 800fbf4:	2965      	cmp	r1, #101	; 0x65
 800fbf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbfa:	f106 35ff 	add.w	r5, r6, #4294967295
 800fbfe:	6123      	str	r3, [r4, #16]
 800fc00:	d00c      	beq.n	800fc1c <_scanf_float+0x34c>
 800fc02:	2945      	cmp	r1, #69	; 0x45
 800fc04:	d00a      	beq.n	800fc1c <_scanf_float+0x34c>
 800fc06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc0a:	463a      	mov	r2, r7
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	4798      	blx	r3
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc16:	3b01      	subs	r3, #1
 800fc18:	1eb5      	subs	r5, r6, #2
 800fc1a:	6123      	str	r3, [r4, #16]
 800fc1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc20:	463a      	mov	r2, r7
 800fc22:	4640      	mov	r0, r8
 800fc24:	4798      	blx	r3
 800fc26:	462e      	mov	r6, r5
 800fc28:	6825      	ldr	r5, [r4, #0]
 800fc2a:	f015 0510 	ands.w	r5, r5, #16
 800fc2e:	d159      	bne.n	800fce4 <_scanf_float+0x414>
 800fc30:	7035      	strb	r5, [r6, #0]
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fc38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc3c:	d11b      	bne.n	800fc76 <_scanf_float+0x3a6>
 800fc3e:	9b01      	ldr	r3, [sp, #4]
 800fc40:	454b      	cmp	r3, r9
 800fc42:	eba3 0209 	sub.w	r2, r3, r9
 800fc46:	d123      	bne.n	800fc90 <_scanf_float+0x3c0>
 800fc48:	2200      	movs	r2, #0
 800fc4a:	4659      	mov	r1, fp
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	f000 fe99 	bl	8010984 <_strtod_r>
 800fc52:	6822      	ldr	r2, [r4, #0]
 800fc54:	9b03      	ldr	r3, [sp, #12]
 800fc56:	f012 0f02 	tst.w	r2, #2
 800fc5a:	ec57 6b10 	vmov	r6, r7, d0
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	d021      	beq.n	800fca6 <_scanf_float+0x3d6>
 800fc62:	9903      	ldr	r1, [sp, #12]
 800fc64:	1d1a      	adds	r2, r3, #4
 800fc66:	600a      	str	r2, [r1, #0]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	e9c3 6700 	strd	r6, r7, [r3]
 800fc6e:	68e3      	ldr	r3, [r4, #12]
 800fc70:	3301      	adds	r3, #1
 800fc72:	60e3      	str	r3, [r4, #12]
 800fc74:	e66d      	b.n	800f952 <_scanf_float+0x82>
 800fc76:	9b04      	ldr	r3, [sp, #16]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d0e5      	beq.n	800fc48 <_scanf_float+0x378>
 800fc7c:	9905      	ldr	r1, [sp, #20]
 800fc7e:	230a      	movs	r3, #10
 800fc80:	462a      	mov	r2, r5
 800fc82:	3101      	adds	r1, #1
 800fc84:	4640      	mov	r0, r8
 800fc86:	f000 ff05 	bl	8010a94 <_strtol_r>
 800fc8a:	9b04      	ldr	r3, [sp, #16]
 800fc8c:	9e05      	ldr	r6, [sp, #20]
 800fc8e:	1ac2      	subs	r2, r0, r3
 800fc90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fc94:	429e      	cmp	r6, r3
 800fc96:	bf28      	it	cs
 800fc98:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fc9c:	4912      	ldr	r1, [pc, #72]	; (800fce8 <_scanf_float+0x418>)
 800fc9e:	4630      	mov	r0, r6
 800fca0:	f000 f82c 	bl	800fcfc <siprintf>
 800fca4:	e7d0      	b.n	800fc48 <_scanf_float+0x378>
 800fca6:	9903      	ldr	r1, [sp, #12]
 800fca8:	f012 0f04 	tst.w	r2, #4
 800fcac:	f103 0204 	add.w	r2, r3, #4
 800fcb0:	600a      	str	r2, [r1, #0]
 800fcb2:	d1d9      	bne.n	800fc68 <_scanf_float+0x398>
 800fcb4:	f8d3 8000 	ldr.w	r8, [r3]
 800fcb8:	ee10 2a10 	vmov	r2, s0
 800fcbc:	ee10 0a10 	vmov	r0, s0
 800fcc0:	463b      	mov	r3, r7
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 ff32 	bl	8000b2c <__aeabi_dcmpun>
 800fcc8:	b128      	cbz	r0, 800fcd6 <_scanf_float+0x406>
 800fcca:	4808      	ldr	r0, [pc, #32]	; (800fcec <_scanf_float+0x41c>)
 800fccc:	f000 f810 	bl	800fcf0 <nanf>
 800fcd0:	ed88 0a00 	vstr	s0, [r8]
 800fcd4:	e7cb      	b.n	800fc6e <_scanf_float+0x39e>
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	4639      	mov	r1, r7
 800fcda:	f7f0 ff85 	bl	8000be8 <__aeabi_d2f>
 800fcde:	f8c8 0000 	str.w	r0, [r8]
 800fce2:	e7c4      	b.n	800fc6e <_scanf_float+0x39e>
 800fce4:	2500      	movs	r5, #0
 800fce6:	e634      	b.n	800f952 <_scanf_float+0x82>
 800fce8:	08017654 	.word	0x08017654
 800fcec:	08017a60 	.word	0x08017a60

0800fcf0 <nanf>:
 800fcf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fcf8 <nanf+0x8>
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	7fc00000 	.word	0x7fc00000

0800fcfc <siprintf>:
 800fcfc:	b40e      	push	{r1, r2, r3}
 800fcfe:	b500      	push	{lr}
 800fd00:	b09c      	sub	sp, #112	; 0x70
 800fd02:	ab1d      	add	r3, sp, #116	; 0x74
 800fd04:	9002      	str	r0, [sp, #8]
 800fd06:	9006      	str	r0, [sp, #24]
 800fd08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd0c:	4809      	ldr	r0, [pc, #36]	; (800fd34 <siprintf+0x38>)
 800fd0e:	9107      	str	r1, [sp, #28]
 800fd10:	9104      	str	r1, [sp, #16]
 800fd12:	4909      	ldr	r1, [pc, #36]	; (800fd38 <siprintf+0x3c>)
 800fd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd18:	9105      	str	r1, [sp, #20]
 800fd1a:	6800      	ldr	r0, [r0, #0]
 800fd1c:	9301      	str	r3, [sp, #4]
 800fd1e:	a902      	add	r1, sp, #8
 800fd20:	f002 fee4 	bl	8012aec <_svfiprintf_r>
 800fd24:	9b02      	ldr	r3, [sp, #8]
 800fd26:	2200      	movs	r2, #0
 800fd28:	701a      	strb	r2, [r3, #0]
 800fd2a:	b01c      	add	sp, #112	; 0x70
 800fd2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd30:	b003      	add	sp, #12
 800fd32:	4770      	bx	lr
 800fd34:	200001fc 	.word	0x200001fc
 800fd38:	ffff0208 	.word	0xffff0208

0800fd3c <sulp>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	4604      	mov	r4, r0
 800fd40:	460d      	mov	r5, r1
 800fd42:	ec45 4b10 	vmov	d0, r4, r5
 800fd46:	4616      	mov	r6, r2
 800fd48:	f002 fc2e 	bl	80125a8 <__ulp>
 800fd4c:	ec51 0b10 	vmov	r0, r1, d0
 800fd50:	b17e      	cbz	r6, 800fd72 <sulp+0x36>
 800fd52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fd56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	dd09      	ble.n	800fd72 <sulp+0x36>
 800fd5e:	051b      	lsls	r3, r3, #20
 800fd60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fd64:	2400      	movs	r4, #0
 800fd66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	462b      	mov	r3, r5
 800fd6e:	f7f0 fc43 	bl	80005f8 <__aeabi_dmul>
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	0000      	movs	r0, r0
	...

0800fd78 <_strtod_l>:
 800fd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	ed2d 8b02 	vpush	{d8}
 800fd80:	b09d      	sub	sp, #116	; 0x74
 800fd82:	461f      	mov	r7, r3
 800fd84:	2300      	movs	r3, #0
 800fd86:	9318      	str	r3, [sp, #96]	; 0x60
 800fd88:	4ba2      	ldr	r3, [pc, #648]	; (8010014 <_strtod_l+0x29c>)
 800fd8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	9305      	str	r3, [sp, #20]
 800fd90:	4604      	mov	r4, r0
 800fd92:	4618      	mov	r0, r3
 800fd94:	4688      	mov	r8, r1
 800fd96:	f7f0 fa1b 	bl	80001d0 <strlen>
 800fd9a:	f04f 0a00 	mov.w	sl, #0
 800fd9e:	4605      	mov	r5, r0
 800fda0:	f04f 0b00 	mov.w	fp, #0
 800fda4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fda8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdaa:	781a      	ldrb	r2, [r3, #0]
 800fdac:	2a2b      	cmp	r2, #43	; 0x2b
 800fdae:	d04e      	beq.n	800fe4e <_strtod_l+0xd6>
 800fdb0:	d83b      	bhi.n	800fe2a <_strtod_l+0xb2>
 800fdb2:	2a0d      	cmp	r2, #13
 800fdb4:	d834      	bhi.n	800fe20 <_strtod_l+0xa8>
 800fdb6:	2a08      	cmp	r2, #8
 800fdb8:	d834      	bhi.n	800fe24 <_strtod_l+0xac>
 800fdba:	2a00      	cmp	r2, #0
 800fdbc:	d03e      	beq.n	800fe3c <_strtod_l+0xc4>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	930a      	str	r3, [sp, #40]	; 0x28
 800fdc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fdc4:	7833      	ldrb	r3, [r6, #0]
 800fdc6:	2b30      	cmp	r3, #48	; 0x30
 800fdc8:	f040 80b0 	bne.w	800ff2c <_strtod_l+0x1b4>
 800fdcc:	7873      	ldrb	r3, [r6, #1]
 800fdce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fdd2:	2b58      	cmp	r3, #88	; 0x58
 800fdd4:	d168      	bne.n	800fea8 <_strtod_l+0x130>
 800fdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	ab18      	add	r3, sp, #96	; 0x60
 800fddc:	9702      	str	r7, [sp, #8]
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	4a8d      	ldr	r2, [pc, #564]	; (8010018 <_strtod_l+0x2a0>)
 800fde2:	ab19      	add	r3, sp, #100	; 0x64
 800fde4:	a917      	add	r1, sp, #92	; 0x5c
 800fde6:	4620      	mov	r0, r4
 800fde8:	f001 fd38 	bl	801185c <__gethex>
 800fdec:	f010 0707 	ands.w	r7, r0, #7
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	d005      	beq.n	800fe00 <_strtod_l+0x88>
 800fdf4:	2f06      	cmp	r7, #6
 800fdf6:	d12c      	bne.n	800fe52 <_strtod_l+0xda>
 800fdf8:	3601      	adds	r6, #1
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	9617      	str	r6, [sp, #92]	; 0x5c
 800fdfe:	930a      	str	r3, [sp, #40]	; 0x28
 800fe00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f040 8590 	bne.w	8010928 <_strtod_l+0xbb0>
 800fe08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe0a:	b1eb      	cbz	r3, 800fe48 <_strtod_l+0xd0>
 800fe0c:	4652      	mov	r2, sl
 800fe0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe12:	ec43 2b10 	vmov	d0, r2, r3
 800fe16:	b01d      	add	sp, #116	; 0x74
 800fe18:	ecbd 8b02 	vpop	{d8}
 800fe1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe20:	2a20      	cmp	r2, #32
 800fe22:	d1cc      	bne.n	800fdbe <_strtod_l+0x46>
 800fe24:	3301      	adds	r3, #1
 800fe26:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe28:	e7be      	b.n	800fda8 <_strtod_l+0x30>
 800fe2a:	2a2d      	cmp	r2, #45	; 0x2d
 800fe2c:	d1c7      	bne.n	800fdbe <_strtod_l+0x46>
 800fe2e:	2201      	movs	r2, #1
 800fe30:	920a      	str	r2, [sp, #40]	; 0x28
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe36:	785b      	ldrb	r3, [r3, #1]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1c2      	bne.n	800fdc2 <_strtod_l+0x4a>
 800fe3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f040 856e 	bne.w	8010924 <_strtod_l+0xbac>
 800fe48:	4652      	mov	r2, sl
 800fe4a:	465b      	mov	r3, fp
 800fe4c:	e7e1      	b.n	800fe12 <_strtod_l+0x9a>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	e7ee      	b.n	800fe30 <_strtod_l+0xb8>
 800fe52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe54:	b13a      	cbz	r2, 800fe66 <_strtod_l+0xee>
 800fe56:	2135      	movs	r1, #53	; 0x35
 800fe58:	a81a      	add	r0, sp, #104	; 0x68
 800fe5a:	f002 fcb0 	bl	80127be <__copybits>
 800fe5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe60:	4620      	mov	r0, r4
 800fe62:	f002 f86f 	bl	8011f44 <_Bfree>
 800fe66:	3f01      	subs	r7, #1
 800fe68:	2f04      	cmp	r7, #4
 800fe6a:	d806      	bhi.n	800fe7a <_strtod_l+0x102>
 800fe6c:	e8df f007 	tbb	[pc, r7]
 800fe70:	1714030a 	.word	0x1714030a
 800fe74:	0a          	.byte	0x0a
 800fe75:	00          	.byte	0x00
 800fe76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fe7a:	0728      	lsls	r0, r5, #28
 800fe7c:	d5c0      	bpl.n	800fe00 <_strtod_l+0x88>
 800fe7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fe82:	e7bd      	b.n	800fe00 <_strtod_l+0x88>
 800fe84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fe88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fe8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fe8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fe92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fe96:	e7f0      	b.n	800fe7a <_strtod_l+0x102>
 800fe98:	f8df b180 	ldr.w	fp, [pc, #384]	; 801001c <_strtod_l+0x2a4>
 800fe9c:	e7ed      	b.n	800fe7a <_strtod_l+0x102>
 800fe9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fea2:	f04f 3aff 	mov.w	sl, #4294967295
 800fea6:	e7e8      	b.n	800fe7a <_strtod_l+0x102>
 800fea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	9217      	str	r2, [sp, #92]	; 0x5c
 800feae:	785b      	ldrb	r3, [r3, #1]
 800feb0:	2b30      	cmp	r3, #48	; 0x30
 800feb2:	d0f9      	beq.n	800fea8 <_strtod_l+0x130>
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d0a3      	beq.n	800fe00 <_strtod_l+0x88>
 800feb8:	2301      	movs	r3, #1
 800feba:	f04f 0900 	mov.w	r9, #0
 800febe:	9304      	str	r3, [sp, #16]
 800fec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fec2:	9308      	str	r3, [sp, #32]
 800fec4:	f8cd 901c 	str.w	r9, [sp, #28]
 800fec8:	464f      	mov	r7, r9
 800feca:	220a      	movs	r2, #10
 800fecc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fece:	7806      	ldrb	r6, [r0, #0]
 800fed0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fed4:	b2d9      	uxtb	r1, r3
 800fed6:	2909      	cmp	r1, #9
 800fed8:	d92a      	bls.n	800ff30 <_strtod_l+0x1b8>
 800feda:	9905      	ldr	r1, [sp, #20]
 800fedc:	462a      	mov	r2, r5
 800fede:	f002 ff1f 	bl	8012d20 <strncmp>
 800fee2:	b398      	cbz	r0, 800ff4c <_strtod_l+0x1d4>
 800fee4:	2000      	movs	r0, #0
 800fee6:	4632      	mov	r2, r6
 800fee8:	463d      	mov	r5, r7
 800feea:	9005      	str	r0, [sp, #20]
 800feec:	4603      	mov	r3, r0
 800feee:	2a65      	cmp	r2, #101	; 0x65
 800fef0:	d001      	beq.n	800fef6 <_strtod_l+0x17e>
 800fef2:	2a45      	cmp	r2, #69	; 0x45
 800fef4:	d118      	bne.n	800ff28 <_strtod_l+0x1b0>
 800fef6:	b91d      	cbnz	r5, 800ff00 <_strtod_l+0x188>
 800fef8:	9a04      	ldr	r2, [sp, #16]
 800fefa:	4302      	orrs	r2, r0
 800fefc:	d09e      	beq.n	800fe3c <_strtod_l+0xc4>
 800fefe:	2500      	movs	r5, #0
 800ff00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ff04:	f108 0201 	add.w	r2, r8, #1
 800ff08:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ff0e:	2a2b      	cmp	r2, #43	; 0x2b
 800ff10:	d075      	beq.n	800fffe <_strtod_l+0x286>
 800ff12:	2a2d      	cmp	r2, #45	; 0x2d
 800ff14:	d07b      	beq.n	801000e <_strtod_l+0x296>
 800ff16:	f04f 0c00 	mov.w	ip, #0
 800ff1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ff1e:	2909      	cmp	r1, #9
 800ff20:	f240 8082 	bls.w	8010028 <_strtod_l+0x2b0>
 800ff24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff28:	2600      	movs	r6, #0
 800ff2a:	e09d      	b.n	8010068 <_strtod_l+0x2f0>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	e7c4      	b.n	800feba <_strtod_l+0x142>
 800ff30:	2f08      	cmp	r7, #8
 800ff32:	bfd8      	it	le
 800ff34:	9907      	ldrle	r1, [sp, #28]
 800ff36:	f100 0001 	add.w	r0, r0, #1
 800ff3a:	bfda      	itte	le
 800ff3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff40:	9307      	strle	r3, [sp, #28]
 800ff42:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ff46:	3701      	adds	r7, #1
 800ff48:	9017      	str	r0, [sp, #92]	; 0x5c
 800ff4a:	e7bf      	b.n	800fecc <_strtod_l+0x154>
 800ff4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff4e:	195a      	adds	r2, r3, r5
 800ff50:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff52:	5d5a      	ldrb	r2, [r3, r5]
 800ff54:	2f00      	cmp	r7, #0
 800ff56:	d037      	beq.n	800ffc8 <_strtod_l+0x250>
 800ff58:	9005      	str	r0, [sp, #20]
 800ff5a:	463d      	mov	r5, r7
 800ff5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ff60:	2b09      	cmp	r3, #9
 800ff62:	d912      	bls.n	800ff8a <_strtod_l+0x212>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e7c2      	b.n	800feee <_strtod_l+0x176>
 800ff68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff6e:	785a      	ldrb	r2, [r3, #1]
 800ff70:	3001      	adds	r0, #1
 800ff72:	2a30      	cmp	r2, #48	; 0x30
 800ff74:	d0f8      	beq.n	800ff68 <_strtod_l+0x1f0>
 800ff76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ff7a:	2b08      	cmp	r3, #8
 800ff7c:	f200 84d9 	bhi.w	8010932 <_strtod_l+0xbba>
 800ff80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff82:	9005      	str	r0, [sp, #20]
 800ff84:	2000      	movs	r0, #0
 800ff86:	9308      	str	r3, [sp, #32]
 800ff88:	4605      	mov	r5, r0
 800ff8a:	3a30      	subs	r2, #48	; 0x30
 800ff8c:	f100 0301 	add.w	r3, r0, #1
 800ff90:	d014      	beq.n	800ffbc <_strtod_l+0x244>
 800ff92:	9905      	ldr	r1, [sp, #20]
 800ff94:	4419      	add	r1, r3
 800ff96:	9105      	str	r1, [sp, #20]
 800ff98:	462b      	mov	r3, r5
 800ff9a:	eb00 0e05 	add.w	lr, r0, r5
 800ff9e:	210a      	movs	r1, #10
 800ffa0:	4573      	cmp	r3, lr
 800ffa2:	d113      	bne.n	800ffcc <_strtod_l+0x254>
 800ffa4:	182b      	adds	r3, r5, r0
 800ffa6:	2b08      	cmp	r3, #8
 800ffa8:	f105 0501 	add.w	r5, r5, #1
 800ffac:	4405      	add	r5, r0
 800ffae:	dc1c      	bgt.n	800ffea <_strtod_l+0x272>
 800ffb0:	9907      	ldr	r1, [sp, #28]
 800ffb2:	230a      	movs	r3, #10
 800ffb4:	fb03 2301 	mla	r3, r3, r1, r2
 800ffb8:	9307      	str	r3, [sp, #28]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ffbe:	1c51      	adds	r1, r2, #1
 800ffc0:	9117      	str	r1, [sp, #92]	; 0x5c
 800ffc2:	7852      	ldrb	r2, [r2, #1]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	e7c9      	b.n	800ff5c <_strtod_l+0x1e4>
 800ffc8:	4638      	mov	r0, r7
 800ffca:	e7d2      	b.n	800ff72 <_strtod_l+0x1fa>
 800ffcc:	2b08      	cmp	r3, #8
 800ffce:	dc04      	bgt.n	800ffda <_strtod_l+0x262>
 800ffd0:	9e07      	ldr	r6, [sp, #28]
 800ffd2:	434e      	muls	r6, r1
 800ffd4:	9607      	str	r6, [sp, #28]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	e7e2      	b.n	800ffa0 <_strtod_l+0x228>
 800ffda:	f103 0c01 	add.w	ip, r3, #1
 800ffde:	f1bc 0f10 	cmp.w	ip, #16
 800ffe2:	bfd8      	it	le
 800ffe4:	fb01 f909 	mulle.w	r9, r1, r9
 800ffe8:	e7f5      	b.n	800ffd6 <_strtod_l+0x25e>
 800ffea:	2d10      	cmp	r5, #16
 800ffec:	bfdc      	itt	le
 800ffee:	230a      	movle	r3, #10
 800fff0:	fb03 2909 	mlale	r9, r3, r9, r2
 800fff4:	e7e1      	b.n	800ffba <_strtod_l+0x242>
 800fff6:	2300      	movs	r3, #0
 800fff8:	9305      	str	r3, [sp, #20]
 800fffa:	2301      	movs	r3, #1
 800fffc:	e77c      	b.n	800fef8 <_strtod_l+0x180>
 800fffe:	f04f 0c00 	mov.w	ip, #0
 8010002:	f108 0202 	add.w	r2, r8, #2
 8010006:	9217      	str	r2, [sp, #92]	; 0x5c
 8010008:	f898 2002 	ldrb.w	r2, [r8, #2]
 801000c:	e785      	b.n	800ff1a <_strtod_l+0x1a2>
 801000e:	f04f 0c01 	mov.w	ip, #1
 8010012:	e7f6      	b.n	8010002 <_strtod_l+0x28a>
 8010014:	080178a8 	.word	0x080178a8
 8010018:	0801765c 	.word	0x0801765c
 801001c:	7ff00000 	.word	0x7ff00000
 8010020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010022:	1c51      	adds	r1, r2, #1
 8010024:	9117      	str	r1, [sp, #92]	; 0x5c
 8010026:	7852      	ldrb	r2, [r2, #1]
 8010028:	2a30      	cmp	r2, #48	; 0x30
 801002a:	d0f9      	beq.n	8010020 <_strtod_l+0x2a8>
 801002c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010030:	2908      	cmp	r1, #8
 8010032:	f63f af79 	bhi.w	800ff28 <_strtod_l+0x1b0>
 8010036:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801003a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801003c:	9206      	str	r2, [sp, #24]
 801003e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010040:	1c51      	adds	r1, r2, #1
 8010042:	9117      	str	r1, [sp, #92]	; 0x5c
 8010044:	7852      	ldrb	r2, [r2, #1]
 8010046:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801004a:	2e09      	cmp	r6, #9
 801004c:	d937      	bls.n	80100be <_strtod_l+0x346>
 801004e:	9e06      	ldr	r6, [sp, #24]
 8010050:	1b89      	subs	r1, r1, r6
 8010052:	2908      	cmp	r1, #8
 8010054:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010058:	dc02      	bgt.n	8010060 <_strtod_l+0x2e8>
 801005a:	4576      	cmp	r6, lr
 801005c:	bfa8      	it	ge
 801005e:	4676      	movge	r6, lr
 8010060:	f1bc 0f00 	cmp.w	ip, #0
 8010064:	d000      	beq.n	8010068 <_strtod_l+0x2f0>
 8010066:	4276      	negs	r6, r6
 8010068:	2d00      	cmp	r5, #0
 801006a:	d14d      	bne.n	8010108 <_strtod_l+0x390>
 801006c:	9904      	ldr	r1, [sp, #16]
 801006e:	4301      	orrs	r1, r0
 8010070:	f47f aec6 	bne.w	800fe00 <_strtod_l+0x88>
 8010074:	2b00      	cmp	r3, #0
 8010076:	f47f aee1 	bne.w	800fe3c <_strtod_l+0xc4>
 801007a:	2a69      	cmp	r2, #105	; 0x69
 801007c:	d027      	beq.n	80100ce <_strtod_l+0x356>
 801007e:	dc24      	bgt.n	80100ca <_strtod_l+0x352>
 8010080:	2a49      	cmp	r2, #73	; 0x49
 8010082:	d024      	beq.n	80100ce <_strtod_l+0x356>
 8010084:	2a4e      	cmp	r2, #78	; 0x4e
 8010086:	f47f aed9 	bne.w	800fe3c <_strtod_l+0xc4>
 801008a:	499f      	ldr	r1, [pc, #636]	; (8010308 <_strtod_l+0x590>)
 801008c:	a817      	add	r0, sp, #92	; 0x5c
 801008e:	f001 fe3d 	bl	8011d0c <__match>
 8010092:	2800      	cmp	r0, #0
 8010094:	f43f aed2 	beq.w	800fe3c <_strtod_l+0xc4>
 8010098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	2b28      	cmp	r3, #40	; 0x28
 801009e:	d12d      	bne.n	80100fc <_strtod_l+0x384>
 80100a0:	499a      	ldr	r1, [pc, #616]	; (801030c <_strtod_l+0x594>)
 80100a2:	aa1a      	add	r2, sp, #104	; 0x68
 80100a4:	a817      	add	r0, sp, #92	; 0x5c
 80100a6:	f001 fe45 	bl	8011d34 <__hexnan>
 80100aa:	2805      	cmp	r0, #5
 80100ac:	d126      	bne.n	80100fc <_strtod_l+0x384>
 80100ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80100b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80100b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80100b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80100bc:	e6a0      	b.n	800fe00 <_strtod_l+0x88>
 80100be:	210a      	movs	r1, #10
 80100c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80100c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80100c8:	e7b9      	b.n	801003e <_strtod_l+0x2c6>
 80100ca:	2a6e      	cmp	r2, #110	; 0x6e
 80100cc:	e7db      	b.n	8010086 <_strtod_l+0x30e>
 80100ce:	4990      	ldr	r1, [pc, #576]	; (8010310 <_strtod_l+0x598>)
 80100d0:	a817      	add	r0, sp, #92	; 0x5c
 80100d2:	f001 fe1b 	bl	8011d0c <__match>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	f43f aeb0 	beq.w	800fe3c <_strtod_l+0xc4>
 80100dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100de:	498d      	ldr	r1, [pc, #564]	; (8010314 <_strtod_l+0x59c>)
 80100e0:	3b01      	subs	r3, #1
 80100e2:	a817      	add	r0, sp, #92	; 0x5c
 80100e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80100e6:	f001 fe11 	bl	8011d0c <__match>
 80100ea:	b910      	cbnz	r0, 80100f2 <_strtod_l+0x37a>
 80100ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100ee:	3301      	adds	r3, #1
 80100f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80100f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010324 <_strtod_l+0x5ac>
 80100f6:	f04f 0a00 	mov.w	sl, #0
 80100fa:	e681      	b.n	800fe00 <_strtod_l+0x88>
 80100fc:	4886      	ldr	r0, [pc, #536]	; (8010318 <_strtod_l+0x5a0>)
 80100fe:	f002 fdf7 	bl	8012cf0 <nan>
 8010102:	ec5b ab10 	vmov	sl, fp, d0
 8010106:	e67b      	b.n	800fe00 <_strtod_l+0x88>
 8010108:	9b05      	ldr	r3, [sp, #20]
 801010a:	9807      	ldr	r0, [sp, #28]
 801010c:	1af3      	subs	r3, r6, r3
 801010e:	2f00      	cmp	r7, #0
 8010110:	bf08      	it	eq
 8010112:	462f      	moveq	r7, r5
 8010114:	2d10      	cmp	r5, #16
 8010116:	9306      	str	r3, [sp, #24]
 8010118:	46a8      	mov	r8, r5
 801011a:	bfa8      	it	ge
 801011c:	f04f 0810 	movge.w	r8, #16
 8010120:	f7f0 f9f0 	bl	8000504 <__aeabi_ui2d>
 8010124:	2d09      	cmp	r5, #9
 8010126:	4682      	mov	sl, r0
 8010128:	468b      	mov	fp, r1
 801012a:	dd13      	ble.n	8010154 <_strtod_l+0x3dc>
 801012c:	4b7b      	ldr	r3, [pc, #492]	; (801031c <_strtod_l+0x5a4>)
 801012e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010132:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010136:	f7f0 fa5f 	bl	80005f8 <__aeabi_dmul>
 801013a:	4682      	mov	sl, r0
 801013c:	4648      	mov	r0, r9
 801013e:	468b      	mov	fp, r1
 8010140:	f7f0 f9e0 	bl	8000504 <__aeabi_ui2d>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4650      	mov	r0, sl
 801014a:	4659      	mov	r1, fp
 801014c:	f7f0 f89e 	bl	800028c <__adddf3>
 8010150:	4682      	mov	sl, r0
 8010152:	468b      	mov	fp, r1
 8010154:	2d0f      	cmp	r5, #15
 8010156:	dc38      	bgt.n	80101ca <_strtod_l+0x452>
 8010158:	9b06      	ldr	r3, [sp, #24]
 801015a:	2b00      	cmp	r3, #0
 801015c:	f43f ae50 	beq.w	800fe00 <_strtod_l+0x88>
 8010160:	dd24      	ble.n	80101ac <_strtod_l+0x434>
 8010162:	2b16      	cmp	r3, #22
 8010164:	dc0b      	bgt.n	801017e <_strtod_l+0x406>
 8010166:	496d      	ldr	r1, [pc, #436]	; (801031c <_strtod_l+0x5a4>)
 8010168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801016c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010170:	4652      	mov	r2, sl
 8010172:	465b      	mov	r3, fp
 8010174:	f7f0 fa40 	bl	80005f8 <__aeabi_dmul>
 8010178:	4682      	mov	sl, r0
 801017a:	468b      	mov	fp, r1
 801017c:	e640      	b.n	800fe00 <_strtod_l+0x88>
 801017e:	9a06      	ldr	r2, [sp, #24]
 8010180:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010184:	4293      	cmp	r3, r2
 8010186:	db20      	blt.n	80101ca <_strtod_l+0x452>
 8010188:	4c64      	ldr	r4, [pc, #400]	; (801031c <_strtod_l+0x5a4>)
 801018a:	f1c5 050f 	rsb	r5, r5, #15
 801018e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010192:	4652      	mov	r2, sl
 8010194:	465b      	mov	r3, fp
 8010196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	9b06      	ldr	r3, [sp, #24]
 80101a0:	1b5d      	subs	r5, r3, r5
 80101a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80101a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80101aa:	e7e3      	b.n	8010174 <_strtod_l+0x3fc>
 80101ac:	9b06      	ldr	r3, [sp, #24]
 80101ae:	3316      	adds	r3, #22
 80101b0:	db0b      	blt.n	80101ca <_strtod_l+0x452>
 80101b2:	9b05      	ldr	r3, [sp, #20]
 80101b4:	1b9e      	subs	r6, r3, r6
 80101b6:	4b59      	ldr	r3, [pc, #356]	; (801031c <_strtod_l+0x5a4>)
 80101b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80101bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101c0:	4650      	mov	r0, sl
 80101c2:	4659      	mov	r1, fp
 80101c4:	f7f0 fb42 	bl	800084c <__aeabi_ddiv>
 80101c8:	e7d6      	b.n	8010178 <_strtod_l+0x400>
 80101ca:	9b06      	ldr	r3, [sp, #24]
 80101cc:	eba5 0808 	sub.w	r8, r5, r8
 80101d0:	4498      	add	r8, r3
 80101d2:	f1b8 0f00 	cmp.w	r8, #0
 80101d6:	dd74      	ble.n	80102c2 <_strtod_l+0x54a>
 80101d8:	f018 030f 	ands.w	r3, r8, #15
 80101dc:	d00a      	beq.n	80101f4 <_strtod_l+0x47c>
 80101de:	494f      	ldr	r1, [pc, #316]	; (801031c <_strtod_l+0x5a4>)
 80101e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101e4:	4652      	mov	r2, sl
 80101e6:	465b      	mov	r3, fp
 80101e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101ec:	f7f0 fa04 	bl	80005f8 <__aeabi_dmul>
 80101f0:	4682      	mov	sl, r0
 80101f2:	468b      	mov	fp, r1
 80101f4:	f038 080f 	bics.w	r8, r8, #15
 80101f8:	d04f      	beq.n	801029a <_strtod_l+0x522>
 80101fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80101fe:	dd22      	ble.n	8010246 <_strtod_l+0x4ce>
 8010200:	2500      	movs	r5, #0
 8010202:	462e      	mov	r6, r5
 8010204:	9507      	str	r5, [sp, #28]
 8010206:	9505      	str	r5, [sp, #20]
 8010208:	2322      	movs	r3, #34	; 0x22
 801020a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010324 <_strtod_l+0x5ac>
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	f04f 0a00 	mov.w	sl, #0
 8010214:	9b07      	ldr	r3, [sp, #28]
 8010216:	2b00      	cmp	r3, #0
 8010218:	f43f adf2 	beq.w	800fe00 <_strtod_l+0x88>
 801021c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801021e:	4620      	mov	r0, r4
 8010220:	f001 fe90 	bl	8011f44 <_Bfree>
 8010224:	9905      	ldr	r1, [sp, #20]
 8010226:	4620      	mov	r0, r4
 8010228:	f001 fe8c 	bl	8011f44 <_Bfree>
 801022c:	4631      	mov	r1, r6
 801022e:	4620      	mov	r0, r4
 8010230:	f001 fe88 	bl	8011f44 <_Bfree>
 8010234:	9907      	ldr	r1, [sp, #28]
 8010236:	4620      	mov	r0, r4
 8010238:	f001 fe84 	bl	8011f44 <_Bfree>
 801023c:	4629      	mov	r1, r5
 801023e:	4620      	mov	r0, r4
 8010240:	f001 fe80 	bl	8011f44 <_Bfree>
 8010244:	e5dc      	b.n	800fe00 <_strtod_l+0x88>
 8010246:	4b36      	ldr	r3, [pc, #216]	; (8010320 <_strtod_l+0x5a8>)
 8010248:	9304      	str	r3, [sp, #16]
 801024a:	2300      	movs	r3, #0
 801024c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010250:	4650      	mov	r0, sl
 8010252:	4659      	mov	r1, fp
 8010254:	4699      	mov	r9, r3
 8010256:	f1b8 0f01 	cmp.w	r8, #1
 801025a:	dc21      	bgt.n	80102a0 <_strtod_l+0x528>
 801025c:	b10b      	cbz	r3, 8010262 <_strtod_l+0x4ea>
 801025e:	4682      	mov	sl, r0
 8010260:	468b      	mov	fp, r1
 8010262:	4b2f      	ldr	r3, [pc, #188]	; (8010320 <_strtod_l+0x5a8>)
 8010264:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010268:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801026c:	4652      	mov	r2, sl
 801026e:	465b      	mov	r3, fp
 8010270:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010274:	f7f0 f9c0 	bl	80005f8 <__aeabi_dmul>
 8010278:	4b2a      	ldr	r3, [pc, #168]	; (8010324 <_strtod_l+0x5ac>)
 801027a:	460a      	mov	r2, r1
 801027c:	400b      	ands	r3, r1
 801027e:	492a      	ldr	r1, [pc, #168]	; (8010328 <_strtod_l+0x5b0>)
 8010280:	428b      	cmp	r3, r1
 8010282:	4682      	mov	sl, r0
 8010284:	d8bc      	bhi.n	8010200 <_strtod_l+0x488>
 8010286:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801028a:	428b      	cmp	r3, r1
 801028c:	bf86      	itte	hi
 801028e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801032c <_strtod_l+0x5b4>
 8010292:	f04f 3aff 	movhi.w	sl, #4294967295
 8010296:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801029a:	2300      	movs	r3, #0
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	e084      	b.n	80103aa <_strtod_l+0x632>
 80102a0:	f018 0f01 	tst.w	r8, #1
 80102a4:	d005      	beq.n	80102b2 <_strtod_l+0x53a>
 80102a6:	9b04      	ldr	r3, [sp, #16]
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	f7f0 f9a4 	bl	80005f8 <__aeabi_dmul>
 80102b0:	2301      	movs	r3, #1
 80102b2:	9a04      	ldr	r2, [sp, #16]
 80102b4:	3208      	adds	r2, #8
 80102b6:	f109 0901 	add.w	r9, r9, #1
 80102ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80102be:	9204      	str	r2, [sp, #16]
 80102c0:	e7c9      	b.n	8010256 <_strtod_l+0x4de>
 80102c2:	d0ea      	beq.n	801029a <_strtod_l+0x522>
 80102c4:	f1c8 0800 	rsb	r8, r8, #0
 80102c8:	f018 020f 	ands.w	r2, r8, #15
 80102cc:	d00a      	beq.n	80102e4 <_strtod_l+0x56c>
 80102ce:	4b13      	ldr	r3, [pc, #76]	; (801031c <_strtod_l+0x5a4>)
 80102d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102d4:	4650      	mov	r0, sl
 80102d6:	4659      	mov	r1, fp
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	f7f0 fab6 	bl	800084c <__aeabi_ddiv>
 80102e0:	4682      	mov	sl, r0
 80102e2:	468b      	mov	fp, r1
 80102e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80102e8:	d0d7      	beq.n	801029a <_strtod_l+0x522>
 80102ea:	f1b8 0f1f 	cmp.w	r8, #31
 80102ee:	dd1f      	ble.n	8010330 <_strtod_l+0x5b8>
 80102f0:	2500      	movs	r5, #0
 80102f2:	462e      	mov	r6, r5
 80102f4:	9507      	str	r5, [sp, #28]
 80102f6:	9505      	str	r5, [sp, #20]
 80102f8:	2322      	movs	r3, #34	; 0x22
 80102fa:	f04f 0a00 	mov.w	sl, #0
 80102fe:	f04f 0b00 	mov.w	fp, #0
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	e786      	b.n	8010214 <_strtod_l+0x49c>
 8010306:	bf00      	nop
 8010308:	0801762d 	.word	0x0801762d
 801030c:	08017670 	.word	0x08017670
 8010310:	08017625 	.word	0x08017625
 8010314:	080177b4 	.word	0x080177b4
 8010318:	08017a60 	.word	0x08017a60
 801031c:	08017940 	.word	0x08017940
 8010320:	08017918 	.word	0x08017918
 8010324:	7ff00000 	.word	0x7ff00000
 8010328:	7ca00000 	.word	0x7ca00000
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	f018 0310 	ands.w	r3, r8, #16
 8010334:	bf18      	it	ne
 8010336:	236a      	movne	r3, #106	; 0x6a
 8010338:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80106e8 <_strtod_l+0x970>
 801033c:	9304      	str	r3, [sp, #16]
 801033e:	4650      	mov	r0, sl
 8010340:	4659      	mov	r1, fp
 8010342:	2300      	movs	r3, #0
 8010344:	f018 0f01 	tst.w	r8, #1
 8010348:	d004      	beq.n	8010354 <_strtod_l+0x5dc>
 801034a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801034e:	f7f0 f953 	bl	80005f8 <__aeabi_dmul>
 8010352:	2301      	movs	r3, #1
 8010354:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010358:	f109 0908 	add.w	r9, r9, #8
 801035c:	d1f2      	bne.n	8010344 <_strtod_l+0x5cc>
 801035e:	b10b      	cbz	r3, 8010364 <_strtod_l+0x5ec>
 8010360:	4682      	mov	sl, r0
 8010362:	468b      	mov	fp, r1
 8010364:	9b04      	ldr	r3, [sp, #16]
 8010366:	b1c3      	cbz	r3, 801039a <_strtod_l+0x622>
 8010368:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801036c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010370:	2b00      	cmp	r3, #0
 8010372:	4659      	mov	r1, fp
 8010374:	dd11      	ble.n	801039a <_strtod_l+0x622>
 8010376:	2b1f      	cmp	r3, #31
 8010378:	f340 8124 	ble.w	80105c4 <_strtod_l+0x84c>
 801037c:	2b34      	cmp	r3, #52	; 0x34
 801037e:	bfde      	ittt	le
 8010380:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010384:	f04f 33ff 	movle.w	r3, #4294967295
 8010388:	fa03 f202 	lslle.w	r2, r3, r2
 801038c:	f04f 0a00 	mov.w	sl, #0
 8010390:	bfcc      	ite	gt
 8010392:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010396:	ea02 0b01 	andle.w	fp, r2, r1
 801039a:	2200      	movs	r2, #0
 801039c:	2300      	movs	r3, #0
 801039e:	4650      	mov	r0, sl
 80103a0:	4659      	mov	r1, fp
 80103a2:	f7f0 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d1a2      	bne.n	80102f0 <_strtod_l+0x578>
 80103aa:	9b07      	ldr	r3, [sp, #28]
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	9908      	ldr	r1, [sp, #32]
 80103b0:	462b      	mov	r3, r5
 80103b2:	463a      	mov	r2, r7
 80103b4:	4620      	mov	r0, r4
 80103b6:	f001 fe2d 	bl	8012014 <__s2b>
 80103ba:	9007      	str	r0, [sp, #28]
 80103bc:	2800      	cmp	r0, #0
 80103be:	f43f af1f 	beq.w	8010200 <_strtod_l+0x488>
 80103c2:	9b05      	ldr	r3, [sp, #20]
 80103c4:	1b9e      	subs	r6, r3, r6
 80103c6:	9b06      	ldr	r3, [sp, #24]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	bfb4      	ite	lt
 80103cc:	4633      	movlt	r3, r6
 80103ce:	2300      	movge	r3, #0
 80103d0:	930c      	str	r3, [sp, #48]	; 0x30
 80103d2:	9b06      	ldr	r3, [sp, #24]
 80103d4:	2500      	movs	r5, #0
 80103d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80103da:	9312      	str	r3, [sp, #72]	; 0x48
 80103dc:	462e      	mov	r6, r5
 80103de:	9b07      	ldr	r3, [sp, #28]
 80103e0:	4620      	mov	r0, r4
 80103e2:	6859      	ldr	r1, [r3, #4]
 80103e4:	f001 fd6e 	bl	8011ec4 <_Balloc>
 80103e8:	9005      	str	r0, [sp, #20]
 80103ea:	2800      	cmp	r0, #0
 80103ec:	f43f af0c 	beq.w	8010208 <_strtod_l+0x490>
 80103f0:	9b07      	ldr	r3, [sp, #28]
 80103f2:	691a      	ldr	r2, [r3, #16]
 80103f4:	3202      	adds	r2, #2
 80103f6:	f103 010c 	add.w	r1, r3, #12
 80103fa:	0092      	lsls	r2, r2, #2
 80103fc:	300c      	adds	r0, #12
 80103fe:	f001 fd53 	bl	8011ea8 <memcpy>
 8010402:	ec4b ab10 	vmov	d0, sl, fp
 8010406:	aa1a      	add	r2, sp, #104	; 0x68
 8010408:	a919      	add	r1, sp, #100	; 0x64
 801040a:	4620      	mov	r0, r4
 801040c:	f002 f948 	bl	80126a0 <__d2b>
 8010410:	ec4b ab18 	vmov	d8, sl, fp
 8010414:	9018      	str	r0, [sp, #96]	; 0x60
 8010416:	2800      	cmp	r0, #0
 8010418:	f43f aef6 	beq.w	8010208 <_strtod_l+0x490>
 801041c:	2101      	movs	r1, #1
 801041e:	4620      	mov	r0, r4
 8010420:	f001 fe92 	bl	8012148 <__i2b>
 8010424:	4606      	mov	r6, r0
 8010426:	2800      	cmp	r0, #0
 8010428:	f43f aeee 	beq.w	8010208 <_strtod_l+0x490>
 801042c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801042e:	9904      	ldr	r1, [sp, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	bfab      	itete	ge
 8010434:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010436:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010438:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801043a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801043e:	bfac      	ite	ge
 8010440:	eb03 0902 	addge.w	r9, r3, r2
 8010444:	1ad7      	sublt	r7, r2, r3
 8010446:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010448:	eba3 0801 	sub.w	r8, r3, r1
 801044c:	4490      	add	r8, r2
 801044e:	4ba1      	ldr	r3, [pc, #644]	; (80106d4 <_strtod_l+0x95c>)
 8010450:	f108 38ff 	add.w	r8, r8, #4294967295
 8010454:	4598      	cmp	r8, r3
 8010456:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801045a:	f280 80c7 	bge.w	80105ec <_strtod_l+0x874>
 801045e:	eba3 0308 	sub.w	r3, r3, r8
 8010462:	2b1f      	cmp	r3, #31
 8010464:	eba2 0203 	sub.w	r2, r2, r3
 8010468:	f04f 0101 	mov.w	r1, #1
 801046c:	f300 80b1 	bgt.w	80105d2 <_strtod_l+0x85a>
 8010470:	fa01 f303 	lsl.w	r3, r1, r3
 8010474:	930d      	str	r3, [sp, #52]	; 0x34
 8010476:	2300      	movs	r3, #0
 8010478:	9308      	str	r3, [sp, #32]
 801047a:	eb09 0802 	add.w	r8, r9, r2
 801047e:	9b04      	ldr	r3, [sp, #16]
 8010480:	45c1      	cmp	r9, r8
 8010482:	4417      	add	r7, r2
 8010484:	441f      	add	r7, r3
 8010486:	464b      	mov	r3, r9
 8010488:	bfa8      	it	ge
 801048a:	4643      	movge	r3, r8
 801048c:	42bb      	cmp	r3, r7
 801048e:	bfa8      	it	ge
 8010490:	463b      	movge	r3, r7
 8010492:	2b00      	cmp	r3, #0
 8010494:	bfc2      	ittt	gt
 8010496:	eba8 0803 	subgt.w	r8, r8, r3
 801049a:	1aff      	subgt	r7, r7, r3
 801049c:	eba9 0903 	subgt.w	r9, r9, r3
 80104a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	dd17      	ble.n	80104d6 <_strtod_l+0x75e>
 80104a6:	4631      	mov	r1, r6
 80104a8:	461a      	mov	r2, r3
 80104aa:	4620      	mov	r0, r4
 80104ac:	f001 ff0c 	bl	80122c8 <__pow5mult>
 80104b0:	4606      	mov	r6, r0
 80104b2:	2800      	cmp	r0, #0
 80104b4:	f43f aea8 	beq.w	8010208 <_strtod_l+0x490>
 80104b8:	4601      	mov	r1, r0
 80104ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104bc:	4620      	mov	r0, r4
 80104be:	f001 fe59 	bl	8012174 <__multiply>
 80104c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80104c4:	2800      	cmp	r0, #0
 80104c6:	f43f ae9f 	beq.w	8010208 <_strtod_l+0x490>
 80104ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80104cc:	4620      	mov	r0, r4
 80104ce:	f001 fd39 	bl	8011f44 <_Bfree>
 80104d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104d4:	9318      	str	r3, [sp, #96]	; 0x60
 80104d6:	f1b8 0f00 	cmp.w	r8, #0
 80104da:	f300 808c 	bgt.w	80105f6 <_strtod_l+0x87e>
 80104de:	9b06      	ldr	r3, [sp, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	dd08      	ble.n	80104f6 <_strtod_l+0x77e>
 80104e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104e6:	9905      	ldr	r1, [sp, #20]
 80104e8:	4620      	mov	r0, r4
 80104ea:	f001 feed 	bl	80122c8 <__pow5mult>
 80104ee:	9005      	str	r0, [sp, #20]
 80104f0:	2800      	cmp	r0, #0
 80104f2:	f43f ae89 	beq.w	8010208 <_strtod_l+0x490>
 80104f6:	2f00      	cmp	r7, #0
 80104f8:	dd08      	ble.n	801050c <_strtod_l+0x794>
 80104fa:	9905      	ldr	r1, [sp, #20]
 80104fc:	463a      	mov	r2, r7
 80104fe:	4620      	mov	r0, r4
 8010500:	f001 ff3c 	bl	801237c <__lshift>
 8010504:	9005      	str	r0, [sp, #20]
 8010506:	2800      	cmp	r0, #0
 8010508:	f43f ae7e 	beq.w	8010208 <_strtod_l+0x490>
 801050c:	f1b9 0f00 	cmp.w	r9, #0
 8010510:	dd08      	ble.n	8010524 <_strtod_l+0x7ac>
 8010512:	4631      	mov	r1, r6
 8010514:	464a      	mov	r2, r9
 8010516:	4620      	mov	r0, r4
 8010518:	f001 ff30 	bl	801237c <__lshift>
 801051c:	4606      	mov	r6, r0
 801051e:	2800      	cmp	r0, #0
 8010520:	f43f ae72 	beq.w	8010208 <_strtod_l+0x490>
 8010524:	9a05      	ldr	r2, [sp, #20]
 8010526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010528:	4620      	mov	r0, r4
 801052a:	f001 ffb3 	bl	8012494 <__mdiff>
 801052e:	4605      	mov	r5, r0
 8010530:	2800      	cmp	r0, #0
 8010532:	f43f ae69 	beq.w	8010208 <_strtod_l+0x490>
 8010536:	68c3      	ldr	r3, [r0, #12]
 8010538:	930b      	str	r3, [sp, #44]	; 0x2c
 801053a:	2300      	movs	r3, #0
 801053c:	60c3      	str	r3, [r0, #12]
 801053e:	4631      	mov	r1, r6
 8010540:	f001 ff8c 	bl	801245c <__mcmp>
 8010544:	2800      	cmp	r0, #0
 8010546:	da60      	bge.n	801060a <_strtod_l+0x892>
 8010548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801054a:	ea53 030a 	orrs.w	r3, r3, sl
 801054e:	f040 8082 	bne.w	8010656 <_strtod_l+0x8de>
 8010552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010556:	2b00      	cmp	r3, #0
 8010558:	d17d      	bne.n	8010656 <_strtod_l+0x8de>
 801055a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801055e:	0d1b      	lsrs	r3, r3, #20
 8010560:	051b      	lsls	r3, r3, #20
 8010562:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010566:	d976      	bls.n	8010656 <_strtod_l+0x8de>
 8010568:	696b      	ldr	r3, [r5, #20]
 801056a:	b913      	cbnz	r3, 8010572 <_strtod_l+0x7fa>
 801056c:	692b      	ldr	r3, [r5, #16]
 801056e:	2b01      	cmp	r3, #1
 8010570:	dd71      	ble.n	8010656 <_strtod_l+0x8de>
 8010572:	4629      	mov	r1, r5
 8010574:	2201      	movs	r2, #1
 8010576:	4620      	mov	r0, r4
 8010578:	f001 ff00 	bl	801237c <__lshift>
 801057c:	4631      	mov	r1, r6
 801057e:	4605      	mov	r5, r0
 8010580:	f001 ff6c 	bl	801245c <__mcmp>
 8010584:	2800      	cmp	r0, #0
 8010586:	dd66      	ble.n	8010656 <_strtod_l+0x8de>
 8010588:	9904      	ldr	r1, [sp, #16]
 801058a:	4a53      	ldr	r2, [pc, #332]	; (80106d8 <_strtod_l+0x960>)
 801058c:	465b      	mov	r3, fp
 801058e:	2900      	cmp	r1, #0
 8010590:	f000 8081 	beq.w	8010696 <_strtod_l+0x91e>
 8010594:	ea02 010b 	and.w	r1, r2, fp
 8010598:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801059c:	dc7b      	bgt.n	8010696 <_strtod_l+0x91e>
 801059e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80105a2:	f77f aea9 	ble.w	80102f8 <_strtod_l+0x580>
 80105a6:	4b4d      	ldr	r3, [pc, #308]	; (80106dc <_strtod_l+0x964>)
 80105a8:	4650      	mov	r0, sl
 80105aa:	4659      	mov	r1, fp
 80105ac:	2200      	movs	r2, #0
 80105ae:	f7f0 f823 	bl	80005f8 <__aeabi_dmul>
 80105b2:	460b      	mov	r3, r1
 80105b4:	4303      	orrs	r3, r0
 80105b6:	bf08      	it	eq
 80105b8:	2322      	moveq	r3, #34	; 0x22
 80105ba:	4682      	mov	sl, r0
 80105bc:	468b      	mov	fp, r1
 80105be:	bf08      	it	eq
 80105c0:	6023      	streq	r3, [r4, #0]
 80105c2:	e62b      	b.n	801021c <_strtod_l+0x4a4>
 80105c4:	f04f 32ff 	mov.w	r2, #4294967295
 80105c8:	fa02 f303 	lsl.w	r3, r2, r3
 80105cc:	ea03 0a0a 	and.w	sl, r3, sl
 80105d0:	e6e3      	b.n	801039a <_strtod_l+0x622>
 80105d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80105d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80105da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80105de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80105e2:	fa01 f308 	lsl.w	r3, r1, r8
 80105e6:	9308      	str	r3, [sp, #32]
 80105e8:	910d      	str	r1, [sp, #52]	; 0x34
 80105ea:	e746      	b.n	801047a <_strtod_l+0x702>
 80105ec:	2300      	movs	r3, #0
 80105ee:	9308      	str	r3, [sp, #32]
 80105f0:	2301      	movs	r3, #1
 80105f2:	930d      	str	r3, [sp, #52]	; 0x34
 80105f4:	e741      	b.n	801047a <_strtod_l+0x702>
 80105f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80105f8:	4642      	mov	r2, r8
 80105fa:	4620      	mov	r0, r4
 80105fc:	f001 febe 	bl	801237c <__lshift>
 8010600:	9018      	str	r0, [sp, #96]	; 0x60
 8010602:	2800      	cmp	r0, #0
 8010604:	f47f af6b 	bne.w	80104de <_strtod_l+0x766>
 8010608:	e5fe      	b.n	8010208 <_strtod_l+0x490>
 801060a:	465f      	mov	r7, fp
 801060c:	d16e      	bne.n	80106ec <_strtod_l+0x974>
 801060e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010610:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010614:	b342      	cbz	r2, 8010668 <_strtod_l+0x8f0>
 8010616:	4a32      	ldr	r2, [pc, #200]	; (80106e0 <_strtod_l+0x968>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d128      	bne.n	801066e <_strtod_l+0x8f6>
 801061c:	9b04      	ldr	r3, [sp, #16]
 801061e:	4651      	mov	r1, sl
 8010620:	b1eb      	cbz	r3, 801065e <_strtod_l+0x8e6>
 8010622:	4b2d      	ldr	r3, [pc, #180]	; (80106d8 <_strtod_l+0x960>)
 8010624:	403b      	ands	r3, r7
 8010626:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801062a:	f04f 32ff 	mov.w	r2, #4294967295
 801062e:	d819      	bhi.n	8010664 <_strtod_l+0x8ec>
 8010630:	0d1b      	lsrs	r3, r3, #20
 8010632:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010636:	fa02 f303 	lsl.w	r3, r2, r3
 801063a:	4299      	cmp	r1, r3
 801063c:	d117      	bne.n	801066e <_strtod_l+0x8f6>
 801063e:	4b29      	ldr	r3, [pc, #164]	; (80106e4 <_strtod_l+0x96c>)
 8010640:	429f      	cmp	r7, r3
 8010642:	d102      	bne.n	801064a <_strtod_l+0x8d2>
 8010644:	3101      	adds	r1, #1
 8010646:	f43f addf 	beq.w	8010208 <_strtod_l+0x490>
 801064a:	4b23      	ldr	r3, [pc, #140]	; (80106d8 <_strtod_l+0x960>)
 801064c:	403b      	ands	r3, r7
 801064e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010652:	f04f 0a00 	mov.w	sl, #0
 8010656:	9b04      	ldr	r3, [sp, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1a4      	bne.n	80105a6 <_strtod_l+0x82e>
 801065c:	e5de      	b.n	801021c <_strtod_l+0x4a4>
 801065e:	f04f 33ff 	mov.w	r3, #4294967295
 8010662:	e7ea      	b.n	801063a <_strtod_l+0x8c2>
 8010664:	4613      	mov	r3, r2
 8010666:	e7e8      	b.n	801063a <_strtod_l+0x8c2>
 8010668:	ea53 030a 	orrs.w	r3, r3, sl
 801066c:	d08c      	beq.n	8010588 <_strtod_l+0x810>
 801066e:	9b08      	ldr	r3, [sp, #32]
 8010670:	b1db      	cbz	r3, 80106aa <_strtod_l+0x932>
 8010672:	423b      	tst	r3, r7
 8010674:	d0ef      	beq.n	8010656 <_strtod_l+0x8de>
 8010676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010678:	9a04      	ldr	r2, [sp, #16]
 801067a:	4650      	mov	r0, sl
 801067c:	4659      	mov	r1, fp
 801067e:	b1c3      	cbz	r3, 80106b2 <_strtod_l+0x93a>
 8010680:	f7ff fb5c 	bl	800fd3c <sulp>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	ec51 0b18 	vmov	r0, r1, d8
 801068c:	f7ef fdfe 	bl	800028c <__adddf3>
 8010690:	4682      	mov	sl, r0
 8010692:	468b      	mov	fp, r1
 8010694:	e7df      	b.n	8010656 <_strtod_l+0x8de>
 8010696:	4013      	ands	r3, r2
 8010698:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801069c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80106a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80106a4:	f04f 3aff 	mov.w	sl, #4294967295
 80106a8:	e7d5      	b.n	8010656 <_strtod_l+0x8de>
 80106aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106ac:	ea13 0f0a 	tst.w	r3, sl
 80106b0:	e7e0      	b.n	8010674 <_strtod_l+0x8fc>
 80106b2:	f7ff fb43 	bl	800fd3c <sulp>
 80106b6:	4602      	mov	r2, r0
 80106b8:	460b      	mov	r3, r1
 80106ba:	ec51 0b18 	vmov	r0, r1, d8
 80106be:	f7ef fde3 	bl	8000288 <__aeabi_dsub>
 80106c2:	2200      	movs	r2, #0
 80106c4:	2300      	movs	r3, #0
 80106c6:	4682      	mov	sl, r0
 80106c8:	468b      	mov	fp, r1
 80106ca:	f7f0 f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d0c1      	beq.n	8010656 <_strtod_l+0x8de>
 80106d2:	e611      	b.n	80102f8 <_strtod_l+0x580>
 80106d4:	fffffc02 	.word	0xfffffc02
 80106d8:	7ff00000 	.word	0x7ff00000
 80106dc:	39500000 	.word	0x39500000
 80106e0:	000fffff 	.word	0x000fffff
 80106e4:	7fefffff 	.word	0x7fefffff
 80106e8:	08017688 	.word	0x08017688
 80106ec:	4631      	mov	r1, r6
 80106ee:	4628      	mov	r0, r5
 80106f0:	f002 f832 	bl	8012758 <__ratio>
 80106f4:	ec59 8b10 	vmov	r8, r9, d0
 80106f8:	ee10 0a10 	vmov	r0, s0
 80106fc:	2200      	movs	r2, #0
 80106fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010702:	4649      	mov	r1, r9
 8010704:	f7f0 f9f4 	bl	8000af0 <__aeabi_dcmple>
 8010708:	2800      	cmp	r0, #0
 801070a:	d07a      	beq.n	8010802 <_strtod_l+0xa8a>
 801070c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801070e:	2b00      	cmp	r3, #0
 8010710:	d04a      	beq.n	80107a8 <_strtod_l+0xa30>
 8010712:	4b95      	ldr	r3, [pc, #596]	; (8010968 <_strtod_l+0xbf0>)
 8010714:	2200      	movs	r2, #0
 8010716:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801071a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010968 <_strtod_l+0xbf0>
 801071e:	f04f 0800 	mov.w	r8, #0
 8010722:	4b92      	ldr	r3, [pc, #584]	; (801096c <_strtod_l+0xbf4>)
 8010724:	403b      	ands	r3, r7
 8010726:	930d      	str	r3, [sp, #52]	; 0x34
 8010728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801072a:	4b91      	ldr	r3, [pc, #580]	; (8010970 <_strtod_l+0xbf8>)
 801072c:	429a      	cmp	r2, r3
 801072e:	f040 80b0 	bne.w	8010892 <_strtod_l+0xb1a>
 8010732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010736:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801073a:	ec4b ab10 	vmov	d0, sl, fp
 801073e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010742:	f001 ff31 	bl	80125a8 <__ulp>
 8010746:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801074a:	ec53 2b10 	vmov	r2, r3, d0
 801074e:	f7ef ff53 	bl	80005f8 <__aeabi_dmul>
 8010752:	4652      	mov	r2, sl
 8010754:	465b      	mov	r3, fp
 8010756:	f7ef fd99 	bl	800028c <__adddf3>
 801075a:	460b      	mov	r3, r1
 801075c:	4983      	ldr	r1, [pc, #524]	; (801096c <_strtod_l+0xbf4>)
 801075e:	4a85      	ldr	r2, [pc, #532]	; (8010974 <_strtod_l+0xbfc>)
 8010760:	4019      	ands	r1, r3
 8010762:	4291      	cmp	r1, r2
 8010764:	4682      	mov	sl, r0
 8010766:	d960      	bls.n	801082a <_strtod_l+0xab2>
 8010768:	ee18 3a90 	vmov	r3, s17
 801076c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010770:	4293      	cmp	r3, r2
 8010772:	d104      	bne.n	801077e <_strtod_l+0xa06>
 8010774:	ee18 3a10 	vmov	r3, s16
 8010778:	3301      	adds	r3, #1
 801077a:	f43f ad45 	beq.w	8010208 <_strtod_l+0x490>
 801077e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010980 <_strtod_l+0xc08>
 8010782:	f04f 3aff 	mov.w	sl, #4294967295
 8010786:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010788:	4620      	mov	r0, r4
 801078a:	f001 fbdb 	bl	8011f44 <_Bfree>
 801078e:	9905      	ldr	r1, [sp, #20]
 8010790:	4620      	mov	r0, r4
 8010792:	f001 fbd7 	bl	8011f44 <_Bfree>
 8010796:	4631      	mov	r1, r6
 8010798:	4620      	mov	r0, r4
 801079a:	f001 fbd3 	bl	8011f44 <_Bfree>
 801079e:	4629      	mov	r1, r5
 80107a0:	4620      	mov	r0, r4
 80107a2:	f001 fbcf 	bl	8011f44 <_Bfree>
 80107a6:	e61a      	b.n	80103de <_strtod_l+0x666>
 80107a8:	f1ba 0f00 	cmp.w	sl, #0
 80107ac:	d11b      	bne.n	80107e6 <_strtod_l+0xa6e>
 80107ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107b2:	b9f3      	cbnz	r3, 80107f2 <_strtod_l+0xa7a>
 80107b4:	4b6c      	ldr	r3, [pc, #432]	; (8010968 <_strtod_l+0xbf0>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	4640      	mov	r0, r8
 80107ba:	4649      	mov	r1, r9
 80107bc:	f7f0 f98e 	bl	8000adc <__aeabi_dcmplt>
 80107c0:	b9d0      	cbnz	r0, 80107f8 <_strtod_l+0xa80>
 80107c2:	4640      	mov	r0, r8
 80107c4:	4649      	mov	r1, r9
 80107c6:	4b6c      	ldr	r3, [pc, #432]	; (8010978 <_strtod_l+0xc00>)
 80107c8:	2200      	movs	r2, #0
 80107ca:	f7ef ff15 	bl	80005f8 <__aeabi_dmul>
 80107ce:	4680      	mov	r8, r0
 80107d0:	4689      	mov	r9, r1
 80107d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80107d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80107da:	9315      	str	r3, [sp, #84]	; 0x54
 80107dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80107e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80107e4:	e79d      	b.n	8010722 <_strtod_l+0x9aa>
 80107e6:	f1ba 0f01 	cmp.w	sl, #1
 80107ea:	d102      	bne.n	80107f2 <_strtod_l+0xa7a>
 80107ec:	2f00      	cmp	r7, #0
 80107ee:	f43f ad83 	beq.w	80102f8 <_strtod_l+0x580>
 80107f2:	4b62      	ldr	r3, [pc, #392]	; (801097c <_strtod_l+0xc04>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	e78e      	b.n	8010716 <_strtod_l+0x99e>
 80107f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010978 <_strtod_l+0xc00>
 80107fc:	f04f 0800 	mov.w	r8, #0
 8010800:	e7e7      	b.n	80107d2 <_strtod_l+0xa5a>
 8010802:	4b5d      	ldr	r3, [pc, #372]	; (8010978 <_strtod_l+0xc00>)
 8010804:	4640      	mov	r0, r8
 8010806:	4649      	mov	r1, r9
 8010808:	2200      	movs	r2, #0
 801080a:	f7ef fef5 	bl	80005f8 <__aeabi_dmul>
 801080e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010810:	4680      	mov	r8, r0
 8010812:	4689      	mov	r9, r1
 8010814:	b933      	cbnz	r3, 8010824 <_strtod_l+0xaac>
 8010816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801081a:	900e      	str	r0, [sp, #56]	; 0x38
 801081c:	930f      	str	r3, [sp, #60]	; 0x3c
 801081e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010822:	e7dd      	b.n	80107e0 <_strtod_l+0xa68>
 8010824:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010828:	e7f9      	b.n	801081e <_strtod_l+0xaa6>
 801082a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1a8      	bne.n	8010786 <_strtod_l+0xa0e>
 8010834:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801083a:	0d1b      	lsrs	r3, r3, #20
 801083c:	051b      	lsls	r3, r3, #20
 801083e:	429a      	cmp	r2, r3
 8010840:	d1a1      	bne.n	8010786 <_strtod_l+0xa0e>
 8010842:	4640      	mov	r0, r8
 8010844:	4649      	mov	r1, r9
 8010846:	f7f0 fa37 	bl	8000cb8 <__aeabi_d2lz>
 801084a:	f7ef fea7 	bl	800059c <__aeabi_l2d>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4640      	mov	r0, r8
 8010854:	4649      	mov	r1, r9
 8010856:	f7ef fd17 	bl	8000288 <__aeabi_dsub>
 801085a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801085c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010860:	ea43 030a 	orr.w	r3, r3, sl
 8010864:	4313      	orrs	r3, r2
 8010866:	4680      	mov	r8, r0
 8010868:	4689      	mov	r9, r1
 801086a:	d055      	beq.n	8010918 <_strtod_l+0xba0>
 801086c:	a336      	add	r3, pc, #216	; (adr r3, 8010948 <_strtod_l+0xbd0>)
 801086e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010872:	f7f0 f933 	bl	8000adc <__aeabi_dcmplt>
 8010876:	2800      	cmp	r0, #0
 8010878:	f47f acd0 	bne.w	801021c <_strtod_l+0x4a4>
 801087c:	a334      	add	r3, pc, #208	; (adr r3, 8010950 <_strtod_l+0xbd8>)
 801087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010882:	4640      	mov	r0, r8
 8010884:	4649      	mov	r1, r9
 8010886:	f7f0 f947 	bl	8000b18 <__aeabi_dcmpgt>
 801088a:	2800      	cmp	r0, #0
 801088c:	f43f af7b 	beq.w	8010786 <_strtod_l+0xa0e>
 8010890:	e4c4      	b.n	801021c <_strtod_l+0x4a4>
 8010892:	9b04      	ldr	r3, [sp, #16]
 8010894:	b333      	cbz	r3, 80108e4 <_strtod_l+0xb6c>
 8010896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010898:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801089c:	d822      	bhi.n	80108e4 <_strtod_l+0xb6c>
 801089e:	a32e      	add	r3, pc, #184	; (adr r3, 8010958 <_strtod_l+0xbe0>)
 80108a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a4:	4640      	mov	r0, r8
 80108a6:	4649      	mov	r1, r9
 80108a8:	f7f0 f922 	bl	8000af0 <__aeabi_dcmple>
 80108ac:	b1a0      	cbz	r0, 80108d8 <_strtod_l+0xb60>
 80108ae:	4649      	mov	r1, r9
 80108b0:	4640      	mov	r0, r8
 80108b2:	f7f0 f979 	bl	8000ba8 <__aeabi_d2uiz>
 80108b6:	2801      	cmp	r0, #1
 80108b8:	bf38      	it	cc
 80108ba:	2001      	movcc	r0, #1
 80108bc:	f7ef fe22 	bl	8000504 <__aeabi_ui2d>
 80108c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c2:	4680      	mov	r8, r0
 80108c4:	4689      	mov	r9, r1
 80108c6:	bb23      	cbnz	r3, 8010912 <_strtod_l+0xb9a>
 80108c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108cc:	9010      	str	r0, [sp, #64]	; 0x40
 80108ce:	9311      	str	r3, [sp, #68]	; 0x44
 80108d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80108d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80108e0:	1a9b      	subs	r3, r3, r2
 80108e2:	9309      	str	r3, [sp, #36]	; 0x24
 80108e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80108e8:	eeb0 0a48 	vmov.f32	s0, s16
 80108ec:	eef0 0a68 	vmov.f32	s1, s17
 80108f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80108f4:	f001 fe58 	bl	80125a8 <__ulp>
 80108f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80108fc:	ec53 2b10 	vmov	r2, r3, d0
 8010900:	f7ef fe7a 	bl	80005f8 <__aeabi_dmul>
 8010904:	ec53 2b18 	vmov	r2, r3, d8
 8010908:	f7ef fcc0 	bl	800028c <__adddf3>
 801090c:	4682      	mov	sl, r0
 801090e:	468b      	mov	fp, r1
 8010910:	e78d      	b.n	801082e <_strtod_l+0xab6>
 8010912:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010916:	e7db      	b.n	80108d0 <_strtod_l+0xb58>
 8010918:	a311      	add	r3, pc, #68	; (adr r3, 8010960 <_strtod_l+0xbe8>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7f0 f8dd 	bl	8000adc <__aeabi_dcmplt>
 8010922:	e7b2      	b.n	801088a <_strtod_l+0xb12>
 8010924:	2300      	movs	r3, #0
 8010926:	930a      	str	r3, [sp, #40]	; 0x28
 8010928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801092a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801092c:	6013      	str	r3, [r2, #0]
 801092e:	f7ff ba6b 	b.w	800fe08 <_strtod_l+0x90>
 8010932:	2a65      	cmp	r2, #101	; 0x65
 8010934:	f43f ab5f 	beq.w	800fff6 <_strtod_l+0x27e>
 8010938:	2a45      	cmp	r2, #69	; 0x45
 801093a:	f43f ab5c 	beq.w	800fff6 <_strtod_l+0x27e>
 801093e:	2301      	movs	r3, #1
 8010940:	f7ff bb94 	b.w	801006c <_strtod_l+0x2f4>
 8010944:	f3af 8000 	nop.w
 8010948:	94a03595 	.word	0x94a03595
 801094c:	3fdfffff 	.word	0x3fdfffff
 8010950:	35afe535 	.word	0x35afe535
 8010954:	3fe00000 	.word	0x3fe00000
 8010958:	ffc00000 	.word	0xffc00000
 801095c:	41dfffff 	.word	0x41dfffff
 8010960:	94a03595 	.word	0x94a03595
 8010964:	3fcfffff 	.word	0x3fcfffff
 8010968:	3ff00000 	.word	0x3ff00000
 801096c:	7ff00000 	.word	0x7ff00000
 8010970:	7fe00000 	.word	0x7fe00000
 8010974:	7c9fffff 	.word	0x7c9fffff
 8010978:	3fe00000 	.word	0x3fe00000
 801097c:	bff00000 	.word	0xbff00000
 8010980:	7fefffff 	.word	0x7fefffff

08010984 <_strtod_r>:
 8010984:	4b01      	ldr	r3, [pc, #4]	; (801098c <_strtod_r+0x8>)
 8010986:	f7ff b9f7 	b.w	800fd78 <_strtod_l>
 801098a:	bf00      	nop
 801098c:	20000264 	.word	0x20000264

08010990 <_strtol_l.constprop.0>:
 8010990:	2b01      	cmp	r3, #1
 8010992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010996:	d001      	beq.n	801099c <_strtol_l.constprop.0+0xc>
 8010998:	2b24      	cmp	r3, #36	; 0x24
 801099a:	d906      	bls.n	80109aa <_strtol_l.constprop.0+0x1a>
 801099c:	f7fe fafc 	bl	800ef98 <__errno>
 80109a0:	2316      	movs	r3, #22
 80109a2:	6003      	str	r3, [r0, #0]
 80109a4:	2000      	movs	r0, #0
 80109a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010a90 <_strtol_l.constprop.0+0x100>
 80109ae:	460d      	mov	r5, r1
 80109b0:	462e      	mov	r6, r5
 80109b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80109ba:	f017 0708 	ands.w	r7, r7, #8
 80109be:	d1f7      	bne.n	80109b0 <_strtol_l.constprop.0+0x20>
 80109c0:	2c2d      	cmp	r4, #45	; 0x2d
 80109c2:	d132      	bne.n	8010a2a <_strtol_l.constprop.0+0x9a>
 80109c4:	782c      	ldrb	r4, [r5, #0]
 80109c6:	2701      	movs	r7, #1
 80109c8:	1cb5      	adds	r5, r6, #2
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d05b      	beq.n	8010a86 <_strtol_l.constprop.0+0xf6>
 80109ce:	2b10      	cmp	r3, #16
 80109d0:	d109      	bne.n	80109e6 <_strtol_l.constprop.0+0x56>
 80109d2:	2c30      	cmp	r4, #48	; 0x30
 80109d4:	d107      	bne.n	80109e6 <_strtol_l.constprop.0+0x56>
 80109d6:	782c      	ldrb	r4, [r5, #0]
 80109d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80109dc:	2c58      	cmp	r4, #88	; 0x58
 80109de:	d14d      	bne.n	8010a7c <_strtol_l.constprop.0+0xec>
 80109e0:	786c      	ldrb	r4, [r5, #1]
 80109e2:	2310      	movs	r3, #16
 80109e4:	3502      	adds	r5, #2
 80109e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80109ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80109ee:	f04f 0c00 	mov.w	ip, #0
 80109f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80109f6:	4666      	mov	r6, ip
 80109f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80109fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010a00:	f1be 0f09 	cmp.w	lr, #9
 8010a04:	d816      	bhi.n	8010a34 <_strtol_l.constprop.0+0xa4>
 8010a06:	4674      	mov	r4, lr
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	dd24      	ble.n	8010a56 <_strtol_l.constprop.0+0xc6>
 8010a0c:	f1bc 0f00 	cmp.w	ip, #0
 8010a10:	db1e      	blt.n	8010a50 <_strtol_l.constprop.0+0xc0>
 8010a12:	45b1      	cmp	r9, r6
 8010a14:	d31c      	bcc.n	8010a50 <_strtol_l.constprop.0+0xc0>
 8010a16:	d101      	bne.n	8010a1c <_strtol_l.constprop.0+0x8c>
 8010a18:	45a2      	cmp	sl, r4
 8010a1a:	db19      	blt.n	8010a50 <_strtol_l.constprop.0+0xc0>
 8010a1c:	fb06 4603 	mla	r6, r6, r3, r4
 8010a20:	f04f 0c01 	mov.w	ip, #1
 8010a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a28:	e7e8      	b.n	80109fc <_strtol_l.constprop.0+0x6c>
 8010a2a:	2c2b      	cmp	r4, #43	; 0x2b
 8010a2c:	bf04      	itt	eq
 8010a2e:	782c      	ldrbeq	r4, [r5, #0]
 8010a30:	1cb5      	addeq	r5, r6, #2
 8010a32:	e7ca      	b.n	80109ca <_strtol_l.constprop.0+0x3a>
 8010a34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010a38:	f1be 0f19 	cmp.w	lr, #25
 8010a3c:	d801      	bhi.n	8010a42 <_strtol_l.constprop.0+0xb2>
 8010a3e:	3c37      	subs	r4, #55	; 0x37
 8010a40:	e7e2      	b.n	8010a08 <_strtol_l.constprop.0+0x78>
 8010a42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010a46:	f1be 0f19 	cmp.w	lr, #25
 8010a4a:	d804      	bhi.n	8010a56 <_strtol_l.constprop.0+0xc6>
 8010a4c:	3c57      	subs	r4, #87	; 0x57
 8010a4e:	e7db      	b.n	8010a08 <_strtol_l.constprop.0+0x78>
 8010a50:	f04f 3cff 	mov.w	ip, #4294967295
 8010a54:	e7e6      	b.n	8010a24 <_strtol_l.constprop.0+0x94>
 8010a56:	f1bc 0f00 	cmp.w	ip, #0
 8010a5a:	da05      	bge.n	8010a68 <_strtol_l.constprop.0+0xd8>
 8010a5c:	2322      	movs	r3, #34	; 0x22
 8010a5e:	6003      	str	r3, [r0, #0]
 8010a60:	4646      	mov	r6, r8
 8010a62:	b942      	cbnz	r2, 8010a76 <_strtol_l.constprop.0+0xe6>
 8010a64:	4630      	mov	r0, r6
 8010a66:	e79e      	b.n	80109a6 <_strtol_l.constprop.0+0x16>
 8010a68:	b107      	cbz	r7, 8010a6c <_strtol_l.constprop.0+0xdc>
 8010a6a:	4276      	negs	r6, r6
 8010a6c:	2a00      	cmp	r2, #0
 8010a6e:	d0f9      	beq.n	8010a64 <_strtol_l.constprop.0+0xd4>
 8010a70:	f1bc 0f00 	cmp.w	ip, #0
 8010a74:	d000      	beq.n	8010a78 <_strtol_l.constprop.0+0xe8>
 8010a76:	1e69      	subs	r1, r5, #1
 8010a78:	6011      	str	r1, [r2, #0]
 8010a7a:	e7f3      	b.n	8010a64 <_strtol_l.constprop.0+0xd4>
 8010a7c:	2430      	movs	r4, #48	; 0x30
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d1b1      	bne.n	80109e6 <_strtol_l.constprop.0+0x56>
 8010a82:	2308      	movs	r3, #8
 8010a84:	e7af      	b.n	80109e6 <_strtol_l.constprop.0+0x56>
 8010a86:	2c30      	cmp	r4, #48	; 0x30
 8010a88:	d0a5      	beq.n	80109d6 <_strtol_l.constprop.0+0x46>
 8010a8a:	230a      	movs	r3, #10
 8010a8c:	e7ab      	b.n	80109e6 <_strtol_l.constprop.0+0x56>
 8010a8e:	bf00      	nop
 8010a90:	080176b1 	.word	0x080176b1

08010a94 <_strtol_r>:
 8010a94:	f7ff bf7c 	b.w	8010990 <_strtol_l.constprop.0>

08010a98 <quorem>:
 8010a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	6903      	ldr	r3, [r0, #16]
 8010a9e:	690c      	ldr	r4, [r1, #16]
 8010aa0:	42a3      	cmp	r3, r4
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	f2c0 8081 	blt.w	8010baa <quorem+0x112>
 8010aa8:	3c01      	subs	r4, #1
 8010aaa:	f101 0814 	add.w	r8, r1, #20
 8010aae:	f100 0514 	add.w	r5, r0, #20
 8010ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ab6:	9301      	str	r3, [sp, #4]
 8010ab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ac8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010acc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ad0:	d331      	bcc.n	8010b36 <quorem+0x9e>
 8010ad2:	f04f 0e00 	mov.w	lr, #0
 8010ad6:	4640      	mov	r0, r8
 8010ad8:	46ac      	mov	ip, r5
 8010ada:	46f2      	mov	sl, lr
 8010adc:	f850 2b04 	ldr.w	r2, [r0], #4
 8010ae0:	b293      	uxth	r3, r2
 8010ae2:	fb06 e303 	mla	r3, r6, r3, lr
 8010ae6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	ebaa 0303 	sub.w	r3, sl, r3
 8010af0:	f8dc a000 	ldr.w	sl, [ip]
 8010af4:	0c12      	lsrs	r2, r2, #16
 8010af6:	fa13 f38a 	uxtah	r3, r3, sl
 8010afa:	fb06 e202 	mla	r2, r6, r2, lr
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	9b00      	ldr	r3, [sp, #0]
 8010b02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b06:	b292      	uxth	r2, r2
 8010b08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b10:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b14:	4581      	cmp	r9, r0
 8010b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b1a:	f84c 3b04 	str.w	r3, [ip], #4
 8010b1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010b22:	d2db      	bcs.n	8010adc <quorem+0x44>
 8010b24:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b28:	b92b      	cbnz	r3, 8010b36 <quorem+0x9e>
 8010b2a:	9b01      	ldr	r3, [sp, #4]
 8010b2c:	3b04      	subs	r3, #4
 8010b2e:	429d      	cmp	r5, r3
 8010b30:	461a      	mov	r2, r3
 8010b32:	d32e      	bcc.n	8010b92 <quorem+0xfa>
 8010b34:	613c      	str	r4, [r7, #16]
 8010b36:	4638      	mov	r0, r7
 8010b38:	f001 fc90 	bl	801245c <__mcmp>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	db24      	blt.n	8010b8a <quorem+0xf2>
 8010b40:	3601      	adds	r6, #1
 8010b42:	4628      	mov	r0, r5
 8010b44:	f04f 0c00 	mov.w	ip, #0
 8010b48:	f858 2b04 	ldr.w	r2, [r8], #4
 8010b4c:	f8d0 e000 	ldr.w	lr, [r0]
 8010b50:	b293      	uxth	r3, r2
 8010b52:	ebac 0303 	sub.w	r3, ip, r3
 8010b56:	0c12      	lsrs	r2, r2, #16
 8010b58:	fa13 f38e 	uxtah	r3, r3, lr
 8010b5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b6a:	45c1      	cmp	r9, r8
 8010b6c:	f840 3b04 	str.w	r3, [r0], #4
 8010b70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010b74:	d2e8      	bcs.n	8010b48 <quorem+0xb0>
 8010b76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b7e:	b922      	cbnz	r2, 8010b8a <quorem+0xf2>
 8010b80:	3b04      	subs	r3, #4
 8010b82:	429d      	cmp	r5, r3
 8010b84:	461a      	mov	r2, r3
 8010b86:	d30a      	bcc.n	8010b9e <quorem+0x106>
 8010b88:	613c      	str	r4, [r7, #16]
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	b003      	add	sp, #12
 8010b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b92:	6812      	ldr	r2, [r2, #0]
 8010b94:	3b04      	subs	r3, #4
 8010b96:	2a00      	cmp	r2, #0
 8010b98:	d1cc      	bne.n	8010b34 <quorem+0x9c>
 8010b9a:	3c01      	subs	r4, #1
 8010b9c:	e7c7      	b.n	8010b2e <quorem+0x96>
 8010b9e:	6812      	ldr	r2, [r2, #0]
 8010ba0:	3b04      	subs	r3, #4
 8010ba2:	2a00      	cmp	r2, #0
 8010ba4:	d1f0      	bne.n	8010b88 <quorem+0xf0>
 8010ba6:	3c01      	subs	r4, #1
 8010ba8:	e7eb      	b.n	8010b82 <quorem+0xea>
 8010baa:	2000      	movs	r0, #0
 8010bac:	e7ee      	b.n	8010b8c <quorem+0xf4>
	...

08010bb0 <_dtoa_r>:
 8010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	ed2d 8b04 	vpush	{d8-d9}
 8010bb8:	ec57 6b10 	vmov	r6, r7, d0
 8010bbc:	b093      	sub	sp, #76	; 0x4c
 8010bbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010bc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010bc4:	9106      	str	r1, [sp, #24]
 8010bc6:	ee10 aa10 	vmov	sl, s0
 8010bca:	4604      	mov	r4, r0
 8010bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8010bce:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd0:	46bb      	mov	fp, r7
 8010bd2:	b975      	cbnz	r5, 8010bf2 <_dtoa_r+0x42>
 8010bd4:	2010      	movs	r0, #16
 8010bd6:	f001 f94d 	bl	8011e74 <malloc>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	6260      	str	r0, [r4, #36]	; 0x24
 8010bde:	b920      	cbnz	r0, 8010bea <_dtoa_r+0x3a>
 8010be0:	4ba7      	ldr	r3, [pc, #668]	; (8010e80 <_dtoa_r+0x2d0>)
 8010be2:	21ea      	movs	r1, #234	; 0xea
 8010be4:	48a7      	ldr	r0, [pc, #668]	; (8010e84 <_dtoa_r+0x2d4>)
 8010be6:	f002 f8bd 	bl	8012d64 <__assert_func>
 8010bea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010bee:	6005      	str	r5, [r0, #0]
 8010bf0:	60c5      	str	r5, [r0, #12]
 8010bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bf4:	6819      	ldr	r1, [r3, #0]
 8010bf6:	b151      	cbz	r1, 8010c0e <_dtoa_r+0x5e>
 8010bf8:	685a      	ldr	r2, [r3, #4]
 8010bfa:	604a      	str	r2, [r1, #4]
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	4093      	lsls	r3, r2
 8010c00:	608b      	str	r3, [r1, #8]
 8010c02:	4620      	mov	r0, r4
 8010c04:	f001 f99e 	bl	8011f44 <_Bfree>
 8010c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	601a      	str	r2, [r3, #0]
 8010c0e:	1e3b      	subs	r3, r7, #0
 8010c10:	bfaa      	itet	ge
 8010c12:	2300      	movge	r3, #0
 8010c14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010c18:	f8c8 3000 	strge.w	r3, [r8]
 8010c1c:	4b9a      	ldr	r3, [pc, #616]	; (8010e88 <_dtoa_r+0x2d8>)
 8010c1e:	bfbc      	itt	lt
 8010c20:	2201      	movlt	r2, #1
 8010c22:	f8c8 2000 	strlt.w	r2, [r8]
 8010c26:	ea33 030b 	bics.w	r3, r3, fp
 8010c2a:	d11b      	bne.n	8010c64 <_dtoa_r+0xb4>
 8010c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010c32:	6013      	str	r3, [r2, #0]
 8010c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c38:	4333      	orrs	r3, r6
 8010c3a:	f000 8592 	beq.w	8011762 <_dtoa_r+0xbb2>
 8010c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c40:	b963      	cbnz	r3, 8010c5c <_dtoa_r+0xac>
 8010c42:	4b92      	ldr	r3, [pc, #584]	; (8010e8c <_dtoa_r+0x2dc>)
 8010c44:	e022      	b.n	8010c8c <_dtoa_r+0xdc>
 8010c46:	4b92      	ldr	r3, [pc, #584]	; (8010e90 <_dtoa_r+0x2e0>)
 8010c48:	9301      	str	r3, [sp, #4]
 8010c4a:	3308      	adds	r3, #8
 8010c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c4e:	6013      	str	r3, [r2, #0]
 8010c50:	9801      	ldr	r0, [sp, #4]
 8010c52:	b013      	add	sp, #76	; 0x4c
 8010c54:	ecbd 8b04 	vpop	{d8-d9}
 8010c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5c:	4b8b      	ldr	r3, [pc, #556]	; (8010e8c <_dtoa_r+0x2dc>)
 8010c5e:	9301      	str	r3, [sp, #4]
 8010c60:	3303      	adds	r3, #3
 8010c62:	e7f3      	b.n	8010c4c <_dtoa_r+0x9c>
 8010c64:	2200      	movs	r2, #0
 8010c66:	2300      	movs	r3, #0
 8010c68:	4650      	mov	r0, sl
 8010c6a:	4659      	mov	r1, fp
 8010c6c:	f7ef ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c70:	ec4b ab19 	vmov	d9, sl, fp
 8010c74:	4680      	mov	r8, r0
 8010c76:	b158      	cbz	r0, 8010c90 <_dtoa_r+0xe0>
 8010c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	6013      	str	r3, [r2, #0]
 8010c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f000 856b 	beq.w	801175c <_dtoa_r+0xbac>
 8010c86:	4883      	ldr	r0, [pc, #524]	; (8010e94 <_dtoa_r+0x2e4>)
 8010c88:	6018      	str	r0, [r3, #0]
 8010c8a:	1e43      	subs	r3, r0, #1
 8010c8c:	9301      	str	r3, [sp, #4]
 8010c8e:	e7df      	b.n	8010c50 <_dtoa_r+0xa0>
 8010c90:	ec4b ab10 	vmov	d0, sl, fp
 8010c94:	aa10      	add	r2, sp, #64	; 0x40
 8010c96:	a911      	add	r1, sp, #68	; 0x44
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f001 fd01 	bl	80126a0 <__d2b>
 8010c9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010ca2:	ee08 0a10 	vmov	s16, r0
 8010ca6:	2d00      	cmp	r5, #0
 8010ca8:	f000 8084 	beq.w	8010db4 <_dtoa_r+0x204>
 8010cac:	ee19 3a90 	vmov	r3, s19
 8010cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010cb8:	4656      	mov	r6, sl
 8010cba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010cc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010cc6:	4b74      	ldr	r3, [pc, #464]	; (8010e98 <_dtoa_r+0x2e8>)
 8010cc8:	2200      	movs	r2, #0
 8010cca:	4630      	mov	r0, r6
 8010ccc:	4639      	mov	r1, r7
 8010cce:	f7ef fadb 	bl	8000288 <__aeabi_dsub>
 8010cd2:	a365      	add	r3, pc, #404	; (adr r3, 8010e68 <_dtoa_r+0x2b8>)
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	f7ef fc8e 	bl	80005f8 <__aeabi_dmul>
 8010cdc:	a364      	add	r3, pc, #400	; (adr r3, 8010e70 <_dtoa_r+0x2c0>)
 8010cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce2:	f7ef fad3 	bl	800028c <__adddf3>
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	4628      	mov	r0, r5
 8010cea:	460f      	mov	r7, r1
 8010cec:	f7ef fc1a 	bl	8000524 <__aeabi_i2d>
 8010cf0:	a361      	add	r3, pc, #388	; (adr r3, 8010e78 <_dtoa_r+0x2c8>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	f7ef fc7f 	bl	80005f8 <__aeabi_dmul>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	4630      	mov	r0, r6
 8010d00:	4639      	mov	r1, r7
 8010d02:	f7ef fac3 	bl	800028c <__adddf3>
 8010d06:	4606      	mov	r6, r0
 8010d08:	460f      	mov	r7, r1
 8010d0a:	f7ef ff25 	bl	8000b58 <__aeabi_d2iz>
 8010d0e:	2200      	movs	r2, #0
 8010d10:	9000      	str	r0, [sp, #0]
 8010d12:	2300      	movs	r3, #0
 8010d14:	4630      	mov	r0, r6
 8010d16:	4639      	mov	r1, r7
 8010d18:	f7ef fee0 	bl	8000adc <__aeabi_dcmplt>
 8010d1c:	b150      	cbz	r0, 8010d34 <_dtoa_r+0x184>
 8010d1e:	9800      	ldr	r0, [sp, #0]
 8010d20:	f7ef fc00 	bl	8000524 <__aeabi_i2d>
 8010d24:	4632      	mov	r2, r6
 8010d26:	463b      	mov	r3, r7
 8010d28:	f7ef fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d2c:	b910      	cbnz	r0, 8010d34 <_dtoa_r+0x184>
 8010d2e:	9b00      	ldr	r3, [sp, #0]
 8010d30:	3b01      	subs	r3, #1
 8010d32:	9300      	str	r3, [sp, #0]
 8010d34:	9b00      	ldr	r3, [sp, #0]
 8010d36:	2b16      	cmp	r3, #22
 8010d38:	d85a      	bhi.n	8010df0 <_dtoa_r+0x240>
 8010d3a:	9a00      	ldr	r2, [sp, #0]
 8010d3c:	4b57      	ldr	r3, [pc, #348]	; (8010e9c <_dtoa_r+0x2ec>)
 8010d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	ec51 0b19 	vmov	r0, r1, d9
 8010d4a:	f7ef fec7 	bl	8000adc <__aeabi_dcmplt>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d050      	beq.n	8010df4 <_dtoa_r+0x244>
 8010d52:	9b00      	ldr	r3, [sp, #0]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	2300      	movs	r3, #0
 8010d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d5e:	1b5d      	subs	r5, r3, r5
 8010d60:	1e6b      	subs	r3, r5, #1
 8010d62:	9305      	str	r3, [sp, #20]
 8010d64:	bf45      	ittet	mi
 8010d66:	f1c5 0301 	rsbmi	r3, r5, #1
 8010d6a:	9304      	strmi	r3, [sp, #16]
 8010d6c:	2300      	movpl	r3, #0
 8010d6e:	2300      	movmi	r3, #0
 8010d70:	bf4c      	ite	mi
 8010d72:	9305      	strmi	r3, [sp, #20]
 8010d74:	9304      	strpl	r3, [sp, #16]
 8010d76:	9b00      	ldr	r3, [sp, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	db3d      	blt.n	8010df8 <_dtoa_r+0x248>
 8010d7c:	9b05      	ldr	r3, [sp, #20]
 8010d7e:	9a00      	ldr	r2, [sp, #0]
 8010d80:	920a      	str	r2, [sp, #40]	; 0x28
 8010d82:	4413      	add	r3, r2
 8010d84:	9305      	str	r3, [sp, #20]
 8010d86:	2300      	movs	r3, #0
 8010d88:	9307      	str	r3, [sp, #28]
 8010d8a:	9b06      	ldr	r3, [sp, #24]
 8010d8c:	2b09      	cmp	r3, #9
 8010d8e:	f200 8089 	bhi.w	8010ea4 <_dtoa_r+0x2f4>
 8010d92:	2b05      	cmp	r3, #5
 8010d94:	bfc4      	itt	gt
 8010d96:	3b04      	subgt	r3, #4
 8010d98:	9306      	strgt	r3, [sp, #24]
 8010d9a:	9b06      	ldr	r3, [sp, #24]
 8010d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8010da0:	bfcc      	ite	gt
 8010da2:	2500      	movgt	r5, #0
 8010da4:	2501      	movle	r5, #1
 8010da6:	2b03      	cmp	r3, #3
 8010da8:	f200 8087 	bhi.w	8010eba <_dtoa_r+0x30a>
 8010dac:	e8df f003 	tbb	[pc, r3]
 8010db0:	59383a2d 	.word	0x59383a2d
 8010db4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010db8:	441d      	add	r5, r3
 8010dba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010dbe:	2b20      	cmp	r3, #32
 8010dc0:	bfc1      	itttt	gt
 8010dc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010dc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010dca:	fa0b f303 	lslgt.w	r3, fp, r3
 8010dce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010dd2:	bfda      	itte	le
 8010dd4:	f1c3 0320 	rsble	r3, r3, #32
 8010dd8:	fa06 f003 	lslle.w	r0, r6, r3
 8010ddc:	4318      	orrgt	r0, r3
 8010dde:	f7ef fb91 	bl	8000504 <__aeabi_ui2d>
 8010de2:	2301      	movs	r3, #1
 8010de4:	4606      	mov	r6, r0
 8010de6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010dea:	3d01      	subs	r5, #1
 8010dec:	930e      	str	r3, [sp, #56]	; 0x38
 8010dee:	e76a      	b.n	8010cc6 <_dtoa_r+0x116>
 8010df0:	2301      	movs	r3, #1
 8010df2:	e7b2      	b.n	8010d5a <_dtoa_r+0x1aa>
 8010df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010df6:	e7b1      	b.n	8010d5c <_dtoa_r+0x1ac>
 8010df8:	9b04      	ldr	r3, [sp, #16]
 8010dfa:	9a00      	ldr	r2, [sp, #0]
 8010dfc:	1a9b      	subs	r3, r3, r2
 8010dfe:	9304      	str	r3, [sp, #16]
 8010e00:	4253      	negs	r3, r2
 8010e02:	9307      	str	r3, [sp, #28]
 8010e04:	2300      	movs	r3, #0
 8010e06:	930a      	str	r3, [sp, #40]	; 0x28
 8010e08:	e7bf      	b.n	8010d8a <_dtoa_r+0x1da>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9308      	str	r3, [sp, #32]
 8010e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	dc55      	bgt.n	8010ec0 <_dtoa_r+0x310>
 8010e14:	2301      	movs	r3, #1
 8010e16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e1e:	e00c      	b.n	8010e3a <_dtoa_r+0x28a>
 8010e20:	2301      	movs	r3, #1
 8010e22:	e7f3      	b.n	8010e0c <_dtoa_r+0x25c>
 8010e24:	2300      	movs	r3, #0
 8010e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e28:	9308      	str	r3, [sp, #32]
 8010e2a:	9b00      	ldr	r3, [sp, #0]
 8010e2c:	4413      	add	r3, r2
 8010e2e:	9302      	str	r3, [sp, #8]
 8010e30:	3301      	adds	r3, #1
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	9303      	str	r3, [sp, #12]
 8010e36:	bfb8      	it	lt
 8010e38:	2301      	movlt	r3, #1
 8010e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	6042      	str	r2, [r0, #4]
 8010e40:	2204      	movs	r2, #4
 8010e42:	f102 0614 	add.w	r6, r2, #20
 8010e46:	429e      	cmp	r6, r3
 8010e48:	6841      	ldr	r1, [r0, #4]
 8010e4a:	d93d      	bls.n	8010ec8 <_dtoa_r+0x318>
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f001 f839 	bl	8011ec4 <_Balloc>
 8010e52:	9001      	str	r0, [sp, #4]
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d13b      	bne.n	8010ed0 <_dtoa_r+0x320>
 8010e58:	4b11      	ldr	r3, [pc, #68]	; (8010ea0 <_dtoa_r+0x2f0>)
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010e60:	e6c0      	b.n	8010be4 <_dtoa_r+0x34>
 8010e62:	2301      	movs	r3, #1
 8010e64:	e7df      	b.n	8010e26 <_dtoa_r+0x276>
 8010e66:	bf00      	nop
 8010e68:	636f4361 	.word	0x636f4361
 8010e6c:	3fd287a7 	.word	0x3fd287a7
 8010e70:	8b60c8b3 	.word	0x8b60c8b3
 8010e74:	3fc68a28 	.word	0x3fc68a28
 8010e78:	509f79fb 	.word	0x509f79fb
 8010e7c:	3fd34413 	.word	0x3fd34413
 8010e80:	080177be 	.word	0x080177be
 8010e84:	080177d5 	.word	0x080177d5
 8010e88:	7ff00000 	.word	0x7ff00000
 8010e8c:	080177ba 	.word	0x080177ba
 8010e90:	080177b1 	.word	0x080177b1
 8010e94:	08017631 	.word	0x08017631
 8010e98:	3ff80000 	.word	0x3ff80000
 8010e9c:	08017940 	.word	0x08017940
 8010ea0:	08017830 	.word	0x08017830
 8010ea4:	2501      	movs	r5, #1
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	9306      	str	r3, [sp, #24]
 8010eaa:	9508      	str	r5, [sp, #32]
 8010eac:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	2312      	movs	r3, #18
 8010eb8:	e7b0      	b.n	8010e1c <_dtoa_r+0x26c>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	9308      	str	r3, [sp, #32]
 8010ebe:	e7f5      	b.n	8010eac <_dtoa_r+0x2fc>
 8010ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ec6:	e7b8      	b.n	8010e3a <_dtoa_r+0x28a>
 8010ec8:	3101      	adds	r1, #1
 8010eca:	6041      	str	r1, [r0, #4]
 8010ecc:	0052      	lsls	r2, r2, #1
 8010ece:	e7b8      	b.n	8010e42 <_dtoa_r+0x292>
 8010ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ed2:	9a01      	ldr	r2, [sp, #4]
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	9b03      	ldr	r3, [sp, #12]
 8010ed8:	2b0e      	cmp	r3, #14
 8010eda:	f200 809d 	bhi.w	8011018 <_dtoa_r+0x468>
 8010ede:	2d00      	cmp	r5, #0
 8010ee0:	f000 809a 	beq.w	8011018 <_dtoa_r+0x468>
 8010ee4:	9b00      	ldr	r3, [sp, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	dd32      	ble.n	8010f50 <_dtoa_r+0x3a0>
 8010eea:	4ab7      	ldr	r2, [pc, #732]	; (80111c8 <_dtoa_r+0x618>)
 8010eec:	f003 030f 	and.w	r3, r3, #15
 8010ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ef8:	9b00      	ldr	r3, [sp, #0]
 8010efa:	05d8      	lsls	r0, r3, #23
 8010efc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010f00:	d516      	bpl.n	8010f30 <_dtoa_r+0x380>
 8010f02:	4bb2      	ldr	r3, [pc, #712]	; (80111cc <_dtoa_r+0x61c>)
 8010f04:	ec51 0b19 	vmov	r0, r1, d9
 8010f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f0c:	f7ef fc9e 	bl	800084c <__aeabi_ddiv>
 8010f10:	f007 070f 	and.w	r7, r7, #15
 8010f14:	4682      	mov	sl, r0
 8010f16:	468b      	mov	fp, r1
 8010f18:	2503      	movs	r5, #3
 8010f1a:	4eac      	ldr	r6, [pc, #688]	; (80111cc <_dtoa_r+0x61c>)
 8010f1c:	b957      	cbnz	r7, 8010f34 <_dtoa_r+0x384>
 8010f1e:	4642      	mov	r2, r8
 8010f20:	464b      	mov	r3, r9
 8010f22:	4650      	mov	r0, sl
 8010f24:	4659      	mov	r1, fp
 8010f26:	f7ef fc91 	bl	800084c <__aeabi_ddiv>
 8010f2a:	4682      	mov	sl, r0
 8010f2c:	468b      	mov	fp, r1
 8010f2e:	e028      	b.n	8010f82 <_dtoa_r+0x3d2>
 8010f30:	2502      	movs	r5, #2
 8010f32:	e7f2      	b.n	8010f1a <_dtoa_r+0x36a>
 8010f34:	07f9      	lsls	r1, r7, #31
 8010f36:	d508      	bpl.n	8010f4a <_dtoa_r+0x39a>
 8010f38:	4640      	mov	r0, r8
 8010f3a:	4649      	mov	r1, r9
 8010f3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f40:	f7ef fb5a 	bl	80005f8 <__aeabi_dmul>
 8010f44:	3501      	adds	r5, #1
 8010f46:	4680      	mov	r8, r0
 8010f48:	4689      	mov	r9, r1
 8010f4a:	107f      	asrs	r7, r7, #1
 8010f4c:	3608      	adds	r6, #8
 8010f4e:	e7e5      	b.n	8010f1c <_dtoa_r+0x36c>
 8010f50:	f000 809b 	beq.w	801108a <_dtoa_r+0x4da>
 8010f54:	9b00      	ldr	r3, [sp, #0]
 8010f56:	4f9d      	ldr	r7, [pc, #628]	; (80111cc <_dtoa_r+0x61c>)
 8010f58:	425e      	negs	r6, r3
 8010f5a:	4b9b      	ldr	r3, [pc, #620]	; (80111c8 <_dtoa_r+0x618>)
 8010f5c:	f006 020f 	and.w	r2, r6, #15
 8010f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f68:	ec51 0b19 	vmov	r0, r1, d9
 8010f6c:	f7ef fb44 	bl	80005f8 <__aeabi_dmul>
 8010f70:	1136      	asrs	r6, r6, #4
 8010f72:	4682      	mov	sl, r0
 8010f74:	468b      	mov	fp, r1
 8010f76:	2300      	movs	r3, #0
 8010f78:	2502      	movs	r5, #2
 8010f7a:	2e00      	cmp	r6, #0
 8010f7c:	d17a      	bne.n	8011074 <_dtoa_r+0x4c4>
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1d3      	bne.n	8010f2a <_dtoa_r+0x37a>
 8010f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f000 8082 	beq.w	801108e <_dtoa_r+0x4de>
 8010f8a:	4b91      	ldr	r3, [pc, #580]	; (80111d0 <_dtoa_r+0x620>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	4650      	mov	r0, sl
 8010f90:	4659      	mov	r1, fp
 8010f92:	f7ef fda3 	bl	8000adc <__aeabi_dcmplt>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d079      	beq.n	801108e <_dtoa_r+0x4de>
 8010f9a:	9b03      	ldr	r3, [sp, #12]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d076      	beq.n	801108e <_dtoa_r+0x4de>
 8010fa0:	9b02      	ldr	r3, [sp, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	dd36      	ble.n	8011014 <_dtoa_r+0x464>
 8010fa6:	9b00      	ldr	r3, [sp, #0]
 8010fa8:	4650      	mov	r0, sl
 8010faa:	4659      	mov	r1, fp
 8010fac:	1e5f      	subs	r7, r3, #1
 8010fae:	2200      	movs	r2, #0
 8010fb0:	4b88      	ldr	r3, [pc, #544]	; (80111d4 <_dtoa_r+0x624>)
 8010fb2:	f7ef fb21 	bl	80005f8 <__aeabi_dmul>
 8010fb6:	9e02      	ldr	r6, [sp, #8]
 8010fb8:	4682      	mov	sl, r0
 8010fba:	468b      	mov	fp, r1
 8010fbc:	3501      	adds	r5, #1
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	f7ef fab0 	bl	8000524 <__aeabi_i2d>
 8010fc4:	4652      	mov	r2, sl
 8010fc6:	465b      	mov	r3, fp
 8010fc8:	f7ef fb16 	bl	80005f8 <__aeabi_dmul>
 8010fcc:	4b82      	ldr	r3, [pc, #520]	; (80111d8 <_dtoa_r+0x628>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f7ef f95c 	bl	800028c <__adddf3>
 8010fd4:	46d0      	mov	r8, sl
 8010fd6:	46d9      	mov	r9, fp
 8010fd8:	4682      	mov	sl, r0
 8010fda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010fde:	2e00      	cmp	r6, #0
 8010fe0:	d158      	bne.n	8011094 <_dtoa_r+0x4e4>
 8010fe2:	4b7e      	ldr	r3, [pc, #504]	; (80111dc <_dtoa_r+0x62c>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	4640      	mov	r0, r8
 8010fe8:	4649      	mov	r1, r9
 8010fea:	f7ef f94d 	bl	8000288 <__aeabi_dsub>
 8010fee:	4652      	mov	r2, sl
 8010ff0:	465b      	mov	r3, fp
 8010ff2:	4680      	mov	r8, r0
 8010ff4:	4689      	mov	r9, r1
 8010ff6:	f7ef fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	f040 8295 	bne.w	801152a <_dtoa_r+0x97a>
 8011000:	4652      	mov	r2, sl
 8011002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011006:	4640      	mov	r0, r8
 8011008:	4649      	mov	r1, r9
 801100a:	f7ef fd67 	bl	8000adc <__aeabi_dcmplt>
 801100e:	2800      	cmp	r0, #0
 8011010:	f040 8289 	bne.w	8011526 <_dtoa_r+0x976>
 8011014:	ec5b ab19 	vmov	sl, fp, d9
 8011018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801101a:	2b00      	cmp	r3, #0
 801101c:	f2c0 8148 	blt.w	80112b0 <_dtoa_r+0x700>
 8011020:	9a00      	ldr	r2, [sp, #0]
 8011022:	2a0e      	cmp	r2, #14
 8011024:	f300 8144 	bgt.w	80112b0 <_dtoa_r+0x700>
 8011028:	4b67      	ldr	r3, [pc, #412]	; (80111c8 <_dtoa_r+0x618>)
 801102a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801102e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011034:	2b00      	cmp	r3, #0
 8011036:	f280 80d5 	bge.w	80111e4 <_dtoa_r+0x634>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	f300 80d1 	bgt.w	80111e4 <_dtoa_r+0x634>
 8011042:	f040 826f 	bne.w	8011524 <_dtoa_r+0x974>
 8011046:	4b65      	ldr	r3, [pc, #404]	; (80111dc <_dtoa_r+0x62c>)
 8011048:	2200      	movs	r2, #0
 801104a:	4640      	mov	r0, r8
 801104c:	4649      	mov	r1, r9
 801104e:	f7ef fad3 	bl	80005f8 <__aeabi_dmul>
 8011052:	4652      	mov	r2, sl
 8011054:	465b      	mov	r3, fp
 8011056:	f7ef fd55 	bl	8000b04 <__aeabi_dcmpge>
 801105a:	9e03      	ldr	r6, [sp, #12]
 801105c:	4637      	mov	r7, r6
 801105e:	2800      	cmp	r0, #0
 8011060:	f040 8245 	bne.w	80114ee <_dtoa_r+0x93e>
 8011064:	9d01      	ldr	r5, [sp, #4]
 8011066:	2331      	movs	r3, #49	; 0x31
 8011068:	f805 3b01 	strb.w	r3, [r5], #1
 801106c:	9b00      	ldr	r3, [sp, #0]
 801106e:	3301      	adds	r3, #1
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	e240      	b.n	80114f6 <_dtoa_r+0x946>
 8011074:	07f2      	lsls	r2, r6, #31
 8011076:	d505      	bpl.n	8011084 <_dtoa_r+0x4d4>
 8011078:	e9d7 2300 	ldrd	r2, r3, [r7]
 801107c:	f7ef fabc 	bl	80005f8 <__aeabi_dmul>
 8011080:	3501      	adds	r5, #1
 8011082:	2301      	movs	r3, #1
 8011084:	1076      	asrs	r6, r6, #1
 8011086:	3708      	adds	r7, #8
 8011088:	e777      	b.n	8010f7a <_dtoa_r+0x3ca>
 801108a:	2502      	movs	r5, #2
 801108c:	e779      	b.n	8010f82 <_dtoa_r+0x3d2>
 801108e:	9f00      	ldr	r7, [sp, #0]
 8011090:	9e03      	ldr	r6, [sp, #12]
 8011092:	e794      	b.n	8010fbe <_dtoa_r+0x40e>
 8011094:	9901      	ldr	r1, [sp, #4]
 8011096:	4b4c      	ldr	r3, [pc, #304]	; (80111c8 <_dtoa_r+0x618>)
 8011098:	4431      	add	r1, r6
 801109a:	910d      	str	r1, [sp, #52]	; 0x34
 801109c:	9908      	ldr	r1, [sp, #32]
 801109e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80110a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80110a6:	2900      	cmp	r1, #0
 80110a8:	d043      	beq.n	8011132 <_dtoa_r+0x582>
 80110aa:	494d      	ldr	r1, [pc, #308]	; (80111e0 <_dtoa_r+0x630>)
 80110ac:	2000      	movs	r0, #0
 80110ae:	f7ef fbcd 	bl	800084c <__aeabi_ddiv>
 80110b2:	4652      	mov	r2, sl
 80110b4:	465b      	mov	r3, fp
 80110b6:	f7ef f8e7 	bl	8000288 <__aeabi_dsub>
 80110ba:	9d01      	ldr	r5, [sp, #4]
 80110bc:	4682      	mov	sl, r0
 80110be:	468b      	mov	fp, r1
 80110c0:	4649      	mov	r1, r9
 80110c2:	4640      	mov	r0, r8
 80110c4:	f7ef fd48 	bl	8000b58 <__aeabi_d2iz>
 80110c8:	4606      	mov	r6, r0
 80110ca:	f7ef fa2b 	bl	8000524 <__aeabi_i2d>
 80110ce:	4602      	mov	r2, r0
 80110d0:	460b      	mov	r3, r1
 80110d2:	4640      	mov	r0, r8
 80110d4:	4649      	mov	r1, r9
 80110d6:	f7ef f8d7 	bl	8000288 <__aeabi_dsub>
 80110da:	3630      	adds	r6, #48	; 0x30
 80110dc:	f805 6b01 	strb.w	r6, [r5], #1
 80110e0:	4652      	mov	r2, sl
 80110e2:	465b      	mov	r3, fp
 80110e4:	4680      	mov	r8, r0
 80110e6:	4689      	mov	r9, r1
 80110e8:	f7ef fcf8 	bl	8000adc <__aeabi_dcmplt>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d163      	bne.n	80111b8 <_dtoa_r+0x608>
 80110f0:	4642      	mov	r2, r8
 80110f2:	464b      	mov	r3, r9
 80110f4:	4936      	ldr	r1, [pc, #216]	; (80111d0 <_dtoa_r+0x620>)
 80110f6:	2000      	movs	r0, #0
 80110f8:	f7ef f8c6 	bl	8000288 <__aeabi_dsub>
 80110fc:	4652      	mov	r2, sl
 80110fe:	465b      	mov	r3, fp
 8011100:	f7ef fcec 	bl	8000adc <__aeabi_dcmplt>
 8011104:	2800      	cmp	r0, #0
 8011106:	f040 80b5 	bne.w	8011274 <_dtoa_r+0x6c4>
 801110a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801110c:	429d      	cmp	r5, r3
 801110e:	d081      	beq.n	8011014 <_dtoa_r+0x464>
 8011110:	4b30      	ldr	r3, [pc, #192]	; (80111d4 <_dtoa_r+0x624>)
 8011112:	2200      	movs	r2, #0
 8011114:	4650      	mov	r0, sl
 8011116:	4659      	mov	r1, fp
 8011118:	f7ef fa6e 	bl	80005f8 <__aeabi_dmul>
 801111c:	4b2d      	ldr	r3, [pc, #180]	; (80111d4 <_dtoa_r+0x624>)
 801111e:	4682      	mov	sl, r0
 8011120:	468b      	mov	fp, r1
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	2200      	movs	r2, #0
 8011128:	f7ef fa66 	bl	80005f8 <__aeabi_dmul>
 801112c:	4680      	mov	r8, r0
 801112e:	4689      	mov	r9, r1
 8011130:	e7c6      	b.n	80110c0 <_dtoa_r+0x510>
 8011132:	4650      	mov	r0, sl
 8011134:	4659      	mov	r1, fp
 8011136:	f7ef fa5f 	bl	80005f8 <__aeabi_dmul>
 801113a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801113c:	9d01      	ldr	r5, [sp, #4]
 801113e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011140:	4682      	mov	sl, r0
 8011142:	468b      	mov	fp, r1
 8011144:	4649      	mov	r1, r9
 8011146:	4640      	mov	r0, r8
 8011148:	f7ef fd06 	bl	8000b58 <__aeabi_d2iz>
 801114c:	4606      	mov	r6, r0
 801114e:	f7ef f9e9 	bl	8000524 <__aeabi_i2d>
 8011152:	3630      	adds	r6, #48	; 0x30
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	4640      	mov	r0, r8
 801115a:	4649      	mov	r1, r9
 801115c:	f7ef f894 	bl	8000288 <__aeabi_dsub>
 8011160:	f805 6b01 	strb.w	r6, [r5], #1
 8011164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011166:	429d      	cmp	r5, r3
 8011168:	4680      	mov	r8, r0
 801116a:	4689      	mov	r9, r1
 801116c:	f04f 0200 	mov.w	r2, #0
 8011170:	d124      	bne.n	80111bc <_dtoa_r+0x60c>
 8011172:	4b1b      	ldr	r3, [pc, #108]	; (80111e0 <_dtoa_r+0x630>)
 8011174:	4650      	mov	r0, sl
 8011176:	4659      	mov	r1, fp
 8011178:	f7ef f888 	bl	800028c <__adddf3>
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	4640      	mov	r0, r8
 8011182:	4649      	mov	r1, r9
 8011184:	f7ef fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8011188:	2800      	cmp	r0, #0
 801118a:	d173      	bne.n	8011274 <_dtoa_r+0x6c4>
 801118c:	4652      	mov	r2, sl
 801118e:	465b      	mov	r3, fp
 8011190:	4913      	ldr	r1, [pc, #76]	; (80111e0 <_dtoa_r+0x630>)
 8011192:	2000      	movs	r0, #0
 8011194:	f7ef f878 	bl	8000288 <__aeabi_dsub>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4640      	mov	r0, r8
 801119e:	4649      	mov	r1, r9
 80111a0:	f7ef fc9c 	bl	8000adc <__aeabi_dcmplt>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	f43f af35 	beq.w	8011014 <_dtoa_r+0x464>
 80111aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80111ac:	1e6b      	subs	r3, r5, #1
 80111ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80111b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80111b4:	2b30      	cmp	r3, #48	; 0x30
 80111b6:	d0f8      	beq.n	80111aa <_dtoa_r+0x5fa>
 80111b8:	9700      	str	r7, [sp, #0]
 80111ba:	e049      	b.n	8011250 <_dtoa_r+0x6a0>
 80111bc:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <_dtoa_r+0x624>)
 80111be:	f7ef fa1b 	bl	80005f8 <__aeabi_dmul>
 80111c2:	4680      	mov	r8, r0
 80111c4:	4689      	mov	r9, r1
 80111c6:	e7bd      	b.n	8011144 <_dtoa_r+0x594>
 80111c8:	08017940 	.word	0x08017940
 80111cc:	08017918 	.word	0x08017918
 80111d0:	3ff00000 	.word	0x3ff00000
 80111d4:	40240000 	.word	0x40240000
 80111d8:	401c0000 	.word	0x401c0000
 80111dc:	40140000 	.word	0x40140000
 80111e0:	3fe00000 	.word	0x3fe00000
 80111e4:	9d01      	ldr	r5, [sp, #4]
 80111e6:	4656      	mov	r6, sl
 80111e8:	465f      	mov	r7, fp
 80111ea:	4642      	mov	r2, r8
 80111ec:	464b      	mov	r3, r9
 80111ee:	4630      	mov	r0, r6
 80111f0:	4639      	mov	r1, r7
 80111f2:	f7ef fb2b 	bl	800084c <__aeabi_ddiv>
 80111f6:	f7ef fcaf 	bl	8000b58 <__aeabi_d2iz>
 80111fa:	4682      	mov	sl, r0
 80111fc:	f7ef f992 	bl	8000524 <__aeabi_i2d>
 8011200:	4642      	mov	r2, r8
 8011202:	464b      	mov	r3, r9
 8011204:	f7ef f9f8 	bl	80005f8 <__aeabi_dmul>
 8011208:	4602      	mov	r2, r0
 801120a:	460b      	mov	r3, r1
 801120c:	4630      	mov	r0, r6
 801120e:	4639      	mov	r1, r7
 8011210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011214:	f7ef f838 	bl	8000288 <__aeabi_dsub>
 8011218:	f805 6b01 	strb.w	r6, [r5], #1
 801121c:	9e01      	ldr	r6, [sp, #4]
 801121e:	9f03      	ldr	r7, [sp, #12]
 8011220:	1bae      	subs	r6, r5, r6
 8011222:	42b7      	cmp	r7, r6
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	d135      	bne.n	8011296 <_dtoa_r+0x6e6>
 801122a:	f7ef f82f 	bl	800028c <__adddf3>
 801122e:	4642      	mov	r2, r8
 8011230:	464b      	mov	r3, r9
 8011232:	4606      	mov	r6, r0
 8011234:	460f      	mov	r7, r1
 8011236:	f7ef fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 801123a:	b9d0      	cbnz	r0, 8011272 <_dtoa_r+0x6c2>
 801123c:	4642      	mov	r2, r8
 801123e:	464b      	mov	r3, r9
 8011240:	4630      	mov	r0, r6
 8011242:	4639      	mov	r1, r7
 8011244:	f7ef fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8011248:	b110      	cbz	r0, 8011250 <_dtoa_r+0x6a0>
 801124a:	f01a 0f01 	tst.w	sl, #1
 801124e:	d110      	bne.n	8011272 <_dtoa_r+0x6c2>
 8011250:	4620      	mov	r0, r4
 8011252:	ee18 1a10 	vmov	r1, s16
 8011256:	f000 fe75 	bl	8011f44 <_Bfree>
 801125a:	2300      	movs	r3, #0
 801125c:	9800      	ldr	r0, [sp, #0]
 801125e:	702b      	strb	r3, [r5, #0]
 8011260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011262:	3001      	adds	r0, #1
 8011264:	6018      	str	r0, [r3, #0]
 8011266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011268:	2b00      	cmp	r3, #0
 801126a:	f43f acf1 	beq.w	8010c50 <_dtoa_r+0xa0>
 801126e:	601d      	str	r5, [r3, #0]
 8011270:	e4ee      	b.n	8010c50 <_dtoa_r+0xa0>
 8011272:	9f00      	ldr	r7, [sp, #0]
 8011274:	462b      	mov	r3, r5
 8011276:	461d      	mov	r5, r3
 8011278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801127c:	2a39      	cmp	r2, #57	; 0x39
 801127e:	d106      	bne.n	801128e <_dtoa_r+0x6de>
 8011280:	9a01      	ldr	r2, [sp, #4]
 8011282:	429a      	cmp	r2, r3
 8011284:	d1f7      	bne.n	8011276 <_dtoa_r+0x6c6>
 8011286:	9901      	ldr	r1, [sp, #4]
 8011288:	2230      	movs	r2, #48	; 0x30
 801128a:	3701      	adds	r7, #1
 801128c:	700a      	strb	r2, [r1, #0]
 801128e:	781a      	ldrb	r2, [r3, #0]
 8011290:	3201      	adds	r2, #1
 8011292:	701a      	strb	r2, [r3, #0]
 8011294:	e790      	b.n	80111b8 <_dtoa_r+0x608>
 8011296:	4ba6      	ldr	r3, [pc, #664]	; (8011530 <_dtoa_r+0x980>)
 8011298:	2200      	movs	r2, #0
 801129a:	f7ef f9ad 	bl	80005f8 <__aeabi_dmul>
 801129e:	2200      	movs	r2, #0
 80112a0:	2300      	movs	r3, #0
 80112a2:	4606      	mov	r6, r0
 80112a4:	460f      	mov	r7, r1
 80112a6:	f7ef fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d09d      	beq.n	80111ea <_dtoa_r+0x63a>
 80112ae:	e7cf      	b.n	8011250 <_dtoa_r+0x6a0>
 80112b0:	9a08      	ldr	r2, [sp, #32]
 80112b2:	2a00      	cmp	r2, #0
 80112b4:	f000 80d7 	beq.w	8011466 <_dtoa_r+0x8b6>
 80112b8:	9a06      	ldr	r2, [sp, #24]
 80112ba:	2a01      	cmp	r2, #1
 80112bc:	f300 80ba 	bgt.w	8011434 <_dtoa_r+0x884>
 80112c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112c2:	2a00      	cmp	r2, #0
 80112c4:	f000 80b2 	beq.w	801142c <_dtoa_r+0x87c>
 80112c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80112cc:	9e07      	ldr	r6, [sp, #28]
 80112ce:	9d04      	ldr	r5, [sp, #16]
 80112d0:	9a04      	ldr	r2, [sp, #16]
 80112d2:	441a      	add	r2, r3
 80112d4:	9204      	str	r2, [sp, #16]
 80112d6:	9a05      	ldr	r2, [sp, #20]
 80112d8:	2101      	movs	r1, #1
 80112da:	441a      	add	r2, r3
 80112dc:	4620      	mov	r0, r4
 80112de:	9205      	str	r2, [sp, #20]
 80112e0:	f000 ff32 	bl	8012148 <__i2b>
 80112e4:	4607      	mov	r7, r0
 80112e6:	2d00      	cmp	r5, #0
 80112e8:	dd0c      	ble.n	8011304 <_dtoa_r+0x754>
 80112ea:	9b05      	ldr	r3, [sp, #20]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	dd09      	ble.n	8011304 <_dtoa_r+0x754>
 80112f0:	42ab      	cmp	r3, r5
 80112f2:	9a04      	ldr	r2, [sp, #16]
 80112f4:	bfa8      	it	ge
 80112f6:	462b      	movge	r3, r5
 80112f8:	1ad2      	subs	r2, r2, r3
 80112fa:	9204      	str	r2, [sp, #16]
 80112fc:	9a05      	ldr	r2, [sp, #20]
 80112fe:	1aed      	subs	r5, r5, r3
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	9305      	str	r3, [sp, #20]
 8011304:	9b07      	ldr	r3, [sp, #28]
 8011306:	b31b      	cbz	r3, 8011350 <_dtoa_r+0x7a0>
 8011308:	9b08      	ldr	r3, [sp, #32]
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 80af 	beq.w	801146e <_dtoa_r+0x8be>
 8011310:	2e00      	cmp	r6, #0
 8011312:	dd13      	ble.n	801133c <_dtoa_r+0x78c>
 8011314:	4639      	mov	r1, r7
 8011316:	4632      	mov	r2, r6
 8011318:	4620      	mov	r0, r4
 801131a:	f000 ffd5 	bl	80122c8 <__pow5mult>
 801131e:	ee18 2a10 	vmov	r2, s16
 8011322:	4601      	mov	r1, r0
 8011324:	4607      	mov	r7, r0
 8011326:	4620      	mov	r0, r4
 8011328:	f000 ff24 	bl	8012174 <__multiply>
 801132c:	ee18 1a10 	vmov	r1, s16
 8011330:	4680      	mov	r8, r0
 8011332:	4620      	mov	r0, r4
 8011334:	f000 fe06 	bl	8011f44 <_Bfree>
 8011338:	ee08 8a10 	vmov	s16, r8
 801133c:	9b07      	ldr	r3, [sp, #28]
 801133e:	1b9a      	subs	r2, r3, r6
 8011340:	d006      	beq.n	8011350 <_dtoa_r+0x7a0>
 8011342:	ee18 1a10 	vmov	r1, s16
 8011346:	4620      	mov	r0, r4
 8011348:	f000 ffbe 	bl	80122c8 <__pow5mult>
 801134c:	ee08 0a10 	vmov	s16, r0
 8011350:	2101      	movs	r1, #1
 8011352:	4620      	mov	r0, r4
 8011354:	f000 fef8 	bl	8012148 <__i2b>
 8011358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801135a:	2b00      	cmp	r3, #0
 801135c:	4606      	mov	r6, r0
 801135e:	f340 8088 	ble.w	8011472 <_dtoa_r+0x8c2>
 8011362:	461a      	mov	r2, r3
 8011364:	4601      	mov	r1, r0
 8011366:	4620      	mov	r0, r4
 8011368:	f000 ffae 	bl	80122c8 <__pow5mult>
 801136c:	9b06      	ldr	r3, [sp, #24]
 801136e:	2b01      	cmp	r3, #1
 8011370:	4606      	mov	r6, r0
 8011372:	f340 8081 	ble.w	8011478 <_dtoa_r+0x8c8>
 8011376:	f04f 0800 	mov.w	r8, #0
 801137a:	6933      	ldr	r3, [r6, #16]
 801137c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011380:	6918      	ldr	r0, [r3, #16]
 8011382:	f000 fe91 	bl	80120a8 <__hi0bits>
 8011386:	f1c0 0020 	rsb	r0, r0, #32
 801138a:	9b05      	ldr	r3, [sp, #20]
 801138c:	4418      	add	r0, r3
 801138e:	f010 001f 	ands.w	r0, r0, #31
 8011392:	f000 8092 	beq.w	80114ba <_dtoa_r+0x90a>
 8011396:	f1c0 0320 	rsb	r3, r0, #32
 801139a:	2b04      	cmp	r3, #4
 801139c:	f340 808a 	ble.w	80114b4 <_dtoa_r+0x904>
 80113a0:	f1c0 001c 	rsb	r0, r0, #28
 80113a4:	9b04      	ldr	r3, [sp, #16]
 80113a6:	4403      	add	r3, r0
 80113a8:	9304      	str	r3, [sp, #16]
 80113aa:	9b05      	ldr	r3, [sp, #20]
 80113ac:	4403      	add	r3, r0
 80113ae:	4405      	add	r5, r0
 80113b0:	9305      	str	r3, [sp, #20]
 80113b2:	9b04      	ldr	r3, [sp, #16]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	dd07      	ble.n	80113c8 <_dtoa_r+0x818>
 80113b8:	ee18 1a10 	vmov	r1, s16
 80113bc:	461a      	mov	r2, r3
 80113be:	4620      	mov	r0, r4
 80113c0:	f000 ffdc 	bl	801237c <__lshift>
 80113c4:	ee08 0a10 	vmov	s16, r0
 80113c8:	9b05      	ldr	r3, [sp, #20]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	dd05      	ble.n	80113da <_dtoa_r+0x82a>
 80113ce:	4631      	mov	r1, r6
 80113d0:	461a      	mov	r2, r3
 80113d2:	4620      	mov	r0, r4
 80113d4:	f000 ffd2 	bl	801237c <__lshift>
 80113d8:	4606      	mov	r6, r0
 80113da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d06e      	beq.n	80114be <_dtoa_r+0x90e>
 80113e0:	ee18 0a10 	vmov	r0, s16
 80113e4:	4631      	mov	r1, r6
 80113e6:	f001 f839 	bl	801245c <__mcmp>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	da67      	bge.n	80114be <_dtoa_r+0x90e>
 80113ee:	9b00      	ldr	r3, [sp, #0]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	ee18 1a10 	vmov	r1, s16
 80113f6:	9300      	str	r3, [sp, #0]
 80113f8:	220a      	movs	r2, #10
 80113fa:	2300      	movs	r3, #0
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 fdc3 	bl	8011f88 <__multadd>
 8011402:	9b08      	ldr	r3, [sp, #32]
 8011404:	ee08 0a10 	vmov	s16, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 81b1 	beq.w	8011770 <_dtoa_r+0xbc0>
 801140e:	2300      	movs	r3, #0
 8011410:	4639      	mov	r1, r7
 8011412:	220a      	movs	r2, #10
 8011414:	4620      	mov	r0, r4
 8011416:	f000 fdb7 	bl	8011f88 <__multadd>
 801141a:	9b02      	ldr	r3, [sp, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	4607      	mov	r7, r0
 8011420:	f300 808e 	bgt.w	8011540 <_dtoa_r+0x990>
 8011424:	9b06      	ldr	r3, [sp, #24]
 8011426:	2b02      	cmp	r3, #2
 8011428:	dc51      	bgt.n	80114ce <_dtoa_r+0x91e>
 801142a:	e089      	b.n	8011540 <_dtoa_r+0x990>
 801142c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801142e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011432:	e74b      	b.n	80112cc <_dtoa_r+0x71c>
 8011434:	9b03      	ldr	r3, [sp, #12]
 8011436:	1e5e      	subs	r6, r3, #1
 8011438:	9b07      	ldr	r3, [sp, #28]
 801143a:	42b3      	cmp	r3, r6
 801143c:	bfbf      	itttt	lt
 801143e:	9b07      	ldrlt	r3, [sp, #28]
 8011440:	9607      	strlt	r6, [sp, #28]
 8011442:	1af2      	sublt	r2, r6, r3
 8011444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011446:	bfb6      	itet	lt
 8011448:	189b      	addlt	r3, r3, r2
 801144a:	1b9e      	subge	r6, r3, r6
 801144c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801144e:	9b03      	ldr	r3, [sp, #12]
 8011450:	bfb8      	it	lt
 8011452:	2600      	movlt	r6, #0
 8011454:	2b00      	cmp	r3, #0
 8011456:	bfb7      	itett	lt
 8011458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801145c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011460:	1a9d      	sublt	r5, r3, r2
 8011462:	2300      	movlt	r3, #0
 8011464:	e734      	b.n	80112d0 <_dtoa_r+0x720>
 8011466:	9e07      	ldr	r6, [sp, #28]
 8011468:	9d04      	ldr	r5, [sp, #16]
 801146a:	9f08      	ldr	r7, [sp, #32]
 801146c:	e73b      	b.n	80112e6 <_dtoa_r+0x736>
 801146e:	9a07      	ldr	r2, [sp, #28]
 8011470:	e767      	b.n	8011342 <_dtoa_r+0x792>
 8011472:	9b06      	ldr	r3, [sp, #24]
 8011474:	2b01      	cmp	r3, #1
 8011476:	dc18      	bgt.n	80114aa <_dtoa_r+0x8fa>
 8011478:	f1ba 0f00 	cmp.w	sl, #0
 801147c:	d115      	bne.n	80114aa <_dtoa_r+0x8fa>
 801147e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011482:	b993      	cbnz	r3, 80114aa <_dtoa_r+0x8fa>
 8011484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011488:	0d1b      	lsrs	r3, r3, #20
 801148a:	051b      	lsls	r3, r3, #20
 801148c:	b183      	cbz	r3, 80114b0 <_dtoa_r+0x900>
 801148e:	9b04      	ldr	r3, [sp, #16]
 8011490:	3301      	adds	r3, #1
 8011492:	9304      	str	r3, [sp, #16]
 8011494:	9b05      	ldr	r3, [sp, #20]
 8011496:	3301      	adds	r3, #1
 8011498:	9305      	str	r3, [sp, #20]
 801149a:	f04f 0801 	mov.w	r8, #1
 801149e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f47f af6a 	bne.w	801137a <_dtoa_r+0x7ca>
 80114a6:	2001      	movs	r0, #1
 80114a8:	e76f      	b.n	801138a <_dtoa_r+0x7da>
 80114aa:	f04f 0800 	mov.w	r8, #0
 80114ae:	e7f6      	b.n	801149e <_dtoa_r+0x8ee>
 80114b0:	4698      	mov	r8, r3
 80114b2:	e7f4      	b.n	801149e <_dtoa_r+0x8ee>
 80114b4:	f43f af7d 	beq.w	80113b2 <_dtoa_r+0x802>
 80114b8:	4618      	mov	r0, r3
 80114ba:	301c      	adds	r0, #28
 80114bc:	e772      	b.n	80113a4 <_dtoa_r+0x7f4>
 80114be:	9b03      	ldr	r3, [sp, #12]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	dc37      	bgt.n	8011534 <_dtoa_r+0x984>
 80114c4:	9b06      	ldr	r3, [sp, #24]
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	dd34      	ble.n	8011534 <_dtoa_r+0x984>
 80114ca:	9b03      	ldr	r3, [sp, #12]
 80114cc:	9302      	str	r3, [sp, #8]
 80114ce:	9b02      	ldr	r3, [sp, #8]
 80114d0:	b96b      	cbnz	r3, 80114ee <_dtoa_r+0x93e>
 80114d2:	4631      	mov	r1, r6
 80114d4:	2205      	movs	r2, #5
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 fd56 	bl	8011f88 <__multadd>
 80114dc:	4601      	mov	r1, r0
 80114de:	4606      	mov	r6, r0
 80114e0:	ee18 0a10 	vmov	r0, s16
 80114e4:	f000 ffba 	bl	801245c <__mcmp>
 80114e8:	2800      	cmp	r0, #0
 80114ea:	f73f adbb 	bgt.w	8011064 <_dtoa_r+0x4b4>
 80114ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114f0:	9d01      	ldr	r5, [sp, #4]
 80114f2:	43db      	mvns	r3, r3
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	f04f 0800 	mov.w	r8, #0
 80114fa:	4631      	mov	r1, r6
 80114fc:	4620      	mov	r0, r4
 80114fe:	f000 fd21 	bl	8011f44 <_Bfree>
 8011502:	2f00      	cmp	r7, #0
 8011504:	f43f aea4 	beq.w	8011250 <_dtoa_r+0x6a0>
 8011508:	f1b8 0f00 	cmp.w	r8, #0
 801150c:	d005      	beq.n	801151a <_dtoa_r+0x96a>
 801150e:	45b8      	cmp	r8, r7
 8011510:	d003      	beq.n	801151a <_dtoa_r+0x96a>
 8011512:	4641      	mov	r1, r8
 8011514:	4620      	mov	r0, r4
 8011516:	f000 fd15 	bl	8011f44 <_Bfree>
 801151a:	4639      	mov	r1, r7
 801151c:	4620      	mov	r0, r4
 801151e:	f000 fd11 	bl	8011f44 <_Bfree>
 8011522:	e695      	b.n	8011250 <_dtoa_r+0x6a0>
 8011524:	2600      	movs	r6, #0
 8011526:	4637      	mov	r7, r6
 8011528:	e7e1      	b.n	80114ee <_dtoa_r+0x93e>
 801152a:	9700      	str	r7, [sp, #0]
 801152c:	4637      	mov	r7, r6
 801152e:	e599      	b.n	8011064 <_dtoa_r+0x4b4>
 8011530:	40240000 	.word	0x40240000
 8011534:	9b08      	ldr	r3, [sp, #32]
 8011536:	2b00      	cmp	r3, #0
 8011538:	f000 80ca 	beq.w	80116d0 <_dtoa_r+0xb20>
 801153c:	9b03      	ldr	r3, [sp, #12]
 801153e:	9302      	str	r3, [sp, #8]
 8011540:	2d00      	cmp	r5, #0
 8011542:	dd05      	ble.n	8011550 <_dtoa_r+0x9a0>
 8011544:	4639      	mov	r1, r7
 8011546:	462a      	mov	r2, r5
 8011548:	4620      	mov	r0, r4
 801154a:	f000 ff17 	bl	801237c <__lshift>
 801154e:	4607      	mov	r7, r0
 8011550:	f1b8 0f00 	cmp.w	r8, #0
 8011554:	d05b      	beq.n	801160e <_dtoa_r+0xa5e>
 8011556:	6879      	ldr	r1, [r7, #4]
 8011558:	4620      	mov	r0, r4
 801155a:	f000 fcb3 	bl	8011ec4 <_Balloc>
 801155e:	4605      	mov	r5, r0
 8011560:	b928      	cbnz	r0, 801156e <_dtoa_r+0x9be>
 8011562:	4b87      	ldr	r3, [pc, #540]	; (8011780 <_dtoa_r+0xbd0>)
 8011564:	4602      	mov	r2, r0
 8011566:	f240 21ea 	movw	r1, #746	; 0x2ea
 801156a:	f7ff bb3b 	b.w	8010be4 <_dtoa_r+0x34>
 801156e:	693a      	ldr	r2, [r7, #16]
 8011570:	3202      	adds	r2, #2
 8011572:	0092      	lsls	r2, r2, #2
 8011574:	f107 010c 	add.w	r1, r7, #12
 8011578:	300c      	adds	r0, #12
 801157a:	f000 fc95 	bl	8011ea8 <memcpy>
 801157e:	2201      	movs	r2, #1
 8011580:	4629      	mov	r1, r5
 8011582:	4620      	mov	r0, r4
 8011584:	f000 fefa 	bl	801237c <__lshift>
 8011588:	9b01      	ldr	r3, [sp, #4]
 801158a:	f103 0901 	add.w	r9, r3, #1
 801158e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011592:	4413      	add	r3, r2
 8011594:	9305      	str	r3, [sp, #20]
 8011596:	f00a 0301 	and.w	r3, sl, #1
 801159a:	46b8      	mov	r8, r7
 801159c:	9304      	str	r3, [sp, #16]
 801159e:	4607      	mov	r7, r0
 80115a0:	4631      	mov	r1, r6
 80115a2:	ee18 0a10 	vmov	r0, s16
 80115a6:	f7ff fa77 	bl	8010a98 <quorem>
 80115aa:	4641      	mov	r1, r8
 80115ac:	9002      	str	r0, [sp, #8]
 80115ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80115b2:	ee18 0a10 	vmov	r0, s16
 80115b6:	f000 ff51 	bl	801245c <__mcmp>
 80115ba:	463a      	mov	r2, r7
 80115bc:	9003      	str	r0, [sp, #12]
 80115be:	4631      	mov	r1, r6
 80115c0:	4620      	mov	r0, r4
 80115c2:	f000 ff67 	bl	8012494 <__mdiff>
 80115c6:	68c2      	ldr	r2, [r0, #12]
 80115c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80115cc:	4605      	mov	r5, r0
 80115ce:	bb02      	cbnz	r2, 8011612 <_dtoa_r+0xa62>
 80115d0:	4601      	mov	r1, r0
 80115d2:	ee18 0a10 	vmov	r0, s16
 80115d6:	f000 ff41 	bl	801245c <__mcmp>
 80115da:	4602      	mov	r2, r0
 80115dc:	4629      	mov	r1, r5
 80115de:	4620      	mov	r0, r4
 80115e0:	9207      	str	r2, [sp, #28]
 80115e2:	f000 fcaf 	bl	8011f44 <_Bfree>
 80115e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80115ea:	ea43 0102 	orr.w	r1, r3, r2
 80115ee:	9b04      	ldr	r3, [sp, #16]
 80115f0:	430b      	orrs	r3, r1
 80115f2:	464d      	mov	r5, r9
 80115f4:	d10f      	bne.n	8011616 <_dtoa_r+0xa66>
 80115f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115fa:	d02a      	beq.n	8011652 <_dtoa_r+0xaa2>
 80115fc:	9b03      	ldr	r3, [sp, #12]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	dd02      	ble.n	8011608 <_dtoa_r+0xa58>
 8011602:	9b02      	ldr	r3, [sp, #8]
 8011604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011608:	f88b a000 	strb.w	sl, [fp]
 801160c:	e775      	b.n	80114fa <_dtoa_r+0x94a>
 801160e:	4638      	mov	r0, r7
 8011610:	e7ba      	b.n	8011588 <_dtoa_r+0x9d8>
 8011612:	2201      	movs	r2, #1
 8011614:	e7e2      	b.n	80115dc <_dtoa_r+0xa2c>
 8011616:	9b03      	ldr	r3, [sp, #12]
 8011618:	2b00      	cmp	r3, #0
 801161a:	db04      	blt.n	8011626 <_dtoa_r+0xa76>
 801161c:	9906      	ldr	r1, [sp, #24]
 801161e:	430b      	orrs	r3, r1
 8011620:	9904      	ldr	r1, [sp, #16]
 8011622:	430b      	orrs	r3, r1
 8011624:	d122      	bne.n	801166c <_dtoa_r+0xabc>
 8011626:	2a00      	cmp	r2, #0
 8011628:	ddee      	ble.n	8011608 <_dtoa_r+0xa58>
 801162a:	ee18 1a10 	vmov	r1, s16
 801162e:	2201      	movs	r2, #1
 8011630:	4620      	mov	r0, r4
 8011632:	f000 fea3 	bl	801237c <__lshift>
 8011636:	4631      	mov	r1, r6
 8011638:	ee08 0a10 	vmov	s16, r0
 801163c:	f000 ff0e 	bl	801245c <__mcmp>
 8011640:	2800      	cmp	r0, #0
 8011642:	dc03      	bgt.n	801164c <_dtoa_r+0xa9c>
 8011644:	d1e0      	bne.n	8011608 <_dtoa_r+0xa58>
 8011646:	f01a 0f01 	tst.w	sl, #1
 801164a:	d0dd      	beq.n	8011608 <_dtoa_r+0xa58>
 801164c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011650:	d1d7      	bne.n	8011602 <_dtoa_r+0xa52>
 8011652:	2339      	movs	r3, #57	; 0x39
 8011654:	f88b 3000 	strb.w	r3, [fp]
 8011658:	462b      	mov	r3, r5
 801165a:	461d      	mov	r5, r3
 801165c:	3b01      	subs	r3, #1
 801165e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011662:	2a39      	cmp	r2, #57	; 0x39
 8011664:	d071      	beq.n	801174a <_dtoa_r+0xb9a>
 8011666:	3201      	adds	r2, #1
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	e746      	b.n	80114fa <_dtoa_r+0x94a>
 801166c:	2a00      	cmp	r2, #0
 801166e:	dd07      	ble.n	8011680 <_dtoa_r+0xad0>
 8011670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011674:	d0ed      	beq.n	8011652 <_dtoa_r+0xaa2>
 8011676:	f10a 0301 	add.w	r3, sl, #1
 801167a:	f88b 3000 	strb.w	r3, [fp]
 801167e:	e73c      	b.n	80114fa <_dtoa_r+0x94a>
 8011680:	9b05      	ldr	r3, [sp, #20]
 8011682:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011686:	4599      	cmp	r9, r3
 8011688:	d047      	beq.n	801171a <_dtoa_r+0xb6a>
 801168a:	ee18 1a10 	vmov	r1, s16
 801168e:	2300      	movs	r3, #0
 8011690:	220a      	movs	r2, #10
 8011692:	4620      	mov	r0, r4
 8011694:	f000 fc78 	bl	8011f88 <__multadd>
 8011698:	45b8      	cmp	r8, r7
 801169a:	ee08 0a10 	vmov	s16, r0
 801169e:	f04f 0300 	mov.w	r3, #0
 80116a2:	f04f 020a 	mov.w	r2, #10
 80116a6:	4641      	mov	r1, r8
 80116a8:	4620      	mov	r0, r4
 80116aa:	d106      	bne.n	80116ba <_dtoa_r+0xb0a>
 80116ac:	f000 fc6c 	bl	8011f88 <__multadd>
 80116b0:	4680      	mov	r8, r0
 80116b2:	4607      	mov	r7, r0
 80116b4:	f109 0901 	add.w	r9, r9, #1
 80116b8:	e772      	b.n	80115a0 <_dtoa_r+0x9f0>
 80116ba:	f000 fc65 	bl	8011f88 <__multadd>
 80116be:	4639      	mov	r1, r7
 80116c0:	4680      	mov	r8, r0
 80116c2:	2300      	movs	r3, #0
 80116c4:	220a      	movs	r2, #10
 80116c6:	4620      	mov	r0, r4
 80116c8:	f000 fc5e 	bl	8011f88 <__multadd>
 80116cc:	4607      	mov	r7, r0
 80116ce:	e7f1      	b.n	80116b4 <_dtoa_r+0xb04>
 80116d0:	9b03      	ldr	r3, [sp, #12]
 80116d2:	9302      	str	r3, [sp, #8]
 80116d4:	9d01      	ldr	r5, [sp, #4]
 80116d6:	ee18 0a10 	vmov	r0, s16
 80116da:	4631      	mov	r1, r6
 80116dc:	f7ff f9dc 	bl	8010a98 <quorem>
 80116e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80116e4:	9b01      	ldr	r3, [sp, #4]
 80116e6:	f805 ab01 	strb.w	sl, [r5], #1
 80116ea:	1aea      	subs	r2, r5, r3
 80116ec:	9b02      	ldr	r3, [sp, #8]
 80116ee:	4293      	cmp	r3, r2
 80116f0:	dd09      	ble.n	8011706 <_dtoa_r+0xb56>
 80116f2:	ee18 1a10 	vmov	r1, s16
 80116f6:	2300      	movs	r3, #0
 80116f8:	220a      	movs	r2, #10
 80116fa:	4620      	mov	r0, r4
 80116fc:	f000 fc44 	bl	8011f88 <__multadd>
 8011700:	ee08 0a10 	vmov	s16, r0
 8011704:	e7e7      	b.n	80116d6 <_dtoa_r+0xb26>
 8011706:	9b02      	ldr	r3, [sp, #8]
 8011708:	2b00      	cmp	r3, #0
 801170a:	bfc8      	it	gt
 801170c:	461d      	movgt	r5, r3
 801170e:	9b01      	ldr	r3, [sp, #4]
 8011710:	bfd8      	it	le
 8011712:	2501      	movle	r5, #1
 8011714:	441d      	add	r5, r3
 8011716:	f04f 0800 	mov.w	r8, #0
 801171a:	ee18 1a10 	vmov	r1, s16
 801171e:	2201      	movs	r2, #1
 8011720:	4620      	mov	r0, r4
 8011722:	f000 fe2b 	bl	801237c <__lshift>
 8011726:	4631      	mov	r1, r6
 8011728:	ee08 0a10 	vmov	s16, r0
 801172c:	f000 fe96 	bl	801245c <__mcmp>
 8011730:	2800      	cmp	r0, #0
 8011732:	dc91      	bgt.n	8011658 <_dtoa_r+0xaa8>
 8011734:	d102      	bne.n	801173c <_dtoa_r+0xb8c>
 8011736:	f01a 0f01 	tst.w	sl, #1
 801173a:	d18d      	bne.n	8011658 <_dtoa_r+0xaa8>
 801173c:	462b      	mov	r3, r5
 801173e:	461d      	mov	r5, r3
 8011740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011744:	2a30      	cmp	r2, #48	; 0x30
 8011746:	d0fa      	beq.n	801173e <_dtoa_r+0xb8e>
 8011748:	e6d7      	b.n	80114fa <_dtoa_r+0x94a>
 801174a:	9a01      	ldr	r2, [sp, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d184      	bne.n	801165a <_dtoa_r+0xaaa>
 8011750:	9b00      	ldr	r3, [sp, #0]
 8011752:	3301      	adds	r3, #1
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	2331      	movs	r3, #49	; 0x31
 8011758:	7013      	strb	r3, [r2, #0]
 801175a:	e6ce      	b.n	80114fa <_dtoa_r+0x94a>
 801175c:	4b09      	ldr	r3, [pc, #36]	; (8011784 <_dtoa_r+0xbd4>)
 801175e:	f7ff ba95 	b.w	8010c8c <_dtoa_r+0xdc>
 8011762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011764:	2b00      	cmp	r3, #0
 8011766:	f47f aa6e 	bne.w	8010c46 <_dtoa_r+0x96>
 801176a:	4b07      	ldr	r3, [pc, #28]	; (8011788 <_dtoa_r+0xbd8>)
 801176c:	f7ff ba8e 	b.w	8010c8c <_dtoa_r+0xdc>
 8011770:	9b02      	ldr	r3, [sp, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	dcae      	bgt.n	80116d4 <_dtoa_r+0xb24>
 8011776:	9b06      	ldr	r3, [sp, #24]
 8011778:	2b02      	cmp	r3, #2
 801177a:	f73f aea8 	bgt.w	80114ce <_dtoa_r+0x91e>
 801177e:	e7a9      	b.n	80116d4 <_dtoa_r+0xb24>
 8011780:	08017830 	.word	0x08017830
 8011784:	08017630 	.word	0x08017630
 8011788:	080177b1 	.word	0x080177b1

0801178c <rshift>:
 801178c:	6903      	ldr	r3, [r0, #16]
 801178e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011796:	ea4f 1261 	mov.w	r2, r1, asr #5
 801179a:	f100 0414 	add.w	r4, r0, #20
 801179e:	dd45      	ble.n	801182c <rshift+0xa0>
 80117a0:	f011 011f 	ands.w	r1, r1, #31
 80117a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80117a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80117ac:	d10c      	bne.n	80117c8 <rshift+0x3c>
 80117ae:	f100 0710 	add.w	r7, r0, #16
 80117b2:	4629      	mov	r1, r5
 80117b4:	42b1      	cmp	r1, r6
 80117b6:	d334      	bcc.n	8011822 <rshift+0x96>
 80117b8:	1a9b      	subs	r3, r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	1eea      	subs	r2, r5, #3
 80117be:	4296      	cmp	r6, r2
 80117c0:	bf38      	it	cc
 80117c2:	2300      	movcc	r3, #0
 80117c4:	4423      	add	r3, r4
 80117c6:	e015      	b.n	80117f4 <rshift+0x68>
 80117c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80117cc:	f1c1 0820 	rsb	r8, r1, #32
 80117d0:	40cf      	lsrs	r7, r1
 80117d2:	f105 0e04 	add.w	lr, r5, #4
 80117d6:	46a1      	mov	r9, r4
 80117d8:	4576      	cmp	r6, lr
 80117da:	46f4      	mov	ip, lr
 80117dc:	d815      	bhi.n	801180a <rshift+0x7e>
 80117de:	1a9a      	subs	r2, r3, r2
 80117e0:	0092      	lsls	r2, r2, #2
 80117e2:	3a04      	subs	r2, #4
 80117e4:	3501      	adds	r5, #1
 80117e6:	42ae      	cmp	r6, r5
 80117e8:	bf38      	it	cc
 80117ea:	2200      	movcc	r2, #0
 80117ec:	18a3      	adds	r3, r4, r2
 80117ee:	50a7      	str	r7, [r4, r2]
 80117f0:	b107      	cbz	r7, 80117f4 <rshift+0x68>
 80117f2:	3304      	adds	r3, #4
 80117f4:	1b1a      	subs	r2, r3, r4
 80117f6:	42a3      	cmp	r3, r4
 80117f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80117fc:	bf08      	it	eq
 80117fe:	2300      	moveq	r3, #0
 8011800:	6102      	str	r2, [r0, #16]
 8011802:	bf08      	it	eq
 8011804:	6143      	streq	r3, [r0, #20]
 8011806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801180a:	f8dc c000 	ldr.w	ip, [ip]
 801180e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011812:	ea4c 0707 	orr.w	r7, ip, r7
 8011816:	f849 7b04 	str.w	r7, [r9], #4
 801181a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801181e:	40cf      	lsrs	r7, r1
 8011820:	e7da      	b.n	80117d8 <rshift+0x4c>
 8011822:	f851 cb04 	ldr.w	ip, [r1], #4
 8011826:	f847 cf04 	str.w	ip, [r7, #4]!
 801182a:	e7c3      	b.n	80117b4 <rshift+0x28>
 801182c:	4623      	mov	r3, r4
 801182e:	e7e1      	b.n	80117f4 <rshift+0x68>

08011830 <__hexdig_fun>:
 8011830:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011834:	2b09      	cmp	r3, #9
 8011836:	d802      	bhi.n	801183e <__hexdig_fun+0xe>
 8011838:	3820      	subs	r0, #32
 801183a:	b2c0      	uxtb	r0, r0
 801183c:	4770      	bx	lr
 801183e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011842:	2b05      	cmp	r3, #5
 8011844:	d801      	bhi.n	801184a <__hexdig_fun+0x1a>
 8011846:	3847      	subs	r0, #71	; 0x47
 8011848:	e7f7      	b.n	801183a <__hexdig_fun+0xa>
 801184a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801184e:	2b05      	cmp	r3, #5
 8011850:	d801      	bhi.n	8011856 <__hexdig_fun+0x26>
 8011852:	3827      	subs	r0, #39	; 0x27
 8011854:	e7f1      	b.n	801183a <__hexdig_fun+0xa>
 8011856:	2000      	movs	r0, #0
 8011858:	4770      	bx	lr
	...

0801185c <__gethex>:
 801185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	ed2d 8b02 	vpush	{d8}
 8011864:	b089      	sub	sp, #36	; 0x24
 8011866:	ee08 0a10 	vmov	s16, r0
 801186a:	9304      	str	r3, [sp, #16]
 801186c:	4bb4      	ldr	r3, [pc, #720]	; (8011b40 <__gethex+0x2e4>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	9301      	str	r3, [sp, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	468b      	mov	fp, r1
 8011876:	4690      	mov	r8, r2
 8011878:	f7ee fcaa 	bl	80001d0 <strlen>
 801187c:	9b01      	ldr	r3, [sp, #4]
 801187e:	f8db 2000 	ldr.w	r2, [fp]
 8011882:	4403      	add	r3, r0
 8011884:	4682      	mov	sl, r0
 8011886:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801188a:	9305      	str	r3, [sp, #20]
 801188c:	1c93      	adds	r3, r2, #2
 801188e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011892:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011896:	32fe      	adds	r2, #254	; 0xfe
 8011898:	18d1      	adds	r1, r2, r3
 801189a:	461f      	mov	r7, r3
 801189c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80118a0:	9100      	str	r1, [sp, #0]
 80118a2:	2830      	cmp	r0, #48	; 0x30
 80118a4:	d0f8      	beq.n	8011898 <__gethex+0x3c>
 80118a6:	f7ff ffc3 	bl	8011830 <__hexdig_fun>
 80118aa:	4604      	mov	r4, r0
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d13a      	bne.n	8011926 <__gethex+0xca>
 80118b0:	9901      	ldr	r1, [sp, #4]
 80118b2:	4652      	mov	r2, sl
 80118b4:	4638      	mov	r0, r7
 80118b6:	f001 fa33 	bl	8012d20 <strncmp>
 80118ba:	4605      	mov	r5, r0
 80118bc:	2800      	cmp	r0, #0
 80118be:	d168      	bne.n	8011992 <__gethex+0x136>
 80118c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80118c4:	eb07 060a 	add.w	r6, r7, sl
 80118c8:	f7ff ffb2 	bl	8011830 <__hexdig_fun>
 80118cc:	2800      	cmp	r0, #0
 80118ce:	d062      	beq.n	8011996 <__gethex+0x13a>
 80118d0:	4633      	mov	r3, r6
 80118d2:	7818      	ldrb	r0, [r3, #0]
 80118d4:	2830      	cmp	r0, #48	; 0x30
 80118d6:	461f      	mov	r7, r3
 80118d8:	f103 0301 	add.w	r3, r3, #1
 80118dc:	d0f9      	beq.n	80118d2 <__gethex+0x76>
 80118de:	f7ff ffa7 	bl	8011830 <__hexdig_fun>
 80118e2:	2301      	movs	r3, #1
 80118e4:	fab0 f480 	clz	r4, r0
 80118e8:	0964      	lsrs	r4, r4, #5
 80118ea:	4635      	mov	r5, r6
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	463a      	mov	r2, r7
 80118f0:	4616      	mov	r6, r2
 80118f2:	3201      	adds	r2, #1
 80118f4:	7830      	ldrb	r0, [r6, #0]
 80118f6:	f7ff ff9b 	bl	8011830 <__hexdig_fun>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d1f8      	bne.n	80118f0 <__gethex+0x94>
 80118fe:	9901      	ldr	r1, [sp, #4]
 8011900:	4652      	mov	r2, sl
 8011902:	4630      	mov	r0, r6
 8011904:	f001 fa0c 	bl	8012d20 <strncmp>
 8011908:	b980      	cbnz	r0, 801192c <__gethex+0xd0>
 801190a:	b94d      	cbnz	r5, 8011920 <__gethex+0xc4>
 801190c:	eb06 050a 	add.w	r5, r6, sl
 8011910:	462a      	mov	r2, r5
 8011912:	4616      	mov	r6, r2
 8011914:	3201      	adds	r2, #1
 8011916:	7830      	ldrb	r0, [r6, #0]
 8011918:	f7ff ff8a 	bl	8011830 <__hexdig_fun>
 801191c:	2800      	cmp	r0, #0
 801191e:	d1f8      	bne.n	8011912 <__gethex+0xb6>
 8011920:	1bad      	subs	r5, r5, r6
 8011922:	00ad      	lsls	r5, r5, #2
 8011924:	e004      	b.n	8011930 <__gethex+0xd4>
 8011926:	2400      	movs	r4, #0
 8011928:	4625      	mov	r5, r4
 801192a:	e7e0      	b.n	80118ee <__gethex+0x92>
 801192c:	2d00      	cmp	r5, #0
 801192e:	d1f7      	bne.n	8011920 <__gethex+0xc4>
 8011930:	7833      	ldrb	r3, [r6, #0]
 8011932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011936:	2b50      	cmp	r3, #80	; 0x50
 8011938:	d13b      	bne.n	80119b2 <__gethex+0x156>
 801193a:	7873      	ldrb	r3, [r6, #1]
 801193c:	2b2b      	cmp	r3, #43	; 0x2b
 801193e:	d02c      	beq.n	801199a <__gethex+0x13e>
 8011940:	2b2d      	cmp	r3, #45	; 0x2d
 8011942:	d02e      	beq.n	80119a2 <__gethex+0x146>
 8011944:	1c71      	adds	r1, r6, #1
 8011946:	f04f 0900 	mov.w	r9, #0
 801194a:	7808      	ldrb	r0, [r1, #0]
 801194c:	f7ff ff70 	bl	8011830 <__hexdig_fun>
 8011950:	1e43      	subs	r3, r0, #1
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b18      	cmp	r3, #24
 8011956:	d82c      	bhi.n	80119b2 <__gethex+0x156>
 8011958:	f1a0 0210 	sub.w	r2, r0, #16
 801195c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011960:	f7ff ff66 	bl	8011830 <__hexdig_fun>
 8011964:	1e43      	subs	r3, r0, #1
 8011966:	b2db      	uxtb	r3, r3
 8011968:	2b18      	cmp	r3, #24
 801196a:	d91d      	bls.n	80119a8 <__gethex+0x14c>
 801196c:	f1b9 0f00 	cmp.w	r9, #0
 8011970:	d000      	beq.n	8011974 <__gethex+0x118>
 8011972:	4252      	negs	r2, r2
 8011974:	4415      	add	r5, r2
 8011976:	f8cb 1000 	str.w	r1, [fp]
 801197a:	b1e4      	cbz	r4, 80119b6 <__gethex+0x15a>
 801197c:	9b00      	ldr	r3, [sp, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	bf14      	ite	ne
 8011982:	2700      	movne	r7, #0
 8011984:	2706      	moveq	r7, #6
 8011986:	4638      	mov	r0, r7
 8011988:	b009      	add	sp, #36	; 0x24
 801198a:	ecbd 8b02 	vpop	{d8}
 801198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011992:	463e      	mov	r6, r7
 8011994:	4625      	mov	r5, r4
 8011996:	2401      	movs	r4, #1
 8011998:	e7ca      	b.n	8011930 <__gethex+0xd4>
 801199a:	f04f 0900 	mov.w	r9, #0
 801199e:	1cb1      	adds	r1, r6, #2
 80119a0:	e7d3      	b.n	801194a <__gethex+0xee>
 80119a2:	f04f 0901 	mov.w	r9, #1
 80119a6:	e7fa      	b.n	801199e <__gethex+0x142>
 80119a8:	230a      	movs	r3, #10
 80119aa:	fb03 0202 	mla	r2, r3, r2, r0
 80119ae:	3a10      	subs	r2, #16
 80119b0:	e7d4      	b.n	801195c <__gethex+0x100>
 80119b2:	4631      	mov	r1, r6
 80119b4:	e7df      	b.n	8011976 <__gethex+0x11a>
 80119b6:	1bf3      	subs	r3, r6, r7
 80119b8:	3b01      	subs	r3, #1
 80119ba:	4621      	mov	r1, r4
 80119bc:	2b07      	cmp	r3, #7
 80119be:	dc0b      	bgt.n	80119d8 <__gethex+0x17c>
 80119c0:	ee18 0a10 	vmov	r0, s16
 80119c4:	f000 fa7e 	bl	8011ec4 <_Balloc>
 80119c8:	4604      	mov	r4, r0
 80119ca:	b940      	cbnz	r0, 80119de <__gethex+0x182>
 80119cc:	4b5d      	ldr	r3, [pc, #372]	; (8011b44 <__gethex+0x2e8>)
 80119ce:	4602      	mov	r2, r0
 80119d0:	21de      	movs	r1, #222	; 0xde
 80119d2:	485d      	ldr	r0, [pc, #372]	; (8011b48 <__gethex+0x2ec>)
 80119d4:	f001 f9c6 	bl	8012d64 <__assert_func>
 80119d8:	3101      	adds	r1, #1
 80119da:	105b      	asrs	r3, r3, #1
 80119dc:	e7ee      	b.n	80119bc <__gethex+0x160>
 80119de:	f100 0914 	add.w	r9, r0, #20
 80119e2:	f04f 0b00 	mov.w	fp, #0
 80119e6:	f1ca 0301 	rsb	r3, sl, #1
 80119ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80119ee:	f8cd b000 	str.w	fp, [sp]
 80119f2:	9306      	str	r3, [sp, #24]
 80119f4:	42b7      	cmp	r7, r6
 80119f6:	d340      	bcc.n	8011a7a <__gethex+0x21e>
 80119f8:	9802      	ldr	r0, [sp, #8]
 80119fa:	9b00      	ldr	r3, [sp, #0]
 80119fc:	f840 3b04 	str.w	r3, [r0], #4
 8011a00:	eba0 0009 	sub.w	r0, r0, r9
 8011a04:	1080      	asrs	r0, r0, #2
 8011a06:	0146      	lsls	r6, r0, #5
 8011a08:	6120      	str	r0, [r4, #16]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 fb4c 	bl	80120a8 <__hi0bits>
 8011a10:	1a30      	subs	r0, r6, r0
 8011a12:	f8d8 6000 	ldr.w	r6, [r8]
 8011a16:	42b0      	cmp	r0, r6
 8011a18:	dd63      	ble.n	8011ae2 <__gethex+0x286>
 8011a1a:	1b87      	subs	r7, r0, r6
 8011a1c:	4639      	mov	r1, r7
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f000 fef0 	bl	8012804 <__any_on>
 8011a24:	4682      	mov	sl, r0
 8011a26:	b1a8      	cbz	r0, 8011a54 <__gethex+0x1f8>
 8011a28:	1e7b      	subs	r3, r7, #1
 8011a2a:	1159      	asrs	r1, r3, #5
 8011a2c:	f003 021f 	and.w	r2, r3, #31
 8011a30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011a34:	f04f 0a01 	mov.w	sl, #1
 8011a38:	fa0a f202 	lsl.w	r2, sl, r2
 8011a3c:	420a      	tst	r2, r1
 8011a3e:	d009      	beq.n	8011a54 <__gethex+0x1f8>
 8011a40:	4553      	cmp	r3, sl
 8011a42:	dd05      	ble.n	8011a50 <__gethex+0x1f4>
 8011a44:	1eb9      	subs	r1, r7, #2
 8011a46:	4620      	mov	r0, r4
 8011a48:	f000 fedc 	bl	8012804 <__any_on>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d145      	bne.n	8011adc <__gethex+0x280>
 8011a50:	f04f 0a02 	mov.w	sl, #2
 8011a54:	4639      	mov	r1, r7
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7ff fe98 	bl	801178c <rshift>
 8011a5c:	443d      	add	r5, r7
 8011a5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a62:	42ab      	cmp	r3, r5
 8011a64:	da4c      	bge.n	8011b00 <__gethex+0x2a4>
 8011a66:	ee18 0a10 	vmov	r0, s16
 8011a6a:	4621      	mov	r1, r4
 8011a6c:	f000 fa6a 	bl	8011f44 <_Bfree>
 8011a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a72:	2300      	movs	r3, #0
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	27a3      	movs	r7, #163	; 0xa3
 8011a78:	e785      	b.n	8011986 <__gethex+0x12a>
 8011a7a:	1e73      	subs	r3, r6, #1
 8011a7c:	9a05      	ldr	r2, [sp, #20]
 8011a7e:	9303      	str	r3, [sp, #12]
 8011a80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d019      	beq.n	8011abc <__gethex+0x260>
 8011a88:	f1bb 0f20 	cmp.w	fp, #32
 8011a8c:	d107      	bne.n	8011a9e <__gethex+0x242>
 8011a8e:	9b02      	ldr	r3, [sp, #8]
 8011a90:	9a00      	ldr	r2, [sp, #0]
 8011a92:	f843 2b04 	str.w	r2, [r3], #4
 8011a96:	9302      	str	r3, [sp, #8]
 8011a98:	2300      	movs	r3, #0
 8011a9a:	9300      	str	r3, [sp, #0]
 8011a9c:	469b      	mov	fp, r3
 8011a9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011aa2:	f7ff fec5 	bl	8011830 <__hexdig_fun>
 8011aa6:	9b00      	ldr	r3, [sp, #0]
 8011aa8:	f000 000f 	and.w	r0, r0, #15
 8011aac:	fa00 f00b 	lsl.w	r0, r0, fp
 8011ab0:	4303      	orrs	r3, r0
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	f10b 0b04 	add.w	fp, fp, #4
 8011ab8:	9b03      	ldr	r3, [sp, #12]
 8011aba:	e00d      	b.n	8011ad8 <__gethex+0x27c>
 8011abc:	9b03      	ldr	r3, [sp, #12]
 8011abe:	9a06      	ldr	r2, [sp, #24]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	42bb      	cmp	r3, r7
 8011ac4:	d3e0      	bcc.n	8011a88 <__gethex+0x22c>
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	9901      	ldr	r1, [sp, #4]
 8011aca:	9307      	str	r3, [sp, #28]
 8011acc:	4652      	mov	r2, sl
 8011ace:	f001 f927 	bl	8012d20 <strncmp>
 8011ad2:	9b07      	ldr	r3, [sp, #28]
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d1d7      	bne.n	8011a88 <__gethex+0x22c>
 8011ad8:	461e      	mov	r6, r3
 8011ada:	e78b      	b.n	80119f4 <__gethex+0x198>
 8011adc:	f04f 0a03 	mov.w	sl, #3
 8011ae0:	e7b8      	b.n	8011a54 <__gethex+0x1f8>
 8011ae2:	da0a      	bge.n	8011afa <__gethex+0x29e>
 8011ae4:	1a37      	subs	r7, r6, r0
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	ee18 0a10 	vmov	r0, s16
 8011aec:	463a      	mov	r2, r7
 8011aee:	f000 fc45 	bl	801237c <__lshift>
 8011af2:	1bed      	subs	r5, r5, r7
 8011af4:	4604      	mov	r4, r0
 8011af6:	f100 0914 	add.w	r9, r0, #20
 8011afa:	f04f 0a00 	mov.w	sl, #0
 8011afe:	e7ae      	b.n	8011a5e <__gethex+0x202>
 8011b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011b04:	42a8      	cmp	r0, r5
 8011b06:	dd72      	ble.n	8011bee <__gethex+0x392>
 8011b08:	1b45      	subs	r5, r0, r5
 8011b0a:	42ae      	cmp	r6, r5
 8011b0c:	dc36      	bgt.n	8011b7c <__gethex+0x320>
 8011b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011b12:	2b02      	cmp	r3, #2
 8011b14:	d02a      	beq.n	8011b6c <__gethex+0x310>
 8011b16:	2b03      	cmp	r3, #3
 8011b18:	d02c      	beq.n	8011b74 <__gethex+0x318>
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d11c      	bne.n	8011b58 <__gethex+0x2fc>
 8011b1e:	42ae      	cmp	r6, r5
 8011b20:	d11a      	bne.n	8011b58 <__gethex+0x2fc>
 8011b22:	2e01      	cmp	r6, #1
 8011b24:	d112      	bne.n	8011b4c <__gethex+0x2f0>
 8011b26:	9a04      	ldr	r2, [sp, #16]
 8011b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011b2c:	6013      	str	r3, [r2, #0]
 8011b2e:	2301      	movs	r3, #1
 8011b30:	6123      	str	r3, [r4, #16]
 8011b32:	f8c9 3000 	str.w	r3, [r9]
 8011b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b38:	2762      	movs	r7, #98	; 0x62
 8011b3a:	601c      	str	r4, [r3, #0]
 8011b3c:	e723      	b.n	8011986 <__gethex+0x12a>
 8011b3e:	bf00      	nop
 8011b40:	080178a8 	.word	0x080178a8
 8011b44:	08017830 	.word	0x08017830
 8011b48:	08017841 	.word	0x08017841
 8011b4c:	1e71      	subs	r1, r6, #1
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f000 fe58 	bl	8012804 <__any_on>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d1e6      	bne.n	8011b26 <__gethex+0x2ca>
 8011b58:	ee18 0a10 	vmov	r0, s16
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	f000 f9f1 	bl	8011f44 <_Bfree>
 8011b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b64:	2300      	movs	r3, #0
 8011b66:	6013      	str	r3, [r2, #0]
 8011b68:	2750      	movs	r7, #80	; 0x50
 8011b6a:	e70c      	b.n	8011986 <__gethex+0x12a>
 8011b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1f2      	bne.n	8011b58 <__gethex+0x2fc>
 8011b72:	e7d8      	b.n	8011b26 <__gethex+0x2ca>
 8011b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1d5      	bne.n	8011b26 <__gethex+0x2ca>
 8011b7a:	e7ed      	b.n	8011b58 <__gethex+0x2fc>
 8011b7c:	1e6f      	subs	r7, r5, #1
 8011b7e:	f1ba 0f00 	cmp.w	sl, #0
 8011b82:	d131      	bne.n	8011be8 <__gethex+0x38c>
 8011b84:	b127      	cbz	r7, 8011b90 <__gethex+0x334>
 8011b86:	4639      	mov	r1, r7
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f000 fe3b 	bl	8012804 <__any_on>
 8011b8e:	4682      	mov	sl, r0
 8011b90:	117b      	asrs	r3, r7, #5
 8011b92:	2101      	movs	r1, #1
 8011b94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011b98:	f007 071f 	and.w	r7, r7, #31
 8011b9c:	fa01 f707 	lsl.w	r7, r1, r7
 8011ba0:	421f      	tst	r7, r3
 8011ba2:	4629      	mov	r1, r5
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	bf18      	it	ne
 8011ba8:	f04a 0a02 	orrne.w	sl, sl, #2
 8011bac:	1b76      	subs	r6, r6, r5
 8011bae:	f7ff fded 	bl	801178c <rshift>
 8011bb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011bb6:	2702      	movs	r7, #2
 8011bb8:	f1ba 0f00 	cmp.w	sl, #0
 8011bbc:	d048      	beq.n	8011c50 <__gethex+0x3f4>
 8011bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bc2:	2b02      	cmp	r3, #2
 8011bc4:	d015      	beq.n	8011bf2 <__gethex+0x396>
 8011bc6:	2b03      	cmp	r3, #3
 8011bc8:	d017      	beq.n	8011bfa <__gethex+0x39e>
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d109      	bne.n	8011be2 <__gethex+0x386>
 8011bce:	f01a 0f02 	tst.w	sl, #2
 8011bd2:	d006      	beq.n	8011be2 <__gethex+0x386>
 8011bd4:	f8d9 0000 	ldr.w	r0, [r9]
 8011bd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8011bdc:	f01a 0f01 	tst.w	sl, #1
 8011be0:	d10e      	bne.n	8011c00 <__gethex+0x3a4>
 8011be2:	f047 0710 	orr.w	r7, r7, #16
 8011be6:	e033      	b.n	8011c50 <__gethex+0x3f4>
 8011be8:	f04f 0a01 	mov.w	sl, #1
 8011bec:	e7d0      	b.n	8011b90 <__gethex+0x334>
 8011bee:	2701      	movs	r7, #1
 8011bf0:	e7e2      	b.n	8011bb8 <__gethex+0x35c>
 8011bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bf4:	f1c3 0301 	rsb	r3, r3, #1
 8011bf8:	9315      	str	r3, [sp, #84]	; 0x54
 8011bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d0f0      	beq.n	8011be2 <__gethex+0x386>
 8011c00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011c04:	f104 0314 	add.w	r3, r4, #20
 8011c08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011c0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011c10:	f04f 0c00 	mov.w	ip, #0
 8011c14:	4618      	mov	r0, r3
 8011c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011c1e:	d01c      	beq.n	8011c5a <__gethex+0x3fe>
 8011c20:	3201      	adds	r2, #1
 8011c22:	6002      	str	r2, [r0, #0]
 8011c24:	2f02      	cmp	r7, #2
 8011c26:	f104 0314 	add.w	r3, r4, #20
 8011c2a:	d13f      	bne.n	8011cac <__gethex+0x450>
 8011c2c:	f8d8 2000 	ldr.w	r2, [r8]
 8011c30:	3a01      	subs	r2, #1
 8011c32:	42b2      	cmp	r2, r6
 8011c34:	d10a      	bne.n	8011c4c <__gethex+0x3f0>
 8011c36:	1171      	asrs	r1, r6, #5
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c3e:	f006 061f 	and.w	r6, r6, #31
 8011c42:	fa02 f606 	lsl.w	r6, r2, r6
 8011c46:	421e      	tst	r6, r3
 8011c48:	bf18      	it	ne
 8011c4a:	4617      	movne	r7, r2
 8011c4c:	f047 0720 	orr.w	r7, r7, #32
 8011c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c52:	601c      	str	r4, [r3, #0]
 8011c54:	9b04      	ldr	r3, [sp, #16]
 8011c56:	601d      	str	r5, [r3, #0]
 8011c58:	e695      	b.n	8011986 <__gethex+0x12a>
 8011c5a:	4299      	cmp	r1, r3
 8011c5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011c60:	d8d8      	bhi.n	8011c14 <__gethex+0x3b8>
 8011c62:	68a3      	ldr	r3, [r4, #8]
 8011c64:	459b      	cmp	fp, r3
 8011c66:	db19      	blt.n	8011c9c <__gethex+0x440>
 8011c68:	6861      	ldr	r1, [r4, #4]
 8011c6a:	ee18 0a10 	vmov	r0, s16
 8011c6e:	3101      	adds	r1, #1
 8011c70:	f000 f928 	bl	8011ec4 <_Balloc>
 8011c74:	4681      	mov	r9, r0
 8011c76:	b918      	cbnz	r0, 8011c80 <__gethex+0x424>
 8011c78:	4b1a      	ldr	r3, [pc, #104]	; (8011ce4 <__gethex+0x488>)
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	2184      	movs	r1, #132	; 0x84
 8011c7e:	e6a8      	b.n	80119d2 <__gethex+0x176>
 8011c80:	6922      	ldr	r2, [r4, #16]
 8011c82:	3202      	adds	r2, #2
 8011c84:	f104 010c 	add.w	r1, r4, #12
 8011c88:	0092      	lsls	r2, r2, #2
 8011c8a:	300c      	adds	r0, #12
 8011c8c:	f000 f90c 	bl	8011ea8 <memcpy>
 8011c90:	4621      	mov	r1, r4
 8011c92:	ee18 0a10 	vmov	r0, s16
 8011c96:	f000 f955 	bl	8011f44 <_Bfree>
 8011c9a:	464c      	mov	r4, r9
 8011c9c:	6923      	ldr	r3, [r4, #16]
 8011c9e:	1c5a      	adds	r2, r3, #1
 8011ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ca4:	6122      	str	r2, [r4, #16]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	615a      	str	r2, [r3, #20]
 8011caa:	e7bb      	b.n	8011c24 <__gethex+0x3c8>
 8011cac:	6922      	ldr	r2, [r4, #16]
 8011cae:	455a      	cmp	r2, fp
 8011cb0:	dd0b      	ble.n	8011cca <__gethex+0x46e>
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f7ff fd69 	bl	801178c <rshift>
 8011cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011cbe:	3501      	adds	r5, #1
 8011cc0:	42ab      	cmp	r3, r5
 8011cc2:	f6ff aed0 	blt.w	8011a66 <__gethex+0x20a>
 8011cc6:	2701      	movs	r7, #1
 8011cc8:	e7c0      	b.n	8011c4c <__gethex+0x3f0>
 8011cca:	f016 061f 	ands.w	r6, r6, #31
 8011cce:	d0fa      	beq.n	8011cc6 <__gethex+0x46a>
 8011cd0:	4453      	add	r3, sl
 8011cd2:	f1c6 0620 	rsb	r6, r6, #32
 8011cd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011cda:	f000 f9e5 	bl	80120a8 <__hi0bits>
 8011cde:	42b0      	cmp	r0, r6
 8011ce0:	dbe7      	blt.n	8011cb2 <__gethex+0x456>
 8011ce2:	e7f0      	b.n	8011cc6 <__gethex+0x46a>
 8011ce4:	08017830 	.word	0x08017830

08011ce8 <L_shift>:
 8011ce8:	f1c2 0208 	rsb	r2, r2, #8
 8011cec:	0092      	lsls	r2, r2, #2
 8011cee:	b570      	push	{r4, r5, r6, lr}
 8011cf0:	f1c2 0620 	rsb	r6, r2, #32
 8011cf4:	6843      	ldr	r3, [r0, #4]
 8011cf6:	6804      	ldr	r4, [r0, #0]
 8011cf8:	fa03 f506 	lsl.w	r5, r3, r6
 8011cfc:	432c      	orrs	r4, r5
 8011cfe:	40d3      	lsrs	r3, r2
 8011d00:	6004      	str	r4, [r0, #0]
 8011d02:	f840 3f04 	str.w	r3, [r0, #4]!
 8011d06:	4288      	cmp	r0, r1
 8011d08:	d3f4      	bcc.n	8011cf4 <L_shift+0xc>
 8011d0a:	bd70      	pop	{r4, r5, r6, pc}

08011d0c <__match>:
 8011d0c:	b530      	push	{r4, r5, lr}
 8011d0e:	6803      	ldr	r3, [r0, #0]
 8011d10:	3301      	adds	r3, #1
 8011d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d16:	b914      	cbnz	r4, 8011d1e <__match+0x12>
 8011d18:	6003      	str	r3, [r0, #0]
 8011d1a:	2001      	movs	r0, #1
 8011d1c:	bd30      	pop	{r4, r5, pc}
 8011d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011d26:	2d19      	cmp	r5, #25
 8011d28:	bf98      	it	ls
 8011d2a:	3220      	addls	r2, #32
 8011d2c:	42a2      	cmp	r2, r4
 8011d2e:	d0f0      	beq.n	8011d12 <__match+0x6>
 8011d30:	2000      	movs	r0, #0
 8011d32:	e7f3      	b.n	8011d1c <__match+0x10>

08011d34 <__hexnan>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	680b      	ldr	r3, [r1, #0]
 8011d3a:	115e      	asrs	r6, r3, #5
 8011d3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011d40:	f013 031f 	ands.w	r3, r3, #31
 8011d44:	b087      	sub	sp, #28
 8011d46:	bf18      	it	ne
 8011d48:	3604      	addne	r6, #4
 8011d4a:	2500      	movs	r5, #0
 8011d4c:	1f37      	subs	r7, r6, #4
 8011d4e:	4690      	mov	r8, r2
 8011d50:	6802      	ldr	r2, [r0, #0]
 8011d52:	9301      	str	r3, [sp, #4]
 8011d54:	4682      	mov	sl, r0
 8011d56:	f846 5c04 	str.w	r5, [r6, #-4]
 8011d5a:	46b9      	mov	r9, r7
 8011d5c:	463c      	mov	r4, r7
 8011d5e:	9502      	str	r5, [sp, #8]
 8011d60:	46ab      	mov	fp, r5
 8011d62:	7851      	ldrb	r1, [r2, #1]
 8011d64:	1c53      	adds	r3, r2, #1
 8011d66:	9303      	str	r3, [sp, #12]
 8011d68:	b341      	cbz	r1, 8011dbc <__hexnan+0x88>
 8011d6a:	4608      	mov	r0, r1
 8011d6c:	9205      	str	r2, [sp, #20]
 8011d6e:	9104      	str	r1, [sp, #16]
 8011d70:	f7ff fd5e 	bl	8011830 <__hexdig_fun>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d14f      	bne.n	8011e18 <__hexnan+0xe4>
 8011d78:	9904      	ldr	r1, [sp, #16]
 8011d7a:	9a05      	ldr	r2, [sp, #20]
 8011d7c:	2920      	cmp	r1, #32
 8011d7e:	d818      	bhi.n	8011db2 <__hexnan+0x7e>
 8011d80:	9b02      	ldr	r3, [sp, #8]
 8011d82:	459b      	cmp	fp, r3
 8011d84:	dd13      	ble.n	8011dae <__hexnan+0x7a>
 8011d86:	454c      	cmp	r4, r9
 8011d88:	d206      	bcs.n	8011d98 <__hexnan+0x64>
 8011d8a:	2d07      	cmp	r5, #7
 8011d8c:	dc04      	bgt.n	8011d98 <__hexnan+0x64>
 8011d8e:	462a      	mov	r2, r5
 8011d90:	4649      	mov	r1, r9
 8011d92:	4620      	mov	r0, r4
 8011d94:	f7ff ffa8 	bl	8011ce8 <L_shift>
 8011d98:	4544      	cmp	r4, r8
 8011d9a:	d950      	bls.n	8011e3e <__hexnan+0x10a>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f1a4 0904 	sub.w	r9, r4, #4
 8011da2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011da6:	f8cd b008 	str.w	fp, [sp, #8]
 8011daa:	464c      	mov	r4, r9
 8011dac:	461d      	mov	r5, r3
 8011dae:	9a03      	ldr	r2, [sp, #12]
 8011db0:	e7d7      	b.n	8011d62 <__hexnan+0x2e>
 8011db2:	2929      	cmp	r1, #41	; 0x29
 8011db4:	d156      	bne.n	8011e64 <__hexnan+0x130>
 8011db6:	3202      	adds	r2, #2
 8011db8:	f8ca 2000 	str.w	r2, [sl]
 8011dbc:	f1bb 0f00 	cmp.w	fp, #0
 8011dc0:	d050      	beq.n	8011e64 <__hexnan+0x130>
 8011dc2:	454c      	cmp	r4, r9
 8011dc4:	d206      	bcs.n	8011dd4 <__hexnan+0xa0>
 8011dc6:	2d07      	cmp	r5, #7
 8011dc8:	dc04      	bgt.n	8011dd4 <__hexnan+0xa0>
 8011dca:	462a      	mov	r2, r5
 8011dcc:	4649      	mov	r1, r9
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f7ff ff8a 	bl	8011ce8 <L_shift>
 8011dd4:	4544      	cmp	r4, r8
 8011dd6:	d934      	bls.n	8011e42 <__hexnan+0x10e>
 8011dd8:	f1a8 0204 	sub.w	r2, r8, #4
 8011ddc:	4623      	mov	r3, r4
 8011dde:	f853 1b04 	ldr.w	r1, [r3], #4
 8011de2:	f842 1f04 	str.w	r1, [r2, #4]!
 8011de6:	429f      	cmp	r7, r3
 8011de8:	d2f9      	bcs.n	8011dde <__hexnan+0xaa>
 8011dea:	1b3b      	subs	r3, r7, r4
 8011dec:	f023 0303 	bic.w	r3, r3, #3
 8011df0:	3304      	adds	r3, #4
 8011df2:	3401      	adds	r4, #1
 8011df4:	3e03      	subs	r6, #3
 8011df6:	42b4      	cmp	r4, r6
 8011df8:	bf88      	it	hi
 8011dfa:	2304      	movhi	r3, #4
 8011dfc:	4443      	add	r3, r8
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f843 2b04 	str.w	r2, [r3], #4
 8011e04:	429f      	cmp	r7, r3
 8011e06:	d2fb      	bcs.n	8011e00 <__hexnan+0xcc>
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	b91b      	cbnz	r3, 8011e14 <__hexnan+0xe0>
 8011e0c:	4547      	cmp	r7, r8
 8011e0e:	d127      	bne.n	8011e60 <__hexnan+0x12c>
 8011e10:	2301      	movs	r3, #1
 8011e12:	603b      	str	r3, [r7, #0]
 8011e14:	2005      	movs	r0, #5
 8011e16:	e026      	b.n	8011e66 <__hexnan+0x132>
 8011e18:	3501      	adds	r5, #1
 8011e1a:	2d08      	cmp	r5, #8
 8011e1c:	f10b 0b01 	add.w	fp, fp, #1
 8011e20:	dd06      	ble.n	8011e30 <__hexnan+0xfc>
 8011e22:	4544      	cmp	r4, r8
 8011e24:	d9c3      	bls.n	8011dae <__hexnan+0x7a>
 8011e26:	2300      	movs	r3, #0
 8011e28:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e2c:	2501      	movs	r5, #1
 8011e2e:	3c04      	subs	r4, #4
 8011e30:	6822      	ldr	r2, [r4, #0]
 8011e32:	f000 000f 	and.w	r0, r0, #15
 8011e36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011e3a:	6022      	str	r2, [r4, #0]
 8011e3c:	e7b7      	b.n	8011dae <__hexnan+0x7a>
 8011e3e:	2508      	movs	r5, #8
 8011e40:	e7b5      	b.n	8011dae <__hexnan+0x7a>
 8011e42:	9b01      	ldr	r3, [sp, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d0df      	beq.n	8011e08 <__hexnan+0xd4>
 8011e48:	f04f 32ff 	mov.w	r2, #4294967295
 8011e4c:	f1c3 0320 	rsb	r3, r3, #32
 8011e50:	fa22 f303 	lsr.w	r3, r2, r3
 8011e54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011e58:	401a      	ands	r2, r3
 8011e5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8011e5e:	e7d3      	b.n	8011e08 <__hexnan+0xd4>
 8011e60:	3f04      	subs	r7, #4
 8011e62:	e7d1      	b.n	8011e08 <__hexnan+0xd4>
 8011e64:	2004      	movs	r0, #4
 8011e66:	b007      	add	sp, #28
 8011e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e6c <_localeconv_r>:
 8011e6c:	4800      	ldr	r0, [pc, #0]	; (8011e70 <_localeconv_r+0x4>)
 8011e6e:	4770      	bx	lr
 8011e70:	20000354 	.word	0x20000354

08011e74 <malloc>:
 8011e74:	4b02      	ldr	r3, [pc, #8]	; (8011e80 <malloc+0xc>)
 8011e76:	4601      	mov	r1, r0
 8011e78:	6818      	ldr	r0, [r3, #0]
 8011e7a:	f000 bd67 	b.w	801294c <_malloc_r>
 8011e7e:	bf00      	nop
 8011e80:	200001fc 	.word	0x200001fc

08011e84 <__ascii_mbtowc>:
 8011e84:	b082      	sub	sp, #8
 8011e86:	b901      	cbnz	r1, 8011e8a <__ascii_mbtowc+0x6>
 8011e88:	a901      	add	r1, sp, #4
 8011e8a:	b142      	cbz	r2, 8011e9e <__ascii_mbtowc+0x1a>
 8011e8c:	b14b      	cbz	r3, 8011ea2 <__ascii_mbtowc+0x1e>
 8011e8e:	7813      	ldrb	r3, [r2, #0]
 8011e90:	600b      	str	r3, [r1, #0]
 8011e92:	7812      	ldrb	r2, [r2, #0]
 8011e94:	1e10      	subs	r0, r2, #0
 8011e96:	bf18      	it	ne
 8011e98:	2001      	movne	r0, #1
 8011e9a:	b002      	add	sp, #8
 8011e9c:	4770      	bx	lr
 8011e9e:	4610      	mov	r0, r2
 8011ea0:	e7fb      	b.n	8011e9a <__ascii_mbtowc+0x16>
 8011ea2:	f06f 0001 	mvn.w	r0, #1
 8011ea6:	e7f8      	b.n	8011e9a <__ascii_mbtowc+0x16>

08011ea8 <memcpy>:
 8011ea8:	440a      	add	r2, r1
 8011eaa:	4291      	cmp	r1, r2
 8011eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8011eb0:	d100      	bne.n	8011eb4 <memcpy+0xc>
 8011eb2:	4770      	bx	lr
 8011eb4:	b510      	push	{r4, lr}
 8011eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ebe:	4291      	cmp	r1, r2
 8011ec0:	d1f9      	bne.n	8011eb6 <memcpy+0xe>
 8011ec2:	bd10      	pop	{r4, pc}

08011ec4 <_Balloc>:
 8011ec4:	b570      	push	{r4, r5, r6, lr}
 8011ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ec8:	4604      	mov	r4, r0
 8011eca:	460d      	mov	r5, r1
 8011ecc:	b976      	cbnz	r6, 8011eec <_Balloc+0x28>
 8011ece:	2010      	movs	r0, #16
 8011ed0:	f7ff ffd0 	bl	8011e74 <malloc>
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	6260      	str	r0, [r4, #36]	; 0x24
 8011ed8:	b920      	cbnz	r0, 8011ee4 <_Balloc+0x20>
 8011eda:	4b18      	ldr	r3, [pc, #96]	; (8011f3c <_Balloc+0x78>)
 8011edc:	4818      	ldr	r0, [pc, #96]	; (8011f40 <_Balloc+0x7c>)
 8011ede:	2166      	movs	r1, #102	; 0x66
 8011ee0:	f000 ff40 	bl	8012d64 <__assert_func>
 8011ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ee8:	6006      	str	r6, [r0, #0]
 8011eea:	60c6      	str	r6, [r0, #12]
 8011eec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011eee:	68f3      	ldr	r3, [r6, #12]
 8011ef0:	b183      	cbz	r3, 8011f14 <_Balloc+0x50>
 8011ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011efa:	b9b8      	cbnz	r0, 8011f2c <_Balloc+0x68>
 8011efc:	2101      	movs	r1, #1
 8011efe:	fa01 f605 	lsl.w	r6, r1, r5
 8011f02:	1d72      	adds	r2, r6, #5
 8011f04:	0092      	lsls	r2, r2, #2
 8011f06:	4620      	mov	r0, r4
 8011f08:	f000 fc9d 	bl	8012846 <_calloc_r>
 8011f0c:	b160      	cbz	r0, 8011f28 <_Balloc+0x64>
 8011f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f12:	e00e      	b.n	8011f32 <_Balloc+0x6e>
 8011f14:	2221      	movs	r2, #33	; 0x21
 8011f16:	2104      	movs	r1, #4
 8011f18:	4620      	mov	r0, r4
 8011f1a:	f000 fc94 	bl	8012846 <_calloc_r>
 8011f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f20:	60f0      	str	r0, [r6, #12]
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1e4      	bne.n	8011ef2 <_Balloc+0x2e>
 8011f28:	2000      	movs	r0, #0
 8011f2a:	bd70      	pop	{r4, r5, r6, pc}
 8011f2c:	6802      	ldr	r2, [r0, #0]
 8011f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f32:	2300      	movs	r3, #0
 8011f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f38:	e7f7      	b.n	8011f2a <_Balloc+0x66>
 8011f3a:	bf00      	nop
 8011f3c:	080177be 	.word	0x080177be
 8011f40:	080178bc 	.word	0x080178bc

08011f44 <_Bfree>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011f48:	4605      	mov	r5, r0
 8011f4a:	460c      	mov	r4, r1
 8011f4c:	b976      	cbnz	r6, 8011f6c <_Bfree+0x28>
 8011f4e:	2010      	movs	r0, #16
 8011f50:	f7ff ff90 	bl	8011e74 <malloc>
 8011f54:	4602      	mov	r2, r0
 8011f56:	6268      	str	r0, [r5, #36]	; 0x24
 8011f58:	b920      	cbnz	r0, 8011f64 <_Bfree+0x20>
 8011f5a:	4b09      	ldr	r3, [pc, #36]	; (8011f80 <_Bfree+0x3c>)
 8011f5c:	4809      	ldr	r0, [pc, #36]	; (8011f84 <_Bfree+0x40>)
 8011f5e:	218a      	movs	r1, #138	; 0x8a
 8011f60:	f000 ff00 	bl	8012d64 <__assert_func>
 8011f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f68:	6006      	str	r6, [r0, #0]
 8011f6a:	60c6      	str	r6, [r0, #12]
 8011f6c:	b13c      	cbz	r4, 8011f7e <_Bfree+0x3a>
 8011f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f70:	6862      	ldr	r2, [r4, #4]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f78:	6021      	str	r1, [r4, #0]
 8011f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011f7e:	bd70      	pop	{r4, r5, r6, pc}
 8011f80:	080177be 	.word	0x080177be
 8011f84:	080178bc 	.word	0x080178bc

08011f88 <__multadd>:
 8011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8c:	690d      	ldr	r5, [r1, #16]
 8011f8e:	4607      	mov	r7, r0
 8011f90:	460c      	mov	r4, r1
 8011f92:	461e      	mov	r6, r3
 8011f94:	f101 0c14 	add.w	ip, r1, #20
 8011f98:	2000      	movs	r0, #0
 8011f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8011f9e:	b299      	uxth	r1, r3
 8011fa0:	fb02 6101 	mla	r1, r2, r1, r6
 8011fa4:	0c1e      	lsrs	r6, r3, #16
 8011fa6:	0c0b      	lsrs	r3, r1, #16
 8011fa8:	fb02 3306 	mla	r3, r2, r6, r3
 8011fac:	b289      	uxth	r1, r1
 8011fae:	3001      	adds	r0, #1
 8011fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011fb4:	4285      	cmp	r5, r0
 8011fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8011fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011fbe:	dcec      	bgt.n	8011f9a <__multadd+0x12>
 8011fc0:	b30e      	cbz	r6, 8012006 <__multadd+0x7e>
 8011fc2:	68a3      	ldr	r3, [r4, #8]
 8011fc4:	42ab      	cmp	r3, r5
 8011fc6:	dc19      	bgt.n	8011ffc <__multadd+0x74>
 8011fc8:	6861      	ldr	r1, [r4, #4]
 8011fca:	4638      	mov	r0, r7
 8011fcc:	3101      	adds	r1, #1
 8011fce:	f7ff ff79 	bl	8011ec4 <_Balloc>
 8011fd2:	4680      	mov	r8, r0
 8011fd4:	b928      	cbnz	r0, 8011fe2 <__multadd+0x5a>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	4b0c      	ldr	r3, [pc, #48]	; (801200c <__multadd+0x84>)
 8011fda:	480d      	ldr	r0, [pc, #52]	; (8012010 <__multadd+0x88>)
 8011fdc:	21b5      	movs	r1, #181	; 0xb5
 8011fde:	f000 fec1 	bl	8012d64 <__assert_func>
 8011fe2:	6922      	ldr	r2, [r4, #16]
 8011fe4:	3202      	adds	r2, #2
 8011fe6:	f104 010c 	add.w	r1, r4, #12
 8011fea:	0092      	lsls	r2, r2, #2
 8011fec:	300c      	adds	r0, #12
 8011fee:	f7ff ff5b 	bl	8011ea8 <memcpy>
 8011ff2:	4621      	mov	r1, r4
 8011ff4:	4638      	mov	r0, r7
 8011ff6:	f7ff ffa5 	bl	8011f44 <_Bfree>
 8011ffa:	4644      	mov	r4, r8
 8011ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012000:	3501      	adds	r5, #1
 8012002:	615e      	str	r6, [r3, #20]
 8012004:	6125      	str	r5, [r4, #16]
 8012006:	4620      	mov	r0, r4
 8012008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801200c:	08017830 	.word	0x08017830
 8012010:	080178bc 	.word	0x080178bc

08012014 <__s2b>:
 8012014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012018:	460c      	mov	r4, r1
 801201a:	4615      	mov	r5, r2
 801201c:	461f      	mov	r7, r3
 801201e:	2209      	movs	r2, #9
 8012020:	3308      	adds	r3, #8
 8012022:	4606      	mov	r6, r0
 8012024:	fb93 f3f2 	sdiv	r3, r3, r2
 8012028:	2100      	movs	r1, #0
 801202a:	2201      	movs	r2, #1
 801202c:	429a      	cmp	r2, r3
 801202e:	db09      	blt.n	8012044 <__s2b+0x30>
 8012030:	4630      	mov	r0, r6
 8012032:	f7ff ff47 	bl	8011ec4 <_Balloc>
 8012036:	b940      	cbnz	r0, 801204a <__s2b+0x36>
 8012038:	4602      	mov	r2, r0
 801203a:	4b19      	ldr	r3, [pc, #100]	; (80120a0 <__s2b+0x8c>)
 801203c:	4819      	ldr	r0, [pc, #100]	; (80120a4 <__s2b+0x90>)
 801203e:	21ce      	movs	r1, #206	; 0xce
 8012040:	f000 fe90 	bl	8012d64 <__assert_func>
 8012044:	0052      	lsls	r2, r2, #1
 8012046:	3101      	adds	r1, #1
 8012048:	e7f0      	b.n	801202c <__s2b+0x18>
 801204a:	9b08      	ldr	r3, [sp, #32]
 801204c:	6143      	str	r3, [r0, #20]
 801204e:	2d09      	cmp	r5, #9
 8012050:	f04f 0301 	mov.w	r3, #1
 8012054:	6103      	str	r3, [r0, #16]
 8012056:	dd16      	ble.n	8012086 <__s2b+0x72>
 8012058:	f104 0909 	add.w	r9, r4, #9
 801205c:	46c8      	mov	r8, r9
 801205e:	442c      	add	r4, r5
 8012060:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012064:	4601      	mov	r1, r0
 8012066:	3b30      	subs	r3, #48	; 0x30
 8012068:	220a      	movs	r2, #10
 801206a:	4630      	mov	r0, r6
 801206c:	f7ff ff8c 	bl	8011f88 <__multadd>
 8012070:	45a0      	cmp	r8, r4
 8012072:	d1f5      	bne.n	8012060 <__s2b+0x4c>
 8012074:	f1a5 0408 	sub.w	r4, r5, #8
 8012078:	444c      	add	r4, r9
 801207a:	1b2d      	subs	r5, r5, r4
 801207c:	1963      	adds	r3, r4, r5
 801207e:	42bb      	cmp	r3, r7
 8012080:	db04      	blt.n	801208c <__s2b+0x78>
 8012082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012086:	340a      	adds	r4, #10
 8012088:	2509      	movs	r5, #9
 801208a:	e7f6      	b.n	801207a <__s2b+0x66>
 801208c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012090:	4601      	mov	r1, r0
 8012092:	3b30      	subs	r3, #48	; 0x30
 8012094:	220a      	movs	r2, #10
 8012096:	4630      	mov	r0, r6
 8012098:	f7ff ff76 	bl	8011f88 <__multadd>
 801209c:	e7ee      	b.n	801207c <__s2b+0x68>
 801209e:	bf00      	nop
 80120a0:	08017830 	.word	0x08017830
 80120a4:	080178bc 	.word	0x080178bc

080120a8 <__hi0bits>:
 80120a8:	0c03      	lsrs	r3, r0, #16
 80120aa:	041b      	lsls	r3, r3, #16
 80120ac:	b9d3      	cbnz	r3, 80120e4 <__hi0bits+0x3c>
 80120ae:	0400      	lsls	r0, r0, #16
 80120b0:	2310      	movs	r3, #16
 80120b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80120b6:	bf04      	itt	eq
 80120b8:	0200      	lsleq	r0, r0, #8
 80120ba:	3308      	addeq	r3, #8
 80120bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80120c0:	bf04      	itt	eq
 80120c2:	0100      	lsleq	r0, r0, #4
 80120c4:	3304      	addeq	r3, #4
 80120c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80120ca:	bf04      	itt	eq
 80120cc:	0080      	lsleq	r0, r0, #2
 80120ce:	3302      	addeq	r3, #2
 80120d0:	2800      	cmp	r0, #0
 80120d2:	db05      	blt.n	80120e0 <__hi0bits+0x38>
 80120d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80120d8:	f103 0301 	add.w	r3, r3, #1
 80120dc:	bf08      	it	eq
 80120de:	2320      	moveq	r3, #32
 80120e0:	4618      	mov	r0, r3
 80120e2:	4770      	bx	lr
 80120e4:	2300      	movs	r3, #0
 80120e6:	e7e4      	b.n	80120b2 <__hi0bits+0xa>

080120e8 <__lo0bits>:
 80120e8:	6803      	ldr	r3, [r0, #0]
 80120ea:	f013 0207 	ands.w	r2, r3, #7
 80120ee:	4601      	mov	r1, r0
 80120f0:	d00b      	beq.n	801210a <__lo0bits+0x22>
 80120f2:	07da      	lsls	r2, r3, #31
 80120f4:	d423      	bmi.n	801213e <__lo0bits+0x56>
 80120f6:	0798      	lsls	r0, r3, #30
 80120f8:	bf49      	itett	mi
 80120fa:	085b      	lsrmi	r3, r3, #1
 80120fc:	089b      	lsrpl	r3, r3, #2
 80120fe:	2001      	movmi	r0, #1
 8012100:	600b      	strmi	r3, [r1, #0]
 8012102:	bf5c      	itt	pl
 8012104:	600b      	strpl	r3, [r1, #0]
 8012106:	2002      	movpl	r0, #2
 8012108:	4770      	bx	lr
 801210a:	b298      	uxth	r0, r3
 801210c:	b9a8      	cbnz	r0, 801213a <__lo0bits+0x52>
 801210e:	0c1b      	lsrs	r3, r3, #16
 8012110:	2010      	movs	r0, #16
 8012112:	b2da      	uxtb	r2, r3
 8012114:	b90a      	cbnz	r2, 801211a <__lo0bits+0x32>
 8012116:	3008      	adds	r0, #8
 8012118:	0a1b      	lsrs	r3, r3, #8
 801211a:	071a      	lsls	r2, r3, #28
 801211c:	bf04      	itt	eq
 801211e:	091b      	lsreq	r3, r3, #4
 8012120:	3004      	addeq	r0, #4
 8012122:	079a      	lsls	r2, r3, #30
 8012124:	bf04      	itt	eq
 8012126:	089b      	lsreq	r3, r3, #2
 8012128:	3002      	addeq	r0, #2
 801212a:	07da      	lsls	r2, r3, #31
 801212c:	d403      	bmi.n	8012136 <__lo0bits+0x4e>
 801212e:	085b      	lsrs	r3, r3, #1
 8012130:	f100 0001 	add.w	r0, r0, #1
 8012134:	d005      	beq.n	8012142 <__lo0bits+0x5a>
 8012136:	600b      	str	r3, [r1, #0]
 8012138:	4770      	bx	lr
 801213a:	4610      	mov	r0, r2
 801213c:	e7e9      	b.n	8012112 <__lo0bits+0x2a>
 801213e:	2000      	movs	r0, #0
 8012140:	4770      	bx	lr
 8012142:	2020      	movs	r0, #32
 8012144:	4770      	bx	lr
	...

08012148 <__i2b>:
 8012148:	b510      	push	{r4, lr}
 801214a:	460c      	mov	r4, r1
 801214c:	2101      	movs	r1, #1
 801214e:	f7ff feb9 	bl	8011ec4 <_Balloc>
 8012152:	4602      	mov	r2, r0
 8012154:	b928      	cbnz	r0, 8012162 <__i2b+0x1a>
 8012156:	4b05      	ldr	r3, [pc, #20]	; (801216c <__i2b+0x24>)
 8012158:	4805      	ldr	r0, [pc, #20]	; (8012170 <__i2b+0x28>)
 801215a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801215e:	f000 fe01 	bl	8012d64 <__assert_func>
 8012162:	2301      	movs	r3, #1
 8012164:	6144      	str	r4, [r0, #20]
 8012166:	6103      	str	r3, [r0, #16]
 8012168:	bd10      	pop	{r4, pc}
 801216a:	bf00      	nop
 801216c:	08017830 	.word	0x08017830
 8012170:	080178bc 	.word	0x080178bc

08012174 <__multiply>:
 8012174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012178:	4691      	mov	r9, r2
 801217a:	690a      	ldr	r2, [r1, #16]
 801217c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012180:	429a      	cmp	r2, r3
 8012182:	bfb8      	it	lt
 8012184:	460b      	movlt	r3, r1
 8012186:	460c      	mov	r4, r1
 8012188:	bfbc      	itt	lt
 801218a:	464c      	movlt	r4, r9
 801218c:	4699      	movlt	r9, r3
 801218e:	6927      	ldr	r7, [r4, #16]
 8012190:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012194:	68a3      	ldr	r3, [r4, #8]
 8012196:	6861      	ldr	r1, [r4, #4]
 8012198:	eb07 060a 	add.w	r6, r7, sl
 801219c:	42b3      	cmp	r3, r6
 801219e:	b085      	sub	sp, #20
 80121a0:	bfb8      	it	lt
 80121a2:	3101      	addlt	r1, #1
 80121a4:	f7ff fe8e 	bl	8011ec4 <_Balloc>
 80121a8:	b930      	cbnz	r0, 80121b8 <__multiply+0x44>
 80121aa:	4602      	mov	r2, r0
 80121ac:	4b44      	ldr	r3, [pc, #272]	; (80122c0 <__multiply+0x14c>)
 80121ae:	4845      	ldr	r0, [pc, #276]	; (80122c4 <__multiply+0x150>)
 80121b0:	f240 115d 	movw	r1, #349	; 0x15d
 80121b4:	f000 fdd6 	bl	8012d64 <__assert_func>
 80121b8:	f100 0514 	add.w	r5, r0, #20
 80121bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80121c0:	462b      	mov	r3, r5
 80121c2:	2200      	movs	r2, #0
 80121c4:	4543      	cmp	r3, r8
 80121c6:	d321      	bcc.n	801220c <__multiply+0x98>
 80121c8:	f104 0314 	add.w	r3, r4, #20
 80121cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80121d0:	f109 0314 	add.w	r3, r9, #20
 80121d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80121d8:	9202      	str	r2, [sp, #8]
 80121da:	1b3a      	subs	r2, r7, r4
 80121dc:	3a15      	subs	r2, #21
 80121de:	f022 0203 	bic.w	r2, r2, #3
 80121e2:	3204      	adds	r2, #4
 80121e4:	f104 0115 	add.w	r1, r4, #21
 80121e8:	428f      	cmp	r7, r1
 80121ea:	bf38      	it	cc
 80121ec:	2204      	movcc	r2, #4
 80121ee:	9201      	str	r2, [sp, #4]
 80121f0:	9a02      	ldr	r2, [sp, #8]
 80121f2:	9303      	str	r3, [sp, #12]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d80c      	bhi.n	8012212 <__multiply+0x9e>
 80121f8:	2e00      	cmp	r6, #0
 80121fa:	dd03      	ble.n	8012204 <__multiply+0x90>
 80121fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012200:	2b00      	cmp	r3, #0
 8012202:	d05a      	beq.n	80122ba <__multiply+0x146>
 8012204:	6106      	str	r6, [r0, #16]
 8012206:	b005      	add	sp, #20
 8012208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220c:	f843 2b04 	str.w	r2, [r3], #4
 8012210:	e7d8      	b.n	80121c4 <__multiply+0x50>
 8012212:	f8b3 a000 	ldrh.w	sl, [r3]
 8012216:	f1ba 0f00 	cmp.w	sl, #0
 801221a:	d024      	beq.n	8012266 <__multiply+0xf2>
 801221c:	f104 0e14 	add.w	lr, r4, #20
 8012220:	46a9      	mov	r9, r5
 8012222:	f04f 0c00 	mov.w	ip, #0
 8012226:	f85e 2b04 	ldr.w	r2, [lr], #4
 801222a:	f8d9 1000 	ldr.w	r1, [r9]
 801222e:	fa1f fb82 	uxth.w	fp, r2
 8012232:	b289      	uxth	r1, r1
 8012234:	fb0a 110b 	mla	r1, sl, fp, r1
 8012238:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801223c:	f8d9 2000 	ldr.w	r2, [r9]
 8012240:	4461      	add	r1, ip
 8012242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012246:	fb0a c20b 	mla	r2, sl, fp, ip
 801224a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801224e:	b289      	uxth	r1, r1
 8012250:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012254:	4577      	cmp	r7, lr
 8012256:	f849 1b04 	str.w	r1, [r9], #4
 801225a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801225e:	d8e2      	bhi.n	8012226 <__multiply+0xb2>
 8012260:	9a01      	ldr	r2, [sp, #4]
 8012262:	f845 c002 	str.w	ip, [r5, r2]
 8012266:	9a03      	ldr	r2, [sp, #12]
 8012268:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801226c:	3304      	adds	r3, #4
 801226e:	f1b9 0f00 	cmp.w	r9, #0
 8012272:	d020      	beq.n	80122b6 <__multiply+0x142>
 8012274:	6829      	ldr	r1, [r5, #0]
 8012276:	f104 0c14 	add.w	ip, r4, #20
 801227a:	46ae      	mov	lr, r5
 801227c:	f04f 0a00 	mov.w	sl, #0
 8012280:	f8bc b000 	ldrh.w	fp, [ip]
 8012284:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012288:	fb09 220b 	mla	r2, r9, fp, r2
 801228c:	4492      	add	sl, r2
 801228e:	b289      	uxth	r1, r1
 8012290:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012294:	f84e 1b04 	str.w	r1, [lr], #4
 8012298:	f85c 2b04 	ldr.w	r2, [ip], #4
 801229c:	f8be 1000 	ldrh.w	r1, [lr]
 80122a0:	0c12      	lsrs	r2, r2, #16
 80122a2:	fb09 1102 	mla	r1, r9, r2, r1
 80122a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80122aa:	4567      	cmp	r7, ip
 80122ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80122b0:	d8e6      	bhi.n	8012280 <__multiply+0x10c>
 80122b2:	9a01      	ldr	r2, [sp, #4]
 80122b4:	50a9      	str	r1, [r5, r2]
 80122b6:	3504      	adds	r5, #4
 80122b8:	e79a      	b.n	80121f0 <__multiply+0x7c>
 80122ba:	3e01      	subs	r6, #1
 80122bc:	e79c      	b.n	80121f8 <__multiply+0x84>
 80122be:	bf00      	nop
 80122c0:	08017830 	.word	0x08017830
 80122c4:	080178bc 	.word	0x080178bc

080122c8 <__pow5mult>:
 80122c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122cc:	4615      	mov	r5, r2
 80122ce:	f012 0203 	ands.w	r2, r2, #3
 80122d2:	4606      	mov	r6, r0
 80122d4:	460f      	mov	r7, r1
 80122d6:	d007      	beq.n	80122e8 <__pow5mult+0x20>
 80122d8:	4c25      	ldr	r4, [pc, #148]	; (8012370 <__pow5mult+0xa8>)
 80122da:	3a01      	subs	r2, #1
 80122dc:	2300      	movs	r3, #0
 80122de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122e2:	f7ff fe51 	bl	8011f88 <__multadd>
 80122e6:	4607      	mov	r7, r0
 80122e8:	10ad      	asrs	r5, r5, #2
 80122ea:	d03d      	beq.n	8012368 <__pow5mult+0xa0>
 80122ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80122ee:	b97c      	cbnz	r4, 8012310 <__pow5mult+0x48>
 80122f0:	2010      	movs	r0, #16
 80122f2:	f7ff fdbf 	bl	8011e74 <malloc>
 80122f6:	4602      	mov	r2, r0
 80122f8:	6270      	str	r0, [r6, #36]	; 0x24
 80122fa:	b928      	cbnz	r0, 8012308 <__pow5mult+0x40>
 80122fc:	4b1d      	ldr	r3, [pc, #116]	; (8012374 <__pow5mult+0xac>)
 80122fe:	481e      	ldr	r0, [pc, #120]	; (8012378 <__pow5mult+0xb0>)
 8012300:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012304:	f000 fd2e 	bl	8012d64 <__assert_func>
 8012308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801230c:	6004      	str	r4, [r0, #0]
 801230e:	60c4      	str	r4, [r0, #12]
 8012310:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012318:	b94c      	cbnz	r4, 801232e <__pow5mult+0x66>
 801231a:	f240 2171 	movw	r1, #625	; 0x271
 801231e:	4630      	mov	r0, r6
 8012320:	f7ff ff12 	bl	8012148 <__i2b>
 8012324:	2300      	movs	r3, #0
 8012326:	f8c8 0008 	str.w	r0, [r8, #8]
 801232a:	4604      	mov	r4, r0
 801232c:	6003      	str	r3, [r0, #0]
 801232e:	f04f 0900 	mov.w	r9, #0
 8012332:	07eb      	lsls	r3, r5, #31
 8012334:	d50a      	bpl.n	801234c <__pow5mult+0x84>
 8012336:	4639      	mov	r1, r7
 8012338:	4622      	mov	r2, r4
 801233a:	4630      	mov	r0, r6
 801233c:	f7ff ff1a 	bl	8012174 <__multiply>
 8012340:	4639      	mov	r1, r7
 8012342:	4680      	mov	r8, r0
 8012344:	4630      	mov	r0, r6
 8012346:	f7ff fdfd 	bl	8011f44 <_Bfree>
 801234a:	4647      	mov	r7, r8
 801234c:	106d      	asrs	r5, r5, #1
 801234e:	d00b      	beq.n	8012368 <__pow5mult+0xa0>
 8012350:	6820      	ldr	r0, [r4, #0]
 8012352:	b938      	cbnz	r0, 8012364 <__pow5mult+0x9c>
 8012354:	4622      	mov	r2, r4
 8012356:	4621      	mov	r1, r4
 8012358:	4630      	mov	r0, r6
 801235a:	f7ff ff0b 	bl	8012174 <__multiply>
 801235e:	6020      	str	r0, [r4, #0]
 8012360:	f8c0 9000 	str.w	r9, [r0]
 8012364:	4604      	mov	r4, r0
 8012366:	e7e4      	b.n	8012332 <__pow5mult+0x6a>
 8012368:	4638      	mov	r0, r7
 801236a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801236e:	bf00      	nop
 8012370:	08017a08 	.word	0x08017a08
 8012374:	080177be 	.word	0x080177be
 8012378:	080178bc 	.word	0x080178bc

0801237c <__lshift>:
 801237c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012380:	460c      	mov	r4, r1
 8012382:	6849      	ldr	r1, [r1, #4]
 8012384:	6923      	ldr	r3, [r4, #16]
 8012386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801238a:	68a3      	ldr	r3, [r4, #8]
 801238c:	4607      	mov	r7, r0
 801238e:	4691      	mov	r9, r2
 8012390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012394:	f108 0601 	add.w	r6, r8, #1
 8012398:	42b3      	cmp	r3, r6
 801239a:	db0b      	blt.n	80123b4 <__lshift+0x38>
 801239c:	4638      	mov	r0, r7
 801239e:	f7ff fd91 	bl	8011ec4 <_Balloc>
 80123a2:	4605      	mov	r5, r0
 80123a4:	b948      	cbnz	r0, 80123ba <__lshift+0x3e>
 80123a6:	4602      	mov	r2, r0
 80123a8:	4b2a      	ldr	r3, [pc, #168]	; (8012454 <__lshift+0xd8>)
 80123aa:	482b      	ldr	r0, [pc, #172]	; (8012458 <__lshift+0xdc>)
 80123ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80123b0:	f000 fcd8 	bl	8012d64 <__assert_func>
 80123b4:	3101      	adds	r1, #1
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	e7ee      	b.n	8012398 <__lshift+0x1c>
 80123ba:	2300      	movs	r3, #0
 80123bc:	f100 0114 	add.w	r1, r0, #20
 80123c0:	f100 0210 	add.w	r2, r0, #16
 80123c4:	4618      	mov	r0, r3
 80123c6:	4553      	cmp	r3, sl
 80123c8:	db37      	blt.n	801243a <__lshift+0xbe>
 80123ca:	6920      	ldr	r0, [r4, #16]
 80123cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123d0:	f104 0314 	add.w	r3, r4, #20
 80123d4:	f019 091f 	ands.w	r9, r9, #31
 80123d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80123e0:	d02f      	beq.n	8012442 <__lshift+0xc6>
 80123e2:	f1c9 0e20 	rsb	lr, r9, #32
 80123e6:	468a      	mov	sl, r1
 80123e8:	f04f 0c00 	mov.w	ip, #0
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	fa02 f209 	lsl.w	r2, r2, r9
 80123f2:	ea42 020c 	orr.w	r2, r2, ip
 80123f6:	f84a 2b04 	str.w	r2, [sl], #4
 80123fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80123fe:	4298      	cmp	r0, r3
 8012400:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012404:	d8f2      	bhi.n	80123ec <__lshift+0x70>
 8012406:	1b03      	subs	r3, r0, r4
 8012408:	3b15      	subs	r3, #21
 801240a:	f023 0303 	bic.w	r3, r3, #3
 801240e:	3304      	adds	r3, #4
 8012410:	f104 0215 	add.w	r2, r4, #21
 8012414:	4290      	cmp	r0, r2
 8012416:	bf38      	it	cc
 8012418:	2304      	movcc	r3, #4
 801241a:	f841 c003 	str.w	ip, [r1, r3]
 801241e:	f1bc 0f00 	cmp.w	ip, #0
 8012422:	d001      	beq.n	8012428 <__lshift+0xac>
 8012424:	f108 0602 	add.w	r6, r8, #2
 8012428:	3e01      	subs	r6, #1
 801242a:	4638      	mov	r0, r7
 801242c:	612e      	str	r6, [r5, #16]
 801242e:	4621      	mov	r1, r4
 8012430:	f7ff fd88 	bl	8011f44 <_Bfree>
 8012434:	4628      	mov	r0, r5
 8012436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801243a:	f842 0f04 	str.w	r0, [r2, #4]!
 801243e:	3301      	adds	r3, #1
 8012440:	e7c1      	b.n	80123c6 <__lshift+0x4a>
 8012442:	3904      	subs	r1, #4
 8012444:	f853 2b04 	ldr.w	r2, [r3], #4
 8012448:	f841 2f04 	str.w	r2, [r1, #4]!
 801244c:	4298      	cmp	r0, r3
 801244e:	d8f9      	bhi.n	8012444 <__lshift+0xc8>
 8012450:	e7ea      	b.n	8012428 <__lshift+0xac>
 8012452:	bf00      	nop
 8012454:	08017830 	.word	0x08017830
 8012458:	080178bc 	.word	0x080178bc

0801245c <__mcmp>:
 801245c:	b530      	push	{r4, r5, lr}
 801245e:	6902      	ldr	r2, [r0, #16]
 8012460:	690c      	ldr	r4, [r1, #16]
 8012462:	1b12      	subs	r2, r2, r4
 8012464:	d10e      	bne.n	8012484 <__mcmp+0x28>
 8012466:	f100 0314 	add.w	r3, r0, #20
 801246a:	3114      	adds	r1, #20
 801246c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801247c:	42a5      	cmp	r5, r4
 801247e:	d003      	beq.n	8012488 <__mcmp+0x2c>
 8012480:	d305      	bcc.n	801248e <__mcmp+0x32>
 8012482:	2201      	movs	r2, #1
 8012484:	4610      	mov	r0, r2
 8012486:	bd30      	pop	{r4, r5, pc}
 8012488:	4283      	cmp	r3, r0
 801248a:	d3f3      	bcc.n	8012474 <__mcmp+0x18>
 801248c:	e7fa      	b.n	8012484 <__mcmp+0x28>
 801248e:	f04f 32ff 	mov.w	r2, #4294967295
 8012492:	e7f7      	b.n	8012484 <__mcmp+0x28>

08012494 <__mdiff>:
 8012494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	460c      	mov	r4, r1
 801249a:	4606      	mov	r6, r0
 801249c:	4611      	mov	r1, r2
 801249e:	4620      	mov	r0, r4
 80124a0:	4690      	mov	r8, r2
 80124a2:	f7ff ffdb 	bl	801245c <__mcmp>
 80124a6:	1e05      	subs	r5, r0, #0
 80124a8:	d110      	bne.n	80124cc <__mdiff+0x38>
 80124aa:	4629      	mov	r1, r5
 80124ac:	4630      	mov	r0, r6
 80124ae:	f7ff fd09 	bl	8011ec4 <_Balloc>
 80124b2:	b930      	cbnz	r0, 80124c2 <__mdiff+0x2e>
 80124b4:	4b3a      	ldr	r3, [pc, #232]	; (80125a0 <__mdiff+0x10c>)
 80124b6:	4602      	mov	r2, r0
 80124b8:	f240 2132 	movw	r1, #562	; 0x232
 80124bc:	4839      	ldr	r0, [pc, #228]	; (80125a4 <__mdiff+0x110>)
 80124be:	f000 fc51 	bl	8012d64 <__assert_func>
 80124c2:	2301      	movs	r3, #1
 80124c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124cc:	bfa4      	itt	ge
 80124ce:	4643      	movge	r3, r8
 80124d0:	46a0      	movge	r8, r4
 80124d2:	4630      	mov	r0, r6
 80124d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80124d8:	bfa6      	itte	ge
 80124da:	461c      	movge	r4, r3
 80124dc:	2500      	movge	r5, #0
 80124de:	2501      	movlt	r5, #1
 80124e0:	f7ff fcf0 	bl	8011ec4 <_Balloc>
 80124e4:	b920      	cbnz	r0, 80124f0 <__mdiff+0x5c>
 80124e6:	4b2e      	ldr	r3, [pc, #184]	; (80125a0 <__mdiff+0x10c>)
 80124e8:	4602      	mov	r2, r0
 80124ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80124ee:	e7e5      	b.n	80124bc <__mdiff+0x28>
 80124f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80124f4:	6926      	ldr	r6, [r4, #16]
 80124f6:	60c5      	str	r5, [r0, #12]
 80124f8:	f104 0914 	add.w	r9, r4, #20
 80124fc:	f108 0514 	add.w	r5, r8, #20
 8012500:	f100 0e14 	add.w	lr, r0, #20
 8012504:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801250c:	f108 0210 	add.w	r2, r8, #16
 8012510:	46f2      	mov	sl, lr
 8012512:	2100      	movs	r1, #0
 8012514:	f859 3b04 	ldr.w	r3, [r9], #4
 8012518:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801251c:	fa1f f883 	uxth.w	r8, r3
 8012520:	fa11 f18b 	uxtah	r1, r1, fp
 8012524:	0c1b      	lsrs	r3, r3, #16
 8012526:	eba1 0808 	sub.w	r8, r1, r8
 801252a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801252e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012532:	fa1f f888 	uxth.w	r8, r8
 8012536:	1419      	asrs	r1, r3, #16
 8012538:	454e      	cmp	r6, r9
 801253a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801253e:	f84a 3b04 	str.w	r3, [sl], #4
 8012542:	d8e7      	bhi.n	8012514 <__mdiff+0x80>
 8012544:	1b33      	subs	r3, r6, r4
 8012546:	3b15      	subs	r3, #21
 8012548:	f023 0303 	bic.w	r3, r3, #3
 801254c:	3304      	adds	r3, #4
 801254e:	3415      	adds	r4, #21
 8012550:	42a6      	cmp	r6, r4
 8012552:	bf38      	it	cc
 8012554:	2304      	movcc	r3, #4
 8012556:	441d      	add	r5, r3
 8012558:	4473      	add	r3, lr
 801255a:	469e      	mov	lr, r3
 801255c:	462e      	mov	r6, r5
 801255e:	4566      	cmp	r6, ip
 8012560:	d30e      	bcc.n	8012580 <__mdiff+0xec>
 8012562:	f10c 0203 	add.w	r2, ip, #3
 8012566:	1b52      	subs	r2, r2, r5
 8012568:	f022 0203 	bic.w	r2, r2, #3
 801256c:	3d03      	subs	r5, #3
 801256e:	45ac      	cmp	ip, r5
 8012570:	bf38      	it	cc
 8012572:	2200      	movcc	r2, #0
 8012574:	441a      	add	r2, r3
 8012576:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801257a:	b17b      	cbz	r3, 801259c <__mdiff+0x108>
 801257c:	6107      	str	r7, [r0, #16]
 801257e:	e7a3      	b.n	80124c8 <__mdiff+0x34>
 8012580:	f856 8b04 	ldr.w	r8, [r6], #4
 8012584:	fa11 f288 	uxtah	r2, r1, r8
 8012588:	1414      	asrs	r4, r2, #16
 801258a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801258e:	b292      	uxth	r2, r2
 8012590:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012594:	f84e 2b04 	str.w	r2, [lr], #4
 8012598:	1421      	asrs	r1, r4, #16
 801259a:	e7e0      	b.n	801255e <__mdiff+0xca>
 801259c:	3f01      	subs	r7, #1
 801259e:	e7ea      	b.n	8012576 <__mdiff+0xe2>
 80125a0:	08017830 	.word	0x08017830
 80125a4:	080178bc 	.word	0x080178bc

080125a8 <__ulp>:
 80125a8:	b082      	sub	sp, #8
 80125aa:	ed8d 0b00 	vstr	d0, [sp]
 80125ae:	9b01      	ldr	r3, [sp, #4]
 80125b0:	4912      	ldr	r1, [pc, #72]	; (80125fc <__ulp+0x54>)
 80125b2:	4019      	ands	r1, r3
 80125b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80125b8:	2900      	cmp	r1, #0
 80125ba:	dd05      	ble.n	80125c8 <__ulp+0x20>
 80125bc:	2200      	movs	r2, #0
 80125be:	460b      	mov	r3, r1
 80125c0:	ec43 2b10 	vmov	d0, r2, r3
 80125c4:	b002      	add	sp, #8
 80125c6:	4770      	bx	lr
 80125c8:	4249      	negs	r1, r1
 80125ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80125ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80125d2:	f04f 0200 	mov.w	r2, #0
 80125d6:	f04f 0300 	mov.w	r3, #0
 80125da:	da04      	bge.n	80125e6 <__ulp+0x3e>
 80125dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80125e0:	fa41 f300 	asr.w	r3, r1, r0
 80125e4:	e7ec      	b.n	80125c0 <__ulp+0x18>
 80125e6:	f1a0 0114 	sub.w	r1, r0, #20
 80125ea:	291e      	cmp	r1, #30
 80125ec:	bfda      	itte	le
 80125ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80125f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80125f6:	2101      	movgt	r1, #1
 80125f8:	460a      	mov	r2, r1
 80125fa:	e7e1      	b.n	80125c0 <__ulp+0x18>
 80125fc:	7ff00000 	.word	0x7ff00000

08012600 <__b2d>:
 8012600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012602:	6905      	ldr	r5, [r0, #16]
 8012604:	f100 0714 	add.w	r7, r0, #20
 8012608:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801260c:	1f2e      	subs	r6, r5, #4
 801260e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012612:	4620      	mov	r0, r4
 8012614:	f7ff fd48 	bl	80120a8 <__hi0bits>
 8012618:	f1c0 0320 	rsb	r3, r0, #32
 801261c:	280a      	cmp	r0, #10
 801261e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801269c <__b2d+0x9c>
 8012622:	600b      	str	r3, [r1, #0]
 8012624:	dc14      	bgt.n	8012650 <__b2d+0x50>
 8012626:	f1c0 0e0b 	rsb	lr, r0, #11
 801262a:	fa24 f10e 	lsr.w	r1, r4, lr
 801262e:	42b7      	cmp	r7, r6
 8012630:	ea41 030c 	orr.w	r3, r1, ip
 8012634:	bf34      	ite	cc
 8012636:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801263a:	2100      	movcs	r1, #0
 801263c:	3015      	adds	r0, #21
 801263e:	fa04 f000 	lsl.w	r0, r4, r0
 8012642:	fa21 f10e 	lsr.w	r1, r1, lr
 8012646:	ea40 0201 	orr.w	r2, r0, r1
 801264a:	ec43 2b10 	vmov	d0, r2, r3
 801264e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012650:	42b7      	cmp	r7, r6
 8012652:	bf3a      	itte	cc
 8012654:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012658:	f1a5 0608 	subcc.w	r6, r5, #8
 801265c:	2100      	movcs	r1, #0
 801265e:	380b      	subs	r0, #11
 8012660:	d017      	beq.n	8012692 <__b2d+0x92>
 8012662:	f1c0 0c20 	rsb	ip, r0, #32
 8012666:	fa04 f500 	lsl.w	r5, r4, r0
 801266a:	42be      	cmp	r6, r7
 801266c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012670:	ea45 0504 	orr.w	r5, r5, r4
 8012674:	bf8c      	ite	hi
 8012676:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801267a:	2400      	movls	r4, #0
 801267c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012680:	fa01 f000 	lsl.w	r0, r1, r0
 8012684:	fa24 f40c 	lsr.w	r4, r4, ip
 8012688:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801268c:	ea40 0204 	orr.w	r2, r0, r4
 8012690:	e7db      	b.n	801264a <__b2d+0x4a>
 8012692:	ea44 030c 	orr.w	r3, r4, ip
 8012696:	460a      	mov	r2, r1
 8012698:	e7d7      	b.n	801264a <__b2d+0x4a>
 801269a:	bf00      	nop
 801269c:	3ff00000 	.word	0x3ff00000

080126a0 <__d2b>:
 80126a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80126a4:	4689      	mov	r9, r1
 80126a6:	2101      	movs	r1, #1
 80126a8:	ec57 6b10 	vmov	r6, r7, d0
 80126ac:	4690      	mov	r8, r2
 80126ae:	f7ff fc09 	bl	8011ec4 <_Balloc>
 80126b2:	4604      	mov	r4, r0
 80126b4:	b930      	cbnz	r0, 80126c4 <__d2b+0x24>
 80126b6:	4602      	mov	r2, r0
 80126b8:	4b25      	ldr	r3, [pc, #148]	; (8012750 <__d2b+0xb0>)
 80126ba:	4826      	ldr	r0, [pc, #152]	; (8012754 <__d2b+0xb4>)
 80126bc:	f240 310a 	movw	r1, #778	; 0x30a
 80126c0:	f000 fb50 	bl	8012d64 <__assert_func>
 80126c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80126c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80126cc:	bb35      	cbnz	r5, 801271c <__d2b+0x7c>
 80126ce:	2e00      	cmp	r6, #0
 80126d0:	9301      	str	r3, [sp, #4]
 80126d2:	d028      	beq.n	8012726 <__d2b+0x86>
 80126d4:	4668      	mov	r0, sp
 80126d6:	9600      	str	r6, [sp, #0]
 80126d8:	f7ff fd06 	bl	80120e8 <__lo0bits>
 80126dc:	9900      	ldr	r1, [sp, #0]
 80126de:	b300      	cbz	r0, 8012722 <__d2b+0x82>
 80126e0:	9a01      	ldr	r2, [sp, #4]
 80126e2:	f1c0 0320 	rsb	r3, r0, #32
 80126e6:	fa02 f303 	lsl.w	r3, r2, r3
 80126ea:	430b      	orrs	r3, r1
 80126ec:	40c2      	lsrs	r2, r0
 80126ee:	6163      	str	r3, [r4, #20]
 80126f0:	9201      	str	r2, [sp, #4]
 80126f2:	9b01      	ldr	r3, [sp, #4]
 80126f4:	61a3      	str	r3, [r4, #24]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	bf14      	ite	ne
 80126fa:	2202      	movne	r2, #2
 80126fc:	2201      	moveq	r2, #1
 80126fe:	6122      	str	r2, [r4, #16]
 8012700:	b1d5      	cbz	r5, 8012738 <__d2b+0x98>
 8012702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012706:	4405      	add	r5, r0
 8012708:	f8c9 5000 	str.w	r5, [r9]
 801270c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012710:	f8c8 0000 	str.w	r0, [r8]
 8012714:	4620      	mov	r0, r4
 8012716:	b003      	add	sp, #12
 8012718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801271c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012720:	e7d5      	b.n	80126ce <__d2b+0x2e>
 8012722:	6161      	str	r1, [r4, #20]
 8012724:	e7e5      	b.n	80126f2 <__d2b+0x52>
 8012726:	a801      	add	r0, sp, #4
 8012728:	f7ff fcde 	bl	80120e8 <__lo0bits>
 801272c:	9b01      	ldr	r3, [sp, #4]
 801272e:	6163      	str	r3, [r4, #20]
 8012730:	2201      	movs	r2, #1
 8012732:	6122      	str	r2, [r4, #16]
 8012734:	3020      	adds	r0, #32
 8012736:	e7e3      	b.n	8012700 <__d2b+0x60>
 8012738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801273c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012740:	f8c9 0000 	str.w	r0, [r9]
 8012744:	6918      	ldr	r0, [r3, #16]
 8012746:	f7ff fcaf 	bl	80120a8 <__hi0bits>
 801274a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801274e:	e7df      	b.n	8012710 <__d2b+0x70>
 8012750:	08017830 	.word	0x08017830
 8012754:	080178bc 	.word	0x080178bc

08012758 <__ratio>:
 8012758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	4688      	mov	r8, r1
 801275e:	4669      	mov	r1, sp
 8012760:	4681      	mov	r9, r0
 8012762:	f7ff ff4d 	bl	8012600 <__b2d>
 8012766:	a901      	add	r1, sp, #4
 8012768:	4640      	mov	r0, r8
 801276a:	ec55 4b10 	vmov	r4, r5, d0
 801276e:	f7ff ff47 	bl	8012600 <__b2d>
 8012772:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012776:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801277a:	eba3 0c02 	sub.w	ip, r3, r2
 801277e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012782:	1a9b      	subs	r3, r3, r2
 8012784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012788:	ec51 0b10 	vmov	r0, r1, d0
 801278c:	2b00      	cmp	r3, #0
 801278e:	bfd6      	itet	le
 8012790:	460a      	movle	r2, r1
 8012792:	462a      	movgt	r2, r5
 8012794:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012798:	468b      	mov	fp, r1
 801279a:	462f      	mov	r7, r5
 801279c:	bfd4      	ite	le
 801279e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80127a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80127a6:	4620      	mov	r0, r4
 80127a8:	ee10 2a10 	vmov	r2, s0
 80127ac:	465b      	mov	r3, fp
 80127ae:	4639      	mov	r1, r7
 80127b0:	f7ee f84c 	bl	800084c <__aeabi_ddiv>
 80127b4:	ec41 0b10 	vmov	d0, r0, r1
 80127b8:	b003      	add	sp, #12
 80127ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127be <__copybits>:
 80127be:	3901      	subs	r1, #1
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	1149      	asrs	r1, r1, #5
 80127c4:	6914      	ldr	r4, [r2, #16]
 80127c6:	3101      	adds	r1, #1
 80127c8:	f102 0314 	add.w	r3, r2, #20
 80127cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80127d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80127d4:	1f05      	subs	r5, r0, #4
 80127d6:	42a3      	cmp	r3, r4
 80127d8:	d30c      	bcc.n	80127f4 <__copybits+0x36>
 80127da:	1aa3      	subs	r3, r4, r2
 80127dc:	3b11      	subs	r3, #17
 80127de:	f023 0303 	bic.w	r3, r3, #3
 80127e2:	3211      	adds	r2, #17
 80127e4:	42a2      	cmp	r2, r4
 80127e6:	bf88      	it	hi
 80127e8:	2300      	movhi	r3, #0
 80127ea:	4418      	add	r0, r3
 80127ec:	2300      	movs	r3, #0
 80127ee:	4288      	cmp	r0, r1
 80127f0:	d305      	bcc.n	80127fe <__copybits+0x40>
 80127f2:	bd70      	pop	{r4, r5, r6, pc}
 80127f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80127f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80127fc:	e7eb      	b.n	80127d6 <__copybits+0x18>
 80127fe:	f840 3b04 	str.w	r3, [r0], #4
 8012802:	e7f4      	b.n	80127ee <__copybits+0x30>

08012804 <__any_on>:
 8012804:	f100 0214 	add.w	r2, r0, #20
 8012808:	6900      	ldr	r0, [r0, #16]
 801280a:	114b      	asrs	r3, r1, #5
 801280c:	4298      	cmp	r0, r3
 801280e:	b510      	push	{r4, lr}
 8012810:	db11      	blt.n	8012836 <__any_on+0x32>
 8012812:	dd0a      	ble.n	801282a <__any_on+0x26>
 8012814:	f011 011f 	ands.w	r1, r1, #31
 8012818:	d007      	beq.n	801282a <__any_on+0x26>
 801281a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801281e:	fa24 f001 	lsr.w	r0, r4, r1
 8012822:	fa00 f101 	lsl.w	r1, r0, r1
 8012826:	428c      	cmp	r4, r1
 8012828:	d10b      	bne.n	8012842 <__any_on+0x3e>
 801282a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801282e:	4293      	cmp	r3, r2
 8012830:	d803      	bhi.n	801283a <__any_on+0x36>
 8012832:	2000      	movs	r0, #0
 8012834:	bd10      	pop	{r4, pc}
 8012836:	4603      	mov	r3, r0
 8012838:	e7f7      	b.n	801282a <__any_on+0x26>
 801283a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801283e:	2900      	cmp	r1, #0
 8012840:	d0f5      	beq.n	801282e <__any_on+0x2a>
 8012842:	2001      	movs	r0, #1
 8012844:	e7f6      	b.n	8012834 <__any_on+0x30>

08012846 <_calloc_r>:
 8012846:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012848:	fba1 2402 	umull	r2, r4, r1, r2
 801284c:	b94c      	cbnz	r4, 8012862 <_calloc_r+0x1c>
 801284e:	4611      	mov	r1, r2
 8012850:	9201      	str	r2, [sp, #4]
 8012852:	f000 f87b 	bl	801294c <_malloc_r>
 8012856:	9a01      	ldr	r2, [sp, #4]
 8012858:	4605      	mov	r5, r0
 801285a:	b930      	cbnz	r0, 801286a <_calloc_r+0x24>
 801285c:	4628      	mov	r0, r5
 801285e:	b003      	add	sp, #12
 8012860:	bd30      	pop	{r4, r5, pc}
 8012862:	220c      	movs	r2, #12
 8012864:	6002      	str	r2, [r0, #0]
 8012866:	2500      	movs	r5, #0
 8012868:	e7f8      	b.n	801285c <_calloc_r+0x16>
 801286a:	4621      	mov	r1, r4
 801286c:	f7fc fbbe 	bl	800efec <memset>
 8012870:	e7f4      	b.n	801285c <_calloc_r+0x16>
	...

08012874 <_free_r>:
 8012874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012876:	2900      	cmp	r1, #0
 8012878:	d044      	beq.n	8012904 <_free_r+0x90>
 801287a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801287e:	9001      	str	r0, [sp, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	f1a1 0404 	sub.w	r4, r1, #4
 8012886:	bfb8      	it	lt
 8012888:	18e4      	addlt	r4, r4, r3
 801288a:	f000 fab5 	bl	8012df8 <__malloc_lock>
 801288e:	4a1e      	ldr	r2, [pc, #120]	; (8012908 <_free_r+0x94>)
 8012890:	9801      	ldr	r0, [sp, #4]
 8012892:	6813      	ldr	r3, [r2, #0]
 8012894:	b933      	cbnz	r3, 80128a4 <_free_r+0x30>
 8012896:	6063      	str	r3, [r4, #4]
 8012898:	6014      	str	r4, [r2, #0]
 801289a:	b003      	add	sp, #12
 801289c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128a0:	f000 bab0 	b.w	8012e04 <__malloc_unlock>
 80128a4:	42a3      	cmp	r3, r4
 80128a6:	d908      	bls.n	80128ba <_free_r+0x46>
 80128a8:	6825      	ldr	r5, [r4, #0]
 80128aa:	1961      	adds	r1, r4, r5
 80128ac:	428b      	cmp	r3, r1
 80128ae:	bf01      	itttt	eq
 80128b0:	6819      	ldreq	r1, [r3, #0]
 80128b2:	685b      	ldreq	r3, [r3, #4]
 80128b4:	1949      	addeq	r1, r1, r5
 80128b6:	6021      	streq	r1, [r4, #0]
 80128b8:	e7ed      	b.n	8012896 <_free_r+0x22>
 80128ba:	461a      	mov	r2, r3
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	b10b      	cbz	r3, 80128c4 <_free_r+0x50>
 80128c0:	42a3      	cmp	r3, r4
 80128c2:	d9fa      	bls.n	80128ba <_free_r+0x46>
 80128c4:	6811      	ldr	r1, [r2, #0]
 80128c6:	1855      	adds	r5, r2, r1
 80128c8:	42a5      	cmp	r5, r4
 80128ca:	d10b      	bne.n	80128e4 <_free_r+0x70>
 80128cc:	6824      	ldr	r4, [r4, #0]
 80128ce:	4421      	add	r1, r4
 80128d0:	1854      	adds	r4, r2, r1
 80128d2:	42a3      	cmp	r3, r4
 80128d4:	6011      	str	r1, [r2, #0]
 80128d6:	d1e0      	bne.n	801289a <_free_r+0x26>
 80128d8:	681c      	ldr	r4, [r3, #0]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	6053      	str	r3, [r2, #4]
 80128de:	4421      	add	r1, r4
 80128e0:	6011      	str	r1, [r2, #0]
 80128e2:	e7da      	b.n	801289a <_free_r+0x26>
 80128e4:	d902      	bls.n	80128ec <_free_r+0x78>
 80128e6:	230c      	movs	r3, #12
 80128e8:	6003      	str	r3, [r0, #0]
 80128ea:	e7d6      	b.n	801289a <_free_r+0x26>
 80128ec:	6825      	ldr	r5, [r4, #0]
 80128ee:	1961      	adds	r1, r4, r5
 80128f0:	428b      	cmp	r3, r1
 80128f2:	bf04      	itt	eq
 80128f4:	6819      	ldreq	r1, [r3, #0]
 80128f6:	685b      	ldreq	r3, [r3, #4]
 80128f8:	6063      	str	r3, [r4, #4]
 80128fa:	bf04      	itt	eq
 80128fc:	1949      	addeq	r1, r1, r5
 80128fe:	6021      	streq	r1, [r4, #0]
 8012900:	6054      	str	r4, [r2, #4]
 8012902:	e7ca      	b.n	801289a <_free_r+0x26>
 8012904:	b003      	add	sp, #12
 8012906:	bd30      	pop	{r4, r5, pc}
 8012908:	200079a0 	.word	0x200079a0

0801290c <sbrk_aligned>:
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	4e0e      	ldr	r6, [pc, #56]	; (8012948 <sbrk_aligned+0x3c>)
 8012910:	460c      	mov	r4, r1
 8012912:	6831      	ldr	r1, [r6, #0]
 8012914:	4605      	mov	r5, r0
 8012916:	b911      	cbnz	r1, 801291e <sbrk_aligned+0x12>
 8012918:	f000 f9f2 	bl	8012d00 <_sbrk_r>
 801291c:	6030      	str	r0, [r6, #0]
 801291e:	4621      	mov	r1, r4
 8012920:	4628      	mov	r0, r5
 8012922:	f000 f9ed 	bl	8012d00 <_sbrk_r>
 8012926:	1c43      	adds	r3, r0, #1
 8012928:	d00a      	beq.n	8012940 <sbrk_aligned+0x34>
 801292a:	1cc4      	adds	r4, r0, #3
 801292c:	f024 0403 	bic.w	r4, r4, #3
 8012930:	42a0      	cmp	r0, r4
 8012932:	d007      	beq.n	8012944 <sbrk_aligned+0x38>
 8012934:	1a21      	subs	r1, r4, r0
 8012936:	4628      	mov	r0, r5
 8012938:	f000 f9e2 	bl	8012d00 <_sbrk_r>
 801293c:	3001      	adds	r0, #1
 801293e:	d101      	bne.n	8012944 <sbrk_aligned+0x38>
 8012940:	f04f 34ff 	mov.w	r4, #4294967295
 8012944:	4620      	mov	r0, r4
 8012946:	bd70      	pop	{r4, r5, r6, pc}
 8012948:	200079a4 	.word	0x200079a4

0801294c <_malloc_r>:
 801294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012950:	1ccd      	adds	r5, r1, #3
 8012952:	f025 0503 	bic.w	r5, r5, #3
 8012956:	3508      	adds	r5, #8
 8012958:	2d0c      	cmp	r5, #12
 801295a:	bf38      	it	cc
 801295c:	250c      	movcc	r5, #12
 801295e:	2d00      	cmp	r5, #0
 8012960:	4607      	mov	r7, r0
 8012962:	db01      	blt.n	8012968 <_malloc_r+0x1c>
 8012964:	42a9      	cmp	r1, r5
 8012966:	d905      	bls.n	8012974 <_malloc_r+0x28>
 8012968:	230c      	movs	r3, #12
 801296a:	603b      	str	r3, [r7, #0]
 801296c:	2600      	movs	r6, #0
 801296e:	4630      	mov	r0, r6
 8012970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012974:	4e2e      	ldr	r6, [pc, #184]	; (8012a30 <_malloc_r+0xe4>)
 8012976:	f000 fa3f 	bl	8012df8 <__malloc_lock>
 801297a:	6833      	ldr	r3, [r6, #0]
 801297c:	461c      	mov	r4, r3
 801297e:	bb34      	cbnz	r4, 80129ce <_malloc_r+0x82>
 8012980:	4629      	mov	r1, r5
 8012982:	4638      	mov	r0, r7
 8012984:	f7ff ffc2 	bl	801290c <sbrk_aligned>
 8012988:	1c43      	adds	r3, r0, #1
 801298a:	4604      	mov	r4, r0
 801298c:	d14d      	bne.n	8012a2a <_malloc_r+0xde>
 801298e:	6834      	ldr	r4, [r6, #0]
 8012990:	4626      	mov	r6, r4
 8012992:	2e00      	cmp	r6, #0
 8012994:	d140      	bne.n	8012a18 <_malloc_r+0xcc>
 8012996:	6823      	ldr	r3, [r4, #0]
 8012998:	4631      	mov	r1, r6
 801299a:	4638      	mov	r0, r7
 801299c:	eb04 0803 	add.w	r8, r4, r3
 80129a0:	f000 f9ae 	bl	8012d00 <_sbrk_r>
 80129a4:	4580      	cmp	r8, r0
 80129a6:	d13a      	bne.n	8012a1e <_malloc_r+0xd2>
 80129a8:	6821      	ldr	r1, [r4, #0]
 80129aa:	3503      	adds	r5, #3
 80129ac:	1a6d      	subs	r5, r5, r1
 80129ae:	f025 0503 	bic.w	r5, r5, #3
 80129b2:	3508      	adds	r5, #8
 80129b4:	2d0c      	cmp	r5, #12
 80129b6:	bf38      	it	cc
 80129b8:	250c      	movcc	r5, #12
 80129ba:	4629      	mov	r1, r5
 80129bc:	4638      	mov	r0, r7
 80129be:	f7ff ffa5 	bl	801290c <sbrk_aligned>
 80129c2:	3001      	adds	r0, #1
 80129c4:	d02b      	beq.n	8012a1e <_malloc_r+0xd2>
 80129c6:	6823      	ldr	r3, [r4, #0]
 80129c8:	442b      	add	r3, r5
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	e00e      	b.n	80129ec <_malloc_r+0xa0>
 80129ce:	6822      	ldr	r2, [r4, #0]
 80129d0:	1b52      	subs	r2, r2, r5
 80129d2:	d41e      	bmi.n	8012a12 <_malloc_r+0xc6>
 80129d4:	2a0b      	cmp	r2, #11
 80129d6:	d916      	bls.n	8012a06 <_malloc_r+0xba>
 80129d8:	1961      	adds	r1, r4, r5
 80129da:	42a3      	cmp	r3, r4
 80129dc:	6025      	str	r5, [r4, #0]
 80129de:	bf18      	it	ne
 80129e0:	6059      	strne	r1, [r3, #4]
 80129e2:	6863      	ldr	r3, [r4, #4]
 80129e4:	bf08      	it	eq
 80129e6:	6031      	streq	r1, [r6, #0]
 80129e8:	5162      	str	r2, [r4, r5]
 80129ea:	604b      	str	r3, [r1, #4]
 80129ec:	4638      	mov	r0, r7
 80129ee:	f104 060b 	add.w	r6, r4, #11
 80129f2:	f000 fa07 	bl	8012e04 <__malloc_unlock>
 80129f6:	f026 0607 	bic.w	r6, r6, #7
 80129fa:	1d23      	adds	r3, r4, #4
 80129fc:	1af2      	subs	r2, r6, r3
 80129fe:	d0b6      	beq.n	801296e <_malloc_r+0x22>
 8012a00:	1b9b      	subs	r3, r3, r6
 8012a02:	50a3      	str	r3, [r4, r2]
 8012a04:	e7b3      	b.n	801296e <_malloc_r+0x22>
 8012a06:	6862      	ldr	r2, [r4, #4]
 8012a08:	42a3      	cmp	r3, r4
 8012a0a:	bf0c      	ite	eq
 8012a0c:	6032      	streq	r2, [r6, #0]
 8012a0e:	605a      	strne	r2, [r3, #4]
 8012a10:	e7ec      	b.n	80129ec <_malloc_r+0xa0>
 8012a12:	4623      	mov	r3, r4
 8012a14:	6864      	ldr	r4, [r4, #4]
 8012a16:	e7b2      	b.n	801297e <_malloc_r+0x32>
 8012a18:	4634      	mov	r4, r6
 8012a1a:	6876      	ldr	r6, [r6, #4]
 8012a1c:	e7b9      	b.n	8012992 <_malloc_r+0x46>
 8012a1e:	230c      	movs	r3, #12
 8012a20:	603b      	str	r3, [r7, #0]
 8012a22:	4638      	mov	r0, r7
 8012a24:	f000 f9ee 	bl	8012e04 <__malloc_unlock>
 8012a28:	e7a1      	b.n	801296e <_malloc_r+0x22>
 8012a2a:	6025      	str	r5, [r4, #0]
 8012a2c:	e7de      	b.n	80129ec <_malloc_r+0xa0>
 8012a2e:	bf00      	nop
 8012a30:	200079a0 	.word	0x200079a0

08012a34 <__ssputs_r>:
 8012a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a38:	688e      	ldr	r6, [r1, #8]
 8012a3a:	429e      	cmp	r6, r3
 8012a3c:	4682      	mov	sl, r0
 8012a3e:	460c      	mov	r4, r1
 8012a40:	4690      	mov	r8, r2
 8012a42:	461f      	mov	r7, r3
 8012a44:	d838      	bhi.n	8012ab8 <__ssputs_r+0x84>
 8012a46:	898a      	ldrh	r2, [r1, #12]
 8012a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a4c:	d032      	beq.n	8012ab4 <__ssputs_r+0x80>
 8012a4e:	6825      	ldr	r5, [r4, #0]
 8012a50:	6909      	ldr	r1, [r1, #16]
 8012a52:	eba5 0901 	sub.w	r9, r5, r1
 8012a56:	6965      	ldr	r5, [r4, #20]
 8012a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a60:	3301      	adds	r3, #1
 8012a62:	444b      	add	r3, r9
 8012a64:	106d      	asrs	r5, r5, #1
 8012a66:	429d      	cmp	r5, r3
 8012a68:	bf38      	it	cc
 8012a6a:	461d      	movcc	r5, r3
 8012a6c:	0553      	lsls	r3, r2, #21
 8012a6e:	d531      	bpl.n	8012ad4 <__ssputs_r+0xa0>
 8012a70:	4629      	mov	r1, r5
 8012a72:	f7ff ff6b 	bl	801294c <_malloc_r>
 8012a76:	4606      	mov	r6, r0
 8012a78:	b950      	cbnz	r0, 8012a90 <__ssputs_r+0x5c>
 8012a7a:	230c      	movs	r3, #12
 8012a7c:	f8ca 3000 	str.w	r3, [sl]
 8012a80:	89a3      	ldrh	r3, [r4, #12]
 8012a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a86:	81a3      	strh	r3, [r4, #12]
 8012a88:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a90:	6921      	ldr	r1, [r4, #16]
 8012a92:	464a      	mov	r2, r9
 8012a94:	f7ff fa08 	bl	8011ea8 <memcpy>
 8012a98:	89a3      	ldrh	r3, [r4, #12]
 8012a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012aa2:	81a3      	strh	r3, [r4, #12]
 8012aa4:	6126      	str	r6, [r4, #16]
 8012aa6:	6165      	str	r5, [r4, #20]
 8012aa8:	444e      	add	r6, r9
 8012aaa:	eba5 0509 	sub.w	r5, r5, r9
 8012aae:	6026      	str	r6, [r4, #0]
 8012ab0:	60a5      	str	r5, [r4, #8]
 8012ab2:	463e      	mov	r6, r7
 8012ab4:	42be      	cmp	r6, r7
 8012ab6:	d900      	bls.n	8012aba <__ssputs_r+0x86>
 8012ab8:	463e      	mov	r6, r7
 8012aba:	6820      	ldr	r0, [r4, #0]
 8012abc:	4632      	mov	r2, r6
 8012abe:	4641      	mov	r1, r8
 8012ac0:	f000 f980 	bl	8012dc4 <memmove>
 8012ac4:	68a3      	ldr	r3, [r4, #8]
 8012ac6:	1b9b      	subs	r3, r3, r6
 8012ac8:	60a3      	str	r3, [r4, #8]
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	4433      	add	r3, r6
 8012ace:	6023      	str	r3, [r4, #0]
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	e7db      	b.n	8012a8c <__ssputs_r+0x58>
 8012ad4:	462a      	mov	r2, r5
 8012ad6:	f000 f99b 	bl	8012e10 <_realloc_r>
 8012ada:	4606      	mov	r6, r0
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d1e1      	bne.n	8012aa4 <__ssputs_r+0x70>
 8012ae0:	6921      	ldr	r1, [r4, #16]
 8012ae2:	4650      	mov	r0, sl
 8012ae4:	f7ff fec6 	bl	8012874 <_free_r>
 8012ae8:	e7c7      	b.n	8012a7a <__ssputs_r+0x46>
	...

08012aec <_svfiprintf_r>:
 8012aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af0:	4698      	mov	r8, r3
 8012af2:	898b      	ldrh	r3, [r1, #12]
 8012af4:	061b      	lsls	r3, r3, #24
 8012af6:	b09d      	sub	sp, #116	; 0x74
 8012af8:	4607      	mov	r7, r0
 8012afa:	460d      	mov	r5, r1
 8012afc:	4614      	mov	r4, r2
 8012afe:	d50e      	bpl.n	8012b1e <_svfiprintf_r+0x32>
 8012b00:	690b      	ldr	r3, [r1, #16]
 8012b02:	b963      	cbnz	r3, 8012b1e <_svfiprintf_r+0x32>
 8012b04:	2140      	movs	r1, #64	; 0x40
 8012b06:	f7ff ff21 	bl	801294c <_malloc_r>
 8012b0a:	6028      	str	r0, [r5, #0]
 8012b0c:	6128      	str	r0, [r5, #16]
 8012b0e:	b920      	cbnz	r0, 8012b1a <_svfiprintf_r+0x2e>
 8012b10:	230c      	movs	r3, #12
 8012b12:	603b      	str	r3, [r7, #0]
 8012b14:	f04f 30ff 	mov.w	r0, #4294967295
 8012b18:	e0d1      	b.n	8012cbe <_svfiprintf_r+0x1d2>
 8012b1a:	2340      	movs	r3, #64	; 0x40
 8012b1c:	616b      	str	r3, [r5, #20]
 8012b1e:	2300      	movs	r3, #0
 8012b20:	9309      	str	r3, [sp, #36]	; 0x24
 8012b22:	2320      	movs	r3, #32
 8012b24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b2c:	2330      	movs	r3, #48	; 0x30
 8012b2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012cd8 <_svfiprintf_r+0x1ec>
 8012b32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b36:	f04f 0901 	mov.w	r9, #1
 8012b3a:	4623      	mov	r3, r4
 8012b3c:	469a      	mov	sl, r3
 8012b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b42:	b10a      	cbz	r2, 8012b48 <_svfiprintf_r+0x5c>
 8012b44:	2a25      	cmp	r2, #37	; 0x25
 8012b46:	d1f9      	bne.n	8012b3c <_svfiprintf_r+0x50>
 8012b48:	ebba 0b04 	subs.w	fp, sl, r4
 8012b4c:	d00b      	beq.n	8012b66 <_svfiprintf_r+0x7a>
 8012b4e:	465b      	mov	r3, fp
 8012b50:	4622      	mov	r2, r4
 8012b52:	4629      	mov	r1, r5
 8012b54:	4638      	mov	r0, r7
 8012b56:	f7ff ff6d 	bl	8012a34 <__ssputs_r>
 8012b5a:	3001      	adds	r0, #1
 8012b5c:	f000 80aa 	beq.w	8012cb4 <_svfiprintf_r+0x1c8>
 8012b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b62:	445a      	add	r2, fp
 8012b64:	9209      	str	r2, [sp, #36]	; 0x24
 8012b66:	f89a 3000 	ldrb.w	r3, [sl]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f000 80a2 	beq.w	8012cb4 <_svfiprintf_r+0x1c8>
 8012b70:	2300      	movs	r3, #0
 8012b72:	f04f 32ff 	mov.w	r2, #4294967295
 8012b76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b7a:	f10a 0a01 	add.w	sl, sl, #1
 8012b7e:	9304      	str	r3, [sp, #16]
 8012b80:	9307      	str	r3, [sp, #28]
 8012b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b86:	931a      	str	r3, [sp, #104]	; 0x68
 8012b88:	4654      	mov	r4, sl
 8012b8a:	2205      	movs	r2, #5
 8012b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b90:	4851      	ldr	r0, [pc, #324]	; (8012cd8 <_svfiprintf_r+0x1ec>)
 8012b92:	f7ed fb25 	bl	80001e0 <memchr>
 8012b96:	9a04      	ldr	r2, [sp, #16]
 8012b98:	b9d8      	cbnz	r0, 8012bd2 <_svfiprintf_r+0xe6>
 8012b9a:	06d0      	lsls	r0, r2, #27
 8012b9c:	bf44      	itt	mi
 8012b9e:	2320      	movmi	r3, #32
 8012ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ba4:	0711      	lsls	r1, r2, #28
 8012ba6:	bf44      	itt	mi
 8012ba8:	232b      	movmi	r3, #43	; 0x2b
 8012baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bae:	f89a 3000 	ldrb.w	r3, [sl]
 8012bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8012bb4:	d015      	beq.n	8012be2 <_svfiprintf_r+0xf6>
 8012bb6:	9a07      	ldr	r2, [sp, #28]
 8012bb8:	4654      	mov	r4, sl
 8012bba:	2000      	movs	r0, #0
 8012bbc:	f04f 0c0a 	mov.w	ip, #10
 8012bc0:	4621      	mov	r1, r4
 8012bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bc6:	3b30      	subs	r3, #48	; 0x30
 8012bc8:	2b09      	cmp	r3, #9
 8012bca:	d94e      	bls.n	8012c6a <_svfiprintf_r+0x17e>
 8012bcc:	b1b0      	cbz	r0, 8012bfc <_svfiprintf_r+0x110>
 8012bce:	9207      	str	r2, [sp, #28]
 8012bd0:	e014      	b.n	8012bfc <_svfiprintf_r+0x110>
 8012bd2:	eba0 0308 	sub.w	r3, r0, r8
 8012bd6:	fa09 f303 	lsl.w	r3, r9, r3
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	9304      	str	r3, [sp, #16]
 8012bde:	46a2      	mov	sl, r4
 8012be0:	e7d2      	b.n	8012b88 <_svfiprintf_r+0x9c>
 8012be2:	9b03      	ldr	r3, [sp, #12]
 8012be4:	1d19      	adds	r1, r3, #4
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	9103      	str	r1, [sp, #12]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	bfbb      	ittet	lt
 8012bee:	425b      	neglt	r3, r3
 8012bf0:	f042 0202 	orrlt.w	r2, r2, #2
 8012bf4:	9307      	strge	r3, [sp, #28]
 8012bf6:	9307      	strlt	r3, [sp, #28]
 8012bf8:	bfb8      	it	lt
 8012bfa:	9204      	strlt	r2, [sp, #16]
 8012bfc:	7823      	ldrb	r3, [r4, #0]
 8012bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8012c00:	d10c      	bne.n	8012c1c <_svfiprintf_r+0x130>
 8012c02:	7863      	ldrb	r3, [r4, #1]
 8012c04:	2b2a      	cmp	r3, #42	; 0x2a
 8012c06:	d135      	bne.n	8012c74 <_svfiprintf_r+0x188>
 8012c08:	9b03      	ldr	r3, [sp, #12]
 8012c0a:	1d1a      	adds	r2, r3, #4
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	9203      	str	r2, [sp, #12]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	bfb8      	it	lt
 8012c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c18:	3402      	adds	r4, #2
 8012c1a:	9305      	str	r3, [sp, #20]
 8012c1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012ce8 <_svfiprintf_r+0x1fc>
 8012c20:	7821      	ldrb	r1, [r4, #0]
 8012c22:	2203      	movs	r2, #3
 8012c24:	4650      	mov	r0, sl
 8012c26:	f7ed fadb 	bl	80001e0 <memchr>
 8012c2a:	b140      	cbz	r0, 8012c3e <_svfiprintf_r+0x152>
 8012c2c:	2340      	movs	r3, #64	; 0x40
 8012c2e:	eba0 000a 	sub.w	r0, r0, sl
 8012c32:	fa03 f000 	lsl.w	r0, r3, r0
 8012c36:	9b04      	ldr	r3, [sp, #16]
 8012c38:	4303      	orrs	r3, r0
 8012c3a:	3401      	adds	r4, #1
 8012c3c:	9304      	str	r3, [sp, #16]
 8012c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c42:	4826      	ldr	r0, [pc, #152]	; (8012cdc <_svfiprintf_r+0x1f0>)
 8012c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c48:	2206      	movs	r2, #6
 8012c4a:	f7ed fac9 	bl	80001e0 <memchr>
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	d038      	beq.n	8012cc4 <_svfiprintf_r+0x1d8>
 8012c52:	4b23      	ldr	r3, [pc, #140]	; (8012ce0 <_svfiprintf_r+0x1f4>)
 8012c54:	bb1b      	cbnz	r3, 8012c9e <_svfiprintf_r+0x1b2>
 8012c56:	9b03      	ldr	r3, [sp, #12]
 8012c58:	3307      	adds	r3, #7
 8012c5a:	f023 0307 	bic.w	r3, r3, #7
 8012c5e:	3308      	adds	r3, #8
 8012c60:	9303      	str	r3, [sp, #12]
 8012c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c64:	4433      	add	r3, r6
 8012c66:	9309      	str	r3, [sp, #36]	; 0x24
 8012c68:	e767      	b.n	8012b3a <_svfiprintf_r+0x4e>
 8012c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c6e:	460c      	mov	r4, r1
 8012c70:	2001      	movs	r0, #1
 8012c72:	e7a5      	b.n	8012bc0 <_svfiprintf_r+0xd4>
 8012c74:	2300      	movs	r3, #0
 8012c76:	3401      	adds	r4, #1
 8012c78:	9305      	str	r3, [sp, #20]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	f04f 0c0a 	mov.w	ip, #10
 8012c80:	4620      	mov	r0, r4
 8012c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c86:	3a30      	subs	r2, #48	; 0x30
 8012c88:	2a09      	cmp	r2, #9
 8012c8a:	d903      	bls.n	8012c94 <_svfiprintf_r+0x1a8>
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d0c5      	beq.n	8012c1c <_svfiprintf_r+0x130>
 8012c90:	9105      	str	r1, [sp, #20]
 8012c92:	e7c3      	b.n	8012c1c <_svfiprintf_r+0x130>
 8012c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c98:	4604      	mov	r4, r0
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e7f0      	b.n	8012c80 <_svfiprintf_r+0x194>
 8012c9e:	ab03      	add	r3, sp, #12
 8012ca0:	9300      	str	r3, [sp, #0]
 8012ca2:	462a      	mov	r2, r5
 8012ca4:	4b0f      	ldr	r3, [pc, #60]	; (8012ce4 <_svfiprintf_r+0x1f8>)
 8012ca6:	a904      	add	r1, sp, #16
 8012ca8:	4638      	mov	r0, r7
 8012caa:	f7fc fa47 	bl	800f13c <_printf_float>
 8012cae:	1c42      	adds	r2, r0, #1
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	d1d6      	bne.n	8012c62 <_svfiprintf_r+0x176>
 8012cb4:	89ab      	ldrh	r3, [r5, #12]
 8012cb6:	065b      	lsls	r3, r3, #25
 8012cb8:	f53f af2c 	bmi.w	8012b14 <_svfiprintf_r+0x28>
 8012cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cbe:	b01d      	add	sp, #116	; 0x74
 8012cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc4:	ab03      	add	r3, sp, #12
 8012cc6:	9300      	str	r3, [sp, #0]
 8012cc8:	462a      	mov	r2, r5
 8012cca:	4b06      	ldr	r3, [pc, #24]	; (8012ce4 <_svfiprintf_r+0x1f8>)
 8012ccc:	a904      	add	r1, sp, #16
 8012cce:	4638      	mov	r0, r7
 8012cd0:	f7fc fcd8 	bl	800f684 <_printf_i>
 8012cd4:	e7eb      	b.n	8012cae <_svfiprintf_r+0x1c2>
 8012cd6:	bf00      	nop
 8012cd8:	08017a14 	.word	0x08017a14
 8012cdc:	08017a1e 	.word	0x08017a1e
 8012ce0:	0800f13d 	.word	0x0800f13d
 8012ce4:	08012a35 	.word	0x08012a35
 8012ce8:	08017a1a 	.word	0x08017a1a
 8012cec:	00000000 	.word	0x00000000

08012cf0 <nan>:
 8012cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012cf8 <nan+0x8>
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	00000000 	.word	0x00000000
 8012cfc:	7ff80000 	.word	0x7ff80000

08012d00 <_sbrk_r>:
 8012d00:	b538      	push	{r3, r4, r5, lr}
 8012d02:	4d06      	ldr	r5, [pc, #24]	; (8012d1c <_sbrk_r+0x1c>)
 8012d04:	2300      	movs	r3, #0
 8012d06:	4604      	mov	r4, r0
 8012d08:	4608      	mov	r0, r1
 8012d0a:	602b      	str	r3, [r5, #0]
 8012d0c:	f7ef fa76 	bl	80021fc <_sbrk>
 8012d10:	1c43      	adds	r3, r0, #1
 8012d12:	d102      	bne.n	8012d1a <_sbrk_r+0x1a>
 8012d14:	682b      	ldr	r3, [r5, #0]
 8012d16:	b103      	cbz	r3, 8012d1a <_sbrk_r+0x1a>
 8012d18:	6023      	str	r3, [r4, #0]
 8012d1a:	bd38      	pop	{r3, r4, r5, pc}
 8012d1c:	200079a8 	.word	0x200079a8

08012d20 <strncmp>:
 8012d20:	b510      	push	{r4, lr}
 8012d22:	b17a      	cbz	r2, 8012d44 <strncmp+0x24>
 8012d24:	4603      	mov	r3, r0
 8012d26:	3901      	subs	r1, #1
 8012d28:	1884      	adds	r4, r0, r2
 8012d2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012d2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012d32:	4290      	cmp	r0, r2
 8012d34:	d101      	bne.n	8012d3a <strncmp+0x1a>
 8012d36:	42a3      	cmp	r3, r4
 8012d38:	d101      	bne.n	8012d3e <strncmp+0x1e>
 8012d3a:	1a80      	subs	r0, r0, r2
 8012d3c:	bd10      	pop	{r4, pc}
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d1f3      	bne.n	8012d2a <strncmp+0xa>
 8012d42:	e7fa      	b.n	8012d3a <strncmp+0x1a>
 8012d44:	4610      	mov	r0, r2
 8012d46:	e7f9      	b.n	8012d3c <strncmp+0x1c>

08012d48 <__ascii_wctomb>:
 8012d48:	b149      	cbz	r1, 8012d5e <__ascii_wctomb+0x16>
 8012d4a:	2aff      	cmp	r2, #255	; 0xff
 8012d4c:	bf85      	ittet	hi
 8012d4e:	238a      	movhi	r3, #138	; 0x8a
 8012d50:	6003      	strhi	r3, [r0, #0]
 8012d52:	700a      	strbls	r2, [r1, #0]
 8012d54:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d58:	bf98      	it	ls
 8012d5a:	2001      	movls	r0, #1
 8012d5c:	4770      	bx	lr
 8012d5e:	4608      	mov	r0, r1
 8012d60:	4770      	bx	lr
	...

08012d64 <__assert_func>:
 8012d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d66:	4614      	mov	r4, r2
 8012d68:	461a      	mov	r2, r3
 8012d6a:	4b09      	ldr	r3, [pc, #36]	; (8012d90 <__assert_func+0x2c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4605      	mov	r5, r0
 8012d70:	68d8      	ldr	r0, [r3, #12]
 8012d72:	b14c      	cbz	r4, 8012d88 <__assert_func+0x24>
 8012d74:	4b07      	ldr	r3, [pc, #28]	; (8012d94 <__assert_func+0x30>)
 8012d76:	9100      	str	r1, [sp, #0]
 8012d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d7c:	4906      	ldr	r1, [pc, #24]	; (8012d98 <__assert_func+0x34>)
 8012d7e:	462b      	mov	r3, r5
 8012d80:	f000 f80e 	bl	8012da0 <fiprintf>
 8012d84:	f000 fa8c 	bl	80132a0 <abort>
 8012d88:	4b04      	ldr	r3, [pc, #16]	; (8012d9c <__assert_func+0x38>)
 8012d8a:	461c      	mov	r4, r3
 8012d8c:	e7f3      	b.n	8012d76 <__assert_func+0x12>
 8012d8e:	bf00      	nop
 8012d90:	200001fc 	.word	0x200001fc
 8012d94:	08017a25 	.word	0x08017a25
 8012d98:	08017a32 	.word	0x08017a32
 8012d9c:	08017a60 	.word	0x08017a60

08012da0 <fiprintf>:
 8012da0:	b40e      	push	{r1, r2, r3}
 8012da2:	b503      	push	{r0, r1, lr}
 8012da4:	4601      	mov	r1, r0
 8012da6:	ab03      	add	r3, sp, #12
 8012da8:	4805      	ldr	r0, [pc, #20]	; (8012dc0 <fiprintf+0x20>)
 8012daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dae:	6800      	ldr	r0, [r0, #0]
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	f000 f885 	bl	8012ec0 <_vfiprintf_r>
 8012db6:	b002      	add	sp, #8
 8012db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dbc:	b003      	add	sp, #12
 8012dbe:	4770      	bx	lr
 8012dc0:	200001fc 	.word	0x200001fc

08012dc4 <memmove>:
 8012dc4:	4288      	cmp	r0, r1
 8012dc6:	b510      	push	{r4, lr}
 8012dc8:	eb01 0402 	add.w	r4, r1, r2
 8012dcc:	d902      	bls.n	8012dd4 <memmove+0x10>
 8012dce:	4284      	cmp	r4, r0
 8012dd0:	4623      	mov	r3, r4
 8012dd2:	d807      	bhi.n	8012de4 <memmove+0x20>
 8012dd4:	1e43      	subs	r3, r0, #1
 8012dd6:	42a1      	cmp	r1, r4
 8012dd8:	d008      	beq.n	8012dec <memmove+0x28>
 8012dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012de2:	e7f8      	b.n	8012dd6 <memmove+0x12>
 8012de4:	4402      	add	r2, r0
 8012de6:	4601      	mov	r1, r0
 8012de8:	428a      	cmp	r2, r1
 8012dea:	d100      	bne.n	8012dee <memmove+0x2a>
 8012dec:	bd10      	pop	{r4, pc}
 8012dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012df6:	e7f7      	b.n	8012de8 <memmove+0x24>

08012df8 <__malloc_lock>:
 8012df8:	4801      	ldr	r0, [pc, #4]	; (8012e00 <__malloc_lock+0x8>)
 8012dfa:	f000 bc11 	b.w	8013620 <__retarget_lock_acquire_recursive>
 8012dfe:	bf00      	nop
 8012e00:	200079ac 	.word	0x200079ac

08012e04 <__malloc_unlock>:
 8012e04:	4801      	ldr	r0, [pc, #4]	; (8012e0c <__malloc_unlock+0x8>)
 8012e06:	f000 bc0c 	b.w	8013622 <__retarget_lock_release_recursive>
 8012e0a:	bf00      	nop
 8012e0c:	200079ac 	.word	0x200079ac

08012e10 <_realloc_r>:
 8012e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	4680      	mov	r8, r0
 8012e16:	4614      	mov	r4, r2
 8012e18:	460e      	mov	r6, r1
 8012e1a:	b921      	cbnz	r1, 8012e26 <_realloc_r+0x16>
 8012e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e20:	4611      	mov	r1, r2
 8012e22:	f7ff bd93 	b.w	801294c <_malloc_r>
 8012e26:	b92a      	cbnz	r2, 8012e34 <_realloc_r+0x24>
 8012e28:	f7ff fd24 	bl	8012874 <_free_r>
 8012e2c:	4625      	mov	r5, r4
 8012e2e:	4628      	mov	r0, r5
 8012e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e34:	f000 fc5c 	bl	80136f0 <_malloc_usable_size_r>
 8012e38:	4284      	cmp	r4, r0
 8012e3a:	4607      	mov	r7, r0
 8012e3c:	d802      	bhi.n	8012e44 <_realloc_r+0x34>
 8012e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012e42:	d812      	bhi.n	8012e6a <_realloc_r+0x5a>
 8012e44:	4621      	mov	r1, r4
 8012e46:	4640      	mov	r0, r8
 8012e48:	f7ff fd80 	bl	801294c <_malloc_r>
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d0ed      	beq.n	8012e2e <_realloc_r+0x1e>
 8012e52:	42bc      	cmp	r4, r7
 8012e54:	4622      	mov	r2, r4
 8012e56:	4631      	mov	r1, r6
 8012e58:	bf28      	it	cs
 8012e5a:	463a      	movcs	r2, r7
 8012e5c:	f7ff f824 	bl	8011ea8 <memcpy>
 8012e60:	4631      	mov	r1, r6
 8012e62:	4640      	mov	r0, r8
 8012e64:	f7ff fd06 	bl	8012874 <_free_r>
 8012e68:	e7e1      	b.n	8012e2e <_realloc_r+0x1e>
 8012e6a:	4635      	mov	r5, r6
 8012e6c:	e7df      	b.n	8012e2e <_realloc_r+0x1e>

08012e6e <__sfputc_r>:
 8012e6e:	6893      	ldr	r3, [r2, #8]
 8012e70:	3b01      	subs	r3, #1
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	b410      	push	{r4}
 8012e76:	6093      	str	r3, [r2, #8]
 8012e78:	da08      	bge.n	8012e8c <__sfputc_r+0x1e>
 8012e7a:	6994      	ldr	r4, [r2, #24]
 8012e7c:	42a3      	cmp	r3, r4
 8012e7e:	db01      	blt.n	8012e84 <__sfputc_r+0x16>
 8012e80:	290a      	cmp	r1, #10
 8012e82:	d103      	bne.n	8012e8c <__sfputc_r+0x1e>
 8012e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e88:	f000 b94a 	b.w	8013120 <__swbuf_r>
 8012e8c:	6813      	ldr	r3, [r2, #0]
 8012e8e:	1c58      	adds	r0, r3, #1
 8012e90:	6010      	str	r0, [r2, #0]
 8012e92:	7019      	strb	r1, [r3, #0]
 8012e94:	4608      	mov	r0, r1
 8012e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <__sfputs_r>:
 8012e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	460f      	mov	r7, r1
 8012ea2:	4614      	mov	r4, r2
 8012ea4:	18d5      	adds	r5, r2, r3
 8012ea6:	42ac      	cmp	r4, r5
 8012ea8:	d101      	bne.n	8012eae <__sfputs_r+0x12>
 8012eaa:	2000      	movs	r0, #0
 8012eac:	e007      	b.n	8012ebe <__sfputs_r+0x22>
 8012eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eb2:	463a      	mov	r2, r7
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f7ff ffda 	bl	8012e6e <__sfputc_r>
 8012eba:	1c43      	adds	r3, r0, #1
 8012ebc:	d1f3      	bne.n	8012ea6 <__sfputs_r+0xa>
 8012ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ec0 <_vfiprintf_r>:
 8012ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec4:	460d      	mov	r5, r1
 8012ec6:	b09d      	sub	sp, #116	; 0x74
 8012ec8:	4614      	mov	r4, r2
 8012eca:	4698      	mov	r8, r3
 8012ecc:	4606      	mov	r6, r0
 8012ece:	b118      	cbz	r0, 8012ed8 <_vfiprintf_r+0x18>
 8012ed0:	6983      	ldr	r3, [r0, #24]
 8012ed2:	b90b      	cbnz	r3, 8012ed8 <_vfiprintf_r+0x18>
 8012ed4:	f000 fb06 	bl	80134e4 <__sinit>
 8012ed8:	4b89      	ldr	r3, [pc, #548]	; (8013100 <_vfiprintf_r+0x240>)
 8012eda:	429d      	cmp	r5, r3
 8012edc:	d11b      	bne.n	8012f16 <_vfiprintf_r+0x56>
 8012ede:	6875      	ldr	r5, [r6, #4]
 8012ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ee2:	07d9      	lsls	r1, r3, #31
 8012ee4:	d405      	bmi.n	8012ef2 <_vfiprintf_r+0x32>
 8012ee6:	89ab      	ldrh	r3, [r5, #12]
 8012ee8:	059a      	lsls	r2, r3, #22
 8012eea:	d402      	bmi.n	8012ef2 <_vfiprintf_r+0x32>
 8012eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012eee:	f000 fb97 	bl	8013620 <__retarget_lock_acquire_recursive>
 8012ef2:	89ab      	ldrh	r3, [r5, #12]
 8012ef4:	071b      	lsls	r3, r3, #28
 8012ef6:	d501      	bpl.n	8012efc <_vfiprintf_r+0x3c>
 8012ef8:	692b      	ldr	r3, [r5, #16]
 8012efa:	b9eb      	cbnz	r3, 8012f38 <_vfiprintf_r+0x78>
 8012efc:	4629      	mov	r1, r5
 8012efe:	4630      	mov	r0, r6
 8012f00:	f000 f960 	bl	80131c4 <__swsetup_r>
 8012f04:	b1c0      	cbz	r0, 8012f38 <_vfiprintf_r+0x78>
 8012f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f08:	07dc      	lsls	r4, r3, #31
 8012f0a:	d50e      	bpl.n	8012f2a <_vfiprintf_r+0x6a>
 8012f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f10:	b01d      	add	sp, #116	; 0x74
 8012f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f16:	4b7b      	ldr	r3, [pc, #492]	; (8013104 <_vfiprintf_r+0x244>)
 8012f18:	429d      	cmp	r5, r3
 8012f1a:	d101      	bne.n	8012f20 <_vfiprintf_r+0x60>
 8012f1c:	68b5      	ldr	r5, [r6, #8]
 8012f1e:	e7df      	b.n	8012ee0 <_vfiprintf_r+0x20>
 8012f20:	4b79      	ldr	r3, [pc, #484]	; (8013108 <_vfiprintf_r+0x248>)
 8012f22:	429d      	cmp	r5, r3
 8012f24:	bf08      	it	eq
 8012f26:	68f5      	ldreq	r5, [r6, #12]
 8012f28:	e7da      	b.n	8012ee0 <_vfiprintf_r+0x20>
 8012f2a:	89ab      	ldrh	r3, [r5, #12]
 8012f2c:	0598      	lsls	r0, r3, #22
 8012f2e:	d4ed      	bmi.n	8012f0c <_vfiprintf_r+0x4c>
 8012f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f32:	f000 fb76 	bl	8013622 <__retarget_lock_release_recursive>
 8012f36:	e7e9      	b.n	8012f0c <_vfiprintf_r+0x4c>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f3c:	2320      	movs	r3, #32
 8012f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f46:	2330      	movs	r3, #48	; 0x30
 8012f48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801310c <_vfiprintf_r+0x24c>
 8012f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f50:	f04f 0901 	mov.w	r9, #1
 8012f54:	4623      	mov	r3, r4
 8012f56:	469a      	mov	sl, r3
 8012f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f5c:	b10a      	cbz	r2, 8012f62 <_vfiprintf_r+0xa2>
 8012f5e:	2a25      	cmp	r2, #37	; 0x25
 8012f60:	d1f9      	bne.n	8012f56 <_vfiprintf_r+0x96>
 8012f62:	ebba 0b04 	subs.w	fp, sl, r4
 8012f66:	d00b      	beq.n	8012f80 <_vfiprintf_r+0xc0>
 8012f68:	465b      	mov	r3, fp
 8012f6a:	4622      	mov	r2, r4
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	4630      	mov	r0, r6
 8012f70:	f7ff ff94 	bl	8012e9c <__sfputs_r>
 8012f74:	3001      	adds	r0, #1
 8012f76:	f000 80aa 	beq.w	80130ce <_vfiprintf_r+0x20e>
 8012f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f7c:	445a      	add	r2, fp
 8012f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8012f80:	f89a 3000 	ldrb.w	r3, [sl]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 80a2 	beq.w	80130ce <_vfiprintf_r+0x20e>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f94:	f10a 0a01 	add.w	sl, sl, #1
 8012f98:	9304      	str	r3, [sp, #16]
 8012f9a:	9307      	str	r3, [sp, #28]
 8012f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8012fa2:	4654      	mov	r4, sl
 8012fa4:	2205      	movs	r2, #5
 8012fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012faa:	4858      	ldr	r0, [pc, #352]	; (801310c <_vfiprintf_r+0x24c>)
 8012fac:	f7ed f918 	bl	80001e0 <memchr>
 8012fb0:	9a04      	ldr	r2, [sp, #16]
 8012fb2:	b9d8      	cbnz	r0, 8012fec <_vfiprintf_r+0x12c>
 8012fb4:	06d1      	lsls	r1, r2, #27
 8012fb6:	bf44      	itt	mi
 8012fb8:	2320      	movmi	r3, #32
 8012fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fbe:	0713      	lsls	r3, r2, #28
 8012fc0:	bf44      	itt	mi
 8012fc2:	232b      	movmi	r3, #43	; 0x2b
 8012fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8012fce:	d015      	beq.n	8012ffc <_vfiprintf_r+0x13c>
 8012fd0:	9a07      	ldr	r2, [sp, #28]
 8012fd2:	4654      	mov	r4, sl
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	f04f 0c0a 	mov.w	ip, #10
 8012fda:	4621      	mov	r1, r4
 8012fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fe0:	3b30      	subs	r3, #48	; 0x30
 8012fe2:	2b09      	cmp	r3, #9
 8012fe4:	d94e      	bls.n	8013084 <_vfiprintf_r+0x1c4>
 8012fe6:	b1b0      	cbz	r0, 8013016 <_vfiprintf_r+0x156>
 8012fe8:	9207      	str	r2, [sp, #28]
 8012fea:	e014      	b.n	8013016 <_vfiprintf_r+0x156>
 8012fec:	eba0 0308 	sub.w	r3, r0, r8
 8012ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ff4:	4313      	orrs	r3, r2
 8012ff6:	9304      	str	r3, [sp, #16]
 8012ff8:	46a2      	mov	sl, r4
 8012ffa:	e7d2      	b.n	8012fa2 <_vfiprintf_r+0xe2>
 8012ffc:	9b03      	ldr	r3, [sp, #12]
 8012ffe:	1d19      	adds	r1, r3, #4
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	9103      	str	r1, [sp, #12]
 8013004:	2b00      	cmp	r3, #0
 8013006:	bfbb      	ittet	lt
 8013008:	425b      	neglt	r3, r3
 801300a:	f042 0202 	orrlt.w	r2, r2, #2
 801300e:	9307      	strge	r3, [sp, #28]
 8013010:	9307      	strlt	r3, [sp, #28]
 8013012:	bfb8      	it	lt
 8013014:	9204      	strlt	r2, [sp, #16]
 8013016:	7823      	ldrb	r3, [r4, #0]
 8013018:	2b2e      	cmp	r3, #46	; 0x2e
 801301a:	d10c      	bne.n	8013036 <_vfiprintf_r+0x176>
 801301c:	7863      	ldrb	r3, [r4, #1]
 801301e:	2b2a      	cmp	r3, #42	; 0x2a
 8013020:	d135      	bne.n	801308e <_vfiprintf_r+0x1ce>
 8013022:	9b03      	ldr	r3, [sp, #12]
 8013024:	1d1a      	adds	r2, r3, #4
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	9203      	str	r2, [sp, #12]
 801302a:	2b00      	cmp	r3, #0
 801302c:	bfb8      	it	lt
 801302e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013032:	3402      	adds	r4, #2
 8013034:	9305      	str	r3, [sp, #20]
 8013036:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801311c <_vfiprintf_r+0x25c>
 801303a:	7821      	ldrb	r1, [r4, #0]
 801303c:	2203      	movs	r2, #3
 801303e:	4650      	mov	r0, sl
 8013040:	f7ed f8ce 	bl	80001e0 <memchr>
 8013044:	b140      	cbz	r0, 8013058 <_vfiprintf_r+0x198>
 8013046:	2340      	movs	r3, #64	; 0x40
 8013048:	eba0 000a 	sub.w	r0, r0, sl
 801304c:	fa03 f000 	lsl.w	r0, r3, r0
 8013050:	9b04      	ldr	r3, [sp, #16]
 8013052:	4303      	orrs	r3, r0
 8013054:	3401      	adds	r4, #1
 8013056:	9304      	str	r3, [sp, #16]
 8013058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801305c:	482c      	ldr	r0, [pc, #176]	; (8013110 <_vfiprintf_r+0x250>)
 801305e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013062:	2206      	movs	r2, #6
 8013064:	f7ed f8bc 	bl	80001e0 <memchr>
 8013068:	2800      	cmp	r0, #0
 801306a:	d03f      	beq.n	80130ec <_vfiprintf_r+0x22c>
 801306c:	4b29      	ldr	r3, [pc, #164]	; (8013114 <_vfiprintf_r+0x254>)
 801306e:	bb1b      	cbnz	r3, 80130b8 <_vfiprintf_r+0x1f8>
 8013070:	9b03      	ldr	r3, [sp, #12]
 8013072:	3307      	adds	r3, #7
 8013074:	f023 0307 	bic.w	r3, r3, #7
 8013078:	3308      	adds	r3, #8
 801307a:	9303      	str	r3, [sp, #12]
 801307c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801307e:	443b      	add	r3, r7
 8013080:	9309      	str	r3, [sp, #36]	; 0x24
 8013082:	e767      	b.n	8012f54 <_vfiprintf_r+0x94>
 8013084:	fb0c 3202 	mla	r2, ip, r2, r3
 8013088:	460c      	mov	r4, r1
 801308a:	2001      	movs	r0, #1
 801308c:	e7a5      	b.n	8012fda <_vfiprintf_r+0x11a>
 801308e:	2300      	movs	r3, #0
 8013090:	3401      	adds	r4, #1
 8013092:	9305      	str	r3, [sp, #20]
 8013094:	4619      	mov	r1, r3
 8013096:	f04f 0c0a 	mov.w	ip, #10
 801309a:	4620      	mov	r0, r4
 801309c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130a0:	3a30      	subs	r2, #48	; 0x30
 80130a2:	2a09      	cmp	r2, #9
 80130a4:	d903      	bls.n	80130ae <_vfiprintf_r+0x1ee>
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d0c5      	beq.n	8013036 <_vfiprintf_r+0x176>
 80130aa:	9105      	str	r1, [sp, #20]
 80130ac:	e7c3      	b.n	8013036 <_vfiprintf_r+0x176>
 80130ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80130b2:	4604      	mov	r4, r0
 80130b4:	2301      	movs	r3, #1
 80130b6:	e7f0      	b.n	801309a <_vfiprintf_r+0x1da>
 80130b8:	ab03      	add	r3, sp, #12
 80130ba:	9300      	str	r3, [sp, #0]
 80130bc:	462a      	mov	r2, r5
 80130be:	4b16      	ldr	r3, [pc, #88]	; (8013118 <_vfiprintf_r+0x258>)
 80130c0:	a904      	add	r1, sp, #16
 80130c2:	4630      	mov	r0, r6
 80130c4:	f7fc f83a 	bl	800f13c <_printf_float>
 80130c8:	4607      	mov	r7, r0
 80130ca:	1c78      	adds	r0, r7, #1
 80130cc:	d1d6      	bne.n	801307c <_vfiprintf_r+0x1bc>
 80130ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130d0:	07d9      	lsls	r1, r3, #31
 80130d2:	d405      	bmi.n	80130e0 <_vfiprintf_r+0x220>
 80130d4:	89ab      	ldrh	r3, [r5, #12]
 80130d6:	059a      	lsls	r2, r3, #22
 80130d8:	d402      	bmi.n	80130e0 <_vfiprintf_r+0x220>
 80130da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130dc:	f000 faa1 	bl	8013622 <__retarget_lock_release_recursive>
 80130e0:	89ab      	ldrh	r3, [r5, #12]
 80130e2:	065b      	lsls	r3, r3, #25
 80130e4:	f53f af12 	bmi.w	8012f0c <_vfiprintf_r+0x4c>
 80130e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130ea:	e711      	b.n	8012f10 <_vfiprintf_r+0x50>
 80130ec:	ab03      	add	r3, sp, #12
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	462a      	mov	r2, r5
 80130f2:	4b09      	ldr	r3, [pc, #36]	; (8013118 <_vfiprintf_r+0x258>)
 80130f4:	a904      	add	r1, sp, #16
 80130f6:	4630      	mov	r0, r6
 80130f8:	f7fc fac4 	bl	800f684 <_printf_i>
 80130fc:	e7e4      	b.n	80130c8 <_vfiprintf_r+0x208>
 80130fe:	bf00      	nop
 8013100:	08017a84 	.word	0x08017a84
 8013104:	08017aa4 	.word	0x08017aa4
 8013108:	08017a64 	.word	0x08017a64
 801310c:	08017a14 	.word	0x08017a14
 8013110:	08017a1e 	.word	0x08017a1e
 8013114:	0800f13d 	.word	0x0800f13d
 8013118:	08012e9d 	.word	0x08012e9d
 801311c:	08017a1a 	.word	0x08017a1a

08013120 <__swbuf_r>:
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013122:	460e      	mov	r6, r1
 8013124:	4614      	mov	r4, r2
 8013126:	4605      	mov	r5, r0
 8013128:	b118      	cbz	r0, 8013132 <__swbuf_r+0x12>
 801312a:	6983      	ldr	r3, [r0, #24]
 801312c:	b90b      	cbnz	r3, 8013132 <__swbuf_r+0x12>
 801312e:	f000 f9d9 	bl	80134e4 <__sinit>
 8013132:	4b21      	ldr	r3, [pc, #132]	; (80131b8 <__swbuf_r+0x98>)
 8013134:	429c      	cmp	r4, r3
 8013136:	d12b      	bne.n	8013190 <__swbuf_r+0x70>
 8013138:	686c      	ldr	r4, [r5, #4]
 801313a:	69a3      	ldr	r3, [r4, #24]
 801313c:	60a3      	str	r3, [r4, #8]
 801313e:	89a3      	ldrh	r3, [r4, #12]
 8013140:	071a      	lsls	r2, r3, #28
 8013142:	d52f      	bpl.n	80131a4 <__swbuf_r+0x84>
 8013144:	6923      	ldr	r3, [r4, #16]
 8013146:	b36b      	cbz	r3, 80131a4 <__swbuf_r+0x84>
 8013148:	6923      	ldr	r3, [r4, #16]
 801314a:	6820      	ldr	r0, [r4, #0]
 801314c:	1ac0      	subs	r0, r0, r3
 801314e:	6963      	ldr	r3, [r4, #20]
 8013150:	b2f6      	uxtb	r6, r6
 8013152:	4283      	cmp	r3, r0
 8013154:	4637      	mov	r7, r6
 8013156:	dc04      	bgt.n	8013162 <__swbuf_r+0x42>
 8013158:	4621      	mov	r1, r4
 801315a:	4628      	mov	r0, r5
 801315c:	f000 f92e 	bl	80133bc <_fflush_r>
 8013160:	bb30      	cbnz	r0, 80131b0 <__swbuf_r+0x90>
 8013162:	68a3      	ldr	r3, [r4, #8]
 8013164:	3b01      	subs	r3, #1
 8013166:	60a3      	str	r3, [r4, #8]
 8013168:	6823      	ldr	r3, [r4, #0]
 801316a:	1c5a      	adds	r2, r3, #1
 801316c:	6022      	str	r2, [r4, #0]
 801316e:	701e      	strb	r6, [r3, #0]
 8013170:	6963      	ldr	r3, [r4, #20]
 8013172:	3001      	adds	r0, #1
 8013174:	4283      	cmp	r3, r0
 8013176:	d004      	beq.n	8013182 <__swbuf_r+0x62>
 8013178:	89a3      	ldrh	r3, [r4, #12]
 801317a:	07db      	lsls	r3, r3, #31
 801317c:	d506      	bpl.n	801318c <__swbuf_r+0x6c>
 801317e:	2e0a      	cmp	r6, #10
 8013180:	d104      	bne.n	801318c <__swbuf_r+0x6c>
 8013182:	4621      	mov	r1, r4
 8013184:	4628      	mov	r0, r5
 8013186:	f000 f919 	bl	80133bc <_fflush_r>
 801318a:	b988      	cbnz	r0, 80131b0 <__swbuf_r+0x90>
 801318c:	4638      	mov	r0, r7
 801318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013190:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <__swbuf_r+0x9c>)
 8013192:	429c      	cmp	r4, r3
 8013194:	d101      	bne.n	801319a <__swbuf_r+0x7a>
 8013196:	68ac      	ldr	r4, [r5, #8]
 8013198:	e7cf      	b.n	801313a <__swbuf_r+0x1a>
 801319a:	4b09      	ldr	r3, [pc, #36]	; (80131c0 <__swbuf_r+0xa0>)
 801319c:	429c      	cmp	r4, r3
 801319e:	bf08      	it	eq
 80131a0:	68ec      	ldreq	r4, [r5, #12]
 80131a2:	e7ca      	b.n	801313a <__swbuf_r+0x1a>
 80131a4:	4621      	mov	r1, r4
 80131a6:	4628      	mov	r0, r5
 80131a8:	f000 f80c 	bl	80131c4 <__swsetup_r>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d0cb      	beq.n	8013148 <__swbuf_r+0x28>
 80131b0:	f04f 37ff 	mov.w	r7, #4294967295
 80131b4:	e7ea      	b.n	801318c <__swbuf_r+0x6c>
 80131b6:	bf00      	nop
 80131b8:	08017a84 	.word	0x08017a84
 80131bc:	08017aa4 	.word	0x08017aa4
 80131c0:	08017a64 	.word	0x08017a64

080131c4 <__swsetup_r>:
 80131c4:	4b32      	ldr	r3, [pc, #200]	; (8013290 <__swsetup_r+0xcc>)
 80131c6:	b570      	push	{r4, r5, r6, lr}
 80131c8:	681d      	ldr	r5, [r3, #0]
 80131ca:	4606      	mov	r6, r0
 80131cc:	460c      	mov	r4, r1
 80131ce:	b125      	cbz	r5, 80131da <__swsetup_r+0x16>
 80131d0:	69ab      	ldr	r3, [r5, #24]
 80131d2:	b913      	cbnz	r3, 80131da <__swsetup_r+0x16>
 80131d4:	4628      	mov	r0, r5
 80131d6:	f000 f985 	bl	80134e4 <__sinit>
 80131da:	4b2e      	ldr	r3, [pc, #184]	; (8013294 <__swsetup_r+0xd0>)
 80131dc:	429c      	cmp	r4, r3
 80131de:	d10f      	bne.n	8013200 <__swsetup_r+0x3c>
 80131e0:	686c      	ldr	r4, [r5, #4]
 80131e2:	89a3      	ldrh	r3, [r4, #12]
 80131e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131e8:	0719      	lsls	r1, r3, #28
 80131ea:	d42c      	bmi.n	8013246 <__swsetup_r+0x82>
 80131ec:	06dd      	lsls	r5, r3, #27
 80131ee:	d411      	bmi.n	8013214 <__swsetup_r+0x50>
 80131f0:	2309      	movs	r3, #9
 80131f2:	6033      	str	r3, [r6, #0]
 80131f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80131f8:	81a3      	strh	r3, [r4, #12]
 80131fa:	f04f 30ff 	mov.w	r0, #4294967295
 80131fe:	e03e      	b.n	801327e <__swsetup_r+0xba>
 8013200:	4b25      	ldr	r3, [pc, #148]	; (8013298 <__swsetup_r+0xd4>)
 8013202:	429c      	cmp	r4, r3
 8013204:	d101      	bne.n	801320a <__swsetup_r+0x46>
 8013206:	68ac      	ldr	r4, [r5, #8]
 8013208:	e7eb      	b.n	80131e2 <__swsetup_r+0x1e>
 801320a:	4b24      	ldr	r3, [pc, #144]	; (801329c <__swsetup_r+0xd8>)
 801320c:	429c      	cmp	r4, r3
 801320e:	bf08      	it	eq
 8013210:	68ec      	ldreq	r4, [r5, #12]
 8013212:	e7e6      	b.n	80131e2 <__swsetup_r+0x1e>
 8013214:	0758      	lsls	r0, r3, #29
 8013216:	d512      	bpl.n	801323e <__swsetup_r+0x7a>
 8013218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801321a:	b141      	cbz	r1, 801322e <__swsetup_r+0x6a>
 801321c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013220:	4299      	cmp	r1, r3
 8013222:	d002      	beq.n	801322a <__swsetup_r+0x66>
 8013224:	4630      	mov	r0, r6
 8013226:	f7ff fb25 	bl	8012874 <_free_r>
 801322a:	2300      	movs	r3, #0
 801322c:	6363      	str	r3, [r4, #52]	; 0x34
 801322e:	89a3      	ldrh	r3, [r4, #12]
 8013230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013234:	81a3      	strh	r3, [r4, #12]
 8013236:	2300      	movs	r3, #0
 8013238:	6063      	str	r3, [r4, #4]
 801323a:	6923      	ldr	r3, [r4, #16]
 801323c:	6023      	str	r3, [r4, #0]
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	f043 0308 	orr.w	r3, r3, #8
 8013244:	81a3      	strh	r3, [r4, #12]
 8013246:	6923      	ldr	r3, [r4, #16]
 8013248:	b94b      	cbnz	r3, 801325e <__swsetup_r+0x9a>
 801324a:	89a3      	ldrh	r3, [r4, #12]
 801324c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013254:	d003      	beq.n	801325e <__swsetup_r+0x9a>
 8013256:	4621      	mov	r1, r4
 8013258:	4630      	mov	r0, r6
 801325a:	f000 fa09 	bl	8013670 <__smakebuf_r>
 801325e:	89a0      	ldrh	r0, [r4, #12]
 8013260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013264:	f010 0301 	ands.w	r3, r0, #1
 8013268:	d00a      	beq.n	8013280 <__swsetup_r+0xbc>
 801326a:	2300      	movs	r3, #0
 801326c:	60a3      	str	r3, [r4, #8]
 801326e:	6963      	ldr	r3, [r4, #20]
 8013270:	425b      	negs	r3, r3
 8013272:	61a3      	str	r3, [r4, #24]
 8013274:	6923      	ldr	r3, [r4, #16]
 8013276:	b943      	cbnz	r3, 801328a <__swsetup_r+0xc6>
 8013278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801327c:	d1ba      	bne.n	80131f4 <__swsetup_r+0x30>
 801327e:	bd70      	pop	{r4, r5, r6, pc}
 8013280:	0781      	lsls	r1, r0, #30
 8013282:	bf58      	it	pl
 8013284:	6963      	ldrpl	r3, [r4, #20]
 8013286:	60a3      	str	r3, [r4, #8]
 8013288:	e7f4      	b.n	8013274 <__swsetup_r+0xb0>
 801328a:	2000      	movs	r0, #0
 801328c:	e7f7      	b.n	801327e <__swsetup_r+0xba>
 801328e:	bf00      	nop
 8013290:	200001fc 	.word	0x200001fc
 8013294:	08017a84 	.word	0x08017a84
 8013298:	08017aa4 	.word	0x08017aa4
 801329c:	08017a64 	.word	0x08017a64

080132a0 <abort>:
 80132a0:	b508      	push	{r3, lr}
 80132a2:	2006      	movs	r0, #6
 80132a4:	f000 fa54 	bl	8013750 <raise>
 80132a8:	2001      	movs	r0, #1
 80132aa:	f7ee ff2f 	bl	800210c <_exit>
	...

080132b0 <__sflush_r>:
 80132b0:	898a      	ldrh	r2, [r1, #12]
 80132b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132b6:	4605      	mov	r5, r0
 80132b8:	0710      	lsls	r0, r2, #28
 80132ba:	460c      	mov	r4, r1
 80132bc:	d458      	bmi.n	8013370 <__sflush_r+0xc0>
 80132be:	684b      	ldr	r3, [r1, #4]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	dc05      	bgt.n	80132d0 <__sflush_r+0x20>
 80132c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	dc02      	bgt.n	80132d0 <__sflush_r+0x20>
 80132ca:	2000      	movs	r0, #0
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132d2:	2e00      	cmp	r6, #0
 80132d4:	d0f9      	beq.n	80132ca <__sflush_r+0x1a>
 80132d6:	2300      	movs	r3, #0
 80132d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80132dc:	682f      	ldr	r7, [r5, #0]
 80132de:	602b      	str	r3, [r5, #0]
 80132e0:	d032      	beq.n	8013348 <__sflush_r+0x98>
 80132e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80132e4:	89a3      	ldrh	r3, [r4, #12]
 80132e6:	075a      	lsls	r2, r3, #29
 80132e8:	d505      	bpl.n	80132f6 <__sflush_r+0x46>
 80132ea:	6863      	ldr	r3, [r4, #4]
 80132ec:	1ac0      	subs	r0, r0, r3
 80132ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132f0:	b10b      	cbz	r3, 80132f6 <__sflush_r+0x46>
 80132f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132f4:	1ac0      	subs	r0, r0, r3
 80132f6:	2300      	movs	r3, #0
 80132f8:	4602      	mov	r2, r0
 80132fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132fc:	6a21      	ldr	r1, [r4, #32]
 80132fe:	4628      	mov	r0, r5
 8013300:	47b0      	blx	r6
 8013302:	1c43      	adds	r3, r0, #1
 8013304:	89a3      	ldrh	r3, [r4, #12]
 8013306:	d106      	bne.n	8013316 <__sflush_r+0x66>
 8013308:	6829      	ldr	r1, [r5, #0]
 801330a:	291d      	cmp	r1, #29
 801330c:	d82c      	bhi.n	8013368 <__sflush_r+0xb8>
 801330e:	4a2a      	ldr	r2, [pc, #168]	; (80133b8 <__sflush_r+0x108>)
 8013310:	40ca      	lsrs	r2, r1
 8013312:	07d6      	lsls	r6, r2, #31
 8013314:	d528      	bpl.n	8013368 <__sflush_r+0xb8>
 8013316:	2200      	movs	r2, #0
 8013318:	6062      	str	r2, [r4, #4]
 801331a:	04d9      	lsls	r1, r3, #19
 801331c:	6922      	ldr	r2, [r4, #16]
 801331e:	6022      	str	r2, [r4, #0]
 8013320:	d504      	bpl.n	801332c <__sflush_r+0x7c>
 8013322:	1c42      	adds	r2, r0, #1
 8013324:	d101      	bne.n	801332a <__sflush_r+0x7a>
 8013326:	682b      	ldr	r3, [r5, #0]
 8013328:	b903      	cbnz	r3, 801332c <__sflush_r+0x7c>
 801332a:	6560      	str	r0, [r4, #84]	; 0x54
 801332c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801332e:	602f      	str	r7, [r5, #0]
 8013330:	2900      	cmp	r1, #0
 8013332:	d0ca      	beq.n	80132ca <__sflush_r+0x1a>
 8013334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013338:	4299      	cmp	r1, r3
 801333a:	d002      	beq.n	8013342 <__sflush_r+0x92>
 801333c:	4628      	mov	r0, r5
 801333e:	f7ff fa99 	bl	8012874 <_free_r>
 8013342:	2000      	movs	r0, #0
 8013344:	6360      	str	r0, [r4, #52]	; 0x34
 8013346:	e7c1      	b.n	80132cc <__sflush_r+0x1c>
 8013348:	6a21      	ldr	r1, [r4, #32]
 801334a:	2301      	movs	r3, #1
 801334c:	4628      	mov	r0, r5
 801334e:	47b0      	blx	r6
 8013350:	1c41      	adds	r1, r0, #1
 8013352:	d1c7      	bne.n	80132e4 <__sflush_r+0x34>
 8013354:	682b      	ldr	r3, [r5, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d0c4      	beq.n	80132e4 <__sflush_r+0x34>
 801335a:	2b1d      	cmp	r3, #29
 801335c:	d001      	beq.n	8013362 <__sflush_r+0xb2>
 801335e:	2b16      	cmp	r3, #22
 8013360:	d101      	bne.n	8013366 <__sflush_r+0xb6>
 8013362:	602f      	str	r7, [r5, #0]
 8013364:	e7b1      	b.n	80132ca <__sflush_r+0x1a>
 8013366:	89a3      	ldrh	r3, [r4, #12]
 8013368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801336c:	81a3      	strh	r3, [r4, #12]
 801336e:	e7ad      	b.n	80132cc <__sflush_r+0x1c>
 8013370:	690f      	ldr	r7, [r1, #16]
 8013372:	2f00      	cmp	r7, #0
 8013374:	d0a9      	beq.n	80132ca <__sflush_r+0x1a>
 8013376:	0793      	lsls	r3, r2, #30
 8013378:	680e      	ldr	r6, [r1, #0]
 801337a:	bf08      	it	eq
 801337c:	694b      	ldreq	r3, [r1, #20]
 801337e:	600f      	str	r7, [r1, #0]
 8013380:	bf18      	it	ne
 8013382:	2300      	movne	r3, #0
 8013384:	eba6 0807 	sub.w	r8, r6, r7
 8013388:	608b      	str	r3, [r1, #8]
 801338a:	f1b8 0f00 	cmp.w	r8, #0
 801338e:	dd9c      	ble.n	80132ca <__sflush_r+0x1a>
 8013390:	6a21      	ldr	r1, [r4, #32]
 8013392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013394:	4643      	mov	r3, r8
 8013396:	463a      	mov	r2, r7
 8013398:	4628      	mov	r0, r5
 801339a:	47b0      	blx	r6
 801339c:	2800      	cmp	r0, #0
 801339e:	dc06      	bgt.n	80133ae <__sflush_r+0xfe>
 80133a0:	89a3      	ldrh	r3, [r4, #12]
 80133a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133a6:	81a3      	strh	r3, [r4, #12]
 80133a8:	f04f 30ff 	mov.w	r0, #4294967295
 80133ac:	e78e      	b.n	80132cc <__sflush_r+0x1c>
 80133ae:	4407      	add	r7, r0
 80133b0:	eba8 0800 	sub.w	r8, r8, r0
 80133b4:	e7e9      	b.n	801338a <__sflush_r+0xda>
 80133b6:	bf00      	nop
 80133b8:	20400001 	.word	0x20400001

080133bc <_fflush_r>:
 80133bc:	b538      	push	{r3, r4, r5, lr}
 80133be:	690b      	ldr	r3, [r1, #16]
 80133c0:	4605      	mov	r5, r0
 80133c2:	460c      	mov	r4, r1
 80133c4:	b913      	cbnz	r3, 80133cc <_fflush_r+0x10>
 80133c6:	2500      	movs	r5, #0
 80133c8:	4628      	mov	r0, r5
 80133ca:	bd38      	pop	{r3, r4, r5, pc}
 80133cc:	b118      	cbz	r0, 80133d6 <_fflush_r+0x1a>
 80133ce:	6983      	ldr	r3, [r0, #24]
 80133d0:	b90b      	cbnz	r3, 80133d6 <_fflush_r+0x1a>
 80133d2:	f000 f887 	bl	80134e4 <__sinit>
 80133d6:	4b14      	ldr	r3, [pc, #80]	; (8013428 <_fflush_r+0x6c>)
 80133d8:	429c      	cmp	r4, r3
 80133da:	d11b      	bne.n	8013414 <_fflush_r+0x58>
 80133dc:	686c      	ldr	r4, [r5, #4]
 80133de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d0ef      	beq.n	80133c6 <_fflush_r+0xa>
 80133e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80133e8:	07d0      	lsls	r0, r2, #31
 80133ea:	d404      	bmi.n	80133f6 <_fflush_r+0x3a>
 80133ec:	0599      	lsls	r1, r3, #22
 80133ee:	d402      	bmi.n	80133f6 <_fflush_r+0x3a>
 80133f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133f2:	f000 f915 	bl	8013620 <__retarget_lock_acquire_recursive>
 80133f6:	4628      	mov	r0, r5
 80133f8:	4621      	mov	r1, r4
 80133fa:	f7ff ff59 	bl	80132b0 <__sflush_r>
 80133fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013400:	07da      	lsls	r2, r3, #31
 8013402:	4605      	mov	r5, r0
 8013404:	d4e0      	bmi.n	80133c8 <_fflush_r+0xc>
 8013406:	89a3      	ldrh	r3, [r4, #12]
 8013408:	059b      	lsls	r3, r3, #22
 801340a:	d4dd      	bmi.n	80133c8 <_fflush_r+0xc>
 801340c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801340e:	f000 f908 	bl	8013622 <__retarget_lock_release_recursive>
 8013412:	e7d9      	b.n	80133c8 <_fflush_r+0xc>
 8013414:	4b05      	ldr	r3, [pc, #20]	; (801342c <_fflush_r+0x70>)
 8013416:	429c      	cmp	r4, r3
 8013418:	d101      	bne.n	801341e <_fflush_r+0x62>
 801341a:	68ac      	ldr	r4, [r5, #8]
 801341c:	e7df      	b.n	80133de <_fflush_r+0x22>
 801341e:	4b04      	ldr	r3, [pc, #16]	; (8013430 <_fflush_r+0x74>)
 8013420:	429c      	cmp	r4, r3
 8013422:	bf08      	it	eq
 8013424:	68ec      	ldreq	r4, [r5, #12]
 8013426:	e7da      	b.n	80133de <_fflush_r+0x22>
 8013428:	08017a84 	.word	0x08017a84
 801342c:	08017aa4 	.word	0x08017aa4
 8013430:	08017a64 	.word	0x08017a64

08013434 <std>:
 8013434:	2300      	movs	r3, #0
 8013436:	b510      	push	{r4, lr}
 8013438:	4604      	mov	r4, r0
 801343a:	e9c0 3300 	strd	r3, r3, [r0]
 801343e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013442:	6083      	str	r3, [r0, #8]
 8013444:	8181      	strh	r1, [r0, #12]
 8013446:	6643      	str	r3, [r0, #100]	; 0x64
 8013448:	81c2      	strh	r2, [r0, #14]
 801344a:	6183      	str	r3, [r0, #24]
 801344c:	4619      	mov	r1, r3
 801344e:	2208      	movs	r2, #8
 8013450:	305c      	adds	r0, #92	; 0x5c
 8013452:	f7fb fdcb 	bl	800efec <memset>
 8013456:	4b05      	ldr	r3, [pc, #20]	; (801346c <std+0x38>)
 8013458:	6263      	str	r3, [r4, #36]	; 0x24
 801345a:	4b05      	ldr	r3, [pc, #20]	; (8013470 <std+0x3c>)
 801345c:	62a3      	str	r3, [r4, #40]	; 0x28
 801345e:	4b05      	ldr	r3, [pc, #20]	; (8013474 <std+0x40>)
 8013460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013462:	4b05      	ldr	r3, [pc, #20]	; (8013478 <std+0x44>)
 8013464:	6224      	str	r4, [r4, #32]
 8013466:	6323      	str	r3, [r4, #48]	; 0x30
 8013468:	bd10      	pop	{r4, pc}
 801346a:	bf00      	nop
 801346c:	08013789 	.word	0x08013789
 8013470:	080137ab 	.word	0x080137ab
 8013474:	080137e3 	.word	0x080137e3
 8013478:	08013807 	.word	0x08013807

0801347c <_cleanup_r>:
 801347c:	4901      	ldr	r1, [pc, #4]	; (8013484 <_cleanup_r+0x8>)
 801347e:	f000 b8af 	b.w	80135e0 <_fwalk_reent>
 8013482:	bf00      	nop
 8013484:	080133bd 	.word	0x080133bd

08013488 <__sfmoreglue>:
 8013488:	b570      	push	{r4, r5, r6, lr}
 801348a:	2268      	movs	r2, #104	; 0x68
 801348c:	1e4d      	subs	r5, r1, #1
 801348e:	4355      	muls	r5, r2
 8013490:	460e      	mov	r6, r1
 8013492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013496:	f7ff fa59 	bl	801294c <_malloc_r>
 801349a:	4604      	mov	r4, r0
 801349c:	b140      	cbz	r0, 80134b0 <__sfmoreglue+0x28>
 801349e:	2100      	movs	r1, #0
 80134a0:	e9c0 1600 	strd	r1, r6, [r0]
 80134a4:	300c      	adds	r0, #12
 80134a6:	60a0      	str	r0, [r4, #8]
 80134a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80134ac:	f7fb fd9e 	bl	800efec <memset>
 80134b0:	4620      	mov	r0, r4
 80134b2:	bd70      	pop	{r4, r5, r6, pc}

080134b4 <__sfp_lock_acquire>:
 80134b4:	4801      	ldr	r0, [pc, #4]	; (80134bc <__sfp_lock_acquire+0x8>)
 80134b6:	f000 b8b3 	b.w	8013620 <__retarget_lock_acquire_recursive>
 80134ba:	bf00      	nop
 80134bc:	200079ad 	.word	0x200079ad

080134c0 <__sfp_lock_release>:
 80134c0:	4801      	ldr	r0, [pc, #4]	; (80134c8 <__sfp_lock_release+0x8>)
 80134c2:	f000 b8ae 	b.w	8013622 <__retarget_lock_release_recursive>
 80134c6:	bf00      	nop
 80134c8:	200079ad 	.word	0x200079ad

080134cc <__sinit_lock_acquire>:
 80134cc:	4801      	ldr	r0, [pc, #4]	; (80134d4 <__sinit_lock_acquire+0x8>)
 80134ce:	f000 b8a7 	b.w	8013620 <__retarget_lock_acquire_recursive>
 80134d2:	bf00      	nop
 80134d4:	200079ae 	.word	0x200079ae

080134d8 <__sinit_lock_release>:
 80134d8:	4801      	ldr	r0, [pc, #4]	; (80134e0 <__sinit_lock_release+0x8>)
 80134da:	f000 b8a2 	b.w	8013622 <__retarget_lock_release_recursive>
 80134de:	bf00      	nop
 80134e0:	200079ae 	.word	0x200079ae

080134e4 <__sinit>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	4604      	mov	r4, r0
 80134e8:	f7ff fff0 	bl	80134cc <__sinit_lock_acquire>
 80134ec:	69a3      	ldr	r3, [r4, #24]
 80134ee:	b11b      	cbz	r3, 80134f8 <__sinit+0x14>
 80134f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134f4:	f7ff bff0 	b.w	80134d8 <__sinit_lock_release>
 80134f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80134fc:	6523      	str	r3, [r4, #80]	; 0x50
 80134fe:	4b13      	ldr	r3, [pc, #76]	; (801354c <__sinit+0x68>)
 8013500:	4a13      	ldr	r2, [pc, #76]	; (8013550 <__sinit+0x6c>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	62a2      	str	r2, [r4, #40]	; 0x28
 8013506:	42a3      	cmp	r3, r4
 8013508:	bf04      	itt	eq
 801350a:	2301      	moveq	r3, #1
 801350c:	61a3      	streq	r3, [r4, #24]
 801350e:	4620      	mov	r0, r4
 8013510:	f000 f820 	bl	8013554 <__sfp>
 8013514:	6060      	str	r0, [r4, #4]
 8013516:	4620      	mov	r0, r4
 8013518:	f000 f81c 	bl	8013554 <__sfp>
 801351c:	60a0      	str	r0, [r4, #8]
 801351e:	4620      	mov	r0, r4
 8013520:	f000 f818 	bl	8013554 <__sfp>
 8013524:	2200      	movs	r2, #0
 8013526:	60e0      	str	r0, [r4, #12]
 8013528:	2104      	movs	r1, #4
 801352a:	6860      	ldr	r0, [r4, #4]
 801352c:	f7ff ff82 	bl	8013434 <std>
 8013530:	68a0      	ldr	r0, [r4, #8]
 8013532:	2201      	movs	r2, #1
 8013534:	2109      	movs	r1, #9
 8013536:	f7ff ff7d 	bl	8013434 <std>
 801353a:	68e0      	ldr	r0, [r4, #12]
 801353c:	2202      	movs	r2, #2
 801353e:	2112      	movs	r1, #18
 8013540:	f7ff ff78 	bl	8013434 <std>
 8013544:	2301      	movs	r3, #1
 8013546:	61a3      	str	r3, [r4, #24]
 8013548:	e7d2      	b.n	80134f0 <__sinit+0xc>
 801354a:	bf00      	nop
 801354c:	0801761c 	.word	0x0801761c
 8013550:	0801347d 	.word	0x0801347d

08013554 <__sfp>:
 8013554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013556:	4607      	mov	r7, r0
 8013558:	f7ff ffac 	bl	80134b4 <__sfp_lock_acquire>
 801355c:	4b1e      	ldr	r3, [pc, #120]	; (80135d8 <__sfp+0x84>)
 801355e:	681e      	ldr	r6, [r3, #0]
 8013560:	69b3      	ldr	r3, [r6, #24]
 8013562:	b913      	cbnz	r3, 801356a <__sfp+0x16>
 8013564:	4630      	mov	r0, r6
 8013566:	f7ff ffbd 	bl	80134e4 <__sinit>
 801356a:	3648      	adds	r6, #72	; 0x48
 801356c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013570:	3b01      	subs	r3, #1
 8013572:	d503      	bpl.n	801357c <__sfp+0x28>
 8013574:	6833      	ldr	r3, [r6, #0]
 8013576:	b30b      	cbz	r3, 80135bc <__sfp+0x68>
 8013578:	6836      	ldr	r6, [r6, #0]
 801357a:	e7f7      	b.n	801356c <__sfp+0x18>
 801357c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013580:	b9d5      	cbnz	r5, 80135b8 <__sfp+0x64>
 8013582:	4b16      	ldr	r3, [pc, #88]	; (80135dc <__sfp+0x88>)
 8013584:	60e3      	str	r3, [r4, #12]
 8013586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801358a:	6665      	str	r5, [r4, #100]	; 0x64
 801358c:	f000 f847 	bl	801361e <__retarget_lock_init_recursive>
 8013590:	f7ff ff96 	bl	80134c0 <__sfp_lock_release>
 8013594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801359c:	6025      	str	r5, [r4, #0]
 801359e:	61a5      	str	r5, [r4, #24]
 80135a0:	2208      	movs	r2, #8
 80135a2:	4629      	mov	r1, r5
 80135a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80135a8:	f7fb fd20 	bl	800efec <memset>
 80135ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80135b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80135b4:	4620      	mov	r0, r4
 80135b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b8:	3468      	adds	r4, #104	; 0x68
 80135ba:	e7d9      	b.n	8013570 <__sfp+0x1c>
 80135bc:	2104      	movs	r1, #4
 80135be:	4638      	mov	r0, r7
 80135c0:	f7ff ff62 	bl	8013488 <__sfmoreglue>
 80135c4:	4604      	mov	r4, r0
 80135c6:	6030      	str	r0, [r6, #0]
 80135c8:	2800      	cmp	r0, #0
 80135ca:	d1d5      	bne.n	8013578 <__sfp+0x24>
 80135cc:	f7ff ff78 	bl	80134c0 <__sfp_lock_release>
 80135d0:	230c      	movs	r3, #12
 80135d2:	603b      	str	r3, [r7, #0]
 80135d4:	e7ee      	b.n	80135b4 <__sfp+0x60>
 80135d6:	bf00      	nop
 80135d8:	0801761c 	.word	0x0801761c
 80135dc:	ffff0001 	.word	0xffff0001

080135e0 <_fwalk_reent>:
 80135e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135e4:	4606      	mov	r6, r0
 80135e6:	4688      	mov	r8, r1
 80135e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80135ec:	2700      	movs	r7, #0
 80135ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135f2:	f1b9 0901 	subs.w	r9, r9, #1
 80135f6:	d505      	bpl.n	8013604 <_fwalk_reent+0x24>
 80135f8:	6824      	ldr	r4, [r4, #0]
 80135fa:	2c00      	cmp	r4, #0
 80135fc:	d1f7      	bne.n	80135ee <_fwalk_reent+0xe>
 80135fe:	4638      	mov	r0, r7
 8013600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013604:	89ab      	ldrh	r3, [r5, #12]
 8013606:	2b01      	cmp	r3, #1
 8013608:	d907      	bls.n	801361a <_fwalk_reent+0x3a>
 801360a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801360e:	3301      	adds	r3, #1
 8013610:	d003      	beq.n	801361a <_fwalk_reent+0x3a>
 8013612:	4629      	mov	r1, r5
 8013614:	4630      	mov	r0, r6
 8013616:	47c0      	blx	r8
 8013618:	4307      	orrs	r7, r0
 801361a:	3568      	adds	r5, #104	; 0x68
 801361c:	e7e9      	b.n	80135f2 <_fwalk_reent+0x12>

0801361e <__retarget_lock_init_recursive>:
 801361e:	4770      	bx	lr

08013620 <__retarget_lock_acquire_recursive>:
 8013620:	4770      	bx	lr

08013622 <__retarget_lock_release_recursive>:
 8013622:	4770      	bx	lr

08013624 <__swhatbuf_r>:
 8013624:	b570      	push	{r4, r5, r6, lr}
 8013626:	460e      	mov	r6, r1
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	2900      	cmp	r1, #0
 801362e:	b096      	sub	sp, #88	; 0x58
 8013630:	4614      	mov	r4, r2
 8013632:	461d      	mov	r5, r3
 8013634:	da08      	bge.n	8013648 <__swhatbuf_r+0x24>
 8013636:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801363a:	2200      	movs	r2, #0
 801363c:	602a      	str	r2, [r5, #0]
 801363e:	061a      	lsls	r2, r3, #24
 8013640:	d410      	bmi.n	8013664 <__swhatbuf_r+0x40>
 8013642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013646:	e00e      	b.n	8013666 <__swhatbuf_r+0x42>
 8013648:	466a      	mov	r2, sp
 801364a:	f000 f903 	bl	8013854 <_fstat_r>
 801364e:	2800      	cmp	r0, #0
 8013650:	dbf1      	blt.n	8013636 <__swhatbuf_r+0x12>
 8013652:	9a01      	ldr	r2, [sp, #4]
 8013654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801365c:	425a      	negs	r2, r3
 801365e:	415a      	adcs	r2, r3
 8013660:	602a      	str	r2, [r5, #0]
 8013662:	e7ee      	b.n	8013642 <__swhatbuf_r+0x1e>
 8013664:	2340      	movs	r3, #64	; 0x40
 8013666:	2000      	movs	r0, #0
 8013668:	6023      	str	r3, [r4, #0]
 801366a:	b016      	add	sp, #88	; 0x58
 801366c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013670 <__smakebuf_r>:
 8013670:	898b      	ldrh	r3, [r1, #12]
 8013672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013674:	079d      	lsls	r5, r3, #30
 8013676:	4606      	mov	r6, r0
 8013678:	460c      	mov	r4, r1
 801367a:	d507      	bpl.n	801368c <__smakebuf_r+0x1c>
 801367c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013680:	6023      	str	r3, [r4, #0]
 8013682:	6123      	str	r3, [r4, #16]
 8013684:	2301      	movs	r3, #1
 8013686:	6163      	str	r3, [r4, #20]
 8013688:	b002      	add	sp, #8
 801368a:	bd70      	pop	{r4, r5, r6, pc}
 801368c:	ab01      	add	r3, sp, #4
 801368e:	466a      	mov	r2, sp
 8013690:	f7ff ffc8 	bl	8013624 <__swhatbuf_r>
 8013694:	9900      	ldr	r1, [sp, #0]
 8013696:	4605      	mov	r5, r0
 8013698:	4630      	mov	r0, r6
 801369a:	f7ff f957 	bl	801294c <_malloc_r>
 801369e:	b948      	cbnz	r0, 80136b4 <__smakebuf_r+0x44>
 80136a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136a4:	059a      	lsls	r2, r3, #22
 80136a6:	d4ef      	bmi.n	8013688 <__smakebuf_r+0x18>
 80136a8:	f023 0303 	bic.w	r3, r3, #3
 80136ac:	f043 0302 	orr.w	r3, r3, #2
 80136b0:	81a3      	strh	r3, [r4, #12]
 80136b2:	e7e3      	b.n	801367c <__smakebuf_r+0xc>
 80136b4:	4b0d      	ldr	r3, [pc, #52]	; (80136ec <__smakebuf_r+0x7c>)
 80136b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80136b8:	89a3      	ldrh	r3, [r4, #12]
 80136ba:	6020      	str	r0, [r4, #0]
 80136bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136c0:	81a3      	strh	r3, [r4, #12]
 80136c2:	9b00      	ldr	r3, [sp, #0]
 80136c4:	6163      	str	r3, [r4, #20]
 80136c6:	9b01      	ldr	r3, [sp, #4]
 80136c8:	6120      	str	r0, [r4, #16]
 80136ca:	b15b      	cbz	r3, 80136e4 <__smakebuf_r+0x74>
 80136cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136d0:	4630      	mov	r0, r6
 80136d2:	f000 f8d1 	bl	8013878 <_isatty_r>
 80136d6:	b128      	cbz	r0, 80136e4 <__smakebuf_r+0x74>
 80136d8:	89a3      	ldrh	r3, [r4, #12]
 80136da:	f023 0303 	bic.w	r3, r3, #3
 80136de:	f043 0301 	orr.w	r3, r3, #1
 80136e2:	81a3      	strh	r3, [r4, #12]
 80136e4:	89a0      	ldrh	r0, [r4, #12]
 80136e6:	4305      	orrs	r5, r0
 80136e8:	81a5      	strh	r5, [r4, #12]
 80136ea:	e7cd      	b.n	8013688 <__smakebuf_r+0x18>
 80136ec:	0801347d 	.word	0x0801347d

080136f0 <_malloc_usable_size_r>:
 80136f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136f4:	1f18      	subs	r0, r3, #4
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	bfbc      	itt	lt
 80136fa:	580b      	ldrlt	r3, [r1, r0]
 80136fc:	18c0      	addlt	r0, r0, r3
 80136fe:	4770      	bx	lr

08013700 <_raise_r>:
 8013700:	291f      	cmp	r1, #31
 8013702:	b538      	push	{r3, r4, r5, lr}
 8013704:	4604      	mov	r4, r0
 8013706:	460d      	mov	r5, r1
 8013708:	d904      	bls.n	8013714 <_raise_r+0x14>
 801370a:	2316      	movs	r3, #22
 801370c:	6003      	str	r3, [r0, #0]
 801370e:	f04f 30ff 	mov.w	r0, #4294967295
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013716:	b112      	cbz	r2, 801371e <_raise_r+0x1e>
 8013718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801371c:	b94b      	cbnz	r3, 8013732 <_raise_r+0x32>
 801371e:	4620      	mov	r0, r4
 8013720:	f000 f830 	bl	8013784 <_getpid_r>
 8013724:	462a      	mov	r2, r5
 8013726:	4601      	mov	r1, r0
 8013728:	4620      	mov	r0, r4
 801372a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801372e:	f000 b817 	b.w	8013760 <_kill_r>
 8013732:	2b01      	cmp	r3, #1
 8013734:	d00a      	beq.n	801374c <_raise_r+0x4c>
 8013736:	1c59      	adds	r1, r3, #1
 8013738:	d103      	bne.n	8013742 <_raise_r+0x42>
 801373a:	2316      	movs	r3, #22
 801373c:	6003      	str	r3, [r0, #0]
 801373e:	2001      	movs	r0, #1
 8013740:	e7e7      	b.n	8013712 <_raise_r+0x12>
 8013742:	2400      	movs	r4, #0
 8013744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013748:	4628      	mov	r0, r5
 801374a:	4798      	blx	r3
 801374c:	2000      	movs	r0, #0
 801374e:	e7e0      	b.n	8013712 <_raise_r+0x12>

08013750 <raise>:
 8013750:	4b02      	ldr	r3, [pc, #8]	; (801375c <raise+0xc>)
 8013752:	4601      	mov	r1, r0
 8013754:	6818      	ldr	r0, [r3, #0]
 8013756:	f7ff bfd3 	b.w	8013700 <_raise_r>
 801375a:	bf00      	nop
 801375c:	200001fc 	.word	0x200001fc

08013760 <_kill_r>:
 8013760:	b538      	push	{r3, r4, r5, lr}
 8013762:	4d07      	ldr	r5, [pc, #28]	; (8013780 <_kill_r+0x20>)
 8013764:	2300      	movs	r3, #0
 8013766:	4604      	mov	r4, r0
 8013768:	4608      	mov	r0, r1
 801376a:	4611      	mov	r1, r2
 801376c:	602b      	str	r3, [r5, #0]
 801376e:	f7ee fcbd 	bl	80020ec <_kill>
 8013772:	1c43      	adds	r3, r0, #1
 8013774:	d102      	bne.n	801377c <_kill_r+0x1c>
 8013776:	682b      	ldr	r3, [r5, #0]
 8013778:	b103      	cbz	r3, 801377c <_kill_r+0x1c>
 801377a:	6023      	str	r3, [r4, #0]
 801377c:	bd38      	pop	{r3, r4, r5, pc}
 801377e:	bf00      	nop
 8013780:	200079a8 	.word	0x200079a8

08013784 <_getpid_r>:
 8013784:	f7ee bcaa 	b.w	80020dc <_getpid>

08013788 <__sread>:
 8013788:	b510      	push	{r4, lr}
 801378a:	460c      	mov	r4, r1
 801378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013790:	f000 f894 	bl	80138bc <_read_r>
 8013794:	2800      	cmp	r0, #0
 8013796:	bfab      	itete	ge
 8013798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801379a:	89a3      	ldrhlt	r3, [r4, #12]
 801379c:	181b      	addge	r3, r3, r0
 801379e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80137a2:	bfac      	ite	ge
 80137a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80137a6:	81a3      	strhlt	r3, [r4, #12]
 80137a8:	bd10      	pop	{r4, pc}

080137aa <__swrite>:
 80137aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ae:	461f      	mov	r7, r3
 80137b0:	898b      	ldrh	r3, [r1, #12]
 80137b2:	05db      	lsls	r3, r3, #23
 80137b4:	4605      	mov	r5, r0
 80137b6:	460c      	mov	r4, r1
 80137b8:	4616      	mov	r6, r2
 80137ba:	d505      	bpl.n	80137c8 <__swrite+0x1e>
 80137bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c0:	2302      	movs	r3, #2
 80137c2:	2200      	movs	r2, #0
 80137c4:	f000 f868 	bl	8013898 <_lseek_r>
 80137c8:	89a3      	ldrh	r3, [r4, #12]
 80137ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137d2:	81a3      	strh	r3, [r4, #12]
 80137d4:	4632      	mov	r2, r6
 80137d6:	463b      	mov	r3, r7
 80137d8:	4628      	mov	r0, r5
 80137da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137de:	f000 b817 	b.w	8013810 <_write_r>

080137e2 <__sseek>:
 80137e2:	b510      	push	{r4, lr}
 80137e4:	460c      	mov	r4, r1
 80137e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137ea:	f000 f855 	bl	8013898 <_lseek_r>
 80137ee:	1c43      	adds	r3, r0, #1
 80137f0:	89a3      	ldrh	r3, [r4, #12]
 80137f2:	bf15      	itete	ne
 80137f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80137f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80137fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80137fe:	81a3      	strheq	r3, [r4, #12]
 8013800:	bf18      	it	ne
 8013802:	81a3      	strhne	r3, [r4, #12]
 8013804:	bd10      	pop	{r4, pc}

08013806 <__sclose>:
 8013806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801380a:	f000 b813 	b.w	8013834 <_close_r>
	...

08013810 <_write_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	4d07      	ldr	r5, [pc, #28]	; (8013830 <_write_r+0x20>)
 8013814:	4604      	mov	r4, r0
 8013816:	4608      	mov	r0, r1
 8013818:	4611      	mov	r1, r2
 801381a:	2200      	movs	r2, #0
 801381c:	602a      	str	r2, [r5, #0]
 801381e:	461a      	mov	r2, r3
 8013820:	f7ee fc9b 	bl	800215a <_write>
 8013824:	1c43      	adds	r3, r0, #1
 8013826:	d102      	bne.n	801382e <_write_r+0x1e>
 8013828:	682b      	ldr	r3, [r5, #0]
 801382a:	b103      	cbz	r3, 801382e <_write_r+0x1e>
 801382c:	6023      	str	r3, [r4, #0]
 801382e:	bd38      	pop	{r3, r4, r5, pc}
 8013830:	200079a8 	.word	0x200079a8

08013834 <_close_r>:
 8013834:	b538      	push	{r3, r4, r5, lr}
 8013836:	4d06      	ldr	r5, [pc, #24]	; (8013850 <_close_r+0x1c>)
 8013838:	2300      	movs	r3, #0
 801383a:	4604      	mov	r4, r0
 801383c:	4608      	mov	r0, r1
 801383e:	602b      	str	r3, [r5, #0]
 8013840:	f7ee fca7 	bl	8002192 <_close>
 8013844:	1c43      	adds	r3, r0, #1
 8013846:	d102      	bne.n	801384e <_close_r+0x1a>
 8013848:	682b      	ldr	r3, [r5, #0]
 801384a:	b103      	cbz	r3, 801384e <_close_r+0x1a>
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	bd38      	pop	{r3, r4, r5, pc}
 8013850:	200079a8 	.word	0x200079a8

08013854 <_fstat_r>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4d07      	ldr	r5, [pc, #28]	; (8013874 <_fstat_r+0x20>)
 8013858:	2300      	movs	r3, #0
 801385a:	4604      	mov	r4, r0
 801385c:	4608      	mov	r0, r1
 801385e:	4611      	mov	r1, r2
 8013860:	602b      	str	r3, [r5, #0]
 8013862:	f7ee fca2 	bl	80021aa <_fstat>
 8013866:	1c43      	adds	r3, r0, #1
 8013868:	d102      	bne.n	8013870 <_fstat_r+0x1c>
 801386a:	682b      	ldr	r3, [r5, #0]
 801386c:	b103      	cbz	r3, 8013870 <_fstat_r+0x1c>
 801386e:	6023      	str	r3, [r4, #0]
 8013870:	bd38      	pop	{r3, r4, r5, pc}
 8013872:	bf00      	nop
 8013874:	200079a8 	.word	0x200079a8

08013878 <_isatty_r>:
 8013878:	b538      	push	{r3, r4, r5, lr}
 801387a:	4d06      	ldr	r5, [pc, #24]	; (8013894 <_isatty_r+0x1c>)
 801387c:	2300      	movs	r3, #0
 801387e:	4604      	mov	r4, r0
 8013880:	4608      	mov	r0, r1
 8013882:	602b      	str	r3, [r5, #0]
 8013884:	f7ee fca1 	bl	80021ca <_isatty>
 8013888:	1c43      	adds	r3, r0, #1
 801388a:	d102      	bne.n	8013892 <_isatty_r+0x1a>
 801388c:	682b      	ldr	r3, [r5, #0]
 801388e:	b103      	cbz	r3, 8013892 <_isatty_r+0x1a>
 8013890:	6023      	str	r3, [r4, #0]
 8013892:	bd38      	pop	{r3, r4, r5, pc}
 8013894:	200079a8 	.word	0x200079a8

08013898 <_lseek_r>:
 8013898:	b538      	push	{r3, r4, r5, lr}
 801389a:	4d07      	ldr	r5, [pc, #28]	; (80138b8 <_lseek_r+0x20>)
 801389c:	4604      	mov	r4, r0
 801389e:	4608      	mov	r0, r1
 80138a0:	4611      	mov	r1, r2
 80138a2:	2200      	movs	r2, #0
 80138a4:	602a      	str	r2, [r5, #0]
 80138a6:	461a      	mov	r2, r3
 80138a8:	f7ee fc9a 	bl	80021e0 <_lseek>
 80138ac:	1c43      	adds	r3, r0, #1
 80138ae:	d102      	bne.n	80138b6 <_lseek_r+0x1e>
 80138b0:	682b      	ldr	r3, [r5, #0]
 80138b2:	b103      	cbz	r3, 80138b6 <_lseek_r+0x1e>
 80138b4:	6023      	str	r3, [r4, #0]
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	200079a8 	.word	0x200079a8

080138bc <_read_r>:
 80138bc:	b538      	push	{r3, r4, r5, lr}
 80138be:	4d07      	ldr	r5, [pc, #28]	; (80138dc <_read_r+0x20>)
 80138c0:	4604      	mov	r4, r0
 80138c2:	4608      	mov	r0, r1
 80138c4:	4611      	mov	r1, r2
 80138c6:	2200      	movs	r2, #0
 80138c8:	602a      	str	r2, [r5, #0]
 80138ca:	461a      	mov	r2, r3
 80138cc:	f7ee fc28 	bl	8002120 <_read>
 80138d0:	1c43      	adds	r3, r0, #1
 80138d2:	d102      	bne.n	80138da <_read_r+0x1e>
 80138d4:	682b      	ldr	r3, [r5, #0]
 80138d6:	b103      	cbz	r3, 80138da <_read_r+0x1e>
 80138d8:	6023      	str	r3, [r4, #0]
 80138da:	bd38      	pop	{r3, r4, r5, pc}
 80138dc:	200079a8 	.word	0x200079a8

080138e0 <sqrt>:
 80138e0:	b538      	push	{r3, r4, r5, lr}
 80138e2:	ed2d 8b02 	vpush	{d8}
 80138e6:	ec55 4b10 	vmov	r4, r5, d0
 80138ea:	f000 f825 	bl	8013938 <__ieee754_sqrt>
 80138ee:	4622      	mov	r2, r4
 80138f0:	462b      	mov	r3, r5
 80138f2:	4620      	mov	r0, r4
 80138f4:	4629      	mov	r1, r5
 80138f6:	eeb0 8a40 	vmov.f32	s16, s0
 80138fa:	eef0 8a60 	vmov.f32	s17, s1
 80138fe:	f7ed f915 	bl	8000b2c <__aeabi_dcmpun>
 8013902:	b990      	cbnz	r0, 801392a <sqrt+0x4a>
 8013904:	2200      	movs	r2, #0
 8013906:	2300      	movs	r3, #0
 8013908:	4620      	mov	r0, r4
 801390a:	4629      	mov	r1, r5
 801390c:	f7ed f8e6 	bl	8000adc <__aeabi_dcmplt>
 8013910:	b158      	cbz	r0, 801392a <sqrt+0x4a>
 8013912:	f7fb fb41 	bl	800ef98 <__errno>
 8013916:	2321      	movs	r3, #33	; 0x21
 8013918:	6003      	str	r3, [r0, #0]
 801391a:	2200      	movs	r2, #0
 801391c:	2300      	movs	r3, #0
 801391e:	4610      	mov	r0, r2
 8013920:	4619      	mov	r1, r3
 8013922:	f7ec ff93 	bl	800084c <__aeabi_ddiv>
 8013926:	ec41 0b18 	vmov	d8, r0, r1
 801392a:	eeb0 0a48 	vmov.f32	s0, s16
 801392e:	eef0 0a68 	vmov.f32	s1, s17
 8013932:	ecbd 8b02 	vpop	{d8}
 8013936:	bd38      	pop	{r3, r4, r5, pc}

08013938 <__ieee754_sqrt>:
 8013938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801393c:	ec55 4b10 	vmov	r4, r5, d0
 8013940:	4e55      	ldr	r6, [pc, #340]	; (8013a98 <__ieee754_sqrt+0x160>)
 8013942:	43ae      	bics	r6, r5
 8013944:	ee10 0a10 	vmov	r0, s0
 8013948:	ee10 3a10 	vmov	r3, s0
 801394c:	462a      	mov	r2, r5
 801394e:	4629      	mov	r1, r5
 8013950:	d110      	bne.n	8013974 <__ieee754_sqrt+0x3c>
 8013952:	ee10 2a10 	vmov	r2, s0
 8013956:	462b      	mov	r3, r5
 8013958:	f7ec fe4e 	bl	80005f8 <__aeabi_dmul>
 801395c:	4602      	mov	r2, r0
 801395e:	460b      	mov	r3, r1
 8013960:	4620      	mov	r0, r4
 8013962:	4629      	mov	r1, r5
 8013964:	f7ec fc92 	bl	800028c <__adddf3>
 8013968:	4604      	mov	r4, r0
 801396a:	460d      	mov	r5, r1
 801396c:	ec45 4b10 	vmov	d0, r4, r5
 8013970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013974:	2d00      	cmp	r5, #0
 8013976:	dc10      	bgt.n	801399a <__ieee754_sqrt+0x62>
 8013978:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801397c:	4330      	orrs	r0, r6
 801397e:	d0f5      	beq.n	801396c <__ieee754_sqrt+0x34>
 8013980:	b15d      	cbz	r5, 801399a <__ieee754_sqrt+0x62>
 8013982:	ee10 2a10 	vmov	r2, s0
 8013986:	462b      	mov	r3, r5
 8013988:	ee10 0a10 	vmov	r0, s0
 801398c:	f7ec fc7c 	bl	8000288 <__aeabi_dsub>
 8013990:	4602      	mov	r2, r0
 8013992:	460b      	mov	r3, r1
 8013994:	f7ec ff5a 	bl	800084c <__aeabi_ddiv>
 8013998:	e7e6      	b.n	8013968 <__ieee754_sqrt+0x30>
 801399a:	1512      	asrs	r2, r2, #20
 801399c:	d074      	beq.n	8013a88 <__ieee754_sqrt+0x150>
 801399e:	07d4      	lsls	r4, r2, #31
 80139a0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80139a4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80139a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80139ac:	bf5e      	ittt	pl
 80139ae:	0fda      	lsrpl	r2, r3, #31
 80139b0:	005b      	lslpl	r3, r3, #1
 80139b2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80139b6:	2400      	movs	r4, #0
 80139b8:	0fda      	lsrs	r2, r3, #31
 80139ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80139be:	107f      	asrs	r7, r7, #1
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	2516      	movs	r5, #22
 80139c4:	4620      	mov	r0, r4
 80139c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80139ca:	1886      	adds	r6, r0, r2
 80139cc:	428e      	cmp	r6, r1
 80139ce:	bfde      	ittt	le
 80139d0:	1b89      	suble	r1, r1, r6
 80139d2:	18b0      	addle	r0, r6, r2
 80139d4:	18a4      	addle	r4, r4, r2
 80139d6:	0049      	lsls	r1, r1, #1
 80139d8:	3d01      	subs	r5, #1
 80139da:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80139de:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80139e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80139e6:	d1f0      	bne.n	80139ca <__ieee754_sqrt+0x92>
 80139e8:	462a      	mov	r2, r5
 80139ea:	f04f 0e20 	mov.w	lr, #32
 80139ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80139f2:	4281      	cmp	r1, r0
 80139f4:	eb06 0c05 	add.w	ip, r6, r5
 80139f8:	dc02      	bgt.n	8013a00 <__ieee754_sqrt+0xc8>
 80139fa:	d113      	bne.n	8013a24 <__ieee754_sqrt+0xec>
 80139fc:	459c      	cmp	ip, r3
 80139fe:	d811      	bhi.n	8013a24 <__ieee754_sqrt+0xec>
 8013a00:	f1bc 0f00 	cmp.w	ip, #0
 8013a04:	eb0c 0506 	add.w	r5, ip, r6
 8013a08:	da43      	bge.n	8013a92 <__ieee754_sqrt+0x15a>
 8013a0a:	2d00      	cmp	r5, #0
 8013a0c:	db41      	blt.n	8013a92 <__ieee754_sqrt+0x15a>
 8013a0e:	f100 0801 	add.w	r8, r0, #1
 8013a12:	1a09      	subs	r1, r1, r0
 8013a14:	459c      	cmp	ip, r3
 8013a16:	bf88      	it	hi
 8013a18:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013a1c:	eba3 030c 	sub.w	r3, r3, ip
 8013a20:	4432      	add	r2, r6
 8013a22:	4640      	mov	r0, r8
 8013a24:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013a28:	f1be 0e01 	subs.w	lr, lr, #1
 8013a2c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a34:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013a38:	d1db      	bne.n	80139f2 <__ieee754_sqrt+0xba>
 8013a3a:	430b      	orrs	r3, r1
 8013a3c:	d006      	beq.n	8013a4c <__ieee754_sqrt+0x114>
 8013a3e:	1c50      	adds	r0, r2, #1
 8013a40:	bf13      	iteet	ne
 8013a42:	3201      	addne	r2, #1
 8013a44:	3401      	addeq	r4, #1
 8013a46:	4672      	moveq	r2, lr
 8013a48:	f022 0201 	bicne.w	r2, r2, #1
 8013a4c:	1063      	asrs	r3, r4, #1
 8013a4e:	0852      	lsrs	r2, r2, #1
 8013a50:	07e1      	lsls	r1, r4, #31
 8013a52:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013a56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013a5a:	bf48      	it	mi
 8013a5c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013a60:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013a64:	4614      	mov	r4, r2
 8013a66:	e781      	b.n	801396c <__ieee754_sqrt+0x34>
 8013a68:	0ad9      	lsrs	r1, r3, #11
 8013a6a:	3815      	subs	r0, #21
 8013a6c:	055b      	lsls	r3, r3, #21
 8013a6e:	2900      	cmp	r1, #0
 8013a70:	d0fa      	beq.n	8013a68 <__ieee754_sqrt+0x130>
 8013a72:	02cd      	lsls	r5, r1, #11
 8013a74:	d50a      	bpl.n	8013a8c <__ieee754_sqrt+0x154>
 8013a76:	f1c2 0420 	rsb	r4, r2, #32
 8013a7a:	fa23 f404 	lsr.w	r4, r3, r4
 8013a7e:	1e55      	subs	r5, r2, #1
 8013a80:	4093      	lsls	r3, r2
 8013a82:	4321      	orrs	r1, r4
 8013a84:	1b42      	subs	r2, r0, r5
 8013a86:	e78a      	b.n	801399e <__ieee754_sqrt+0x66>
 8013a88:	4610      	mov	r0, r2
 8013a8a:	e7f0      	b.n	8013a6e <__ieee754_sqrt+0x136>
 8013a8c:	0049      	lsls	r1, r1, #1
 8013a8e:	3201      	adds	r2, #1
 8013a90:	e7ef      	b.n	8013a72 <__ieee754_sqrt+0x13a>
 8013a92:	4680      	mov	r8, r0
 8013a94:	e7bd      	b.n	8013a12 <__ieee754_sqrt+0xda>
 8013a96:	bf00      	nop
 8013a98:	7ff00000 	.word	0x7ff00000

08013a9c <_init>:
 8013a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a9e:	bf00      	nop
 8013aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aa2:	bc08      	pop	{r3}
 8013aa4:	469e      	mov	lr, r3
 8013aa6:	4770      	bx	lr

08013aa8 <_fini>:
 8013aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aaa:	bf00      	nop
 8013aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aae:	bc08      	pop	{r3}
 8013ab0:	469e      	mov	lr, r3
 8013ab2:	4770      	bx	lr
